[{"/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/index.js":"1","/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/reportWebVitals.js":"2","/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/App.js":"3","/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/Context/ChatProvider.js":"4","/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/Pages/Homepage.js":"5","/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/Pages/Chatpage.js":"6","/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/Authentication/Login.js":"7","/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/Authentication/Signup.js":"8","/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/Chatbox.js":"9","/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/MyChats.js":"10","/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/miscellaneous/SideDrawer.js":"11","/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/miscellaneous/GroupChatModal.js":"12","/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/ChatLoading.js":"13","/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/SingleChat.js":"14","/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/miscellaneous/ProfileModal.js":"15","/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/config/ChatLogics.js":"16","/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/userAvatar/UserListItem.js":"17","/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/userAvatar/UserBadgeItem.js":"18","/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/PaymentChoice.js":"19","/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/Pay.js":"20","/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/miscellaneous/UpdateGroupChatModal.js":"21","/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/ScrollableChat.js":"22","/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/payment/PayToken.js":"23","/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/payment/RequestToken.js":"24","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/index.js":"25","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/reportWebVitals.js":"26","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/App.js":"27","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/Context/ChatProvider.js":"28","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/Pages/Chatpage.js":"29","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/Pages/Homepage.js":"30","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/Chatbox.js":"31","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/MyChats.js":"32","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/miscellaneous/SideDrawer.js":"33","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/Authentication/Signup.js":"34","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/Authentication/Login.js":"35","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/SingleChat.js":"36","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/ChatLoading.js":"37","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/miscellaneous/GroupChatModal.js":"38","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/config/ChatLogics.js":"39","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/userAvatar/UserListItem.js":"40","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/miscellaneous/ProfileModal.js":"41","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/ScrollableChat.js":"42","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/miscellaneous/UpdateGroupChatModal.js":"43","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/PaymentChoice.js":"44","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/Pay.js":"45","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/userAvatar/UserBadgeItem.js":"46","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/PayNft.js":"47","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/payment/RequestToken.js":"48","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/payment/PayToken.js":"49","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/snap/export.js":"50","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/contracts/frontend-interaction/senderc20.js":"51","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/contracts/frontend-interaction/priceFeed.js":"52","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/GroupPayment.js":"53","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/CrowdFunding.js":"54","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/MultiSig.js":"55","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/Pay2.js":"56","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/PayNft2.js":"57","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/payment/MultiToken.js":"58","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/payment/RequestCrowd.js":"59","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/payment/Nft.js":"60","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/contracts/frontend-interaction/Multisig.js":"61","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/contracts/frontend-interaction/Mutisig_confirm.js":"62","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/contracts/frontend-interaction/Multisig_execute.js":"63","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/contracts/frontend-interaction/Crowdfund_launch.js":"64","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/contracts/frontend-interaction/SendNft.js":"65","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/miscellaneous/GroupBox1.js":"66","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/interact.js":"67"},{"size":736,"mtime":1636629652000,"results":"68","hashOfConfig":"69"},{"size":362,"mtime":1636629652000,"results":"70","hashOfConfig":"69"},{"size":342,"mtime":1676302049522,"results":"71","hashOfConfig":"69"},{"size":1034,"mtime":1676198359339,"results":"72","hashOfConfig":"69"},{"size":1997,"mtime":1676341459675,"results":"73","hashOfConfig":"69"},{"size":774,"mtime":1636629652000,"results":"74","hashOfConfig":"69"},{"size":2917,"mtime":1676341542638,"results":"75","hashOfConfig":"69"},{"size":5591,"mtime":1676341369949,"results":"76","hashOfConfig":"69"},{"size":613,"mtime":1675505948026,"results":"77","hashOfConfig":"69"},{"size":4009,"mtime":1675576023644,"results":"78","hashOfConfig":"69"},{"size":6382,"mtime":1676198417160,"results":"79","hashOfConfig":"69"},{"size":4990,"mtime":1636629652000,"results":"80","hashOfConfig":"69"},{"size":589,"mtime":1636629652000,"results":"81","hashOfConfig":"69"},{"size":8565,"mtime":1675869673953,"results":"82","hashOfConfig":"69"},{"size":1713,"mtime":1675571251367,"results":"83","hashOfConfig":"69"},{"size":1337,"mtime":1636629652000,"results":"84","hashOfConfig":"69"},{"size":876,"mtime":1636629652000,"results":"85","hashOfConfig":"69"},{"size":526,"mtime":1636629652000,"results":"86","hashOfConfig":"69"},{"size":2202,"mtime":1675593533659,"results":"87","hashOfConfig":"69"},{"size":8792,"mtime":1675867163371,"results":"88","hashOfConfig":"69"},{"size":7163,"mtime":1675506885310,"results":"89","hashOfConfig":"69"},{"size":2953,"mtime":1675870080249,"results":"90","hashOfConfig":"69"},{"size":2199,"mtime":1675862610184,"results":"91","hashOfConfig":"69"},{"size":3382,"mtime":1675870098499,"results":"92","hashOfConfig":"69"},{"size":736,"mtime":1636629652000,"results":"93","hashOfConfig":"94"},{"size":362,"mtime":1636629652000,"results":"95","hashOfConfig":"94"},{"size":769,"mtime":1676757011610,"results":"96","hashOfConfig":"94"},{"size":1034,"mtime":1676198359339,"results":"97","hashOfConfig":"94"},{"size":862,"mtime":1676714554505,"results":"98","hashOfConfig":"94"},{"size":2810,"mtime":1676830180545,"results":"99","hashOfConfig":"94"},{"size":700,"mtime":1676714224587,"results":"100","hashOfConfig":"94"},{"size":8658,"mtime":1676804310971,"results":"101","hashOfConfig":"94"},{"size":7569,"mtime":1676811274555,"results":"102","hashOfConfig":"94"},{"size":5696,"mtime":1676801976228,"results":"103","hashOfConfig":"94"},{"size":3017,"mtime":1676827722182,"results":"104","hashOfConfig":"94"},{"size":12089,"mtime":1676827154997,"results":"105","hashOfConfig":"94"},{"size":589,"mtime":1636629652000,"results":"106","hashOfConfig":"94"},{"size":4990,"mtime":1636629652000,"results":"107","hashOfConfig":"94"},{"size":1411,"mtime":1676804861098,"results":"108","hashOfConfig":"94"},{"size":800,"mtime":1676743795007,"results":"109","hashOfConfig":"94"},{"size":1735,"mtime":1676356505568,"results":"110","hashOfConfig":"94"},{"size":5516,"mtime":1676801030855,"results":"111","hashOfConfig":"94"},{"size":7163,"mtime":1675506885310,"results":"112","hashOfConfig":"94"},{"size":2425,"mtime":1676751362219,"results":"113","hashOfConfig":"94"},{"size":15061,"mtime":1676805884905,"results":"114","hashOfConfig":"94"},{"size":526,"mtime":1636629652000,"results":"115","hashOfConfig":"94"},{"size":8437,"mtime":1676816904845,"results":"116","hashOfConfig":"94"},{"size":3734,"mtime":1676830297854,"results":"117","hashOfConfig":"94"},{"size":2214,"mtime":1676715426542,"results":"118","hashOfConfig":"94"},{"size":611,"mtime":1676641755403,"results":"119","hashOfConfig":"94"},{"size":1556,"mtime":1676821278366,"results":"120","hashOfConfig":"94"},{"size":595,"mtime":1676757639704,"results":"121","hashOfConfig":"94"},{"size":2499,"mtime":1676785131218,"results":"122","hashOfConfig":"94"},{"size":12233,"mtime":1676814668216,"results":"123","hashOfConfig":"94"},{"size":4010,"mtime":1676789004335,"results":"124","hashOfConfig":"94"},{"size":17811,"mtime":1676826982772,"results":"125","hashOfConfig":"94"},{"size":8034,"mtime":1676801435920,"results":"126","hashOfConfig":"94"},{"size":2571,"mtime":1676794147060,"results":"127","hashOfConfig":"94"},{"size":4136,"mtime":1676799613677,"results":"128","hashOfConfig":"94"},{"size":2239,"mtime":1676801298896,"results":"129","hashOfConfig":"94"},{"size":1339,"mtime":1676826717119,"results":"130","hashOfConfig":"94"},{"size":665,"mtime":1676809169105,"results":"131","hashOfConfig":"94"},{"size":598,"mtime":1676809277629,"results":"132","hashOfConfig":"94"},{"size":925,"mtime":1676814683302,"results":"133","hashOfConfig":"94"},{"size":1592,"mtime":1676820395920,"results":"134","hashOfConfig":"94"},{"size":567,"mtime":1676823585236,"results":"135","hashOfConfig":"94"},{"size":1188,"mtime":1676827285933,"results":"136","hashOfConfig":"94"},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},"myuihg",{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"139"},{"filePath":"167","messages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"169","messages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"171","messages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"173","messages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"139"},{"filePath":"178","messages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"139"},{"filePath":"181","messages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"183","messages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"139"},{"filePath":"186","messages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"139"},{"filePath":"189","messages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"139"},{"filePath":"192","messages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"194"},"adwqft",{"filePath":"195","messages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"194"},{"filePath":"197","messages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"194"},{"filePath":"200","messages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"194"},{"filePath":"202","messages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"194"},{"filePath":"204","messages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"206","messages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"194"},{"filePath":"208","messages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"194"},{"filePath":"211","messages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"194"},{"filePath":"214","messages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"194"},{"filePath":"217","messages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"219","messages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"221","messages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"194"},{"filePath":"223","messages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"194"},{"filePath":"225","messages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"194"},{"filePath":"228","messages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"194"},{"filePath":"231","messages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"194"},{"filePath":"233","messages":"234","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"194"},{"filePath":"236","messages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"194"},{"filePath":"238","messages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"194"},{"filePath":"241","messages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"194"},{"filePath":"244","messages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"194"},{"filePath":"246","messages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"194"},{"filePath":"249","messages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"251","messages":"252","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"194"},{"filePath":"254","messages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"194"},{"filePath":"257","messages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"194"},{"filePath":"260","messages":"261","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"194"},{"filePath":"262","messages":"263","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"194"},{"filePath":"265","messages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":34,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267","usedDeprecatedRules":"194"},{"filePath":"268","messages":"269","errorCount":0,"fatalErrorCount":0,"warningCount":37,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"194"},{"filePath":"271","messages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":36,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"273","messages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"194"},{"filePath":"276","messages":"277","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"194"},{"filePath":"279","messages":"280","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281","usedDeprecatedRules":"194"},{"filePath":"282","messages":"283","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284","usedDeprecatedRules":"194"},{"filePath":"285","messages":"286","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"287","messages":"288","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"289","usedDeprecatedRules":"194"},{"filePath":"290","messages":"291","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"292","usedDeprecatedRules":"194"},{"filePath":"293","messages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295","usedDeprecatedRules":"194"},{"filePath":"296","messages":"297","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298","usedDeprecatedRules":"194"},{"filePath":"299","messages":"300","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"301","messages":"302","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/index.js",[],["303","304"],"/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/reportWebVitals.js",[],"/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/App.js",[],"/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/Context/ChatProvider.js",[],"/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/Pages/Homepage.js",["305","306","307","308"],"/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/Pages/Chatpage.js",[],"/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/Authentication/Login.js",["309"],"/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/Authentication/Signup.js",["310","311","312","313","314"],"/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/Chatbox.js",[],"/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/MyChats.js",[],"/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/miscellaneous/SideDrawer.js",[],"/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/miscellaneous/GroupChatModal.js",[],"/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/ChatLoading.js",[],"/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/SingleChat.js",["315"],"import { FormControl } from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport \"./SingleChat.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\n\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport Pay from \"./Pay\";\nimport PaymentChoice from \"./PaymentChoice\";\n\nconst ENDPOINT = \"http://localhost:5000\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\nvar socket, selectedChatCompare;\n\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      setLoading(true);\n\n      const { data } = await axios.get(\n        `/api/message/${selectedChat._id}`,\n        config\n      );\n      setMessages(data);\n      setLoading(false);\n\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  const sendMessage = async (event) => {\n    if (event.key === \"Enter\" && newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        console.log(newMessage + \" \" + selectedChat);\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n            payment: false,\n            payment_mode:\"false\",\n            chat_mode:\"private\",\n            payment_type:\"false\",\n            currency:\"false\",\n          },\n          config\n        );\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n    console.log(socket);\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    fetchMessages();\n\n    selectedChatCompare = selectedChat;\n    // eslint-disable-next-line\n  }, [selectedChat]);\n\n  const refAgain = () => {\n    fetchMessages();\n  };\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  return (\n    <>\n      {selectedChat ? (\n        <>\n          <Text\n            fontSize={{ base: \"28px\", md: \"30px\" }}\n            pb={3}\n            px={2}\n            w=\"100%\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent={{ base: \"space-between\" }}\n            alignItems=\"center\"\n            color=\"white\"\n          >\n            <IconButton\n              d={{ base: \"flex\", md: \"none\" }}\n              icon={<ArrowBackIcon />}\n              onClick={() => setSelectedChat(\"\")}\n            />\n            {messages &&\n              (!selectedChat.isGroupChat ? (\n                <>\n                  {getSender(user, selectedChat.users)}\n                  <ProfileModal\n                    user={getSenderFull(user, selectedChat.users)}\n                  />\n                </>\n              ) : (\n                <>\n                  {selectedChat.chatName.toUpperCase()}\n                  <UpdateGroupChatModal\n                    fetchMessages={fetchMessages}\n                    fetchAgain={fetchAgain}\n                    setFetchAgain={setFetchAgain}\n                  />\n                </>\n              ))}\n          </Text>\n          <Box\n            d=\"flex\"\n            flexDir=\"column\"\n            justifyContent=\"flex-end\"\n            p={3}\n            bg=\"rgb(66,69,73)\"\n            w=\"100%\"\n            h=\"100%\"\n            borderRadius=\"lg\"\n            overflowY=\"hidden\"\n          >\n            {loading ? (\n              <Spinner\n                size=\"xl\"\n                w={20}\n                h={20}\n                alignSelf=\"center\"\n                margin=\"auto\"\n              />\n            ) : (\n              <div className=\"messages\">\n                <ScrollableChat messages={messages} refAgain={refAgain} />\n              </div>\n            )}\n\n            <FormControl\n              onKeyDown={sendMessage}\n              id=\"first-name\"\n              isRequired\n              mt={3}\n            >\n              {istyping ? (\n                <div>\n                  <Lottie\n                    options={defaultOptions}\n                    // height={50}\n                    width={70}\n                    style={{ marginBottom: 15, marginLeft: 0 }}\n                  />\n                </div>\n              ) : (\n                <></>\n              )}\n              <div style={{ margin: \"auto\", display: \"flex\" }}>\n                <Input\n                  variant=\"filled\"\n                  bg=\"rgb(54,57,62)\"\n                  color=\"white\"\n                  focusBorderColor=\"rgb(54,57,62)\"\n                  placeholder=\"Enter a message..\"\n                  value={newMessage}\n                  width=\"97%\"\n                  onChange={typingHandler}\n                  _hover={{ bg: \"rgb(54,57,62)\" }}\n                />\n                <PaymentChoice\n                  fetchAgain={fetchAgain}\n                  setFetchAgain={setFetchAgain}\n                  fetchMessages={fetchMessages}\n                  refAgain={refAgain}\n                />\n              </div>\n            </FormControl>\n          </Box>\n        </>\n      ) : (\n        // to get socket.io on same page\n        <Box\n          d=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          h=\"100%\"\n          w=\"100%\"\n          bg=\"rgb(54,57,62)\"\n        >\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\" color=\"white\">\n            Click on a user to start chatting\n          </Text>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default SingleChat;\n","/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/miscellaneous/ProfileModal.js",[],"/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/config/ChatLogics.js",[],"/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/userAvatar/UserListItem.js",[],"/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/userAvatar/UserBadgeItem.js",[],"/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/PaymentChoice.js",["316","317","318","319"],"import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  IconButton,\n  Text,\n  Image,\n} from \"@chakra-ui/react\";\nimport Pay from \"./Pay\";\nimport './Pay.css';\nimport { FaDollarSign } from \"react-icons/fa\";\n\nconst PaymentChoice = ({\n  children,\n  fetchAgain,\n  setFetchAgain,\n  fetchMessages,\n  refAgain,\n}) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      {children ? (\n        <span onClick={onOpen}>{children}</span>\n      ) : (\n        <IconButton\n          d={{ base: \"flex\" }}\n          icon={<FaDollarSign />}\n          onClick={onOpen}\n          colorScheme=\"grey\"\n          _hover={{ bg: \"rgb(2, 163, 34);\" }}\n          bg=\"rgb(114,137,218)\"\n          borderRadius=\"50%\"\n          marginLeft=\"8px\"\n        />\n      )}\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent h=\"410px\" bg={\"rgb(30,33,36)\"} color=\"white\">\n          <ModalCloseButton />\n          <ModalBody\n            d=\"flex\"\n            flexDir=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n          >\n            \n              <div className=\"payment_choice\">\n                <Pay\n                  fetchAgain={fetchAgain}\n                  setFetchAgain={setFetchAgain}\n                  fetchMessages={fetchMessages}\n                  refAgain={refAgain}\n                  toClose={onClose}\n                ></Pay>\n              </div>\n              <div className=\"payment_choice\">\n               \n                <Pay\n                  fetchAgain={fetchAgain}\n                  setFetchAgain={setFetchAgain}\n                  fetchMessages={fetchMessages}\n                  refAgain={refAgain}\n                  toClose={onClose}\n                ></Pay>\n              </div>\n            \n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose} bg=\"rgb(114,137,218)\"\n              marginRight={\"10px\"}>Close</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default PaymentChoice;\n","/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/Pay.js",["320","321","322","323","324","325","326","327","328","329","330","331","332","333","334","335","336","337","338"],"import { React } from \"react\";\nimport \"./Pay.css\";\nimport { FaDollarSign } from \"react-icons/fa\";\nimport {\n  Input,\n  InputGroup,\n  InputLeftElement,\n  InputRightElement,\n} from \"@chakra-ui/input\";\n\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  Text,\n  Image,\n  Select,\n} from \"@chakra-ui/react\";\nimport { FormControl } from \"@chakra-ui/form-control\";\nimport { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport \"./SingleChat.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\n\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst ENDPOINT = \"http://localhost:5000\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\nvar socket, selectedChatCompare;\n\nconst Pay = ({\n  fetchAgain,\n  setFetchAgain,\n  fetchMessages,\n  refAgain,\n  toClose,\n}) => {\n  const [messages, setMessages] = useState([]);\n  const [currency, setCurrency] = useState(\"WAT\");\n  const [payment_type, setPaymentType] = useState(\"token\");\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const sendMessage = async (event) => {\n    if (newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        console.log(newMessage + \" \" + selectedChat);\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n            payment: true,\n            payment_mode:\"pay\",\n            chat_mode:\"private\",\n            payment_type:payment_type,\n            currency:currency,\n          },\n          config\n        );\n        console.log(data);\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n      refAgain();\n    }\n  };\n\n  const sendMessageReq = async (event) => {\n    if (newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        console.log(newMessage + \" \" + selectedChat);\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n            payment: true,\n            payment_mode:\"request\",\n            chat_mode:\"private\",\n            payment_type:payment_type,\n            currency:currency,\n          },\n          config\n        );\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n      refAgain();\n    }\n  };\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n    console.log(socket);\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      <Button width=\"100%\" height=\"100%\" margin={\"0px\"} padding=\"0px\">\n        <p class=\"choice_label\">TOKEN</p>\n        <IconButton\n          d={{ base: \"flex\" }}\n          icon={<FaDollarSign />}\n          onClick={onOpen}\n          colorScheme=\"grey\"\n          _hover={{ bg: \"rgb(68, 201, 34);\" }}\n          bg=\"rgb(114,137,218)\"\n          color={\"white\"}\n          width=\"100%\"\n          height=\"100%\"\n        />\n      </Button>\n\n      <Modal\n        size=\"lg\"\n        onClose={() => {\n          onClose();\n          toClose();\n        }}\n        isOpen={isOpen}\n        isCentered\n      >\n        <ModalOverlay />\n        <ModalContent h=\"410px\" bg={\"rgb(30,33,36)\"} color=\"white\">\n          <ModalHeader\n            fontSize=\"40px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            margin={\"5px\"}\n            justifyContent=\"center\"\n          >\n            {\"Payment\"}\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            \n              <FormControl\n                onSubmit={sendMessage}\n                id=\"first-name\"\n                isRequired\n                mt={3}\n                width={\"100%\"}\n                margin={\"auto\"}\n              >\n                <div style={{\"width\":\"100%\",\"margin\":\"auto\",}}>\n                <Input\n                    placeholder=\"Enter amount $\"\n                    type=\"number\"\n                    variant=\"filled\"\n                    bg=\"rgb(54,57,62)\"\n                    color=\"white\"\n                    focusBorderColor=\"rgb(54,57,62)\"\n                    value={newMessage}\n                    width=\"50%\"\n                    textAlign={\"Center\"}\n                    marginLeft={\"25%\"}\n                    marginRight={\"auto\"}\n                    marginBottom={\"15px\"}\n                    height={\"100px\"}\n                    fontSize=\"20px\"\n                    onChange={typingHandler}\n                    _hover={{ bg: \"rgb(54,57,62)\" }}\n                  />\n                </div>\n                  \n                  <Select placeholder=\"select the token\" size=\"lg\" width={\"80%\"} margin={\"auto\"}>\n                    <option value=\"option1\">ETH</option>\n                    <option value=\"option2\">WAT</option>\n                    <option value=\"option3\">ONI</option>\n                  </Select>\n                \n              </FormControl>\n           \n          </ModalBody>\n          <ModalFooter>\n            <Button\n              onClick={() => {\n                onClose();\n                sendMessageReq();\n                toClose();\n              }}\n              bg=\"rgb(114,137,218)\"\n              marginRight={\"10px\"}\n            >\n              Request\n            </Button>\n            <Button\n              onClick={() => {\n                onClose();\n                sendMessage();\n                toClose();\n              }}\n              bg=\"rgb(114,137,218)\"\n            >\n              Pay\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default Pay;\n","/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/miscellaneous/UpdateGroupChatModal.js",[],"/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/ScrollableChat.js",["339","340"],"import { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../config/ChatLogics\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport \"./Pay.css\";\nimport PayToken from \"./payment/PayToken\";\nimport RequestToken from \"./payment/RequestToken\";\n\nconst ScrollableChat = ({ messages ,refAgain}) => {\n  const { user } = ChatState();\n\n  return (\n    <ScrollableFeed>\n      {messages &&\n        messages.map((m, i) =>\n          m.payment ? (\n            m.payment_type == \"token\" ? (\n              m.payment_mode == \"request\" ? (\n                <RequestToken\n                  sender_name={m.sender.name}\n                  sender_pic={m.sender.pic}\n                  sender_id={m.sender._id}\n                  content={m.content}\n                  id={m._id}\n                  messages={messages}\n                  m={m}\n                  i={i}\n                  user_id={user._id}\n                  refAgain={refAgain}\n                ></RequestToken>\n              ) : (\n                <PayToken\n                  sender_name={m.sender.name}\n                  sender_pic={m.sender.pic}\n                  sender_id={m.sender._id}\n                  content={m.content}\n                  id={m._id}\n                  messages={messages}\n                  m={m}\n                  i={i}\n                  user_id={user._id}\n                ></PayToken>\n              )\n            ) : (\n              <div></div>\n            )\n          ) : (\n            <div style={{ display: \"flex\" }} key={m._id}>\n              {(isSameSender(messages, m, i, user._id) ||\n                isLastMessage(messages, i, user._id)) && (\n                <Tooltip\n                  label={m.sender.name}\n                  placement=\"bottom-start\"\n                  hasArrow\n                >\n                  <Avatar\n                    mt=\"7px\"\n                    mr={1}\n                    size=\"sm\"\n                    cursor=\"pointer\"\n                    name={m.sender.name}\n                    src={m.sender.pic}\n                  />\n                </Tooltip>\n              )}\n              <span\n                style={{\n                  backgroundColor: `${\n                    m.sender._id === user._id\n                      ? \"rgb(54,57,62)\"\n                      : \"rgb(40,43,48)\"\n                  }`,\n                  marginLeft: isSameSenderMargin(messages, m, i, user._id),\n                  marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\n                  borderRadius: \"20px\",\n                  padding: \"5px 15px\",\n                  maxWidth: \"75%\",\n                  color: \"white\",\n                }}\n              >\n                {m.content}\n              </span>\n            </div>\n          )\n        )}\n    </ScrollableFeed>\n  );\n};\n\nexport default ScrollableChat;\n","/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/payment/PayToken.js",["341"],"import {React} from 'react';\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../../config/ChatLogics\";\nimport \"../Pay.css\";\n\n\nconst PayToken=(props)=>{\n\n  var receiver=\"karupaiya\";\n  var amount=props.content;\n  var status=\"Paid\";\n  var date=\"Dec 30\";\n\n\n    return(\n        <div style={{ display: \"flex\" }} key={props.id}>\n              {(isSameSender(props.messages, props.m, props.i, props.user_id) ||\n                isLastMessage(props.messages, props.i, props.user_id)) && (\n                <Tooltip\n                  label={props.sender_name}\n                  placement=\"bottom-start\"\n                  hasArrow\n                >\n                  <Avatar\n                    mt=\"7px\"\n                    mr={1}\n                    size=\"sm\"\n                    cursor=\"pointer\"\n                    name={props.sender_name}\n                    src={props.sender_pic}\n                  />\n                </Tooltip>\n              )}\n              <div\n                style={{\n                  backgroundColor: `${\n                    props.sender_id === props.user_id\n                      ? \"rgb(54,57,62)\"\n                      : \"rgb(40,43,48)\"\n                  }`,\n                  marginLeft: isSameSenderMargin(props.messages, props.m, props.i, props.user_id),\n                  marginTop: isSameUser(props.messages, props.m, props.i, props.user_id) ? 3 : 10,\n                  borderRadius: \"20px\",\n                  padding: \"5px 15px\",\n                  maxWidth: \"75%\",\n                  minWidth:\"230px\",\n                  color: \"white\",\n                  height:\"140px\",\n                }}\n              >\n                <p class=\"payment_user\">Payment to {receiver}</p>\n                <p class=\"payment_amount\">${amount}</p>\n                <div style={{\"display\":\"flex\"}}>\n                  <p class=\"payment_status\">{status}&ensp;&ensp;</p>\n                  <p class=\"payment_date\">{date}</p>\n                </div>\n              </div>\n            </div>\n    );\n}\n\n\nexport default PayToken;","/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/payment/RequestToken.js",["342","343","344","345","346","347","348"],"import {React} from 'react';\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../../config/ChatLogics\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport \"../Pay.css\";\nimport axios from \"axios\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\n\n\nconst RequestToken=(props)=>{\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n    const toast = useToast();\n\n  const updateMessages = async () => {\n   \n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      console.log(\"updating\"+props.id);\n      const { data } = await axios.post(\n        `/api/message/update`,\n        {\n          messageId:props.id\n        },\n        config\n      );\n      console.log(\"updating\");\n      console.log(data);\n      \n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n   props.refAgain();\n  };\n\n\n\n  var receiver=\"karupaiya\";\n  var amount=props.content;\n  var status=\"Requested\";\n  var date=\"Dec 30\";\n\n\n\n    return(\n        <div style={{ display: \"flex\" }} key={props.id}>\n              {(isSameSender(props.messages, props.m, props.i, props.user_id) ||\n                isLastMessage(props.messages, props.i, props.user_id)) && (\n                <Tooltip\n                  label={props.sender_name}\n                  placement=\"bottom-start\"\n                  hasArrow\n                >\n                  <Avatar\n                    mt=\"7px\"\n                    mr={1}\n                    size=\"sm\"\n                    cursor=\"pointer\"\n                    name={props.sender_name}\n                    src={props.sender_pic}\n                  />\n                </Tooltip>\n              )}\n              <div\n                style={{\n                  backgroundColor: `${\n                    props.sender_id === props.user_id\n                    ? \"rgb(54,57,62)\"\n                    : \"rgb(40,43,48)\"\n                  }`,\n                  marginLeft: isSameSenderMargin(props.messages, props.m, props.i, props.user_id),\n                  marginTop: isSameUser(props.messages, props.m, props.i, props.user_id) ? 3 : 10,\n                  borderRadius: \"20px\",\n                  padding: \"5px 15px\",\n                  maxWidth: \"75%\",\n                  minWidth:\"230px\",\n                  color: \"white\",\n                  height:props.sender_id === props.user_id?\"140px\":\"180px\",\n                }}\n              >\n                <p class=\"payment_user\">Requested to {receiver}</p>\n                <p class=\"payment_amount\">${amount}</p>\n                <div style={{\"display\":\"flex\"}}>\n                  <p class=\"payment_status\">{status}&ensp;&ensp;</p>\n                  <p class=\"payment_date\">{date}</p>\n                </div>\n                <div>\n                  {!(props.sender_id === props.user_id) && <button class={\"pay_btn\"} onClick={updateMessages}>pay</button>}\n                </div>\n              </div>\n            </div>\n    );\n}\n\n\nexport default RequestToken;","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/index.js",[],["349","350"],"/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/reportWebVitals.js",[],"/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/App.js",["351","352"],"import \"./App.css\";\nimport Homepage from \"./Pages/Homepage\";\nimport { Route } from \"react-router-dom\";\nimport Chatpage from \"./Pages/Chatpage\";\nimport { useEffect } from \"react\";\n\nfunction App() {\n  const Moralis = require(\"moralis\").default;\n  const { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\n  useEffect(async () => {\n    await Moralis.start({\n      apiKey:\n        \"KbdbJsvE5jGcuXLs6X37RMF7z6eW07l9IA8gx2ahPT9FYGCUhEffWRY8DRr9lyQ7\",\n    });\n  }, []);\n//\"T5yjNDWdaF7Re1aS1kTgLl4cVWdFjiCx1cY1NVgxJtr7wQox2N1xdJXXV2DfamTB\"\n\n  return (\n    <div className=\"App\">\n      <Route path=\"/\" component={Homepage} exact />\n      <Route path=\"/chats\">\n        <Chatpage Moralis={Moralis} EvmChain={EvmChain} />\n      </Route>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/Context/ChatProvider.js",[],"/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/Pages/Chatpage.js",[],"/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/Pages/Homepage.js",["353","354","355","356"],"/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/Chatbox.js",[],"/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/MyChats.js",["357","358","359"],"import { AddIcon } from \"@chakra-ui/icons\";\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { getSender } from \"../config/ChatLogics\";\nimport ChatLoading from \"./ChatLoading\";\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport { Button } from \"@chakra-ui/button\";\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport { Input } from \"@chakra-ui/input\";\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerHeader,\n  DrawerOverlay,\n} from \"@chakra-ui/modal\";\nimport { useHistory } from \"react-router-dom\";\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport UserListItem from \"./userAvatar/UserListItem\";\nimport { HiUserGroup } from \"react-icons/hi\";\n\nconst MyChats = ({ fetchAgain }) => {\n  const [loggedUser, setLoggedUser] = useState();\n\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\n\n  const toast = useToast();\n\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [loadingChat, setLoadingChat] = useState(false);\n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const history = useHistory();\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"userInfo\");\n    history.push(\"/\");\n  };\n\n  const handleSearch = async () => {\n    if (!search) {\n      toast({\n        title: \"Please Enter something in search\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top-left\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const accessChat = async (userId) => {\n    console.log(userId);\n\n    try {\n      setLoadingChat(true);\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\n\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\n      setSelectedChat(data);\n      setLoadingChat(false);\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Error fetching the chat\",\n        description: error.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const fetchChats = async () => {\n    // console.log(user._id);\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(\"/api/chat\", config);\n      setChats(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the chats\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  useEffect(async() => {\n    const result=await JSON.parse(localStorage.getItem(\"userInfo\"))\n    console.log(result);\n    setLoggedUser(result);\n    fetchChats();\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\n      flexDir=\"column\"\n      alignItems=\"center\"\n      p={3}\n      bg=\"rgb(54,57,62)\"\n      w={{ base: \"100%\", md: \"32%\" }}\n      className={\"font1\"}\n    >\n      <Box\n        pb={3}\n        px={3}\n        fontSize={{ base: \"28px\", md: \"30px\" }}\n        fontFamily=\"Work sans\"\n        d=\"flex\"\n        w=\"100%\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        color=\"white\"\n      >\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\n          <Button\n            variant=\"ghost\"\n            onClick={onOpen}\n            _hover={{ bg: \"#e2b2ff\", color: \"black\" }}\n          >\n            <i className=\"fas fa-search\"></i>\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4} className={\"font1\"}>\n              Search User\n            </Text>\n          </Button>\n        </Tooltip>\n        <GroupChatModal>\n          <Button\n            d=\"flex\"\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\n            backgroundColor=\"rgb(40,43,48)\"\n            _hover={{ bg: \"#e2b2ff\", color: \"black\" }}\n          >\n            <HiUserGroup />\n            &ensp;+\n          </Button>\n        </GroupChatModal>\n      </Box>\n      <Box\n        d=\"flex\"\n        flexDir=\"column\"\n        p={3}\n        bg=\"rgb(54,57,62)\"\n        w=\"100%\"\n        h=\"100%\"\n        borderRadius=\"lg\"\n        overflowY=\"hidden\"\n      >\n        {chats ? (\n          <Stack overflowY=\"scroll\">\n            {chats.map((chat) => (\n              <Box\n                onClick={() => setSelectedChat(chat)}\n                cursor=\"pointer\"\n                bg={selectedChat === chat ? \"#e2b2ff\" : \"rgb(40,43,48)\"}\n                color={selectedChat === chat ? \"black\" : \"white\"}\n                px={3}\n                py={2}\n                borderRadius=\"lg\"\n                key={chat._id}\n                _hover={{ bg: \"#e2b2ff;\", color: \"black\" }}\n              >\n                <Text>\n                  {!chat.isGroupChat? (\n                    getSender(loggedUser, chat.users).substring(0, 8) +\n                    \".....\" +\n                    getSender(loggedUser, chat.users).substring(\n                      getSender(loggedUser, chat.users).length - 5\n                    )\n                 \n                  ) : (\n                    <div style={{\"display\":\"flex\",justifyContent:\"space-between\"}}>\n                      {chat.chatName}\n                      {/* <HiUserGroup /> */}\n                      <p style={{color:\"#e2b2ff\"}}>#grp</p>\n                    </div>\n                  )}\n                </Text>\n                {chat.latestMessage &&\n                  (!chat.isGroupChat ? (\n                    <Text fontSize=\"xs\" color={\"gray\"}>\n                      {chat.latestMessage.content.length > 50\n                        ? chat.latestMessage.content.substring(0, 51) + \"...\"\n                        : chat.latestMessage.content}\n                    </Text>\n                  ) : (\n                    <Text fontSize=\"xs\" color={\"gray\"}>\n                      <b>{chat.latestMessage.sender.name} : </b>\n                      {chat.latestMessage.content.length > 50\n                        ? chat.latestMessage.content.substring(0, 51) + \"...\"\n                        : chat.latestMessage.content}\n                    </Text>\n                  ))}\n              </Box>\n            ))}\n          </Stack>\n        ) : (\n          <ChatLoading />\n        )}\n      </Box>\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen} >\n        <DrawerOverlay />\n        <DrawerContent\n          bg=\"blackAlpha.400\"\n          backdropFilter=\"auto\"\n          backdropBlur=\"6px\"\n          color=\"white\"\n          className={\"font1\"}\n        >\n          <DrawerHeader>Search Users</DrawerHeader>\n          <DrawerBody>\n            <Box d=\"flex\" pb={2}>\n              <Input\n                placeholder=\"Search by wallet address\"\n                mr={2}\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n                _focus={{ borderColor: \"#e2b2ff;\" }}\n              />\n              <Button\n                onClick={handleSearch}\n                bg=\"white\"\n                color=\"black\"\n                _hover={{ bg: \"#77fcc7\" }}\n              >\n                Go\n              </Button>\n            </Box>\n            {loading ? (\n              <ChatLoading />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => accessChat(user._id)}\n                />\n              ))\n            )}\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </Box>\n  );\n};\n\nexport default MyChats;\n","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/miscellaneous/SideDrawer.js",["360","361","362","363","364","365","366","367","368","369","370","371","372","373","374","375","376","377","378","379","380"],"import { Button } from \"@chakra-ui/button\";\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport img from \"./profile.png\";\nimport { FaUser } from \"react-icons/fa\";\nimport img1 from '../../logo.png'\nimport {\n  Menu,\n  MenuButton,\n  MenuDivider,\n  MenuItem,\n  MenuList,\n} from \"@chakra-ui/menu\";\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerHeader,\n  DrawerOverlay,\n} from \"@chakra-ui/modal\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport ChatLoading from \"../ChatLoading\";\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport ProfileModal from \"./ProfileModal\";\nimport NotificationBadge from \"react-notification-badge\";\nimport { Effect } from \"react-notification-badge\";\nimport { getSender } from \"../../config/ChatLogics\";\nimport UserListItem from \"../userAvatar/UserListItem\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nfunction SideDrawer() {\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [loadingChat, setLoadingChat] = useState(false);\n\n  const {\n    setSelectedChat,\n    user,\n    notification,\n    setNotification,\n    chats,\n    setChats,\n  } = ChatState();\n\n  const toast = useToast();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const history = useHistory();\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"userInfo\");\n    localStorage.removeItem(\"address\");\n    history.push(\"/\");\n  };\n\n  const handleSearch = async () => {\n    if (!search) {\n      toast({\n        title: \"Please Enter something in search\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top-left\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const accessChat = async (userId) => {\n    console.log(userId);\n\n    try {\n      setLoadingChat(true);\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\n\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\n      setSelectedChat(data);\n      setLoadingChat(false);\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Error fetching the chat\",\n        description: error.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <Box\n        d=\"flex\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        bg=\"rgb(30,33,36)\"\n        w=\"100%\"\n        p=\"5px 10px 5px 10px\"\n        color=\"white\"\n        className=\"font1\"\n      >\n        {/* <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\n          <Button\n            variant=\"ghost\"\n            onClick={onOpen}\n            _hover={{ bg: \"rgb(3, 252, 173);\", color: \"black\" }}\n          >\n            <i className=\"fas fa-search\"></i>\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\n              Search User\n            </Text>\n          </Button>\n        </Tooltip> */}\n        <img src={img1} style={{width:\"100px\",height:\"100px\",objectFit:\"cover\",position:\"absolute\",\"top\":\"-18px\",\"left\":\"0px\"}}></img>\n        <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\n          {/* Talk-A-Tive */}\n        </Text>\n        <div>\n          <Menu>\n            <MenuButton p={1}>\n              <NotificationBadge\n                count={notification.length}\n                effect={Effect.SCALE}\n              />\n              <BellIcon fontSize=\"2xl\" m={1} />\n            </MenuButton>\n            <MenuList\n              pl={2}\n              zIndex={\"10001\"}\n              _hover={{ bg: \"rgb(3, 252, 173);\", color: \"black\" }}\n              bg=\"rgb(30,33,36)\"\n              border={\"0px\"}\n              color={\"white\"}\n            >\n              {!notification.length && \"No New Messages\"}\n              {notification.map((notif) => (\n                <MenuItem\n                  key={notif._id}\n                  onClick={() => {\n                    setSelectedChat(notif.chat);\n                    setNotification(notification.filter((n) => n !== notif));\n                  }}\n                >\n                  {notif.chat.isGroupChat\n                    ? `New Message in ${notif.chat.chatName}`\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\n                </MenuItem>\n              ))}\n            </MenuList>\n          </Menu>\n          <Menu>\n            <MenuButton\n              as={Button}\n              rightIcon={<ChevronDownIcon />}\n              _hover={{ bg: \"rgb(3, 252, 173);\", color: \"black\" }}\n              bg=\"rgb(30,33,36)\"\n              border={\"0px\"}\n            >\n              <FaUser />\n            </MenuButton>\n            <MenuList bg=\"rgb(66,69,73)\" border={\"0px\"} zIndex={\"10001\"}>\n              <ProfileModal user={user}>\n                <MenuItem\n                  _hover={{ bg: \"rgb(3, 252, 173);\", color: \"black\" }}\n                  _focus={{ bg: \"rgb(3, 252, 173);\", color: \"black\" }}\n                  border={\"0px\"}\n                >\n                  My Profile\n                </MenuItem>{\" \"}\n              </ProfileModal>\n              <MenuDivider />\n              <MenuItem\n                onClick={logoutHandler}\n                _hover={{ bg: \"rgb(3, 252, 173);\", color: \"black\" }}\n                _focus={{ bg: \"rgb(3, 252, 173);\", color: \"black\" }}\n                border={\"0px\"}\n              >\n                Logout\n              </MenuItem>\n            </MenuList>\n          </Menu>\n        </div>\n      </Box>\n\n      {/* <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\n          <DrawerBody>\n            <Box d=\"flex\" pb={2}>\n              <Input\n                placeholder=\"Search by name or email\"\n                mr={2}\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n              />\n              <Button onClick={handleSearch}>Go</Button>\n            </Box>\n            {loading ? (\n              <ChatLoading />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => accessChat(user._id)}\n                />\n              ))\n            )}\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer> */}\n    </>\n  );\n}\n\nexport default SideDrawer;\n","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/Authentication/Signup.js",["381","382","383","384","385","386"],"\nimport { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router\";\n\nconst Signup = (props) => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const history = useHistory();\n  const[walletAddr,setWalletAddr]=useState(props.walletAddr);\n\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [confirmpassword, setConfirmpassword] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [pic, setPic] = useState();\n  const [picLoading, setPicLoading] = useState(false);\n\n  const submitHandler = async () => {\n    setPicLoading(true);\n    if (!walletAddr || !password || !confirmpassword) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n    if (password !== confirmpassword) {\n      toast({\n        title: \"Passwords Do Not Match\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(walletAddr, password, pic);\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n      const { data } = await axios.post(\n        \"/api/user\",\n        {\n          name:walletAddr,\n          email:walletAddr,\n          password:password,\n          pic:pic,\n        },\n        config\n      );\n      console.log(data);\n      toast({\n        title: \"Registration Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setPicLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n    }\n  };\n\n  const postDetails = (pics) => {\n    setPicLoading(true);\n    if (pics === undefined) {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(pics);\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\n      const data = new FormData();\n      data.append(\"file\", pics);\n      data.append(\"upload_preset\", \"chat-app\");\n      data.append(\"cloud_name\", \"piyushproj\");\n      fetch(\"https://api.cloudinary.com/v1_1/piyushproj/image/upload\", {\n        method: \"post\",\n        body: data,\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          setPic(data.url.toString());\n          console.log(data.url.toString());\n          setPicLoading(false);\n        })\n        .catch((err) => {\n          console.log(err);\n          setPicLoading(false);\n        });\n    } else {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n  };\n\n  return (\n    <VStack spacing=\"5px\">\n      <FormControl id=\"first-name\" isRequired>\n        <FormLabel>Name</FormLabel>\n        <Input\n          value={walletAddr}\n          disabled\n        />\n      </FormControl>\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Wallet Address</FormLabel>\n        <Input\n          value={walletAddr}\n          disabled\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter Password\"\n            onChange={(e) => setPassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick} color=\"black\"\n        bg=\"white\">\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Confirm Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Confirm password\"\n            onChange={(e) => setConfirmpassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick} color=\"black\"\n        bg=\"white\">\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      {/* <FormControl id=\"pic\">\n        <FormLabel>Upload your Picture</FormLabel>\n        <Input\n          type=\"file\"\n          p={1.5}\n          accept=\"image/*\"\n          onChange={(e) => postDetails(e.target.files[0])}\n        />\n      </FormControl> */}\n      <Button\n        \n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={picLoading}\n        color=\"black\"\n        bg=\"white\"\n      >\n        Sign Up\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Signup;\n","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/Authentication/Login.js",["387"],"/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/SingleChat.js",["388","389","390","391","392"],"/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/ChatLoading.js",[],"/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/miscellaneous/GroupChatModal.js",[],"/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/config/ChatLogics.js",["393","394"],"export const isSameSenderMargin = (messages, m, i, userId) => {\n  // console.log(i === messages.length - 1);\n\n  if (\n    i < messages.length - 1 &&\n    messages[i + 1].sender._id === m.sender._id &&\n    messages[i].sender._id !== userId\n  )\n    return 37;\n  else if (\n    (i < messages.length - 1 &&\n      messages[i + 1].sender._id !== m.sender._id &&\n      messages[i].sender._id !== userId) ||\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\n  )\n    return 0;\n  else return \"auto\";\n};\n\nexport const isSameSender = (messages, m, i, userId) => {\n  return (\n    i < messages.length - 1 &&\n    (messages[i + 1].sender._id !== m.sender._id ||\n      messages[i + 1].sender._id === undefined) &&\n    messages[i].sender._id !== userId\n  );\n};\n\nexport const isLastMessage = (messages, i, userId) => {\n  return (\n    i === messages.length - 1 &&\n    messages[messages.length - 1].sender._id !== userId &&\n    messages[messages.length - 1].sender._id\n  );\n};\n\nexport const isSameUser = (messages, m, i) => {\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\n};\n\nexport const getSender = (loggedUser, users) => {\n  if(users[0]!=undefined && loggedUser!=undefined){\n    return users[0]._id === loggedUser._id ? users[1].name : users[0].name;\n  }\n  return \"\";\n  \n};\n\nexport const getSenderFull = (loggedUser, users) => {\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\n};\n","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/userAvatar/UserListItem.js",["395"],"import { Avatar } from \"@chakra-ui/avatar\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nconst UserListItem = ({ handleFunction ,key,user}) => {\n \n\n  return (\n    <Box\n      onClick={handleFunction}\n      cursor=\"pointer\"\n      bg=\"rgb(54,57,62)\"\n      _hover={{ bg: \"#e2b2ff;\", color: \"black\" }}\n      w=\"100%\"\n      d=\"flex\"\n      alignItems=\"center\"\n      color=\"white\"\n      px={3}\n      py={2}\n      mb={2}\n      borderRadius=\"lg\"\n    >\n      <Avatar\n        mr={2}\n        size=\"sm\"\n        cursor=\"pointer\"\n        name={user.name}\n        src={user.pic}\n      />\n      <Box>\n        <Text>{user.name.substring(0,8)+\".....\"+user.name.substring(user.name.length-8)}</Text>\n      </Box>\n    </Box>\n  );\n};\n\nexport default UserListItem;\n","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/miscellaneous/ProfileModal.js",[],"/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/ScrollableChat.js",["396","397","398","399","400"],"import { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../config/ChatLogics\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport \"./Pay.css\";\nimport MultiToken from \"./payment/MultiToken\";\nimport Nft from \"./payment/Nft\";\nimport PayToken from \"./payment/PayToken\";\nimport RequestCrowd from \"./payment/RequestCrowd\";\nimport RequestToken from \"./payment/RequestToken\";\n\nconst ScrollableChat = ({ messages, refAgain }) => {\n  const { user } = ChatState();\n\n  return (\n    <ScrollableFeed>\n      {messages &&\n        messages.map((m, i) =>\n          m.payment ? (\n            m.chat_mode == \"private\" ? (\n              m.payment_type == \"token\" ? (\n                m.payment_mode == \"request\" ? (\n                  <RequestToken\n                    sender_name={m.sender.name}\n                    sender_pic={m.sender.pic}\n                    sender_id={m.sender._id}\n                    content={m.content}\n                    id={m._id}\n                    messages={messages}\n                    m={m}\n                    i={i}\n                    user_id={user._id}\n                    refAgain={refAgain}\n                    note={m.note}\n                    currency={m.currency}\n                    token_address={m.token_address}\n                    date={m.createdAt}\n                  ></RequestToken>\n                ) : (\n                  <PayToken\n                    sender_name={m.sender.name}\n                    sender_pic={m.sender.pic}\n                    sender_id={m.sender._id}\n                    content={m.content}\n                    id={m._id}\n                    messages={messages}\n                    m={m}\n                    i={i}\n                    user_id={user._id}\n                    note={m.note}\n                    currency={m.currency}\n                    date={m.createdAt}\n                  ></PayToken>\n                )\n              ) : (\n                <Nft\n                  sender_name={m.sender.name}\n                  sender_pic={m.sender.pic}\n                  sender_id={m.sender._id}\n                  content={m.content}\n                  id={m._id}\n                  messages={messages}\n                  m={m}\n                  i={i}\n                  user_id={user._id}\n                  note={m.note}\n                  currency={m.currency}\n                  date={m.createdAt}\n                ></Nft>\n              )\n            ) : m.payment_type == \"token\" ? (\n              <MultiToken\n                sender_name={m.sender.name}\n                sender_pic={m.sender.pic}\n                sender_id={m.sender._id}\n                content={m.content}\n                id={m._id}\n                messages={messages}\n                m={m}\n                i={i}\n                user_id={user._id}\n                note={m.note}\n                currency={m.currency}\n                date={m.createdAt}\n                to={m.token_address}\n              ></MultiToken>\n            ) : m.payment_type == \"NFT\" ? (\n              <Nft\n                sender_name={m.sender.name}\n                sender_pic={m.sender.pic}\n                sender_id={m.sender._id}\n                content={m.content}\n                id={m._id}\n                messages={messages}\n                m={m}\n                i={i}\n                user_id={user._id}\n                note={m.note}\n                currency={m.currency}\n                date={m.createdAt}\n              ></Nft>\n            ) : (\n              <RequestCrowd\n                sender_name={m.sender.name}\n                sender_pic={m.sender.pic}\n                sender_id={m.sender._id}\n                content={m.content}\n                id={m._id}\n                messages={messages}\n                m={m}\n                i={i}\n                user_id={user._id}\n                note={m.note}\n                currency={m.currency}\n                date={m.createdAt}\n                to={m.token_address}\n                last={m.payment_mode}\n              />\n            )\n          ) : (\n            <div style={{ display: \"flex\" }} key={m._id}>\n              {(isSameSender(messages, m, i, user._id) ||\n                isLastMessage(messages, i, user._id)) && (\n                <Tooltip\n                  label={m.sender.name}\n                  placement=\"bottom-start\"\n                  hasArrow\n                >\n                  <Avatar\n                    mt=\"7px\"\n                    mr={1}\n                    size=\"sm\"\n                    cursor=\"pointer\"\n                    name={m.sender.name}\n                    src={m.sender.pic}\n                  />\n                </Tooltip>\n              )}\n              <span\n                style={{\n                  backgroundColor: `${\n                    m.sender._id === user._id\n                      ? \"rgb(54,57,62)\"\n                      : \"rgb(40,43,48)\"\n                  }`,\n                  marginLeft: isSameSenderMargin(messages, m, i, user._id),\n                  marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\n                  borderRadius: \"20px\",\n                  padding: \"5px 15px\",\n                  maxWidth: \"75%\",\n                  color: \"white\",\n                }}\n              >\n                {m.content}\n              </span>\n            </div>\n          )\n        )}\n    </ScrollableFeed>\n  );\n};\n\nexport default ScrollableChat;\n","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/miscellaneous/UpdateGroupChatModal.js",[],"/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/PaymentChoice.js",["401","402","403","404","405","406","407"],"import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  IconButton,\n  Text,\n  Image,\n} from \"@chakra-ui/react\";\nimport Pay from \"./Pay\";\nimport \"./Pay.css\";\nimport { FaDollarSign } from \"react-icons/fa\";\nimport PayNft from \"./PayNft\";\n\nconst PaymentChoice = ({\n  children,\n  fetchAgain,\n  setFetchAgain,\n  fetchMessages,\n  refAgain,\n  Moralis,\n  EvmChain,\n  sender_id,\n}) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      {children ? (\n        <span onClick={onOpen}>{children}</span>\n      ) : (\n        <IconButton\n          d={{ base: \"flex\" }}\n          icon={<FaDollarSign />}\n          onClick={onOpen}\n          colorScheme=\"grey\"\n          _hover={{ bg: \"rgb(3, 252, 173);\", color: \"black\" }}\n          bg=\"rgb(48, 48, 48)\"\n          borderRadius=\"50%\"\n          marginLeft=\"8px\"\n          color=\"white\"\n        />\n      )}\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent\n          h=\"280px\"\n          bg=\"transparent\"\n          backdropFilter=\"auto\"\n          backdropBlur=\"6px\"\n          color=\"white\"\n          padding={\"10px\"}\n        >\n          <ModalBody\n            d=\"flex\"\n            flexDir=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n            \n          >\n            <div className=\"payment_choice one\">\n              <Pay\n                fetchAgain={fetchAgain}\n                setFetchAgain={setFetchAgain}\n                fetchMessages={fetchMessages}\n                refAgain={refAgain}\n                toClose={onClose}\n                Moralis={Moralis}\n                EvmChain={EvmChain}\n                sender_id={sender_id}\n\n              ></Pay>\n            </div>\n            <div className=\"payment_choice two\">\n              <PayNft\n                fetchAgain={fetchAgain}\n                setFetchAgain={setFetchAgain}\n                fetchMessages={fetchMessages}\n                refAgain={refAgain}\n                toClose={onClose}\n                Moralis={Moralis}\n                EvmChain={EvmChain}\n                sender_id={sender_id}\n                \n              ></PayNft>\n            </div>\n          </ModalBody>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default PaymentChoice;\n","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/Pay.js",["408","409","410","411","412","413","414","415","416","417","418","419","420","421","422","423","424","425","426","427","428","429","430","431","432","433","434","435","436","437","438","439"],"import { React } from \"react\";\nimport \"./Pay.css\";\nimport { FaDollarSign } from \"react-icons/fa\";\nimport {\n  Input,\n  InputGroup,\n  InputLeftElement,\n  InputRightElement,\n} from \"@chakra-ui/input\";\nimport img from \"../eth1.png\";\nimport { BsArrowRight } from \"react-icons/bs\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  Text,\n  Image,\n  Select,\n  useStyles,\n} from \"@chakra-ui/react\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport \"./SingleChat.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\nimport priceFeed from \"../contracts/frontend-interaction/priceFeed\";\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nimport senderc20 from \"../contracts/frontend-interaction/senderc20\";\n\nconst ENDPOINT = \"http://localhost:5000\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\nvar socket, selectedChatCompare;\n\nconst Pay = ({\n  fetchAgain,\n  setFetchAgain,\n  fetchMessages,\n  refAgain,\n  toClose,\n  Moralis,\n  sender_id,\n}) => {\n  const [messages, setMessages] = useState([]);\n  const [currency, setCurrency] = useState(\"\");\n  const [payment_type, setPaymentType] = useState(\"token\");\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n  const [chain, setChain] = useState(\"\");\n  const [token_address, setTokenAddress] = useState(\"\");\n  const [note, setNote] = useState(\"\");\n  const [owner_address, setOwner_address] = useState(\n   localStorage.getItem(\"address\")\n  );\n  const [bal, setBal] = useState(\"\");\n  const [usd, setUsd] = useState(0);\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const sendMessage = async (event) => \n  {\n    await senderc20(\n      token_address,\n      sender_id,\n      newMessage,\n      \"0x0C9d33186f7D87A94cBA10F3083BB208A49c1647\",\n      note\n    );\n\n    //console.log(token_address+\" \"+sender_id+\" \"+newMessage);\n\n    if (newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        console.log(newMessage + \" \" + selectedChat);\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n            payment: true,\n            payment_mode: \"pay\",\n            chat_mode: \"private\",\n            payment_type: payment_type,\n            currency: currency,\n            receiver_id: sender_id,\n            note: note,\n            token_address: token_address,\n          },\n          config\n        );\n        console.log(data);\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n      refAgain();\n    }\n  };\n\n  const sendMessageReq = async (event) => {\n    if (newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        console.log(newMessage + \" \" + selectedChat);\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n            payment: true,\n            payment_mode: \"request\",\n            chat_mode: \"private\",\n            payment_type: payment_type,\n            currency: currency,\n            receiver_id: owner_address,\n            note: note,\n            token_address: token_address,\n          },\n          config\n        );\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n      refAgain();\n    }\n  };\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n    console.log(socket);\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const [options, setOptions] = useState([]);\n\n  useEffect(async () => {\n    const { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\n    const address = localStorage.getItem(\"address\");\n\n    const chain = EvmChain.MUMBAI;\n\n    if (Moralis != undefined) {\n      const response = await Moralis.EvmApi.token.getWalletTokenBalances({\n        address,\n        chain,\n      });\n\n      console.log(response.toJSON());\n      setOptions(response.toJSON());\n    }\n  }, [Moralis]);\n\n  const options2 = options.map((d) => {\n    return (\n      <option\n        className=\"font1\"\n        value={\n          d.symbol + \"|\" + d.token_address + \"|\" + Math.pow(10, -18) * d.balance\n        }\n      >\n        {d.symbol}\n      </option>\n    );\n  });\n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  useEffect(async () => {\n    const result = await priceFeed();\n    setUsd(result);\n  }, []);\n\n  return (\n    <>\n      <Button\n        width=\"100%\"\n        height=\"100%\"\n        margin={\"0px\"}\n        padding=\"0px\"\n        className=\"font1\"\n        _focus={{ outline: \"none\" }}\n        _hover={{ transform: \"scale(1.09)\" }}\n        borderRadius={\"0px\"}\n      >\n        <p class=\"choice_label1 font2\">TOKEN</p>\n        <IconButton\n          d={{ base: \"flex\" }}\n          onClick={onOpen}\n          bg=\"linear-gradient(125deg,transparent,rgba(0,0,0,255))\"\n          colorScheme=\"grey\"\n          color={\"white\"}\n          width=\"100%\"\n          height=\"100%\"\n          border={\"0px\"}\n          zIndex={\"500\"}\n          borderRadius={\"0px\"}\n        />\n        <img className={\"choice_img2\"} src={img}></img>\n      </Button>\n\n      <Modal\n        size=\"lg\"\n        onClose={() => {\n          onClose();\n          toClose();\n        }}\n        isOpen={isOpen}\n        isCentered\n      >\n        <ModalOverlay />\n        <ModalContent\n          h=\"470px\"\n          bg={\"rgb(30,33,36)\"}\n          color=\"white\"\n          className={\"font1\"}\n        >\n          <ModalHeader\n            fontSize=\"30px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            <p id={\"payment\"}>Transfer Token</p>\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <FormControl\n              onSubmit={sendMessage}\n              id=\"first-name\"\n              isRequired\n              mt={3}\n              width={\"100%\"}\n              margin={\"auto\"}\n            >\n              {/* <FormLabel>Select Chain</FormLabel>\n              <div\n                style={{\n                  display: \"flex\",\n                  backgroundColor: \"rgb(54, 57, 62)\",\n                  paddingTop: \"15px\",\n                  borderRadius: \"10px\",\n                }}\n                \n              >\n                <Select\n                  placeholder=\"chain\"\n                  width={\"35%\"}\n                  margin={\"auto\"}\n                  name=\"chain1\"\n                  outline={\"0px\"}\n                  border={\"0px\"}\n                  marginBottom={\"15px\"}\n                  height={\"100%\"}\n                  fontSize={\"20px\"}\n                  _focus={{ border: \"0px\" }}\n                  onChange={(event) => {\n                    setChain(event.target.value);\n                  }}\n                >\n                  <option value={\"MATIC\"}>MATIC</option>\n                  <option value={\"ETH\"}>ETH</option>\n                </Select>\n                <BsArrowRight className=\"arrow\"></BsArrowRight>\n                <Select\n                  placeholder=\"chain\"\n                  width={\"35%\"}\n                  margin={\"auto\"}\n                  name=\"chain2\"\n                  outline={\"0px\"}\n                  fontSize={\"20px\"}\n                  border={\"0px\"}\n                  marginBottom={\"15px\"}\n                  height={\"100%\"}\n                  _focus={{ border: \"0px\" }}\n                  onChange={(event) => {\n                    setChain(event.target.value);\n                  }}\n                >\n                  <option value={\"MATIC\"}>MATIC</option>\n                  <option value={\"ETH\"}>ETH</option>\n                </Select>\n              </div> */}\n              <div\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"space-between\",\n                  marginTop: \"10px\",\n                }}\n              >\n                <FormLabel>Select Token</FormLabel>\n                <p>Bal:{bal == \"\" ? \"--\" : bal + \" \" + currency}</p>\n              </div>\n              <div className={\"form-pay2\"}>\n                <Select\n                  placeholder=\"token\"\n                  width={\"35%\"}\n                  margin={\"auto\"}\n                  name=\"currency\"\n                  outline={\"0px\"}\n                  border={\"0px\"}\n                  marginBottom={\"15px\"}\n                  marginTop={\"7px\"}\n                  height={\"100%\"}\n                  fontSize={\"20px\"}\n                  _focus={{ border: \"0px\" }}\n                  className={\"font1\"}\n                  onChange={(event) => {\n                    if (event.target.value.split(\"|\")[0] != \"\") {\n                      setTokenAddress(event.target.value.split(\"|\")[1]);\n                      setCurrency(event.target.value.split(\"|\")[0]);\n                      setBal(event.target.value.split(\"|\")[2].substring(0, 8));\n                    } else {\n                      setBal(\"\");\n                    }\n                  }}\n                >\n                  {options2}\n                </Select>\n                <div>\n                  <Input\n                    placeholder=\"Enter amount\"\n                    type=\"number\"\n                    variant=\"filled\"\n                    bg=\"rgba(54,57,62,0)\"\n                    color=\"white\"\n                    focusBorderColor=\"rgb(54,57,62)\"\n                    value={newMessage}\n                    textAlign={\"right\"}\n                    width=\"100%\"\n                    marginBottom={\"15px\"}\n                    height={\"35px\"}\n                    fontSize=\"19px\"\n                    onChange={typingHandler}\n                    _focus={{ border: \"0px\" }}\n                    _hover={{ bg: \"transparent\" }}\n                  />\n                  <p\n                    style={{\n                      textAlign: \"right\",\n                      fontStyle: \"italic\",\n                      fontSize: \"14px\",\n                    }}\n                  >\n                    {currency==\"LINK\" && (<p>~&ensp;{parseInt(newMessage) * usd}&ensp;$</p> )}\n                    {currency!=\"LINK\" && (<p>~&ensp;NaN&ensp;$</p> )}\n                  </p>\n                </div>\n              </div>\n\n              <div\n                className={\"form-pay\"}\n                style={{ width: \"fit-content\", margin: \"auto\" }}\n              >\n                <Input\n                  placeholder=\"Add a Note\"\n                  type=\"text\"\n                  variant=\"filled\"\n                  bg=\"rgb(54,57,62)\"\n                  color=\"white\"\n                  focusBorderColor=\"rgb(54,57,62)\"\n                  value={note}\n                  width=\"55%\"\n                  marginLeft={\"55px\"}\n                  borderRadius={\"50px\"}\n                  height={\"45px\"}\n                  fontSize=\"12px\"\n                  textAlign={\"center\"}\n                  onChange={(event) => {\n                    setNote(event.target.value);\n                  }}\n                  _hover={{ bg: \"rgb(54,57,62)\" }}\n                />\n              </div>\n            </FormControl>\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              onClick={() => {\n                onClose();\n                sendMessageReq();\n                toClose();\n              }}\n              backgroundColor=\"rgb(40,43,48)\"\n              marginRight={\"10px\"}\n              _hover={{ bg: \"rgb(255, 223, 64)\", color: \"black\" }}\n              borderRadius={\"30px\"}\n            >\n              Request\n            </Button>\n            <Button\n              onClick={() => {\n                onClose();\n                sendMessage();\n                toClose();\n              }}\n              backgroundColor=\"rgb(40,43,48)\"\n              _hover={{ bg: \"rgb(3, 252, 173)\", color: \"black\" }}\n              borderRadius={\"30px\"}\n            >\n              Pay\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default Pay;\n","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/userAvatar/UserBadgeItem.js",[],"/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/PayNft.js",["440","441","442","443","444","445","446","447","448","449","450","451","452","453","454","455","456","457","458","459","460","461","462","463","464","465","466","467","468","469","470"],"import { React } from \"react\";\nimport \"./Pay.css\";\nimport { FaDollarSign } from \"react-icons/fa\";\nimport {\n  Input,\n  InputGroup,\n  InputLeftElement,\n  InputRightElement,\n} from \"@chakra-ui/input\";\n\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  Text,\n  Image,\n  Select,\n} from \"@chakra-ui/react\";\nimport { FormControl } from \"@chakra-ui/form-control\";\nimport { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport \"./SingleChat.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\n\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport sendnft from \"../contracts/frontend-interaction/SendNft\";\n\nconst ENDPOINT = \"http://localhost:5000\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\nvar socket, selectedChatCompare;\n\nconst PayNft = ({\n  fetchAgain,\n  setFetchAgain,\n  fetchMessages,\n  refAgain,\n  toClose,\n  Moralis,\n  sender_id,\n}) => {\n  const [messages, setMessages] = useState([]);\n  const [currency, setCurrency] = useState(\"\");\n  const [payment_type, setPaymentType] = useState(\"token\");\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n  const [options, setOptions] = useState([]);\n  const [imageUrl, setImageUrl] = useState(\"\");\n  const [token_id,setTokenId]=useState(\"\");\n  const [token_address,setTokenAddress]=useState(\"\");\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const sendMessage = async (event) => {\n\n    await sendnft(sender_id,token_address,token_id,localStorage.getItem(\"address\"));\n\n    if (newMessage || imageUrl) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        console.log(newMessage + \" \" + selectedChat);\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: currency,\n            chatId: selectedChat,\n            payment: true,\n            payment_mode: \"pay\",\n            chat_mode: \"private\",\n            payment_type: \"NFT\",\n            currency: \"empty\",\n            receiver_id: sender_id,\n            note: imageUrl,\n            token_address:\"empty\",\n          },\n          config\n        );\n        console.log(data);\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n      refAgain();\n    }\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n    console.log(socket);\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  useEffect(async () => {\n    const { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\n    const address = localStorage.getItem(\"address\");\n\n    const chain = EvmChain.MUMBAI;\n\n    if (Moralis != undefined) {\n      const response = await Moralis.EvmApi.nft.getWalletNFTs({\n        address,\n        chain,\n      });\n\n      console.log(response.toJSON());\n      setOptions(response.toJSON().result);\n    }\n  }, [Moralis]);\n\n  const options2 = options\n    .filter((d) => {\n      if (JSON.parse(d.metadata) != null) {\n        return true;\n      } else {\n        return false;\n      }\n    })\n    .map((d) => {\n      return (\n        <option value={d.name + \"|\" + JSON.parse(d.metadata).image+\"|\"+d.token_id+\"|\"+d.token_address}>\n          {d.name}&ensp;&ensp;(tokenId:{d.token_id})\n        </option>\n      );\n    });\n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      <Button\n        width=\"100%\"\n        height=\"100%\"\n        margin={\"0px\"}\n        padding=\"0px\"\n        _hover={{ transform: \"scale(1.09)\" }}\n      >\n        <p class=\"choice_label font2\">NFT</p>\n        <IconButton\n          d={{ base: \"flex\" }}\n          onClick={onOpen}\n          colorScheme=\"grey\"\n          bg=\"linear-gradient(125deg,rgba(0,0,0,255),transparent)\"\n          width=\"100%\"\n          height=\"100%\"\n          zIndex={\"500\"}\n          border={\"0px\"}\n          borderRadius={\"0px\"}\n        />\n        <img\n          className={\"choice_img\"}\n          src=\"https://nftnow.com/wp-content/uploads/2022/02/Doodles-Guide-Feature-Image.png\"\n        ></img>\n      </Button>\n\n      <Modal\n        size=\"lg\"\n        onClose={() => {\n          onClose();\n          toClose();\n        }}\n        isOpen={isOpen}\n        isCentered\n      >\n        <ModalOverlay />\n        <ModalContent\n          h=\"560px\"\n          bg={\"rgb(30,33,36)\"}\n          color=\"white\"\n          className=\"font1\"\n        >\n          <ModalHeader\n            fontSize=\"40px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            margin={\"5px\"}\n            justifyContent=\"center\"\n          >\n            <p id={\"payment\"} style={{ fontSize: \"20px\" }}>\n              Transfer NFT\n            </p>\n          </ModalHeader>\n         \n          <ModalBody>\n            <div className=\"imageNft\">\n              {imageUrl == \"\" && <p>select a NFT</p>}\n              {imageUrl != \"\" && <img src={imageUrl}></img>}\n            </div>\n            <FormControl\n              onSubmit={sendMessage}\n              id=\"first-name\"\n              isRequired\n              mt={3}\n              width={\"100%\"}\n              margin={\"auto\"}\n            >\n              <Select\n                placeholder=\"select the NFT\"\n                size=\"lg\"\n                fontSize={\"15px\"}\n                width={\"80%\"}\n                margin={\"auto\"}\n                name=\"currency\"\n                onChange={(event) => {\n                  console.log(event.target);\n                  console.log(event.target.value.split(\"|\")[0]);\n                  setImageUrl(event.target.value.split(\"|\")[1]);\n                  setTokenId(event.target.value.split(\"|\")[2]);\n                  setTokenAddress(event.target.value.split(\"|\")[3]);\n                  setCurrency(event.target.value);\n                }}\n                _focus={{outline:\"none\"}}\n              >\n                {options2}\n              </Select>\n            </FormControl>\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              onClick={() => {\n                onClose();\n                sendMessage();\n                toClose();\n              }}\n              backgroundColor=\"rgb(40,43,48)\"\n              _hover={{ bg: \"rgb(3, 252, 173)\", color: \"black\" }}\n              borderRadius={\"30px\"}\n              className=\"font1\"\n            >\n              Send\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default PayNft;\n","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/payment/RequestToken.js",["471","472","473","474","475","476","477","478"],"/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/payment/PayToken.js",["479"],"import { React } from \"react\";\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../../config/ChatLogics\";\nimport \"../Pay.css\";\n\nconst PayToken = (props) => {\n  var receiver = \"karupaiya\";\n  var amount = props.content;\n  var status = \"Paid\";\n  var date = new Date(props.date);\n  var note = props.note;\n  const month=[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]\n\n  return (\n    <div style={{ display: \"flex\" }} key={props.id}>\n      {(isSameSender(props.messages, props.m, props.i, props.user_id) ||\n        isLastMessage(props.messages, props.i, props.user_id)) && (\n        <Tooltip label={props.sender_name} placement=\"bottom-start\" hasArrow>\n          <Avatar\n            mt=\"7px\"\n            mr={1}\n            size=\"sm\"\n            cursor=\"pointer\"\n            name={props.sender_name}\n            src={props.sender_pic}\n          />\n        </Tooltip>\n      )}\n      <div\n        style={{\n          backgroundColor: `${\n            props.sender_id === props.user_id\n              ? \"rgb(54,57,62)\"\n              : \"rgb(40,43,48)\"\n          }`,\n          marginLeft: isSameSenderMargin(\n            props.messages,\n            props.m,\n            props.i,\n            props.user_id\n          ),\n          marginTop: isSameUser(props.messages, props.m, props.i, props.user_id)\n            ? 7\n            : 10,\n          borderRadius: \"20px\",\n          padding: \"5px 15px\",\n          maxWidth: \"75%\",\n          minWidth: \"260px\",\n          color: \"white\",\n          height: \"185px\",\n        }}\n      >\n        <p class=\"payment_user\">Payment to {receiver}</p>\n        <p class=\"payment_note\">{note}</p>\n\n        <p class=\"payment_amount\">\n          {amount}\n          <span className=\"payment_currency\">{props.currency}</span>\n        </p>\n\n        <div style={{ display: \"flex\" }}>\n          <p class=\"payment_status\">{status}&ensp;&ensp;</p>\n          <p class=\"payment_date\">{month[date.getMonth()]}&ensp;{date.getDate()}</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PayToken;\n","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/snap/export.js",["480"],"const snapId = `local:http://localhost:3000/`;\n\nexport async function connect () {\n \n    await window.ethereum.request({\n      method: 'wallet_requestSnaps',\n      params: [{\n        wallet_snap: { [snapId]: {} },\n      }]\n    })\n    send()\n  }\n\n  // here we call the snap's \"hello\" method\nexport async function send () {\n    try {\n      const response = await window.ethereum.request({\n        method: 'wallet_invokeSnap',\n        params: [snapId, {\n          method: 'inApp'\n        }]\n      })\n    } catch (err) {\n      console.error(err)\n      alert('Problem happened: ' + err.message || err)\n    }\n  }\n\n\n  ","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/contracts/frontend-interaction/senderc20.js",["481","482"],"const { ethers} = require(\"ethers\");\nconst { POSClient, use } = require(\"@maticnetwork/maticjs\");\nconst { Web3ClientPlugin } = require(\"@maticnetwork/maticjs-ethers\");\n\n\n\nasync function senderc20(token_address,receiver_address,amount1,sender_address,note) {\n  const contractabi = require(\"../abi/senderc20.json\");\n  const contractaddr = \"0xAAEFCa53e21E85C00B1Db5090fF2EC275b6d4D90\";\n\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  await provider.send(\"eth_requestAccounts\", []);\n  const signer = provider.getSigner();\n\n  const contract_signer = new ethers.Contract(\n    contractaddr,\n    contractabi,\n    signer\n  );\n\n  const owner1 = sender_address;\n\n  console.log(\"1\");\n  use(Web3ClientPlugin);\n\n  const posClient = new POSClient();\n  await posClient.init({\n    network: \"testnet\",\n    version: \"mumbai\",\n    parent: {\n      provider: signer,\n      defaultConfig: {\n        from: owner1,\n      },\n    },\n    child: {\n      provider: signer,\n      defaultConfig: {\n        from: owner1,\n      },\n    },\n  });\n  console.log(\"2\");\n\n  \n  const erc20Token = posClient.erc20(token_address, true);\n  const input0 = \"\"+amount1;\n  const decimals0 = \"18\";\n  const amount = ethers.utils.parseUnits(input0, decimals0);\n  const amounthex = ethers.utils.hexlify(amount);\n  const approveResult = await erc20Token.approve(amounthex, {\n    spenderAddress: contractaddr,\n  });\n  console.log(\"3\");\n\n  \n  const senderc20 = await contract_signer.sendToken(token_address,receiver_address,amount,note,{gasLimit: 210000});\n}\n\nexport default senderc20;\n","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/contracts/frontend-interaction/priceFeed.js",[],"/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/GroupPayment.js",["483","484","485","486","487","488","489","490","491"],"import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  IconButton,\n  Text,\n  Image,\n} from \"@chakra-ui/react\";\nimport Pay from \"./Pay\";\nimport \"./Pay.css\";\nimport { FaDollarSign } from \"react-icons/fa\";\nimport PayNft from \"./PayNft\";\nimport CrowdFunding from \"./CrowdFunding\";\nimport MultiSig from \"./MultiSig\";\n\nconst GroupPayment = ({\n  children,\n  fetchAgain,\n  setFetchAgain,\n  fetchMessages,\n  refAgain,\n  Moralis,\n  EvmChain,\n  sender_id,\n}) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      {children ? (\n        <span onClick={onOpen}>{children}</span>\n      ) : (\n        <IconButton\n          d={{ base: \"flex\" }}\n          icon={<FaDollarSign />}\n          onClick={onOpen}\n          colorScheme=\"grey\"\n          _hover={{ bg: \"rgb(3, 252, 173);\", color: \"black\" }}\n          bg=\"rgb(48, 48, 48)\"\n          borderRadius=\"50%\"\n          marginLeft=\"8px\"\n          color=\"white\"\n        />\n      )}\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent\n          h=\"280px\"\n          bg=\"transparent\"\n          backdropFilter=\"auto\"\n          backdropBlur=\"6px\"\n          color=\"white\"\n          padding={\"10px\"}\n        >\n          <ModalBody\n            d=\"flex\"\n            flexDir=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n            \n          >\n            <div className=\"payment_choice one\">\n              <MultiSig\n                fetchAgain={fetchAgain}\n                setFetchAgain={setFetchAgain}\n                fetchMessages={fetchMessages}\n                refAgain={refAgain}\n                toClose={onClose}\n                Moralis={Moralis}\n                EvmChain={EvmChain}\n                sender_id={sender_id}\n\n              />\n            </div>\n            <div className=\"payment_choice two\">\n              <CrowdFunding\n                fetchAgain={fetchAgain}\n                setFetchAgain={setFetchAgain}\n                fetchMessages={fetchMessages}\n                refAgain={refAgain}\n                toClose={onClose}\n                Moralis={Moralis}\n                EvmChain={EvmChain}\n                sender_id={sender_id}\n                \n              />\n            </div>\n          </ModalBody>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default GroupPayment;\n","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/CrowdFunding.js",["492","493","494","495","496","497","498","499","500","501","502","503","504","505","506","507","508","509","510","511","512","513","514","515","516","517","518","519","520","521","522","523","524","525"],"import { React } from \"react\";\nimport \"./Pay.css\";\nimport { FaDollarSign } from \"react-icons/fa\";\nimport {\n  Input,\n  InputGroup,\n  InputLeftElement,\n  InputRightElement,\n} from \"@chakra-ui/input\";\nimport img from \"../crowd.webp\";\nimport { RiSendPlane2Fill } from \"react-icons/ri\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  Text,\n  Image,\n  Select,\n  useStyles,\n} from \"@chakra-ui/react\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport \"./SingleChat.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\nimport priceFeed from \"../contracts/frontend-interaction/priceFeed\";\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nimport senderc20 from \"../contracts/frontend-interaction/senderc20\";\nimport Crowdfund_launch from \"../contracts/frontend-interaction/Crowdfund_launch\";\n\nconst ENDPOINT = \"http://localhost:5000\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\nvar socket, selectedChatCompare;\n\nconst CrowdFunding = ({\n  fetchAgain,\n  setFetchAgain,\n  fetchMessages,\n  refAgain,\n  toClose,\n  Moralis,\n  sender_id,\n}) => {\n  const [messages, setMessages] = useState([]);\n  const [currency, setCurrency] = useState(\"\");\n  const [payment_type, setPaymentType] = useState(\"token\");\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n  const [chain, setChain] = useState(\"\");\n  const [token_address, setTokenAddress] = useState(\"\");\n  const [note, setNote] = useState(\"\");\n  const [owner_address, setOwner_address] = useState(\n    localStorage.getItem(\"address\")\n  );\n  const [bal, setBal] = useState(\"\");\n  const [usd, setUsd] = useState(0);\n  const [date, setDate] = useState(\"\");\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const sendMessage1 = async (event) => {\n    const temp=new Date();\n    temp.setDate(temp.getDate()+parseInt(date))\n\n    await Crowdfund_launch(newMessage,temp.toUTCString(),token_address);\n   \n    if (newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        console.log(newMessage + \" \" + selectedChat);\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n            payment: true,\n            payment_mode: temp,\n            chat_mode: \"group\",\n            payment_type: \"crowd\",\n            currency: currency,\n            receiver_id: sender_id,\n            note: note,\n            token_address: token_address,\n          },\n          config\n        );\n        console.log(data);\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n      refAgain();\n    }\n  };\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n    console.log(socket);\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const [options, setOptions] = useState([]);\n\n  useEffect(async () => {\n    const { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\n    const address = localStorage.getItem(\"address\");\n\n    const chain = EvmChain.MUMBAI;\n\n    if (Moralis != undefined) {\n      const response = await Moralis.EvmApi.token.getWalletTokenBalances({\n        address,\n        chain,\n      });\n\n      console.log(response.toJSON());\n      setOptions(response.toJSON());\n    }\n  }, [Moralis]);\n\n  const options2 = options.map((d) => {\n    return (\n      <option\n        className=\"font1\"\n        value={\n          d.symbol + \"|\" + d.token_address + \"|\" + Math.pow(10, -18) * d.balance\n        }\n      >\n        {d.symbol}\n      </option>\n    );\n  });\n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  useEffect(async () => {\n    const result = await priceFeed();\n    setUsd(result);\n  }, []);\n\n  return (\n    <>\n      <Button\n        width=\"100%\"\n        height=\"100%\"\n        margin={\"0px\"}\n        padding=\"0px\"\n        className=\"font1\"\n        _focus={{ outline: \"none\" }}\n        _hover={{ transform: \"scale(1.09)\" }}\n        borderRadius={\"0px\"}\n      >\n        <p\n          class=\"choice_label font2\"\n          style={{ fontSize: \"14px\", marginLeft: \"35px\" }}\n        >\n          Crowd Funding\n        </p>\n        <IconButton\n          d={{ base: \"flex\" }}\n          onClick={onOpen}\n          colorScheme=\"grey\"\n          bg=\"linear-gradient(125deg,rgba(0,0,0,255) 10%,transparent)\"\n          width=\"100%\"\n          height=\"100%\"\n          zIndex={\"500\"}\n          border={\"0px\"}\n          borderRadius={\"0px\"}\n        />\n        <img className={\"choice_img2\"} src={img}></img>\n      </Button>\n\n      <Modal\n        size=\"lg\"\n        onClose={() => {\n          onClose();\n          toClose();\n        }}\n        isOpen={isOpen}\n        isCentered\n      >\n        <ModalOverlay />\n        <ModalContent\n          h=\"460px\"\n          bg={\"rgb(30,33,36)\"}\n          color=\"white\"\n          className={\"font1\"}\n        >\n          <ModalBody>\n            <p id={\"payment\"} style={{\"textAlign\":\"center\"}}>CrowdFunding</p>\n            <FormControl\n              id=\"first-name\"\n              isRequired\n              mt={3}\n              width={\"100%\"}\n              margin={\"auto\"}\n            >\n              <div\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"space-between\",\n                  marginTop: \"10px\",\n                }}\n              >\n                <FormLabel>Select Token</FormLabel>\n                <p>Bal:{bal == \"\" ? \"--\" : bal + \" \" + currency}</p>\n              </div>\n              <div className={\"form-pay2\"}>\n                <Select\n                  placeholder=\"token\"\n                  width={\"35%\"}\n                  margin={\"auto\"}\n                  name=\"currency\"\n                  outline={\"0px\"}\n                  border={\"0px\"}\n                  marginBottom={\"15px\"}\n                  marginTop={\"7px\"}\n                  height={\"100%\"}\n                  fontSize={\"20px\"}\n                  _focus={{ border: \"0px\" }}\n                  className={\"font1\"}\n                  onChange={(event) => {\n                    if (event.target.value.split(\"|\")[0] != \"\") {\n                      setTokenAddress(event.target.value.split(\"|\")[1]);\n                      setCurrency(event.target.value.split(\"|\")[0]);\n                      setBal(event.target.value.split(\"|\")[2].substring(0, 8));\n                    } else {\n                      setBal(\"\");\n                    }\n                  }}\n                >\n                  {options2}\n                </Select>\n                <div>\n                  <Input\n                    placeholder=\"Enter goal\"\n                    type=\"number\"\n                    variant=\"filled\"\n                    bg=\"rgba(54,57,62,0)\"\n                    color=\"white\"\n                    focusBorderColor=\"rgb(54,57,62)\"\n                    value={newMessage}\n                    textAlign={\"right\"}\n                    width=\"100%\"\n                    marginBottom={\"15px\"}\n                    height={\"35px\"}\n                    fontSize=\"19px\"\n                    onChange={typingHandler}\n                    _focus={{ border: \"0px\" }}\n                    _hover={{ bg: \"transparent\" }}\n                  />\n                  <p\n                    style={{\n                      textAlign: \"right\",\n                      fontStyle: \"italic\",\n                      fontSize: \"14px\",\n                    }}\n                  >\n                    ~&ensp;{parseInt(newMessage) * usd}&ensp;$\n                  </p>\n                </div>\n              </div>\n\n              \n\n              <p id=\"payment\">Note</p>\n              <Input\n                placeholder=\"Enter a note\"\n                type=\"text\"\n                variant=\"filled\"\n                bg=\"rgb(54,57,62)\"\n                borderRadius={\"10px\"}\n                color=\"white\"\n                focusBorderColor=\"rgb(54,57,62)\"\n                value={note}\n                width=\"100%\"\n                marginBottom={\"15px\"}\n                height={\"35px\"}\n                fontSize=\"15px\"\n                onChange={(event) => {\n                  setNote(event.target.value);\n                }}\n                _focus={{ border: \"0px\" }}\n                _hover={{ bg: \"transparent\" }}\n              />\n\n              <p id=\"payment\">Duration</p>\n              <Input\n                placeholder=\"Enter the duration \"\n                type=\"number\"\n                variant=\"filled\"\n                bg=\"rgb(54,57,62)\"\n                borderRadius={\"10px\"}\n                color=\"white\"\n                focusBorderColor=\"rgb(54,57,62)\"\n                value={date}\n                width=\"100%\"\n                marginBottom={\"15px\"}\n                height={\"35px\"}\n                fontSize=\"15px\"\n                onChange={(event) => {\n                  setDate(event.target.value);\n                }}\n                _focus={{ border: \"0px\" }}\n                _hover={{ bg: \"transparent\" }}\n              />\n            </FormControl>\n            <Button\n              onClick={() => {\n                onClose();\n                sendMessage1();\n                toClose();\n              }}\n              backgroundColor=\"rgb(40,43,48)\"\n              _hover={{ bg: \"rgb(3, 252, 173)\", color: \"black\" }}\n              borderRadius={\"30px\"}\n              width={\"15%\"}\n              marginLeft={\"85%\"}\n              \n            >\n              <RiSendPlane2Fill />\n            </Button>\n          </ModalBody>\n          <ModalFooter></ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default CrowdFunding;\n","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/MultiSig.js",["526","527","528","529","530","531","532","533","534","535","536","537","538","539","540","541","542","543","544","545","546","547","548","549","550","551","552","553","554","555","556","557","558","559","560","561","562"],"import { React } from \"react\";\nimport \"./Pay.css\";\nimport { FaDollarSign } from \"react-icons/fa\";\nimport {\n  Input,\n  InputGroup,\n  InputLeftElement,\n  InputRightElement,\n} from \"@chakra-ui/input\";\nimport img from \"../multisig.jpg\";\nimport { BsArrowRight } from \"react-icons/bs\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  Text,\n  Image,\n  Select,\n  useStyles,\n} from \"@chakra-ui/react\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport \"./SingleChat.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\nimport priceFeed from \"../contracts/frontend-interaction/priceFeed\";\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nimport senderc20 from \"../contracts/frontend-interaction/senderc20\";\nimport Pay2 from \"./Pay2\";\nimport PayNft2 from \"./PayNft2\";\nconst ENDPOINT = \"http://localhost:5000\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\nvar socket, selectedChatCompare;\n\n\nconst MultiSig = ({\n    children,\n    fetchAgain,\n    setFetchAgain,\n    fetchMessages,\n    refAgain,\n    Moralis,\n    EvmChain,\n    sender_id,\n}) => {\n    const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      <Button\n        width=\"100%\"\n        height=\"100%\"\n        margin={\"0px\"}\n        padding=\"0px\"\n        className=\"font1\"\n        _focus={{ outline: \"none\" }}\n        _hover={{ transform: \"scale(1.09)\" }}\n        borderRadius={\"0px\"}\n      >\n        <p\n          class=\"choice_label1 font2\"\n          style={{ fontSize: \"18px\", marginRight: \"5px\" }}\n        >\n          MULTI SIG\n        </p>\n        <IconButton\n          d={{ base: \"flex\" }}\n          onClick={onOpen}\n          bg=\"linear-gradient(125deg,transparent,rgba(0,0,0,255)90%)\"\n          colorScheme=\"grey\"\n          color={\"white\"}\n          width=\"100%\"\n          height=\"100%\"\n          border={\"0px\"}\n          zIndex={\"500\"}\n          borderRadius={\"0px\"}\n        />\n        <img className={\"choice_img2\"} src={img}></img>\n      </Button>\n\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent\n          h=\"280px\"\n          bg=\"transparent\"\n          backdropFilter=\"auto\"\n          backdropBlur=\"6px\"\n          color=\"white\"\n          padding={\"10px\"}\n        >\n          <ModalBody\n            d=\"flex\"\n            flexDir=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n          >\n            <div className=\"payment_choice one\">\n              <Pay2\n                fetchAgain={fetchAgain}\n                setFetchAgain={setFetchAgain}\n                fetchMessages={fetchMessages}\n                refAgain={refAgain}\n                toClose={onClose}\n                Moralis={Moralis}\n                EvmChain={EvmChain}\n                sender_id={sender_id}\n              />\n            </div>\n            <div className=\"payment_choice two\">\n              <PayNft2\n                fetchAgain={fetchAgain}\n                setFetchAgain={setFetchAgain}\n                fetchMessages={fetchMessages}\n                refAgain={refAgain}\n                toClose={onClose}\n                Moralis={Moralis}\n                EvmChain={EvmChain}\n                sender_id={sender_id}\n              />\n            </div>\n          </ModalBody>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default MultiSig;\n","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/Pay2.js",["563","564","565","566","567","568","569","570","571","572","573","574","575","576","577","578","579","580","581","582","583","584","585","586","587","588","589","590","591","592","593","594","595","596","597","598"],"/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/PayNft2.js",["599","600","601","602","603","604","605","606","607","608","609","610","611","612","613","614","615","616","617","618","619","620","621","622","623","624","625","626","627","628","629"],"import { React } from \"react\";\nimport \"./Pay.css\";\nimport { FaDollarSign } from \"react-icons/fa\";\nimport {\n  Input,\n  InputGroup,\n  InputLeftElement,\n  InputRightElement,\n} from \"@chakra-ui/input\";\n\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  Text,\n  Image,\n  Select,\n} from \"@chakra-ui/react\";\nimport { FormControl } from \"@chakra-ui/form-control\";\nimport { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport \"./SingleChat.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\n\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst ENDPOINT = \"http://localhost:5000\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\nvar socket, selectedChatCompare;\n\nconst PayNft2 = ({\n  fetchAgain,\n  setFetchAgain,\n  fetchMessages,\n  refAgain,\n  toClose,\n  Moralis,\n  sender_id,\n}) => {\n  const [messages, setMessages] = useState([]);\n  const [currency, setCurrency] = useState(\"\");\n  const [payment_type, setPaymentType] = useState(\"token\");\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n  const [options, setOptions] = useState([]);\n  const [imageUrl, setImageUrl] = useState(\"\");\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const sendMessage = async (event) => {\n    if (newMessage || imageUrl) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        console.log(newMessage + \" \" + selectedChat);\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: currency,\n            chatId: selectedChat,\n            payment: true,\n            payment_mode: \"pay\",\n            chat_mode: \"private\",\n            payment_type: \"NFT\",\n            currency: \"empty\",\n            receiver_id: sender_id,\n            note: imageUrl,\n            token_address:\"empty\",\n          },\n          config\n        );\n        console.log(data);\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n      refAgain();\n    }\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n    console.log(socket);\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  useEffect(async () => {\n    const { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\n    const address = \"0xf5b7a2f2a99aEa196994f525f531D648417d2706\";\n\n    const chain = EvmChain.MUMBAI;\n\n    if (Moralis != undefined) {\n      const response = await Moralis.EvmApi.nft.getWalletNFTs({\n        address,\n        chain,\n      });\n\n      console.log(response.toJSON());\n      setOptions(response.toJSON().result);\n    }\n  }, [Moralis]);\n\n  const options2 = options\n    .filter((d) => {\n      if (JSON.parse(d.metadata) != null) {\n        return true;\n      } else {\n        return false;\n      }\n    })\n    .map((d) => {\n      return (\n        <option value={d.name + \"|\" + JSON.parse(d.metadata).image}>\n          {d.name}&ensp;&ensp;(tokenId:{d.token_id})\n        </option>\n      );\n    });\n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      <Button\n        width=\"100%\"\n        height=\"100%\"\n        margin={\"0px\"}\n        padding=\"0px\"\n        _hover={{ transform: \"scale(1.09)\" }}\n      >\n        <p class=\"choice_label font2\">NFT</p>\n        <IconButton\n          d={{ base: \"flex\" }}\n          onClick={onOpen}\n          colorScheme=\"grey\"\n          bg=\"linear-gradient(125deg,rgba(0,0,0,255),transparent)\"\n          width=\"100%\"\n          height=\"100%\"\n          zIndex={\"500\"}\n          border={\"0px\"}\n          borderRadius={\"0px\"}\n        />\n        <img\n          className={\"choice_img\"}\n          src=\"https://nftnow.com/wp-content/uploads/2022/02/Doodles-Guide-Feature-Image.png\"\n        ></img>\n      </Button>\n\n      <Modal\n        size=\"lg\"\n        onClose={() => {\n          onClose();\n          toClose();\n        }}\n        isOpen={isOpen}\n        isCentered\n      >\n        <ModalOverlay />\n        <ModalContent\n          h=\"560px\"\n          bg={\"rgb(30,33,36)\"}\n          color=\"white\"\n          className=\"font1\"\n        >\n          <ModalHeader\n            fontSize=\"40px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            margin={\"5px\"}\n            justifyContent=\"center\"\n          >\n            <p id={\"payment\"} style={{ fontSize: \"20px\" }}>\n              Transfer NFT\n            </p>\n          </ModalHeader>\n         \n          <ModalBody>\n            <div className=\"imageNft\">\n              {imageUrl == \"\" && <p>select a NFT</p>}\n              {imageUrl != \"\" && <img src={imageUrl}></img>}\n            </div>\n            <FormControl\n              onSubmit={sendMessage}\n              id=\"first-name\"\n              isRequired\n              mt={3}\n              width={\"100%\"}\n              margin={\"auto\"}\n            >\n              <Select\n                placeholder=\"select the NFT\"\n                size=\"lg\"\n                fontSize={\"15px\"}\n                width={\"80%\"}\n                margin={\"auto\"}\n                name=\"currency\"\n                onChange={(event) => {\n                  console.log(event.target);\n                  console.log(event.target.value.split(\"|\")[0]);\n                  setImageUrl(event.target.value.split(\"|\")[1]);\n                  setCurrency(event.target.value);\n                }}\n                _focus={{outline:\"none\"}}\n              >\n                {options2}\n              </Select>\n            </FormControl>\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              onClick={() => {\n                onClose();\n                sendMessage();\n                toClose();\n              }}\n              backgroundColor=\"rgb(40,43,48)\"\n              _hover={{ bg: \"rgb(3, 252, 173)\", color: \"black\" }}\n              borderRadius={\"30px\"}\n              className=\"font1\"\n            >\n              Send\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default PayNft2;\n","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/payment/MultiToken.js",["630","631","632","633","634","635"],"import { React } from \"react\";\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../../config/ChatLogics\";\nimport \"../Pay.css\";\n\nconst MultiToken = (props) => {\n  var amount = props.content;\n  var status = props.currency;\n  var date = new Date(props.date);\n  var to = props.to;\n  var note = props.note;\n  const month = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ];\n\n  return (\n    <div style={{ display: \"flex\" }} key={props.id}>\n      {(isSameSender(props.messages, props.m, props.i, props.user_id) ||\n        isLastMessage(props.messages, props.i, props.user_id)) && (\n        <Tooltip label={props.sender_name} placement=\"bottom-start\" hasArrow>\n          <Avatar\n            mt=\"7px\"\n            mr={1}\n            size=\"sm\"\n            cursor=\"pointer\"\n            name={props.sender_name}\n            src={props.sender_pic}\n          />\n        </Tooltip>\n      )}\n      <div\n        style={{\n          backgroundColor: `${\n            props.sender_id === props.user_id\n              ? \"rgb(54,57,62)\"\n              : \"rgb(40,43,48)\"\n          }`,\n          marginLeft: isSameSenderMargin(\n            props.messages,\n            props.m,\n            props.i,\n            props.user_id\n          ),\n          marginTop: isSameUser(props.messages, props.m, props.i, props.user_id)\n            ? 7\n            : 10,\n          borderRadius: \"20px\",\n          padding: \"5px 15px\",\n          maxWidth: \"75%\",\n          minWidth: \"260px\",\n          color: \"white\",\n          height: status == \"submitted txn\"?\"185px\":\"100px\",\n        }}\n      >\n        <p class=\"payment_user\">MultiSig</p>\n        {status == \"submitted txn\" && <p class=\"payment_user\">To:{amount}</p>}\n\n        {status == \"submitted txn\" && <p class=\"payment_note\">{note}</p>}\n\n        <p class=\"payment_user\">Transaction index:{to}</p>\n        <div style={{ display: \"flex\" }}>\n          {status == \"executed txn\" && (\n            <p class=\"payment_status\">{status}&ensp;&ensp;</p>\n          )}\n          {status != \"executed txn\" && (\n            <p class=\"payment_status\" style={{color:\"rgb(255, 223, 64)\"}}>{status}&ensp;&ensp;</p>\n          )}\n          <p class=\"payment_date\">\n            {month[date.getMonth()]}&ensp;{date.getDate()}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MultiToken;\n","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/payment/RequestCrowd.js",["636","637","638","639","640","641","642","643","644","645","646"],"import { React } from \"react\";\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../../config/ChatLogics\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport \"../Pay.css\";\nimport axios from \"axios\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport senderc20 from \"../../contracts/frontend-interaction/senderc20\";\n\nconst RequestCrowd = (props) => {\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const toast = useToast();\n\n  const pay_request = () => {\n    console.log(props.token_address + \" \" + props.sender_id + \" \" + props.content);\n  };\n\n  const claim_request = () => {\n    console.log(props.token_address + \" \" + props.sender_id + \" \" + props.content);\n  };\n\n  const updateMessages = async () => {\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      console.log(\"updating\" + props.id);\n      const { data } = await axios.post(\n        `/api/message/update`,\n        {\n          messageId: props.id,\n        },\n        config\n      );\n      console.log(\"updating\");\n      console.log(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n    props.refAgain();\n  };\n\n  var receiver = \"karupaiya\";\n  var amount = props.content;\n  var status = \"Requested\";\n  var date = new Date(props.date);\n  var last=new Date(props.last);\n  var note = props.note;\n  const month=[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]\n\n  return (\n    <div style={{ display: \"flex\" }} key={props.id}>\n      {(isSameSender(props.messages, props.m, props.i, props.user_id) ||\n        isLastMessage(props.messages, props.i, props.user_id)) && (\n        <Tooltip label={props.sender_name} placement=\"bottom-start\" hasArrow>\n          <Avatar\n            mt=\"7px\"\n            mr={1}\n            size=\"sm\"\n            cursor=\"pointer\"\n            name={props.sender_name}\n            src={props.sender_pic}\n          />\n        </Tooltip>\n      )}\n      <div\n        style={{\n          backgroundColor: `${\n            props.sender_id === props.user_id\n              ? \"rgb(54,57,62)\"\n              : \"rgb(40,43,48)\"\n          }`,\n          marginLeft: isSameSenderMargin(\n            props.messages,\n            props.m,\n            props.i,\n            props.user_id\n          ),\n          marginTop: isSameUser(props.messages, props.m, props.i, props.user_id)\n            ? 7\n            : 10,\n            borderRadius: \"20px\",\n            padding: \"5px 15px\",\n            maxWidth: \"75%\",\n            minWidth: \"260px\",\n            color: \"white\",\n            height: \"220px\",\n        }}\n      >\n        <p class=\"payment_user\">CrowdFunding</p>\n        <p class=\"payment_note\">{note}</p>\n        <p class=\"payment_amount\">\n          {amount}\n          <span className=\"payment_currency\">{props.currency}</span>\n        </p>\n        <div style={{ display: \"flex\" }}>\n          <p class=\"payment_status\" style={{\"color\":\"rgb(255, 223, 64)\"}}>{month[last.getMonth()]}&ensp;{last.getDate()}&ensp;&ensp;</p>\n          <p class=\"payment_date\">{month[date.getMonth()]}&ensp;{date.getDate()}</p>\n        </div>\n        <div>\n          {!(props.sender_id === props.user_id) && (\n            <button\n              class={\"pay_btn\"}\n              onClick={() => {\n                pay_request();\n              }}\n            >\n              pay\n            </button>\n          )}\n          {(props.sender_id === props.user_id) && (\n            <button\n              class={\"pay_btn\"}\n              onClick={() => {\n                claim_request();\n              }}\n            >\n              claim\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RequestCrowd;\n","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/payment/Nft.js",["647","648","649","650","651"],"import { React } from \"react\";\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../../config/ChatLogics\";\nimport \"../Pay.css\";\n\nconst Nft = (props) => {\n  \n  var amount = props.content;\n  var status = \"send\";\n  var date = new Date(props.date);\n  var note = props.note;\n  const month=[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]\n\n  return (\n    <div style={{ display: \"flex\" }} key={props.id}>\n      {(isSameSender(props.messages, props.m, props.i, props.user_id) ||\n        isLastMessage(props.messages, props.i, props.user_id)) && (\n        <Tooltip label={props.sender_name} placement=\"bottom-start\" hasArrow>\n          <Avatar\n            mt=\"7px\"\n            mr={1}\n            size=\"sm\"\n            cursor=\"pointer\"\n            name={props.sender_name}\n            src={props.sender_pic}\n          />\n        </Tooltip>\n      )}\n      <div\n        style={{\n          backgroundColor: `${\n            props.sender_id === props.user_id\n              ? \"rgb(54,57,62)\"\n              : \"rgb(40,43,48)\"\n          }`,\n          marginLeft: isSameSenderMargin(\n            props.messages,\n            props.m,\n            props.i,\n            props.user_id\n          ),\n          marginTop: isSameUser(props.messages, props.m, props.i, props.user_id)\n            ? 7\n            : 10,\n          borderRadius: \"20px\",\n          padding: \"5px 15px\",\n          maxWidth: \"75%\",\n          minWidth: \"260px\",\n          color: \"white\",\n          height: \"250px\",\n        }}\n      >\n        <p class=\"payment_user\">NFT transfer</p>\n        <img src={note} style={{\"width\":\"auto\",\"height\":\"150px\",\"objectFit\":\"contain\",margin:\"10px auto\"}}></img>\n        <div style={{ display: \"flex\" }}>\n          {props.sender_id === props.user_id && (<p class=\"payment_status\">Sent&ensp;&ensp;</p>)}\n          {props.sender_id != props.user_id && (<p class=\"payment_status\">Received&ensp;&ensp;</p>)}\n          <p class=\"payment_date\">{month[date.getMonth()]}&ensp;{date.getDate()}</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Nft;\n","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/contracts/frontend-interaction/Multisig.js",["652","653"],"/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/contracts/frontend-interaction/Mutisig_confirm.js",["654"],"const { ethers} = require(\"ethers\");\nasync function  Multisig_confirm(index){\n    const Multisigabi = require(\"../abi/Multisig.json\");\n    const Multisigaddr = \"0x95e125539b98E84e8005Ba743320951cb7D74dA5\";\n\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n  await provider.send(\"eth_requestAccounts\", []);\n  const signer = provider.getSigner();\n\n  const contract_signer = new ethers.Contract(\n    Multisigaddr,\n    Multisigabi,\n    signer\n  );\n\n\n\n\n  const confirmtxn  = await contract_signer.confirmTransaction(index,{gasLimit: 210000})\n//   const executetxn  = await contract_signer.executeTransaction()\n\n}\n\nexport default Multisig_confirm;","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/contracts/frontend-interaction/Multisig_execute.js",["655"],"const { ethers} = require(\"ethers\");\nasync function  Multisig_execute(index){\n    const Multisigabi = require(\"../abi/Multisig.json\");\n    const Multisigaddr = \"0x95e125539b98E84e8005Ba743320951cb7D74dA5\";\n\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n  await provider.send(\"eth_requestAccounts\", []);\n  const signer = provider.getSigner();\n\n  const contract_signer = new ethers.Contract(\n    Multisigaddr,\n    Multisigabi,\n    signer\n  );\n\n\n\n\n  const executetxn  = await contract_signer.executeTransaction(index,{gasLimit: 210000})\n\n\n}\n\nexport default Multisig_execute;","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/contracts/frontend-interaction/Crowdfund_launch.js",["656"],"const { ethers} = require(\"ethers\");\nasync function  Crowdfund_launch(amount,days,token_address){\n\n    console.log(days);\n    \n    const Crowdfund_launch_abi = require(\"../abi/Crowdfunding.json\")\n    const Crowdfundaddr = \"0xB0328d991C5Dcaf323698d4eCd65dF37c253e904\";\n\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n  await provider.send(\"eth_requestAccounts\", []);\n  const signer = provider.getSigner();\n\n  const contract_signer = new ethers.Contract(\n    Crowdfundaddr,\n    Crowdfund_launch_abi,\n    signer\n  );\n\n  const input0 = \"\"+amount;\n  const decimals0 = \"18\";\n  const amount1 = ethers.utils.parseUnits(input0, decimals0);\n\n  const submittxn =await contract_signer.launch(amount1,days,token_address,{gasLimit: 210000})\n//   const confirmtxn  = await contract_signer.confirmTransaction()\n//   const executetxn  = await contract_signer.executeTransaction()\n\n}\n\nexport default Crowdfund_launch;","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/contracts/frontend-interaction/SendNft.js",["657","658","659","660","661"],"const { ethers} = require(\"ethers\");\nconst { POSClient, use } = require(\"@maticnetwork/maticjs\");\nconst { Web3ClientPlugin } = require(\"@maticnetwork/maticjs-ethers\");\n\n\n\nasync function sendnft(to,token_address,token_id,sender_address) {\n  const contractabi = require(\"../abi/senderc20.json\");\n  const erc721abi=require(\"../abi/IERC721.json\");\n  const contractaddr = \"0xfEa987B55BA353482487E018327B056b91Aa8538\";\n\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  await provider.send(\"eth_requestAccounts\", []);\n  const signer = provider.getSigner();\n\n  const contract_signer = new ethers.Contract(\n    contractaddr,\n    contractabi,\n    signer\n  );\n\n  const erc721_signer = new ethers.Contract(\n    token_address,\n    erc721abi,\n    signer\n  );\n\nconst approveNft= await erc721_signer.approve(contractaddr,token_id)\n\n  // const owner1 = sender_address;\n\n  // console.log(\"1\");\n  // use(Web3ClientPlugin);\n\n  // const posClient = new POSClient();\n  // await posClient.init({\n  //   network: \"testnet\",\n  //   version: \"mumbai\",\n  //   parent: {\n  //     provider: signer,\n  //     defaultConfig: {\n  //       from: owner1,\n  //     },\n  //   },\n  //   child: {\n  //     provider: signer,\n  //     defaultConfig: {\n  //       from: owner1,\n  //     },\n  //   },\n  // });\n  console.log(\"2\");\n\n//    const erc721RootToken = posClient.erc721(token_address,true);\n// const approveResult = await erc721RootToken.approve(token_id);\n  console.log(\"3\");\n\n  \n  const sendNft = await contract_signer.SendNFT(to,token_address,token_id,{gasLimit: 210000});\n}\n\nexport default sendnft;","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/miscellaneous/GroupBox1.js",[],"/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/interact.js",[],{"ruleId":"662","replacedBy":"663"},{"ruleId":"664","replacedBy":"665"},{"ruleId":"666","severity":1,"message":"667","line":9,"column":3,"nodeType":"668","messageId":"669","endLine":9,"endColumn":7},{"ruleId":"666","severity":1,"message":"670","line":19,"column":22,"nodeType":"668","messageId":"669","endLine":19,"endColumn":35},{"ruleId":"671","severity":1,"message":"672","line":31,"column":11,"nodeType":"673","endLine":34,"endColumn":13},{"ruleId":"674","severity":1,"message":"675","line":37,"column":23,"nodeType":"676","messageId":"677","endLine":37,"endColumn":25},{"ruleId":"666","severity":1,"message":"670","line":16,"column":21,"nodeType":"668","messageId":"669","endLine":16,"endColumn":34},{"ruleId":"666","severity":1,"message":"670","line":16,"column":20,"nodeType":"668","messageId":"669","endLine":16,"endColumn":33},{"ruleId":"666","severity":1,"message":"678","line":18,"column":10,"nodeType":"668","messageId":"669","endLine":18,"endColumn":14},{"ruleId":"666","severity":1,"message":"679","line":18,"column":16,"nodeType":"668","messageId":"669","endLine":18,"endColumn":23},{"ruleId":"666","severity":1,"message":"680","line":19,"column":10,"nodeType":"668","messageId":"669","endLine":19,"endColumn":15},{"ruleId":"666","severity":1,"message":"681","line":19,"column":17,"nodeType":"668","messageId":"669","endLine":19,"endColumn":25},{"ruleId":"666","severity":1,"message":"682","line":19,"column":8,"nodeType":"668","messageId":"669","endLine":19,"endColumn":11},{"ruleId":"666","severity":1,"message":"683","line":1,"column":10,"nodeType":"668","messageId":"669","endLine":1,"endColumn":18},{"ruleId":"666","severity":1,"message":"684","line":6,"column":3,"nodeType":"668","messageId":"669","endLine":6,"endColumn":14},{"ruleId":"666","severity":1,"message":"667","line":13,"column":3,"nodeType":"668","messageId":"669","endLine":13,"endColumn":7},{"ruleId":"666","severity":1,"message":"685","line":14,"column":3,"nodeType":"668","messageId":"669","endLine":14,"endColumn":8},{"ruleId":"666","severity":1,"message":"686","line":6,"column":3,"nodeType":"668","messageId":"669","endLine":6,"endColumn":13},{"ruleId":"666","severity":1,"message":"687","line":7,"column":3,"nodeType":"668","messageId":"669","endLine":7,"endColumn":19},{"ruleId":"666","severity":1,"message":"688","line":8,"column":3,"nodeType":"668","messageId":"669","endLine":8,"endColumn":20},{"ruleId":"666","severity":1,"message":"667","line":21,"column":3,"nodeType":"668","messageId":"669","endLine":21,"endColumn":7},{"ruleId":"666","severity":1,"message":"685","line":22,"column":3,"nodeType":"668","messageId":"669","endLine":22,"endColumn":8},{"ruleId":"666","severity":1,"message":"689","line":26,"column":10,"nodeType":"668","messageId":"669","endLine":26,"endColumn":13},{"ruleId":"666","severity":1,"message":"690","line":29,"column":22,"nodeType":"668","messageId":"669","endLine":29,"endColumn":29},{"ruleId":"666","severity":1,"message":"691","line":30,"column":10,"nodeType":"668","messageId":"669","endLine":30,"endColumn":19},{"ruleId":"666","severity":1,"message":"692","line":30,"column":21,"nodeType":"668","messageId":"669","endLine":30,"endColumn":34},{"ruleId":"666","severity":1,"message":"693","line":33,"column":10,"nodeType":"668","messageId":"669","endLine":33,"endColumn":23},{"ruleId":"666","severity":1,"message":"694","line":34,"column":8,"nodeType":"668","messageId":"669","endLine":34,"endColumn":20},{"ruleId":"666","severity":1,"message":"695","line":35,"column":8,"nodeType":"668","messageId":"669","endLine":35,"endColumn":22},{"ruleId":"666","severity":1,"message":"696","line":36,"column":8,"nodeType":"668","messageId":"669","endLine":36,"endColumn":14},{"ruleId":"666","severity":1,"message":"697","line":40,"column":8,"nodeType":"668","messageId":"669","endLine":40,"endColumn":28},{"ruleId":"666","severity":1,"message":"698","line":54,"column":20,"nodeType":"668","messageId":"669","endLine":54,"endColumn":31},{"ruleId":"666","severity":1,"message":"699","line":55,"column":24,"nodeType":"668","messageId":"669","endLine":55,"endColumn":38},{"ruleId":"666","severity":1,"message":"700","line":59,"column":10,"nodeType":"668","messageId":"669","endLine":59,"endColumn":18},{"ruleId":"666","severity":1,"message":"701","line":62,"column":9,"nodeType":"668","messageId":"669","endLine":62,"endColumn":23},{"ruleId":"666","severity":1,"message":"702","line":70,"column":25,"nodeType":"668","messageId":"669","endLine":70,"endColumn":40},{"ruleId":"674","severity":1,"message":"675","line":23,"column":28,"nodeType":"676","messageId":"677","endLine":23,"endColumn":30},{"ruleId":"674","severity":1,"message":"675","line":24,"column":30,"nodeType":"676","messageId":"677","endLine":24,"endColumn":32},{"ruleId":"666","severity":1,"message":"703","line":4,"column":8,"nodeType":"668","messageId":"669","endLine":4,"endColumn":22},{"ruleId":"666","severity":1,"message":"703","line":4,"column":8,"nodeType":"668","messageId":"669","endLine":4,"endColumn":22},{"ruleId":"666","severity":1,"message":"704","line":14,"column":10,"nodeType":"668","messageId":"669","endLine":14,"endColumn":20},{"ruleId":"666","severity":1,"message":"690","line":14,"column":22,"nodeType":"668","messageId":"669","endLine":14,"endColumn":29},{"ruleId":"666","severity":1,"message":"705","line":18,"column":11,"nodeType":"668","messageId":"669","endLine":18,"endColumn":23},{"ruleId":"666","severity":1,"message":"702","line":18,"column":25,"nodeType":"668","messageId":"669","endLine":18,"endColumn":40},{"ruleId":"666","severity":1,"message":"706","line":18,"column":48,"nodeType":"668","messageId":"669","endLine":18,"endColumn":60},{"ruleId":"666","severity":1,"message":"707","line":18,"column":62,"nodeType":"668","messageId":"669","endLine":18,"endColumn":77},{"ruleId":"662","replacedBy":"708"},{"ruleId":"664","replacedBy":"709"},{"ruleId":"710","severity":1,"message":"711","line":11,"column":13,"nodeType":"712","endLine":16,"endColumn":4},{"ruleId":"710","severity":1,"message":"713","line":16,"column":6,"nodeType":"714","endLine":16,"endColumn":8,"suggestions":"715"},{"ruleId":"666","severity":1,"message":"667","line":9,"column":3,"nodeType":"668","messageId":"669","endLine":9,"endColumn":7},{"ruleId":"666","severity":1,"message":"716","line":17,"column":10,"nodeType":"668","messageId":"669","endLine":17,"endColumn":17},{"ruleId":"671","severity":1,"message":"672","line":44,"column":11,"nodeType":"673","endLine":47,"endColumn":13},{"ruleId":"674","severity":1,"message":"675","line":50,"column":23,"nodeType":"676","messageId":"677","endLine":50,"endColumn":25},{"ruleId":"666","severity":1,"message":"717","line":1,"column":10,"nodeType":"668","messageId":"669","endLine":1,"endColumn":17},{"ruleId":"666","severity":1,"message":"718","line":41,"column":9,"nodeType":"668","messageId":"669","endLine":41,"endColumn":22},{"ruleId":"710","severity":1,"message":"711","line":135,"column":13,"nodeType":"712","endLine":141,"endColumn":4},{"ruleId":"666","severity":1,"message":"719","line":3,"column":10,"nodeType":"668","messageId":"669","endLine":3,"endColumn":15},{"ruleId":"666","severity":1,"message":"720","line":5,"column":8,"nodeType":"668","messageId":"669","endLine":5,"endColumn":11},{"ruleId":"666","severity":1,"message":"721","line":16,"column":3,"nodeType":"668","messageId":"669","endLine":16,"endColumn":9},{"ruleId":"666","severity":1,"message":"722","line":17,"column":3,"nodeType":"668","messageId":"669","endLine":17,"endColumn":13},{"ruleId":"666","severity":1,"message":"723","line":18,"column":3,"nodeType":"668","messageId":"669","endLine":18,"endColumn":16},{"ruleId":"666","severity":1,"message":"724","line":19,"column":3,"nodeType":"668","messageId":"669","endLine":19,"endColumn":15},{"ruleId":"666","severity":1,"message":"725","line":20,"column":3,"nodeType":"668","messageId":"669","endLine":20,"endColumn":16},{"ruleId":"666","severity":1,"message":"726","line":22,"column":10,"nodeType":"668","messageId":"669","endLine":22,"endColumn":17},{"ruleId":"666","severity":1,"message":"727","line":24,"column":10,"nodeType":"668","messageId":"669","endLine":24,"endColumn":16},{"ruleId":"666","severity":1,"message":"728","line":29,"column":8,"nodeType":"668","messageId":"669","endLine":29,"endColumn":19},{"ruleId":"666","severity":1,"message":"690","line":30,"column":10,"nodeType":"668","messageId":"669","endLine":30,"endColumn":17},{"ruleId":"666","severity":1,"message":"729","line":35,"column":8,"nodeType":"668","messageId":"669","endLine":35,"endColumn":20},{"ruleId":"666","severity":1,"message":"730","line":39,"column":18,"nodeType":"668","messageId":"669","endLine":39,"endColumn":27},{"ruleId":"666","severity":1,"message":"731","line":40,"column":10,"nodeType":"668","messageId":"669","endLine":40,"endColumn":22},{"ruleId":"666","severity":1,"message":"732","line":41,"column":10,"nodeType":"668","messageId":"669","endLine":41,"endColumn":17},{"ruleId":"666","severity":1,"message":"733","line":42,"column":10,"nodeType":"668","messageId":"669","endLine":42,"endColumn":21},{"ruleId":"666","severity":1,"message":"734","line":54,"column":11,"nodeType":"668","messageId":"669","endLine":54,"endColumn":17},{"ruleId":"666","severity":1,"message":"735","line":54,"column":19,"nodeType":"668","messageId":"669","endLine":54,"endColumn":25},{"ruleId":"666","severity":1,"message":"736","line":63,"column":9,"nodeType":"668","messageId":"669","endLine":63,"endColumn":21},{"ruleId":"666","severity":1,"message":"737","line":100,"column":9,"nodeType":"668","messageId":"669","endLine":100,"endColumn":19},{"ruleId":"671","severity":1,"message":"672","line":153,"column":9,"nodeType":"673","endLine":153,"endColumn":129},{"ruleId":"666","severity":1,"message":"670","line":16,"column":20,"nodeType":"668","messageId":"669","endLine":16,"endColumn":33},{"ruleId":"666","severity":1,"message":"678","line":18,"column":10,"nodeType":"668","messageId":"669","endLine":18,"endColumn":14},{"ruleId":"666","severity":1,"message":"679","line":18,"column":16,"nodeType":"668","messageId":"669","endLine":18,"endColumn":23},{"ruleId":"666","severity":1,"message":"680","line":19,"column":10,"nodeType":"668","messageId":"669","endLine":19,"endColumn":15},{"ruleId":"666","severity":1,"message":"681","line":19,"column":17,"nodeType":"668","messageId":"669","endLine":19,"endColumn":25},{"ruleId":"666","severity":1,"message":"738","line":89,"column":9,"nodeType":"668","messageId":"669","endLine":89,"endColumn":20},{"ruleId":"666","severity":1,"message":"670","line":16,"column":21,"nodeType":"668","messageId":"669","endLine":16,"endColumn":34},{"ruleId":"666","severity":1,"message":"692","line":8,"column":21,"nodeType":"668","messageId":"669","endLine":8,"endColumn":34},{"ruleId":"666","severity":1,"message":"694","line":12,"column":8,"nodeType":"668","messageId":"669","endLine":12,"endColumn":20},{"ruleId":"666","severity":1,"message":"682","line":27,"column":8,"nodeType":"668","messageId":"669","endLine":27,"endColumn":11},{"ruleId":"666","severity":1,"message":"739","line":43,"column":10,"nodeType":"668","messageId":"669","endLine":43,"endColumn":16},{"ruleId":"666","severity":1,"message":"730","line":43,"column":18,"nodeType":"668","messageId":"669","endLine":43,"endColumn":27},{"ruleId":"674","severity":1,"message":"740","line":42,"column":14,"nodeType":"676","messageId":"677","endLine":42,"endColumn":16},{"ruleId":"674","severity":1,"message":"740","line":42,"column":39,"nodeType":"676","messageId":"677","endLine":42,"endColumn":41},{"ruleId":"666","severity":1,"message":"741","line":3,"column":10,"nodeType":"668","messageId":"669","endLine":3,"endColumn":19},{"ruleId":"674","severity":1,"message":"675","line":26,"column":25,"nodeType":"676","messageId":"677","endLine":26,"endColumn":27},{"ruleId":"674","severity":1,"message":"675","line":27,"column":30,"nodeType":"676","messageId":"677","endLine":27,"endColumn":32},{"ruleId":"674","severity":1,"message":"675","line":28,"column":32,"nodeType":"676","messageId":"677","endLine":28,"endColumn":34},{"ruleId":"674","severity":1,"message":"675","line":77,"column":32,"nodeType":"676","messageId":"677","endLine":77,"endColumn":34},{"ruleId":"674","severity":1,"message":"675","line":93,"column":32,"nodeType":"676","messageId":"677","endLine":93,"endColumn":34},{"ruleId":"666","severity":1,"message":"683","line":1,"column":10,"nodeType":"668","messageId":"669","endLine":1,"endColumn":18},{"ruleId":"666","severity":1,"message":"684","line":6,"column":3,"nodeType":"668","messageId":"669","endLine":6,"endColumn":14},{"ruleId":"666","severity":1,"message":"742","line":7,"column":3,"nodeType":"668","messageId":"669","endLine":7,"endColumn":14},{"ruleId":"666","severity":1,"message":"743","line":9,"column":3,"nodeType":"668","messageId":"669","endLine":9,"endColumn":19},{"ruleId":"666","severity":1,"message":"744","line":10,"column":3,"nodeType":"668","messageId":"669","endLine":10,"endColumn":9},{"ruleId":"666","severity":1,"message":"667","line":13,"column":3,"nodeType":"668","messageId":"669","endLine":13,"endColumn":7},{"ruleId":"666","severity":1,"message":"685","line":14,"column":3,"nodeType":"668","messageId":"669","endLine":14,"endColumn":8},{"ruleId":"666","severity":1,"message":"745","line":3,"column":10,"nodeType":"668","messageId":"669","endLine":3,"endColumn":22},{"ruleId":"666","severity":1,"message":"686","line":6,"column":3,"nodeType":"668","messageId":"669","endLine":6,"endColumn":13},{"ruleId":"666","severity":1,"message":"687","line":7,"column":3,"nodeType":"668","messageId":"669","endLine":7,"endColumn":19},{"ruleId":"666","severity":1,"message":"688","line":8,"column":3,"nodeType":"668","messageId":"669","endLine":8,"endColumn":20},{"ruleId":"666","severity":1,"message":"746","line":11,"column":10,"nodeType":"668","messageId":"669","endLine":11,"endColumn":22},{"ruleId":"666","severity":1,"message":"667","line":22,"column":3,"nodeType":"668","messageId":"669","endLine":22,"endColumn":7},{"ruleId":"666","severity":1,"message":"685","line":23,"column":3,"nodeType":"668","messageId":"669","endLine":23,"endColumn":8},{"ruleId":"666","severity":1,"message":"747","line":25,"column":3,"nodeType":"668","messageId":"669","endLine":25,"endColumn":12},{"ruleId":"666","severity":1,"message":"689","line":28,"column":10,"nodeType":"668","messageId":"669","endLine":28,"endColumn":13},{"ruleId":"666","severity":1,"message":"690","line":31,"column":22,"nodeType":"668","messageId":"669","endLine":31,"endColumn":29},{"ruleId":"666","severity":1,"message":"691","line":32,"column":10,"nodeType":"668","messageId":"669","endLine":32,"endColumn":19},{"ruleId":"666","severity":1,"message":"692","line":32,"column":21,"nodeType":"668","messageId":"669","endLine":32,"endColumn":34},{"ruleId":"666","severity":1,"message":"693","line":35,"column":10,"nodeType":"668","messageId":"669","endLine":35,"endColumn":23},{"ruleId":"666","severity":1,"message":"694","line":36,"column":8,"nodeType":"668","messageId":"669","endLine":36,"endColumn":20},{"ruleId":"666","severity":1,"message":"695","line":37,"column":8,"nodeType":"668","messageId":"669","endLine":37,"endColumn":22},{"ruleId":"666","severity":1,"message":"696","line":38,"column":8,"nodeType":"668","messageId":"669","endLine":38,"endColumn":14},{"ruleId":"666","severity":1,"message":"697","line":42,"column":8,"nodeType":"668","messageId":"669","endLine":42,"endColumn":28},{"ruleId":"666","severity":1,"message":"699","line":61,"column":24,"nodeType":"668","messageId":"669","endLine":61,"endColumn":38},{"ruleId":"666","severity":1,"message":"700","line":65,"column":10,"nodeType":"668","messageId":"669","endLine":65,"endColumn":18},{"ruleId":"666","severity":1,"message":"748","line":67,"column":10,"nodeType":"668","messageId":"669","endLine":67,"endColumn":15},{"ruleId":"666","severity":1,"message":"749","line":67,"column":17,"nodeType":"668","messageId":"669","endLine":67,"endColumn":25},{"ruleId":"666","severity":1,"message":"750","line":70,"column":25,"nodeType":"668","messageId":"669","endLine":70,"endColumn":41},{"ruleId":"666","severity":1,"message":"701","line":76,"column":9,"nodeType":"668","messageId":"669","endLine":76,"endColumn":23},{"ruleId":"666","severity":1,"message":"702","line":84,"column":25,"nodeType":"668","messageId":"669","endLine":84,"endColumn":40},{"ruleId":"710","severity":1,"message":"711","line":235,"column":13,"nodeType":"712","endLine":251,"endColumn":4},{"ruleId":"674","severity":1,"message":"740","line":242,"column":17,"nodeType":"676","messageId":"677","endLine":242,"endColumn":19},{"ruleId":"710","severity":1,"message":"711","line":268,"column":13,"nodeType":"712","endLine":271,"endColumn":4},{"ruleId":"671","severity":1,"message":"672","line":298,"column":9,"nodeType":"673","endLine":298,"endColumn":50},{"ruleId":"674","severity":1,"message":"675","line":391,"column":29,"nodeType":"676","messageId":"677","endLine":391,"endColumn":31},{"ruleId":"674","severity":1,"message":"740","line":408,"column":58,"nodeType":"676","messageId":"677","endLine":408,"endColumn":60},{"ruleId":"674","severity":1,"message":"675","line":444,"column":30,"nodeType":"676","messageId":"677","endLine":444,"endColumn":32},{"ruleId":"674","severity":1,"message":"740","line":445,"column":30,"nodeType":"676","messageId":"677","endLine":445,"endColumn":32},{"ruleId":"666","severity":1,"message":"745","line":3,"column":10,"nodeType":"668","messageId":"669","endLine":3,"endColumn":22},{"ruleId":"666","severity":1,"message":"719","line":5,"column":3,"nodeType":"668","messageId":"669","endLine":5,"endColumn":8},{"ruleId":"666","severity":1,"message":"686","line":6,"column":3,"nodeType":"668","messageId":"669","endLine":6,"endColumn":13},{"ruleId":"666","severity":1,"message":"687","line":7,"column":3,"nodeType":"668","messageId":"669","endLine":7,"endColumn":19},{"ruleId":"666","severity":1,"message":"688","line":8,"column":3,"nodeType":"668","messageId":"669","endLine":8,"endColumn":20},{"ruleId":"666","severity":1,"message":"743","line":18,"column":3,"nodeType":"668","messageId":"669","endLine":18,"endColumn":19},{"ruleId":"666","severity":1,"message":"667","line":21,"column":3,"nodeType":"668","messageId":"669","endLine":21,"endColumn":7},{"ruleId":"666","severity":1,"message":"685","line":22,"column":3,"nodeType":"668","messageId":"669","endLine":22,"endColumn":8},{"ruleId":"666","severity":1,"message":"689","line":26,"column":10,"nodeType":"668","messageId":"669","endLine":26,"endColumn":13},{"ruleId":"666","severity":1,"message":"690","line":29,"column":22,"nodeType":"668","messageId":"669","endLine":29,"endColumn":29},{"ruleId":"666","severity":1,"message":"691","line":30,"column":10,"nodeType":"668","messageId":"669","endLine":30,"endColumn":19},{"ruleId":"666","severity":1,"message":"692","line":30,"column":21,"nodeType":"668","messageId":"669","endLine":30,"endColumn":34},{"ruleId":"666","severity":1,"message":"693","line":33,"column":10,"nodeType":"668","messageId":"669","endLine":33,"endColumn":23},{"ruleId":"666","severity":1,"message":"694","line":34,"column":8,"nodeType":"668","messageId":"669","endLine":34,"endColumn":20},{"ruleId":"666","severity":1,"message":"695","line":35,"column":8,"nodeType":"668","messageId":"669","endLine":35,"endColumn":22},{"ruleId":"666","severity":1,"message":"696","line":36,"column":8,"nodeType":"668","messageId":"669","endLine":36,"endColumn":14},{"ruleId":"666","severity":1,"message":"697","line":40,"column":8,"nodeType":"668","messageId":"669","endLine":40,"endColumn":28},{"ruleId":"666","severity":1,"message":"751","line":58,"column":10,"nodeType":"668","messageId":"669","endLine":58,"endColumn":22},{"ruleId":"666","severity":1,"message":"699","line":58,"column":24,"nodeType":"668","messageId":"669","endLine":58,"endColumn":38},{"ruleId":"666","severity":1,"message":"752","line":60,"column":10,"nodeType":"668","messageId":"669","endLine":60,"endColumn":25},{"ruleId":"666","severity":1,"message":"753","line":61,"column":10,"nodeType":"668","messageId":"669","endLine":61,"endColumn":16},{"ruleId":"666","severity":1,"message":"754","line":61,"column":18,"nodeType":"668","messageId":"669","endLine":61,"endColumn":27},{"ruleId":"666","severity":1,"message":"700","line":62,"column":10,"nodeType":"668","messageId":"669","endLine":62,"endColumn":18},{"ruleId":"666","severity":1,"message":"701","line":69,"column":9,"nodeType":"668","messageId":"669","endLine":69,"endColumn":23},{"ruleId":"666","severity":1,"message":"702","line":77,"column":25,"nodeType":"668","messageId":"669","endLine":77,"endColumn":40},{"ruleId":"710","severity":1,"message":"711","line":154,"column":13,"nodeType":"712","endLine":170,"endColumn":4},{"ruleId":"674","severity":1,"message":"740","line":161,"column":17,"nodeType":"676","messageId":"677","endLine":161,"endColumn":19},{"ruleId":"671","severity":1,"message":"672","line":211,"column":9,"nodeType":"673","endLine":214,"endColumn":10},{"ruleId":"674","severity":1,"message":"675","line":247,"column":25,"nodeType":"676","messageId":"677","endLine":247,"endColumn":27},{"ruleId":"674","severity":1,"message":"740","line":248,"column":25,"nodeType":"676","messageId":"677","endLine":248,"endColumn":27},{"ruleId":"671","severity":1,"message":"672","line":248,"column":34,"nodeType":"673","endLine":248,"endColumn":54},{"ruleId":"666","severity":1,"message":"703","line":4,"column":8,"nodeType":"668","messageId":"669","endLine":4,"endColumn":22},{"ruleId":"666","severity":1,"message":"704","line":14,"column":10,"nodeType":"668","messageId":"669","endLine":14,"endColumn":20},{"ruleId":"666","severity":1,"message":"690","line":14,"column":22,"nodeType":"668","messageId":"669","endLine":14,"endColumn":29},{"ruleId":"666","severity":1,"message":"755","line":15,"column":8,"nodeType":"668","messageId":"669","endLine":15,"endColumn":17},{"ruleId":"666","severity":1,"message":"705","line":18,"column":11,"nodeType":"668","messageId":"669","endLine":18,"endColumn":23},{"ruleId":"666","severity":1,"message":"702","line":18,"column":25,"nodeType":"668","messageId":"669","endLine":18,"endColumn":40},{"ruleId":"666","severity":1,"message":"706","line":18,"column":48,"nodeType":"668","messageId":"669","endLine":18,"endColumn":60},{"ruleId":"666","severity":1,"message":"707","line":18,"column":62,"nodeType":"668","messageId":"669","endLine":18,"endColumn":77},{"ruleId":"666","severity":1,"message":"703","line":4,"column":8,"nodeType":"668","messageId":"669","endLine":4,"endColumn":22},{"ruleId":"666","severity":1,"message":"756","line":17,"column":13,"nodeType":"668","messageId":"669","endLine":17,"endColumn":21},{"ruleId":"666","severity":1,"message":"757","line":51,"column":9,"nodeType":"668","messageId":"669","endLine":51,"endColumn":22},{"ruleId":"666","severity":1,"message":"758","line":57,"column":9,"nodeType":"668","messageId":"669","endLine":57,"endColumn":18},{"ruleId":"666","severity":1,"message":"683","line":1,"column":10,"nodeType":"668","messageId":"669","endLine":1,"endColumn":18},{"ruleId":"666","severity":1,"message":"684","line":6,"column":3,"nodeType":"668","messageId":"669","endLine":6,"endColumn":14},{"ruleId":"666","severity":1,"message":"742","line":7,"column":3,"nodeType":"668","messageId":"669","endLine":7,"endColumn":14},{"ruleId":"666","severity":1,"message":"743","line":9,"column":3,"nodeType":"668","messageId":"669","endLine":9,"endColumn":19},{"ruleId":"666","severity":1,"message":"744","line":10,"column":3,"nodeType":"668","messageId":"669","endLine":10,"endColumn":9},{"ruleId":"666","severity":1,"message":"667","line":13,"column":3,"nodeType":"668","messageId":"669","endLine":13,"endColumn":7},{"ruleId":"666","severity":1,"message":"685","line":14,"column":3,"nodeType":"668","messageId":"669","endLine":14,"endColumn":8},{"ruleId":"666","severity":1,"message":"682","line":16,"column":8,"nodeType":"668","messageId":"669","endLine":16,"endColumn":11},{"ruleId":"666","severity":1,"message":"759","line":19,"column":8,"nodeType":"668","messageId":"669","endLine":19,"endColumn":14},{"ruleId":"666","severity":1,"message":"745","line":3,"column":10,"nodeType":"668","messageId":"669","endLine":3,"endColumn":22},{"ruleId":"666","severity":1,"message":"686","line":6,"column":3,"nodeType":"668","messageId":"669","endLine":6,"endColumn":13},{"ruleId":"666","severity":1,"message":"687","line":7,"column":3,"nodeType":"668","messageId":"669","endLine":7,"endColumn":19},{"ruleId":"666","severity":1,"message":"688","line":8,"column":3,"nodeType":"668","messageId":"669","endLine":8,"endColumn":20},{"ruleId":"666","severity":1,"message":"684","line":16,"column":3,"nodeType":"668","messageId":"669","endLine":16,"endColumn":14},{"ruleId":"666","severity":1,"message":"743","line":19,"column":3,"nodeType":"668","messageId":"669","endLine":19,"endColumn":19},{"ruleId":"666","severity":1,"message":"667","line":22,"column":3,"nodeType":"668","messageId":"669","endLine":22,"endColumn":7},{"ruleId":"666","severity":1,"message":"685","line":23,"column":3,"nodeType":"668","messageId":"669","endLine":23,"endColumn":8},{"ruleId":"666","severity":1,"message":"747","line":25,"column":3,"nodeType":"668","messageId":"669","endLine":25,"endColumn":12},{"ruleId":"666","severity":1,"message":"689","line":28,"column":10,"nodeType":"668","messageId":"669","endLine":28,"endColumn":13},{"ruleId":"666","severity":1,"message":"690","line":31,"column":22,"nodeType":"668","messageId":"669","endLine":31,"endColumn":29},{"ruleId":"666","severity":1,"message":"691","line":32,"column":10,"nodeType":"668","messageId":"669","endLine":32,"endColumn":19},{"ruleId":"666","severity":1,"message":"692","line":32,"column":21,"nodeType":"668","messageId":"669","endLine":32,"endColumn":34},{"ruleId":"666","severity":1,"message":"693","line":35,"column":10,"nodeType":"668","messageId":"669","endLine":35,"endColumn":23},{"ruleId":"666","severity":1,"message":"694","line":36,"column":8,"nodeType":"668","messageId":"669","endLine":36,"endColumn":20},{"ruleId":"666","severity":1,"message":"695","line":37,"column":8,"nodeType":"668","messageId":"669","endLine":37,"endColumn":22},{"ruleId":"666","severity":1,"message":"696","line":38,"column":8,"nodeType":"668","messageId":"669","endLine":38,"endColumn":14},{"ruleId":"666","severity":1,"message":"697","line":42,"column":8,"nodeType":"668","messageId":"669","endLine":42,"endColumn":28},{"ruleId":"666","severity":1,"message":"755","line":45,"column":8,"nodeType":"668","messageId":"669","endLine":45,"endColumn":17},{"ruleId":"666","severity":1,"message":"751","line":62,"column":10,"nodeType":"668","messageId":"669","endLine":62,"endColumn":22},{"ruleId":"666","severity":1,"message":"699","line":62,"column":24,"nodeType":"668","messageId":"669","endLine":62,"endColumn":38},{"ruleId":"666","severity":1,"message":"700","line":66,"column":10,"nodeType":"668","messageId":"669","endLine":66,"endColumn":18},{"ruleId":"666","severity":1,"message":"748","line":68,"column":10,"nodeType":"668","messageId":"669","endLine":68,"endColumn":15},{"ruleId":"666","severity":1,"message":"749","line":68,"column":17,"nodeType":"668","messageId":"669","endLine":68,"endColumn":25},{"ruleId":"666","severity":1,"message":"760","line":71,"column":10,"nodeType":"668","messageId":"669","endLine":71,"endColumn":23},{"ruleId":"666","severity":1,"message":"750","line":71,"column":25,"nodeType":"668","messageId":"669","endLine":71,"endColumn":41},{"ruleId":"666","severity":1,"message":"701","line":78,"column":9,"nodeType":"668","messageId":"669","endLine":78,"endColumn":23},{"ruleId":"666","severity":1,"message":"702","line":86,"column":25,"nodeType":"668","messageId":"669","endLine":86,"endColumn":40},{"ruleId":"710","severity":1,"message":"711","line":187,"column":13,"nodeType":"712","endLine":203,"endColumn":4},{"ruleId":"674","severity":1,"message":"740","line":194,"column":17,"nodeType":"676","messageId":"677","endLine":194,"endColumn":19},{"ruleId":"710","severity":1,"message":"711","line":220,"column":13,"nodeType":"712","endLine":223,"endColumn":4},{"ruleId":"671","severity":1,"message":"672","line":254,"column":9,"nodeType":"673","endLine":254,"endColumn":50},{"ruleId":"674","severity":1,"message":"675","line":290,"column":29,"nodeType":"676","messageId":"677","endLine":290,"endColumn":31},{"ruleId":"674","severity":1,"message":"740","line":307,"column":58,"nodeType":"676","messageId":"677","endLine":307,"endColumn":60},{"ruleId":"666","severity":1,"message":"745","line":3,"column":10,"nodeType":"668","messageId":"669","endLine":3,"endColumn":22},{"ruleId":"666","severity":1,"message":"719","line":5,"column":3,"nodeType":"668","messageId":"669","endLine":5,"endColumn":8},{"ruleId":"666","severity":1,"message":"686","line":6,"column":3,"nodeType":"668","messageId":"669","endLine":6,"endColumn":13},{"ruleId":"666","severity":1,"message":"687","line":7,"column":3,"nodeType":"668","messageId":"669","endLine":7,"endColumn":19},{"ruleId":"666","severity":1,"message":"688","line":8,"column":3,"nodeType":"668","messageId":"669","endLine":8,"endColumn":20},{"ruleId":"666","severity":1,"message":"746","line":11,"column":10,"nodeType":"668","messageId":"669","endLine":11,"endColumn":22},{"ruleId":"666","severity":1,"message":"684","line":16,"column":3,"nodeType":"668","messageId":"669","endLine":16,"endColumn":14},{"ruleId":"666","severity":1,"message":"742","line":17,"column":3,"nodeType":"668","messageId":"669","endLine":17,"endColumn":14},{"ruleId":"666","severity":1,"message":"743","line":19,"column":3,"nodeType":"668","messageId":"669","endLine":19,"endColumn":19},{"ruleId":"666","severity":1,"message":"667","line":22,"column":3,"nodeType":"668","messageId":"669","endLine":22,"endColumn":7},{"ruleId":"666","severity":1,"message":"685","line":23,"column":3,"nodeType":"668","messageId":"669","endLine":23,"endColumn":8},{"ruleId":"666","severity":1,"message":"761","line":24,"column":3,"nodeType":"668","messageId":"669","endLine":24,"endColumn":9},{"ruleId":"666","severity":1,"message":"747","line":25,"column":3,"nodeType":"668","messageId":"669","endLine":25,"endColumn":12},{"ruleId":"666","severity":1,"message":"762","line":27,"column":10,"nodeType":"668","messageId":"669","endLine":27,"endColumn":21},{"ruleId":"666","severity":1,"message":"763","line":27,"column":23,"nodeType":"668","messageId":"669","endLine":27,"endColumn":32},{"ruleId":"666","severity":1,"message":"689","line":28,"column":10,"nodeType":"668","messageId":"669","endLine":28,"endColumn":13},{"ruleId":"666","severity":1,"message":"690","line":31,"column":22,"nodeType":"668","messageId":"669","endLine":31,"endColumn":29},{"ruleId":"666","severity":1,"message":"764","line":31,"column":31,"nodeType":"668","messageId":"669","endLine":31,"endColumn":39},{"ruleId":"666","severity":1,"message":"691","line":32,"column":10,"nodeType":"668","messageId":"669","endLine":32,"endColumn":19},{"ruleId":"666","severity":1,"message":"692","line":32,"column":21,"nodeType":"668","messageId":"669","endLine":32,"endColumn":34},{"ruleId":"666","severity":1,"message":"765","line":33,"column":10,"nodeType":"668","messageId":"669","endLine":33,"endColumn":19},{"ruleId":"666","severity":1,"message":"766","line":33,"column":21,"nodeType":"668","messageId":"669","endLine":33,"endColumn":29},{"ruleId":"666","severity":1,"message":"767","line":34,"column":8,"nodeType":"668","messageId":"669","endLine":34,"endColumn":13},{"ruleId":"666","severity":1,"message":"693","line":35,"column":10,"nodeType":"668","messageId":"669","endLine":35,"endColumn":23},{"ruleId":"666","severity":1,"message":"694","line":36,"column":8,"nodeType":"668","messageId":"669","endLine":36,"endColumn":20},{"ruleId":"666","severity":1,"message":"695","line":37,"column":8,"nodeType":"668","messageId":"669","endLine":37,"endColumn":22},{"ruleId":"666","severity":1,"message":"696","line":38,"column":8,"nodeType":"668","messageId":"669","endLine":38,"endColumn":14},{"ruleId":"666","severity":1,"message":"768","line":39,"column":8,"nodeType":"668","messageId":"669","endLine":39,"endColumn":21},{"ruleId":"666","severity":1,"message":"769","line":40,"column":8,"nodeType":"668","messageId":"669","endLine":40,"endColumn":17},{"ruleId":"666","severity":1,"message":"770","line":41,"column":8,"nodeType":"668","messageId":"669","endLine":41,"endColumn":10},{"ruleId":"666","severity":1,"message":"697","line":42,"column":8,"nodeType":"668","messageId":"669","endLine":42,"endColumn":28},{"ruleId":"666","severity":1,"message":"741","line":43,"column":10,"nodeType":"668","messageId":"669","endLine":43,"endColumn":19},{"ruleId":"666","severity":1,"message":"755","line":45,"column":8,"nodeType":"668","messageId":"669","endLine":45,"endColumn":17},{"ruleId":"666","severity":1,"message":"771","line":48,"column":7,"nodeType":"668","messageId":"669","endLine":48,"endColumn":15},{"ruleId":"666","severity":1,"message":"772","line":49,"column":5,"nodeType":"668","messageId":"669","endLine":49,"endColumn":11},{"ruleId":"666","severity":1,"message":"773","line":49,"column":13,"nodeType":"668","messageId":"669","endLine":49,"endColumn":32},{"ruleId":"671","severity":1,"message":"672","line":94,"column":9,"nodeType":"673","endLine":94,"endColumn":50},{"ruleId":"666","severity":1,"message":"745","line":3,"column":10,"nodeType":"668","messageId":"669","endLine":3,"endColumn":22},{"ruleId":"666","severity":1,"message":"686","line":6,"column":3,"nodeType":"668","messageId":"669","endLine":6,"endColumn":13},{"ruleId":"666","severity":1,"message":"687","line":7,"column":3,"nodeType":"668","messageId":"669","endLine":7,"endColumn":19},{"ruleId":"666","severity":1,"message":"688","line":8,"column":3,"nodeType":"668","messageId":"669","endLine":8,"endColumn":20},{"ruleId":"666","severity":1,"message":"684","line":16,"column":3,"nodeType":"668","messageId":"669","endLine":16,"endColumn":14},{"ruleId":"666","severity":1,"message":"743","line":19,"column":3,"nodeType":"668","messageId":"669","endLine":19,"endColumn":19},{"ruleId":"666","severity":1,"message":"667","line":22,"column":3,"nodeType":"668","messageId":"669","endLine":22,"endColumn":7},{"ruleId":"666","severity":1,"message":"685","line":23,"column":3,"nodeType":"668","messageId":"669","endLine":23,"endColumn":8},{"ruleId":"666","severity":1,"message":"747","line":25,"column":3,"nodeType":"668","messageId":"669","endLine":25,"endColumn":12},{"ruleId":"666","severity":1,"message":"689","line":28,"column":10,"nodeType":"668","messageId":"669","endLine":28,"endColumn":13},{"ruleId":"666","severity":1,"message":"690","line":31,"column":22,"nodeType":"668","messageId":"669","endLine":31,"endColumn":29},{"ruleId":"666","severity":1,"message":"691","line":32,"column":10,"nodeType":"668","messageId":"669","endLine":32,"endColumn":19},{"ruleId":"666","severity":1,"message":"692","line":32,"column":21,"nodeType":"668","messageId":"669","endLine":32,"endColumn":34},{"ruleId":"666","severity":1,"message":"693","line":35,"column":10,"nodeType":"668","messageId":"669","endLine":35,"endColumn":23},{"ruleId":"666","severity":1,"message":"694","line":36,"column":8,"nodeType":"668","messageId":"669","endLine":36,"endColumn":20},{"ruleId":"666","severity":1,"message":"695","line":37,"column":8,"nodeType":"668","messageId":"669","endLine":37,"endColumn":22},{"ruleId":"666","severity":1,"message":"696","line":38,"column":8,"nodeType":"668","messageId":"669","endLine":38,"endColumn":14},{"ruleId":"666","severity":1,"message":"697","line":42,"column":8,"nodeType":"668","messageId":"669","endLine":42,"endColumn":28},{"ruleId":"666","severity":1,"message":"755","line":45,"column":8,"nodeType":"668","messageId":"669","endLine":45,"endColumn":17},{"ruleId":"666","severity":1,"message":"751","line":64,"column":10,"nodeType":"668","messageId":"669","endLine":64,"endColumn":22},{"ruleId":"666","severity":1,"message":"699","line":64,"column":24,"nodeType":"668","messageId":"669","endLine":64,"endColumn":38},{"ruleId":"666","severity":1,"message":"700","line":68,"column":10,"nodeType":"668","messageId":"669","endLine":68,"endColumn":18},{"ruleId":"666","severity":1,"message":"748","line":70,"column":10,"nodeType":"668","messageId":"669","endLine":70,"endColumn":15},{"ruleId":"666","severity":1,"message":"749","line":70,"column":17,"nodeType":"668","messageId":"669","endLine":70,"endColumn":25},{"ruleId":"666","severity":1,"message":"760","line":73,"column":10,"nodeType":"668","messageId":"669","endLine":73,"endColumn":23},{"ruleId":"666","severity":1,"message":"750","line":73,"column":25,"nodeType":"668","messageId":"669","endLine":73,"endColumn":41},{"ruleId":"666","severity":1,"message":"774","line":81,"column":10,"nodeType":"668","messageId":"669","endLine":81,"endColumn":15},{"ruleId":"666","severity":1,"message":"701","line":83,"column":9,"nodeType":"668","messageId":"669","endLine":83,"endColumn":23},{"ruleId":"666","severity":1,"message":"702","line":91,"column":25,"nodeType":"668","messageId":"669","endLine":91,"endColumn":40},{"ruleId":"666","severity":1,"message":"775","line":96,"column":11,"nodeType":"668","messageId":"669","endLine":96,"endColumn":17},{"ruleId":"710","severity":1,"message":"711","line":287,"column":13,"nodeType":"712","endLine":303,"endColumn":4},{"ruleId":"674","severity":1,"message":"740","line":294,"column":17,"nodeType":"676","messageId":"677","endLine":294,"endColumn":19},{"ruleId":"710","severity":1,"message":"711","line":320,"column":13,"nodeType":"712","endLine":323,"endColumn":4},{"ruleId":"671","severity":1,"message":"672","line":350,"column":9,"nodeType":"673","endLine":350,"endColumn":50},{"ruleId":"674","severity":1,"message":"675","line":407,"column":29,"nodeType":"676","messageId":"677","endLine":407,"endColumn":31},{"ruleId":"674","severity":1,"message":"740","line":424,"column":58,"nodeType":"676","messageId":"677","endLine":424,"endColumn":60},{"ruleId":"666","severity":1,"message":"745","line":3,"column":10,"nodeType":"668","messageId":"669","endLine":3,"endColumn":22},{"ruleId":"666","severity":1,"message":"719","line":5,"column":3,"nodeType":"668","messageId":"669","endLine":5,"endColumn":8},{"ruleId":"666","severity":1,"message":"686","line":6,"column":3,"nodeType":"668","messageId":"669","endLine":6,"endColumn":13},{"ruleId":"666","severity":1,"message":"687","line":7,"column":3,"nodeType":"668","messageId":"669","endLine":7,"endColumn":19},{"ruleId":"666","severity":1,"message":"688","line":8,"column":3,"nodeType":"668","messageId":"669","endLine":8,"endColumn":20},{"ruleId":"666","severity":1,"message":"743","line":18,"column":3,"nodeType":"668","messageId":"669","endLine":18,"endColumn":19},{"ruleId":"666","severity":1,"message":"667","line":21,"column":3,"nodeType":"668","messageId":"669","endLine":21,"endColumn":7},{"ruleId":"666","severity":1,"message":"685","line":22,"column":3,"nodeType":"668","messageId":"669","endLine":22,"endColumn":8},{"ruleId":"666","severity":1,"message":"689","line":26,"column":10,"nodeType":"668","messageId":"669","endLine":26,"endColumn":13},{"ruleId":"666","severity":1,"message":"690","line":29,"column":22,"nodeType":"668","messageId":"669","endLine":29,"endColumn":29},{"ruleId":"666","severity":1,"message":"691","line":30,"column":10,"nodeType":"668","messageId":"669","endLine":30,"endColumn":19},{"ruleId":"666","severity":1,"message":"692","line":30,"column":21,"nodeType":"668","messageId":"669","endLine":30,"endColumn":34},{"ruleId":"666","severity":1,"message":"693","line":33,"column":10,"nodeType":"668","messageId":"669","endLine":33,"endColumn":23},{"ruleId":"666","severity":1,"message":"694","line":34,"column":8,"nodeType":"668","messageId":"669","endLine":34,"endColumn":20},{"ruleId":"666","severity":1,"message":"695","line":35,"column":8,"nodeType":"668","messageId":"669","endLine":35,"endColumn":22},{"ruleId":"666","severity":1,"message":"696","line":36,"column":8,"nodeType":"668","messageId":"669","endLine":36,"endColumn":14},{"ruleId":"666","severity":1,"message":"697","line":40,"column":8,"nodeType":"668","messageId":"669","endLine":40,"endColumn":28},{"ruleId":"666","severity":1,"message":"751","line":57,"column":10,"nodeType":"668","messageId":"669","endLine":57,"endColumn":22},{"ruleId":"666","severity":1,"message":"699","line":57,"column":24,"nodeType":"668","messageId":"669","endLine":57,"endColumn":38},{"ruleId":"666","severity":1,"message":"752","line":59,"column":10,"nodeType":"668","messageId":"669","endLine":59,"endColumn":25},{"ruleId":"666","severity":1,"message":"753","line":60,"column":10,"nodeType":"668","messageId":"669","endLine":60,"endColumn":16},{"ruleId":"666","severity":1,"message":"754","line":60,"column":18,"nodeType":"668","messageId":"669","endLine":60,"endColumn":27},{"ruleId":"666","severity":1,"message":"700","line":61,"column":10,"nodeType":"668","messageId":"669","endLine":61,"endColumn":18},{"ruleId":"666","severity":1,"message":"701","line":66,"column":9,"nodeType":"668","messageId":"669","endLine":66,"endColumn":23},{"ruleId":"666","severity":1,"message":"702","line":74,"column":25,"nodeType":"668","messageId":"669","endLine":74,"endColumn":40},{"ruleId":"710","severity":1,"message":"711","line":148,"column":13,"nodeType":"712","endLine":164,"endColumn":4},{"ruleId":"674","severity":1,"message":"740","line":155,"column":17,"nodeType":"676","messageId":"677","endLine":155,"endColumn":19},{"ruleId":"671","severity":1,"message":"672","line":205,"column":9,"nodeType":"673","endLine":208,"endColumn":10},{"ruleId":"674","severity":1,"message":"675","line":241,"column":25,"nodeType":"676","messageId":"677","endLine":241,"endColumn":27},{"ruleId":"674","severity":1,"message":"740","line":242,"column":25,"nodeType":"676","messageId":"677","endLine":242,"endColumn":27},{"ruleId":"671","severity":1,"message":"672","line":242,"column":34,"nodeType":"673","endLine":242,"endColumn":54},{"ruleId":"666","severity":1,"message":"703","line":4,"column":8,"nodeType":"668","messageId":"669","endLine":4,"endColumn":22},{"ruleId":"674","severity":1,"message":"675","line":70,"column":26,"nodeType":"676","messageId":"677","endLine":70,"endColumn":28},{"ruleId":"674","severity":1,"message":"675","line":74,"column":17,"nodeType":"676","messageId":"677","endLine":74,"endColumn":19},{"ruleId":"674","severity":1,"message":"675","line":76,"column":17,"nodeType":"676","messageId":"677","endLine":76,"endColumn":19},{"ruleId":"674","severity":1,"message":"675","line":80,"column":19,"nodeType":"676","messageId":"677","endLine":80,"endColumn":21},{"ruleId":"674","severity":1,"message":"740","line":83,"column":19,"nodeType":"676","messageId":"677","endLine":83,"endColumn":21},{"ruleId":"666","severity":1,"message":"703","line":4,"column":8,"nodeType":"668","messageId":"669","endLine":4,"endColumn":22},{"ruleId":"666","severity":1,"message":"704","line":14,"column":10,"nodeType":"668","messageId":"669","endLine":14,"endColumn":20},{"ruleId":"666","severity":1,"message":"690","line":14,"column":22,"nodeType":"668","messageId":"669","endLine":14,"endColumn":29},{"ruleId":"666","severity":1,"message":"755","line":15,"column":8,"nodeType":"668","messageId":"669","endLine":15,"endColumn":17},{"ruleId":"666","severity":1,"message":"705","line":18,"column":11,"nodeType":"668","messageId":"669","endLine":18,"endColumn":23},{"ruleId":"666","severity":1,"message":"702","line":18,"column":25,"nodeType":"668","messageId":"669","endLine":18,"endColumn":40},{"ruleId":"666","severity":1,"message":"706","line":18,"column":48,"nodeType":"668","messageId":"669","endLine":18,"endColumn":60},{"ruleId":"666","severity":1,"message":"707","line":18,"column":62,"nodeType":"668","messageId":"669","endLine":18,"endColumn":77},{"ruleId":"666","severity":1,"message":"776","line":31,"column":9,"nodeType":"668","messageId":"669","endLine":31,"endColumn":23},{"ruleId":"666","severity":1,"message":"777","line":61,"column":7,"nodeType":"668","messageId":"669","endLine":61,"endColumn":15},{"ruleId":"666","severity":1,"message":"778","line":63,"column":7,"nodeType":"668","messageId":"669","endLine":63,"endColumn":13},{"ruleId":"666","severity":1,"message":"703","line":4,"column":8,"nodeType":"668","messageId":"669","endLine":4,"endColumn":22},{"ruleId":"666","severity":1,"message":"779","line":15,"column":7,"nodeType":"668","messageId":"669","endLine":15,"endColumn":13},{"ruleId":"666","severity":1,"message":"778","line":16,"column":7,"nodeType":"668","messageId":"669","endLine":16,"endColumn":13},{"ruleId":"671","severity":1,"message":"672","line":61,"column":9,"nodeType":"673","endLine":61,"endColumn":108},{"ruleId":"674","severity":1,"message":"740","line":64,"column":28,"nodeType":"676","messageId":"677","endLine":64,"endColumn":30},{"ruleId":"666","severity":1,"message":"780","line":25,"column":9,"nodeType":"668","messageId":"669","endLine":25,"endColumn":18},{"ruleId":"666","severity":1,"message":"781","line":26,"column":9,"nodeType":"668","messageId":"669","endLine":26,"endColumn":14},{"ruleId":"666","severity":1,"message":"782","line":19,"column":9,"nodeType":"668","messageId":"669","endLine":19,"endColumn":19},{"ruleId":"666","severity":1,"message":"783","line":19,"column":9,"nodeType":"668","messageId":"669","endLine":19,"endColumn":19},{"ruleId":"666","severity":1,"message":"780","line":23,"column":9,"nodeType":"668","messageId":"669","endLine":23,"endColumn":18},{"ruleId":"666","severity":1,"message":"784","line":2,"column":9,"nodeType":"668","messageId":"669","endLine":2,"endColumn":18},{"ruleId":"666","severity":1,"message":"785","line":2,"column":20,"nodeType":"668","messageId":"669","endLine":2,"endColumn":23},{"ruleId":"666","severity":1,"message":"786","line":3,"column":9,"nodeType":"668","messageId":"669","endLine":3,"endColumn":25},{"ruleId":"666","severity":1,"message":"787","line":28,"column":7,"nodeType":"668","messageId":"669","endLine":28,"endColumn":17},{"ruleId":"666","severity":1,"message":"788","line":59,"column":9,"nodeType":"668","messageId":"669","endLine":59,"endColumn":16},"no-native-reassign",["789"],"no-negated-in-lhs",["790"],"no-unused-vars","'Text' is defined but never used.","Identifier","unusedVar","'setWalletAddr' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'name' is assigned a value but never used.","'setName' is assigned a value but never used.","'email' is assigned a value but never used.","'setEmail' is assigned a value but never used.","'Pay' is defined but never used.","'ViewIcon' is defined but never used.","'ModalHeader' is defined but never used.","'Image' is defined but never used.","'InputGroup' is defined but never used.","'InputLeftElement' is defined but never used.","'InputRightElement' is defined but never used.","'Box' is defined but never used.","'Spinner' is defined but never used.","'getSender' is defined but never used.","'getSenderFull' is defined but never used.","'ArrowBackIcon' is defined but never used.","'ProfileModal' is defined but never used.","'ScrollableChat' is defined but never used.","'Lottie' is defined but never used.","'UpdateGroupChatModal' is defined but never used.","'setCurrency' is assigned a value but never used.","'setPaymentType' is assigned a value but never used.","'istyping' is assigned a value but never used.","'defaultOptions' is assigned a value but never used.","'setSelectedChat' is assigned a value but never used.","'ScrollableFeed' is defined but never used.","'IconButton' is defined but never used.","'selectedChat' is assigned a value but never used.","'notification' is assigned a value but never used.","'setNotification' is assigned a value but never used.",["789"],["790"],"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'Moralis'. Either include it or remove the dependency array.","ArrayExpression",["791"],"'connect' is defined but never used.","'AddIcon' is defined but never used.","'logoutHandler' is assigned a value but never used.","'Input' is defined but never used.","'img' is defined but never used.","'Drawer' is defined but never used.","'DrawerBody' is defined but never used.","'DrawerContent' is defined but never used.","'DrawerHeader' is defined but never used.","'DrawerOverlay' is defined but never used.","'Tooltip' is defined but never used.","'Avatar' is defined but never used.","'ChatLoading' is defined but never used.","'UserListItem' is defined but never used.","'setSearch' is assigned a value but never used.","'searchResult' is assigned a value but never used.","'loading' is assigned a value but never used.","'loadingChat' is assigned a value but never used.","'isOpen' is assigned a value but never used.","'onOpen' is assigned a value but never used.","'handleSearch' is assigned a value but never used.","'accessChat' is assigned a value but never used.","'postDetails' is assigned a value but never used.","'search' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'ChatState' is defined but never used.","'ModalFooter' is defined but never used.","'ModalCloseButton' is defined but never used.","'Button' is defined but never used.","'FaDollarSign' is defined but never used.","'BsArrowRight' is defined but never used.","'useStyles' is defined but never used.","'chain' is assigned a value but never used.","'setChain' is assigned a value but never used.","'setOwner_address' is assigned a value but never used.","'payment_type' is assigned a value but never used.","'socketConnected' is assigned a value but never used.","'typing' is assigned a value but never used.","'setTyping' is assigned a value but never used.","'senderc20' is defined but never used.","'response' is assigned a value but never used.","'approveResult' is assigned a value but never used.","'senderc20' is assigned a value but never used.","'PayNft' is defined but never used.","'owner_address' is assigned a value but never used.","'Select' is defined but never used.","'FormControl' is defined but never used.","'FormLabel' is defined but never used.","'useToast' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'axios' is defined but never used.","'animationData' is defined but never used.","'priceFeed' is defined but never used.","'io' is defined but never used.","'ENDPOINT' is assigned a value but never used.","'socket' is defined but never used.","'selectedChatCompare' is defined but never used.","'index' is assigned a value but never used.","'result' is assigned a value but never used.","'updateMessages' is assigned a value but never used.","'receiver' is assigned a value but never used.","'status' is assigned a value but never used.","'amount' is assigned a value but never used.","'submittxn' is assigned a value but never used.","'block' is assigned a value but never used.","'confirmtxn' is assigned a value but never used.","'executetxn' is assigned a value but never used.","'POSClient' is assigned a value but never used.","'use' is assigned a value but never used.","'Web3ClientPlugin' is assigned a value but never used.","'approveNft' is assigned a value but never used.","'sendNft' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"792","fix":"793"},"Update the dependencies array to be: [Moralis]",{"range":"794","text":"795"},[464,466],"[Moralis]"]