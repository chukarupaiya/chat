[{"/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/index.js":"1","/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/reportWebVitals.js":"2","/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/App.js":"3","/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/Context/ChatProvider.js":"4","/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/Pages/Homepage.js":"5","/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/Pages/Chatpage.js":"6","/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/Authentication/Login.js":"7","/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/Authentication/Signup.js":"8","/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/Chatbox.js":"9","/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/MyChats.js":"10","/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/miscellaneous/SideDrawer.js":"11","/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/miscellaneous/GroupChatModal.js":"12","/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/ChatLoading.js":"13","/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/SingleChat.js":"14","/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/miscellaneous/ProfileModal.js":"15","/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/config/ChatLogics.js":"16","/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/userAvatar/UserListItem.js":"17","/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/userAvatar/UserBadgeItem.js":"18","/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/PaymentChoice.js":"19","/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/Pay.js":"20","/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/miscellaneous/UpdateGroupChatModal.js":"21","/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/ScrollableChat.js":"22","/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/payment/PayToken.js":"23","/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/payment/RequestToken.js":"24","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/index.js":"25","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/reportWebVitals.js":"26","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/App.js":"27","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/Context/ChatProvider.js":"28","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/Pages/Chatpage.js":"29","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/Pages/Homepage.js":"30","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/Chatbox.js":"31","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/MyChats.js":"32","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/miscellaneous/SideDrawer.js":"33","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/Authentication/Signup.js":"34","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/Authentication/Login.js":"35","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/SingleChat.js":"36","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/ChatLoading.js":"37","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/miscellaneous/GroupChatModal.js":"38","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/config/ChatLogics.js":"39","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/userAvatar/UserListItem.js":"40","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/miscellaneous/ProfileModal.js":"41","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/ScrollableChat.js":"42","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/miscellaneous/UpdateGroupChatModal.js":"43","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/PaymentChoice.js":"44","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/Pay.js":"45","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/userAvatar/UserBadgeItem.js":"46","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/PayNft.js":"47","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/payment/RequestToken.js":"48","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/payment/PayToken.js":"49","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/snap/export.js":"50","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/contracts/frontend-interaction/senderc20.js":"51"},{"size":736,"mtime":1636629652000,"results":"52","hashOfConfig":"53"},{"size":362,"mtime":1636629652000,"results":"54","hashOfConfig":"53"},{"size":342,"mtime":1676302049522,"results":"55","hashOfConfig":"53"},{"size":1034,"mtime":1676198359339,"results":"56","hashOfConfig":"53"},{"size":1997,"mtime":1676341459675,"results":"57","hashOfConfig":"53"},{"size":774,"mtime":1636629652000,"results":"58","hashOfConfig":"53"},{"size":2917,"mtime":1676341542638,"results":"59","hashOfConfig":"53"},{"size":5591,"mtime":1676341369949,"results":"60","hashOfConfig":"53"},{"size":613,"mtime":1675505948026,"results":"61","hashOfConfig":"53"},{"size":4009,"mtime":1675576023644,"results":"62","hashOfConfig":"53"},{"size":6382,"mtime":1676198417160,"results":"63","hashOfConfig":"53"},{"size":4990,"mtime":1636629652000,"results":"64","hashOfConfig":"53"},{"size":589,"mtime":1636629652000,"results":"65","hashOfConfig":"53"},{"size":8565,"mtime":1675869673953,"results":"66","hashOfConfig":"53"},{"size":1713,"mtime":1675571251367,"results":"67","hashOfConfig":"53"},{"size":1337,"mtime":1636629652000,"results":"68","hashOfConfig":"53"},{"size":876,"mtime":1636629652000,"results":"69","hashOfConfig":"53"},{"size":526,"mtime":1636629652000,"results":"70","hashOfConfig":"53"},{"size":2202,"mtime":1675593533659,"results":"71","hashOfConfig":"53"},{"size":8792,"mtime":1675867163371,"results":"72","hashOfConfig":"53"},{"size":7163,"mtime":1675506885310,"results":"73","hashOfConfig":"53"},{"size":2953,"mtime":1675870080249,"results":"74","hashOfConfig":"53"},{"size":2199,"mtime":1675862610184,"results":"75","hashOfConfig":"53"},{"size":3382,"mtime":1675870098499,"results":"76","hashOfConfig":"53"},{"size":736,"mtime":1636629652000,"results":"77","hashOfConfig":"78"},{"size":362,"mtime":1636629652000,"results":"79","hashOfConfig":"78"},{"size":700,"mtime":1676362945767,"results":"80","hashOfConfig":"78"},{"size":1034,"mtime":1676198359339,"results":"81","hashOfConfig":"78"},{"size":828,"mtime":1676362697815,"results":"82","hashOfConfig":"78"},{"size":2305,"mtime":1676552490339,"results":"83","hashOfConfig":"78"},{"size":668,"mtime":1676362755197,"results":"84","hashOfConfig":"78"},{"size":4013,"mtime":1676361085534,"results":"85","hashOfConfig":"78"},{"size":6382,"mtime":1676198417160,"results":"86","hashOfConfig":"78"},{"size":5688,"mtime":1676512956650,"results":"87","hashOfConfig":"78"},{"size":2964,"mtime":1676512822142,"results":"88","hashOfConfig":"78"},{"size":8780,"mtime":1676443591586,"results":"89","hashOfConfig":"78"},{"size":589,"mtime":1636629652000,"results":"90","hashOfConfig":"78"},{"size":4990,"mtime":1636629652000,"results":"91","hashOfConfig":"78"},{"size":1337,"mtime":1636629652000,"results":"92","hashOfConfig":"78"},{"size":876,"mtime":1636629652000,"results":"93","hashOfConfig":"78"},{"size":1735,"mtime":1676356505568,"results":"94","hashOfConfig":"78"},{"size":2953,"mtime":1675870080249,"results":"95","hashOfConfig":"78"},{"size":7163,"mtime":1675506885310,"results":"96","hashOfConfig":"78"},{"size":2481,"mtime":1676443102657,"results":"97","hashOfConfig":"78"},{"size":9949,"mtime":1676553767786,"results":"98","hashOfConfig":"78"},{"size":526,"mtime":1636629652000,"results":"99","hashOfConfig":"78"},{"size":7377,"mtime":1676512483003,"results":"100","hashOfConfig":"78"},{"size":3382,"mtime":1676463721312,"results":"101","hashOfConfig":"78"},{"size":2199,"mtime":1676425818278,"results":"102","hashOfConfig":"78"},{"size":605,"mtime":1676545568776,"results":"103","hashOfConfig":"78"},{"size":1558,"mtime":1676553269127,"results":"104","hashOfConfig":"78"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},"myuihg",{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"107"},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"107"},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"107"},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"107"},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"107"},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"107"},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},"adwqft",{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"162"},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"176","messages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"178","messages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"180","messages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"162"},{"filePath":"183","messages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"162"},{"filePath":"186","messages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"162"},{"filePath":"189","messages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"191","messages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"193","messages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"195","messages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"197","messages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"199","messages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"162"},{"filePath":"201","messages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"203","messages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"162"},{"filePath":"206","messages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"208","messages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"210","messages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"162"},{"filePath":"213","messages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"162"},{"filePath":"215","messages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"162"},{"filePath":"217","messages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"162"},{"filePath":"220","messages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"162"},"/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/index.js",[],["223","224"],"/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/reportWebVitals.js",[],"/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/App.js",[],"/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/Context/ChatProvider.js",[],"/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/Pages/Homepage.js",["225","226","227","228"],"/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/Pages/Chatpage.js",[],"/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/Authentication/Login.js",["229"],"/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/Authentication/Signup.js",["230","231","232","233","234"],"/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/Chatbox.js",[],"/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/MyChats.js",[],"/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/miscellaneous/SideDrawer.js",[],"/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/miscellaneous/GroupChatModal.js",[],"/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/ChatLoading.js",[],"/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/SingleChat.js",["235"],"import { FormControl } from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport \"./SingleChat.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\n\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport Pay from \"./Pay\";\nimport PaymentChoice from \"./PaymentChoice\";\n\nconst ENDPOINT = \"http://localhost:5000\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\nvar socket, selectedChatCompare;\n\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      setLoading(true);\n\n      const { data } = await axios.get(\n        `/api/message/${selectedChat._id}`,\n        config\n      );\n      setMessages(data);\n      setLoading(false);\n\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  const sendMessage = async (event) => {\n    if (event.key === \"Enter\" && newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        console.log(newMessage + \" \" + selectedChat);\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n            payment: false,\n            payment_mode:\"false\",\n            chat_mode:\"private\",\n            payment_type:\"false\",\n            currency:\"false\",\n          },\n          config\n        );\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n    console.log(socket);\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    fetchMessages();\n\n    selectedChatCompare = selectedChat;\n    // eslint-disable-next-line\n  }, [selectedChat]);\n\n  const refAgain = () => {\n    fetchMessages();\n  };\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  return (\n    <>\n      {selectedChat ? (\n        <>\n          <Text\n            fontSize={{ base: \"28px\", md: \"30px\" }}\n            pb={3}\n            px={2}\n            w=\"100%\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent={{ base: \"space-between\" }}\n            alignItems=\"center\"\n            color=\"white\"\n          >\n            <IconButton\n              d={{ base: \"flex\", md: \"none\" }}\n              icon={<ArrowBackIcon />}\n              onClick={() => setSelectedChat(\"\")}\n            />\n            {messages &&\n              (!selectedChat.isGroupChat ? (\n                <>\n                  {getSender(user, selectedChat.users)}\n                  <ProfileModal\n                    user={getSenderFull(user, selectedChat.users)}\n                  />\n                </>\n              ) : (\n                <>\n                  {selectedChat.chatName.toUpperCase()}\n                  <UpdateGroupChatModal\n                    fetchMessages={fetchMessages}\n                    fetchAgain={fetchAgain}\n                    setFetchAgain={setFetchAgain}\n                  />\n                </>\n              ))}\n          </Text>\n          <Box\n            d=\"flex\"\n            flexDir=\"column\"\n            justifyContent=\"flex-end\"\n            p={3}\n            bg=\"rgb(66,69,73)\"\n            w=\"100%\"\n            h=\"100%\"\n            borderRadius=\"lg\"\n            overflowY=\"hidden\"\n          >\n            {loading ? (\n              <Spinner\n                size=\"xl\"\n                w={20}\n                h={20}\n                alignSelf=\"center\"\n                margin=\"auto\"\n              />\n            ) : (\n              <div className=\"messages\">\n                <ScrollableChat messages={messages} refAgain={refAgain} />\n              </div>\n            )}\n\n            <FormControl\n              onKeyDown={sendMessage}\n              id=\"first-name\"\n              isRequired\n              mt={3}\n            >\n              {istyping ? (\n                <div>\n                  <Lottie\n                    options={defaultOptions}\n                    // height={50}\n                    width={70}\n                    style={{ marginBottom: 15, marginLeft: 0 }}\n                  />\n                </div>\n              ) : (\n                <></>\n              )}\n              <div style={{ margin: \"auto\", display: \"flex\" }}>\n                <Input\n                  variant=\"filled\"\n                  bg=\"rgb(54,57,62)\"\n                  color=\"white\"\n                  focusBorderColor=\"rgb(54,57,62)\"\n                  placeholder=\"Enter a message..\"\n                  value={newMessage}\n                  width=\"97%\"\n                  onChange={typingHandler}\n                  _hover={{ bg: \"rgb(54,57,62)\" }}\n                />\n                <PaymentChoice\n                  fetchAgain={fetchAgain}\n                  setFetchAgain={setFetchAgain}\n                  fetchMessages={fetchMessages}\n                  refAgain={refAgain}\n                />\n              </div>\n            </FormControl>\n          </Box>\n        </>\n      ) : (\n        // to get socket.io on same page\n        <Box\n          d=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          h=\"100%\"\n          w=\"100%\"\n          bg=\"rgb(54,57,62)\"\n        >\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\" color=\"white\">\n            Click on a user to start chatting\n          </Text>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default SingleChat;\n","/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/miscellaneous/ProfileModal.js",[],"/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/config/ChatLogics.js",[],"/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/userAvatar/UserListItem.js",[],"/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/userAvatar/UserBadgeItem.js",[],"/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/PaymentChoice.js",["236","237","238","239"],"import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  IconButton,\n  Text,\n  Image,\n} from \"@chakra-ui/react\";\nimport Pay from \"./Pay\";\nimport './Pay.css';\nimport { FaDollarSign } from \"react-icons/fa\";\n\nconst PaymentChoice = ({\n  children,\n  fetchAgain,\n  setFetchAgain,\n  fetchMessages,\n  refAgain,\n}) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      {children ? (\n        <span onClick={onOpen}>{children}</span>\n      ) : (\n        <IconButton\n          d={{ base: \"flex\" }}\n          icon={<FaDollarSign />}\n          onClick={onOpen}\n          colorScheme=\"grey\"\n          _hover={{ bg: \"rgb(2, 163, 34);\" }}\n          bg=\"rgb(114,137,218)\"\n          borderRadius=\"50%\"\n          marginLeft=\"8px\"\n        />\n      )}\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent h=\"410px\" bg={\"rgb(30,33,36)\"} color=\"white\">\n          <ModalCloseButton />\n          <ModalBody\n            d=\"flex\"\n            flexDir=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n          >\n            \n              <div className=\"payment_choice\">\n                <Pay\n                  fetchAgain={fetchAgain}\n                  setFetchAgain={setFetchAgain}\n                  fetchMessages={fetchMessages}\n                  refAgain={refAgain}\n                  toClose={onClose}\n                ></Pay>\n              </div>\n              <div className=\"payment_choice\">\n               \n                <Pay\n                  fetchAgain={fetchAgain}\n                  setFetchAgain={setFetchAgain}\n                  fetchMessages={fetchMessages}\n                  refAgain={refAgain}\n                  toClose={onClose}\n                ></Pay>\n              </div>\n            \n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose} bg=\"rgb(114,137,218)\"\n              marginRight={\"10px\"}>Close</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default PaymentChoice;\n","/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/Pay.js",["240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258"],"import { React } from \"react\";\nimport \"./Pay.css\";\nimport { FaDollarSign } from \"react-icons/fa\";\nimport {\n  Input,\n  InputGroup,\n  InputLeftElement,\n  InputRightElement,\n} from \"@chakra-ui/input\";\n\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  Text,\n  Image,\n  Select,\n} from \"@chakra-ui/react\";\nimport { FormControl } from \"@chakra-ui/form-control\";\nimport { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport \"./SingleChat.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\n\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst ENDPOINT = \"http://localhost:5000\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\nvar socket, selectedChatCompare;\n\nconst Pay = ({\n  fetchAgain,\n  setFetchAgain,\n  fetchMessages,\n  refAgain,\n  toClose,\n}) => {\n  const [messages, setMessages] = useState([]);\n  const [currency, setCurrency] = useState(\"WAT\");\n  const [payment_type, setPaymentType] = useState(\"token\");\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const sendMessage = async (event) => {\n    if (newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        console.log(newMessage + \" \" + selectedChat);\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n            payment: true,\n            payment_mode:\"pay\",\n            chat_mode:\"private\",\n            payment_type:payment_type,\n            currency:currency,\n          },\n          config\n        );\n        console.log(data);\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n      refAgain();\n    }\n  };\n\n  const sendMessageReq = async (event) => {\n    if (newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        console.log(newMessage + \" \" + selectedChat);\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n            payment: true,\n            payment_mode:\"request\",\n            chat_mode:\"private\",\n            payment_type:payment_type,\n            currency:currency,\n          },\n          config\n        );\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n      refAgain();\n    }\n  };\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n    console.log(socket);\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      <Button width=\"100%\" height=\"100%\" margin={\"0px\"} padding=\"0px\">\n        <p class=\"choice_label\">TOKEN</p>\n        <IconButton\n          d={{ base: \"flex\" }}\n          icon={<FaDollarSign />}\n          onClick={onOpen}\n          colorScheme=\"grey\"\n          _hover={{ bg: \"rgb(68, 201, 34);\" }}\n          bg=\"rgb(114,137,218)\"\n          color={\"white\"}\n          width=\"100%\"\n          height=\"100%\"\n        />\n      </Button>\n\n      <Modal\n        size=\"lg\"\n        onClose={() => {\n          onClose();\n          toClose();\n        }}\n        isOpen={isOpen}\n        isCentered\n      >\n        <ModalOverlay />\n        <ModalContent h=\"410px\" bg={\"rgb(30,33,36)\"} color=\"white\">\n          <ModalHeader\n            fontSize=\"40px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            margin={\"5px\"}\n            justifyContent=\"center\"\n          >\n            {\"Payment\"}\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            \n              <FormControl\n                onSubmit={sendMessage}\n                id=\"first-name\"\n                isRequired\n                mt={3}\n                width={\"100%\"}\n                margin={\"auto\"}\n              >\n                <div style={{\"width\":\"100%\",\"margin\":\"auto\",}}>\n                <Input\n                    placeholder=\"Enter amount $\"\n                    type=\"number\"\n                    variant=\"filled\"\n                    bg=\"rgb(54,57,62)\"\n                    color=\"white\"\n                    focusBorderColor=\"rgb(54,57,62)\"\n                    value={newMessage}\n                    width=\"50%\"\n                    textAlign={\"Center\"}\n                    marginLeft={\"25%\"}\n                    marginRight={\"auto\"}\n                    marginBottom={\"15px\"}\n                    height={\"100px\"}\n                    fontSize=\"20px\"\n                    onChange={typingHandler}\n                    _hover={{ bg: \"rgb(54,57,62)\" }}\n                  />\n                </div>\n                  \n                  <Select placeholder=\"select the token\" size=\"lg\" width={\"80%\"} margin={\"auto\"}>\n                    <option value=\"option1\">ETH</option>\n                    <option value=\"option2\">WAT</option>\n                    <option value=\"option3\">ONI</option>\n                  </Select>\n                \n              </FormControl>\n           \n          </ModalBody>\n          <ModalFooter>\n            <Button\n              onClick={() => {\n                onClose();\n                sendMessageReq();\n                toClose();\n              }}\n              bg=\"rgb(114,137,218)\"\n              marginRight={\"10px\"}\n            >\n              Request\n            </Button>\n            <Button\n              onClick={() => {\n                onClose();\n                sendMessage();\n                toClose();\n              }}\n              bg=\"rgb(114,137,218)\"\n            >\n              Pay\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default Pay;\n","/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/miscellaneous/UpdateGroupChatModal.js",[],"/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/ScrollableChat.js",["259","260"],"import { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../config/ChatLogics\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport \"./Pay.css\";\nimport PayToken from \"./payment/PayToken\";\nimport RequestToken from \"./payment/RequestToken\";\n\nconst ScrollableChat = ({ messages ,refAgain}) => {\n  const { user } = ChatState();\n\n  return (\n    <ScrollableFeed>\n      {messages &&\n        messages.map((m, i) =>\n          m.payment ? (\n            m.payment_type == \"token\" ? (\n              m.payment_mode == \"request\" ? (\n                <RequestToken\n                  sender_name={m.sender.name}\n                  sender_pic={m.sender.pic}\n                  sender_id={m.sender._id}\n                  content={m.content}\n                  id={m._id}\n                  messages={messages}\n                  m={m}\n                  i={i}\n                  user_id={user._id}\n                  refAgain={refAgain}\n                ></RequestToken>\n              ) : (\n                <PayToken\n                  sender_name={m.sender.name}\n                  sender_pic={m.sender.pic}\n                  sender_id={m.sender._id}\n                  content={m.content}\n                  id={m._id}\n                  messages={messages}\n                  m={m}\n                  i={i}\n                  user_id={user._id}\n                ></PayToken>\n              )\n            ) : (\n              <div></div>\n            )\n          ) : (\n            <div style={{ display: \"flex\" }} key={m._id}>\n              {(isSameSender(messages, m, i, user._id) ||\n                isLastMessage(messages, i, user._id)) && (\n                <Tooltip\n                  label={m.sender.name}\n                  placement=\"bottom-start\"\n                  hasArrow\n                >\n                  <Avatar\n                    mt=\"7px\"\n                    mr={1}\n                    size=\"sm\"\n                    cursor=\"pointer\"\n                    name={m.sender.name}\n                    src={m.sender.pic}\n                  />\n                </Tooltip>\n              )}\n              <span\n                style={{\n                  backgroundColor: `${\n                    m.sender._id === user._id\n                      ? \"rgb(54,57,62)\"\n                      : \"rgb(40,43,48)\"\n                  }`,\n                  marginLeft: isSameSenderMargin(messages, m, i, user._id),\n                  marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\n                  borderRadius: \"20px\",\n                  padding: \"5px 15px\",\n                  maxWidth: \"75%\",\n                  color: \"white\",\n                }}\n              >\n                {m.content}\n              </span>\n            </div>\n          )\n        )}\n    </ScrollableFeed>\n  );\n};\n\nexport default ScrollableChat;\n","/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/payment/PayToken.js",["261"],"import {React} from 'react';\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../../config/ChatLogics\";\nimport \"../Pay.css\";\n\n\nconst PayToken=(props)=>{\n\n  var receiver=\"karupaiya\";\n  var amount=props.content;\n  var status=\"Paid\";\n  var date=\"Dec 30\";\n\n\n    return(\n        <div style={{ display: \"flex\" }} key={props.id}>\n              {(isSameSender(props.messages, props.m, props.i, props.user_id) ||\n                isLastMessage(props.messages, props.i, props.user_id)) && (\n                <Tooltip\n                  label={props.sender_name}\n                  placement=\"bottom-start\"\n                  hasArrow\n                >\n                  <Avatar\n                    mt=\"7px\"\n                    mr={1}\n                    size=\"sm\"\n                    cursor=\"pointer\"\n                    name={props.sender_name}\n                    src={props.sender_pic}\n                  />\n                </Tooltip>\n              )}\n              <div\n                style={{\n                  backgroundColor: `${\n                    props.sender_id === props.user_id\n                      ? \"rgb(54,57,62)\"\n                      : \"rgb(40,43,48)\"\n                  }`,\n                  marginLeft: isSameSenderMargin(props.messages, props.m, props.i, props.user_id),\n                  marginTop: isSameUser(props.messages, props.m, props.i, props.user_id) ? 3 : 10,\n                  borderRadius: \"20px\",\n                  padding: \"5px 15px\",\n                  maxWidth: \"75%\",\n                  minWidth:\"230px\",\n                  color: \"white\",\n                  height:\"140px\",\n                }}\n              >\n                <p class=\"payment_user\">Payment to {receiver}</p>\n                <p class=\"payment_amount\">${amount}</p>\n                <div style={{\"display\":\"flex\"}}>\n                  <p class=\"payment_status\">{status}&ensp;&ensp;</p>\n                  <p class=\"payment_date\">{date}</p>\n                </div>\n              </div>\n            </div>\n    );\n}\n\n\nexport default PayToken;","/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/payment/RequestToken.js",["262","263","264","265","266","267","268"],"import {React} from 'react';\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../../config/ChatLogics\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport \"../Pay.css\";\nimport axios from \"axios\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\n\n\nconst RequestToken=(props)=>{\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n    const toast = useToast();\n\n  const updateMessages = async () => {\n   \n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      console.log(\"updating\"+props.id);\n      const { data } = await axios.post(\n        `/api/message/update`,\n        {\n          messageId:props.id\n        },\n        config\n      );\n      console.log(\"updating\");\n      console.log(data);\n      \n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n   props.refAgain();\n  };\n\n\n\n  var receiver=\"karupaiya\";\n  var amount=props.content;\n  var status=\"Requested\";\n  var date=\"Dec 30\";\n\n\n\n    return(\n        <div style={{ display: \"flex\" }} key={props.id}>\n              {(isSameSender(props.messages, props.m, props.i, props.user_id) ||\n                isLastMessage(props.messages, props.i, props.user_id)) && (\n                <Tooltip\n                  label={props.sender_name}\n                  placement=\"bottom-start\"\n                  hasArrow\n                >\n                  <Avatar\n                    mt=\"7px\"\n                    mr={1}\n                    size=\"sm\"\n                    cursor=\"pointer\"\n                    name={props.sender_name}\n                    src={props.sender_pic}\n                  />\n                </Tooltip>\n              )}\n              <div\n                style={{\n                  backgroundColor: `${\n                    props.sender_id === props.user_id\n                    ? \"rgb(54,57,62)\"\n                    : \"rgb(40,43,48)\"\n                  }`,\n                  marginLeft: isSameSenderMargin(props.messages, props.m, props.i, props.user_id),\n                  marginTop: isSameUser(props.messages, props.m, props.i, props.user_id) ? 3 : 10,\n                  borderRadius: \"20px\",\n                  padding: \"5px 15px\",\n                  maxWidth: \"75%\",\n                  minWidth:\"230px\",\n                  color: \"white\",\n                  height:props.sender_id === props.user_id?\"140px\":\"180px\",\n                }}\n              >\n                <p class=\"payment_user\">Requested to {receiver}</p>\n                <p class=\"payment_amount\">${amount}</p>\n                <div style={{\"display\":\"flex\"}}>\n                  <p class=\"payment_status\">{status}&ensp;&ensp;</p>\n                  <p class=\"payment_date\">{date}</p>\n                </div>\n                <div>\n                  {!(props.sender_id === props.user_id) && <button class={\"pay_btn\"} onClick={updateMessages}>pay</button>}\n                </div>\n              </div>\n            </div>\n    );\n}\n\n\nexport default RequestToken;","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/index.js",[],["269","270"],"/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/reportWebVitals.js",[],"/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/App.js",["271","272"],"import \"./App.css\";\nimport Homepage from \"./Pages/Homepage\";\nimport { Route } from \"react-router-dom\";\nimport Chatpage from \"./Pages/Chatpage\";\nimport { useEffect } from \"react\";\n\nfunction App() {\n  const Moralis = require(\"moralis\").default;\n  const { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\n  useEffect(async () => {\n    await Moralis.start({\n      apiKey:\n        \"T5yjNDWdaF7Re1aS1kTgLl4cVWdFjiCx1cY1NVgxJtr7wQox2N1xdJXXV2DfamTB\",\n    });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Route path=\"/\" component={Homepage} exact />\n      <Route path=\"/chats\">\n        <Chatpage Moralis={Moralis} EvmChain={EvmChain} />\n      </Route>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/Context/ChatProvider.js",[],"/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/Pages/Chatpage.js",[],"/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/Pages/Homepage.js",["273","274","275","276"],"/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/Chatbox.js",[],"/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/MyChats.js",[],"/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/miscellaneous/SideDrawer.js",[],"/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/Authentication/Signup.js",["277","278","279","280","281","282"],"\nimport { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router\";\n\nconst Signup = (props) => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const history = useHistory();\n  const[walletAddr,setWalletAddr]=useState(props.walletAddr);\n\n  const [name, setName] = useState();\n  const [email, setEmail] = useState();\n  const [confirmpassword, setConfirmpassword] = useState();\n  const [password, setPassword] = useState();\n  const [pic, setPic] = useState();\n  const [picLoading, setPicLoading] = useState(false);\n\n  const submitHandler = async () => {\n    setPicLoading(true);\n    if (!walletAddr || !password || !confirmpassword) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n    if (password !== confirmpassword) {\n      toast({\n        title: \"Passwords Do Not Match\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(walletAddr, password, pic);\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n      const { data } = await axios.post(\n        \"/api/user\",\n        {\n          name:walletAddr,\n          email:walletAddr,\n          password:password,\n          pic:pic,\n        },\n        config\n      );\n      console.log(data);\n      toast({\n        title: \"Registration Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setPicLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n    }\n  };\n\n  const postDetails = (pics) => {\n    setPicLoading(true);\n    if (pics === undefined) {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(pics);\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\n      const data = new FormData();\n      data.append(\"file\", pics);\n      data.append(\"upload_preset\", \"chat-app\");\n      data.append(\"cloud_name\", \"piyushproj\");\n      fetch(\"https://api.cloudinary.com/v1_1/piyushproj/image/upload\", {\n        method: \"post\",\n        body: data,\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          setPic(data.url.toString());\n          console.log(data.url.toString());\n          setPicLoading(false);\n        })\n        .catch((err) => {\n          console.log(err);\n          setPicLoading(false);\n        });\n    } else {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n  };\n\n  return (\n    <VStack spacing=\"5px\">\n      <FormControl id=\"first-name\" isRequired>\n        <FormLabel>Name</FormLabel>\n        <Input\n          value={walletAddr}\n          disabled\n        />\n      </FormControl>\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Wallet Address</FormLabel>\n        <Input\n          value={walletAddr}\n          disabled\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter Password\"\n            onChange={(e) => setPassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick} color=\"black\"\n        bg=\"white\">\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Confirm Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Confirm password\"\n            onChange={(e) => setConfirmpassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick} color=\"black\"\n        bg=\"white\">\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      {/* <FormControl id=\"pic\">\n        <FormLabel>Upload your Picture</FormLabel>\n        <Input\n          type=\"file\"\n          p={1.5}\n          accept=\"image/*\"\n          onChange={(e) => postDetails(e.target.files[0])}\n        />\n      </FormControl> */}\n      <Button\n        \n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={picLoading}\n        color=\"black\"\n        bg=\"white\"\n      >\n        Sign Up\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Signup;\n","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/Authentication/Login.js",["283"],"import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst Login = (props) => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const [password, setPassword] = useState();\n  const [loading, setLoading] = useState(false);\n  const [walletAddr,setWalletAddr]=useState(props.walletAddr);\n\n  const history = useHistory();\n\n  const submitHandler = async () => {\n    setLoading(true);\n    if (!walletAddr || !password) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n      return;\n    }\n\n    \n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n\n      const { data } = await axios.post(\n        \"/api/user/login\",\n        { email:walletAddr, password:password },\n        config\n      );\n\n      // console.log(JSON.stringify(data));\n      toast({\n        title: \"Login Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n  };\n\n  return (\n    <VStack spacing=\"10px\">\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Wallet Address</FormLabel>\n        <Input\n          value={walletAddr}\n          disabled\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter password\"\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick} color=\"black\"\n        bg=\"white\">\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <Button\n        color=\"black\"\n        bg=\"white\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={loading}\n      >\n        Login\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Login;\n","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/SingleChat.js",["284"],"import { FormControl } from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport \"./SingleChat.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\n\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport Pay from \"./Pay\";\nimport PaymentChoice from \"./PaymentChoice\";\n\nconst ENDPOINT = \"http://localhost:5000\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\nvar socket, selectedChatCompare;\n\nconst SingleChat = ({ fetchAgain, setFetchAgain ,Moralis, EvmChain}) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      setLoading(true);\n\n      const { data } = await axios.get(\n        `/api/message/${selectedChat._id}`,\n        config\n      );\n      setMessages(data);\n      setLoading(false);\n\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n        receiver_id:getSender(user, selectedChat.users)\n      });\n    }\n  };\n\n  const sendMessage = async (event) => {\n    if (event.key === \"Enter\" && newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        console.log(newMessage + \" \" + selectedChat);\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n            payment: false,\n            payment_mode:\"false\",\n            chat_mode:\"private\",\n            payment_type:\"false\",\n            currency:\"false\",\n          },\n          config\n        );\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n    console.log(socket);\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    fetchMessages();\n\n    selectedChatCompare = selectedChat;\n    // eslint-disable-next-line\n  }, [selectedChat]);\n\n  const refAgain = () => {\n    fetchMessages();\n  };\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  return (\n    <>\n      {selectedChat ? (\n        <>\n          <Text\n            fontSize={{ base: \"28px\", md: \"30px\" }}\n            pb={3}\n            px={2}\n            w=\"100%\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent={{ base: \"space-between\" }}\n            alignItems=\"center\"\n            color=\"white\"\n          >\n            <IconButton\n              d={{ base: \"flex\", md: \"none\" }}\n              icon={<ArrowBackIcon />}\n              onClick={() => setSelectedChat(\"\")}\n            />\n            {messages &&\n              (!selectedChat.isGroupChat ? (\n                <>\n                  {getSender(user, selectedChat.users)}\n                  <ProfileModal\n                    user={getSenderFull(user, selectedChat.users)}\n                  />\n                </>\n              ) : (\n                <>\n                  {selectedChat.chatName.toUpperCase()}\n                  <UpdateGroupChatModal\n                    fetchMessages={fetchMessages}\n                    fetchAgain={fetchAgain}\n                    setFetchAgain={setFetchAgain}\n                  />\n                </>\n              ))}\n          </Text>\n          <Box\n            d=\"flex\"\n            flexDir=\"column\"\n            justifyContent=\"flex-end\"\n            p={3}\n            bg=\"rgb(66,69,73)\"\n            w=\"100%\"\n            h=\"100%\"\n            borderRadius=\"lg\"\n            overflowY=\"hidden\"\n          >\n            {loading ? (\n              <Spinner\n                size=\"xl\"\n                w={20}\n                h={20}\n                alignSelf=\"center\"\n                margin=\"auto\"\n              />\n            ) : (\n              <div className=\"messages\">\n                <ScrollableChat messages={messages} refAgain={refAgain} />\n              </div>\n            )}\n\n            <FormControl\n              onKeyDown={sendMessage}\n              id=\"first-name\"\n              isRequired\n              mt={3}\n            >\n              {istyping ? (\n                <div>\n                  <Lottie\n                    options={defaultOptions}\n                    // height={50}\n                    width={70}\n                    style={{ marginBottom: 15, marginLeft: 0 }}\n                  />\n                </div>\n              ) : (\n                <></>\n              )}\n              <div style={{ margin: \"auto\", display: \"flex\" }}>\n                <Input\n                  variant=\"filled\"\n                  bg=\"rgb(54,57,62)\"\n                  color=\"white\"\n                  focusBorderColor=\"rgb(54,57,62)\"\n                  placeholder=\"Enter a message..\"\n                  value={newMessage}\n                  width=\"97%\"\n                  onChange={typingHandler}\n                  _hover={{ bg: \"rgb(54,57,62)\" }}\n                />\n                <PaymentChoice\n                  fetchAgain={fetchAgain}\n                  setFetchAgain={setFetchAgain}\n                  fetchMessages={fetchMessages}\n                  refAgain={refAgain}\n                  Moralis={Moralis} \n                  EvmChain={EvmChain}\n                  sender_id={getSender(user, selectedChat.users)}\n                />\n              </div>\n            </FormControl>\n          </Box>\n        </>\n      ) : (\n        // to get socket.io on same page\n        <Box\n          d=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          h=\"100%\"\n          w=\"100%\"\n          bg=\"rgb(54,57,62)\"\n        >\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\" color=\"white\">\n            Click on a user to start chatting\n          </Text>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default SingleChat;\n","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/ChatLoading.js",[],"/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/miscellaneous/GroupChatModal.js",[],"/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/config/ChatLogics.js",[],"/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/userAvatar/UserListItem.js",[],"/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/miscellaneous/ProfileModal.js",[],"/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/ScrollableChat.js",["285","286"],"/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/miscellaneous/UpdateGroupChatModal.js",[],"/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/PaymentChoice.js",["287","288","289","290"],"import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  IconButton,\n  Text,\n  Image,\n} from \"@chakra-ui/react\";\nimport Pay from \"./Pay\";\nimport \"./Pay.css\";\nimport { FaDollarSign } from \"react-icons/fa\";\nimport PayNft from \"./PayNft\";\n\nconst PaymentChoice = ({\n  children,\n  fetchAgain,\n  setFetchAgain,\n  fetchMessages,\n  refAgain,\n  Moralis,\n  EvmChain,\n  sender_id\n}) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      {children ? (\n        <span onClick={onOpen}>{children}</span>\n      ) : (\n        <IconButton\n          d={{ base: \"flex\" }}\n          icon={<FaDollarSign />}\n          onClick={onOpen}\n          colorScheme=\"grey\"\n          _hover={{ bg: \"rgb(2, 163, 34);\" }}\n          bg=\"rgb(114,137,218)\"\n          borderRadius=\"50%\"\n          marginLeft=\"8px\"\n        />\n      )}\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent h=\"410px\" bg={\"rgb(30,33,36)\"} color=\"white\">\n          <ModalCloseButton />\n          <ModalBody\n            d=\"flex\"\n            flexDir=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n          >\n            <div className=\"payment_choice\">\n              <Pay\n                fetchAgain={fetchAgain}\n                setFetchAgain={setFetchAgain}\n                fetchMessages={fetchMessages}\n                refAgain={refAgain}\n                toClose={onClose}\n                Moralis={Moralis}\n                EvmChain={EvmChain}\n                sender_id={sender_id}\n              ></Pay>\n            </div>\n            <div className=\"payment_choice\">\n              <PayNft\n                fetchAgain={fetchAgain}\n                setFetchAgain={setFetchAgain}\n                fetchMessages={fetchMessages}\n                refAgain={refAgain}\n                toClose={onClose}\n                Moralis={Moralis}\n                EvmChain={EvmChain}\n                sender_id={sender_id}\n              ></PayNft>\n            </div>\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              onClick={onClose}\n              bg=\"rgb(114,137,218)\"\n              marginRight={\"10px\"}\n            >\n              Close\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default PaymentChoice;\n","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/Pay.js",["291","292","293","294","295","296","297","298","299","300","301","302","303","304","305","306","307","308","309","310"],"/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/userAvatar/UserBadgeItem.js",[],"/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/PayNft.js",["311","312","313","314","315","316","317","318","319","320","321","322","323","324","325","326","327","328","329","330","331","332","333","334","335","336","337","338"],"import { React } from \"react\";\nimport \"./Pay.css\";\nimport { FaDollarSign } from \"react-icons/fa\";\nimport {\n  Input,\n  InputGroup,\n  InputLeftElement,\n  InputRightElement,\n} from \"@chakra-ui/input\";\n\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  Text,\n  Image,\n  Select,\n} from \"@chakra-ui/react\";\nimport { FormControl } from \"@chakra-ui/form-control\";\nimport { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport \"./SingleChat.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\n\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst ENDPOINT = \"http://localhost:5000\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\nvar socket, selectedChatCompare;\n\nconst PayNft = ({\n  fetchAgain,\n  setFetchAgain,\n  fetchMessages,\n  refAgain,\n  toClose,\n  Moralis,\n  sender_id,\n}) => {\n  const [messages, setMessages] = useState([]);\n  const [currency, setCurrency] = useState(\"\");\n  const [payment_type, setPaymentType] = useState(\"token\");\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n  const [options, setOptions] = useState([]);\n  const [imageUrl, setImageUrl] = useState(\"\");\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const sendMessage = async (event) => {\n    if (newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        console.log(newMessage + \" \" + selectedChat);\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: currency,\n            chatId: selectedChat,\n            payment: true,\n            payment_mode: \"pay\",\n            chat_mode: \"private\",\n            payment_type: \"NFT\",\n            currency: currency,\n            receiver_id: sender_id,\n          },\n          config\n        );\n        console.log(data);\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n      refAgain();\n    }\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n    console.log(socket);\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  useEffect(async () => {\n    const { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\n    const address = \"0xf5b7a2f2a99aEa196994f525f531D648417d2706\";\n\n    const chain = EvmChain.MUMBAI;\n\n    if (Moralis != undefined) {\n      const response = await Moralis.EvmApi.nft.getWalletNFTs({\n        address,\n        chain,\n      });\n\n      console.log(response.toJSON());\n      setOptions(response.toJSON().result);\n    }\n  }, [Moralis]);\n\n  const options2 = options\n    .filter((d) => {\n      if (JSON.parse(d.metadata) != null) {\n        return true;\n      } else {\n        return false;\n      }\n    })\n    .map((d) => {\n      return (\n        <option value={d.name + \"|\" + JSON.parse(d.metadata).image}>\n         {d.name}&ensp;&ensp;(tokenId:{d.token_id})\n        </option>\n      );\n    });\n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      <Button width=\"100%\" height=\"100%\" margin={\"0px\"} padding=\"0px\">\n        <p class=\"choice_label\">NFT</p>\n        <IconButton\n          d={{ base: \"flex\" }}\n          icon={<FaDollarSign />}\n          onClick={onOpen}\n          colorScheme=\"grey\"\n          _hover={{ bg: \"rgb(68, 201, 34);\" }}\n          bg=\"rgb(114,137,218)\"\n          color={\"white\"}\n          width=\"100%\"\n          height=\"100%\"\n        />\n      </Button>\n\n      <Modal\n        size=\"lg\"\n        onClose={() => {\n          onClose();\n          toClose();\n        }}\n        isOpen={isOpen}\n        isCentered\n      >\n        <ModalOverlay />\n        <ModalContent h=\"550px\" bg={\"rgb(30,33,36)\"} color=\"white\">\n          <ModalHeader\n            fontSize=\"40px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            margin={\"5px\"}\n            justifyContent=\"center\"\n          >\n            {\"Transfer NFT\"}\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <div className=\"imageNft\">\n            {imageUrl == \"\" && <p>selected NFT</p>}\n              {imageUrl != \"\" && <img src={imageUrl}></img>}</div>\n            <FormControl\n              onSubmit={sendMessage}\n              id=\"first-name\"\n              isRequired\n              mt={3}\n              width={\"100%\"}\n              margin={\"auto\"}\n            >\n              <Select\n                placeholder=\"select the NFT\"\n                size=\"lg\"\n                fontSize={\"15px\"}\n                width={\"80%\"}\n                margin={\"auto\"}\n                name=\"currency\"\n                onChange={(event) => {\n                  console.log(event.target);\n                  console.log(event.target.value.split(\"|\")[0]);\n                  setImageUrl(event.target.value.split(\"|\")[1]);\n                  setCurrency(event.target.value);\n                }}\n              >\n                {options2}\n              </Select>\n            </FormControl>\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              onClick={() => {\n                onClose();\n                sendMessage();\n                toClose();\n              }}\n              bg=\"rgb(114,137,218)\"\n            >\n              Send\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default PayNft;\n","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/payment/RequestToken.js",["339","340","341","342","343","344","345"],"/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/payment/PayToken.js",["346"],"/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/snap/export.js",["347"],"const snapId = `local:http://localhost:3000/`;\n\nexport async function connect () {\n \n    await window.ethereum.request({\n      method: 'wallet_enable',\n      params: [{\n        wallet_snap: { [snapId]: {} },\n      }]\n    })\n    send()\n  }\n\n  // here we call the snap's \"hello\" method\nexport async function send () {\n    try {\n      const response = await window.ethereum.request({\n        method: 'wallet_invokeSnap',\n        params: [snapId, {\n          method: 'inApp'\n        }]\n      })\n    } catch (err) {\n      console.error(err)\n      alert('Problem happened: ' + err.message || err)\n    }\n  }\n\n\n  ","/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/contracts/frontend-interaction/senderc20.js",["348","349","350","351"],"const { ethers, BigNumber } = require(\"ethers\");\nconst { POSClient, use } = require(\"@maticnetwork/maticjs\");\nconst { Web3ClientPlugin } = require(\"@maticnetwork/maticjs-ethers\");\n\n\n\nasync function senderc20(token_address,receiver_address,amount1,sender_address) {\n  const contractabi = require(\"../abi/senderc20.json\");\n  const contractaddr = \"0xAAEFCa53e21E85C00B1Db5090fF2EC275b6d4D90\";\n\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  await provider.send(\"eth_requestAccounts\", []);\n  const signer = provider.getSigner();\n\n  const contract_signer = new ethers.Contract(\n    contractaddr,\n    contractabi,\n    signer\n  );\n\n  const owner1 = sender_address;\n\n  console.log(\"1\");\n  use(Web3ClientPlugin);\n\n  const posClient = new POSClient();\n  await posClient.init({\n    network: \"testnet\",\n    version: \"mumbai\",\n    parent: {\n      provider: signer,\n      defaultConfig: {\n        from: owner1,\n      },\n    },\n    child: {\n      provider: signer,\n      defaultConfig: {\n        from: owner1,\n      },\n    },\n  });\n  console.log(\"2\");\n\n  \n  const erc20Token = posClient.erc20(token_address, true);\n  const input0 = \"\"+amount1;\n  const decimals0 = \"18\";\n  const amount = ethers.utils.parseUnits(input0, decimals0);\n  const amounthex = ethers.utils.hexlify(amount);\n  const approveResult = await erc20Token.approve(amounthex, {\n    spenderAddress: contractaddr,\n  });\n  console.log(\"3\");\n\n  const note = \"\";\n  const senderc20 = await contract_signer.sendToken(token_address,receiver_address,amount,\"\");\n}\n\nexport default senderc20;\n",{"ruleId":"352","replacedBy":"353"},{"ruleId":"354","replacedBy":"355"},{"ruleId":"356","severity":1,"message":"357","line":9,"column":3,"nodeType":"358","messageId":"359","endLine":9,"endColumn":7},{"ruleId":"356","severity":1,"message":"360","line":19,"column":22,"nodeType":"358","messageId":"359","endLine":19,"endColumn":35},{"ruleId":"361","severity":1,"message":"362","line":31,"column":11,"nodeType":"363","endLine":34,"endColumn":13},{"ruleId":"364","severity":1,"message":"365","line":37,"column":23,"nodeType":"366","messageId":"367","endLine":37,"endColumn":25},{"ruleId":"356","severity":1,"message":"360","line":16,"column":21,"nodeType":"358","messageId":"359","endLine":16,"endColumn":34},{"ruleId":"356","severity":1,"message":"360","line":16,"column":20,"nodeType":"358","messageId":"359","endLine":16,"endColumn":33},{"ruleId":"356","severity":1,"message":"368","line":18,"column":10,"nodeType":"358","messageId":"359","endLine":18,"endColumn":14},{"ruleId":"356","severity":1,"message":"369","line":18,"column":16,"nodeType":"358","messageId":"359","endLine":18,"endColumn":23},{"ruleId":"356","severity":1,"message":"370","line":19,"column":10,"nodeType":"358","messageId":"359","endLine":19,"endColumn":15},{"ruleId":"356","severity":1,"message":"371","line":19,"column":17,"nodeType":"358","messageId":"359","endLine":19,"endColumn":25},{"ruleId":"356","severity":1,"message":"372","line":19,"column":8,"nodeType":"358","messageId":"359","endLine":19,"endColumn":11},{"ruleId":"356","severity":1,"message":"373","line":1,"column":10,"nodeType":"358","messageId":"359","endLine":1,"endColumn":18},{"ruleId":"356","severity":1,"message":"374","line":6,"column":3,"nodeType":"358","messageId":"359","endLine":6,"endColumn":14},{"ruleId":"356","severity":1,"message":"357","line":13,"column":3,"nodeType":"358","messageId":"359","endLine":13,"endColumn":7},{"ruleId":"356","severity":1,"message":"375","line":14,"column":3,"nodeType":"358","messageId":"359","endLine":14,"endColumn":8},{"ruleId":"356","severity":1,"message":"376","line":6,"column":3,"nodeType":"358","messageId":"359","endLine":6,"endColumn":13},{"ruleId":"356","severity":1,"message":"377","line":7,"column":3,"nodeType":"358","messageId":"359","endLine":7,"endColumn":19},{"ruleId":"356","severity":1,"message":"378","line":8,"column":3,"nodeType":"358","messageId":"359","endLine":8,"endColumn":20},{"ruleId":"356","severity":1,"message":"357","line":21,"column":3,"nodeType":"358","messageId":"359","endLine":21,"endColumn":7},{"ruleId":"356","severity":1,"message":"375","line":22,"column":3,"nodeType":"358","messageId":"359","endLine":22,"endColumn":8},{"ruleId":"356","severity":1,"message":"379","line":26,"column":10,"nodeType":"358","messageId":"359","endLine":26,"endColumn":13},{"ruleId":"356","severity":1,"message":"380","line":29,"column":22,"nodeType":"358","messageId":"359","endLine":29,"endColumn":29},{"ruleId":"356","severity":1,"message":"381","line":30,"column":10,"nodeType":"358","messageId":"359","endLine":30,"endColumn":19},{"ruleId":"356","severity":1,"message":"382","line":30,"column":21,"nodeType":"358","messageId":"359","endLine":30,"endColumn":34},{"ruleId":"356","severity":1,"message":"383","line":33,"column":10,"nodeType":"358","messageId":"359","endLine":33,"endColumn":23},{"ruleId":"356","severity":1,"message":"384","line":34,"column":8,"nodeType":"358","messageId":"359","endLine":34,"endColumn":20},{"ruleId":"356","severity":1,"message":"385","line":35,"column":8,"nodeType":"358","messageId":"359","endLine":35,"endColumn":22},{"ruleId":"356","severity":1,"message":"386","line":36,"column":8,"nodeType":"358","messageId":"359","endLine":36,"endColumn":14},{"ruleId":"356","severity":1,"message":"387","line":40,"column":8,"nodeType":"358","messageId":"359","endLine":40,"endColumn":28},{"ruleId":"356","severity":1,"message":"388","line":54,"column":20,"nodeType":"358","messageId":"359","endLine":54,"endColumn":31},{"ruleId":"356","severity":1,"message":"389","line":55,"column":24,"nodeType":"358","messageId":"359","endLine":55,"endColumn":38},{"ruleId":"356","severity":1,"message":"390","line":59,"column":10,"nodeType":"358","messageId":"359","endLine":59,"endColumn":18},{"ruleId":"356","severity":1,"message":"391","line":62,"column":9,"nodeType":"358","messageId":"359","endLine":62,"endColumn":23},{"ruleId":"356","severity":1,"message":"392","line":70,"column":25,"nodeType":"358","messageId":"359","endLine":70,"endColumn":40},{"ruleId":"364","severity":1,"message":"365","line":23,"column":28,"nodeType":"366","messageId":"367","endLine":23,"endColumn":30},{"ruleId":"364","severity":1,"message":"365","line":24,"column":30,"nodeType":"366","messageId":"367","endLine":24,"endColumn":32},{"ruleId":"356","severity":1,"message":"393","line":4,"column":8,"nodeType":"358","messageId":"359","endLine":4,"endColumn":22},{"ruleId":"356","severity":1,"message":"393","line":4,"column":8,"nodeType":"358","messageId":"359","endLine":4,"endColumn":22},{"ruleId":"356","severity":1,"message":"394","line":14,"column":10,"nodeType":"358","messageId":"359","endLine":14,"endColumn":20},{"ruleId":"356","severity":1,"message":"380","line":14,"column":22,"nodeType":"358","messageId":"359","endLine":14,"endColumn":29},{"ruleId":"356","severity":1,"message":"395","line":18,"column":11,"nodeType":"358","messageId":"359","endLine":18,"endColumn":23},{"ruleId":"356","severity":1,"message":"392","line":18,"column":25,"nodeType":"358","messageId":"359","endLine":18,"endColumn":40},{"ruleId":"356","severity":1,"message":"396","line":18,"column":48,"nodeType":"358","messageId":"359","endLine":18,"endColumn":60},{"ruleId":"356","severity":1,"message":"397","line":18,"column":62,"nodeType":"358","messageId":"359","endLine":18,"endColumn":77},{"ruleId":"352","replacedBy":"398"},{"ruleId":"354","replacedBy":"399"},{"ruleId":"400","severity":1,"message":"401","line":11,"column":13,"nodeType":"402","endLine":16,"endColumn":4},{"ruleId":"400","severity":1,"message":"403","line":16,"column":6,"nodeType":"404","endLine":16,"endColumn":8,"suggestions":"405"},{"ruleId":"356","severity":1,"message":"357","line":9,"column":3,"nodeType":"358","messageId":"359","endLine":9,"endColumn":7},{"ruleId":"356","severity":1,"message":"360","line":21,"column":22,"nodeType":"358","messageId":"359","endLine":21,"endColumn":35},{"ruleId":"361","severity":1,"message":"362","line":38,"column":11,"nodeType":"363","endLine":41,"endColumn":13},{"ruleId":"364","severity":1,"message":"365","line":44,"column":23,"nodeType":"366","messageId":"367","endLine":44,"endColumn":25},{"ruleId":"356","severity":1,"message":"360","line":16,"column":20,"nodeType":"358","messageId":"359","endLine":16,"endColumn":33},{"ruleId":"356","severity":1,"message":"368","line":18,"column":10,"nodeType":"358","messageId":"359","endLine":18,"endColumn":14},{"ruleId":"356","severity":1,"message":"369","line":18,"column":16,"nodeType":"358","messageId":"359","endLine":18,"endColumn":23},{"ruleId":"356","severity":1,"message":"370","line":19,"column":10,"nodeType":"358","messageId":"359","endLine":19,"endColumn":15},{"ruleId":"356","severity":1,"message":"371","line":19,"column":17,"nodeType":"358","messageId":"359","endLine":19,"endColumn":25},{"ruleId":"356","severity":1,"message":"406","line":89,"column":9,"nodeType":"358","messageId":"359","endLine":89,"endColumn":20},{"ruleId":"356","severity":1,"message":"360","line":16,"column":21,"nodeType":"358","messageId":"359","endLine":16,"endColumn":34},{"ruleId":"356","severity":1,"message":"372","line":19,"column":8,"nodeType":"358","messageId":"359","endLine":19,"endColumn":11},{"ruleId":"364","severity":1,"message":"365","line":23,"column":28,"nodeType":"366","messageId":"367","endLine":23,"endColumn":30},{"ruleId":"364","severity":1,"message":"365","line":24,"column":30,"nodeType":"366","messageId":"367","endLine":24,"endColumn":32},{"ruleId":"356","severity":1,"message":"373","line":1,"column":10,"nodeType":"358","messageId":"359","endLine":1,"endColumn":18},{"ruleId":"356","severity":1,"message":"374","line":6,"column":3,"nodeType":"358","messageId":"359","endLine":6,"endColumn":14},{"ruleId":"356","severity":1,"message":"357","line":13,"column":3,"nodeType":"358","messageId":"359","endLine":13,"endColumn":7},{"ruleId":"356","severity":1,"message":"375","line":14,"column":3,"nodeType":"358","messageId":"359","endLine":14,"endColumn":8},{"ruleId":"356","severity":1,"message":"376","line":6,"column":3,"nodeType":"358","messageId":"359","endLine":6,"endColumn":13},{"ruleId":"356","severity":1,"message":"377","line":7,"column":3,"nodeType":"358","messageId":"359","endLine":7,"endColumn":19},{"ruleId":"356","severity":1,"message":"378","line":8,"column":3,"nodeType":"358","messageId":"359","endLine":8,"endColumn":20},{"ruleId":"356","severity":1,"message":"357","line":21,"column":3,"nodeType":"358","messageId":"359","endLine":21,"endColumn":7},{"ruleId":"356","severity":1,"message":"375","line":22,"column":3,"nodeType":"358","messageId":"359","endLine":22,"endColumn":8},{"ruleId":"356","severity":1,"message":"379","line":26,"column":10,"nodeType":"358","messageId":"359","endLine":26,"endColumn":13},{"ruleId":"356","severity":1,"message":"380","line":29,"column":22,"nodeType":"358","messageId":"359","endLine":29,"endColumn":29},{"ruleId":"356","severity":1,"message":"381","line":30,"column":10,"nodeType":"358","messageId":"359","endLine":30,"endColumn":19},{"ruleId":"356","severity":1,"message":"382","line":30,"column":21,"nodeType":"358","messageId":"359","endLine":30,"endColumn":34},{"ruleId":"356","severity":1,"message":"383","line":33,"column":10,"nodeType":"358","messageId":"359","endLine":33,"endColumn":23},{"ruleId":"356","severity":1,"message":"384","line":34,"column":8,"nodeType":"358","messageId":"359","endLine":34,"endColumn":20},{"ruleId":"356","severity":1,"message":"385","line":35,"column":8,"nodeType":"358","messageId":"359","endLine":35,"endColumn":22},{"ruleId":"356","severity":1,"message":"386","line":36,"column":8,"nodeType":"358","messageId":"359","endLine":36,"endColumn":14},{"ruleId":"356","severity":1,"message":"387","line":40,"column":8,"nodeType":"358","messageId":"359","endLine":40,"endColumn":28},{"ruleId":"356","severity":1,"message":"389","line":59,"column":24,"nodeType":"358","messageId":"359","endLine":59,"endColumn":38},{"ruleId":"356","severity":1,"message":"390","line":63,"column":10,"nodeType":"358","messageId":"359","endLine":63,"endColumn":18},{"ruleId":"356","severity":1,"message":"391","line":67,"column":9,"nodeType":"358","messageId":"359","endLine":67,"endColumn":23},{"ruleId":"356","severity":1,"message":"392","line":75,"column":25,"nodeType":"358","messageId":"359","endLine":75,"endColumn":40},{"ruleId":"400","severity":1,"message":"401","line":220,"column":13,"nodeType":"402","endLine":236,"endColumn":4},{"ruleId":"364","severity":1,"message":"407","line":227,"column":17,"nodeType":"366","messageId":"367","endLine":227,"endColumn":19},{"ruleId":"356","severity":1,"message":"408","line":5,"column":3,"nodeType":"358","messageId":"359","endLine":5,"endColumn":8},{"ruleId":"356","severity":1,"message":"376","line":6,"column":3,"nodeType":"358","messageId":"359","endLine":6,"endColumn":13},{"ruleId":"356","severity":1,"message":"377","line":7,"column":3,"nodeType":"358","messageId":"359","endLine":7,"endColumn":19},{"ruleId":"356","severity":1,"message":"378","line":8,"column":3,"nodeType":"358","messageId":"359","endLine":8,"endColumn":20},{"ruleId":"356","severity":1,"message":"357","line":21,"column":3,"nodeType":"358","messageId":"359","endLine":21,"endColumn":7},{"ruleId":"356","severity":1,"message":"375","line":22,"column":3,"nodeType":"358","messageId":"359","endLine":22,"endColumn":8},{"ruleId":"356","severity":1,"message":"379","line":26,"column":10,"nodeType":"358","messageId":"359","endLine":26,"endColumn":13},{"ruleId":"356","severity":1,"message":"380","line":29,"column":22,"nodeType":"358","messageId":"359","endLine":29,"endColumn":29},{"ruleId":"356","severity":1,"message":"381","line":30,"column":10,"nodeType":"358","messageId":"359","endLine":30,"endColumn":19},{"ruleId":"356","severity":1,"message":"382","line":30,"column":21,"nodeType":"358","messageId":"359","endLine":30,"endColumn":34},{"ruleId":"356","severity":1,"message":"383","line":33,"column":10,"nodeType":"358","messageId":"359","endLine":33,"endColumn":23},{"ruleId":"356","severity":1,"message":"384","line":34,"column":8,"nodeType":"358","messageId":"359","endLine":34,"endColumn":20},{"ruleId":"356","severity":1,"message":"385","line":35,"column":8,"nodeType":"358","messageId":"359","endLine":35,"endColumn":22},{"ruleId":"356","severity":1,"message":"386","line":36,"column":8,"nodeType":"358","messageId":"359","endLine":36,"endColumn":14},{"ruleId":"356","severity":1,"message":"387","line":40,"column":8,"nodeType":"358","messageId":"359","endLine":40,"endColumn":28},{"ruleId":"356","severity":1,"message":"409","line":57,"column":10,"nodeType":"358","messageId":"359","endLine":57,"endColumn":22},{"ruleId":"356","severity":1,"message":"389","line":57,"column":24,"nodeType":"358","messageId":"359","endLine":57,"endColumn":38},{"ruleId":"356","severity":1,"message":"410","line":59,"column":10,"nodeType":"358","messageId":"359","endLine":59,"endColumn":25},{"ruleId":"356","severity":1,"message":"411","line":60,"column":10,"nodeType":"358","messageId":"359","endLine":60,"endColumn":16},{"ruleId":"356","severity":1,"message":"412","line":60,"column":18,"nodeType":"358","messageId":"359","endLine":60,"endColumn":27},{"ruleId":"356","severity":1,"message":"390","line":61,"column":10,"nodeType":"358","messageId":"359","endLine":61,"endColumn":18},{"ruleId":"356","severity":1,"message":"391","line":66,"column":9,"nodeType":"358","messageId":"359","endLine":66,"endColumn":23},{"ruleId":"356","severity":1,"message":"392","line":74,"column":25,"nodeType":"358","messageId":"359","endLine":74,"endColumn":40},{"ruleId":"400","severity":1,"message":"401","line":146,"column":13,"nodeType":"402","endLine":162,"endColumn":4},{"ruleId":"364","severity":1,"message":"407","line":153,"column":17,"nodeType":"366","messageId":"367","endLine":153,"endColumn":19},{"ruleId":"364","severity":1,"message":"365","line":222,"column":23,"nodeType":"366","messageId":"367","endLine":222,"endColumn":25},{"ruleId":"364","severity":1,"message":"407","line":223,"column":25,"nodeType":"366","messageId":"367","endLine":223,"endColumn":27},{"ruleId":"361","severity":1,"message":"362","line":223,"column":34,"nodeType":"363","endLine":223,"endColumn":54},{"ruleId":"356","severity":1,"message":"393","line":4,"column":8,"nodeType":"358","messageId":"359","endLine":4,"endColumn":22},{"ruleId":"356","severity":1,"message":"394","line":14,"column":10,"nodeType":"358","messageId":"359","endLine":14,"endColumn":20},{"ruleId":"356","severity":1,"message":"380","line":14,"column":22,"nodeType":"358","messageId":"359","endLine":14,"endColumn":29},{"ruleId":"356","severity":1,"message":"395","line":18,"column":11,"nodeType":"358","messageId":"359","endLine":18,"endColumn":23},{"ruleId":"356","severity":1,"message":"392","line":18,"column":25,"nodeType":"358","messageId":"359","endLine":18,"endColumn":40},{"ruleId":"356","severity":1,"message":"396","line":18,"column":48,"nodeType":"358","messageId":"359","endLine":18,"endColumn":60},{"ruleId":"356","severity":1,"message":"397","line":18,"column":62,"nodeType":"358","messageId":"359","endLine":18,"endColumn":77},{"ruleId":"356","severity":1,"message":"393","line":4,"column":8,"nodeType":"358","messageId":"359","endLine":4,"endColumn":22},{"ruleId":"356","severity":1,"message":"413","line":17,"column":13,"nodeType":"358","messageId":"359","endLine":17,"endColumn":21},{"ruleId":"356","severity":1,"message":"414","line":1,"column":17,"nodeType":"358","messageId":"359","endLine":1,"endColumn":26},{"ruleId":"356","severity":1,"message":"415","line":51,"column":9,"nodeType":"358","messageId":"359","endLine":51,"endColumn":22},{"ruleId":"356","severity":1,"message":"416","line":56,"column":9,"nodeType":"358","messageId":"359","endLine":56,"endColumn":13},{"ruleId":"356","severity":1,"message":"417","line":57,"column":9,"nodeType":"358","messageId":"359","endLine":57,"endColumn":18},"no-native-reassign",["418"],"no-negated-in-lhs",["419"],"no-unused-vars","'Text' is defined but never used.","Identifier","unusedVar","'setWalletAddr' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'name' is assigned a value but never used.","'setName' is assigned a value but never used.","'email' is assigned a value but never used.","'setEmail' is assigned a value but never used.","'Pay' is defined but never used.","'ViewIcon' is defined but never used.","'ModalHeader' is defined but never used.","'Image' is defined but never used.","'InputGroup' is defined but never used.","'InputLeftElement' is defined but never used.","'InputRightElement' is defined but never used.","'Box' is defined but never used.","'Spinner' is defined but never used.","'getSender' is defined but never used.","'getSenderFull' is defined but never used.","'ArrowBackIcon' is defined but never used.","'ProfileModal' is defined but never used.","'ScrollableChat' is defined but never used.","'Lottie' is defined but never used.","'UpdateGroupChatModal' is defined but never used.","'setCurrency' is assigned a value but never used.","'setPaymentType' is assigned a value but never used.","'istyping' is assigned a value but never used.","'defaultOptions' is assigned a value but never used.","'setSelectedChat' is assigned a value but never used.","'ScrollableFeed' is defined but never used.","'IconButton' is defined but never used.","'selectedChat' is assigned a value but never used.","'notification' is assigned a value but never used.","'setNotification' is assigned a value but never used.",["418"],["419"],"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'Moralis'. Either include it or remove the dependency array.","ArrayExpression",["420"],"'postDetails' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'Input' is defined but never used.","'payment_type' is assigned a value but never used.","'socketConnected' is assigned a value but never used.","'typing' is assigned a value but never used.","'setTyping' is assigned a value but never used.","'response' is assigned a value but never used.","'BigNumber' is assigned a value but never used.","'approveResult' is assigned a value but never used.","'note' is assigned a value but never used.","'senderc20' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"421","fix":"422"},"Update the dependencies array to be: [Moralis]",{"range":"423","text":"424"},[464,466],"[Moralis]"]