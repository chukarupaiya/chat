{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BigNumberFormatter = void 0;\nvar Error_1 = require(\"../../Error\");\nvar BigNumberFormatter = /** @class */function () {\n  function BigNumberFormatter() {}\n  BigNumberFormatter.toDecimal = function (value, decimals) {\n    if (decimals < 0) {\n      throw new Error_1.CoreError({\n        code: Error_1.CoreErrorCode.BIG_NUMBER_ERROR,\n        message: 'Invalid decimals'\n      });\n    }\n    var result = value.toString();\n    if (decimals === 0) {\n      return result;\n    }\n    var isNegative = result.startsWith('-');\n    if (isNegative) {\n      result = result.substring(1);\n    }\n    result = result.padStart(decimals, '0');\n    var dot = result.length - decimals;\n    var whole = dot === 0 ? '0' : result.substring(0, dot);\n    var fraction = result.substring(dot);\n    result = \"\".concat(whole, \".\").concat(fraction);\n    while (result[result.length - 1] === '0' && result[result.length - 2] !== '.') {\n      result = result.substring(0, result.length - 1);\n    }\n    if (isNegative) {\n      result = \"-\".concat(result);\n    }\n    return result;\n  };\n  BigNumberFormatter.toHex = function (value) {\n    var result = value.toString(16);\n    var isNegative = result.startsWith('-');\n    if (isNegative) {\n      result = result.substring(1);\n    }\n    if (result.length % 2 !== 0) {\n      result = \"0\".concat(result);\n    }\n    result = \"0x\".concat(result);\n    if (isNegative) {\n      result = \"-\".concat(result);\n    }\n    return result;\n  };\n  return BigNumberFormatter;\n}();\nexports.BigNumberFormatter = BigNumberFormatter;","map":{"version":3,"sources":["../../../src/dataTypes/BigNumber/BigNumberFormatter.ts"],"names":[],"mappings":";;;;;;AAAA,IAAA,OAAA,GAAA,OAAA,CAAA,aAAA,CAAA;AAEA,IAAA,kBAAA,GAAA,aAAA,YAAA;EAAA,SAAA,kBAAA,GAAA,CAkDA;EAjDgB,kBAAA,CAAA,SAAS,GAAvB,UAAwB,KAAa,EAAE,QAAgB,EAAA;IACrD,IAAI,QAAQ,GAAG,CAAC,EAAE;MAChB,MAAM,IAAI,OAAA,CAAA,SAAS,CAAC;QAClB,IAAI,EAAE,OAAA,CAAA,aAAa,CAAC,gBAAgB;QACpC,OAAO,EAAE;OACV,CAAC;IACH;IAED,IAAI,MAAM,GAAG,KAAK,CAAC,QAAQ,EAAE;IAC7B,IAAI,QAAQ,KAAK,CAAC,EAAE;MAClB,OAAO,MAAM;IACd;IAED,IAAM,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC;IACzC,IAAI,UAAU,EAAE;MACd,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;IAC7B;IACD,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ,EAAE,GAAG,CAAC;IAEvC,IAAM,GAAG,GAAG,MAAM,CAAC,MAAM,GAAG,QAAQ;IACpC,IAAM,KAAK,GAAG,GAAG,KAAK,CAAC,GAAG,GAAG,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC;IACxD,IAAM,QAAQ,GAAG,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC;IAEtC,MAAM,GAAG,EAAA,CAAA,MAAA,CAAG,KAAK,EAAA,GAAA,CAAA,CAAA,MAAA,CAAI,QAAQ,CAAE;IAE/B,OAAO,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,EAAE;MAC7E,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;IAChD;IACD,IAAI,UAAU,EAAE;MACd,MAAM,GAAG,GAAA,CAAA,MAAA,CAAI,MAAM,CAAE;IACtB;IACD,OAAO,MAAM;EACf,CAAC;EAEa,kBAAA,CAAA,KAAK,GAAnB,UAAoB,KAAa,EAAA;IAC/B,IAAI,MAAM,GAAG,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC;IAC/B,IAAM,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC;IACzC,IAAI,UAAU,EAAE;MACd,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;IAC7B;IACD,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,KAAK,CAAC,EAAE;MAC3B,MAAM,GAAG,GAAA,CAAA,MAAA,CAAI,MAAM,CAAE;IACtB;IACD,MAAM,GAAG,IAAA,CAAA,MAAA,CAAK,MAAM,CAAE;IACtB,IAAI,UAAU,EAAE;MACd,MAAM,GAAG,GAAA,CAAA,MAAA,CAAI,MAAM,CAAE;IACtB;IACD,OAAO,MAAM;EACf,CAAC;EACH,OAAA,kBAAC;AAAD,CAAC,EAAA;AAlDY,OAAA,CAAA,kBAAA,GAAA,kBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BigNumberFormatter = void 0;\nvar Error_1 = require(\"../../Error\");\nvar BigNumberFormatter = /** @class */ (function () {\n    function BigNumberFormatter() {\n    }\n    BigNumberFormatter.toDecimal = function (value, decimals) {\n        if (decimals < 0) {\n            throw new Error_1.CoreError({\n                code: Error_1.CoreErrorCode.BIG_NUMBER_ERROR,\n                message: 'Invalid decimals',\n            });\n        }\n        var result = value.toString();\n        if (decimals === 0) {\n            return result;\n        }\n        var isNegative = result.startsWith('-');\n        if (isNegative) {\n            result = result.substring(1);\n        }\n        result = result.padStart(decimals, '0');\n        var dot = result.length - decimals;\n        var whole = dot === 0 ? '0' : result.substring(0, dot);\n        var fraction = result.substring(dot);\n        result = \"\".concat(whole, \".\").concat(fraction);\n        while (result[result.length - 1] === '0' && result[result.length - 2] !== '.') {\n            result = result.substring(0, result.length - 1);\n        }\n        if (isNegative) {\n            result = \"-\".concat(result);\n        }\n        return result;\n    };\n    BigNumberFormatter.toHex = function (value) {\n        var result = value.toString(16);\n        var isNegative = result.startsWith('-');\n        if (isNegative) {\n            result = result.substring(1);\n        }\n        if (result.length % 2 !== 0) {\n            result = \"0\".concat(result);\n        }\n        result = \"0x\".concat(result);\n        if (isNegative) {\n            result = \"-\".concat(result);\n        }\n        return result;\n    };\n    return BigNumberFormatter;\n}());\nexports.BigNumberFormatter = BigNumberFormatter;\n//# sourceMappingURL=BigNumberFormatter.js.map"]},"metadata":{},"sourceType":"script"}