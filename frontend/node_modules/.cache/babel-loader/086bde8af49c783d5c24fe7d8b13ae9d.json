{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StreamEvmNftTransfer = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar common_evm_utils_1 = require(\"@moralisweb3/common-evm-utils\");\nvar StreamTriggerOutput_1 = require(\"../StreamTriggerOutput\");\n/**\n * The StreamEvmNftTransfer class is a representation of a nft transfer (EREC721 or ERC1155) that is returned by the Moralis Stream API\n *\n * @category DataType\n */\nvar StreamEvmNftTransfer = /** @class */function () {\n  function StreamEvmNftTransfer(data, core) {\n    this._data = StreamEvmNftTransfer.parse(data, core);\n  }\n  /**\n   * Create a new instance of StreamEvmNftTransferish\n   *\n   * @param data - the StreamEvmNftTransferishish type\n   * @param core - the Core instance\n   * @example\n   * ```ts\n   * const transfer = StreamEvmTransactionish.create(data);\n   * ```\n   * @returns an instance of StreamEvmNftTransfer\n   */\n  StreamEvmNftTransfer.create = function (data, core) {\n    if (data instanceof StreamEvmNftTransfer) {\n      return data;\n    }\n    var finalCore = core !== null && core !== void 0 ? core : common_core_1.CoreProvider.getDefault();\n    return new StreamEvmNftTransfer(data, finalCore);\n  };\n  StreamEvmNftTransfer.parse = function (data, core) {\n    return __assign(__assign({}, data), {\n      chain: common_evm_utils_1.EvmChain.create(data.chain, core),\n      to: common_evm_utils_1.EvmAddress.create(data.to, core),\n      contract: common_evm_utils_1.EvmAddress.create(data.contract, core),\n      from: common_evm_utils_1.EvmAddress.create(data.from, core),\n      logIndex: +data.logIndex,\n      operator: (0, common_core_1.maybe)(data.operator, function (operator) {\n        return common_evm_utils_1.EvmAddress.create(operator, core);\n      }),\n      tokenId: data.tokenId,\n      transactionHash: data.transactionHash,\n      amount: +data.amount,\n      tokenName: data.tokenName,\n      triggers: (0, common_core_1.maybe)(data.triggers, function (triggers) {\n        return triggers.map(function (trigger) {\n          return StreamTriggerOutput_1.StreamTriggerOutput.create(trigger, core);\n        });\n      })\n    });\n  };\n  /**\n   * Compares two StreamEvmNftTransfer data. It checks a deep equality check of both values.\n   * @param valueA - the first StreamEvmNftTransferish data to compare\n   * @param valueB - the second StreamEvmNftTransferish data to compare\n   * @returns true if the values are equal, false otherwise\n   * @example\n   * ```ts\n   *  StreamEvmNftTransfer.equals(valueA, valueB);\n   * ```\n   */\n  // eslint-disable-next-line complexity\n  StreamEvmNftTransfer.equals = function (valueA, valueB) {\n    var _a, _b;\n    var transferA = StreamEvmNftTransfer.create(valueA);\n    var transferB = StreamEvmNftTransfer.create(valueB);\n    if (!transferA.chain.equals(transferB.chain)) {\n      return false;\n    }\n    if (transferA.transactionHash !== transferB.transactionHash) {\n      return false;\n    }\n    if (transferA.logIndex !== transferB.logIndex) {\n      return false;\n    }\n    if (!transferA.contract.equals(transferB.contract)) {\n      return false;\n    }\n    if (transferA.tokenId !== transferB.tokenId) {\n      return false;\n    }\n    if (((_a = transferA.triggers) === null || _a === void 0 ? void 0 : _a.length) !== ((_b = transferB.triggers) === null || _b === void 0 ? void 0 : _b.length) || !StreamTriggerOutput_1.StreamTriggerOutput.arrayEquals(transferA.triggers || [], transferB.triggers || [])) {\n      return false;\n    }\n    return true;\n  };\n  /**\n   * Compares an StreamEvmNftTransferish data to this StreamEvmNftTransfer instance.\n   * @param value - the value to compare\n   * @returns true if the value is equal to the current instance, false otherwise\n   * @example\n   * ```ts\n   * transfer.equals(value);\n   * ```\n   */\n  StreamEvmNftTransfer.prototype.equals = function (value) {\n    return StreamEvmNftTransfer.equals(this, value);\n  };\n  /**\n   * Converts the StreamEvmNftTransfer instance to a JSON object.\n   * @returns JSON object of the StreamEvmNftTransfer instance\n   * @example `transfer.toJSON()`\n   */\n  StreamEvmNftTransfer.prototype.toJSON = function () {\n    var _a, _b;\n    var data = this._data;\n    return __assign(__assign({}, data), {\n      chain: data.chain.format(),\n      from: data.from.format(),\n      to: data.to.format(),\n      contract: data.contract.format(),\n      operator: (_a = data.operator) === null || _a === void 0 ? void 0 : _a.format(),\n      triggers: (_b = data.triggers) === null || _b === void 0 ? void 0 : _b.map(function (trigger) {\n        return trigger.format();\n      })\n    });\n  };\n  /**\n   * Converts the StreamEvmNftTransfer instance to a JSON object.\n   * @returns JSON object of the StreamEvmNftTransfer instance\n   * @example `transfer.toJSON()`\n   */\n  StreamEvmNftTransfer.prototype.format = function () {\n    return this.toJSON();\n  };\n  Object.defineProperty(StreamEvmNftTransfer.prototype, \"chain\", {\n    get: function () {\n      return this._data.chain;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StreamEvmNftTransfer.prototype, \"transactionHash\", {\n    get: function () {\n      return this._data.transactionHash;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StreamEvmNftTransfer.prototype, \"from\", {\n    get: function () {\n      return this._data.from;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StreamEvmNftTransfer.prototype, \"to\", {\n    get: function () {\n      return this._data.to;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StreamEvmNftTransfer.prototype, \"contract\", {\n    get: function () {\n      return this._data.contract;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StreamEvmNftTransfer.prototype, \"logIndex\", {\n    get: function () {\n      return this._data.logIndex;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StreamEvmNftTransfer.prototype, \"tokenId\", {\n    get: function () {\n      return this._data.tokenId;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StreamEvmNftTransfer.prototype, \"amount\", {\n    get: function () {\n      return this._data.amount;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StreamEvmNftTransfer.prototype, \"tokenContractType\", {\n    get: function () {\n      return this._data.tokenContractType;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StreamEvmNftTransfer.prototype, \"tokenName\", {\n    get: function () {\n      return this._data.tokenName;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StreamEvmNftTransfer.prototype, \"tokenSymbol\", {\n    get: function () {\n      return this._data.tokenSymbol;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StreamEvmNftTransfer.prototype, \"operator\", {\n    get: function () {\n      return this._data.operator;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StreamEvmNftTransfer.prototype, \"triggers\", {\n    get: function () {\n      return this._data.triggers;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return StreamEvmNftTransfer;\n}();\nexports.StreamEvmNftTransfer = StreamEvmNftTransfer;","map":{"version":3,"sources":["../../../src/dataTypes/StreamEvmNftTransfer/StreamEvmNftTransfer.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StreamEvmNftTransfer = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar common_evm_utils_1 = require(\"@moralisweb3/common-evm-utils\");\nvar StreamTriggerOutput_1 = require(\"../StreamTriggerOutput\");\n/**\n * The StreamEvmNftTransfer class is a representation of a nft transfer (EREC721 or ERC1155) that is returned by the Moralis Stream API\n *\n * @category DataType\n */\nvar StreamEvmNftTransfer = /** @class */ (function () {\n    function StreamEvmNftTransfer(data, core) {\n        this._data = StreamEvmNftTransfer.parse(data, core);\n    }\n    /**\n     * Create a new instance of StreamEvmNftTransferish\n     *\n     * @param data - the StreamEvmNftTransferishish type\n     * @param core - the Core instance\n     * @example\n     * ```ts\n     * const transfer = StreamEvmTransactionish.create(data);\n     * ```\n     * @returns an instance of StreamEvmNftTransfer\n     */\n    StreamEvmNftTransfer.create = function (data, core) {\n        if (data instanceof StreamEvmNftTransfer) {\n            return data;\n        }\n        var finalCore = core !== null && core !== void 0 ? core : common_core_1.CoreProvider.getDefault();\n        return new StreamEvmNftTransfer(data, finalCore);\n    };\n    StreamEvmNftTransfer.parse = function (data, core) {\n        return __assign(__assign({}, data), { chain: common_evm_utils_1.EvmChain.create(data.chain, core), to: common_evm_utils_1.EvmAddress.create(data.to, core), contract: common_evm_utils_1.EvmAddress.create(data.contract, core), from: common_evm_utils_1.EvmAddress.create(data.from, core), logIndex: +data.logIndex, operator: (0, common_core_1.maybe)(data.operator, function (operator) { return common_evm_utils_1.EvmAddress.create(operator, core); }), tokenId: data.tokenId, transactionHash: data.transactionHash, amount: +data.amount, tokenName: data.tokenName, triggers: (0, common_core_1.maybe)(data.triggers, function (triggers) {\n                return triggers.map(function (trigger) { return StreamTriggerOutput_1.StreamTriggerOutput.create(trigger, core); });\n            }) });\n    };\n    /**\n     * Compares two StreamEvmNftTransfer data. It checks a deep equality check of both values.\n     * @param valueA - the first StreamEvmNftTransferish data to compare\n     * @param valueB - the second StreamEvmNftTransferish data to compare\n     * @returns true if the values are equal, false otherwise\n     * @example\n     * ```ts\n     *  StreamEvmNftTransfer.equals(valueA, valueB);\n     * ```\n     */\n    // eslint-disable-next-line complexity\n    StreamEvmNftTransfer.equals = function (valueA, valueB) {\n        var _a, _b;\n        var transferA = StreamEvmNftTransfer.create(valueA);\n        var transferB = StreamEvmNftTransfer.create(valueB);\n        if (!transferA.chain.equals(transferB.chain)) {\n            return false;\n        }\n        if (transferA.transactionHash !== transferB.transactionHash) {\n            return false;\n        }\n        if (transferA.logIndex !== transferB.logIndex) {\n            return false;\n        }\n        if (!transferA.contract.equals(transferB.contract)) {\n            return false;\n        }\n        if (transferA.tokenId !== transferB.tokenId) {\n            return false;\n        }\n        if (((_a = transferA.triggers) === null || _a === void 0 ? void 0 : _a.length) !== ((_b = transferB.triggers) === null || _b === void 0 ? void 0 : _b.length) ||\n            !StreamTriggerOutput_1.StreamTriggerOutput.arrayEquals(transferA.triggers || [], transferB.triggers || [])) {\n            return false;\n        }\n        return true;\n    };\n    /**\n     * Compares an StreamEvmNftTransferish data to this StreamEvmNftTransfer instance.\n     * @param value - the value to compare\n     * @returns true if the value is equal to the current instance, false otherwise\n     * @example\n     * ```ts\n     * transfer.equals(value);\n     * ```\n     */\n    StreamEvmNftTransfer.prototype.equals = function (value) {\n        return StreamEvmNftTransfer.equals(this, value);\n    };\n    /**\n     * Converts the StreamEvmNftTransfer instance to a JSON object.\n     * @returns JSON object of the StreamEvmNftTransfer instance\n     * @example `transfer.toJSON()`\n     */\n    StreamEvmNftTransfer.prototype.toJSON = function () {\n        var _a, _b;\n        var data = this._data;\n        return __assign(__assign({}, data), { chain: data.chain.format(), from: data.from.format(), to: data.to.format(), contract: data.contract.format(), operator: (_a = data.operator) === null || _a === void 0 ? void 0 : _a.format(), triggers: (_b = data.triggers) === null || _b === void 0 ? void 0 : _b.map(function (trigger) { return trigger.format(); }) });\n    };\n    /**\n     * Converts the StreamEvmNftTransfer instance to a JSON object.\n     * @returns JSON object of the StreamEvmNftTransfer instance\n     * @example `transfer.toJSON()`\n     */\n    StreamEvmNftTransfer.prototype.format = function () {\n        return this.toJSON();\n    };\n    Object.defineProperty(StreamEvmNftTransfer.prototype, \"chain\", {\n        get: function () {\n            return this._data.chain;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StreamEvmNftTransfer.prototype, \"transactionHash\", {\n        get: function () {\n            return this._data.transactionHash;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StreamEvmNftTransfer.prototype, \"from\", {\n        get: function () {\n            return this._data.from;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StreamEvmNftTransfer.prototype, \"to\", {\n        get: function () {\n            return this._data.to;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StreamEvmNftTransfer.prototype, \"contract\", {\n        get: function () {\n            return this._data.contract;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StreamEvmNftTransfer.prototype, \"logIndex\", {\n        get: function () {\n            return this._data.logIndex;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StreamEvmNftTransfer.prototype, \"tokenId\", {\n        get: function () {\n            return this._data.tokenId;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StreamEvmNftTransfer.prototype, \"amount\", {\n        get: function () {\n            return this._data.amount;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StreamEvmNftTransfer.prototype, \"tokenContractType\", {\n        get: function () {\n            return this._data.tokenContractType;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StreamEvmNftTransfer.prototype, \"tokenName\", {\n        get: function () {\n            return this._data.tokenName;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StreamEvmNftTransfer.prototype, \"tokenSymbol\", {\n        get: function () {\n            return this._data.tokenSymbol;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StreamEvmNftTransfer.prototype, \"operator\", {\n        get: function () {\n            return this._data.operator;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StreamEvmNftTransfer.prototype, \"triggers\", {\n        get: function () {\n            return this._data.triggers;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return StreamEvmNftTransfer;\n}());\nexports.StreamEvmNftTransfer = StreamEvmNftTransfer;\n//# sourceMappingURL=StreamEvmNftTransfer.js.map"]},"metadata":{},"sourceType":"script"}