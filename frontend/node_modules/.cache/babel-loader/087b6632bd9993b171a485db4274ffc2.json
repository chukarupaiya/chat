{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getBlockOperation = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar dataTypes_1 = require(\"../../dataTypes\");\nvar EvmChainResolver_1 = require(\"../../EvmChainResolver\");\n/** Get the contents of a block given the block hash. */\nexports.getBlockOperation = {\n  method: 'GET',\n  name: 'getBlock',\n  id: 'getBlock',\n  groupName: 'block',\n  isNullable: true,\n  urlPathPattern: '/block/{blockNumberOrHash}',\n  urlPathParamNames: ['blockNumberOrHash'],\n  urlSearchParamNames: ['chain'],\n  getRequestUrlParams: getRequestUrlParams,\n  serializeRequest: serializeRequest,\n  deserializeRequest: deserializeRequest,\n  deserializeResponse: deserializeResponse\n};\n// Methods\nfunction getRequestUrlParams(request, core) {\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n    blockNumberOrHash: request.blockNumberOrHash\n  };\n}\nfunction deserializeResponse(jsonResponse, request, core) {\n  var _a;\n  var data = (0, common_core_1.toCamelCase)(jsonResponse);\n  var chain = EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core);\n  // TODO: account for changes in api, now we have unknown types for addresses\n  // OR fix the types correctly in api\n  // I noticed that the docs comes with a type of \"string | unknown\" which automatically resolves to \"unknown\". I think we should fix this in the api, casting for now\n  return dataTypes_1.EvmBlock.create(__assign(__assign({}, data), {\n    chain: chain,\n    transactions: ((_a = data.transactions) !== null && _a !== void 0 ? _a : []).map(function (transaction) {\n      var _a;\n      return dataTypes_1.EvmTransaction.create({\n        cumulativeGasUsed: transaction.receiptCumulativeGasUsed,\n        gasPrice: transaction.gasPrice,\n        gasUsed: transaction.receiptGasUsed,\n        index: transaction.transactionIndex,\n        contractAddress: transaction.receiptContractAddress,\n        receiptRoot: transaction.receiptRoot,\n        receiptStatus: +transaction.receiptStatus,\n        chain: chain,\n        data: transaction.input,\n        from: transaction.fromAddress,\n        hash: transaction.hash,\n        nonce: transaction.nonce,\n        value: transaction.value,\n        blockHash: transaction.blockHash,\n        blockNumber: +transaction.blockNumber,\n        blockTimestamp: new Date(transaction.blockTimestamp),\n        gas: transaction.gas,\n        to: transaction.toAddress,\n        logs: ((_a = transaction.logs) !== null && _a !== void 0 ? _a : []).map(function (jsonLog) {\n          var log = (0, common_core_1.toCamelCase)(jsonLog);\n          return dataTypes_1.EvmTransactionLog.create({\n            chain: chain,\n            address: log.address,\n            blockHash: log.blockHash,\n            blockNumber: +log.blockNumber,\n            data: log.data,\n            topics: [log.topic0, log.topic1, log.topic2, log.topic3],\n            transactionHash: log.transactionHash,\n            blockTimestamp: log.blockTimestamp,\n            logIndex: +log.logIndex,\n            transactionIndex: +log.transactionIndex\n          });\n        })\n      }, core);\n    })\n  }), core);\n}\nfunction serializeRequest(request, core) {\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n    blockNumberOrHash: request.blockNumberOrHash\n  };\n}\nfunction deserializeRequest(jsonRequest, core) {\n  return {\n    chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),\n    blockNumberOrHash: jsonRequest.blockNumberOrHash\n  };\n}","map":{"version":3,"sources":["../../../src/operations/block/getBlockOperation.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getBlockOperation = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar dataTypes_1 = require(\"../../dataTypes\");\nvar EvmChainResolver_1 = require(\"../../EvmChainResolver\");\n/** Get the contents of a block given the block hash. */\nexports.getBlockOperation = {\n    method: 'GET',\n    name: 'getBlock',\n    id: 'getBlock',\n    groupName: 'block',\n    isNullable: true,\n    urlPathPattern: '/block/{blockNumberOrHash}',\n    urlPathParamNames: ['blockNumberOrHash'],\n    urlSearchParamNames: ['chain'],\n    getRequestUrlParams: getRequestUrlParams,\n    serializeRequest: serializeRequest,\n    deserializeRequest: deserializeRequest,\n    deserializeResponse: deserializeResponse,\n};\n// Methods\nfunction getRequestUrlParams(request, core) {\n    return {\n        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n        blockNumberOrHash: request.blockNumberOrHash,\n    };\n}\nfunction deserializeResponse(jsonResponse, request, core) {\n    var _a;\n    var data = (0, common_core_1.toCamelCase)(jsonResponse);\n    var chain = EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core);\n    // TODO: account for changes in api, now we have unknown types for addresses\n    // OR fix the types correctly in api\n    // I noticed that the docs comes with a type of \"string | unknown\" which automatically resolves to \"unknown\". I think we should fix this in the api, casting for now\n    return dataTypes_1.EvmBlock.create(__assign(__assign({}, data), { chain: chain, transactions: ((_a = data.transactions) !== null && _a !== void 0 ? _a : []).map(function (transaction) {\n            var _a;\n            return dataTypes_1.EvmTransaction.create({\n                cumulativeGasUsed: transaction.receiptCumulativeGasUsed,\n                gasPrice: transaction.gasPrice,\n                gasUsed: transaction.receiptGasUsed,\n                index: transaction.transactionIndex,\n                contractAddress: transaction.receiptContractAddress,\n                receiptRoot: transaction.receiptRoot,\n                receiptStatus: +transaction.receiptStatus,\n                chain: chain,\n                data: transaction.input,\n                from: transaction.fromAddress,\n                hash: transaction.hash,\n                nonce: transaction.nonce,\n                value: transaction.value,\n                blockHash: transaction.blockHash,\n                blockNumber: +transaction.blockNumber,\n                blockTimestamp: new Date(transaction.blockTimestamp),\n                gas: transaction.gas,\n                to: transaction.toAddress,\n                logs: ((_a = transaction.logs) !== null && _a !== void 0 ? _a : []).map(function (jsonLog) {\n                    var log = (0, common_core_1.toCamelCase)(jsonLog);\n                    return dataTypes_1.EvmTransactionLog.create({\n                        chain: chain,\n                        address: log.address,\n                        blockHash: log.blockHash,\n                        blockNumber: +log.blockNumber,\n                        data: log.data,\n                        topics: [log.topic0, log.topic1, log.topic2, log.topic3],\n                        transactionHash: log.transactionHash,\n                        blockTimestamp: log.blockTimestamp,\n                        logIndex: +log.logIndex,\n                        transactionIndex: +log.transactionIndex,\n                    });\n                }),\n            }, core);\n        }) }), core);\n}\nfunction serializeRequest(request, core) {\n    return {\n        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n        blockNumberOrHash: request.blockNumberOrHash,\n    };\n}\nfunction deserializeRequest(jsonRequest, core) {\n    return {\n        chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),\n        blockNumberOrHash: jsonRequest.blockNumberOrHash,\n    };\n}\n//# sourceMappingURL=getBlockOperation.js.map"]},"metadata":{},"sourceType":"script"}