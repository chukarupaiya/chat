{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EvmNftMetadata = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar EvmAddress_1 = require(\"../EvmAddress\");\nvar EvmChain_1 = require(\"../EvmChain\");\n/**\n * The EvmNftMetadata contains metadata of an NFT.\n *\n * @category DataType\n */\nvar EvmNftMetadata = /** @class */function () {\n  function EvmNftMetadata(data) {\n    this._data = EvmNftMetadata.parse(data);\n  }\n  /**\n   *  Create a new instance of EvmNftMetadata from any valid EvmNftMetadata input\n   *\n   * @param data - the EvmNftMetadataish type\n   * @example\n   * ```ts\n   * const token = EvmNftMetadataish.create(value);\n   * ```\n   */\n  EvmNftMetadata.create = function (data) {\n    if (data instanceof EvmNftMetadata) {\n      return data;\n    }\n    return new EvmNftMetadata(data);\n  };\n  /**\n   * Compares two EvmNftMetadata instances. This checks if the chain and tokenAddress of both meatdatas are equal.\n   *\n   * @param dataA - the first EvmNftMetadataish to compare\n   * @param dataB - the second EvmNftMetadataish to compare\n   * @returns true if the two EvmNftMetadataData are equal\n   * @example\n   * ```ts\n   * EvmNftMetadata.equals(dataA, dataB);\n   * ```\n   */\n  EvmNftMetadata.equals = function (dataA, dataB) {\n    var metadataA = EvmNftMetadata.create(dataA);\n    var metadataB = EvmNftMetadata.create(dataB);\n    if (!metadataA._data.chain.equals(metadataB._data.chain)) {\n      return false;\n    }\n    if (!metadataA._data.tokenAddress.equals(metadataB._data.tokenAddress)) {\n      return false;\n    }\n    return true;\n  };\n  /**\n   * Compares EvmNftMetadata instance to current instance\n   *\n   * @param data - the EvmNftMetadataish to compare\n   * @returns true if the EvmNftMetadataish is equals given metadata\n   * @example\n   * ```ts\n   * metadata.equals(data);\n   * ```\n   */\n  EvmNftMetadata.prototype.equals = function (data) {\n    return EvmNftMetadata.equals(this, data);\n  };\n  /**\n   * @returns the data as JSON.\n   * @example metadata.toJSON();\n   */\n  EvmNftMetadata.prototype.toJSON = function () {\n    var data = this._data;\n    return __assign(__assign({}, data), {\n      chain: data.chain.format(),\n      tokenAddress: data.tokenAddress.format()\n    });\n  };\n  /**\n   * @returns the data as JSON.\n   * @example metadata.format();\n   */\n  EvmNftMetadata.prototype.format = function () {\n    return this.toJSON();\n  };\n  Object.defineProperty(EvmNftMetadata.prototype, \"result\", {\n    /**\n     * @returns all the data without casting it to JSON.\n     * @example metadata.result;\n     */\n    get: function () {\n      return this._data;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftMetadata.prototype, \"name\", {\n    /**\n     * @returns the name in the metadata.\n     * @example metadata.name; // \"Baby Ape Mutant Club\"\n     */\n    get: function () {\n      return this._data.name;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftMetadata.prototype, \"symbol\", {\n    /**\n     * @returns the symbol in the metadata.\n     * @example metadata.symbol; // \"BAMC\"\n     */\n    get: function () {\n      return this._data.symbol;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftMetadata.prototype, \"contractType\", {\n    /**\n     * @returns the contract type of the NFT.\n     * @example metadata.contractType; // \"ERC721\"\n     */\n    get: function () {\n      return this._data.contractType;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftMetadata.prototype, \"chain\", {\n    /**\n     * @returns the chain in the metadata.\n     * @example metadata.chain; // EvmChain\n     */\n    get: function () {\n      return this._data.chain;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftMetadata.prototype, \"tokenAddress\", {\n    /**\n     * @returns the token address in the metadata.\n     * @example metadata.tokenAddress; // EvmAddress\n     */\n    get: function () {\n      return this._data.tokenAddress;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftMetadata.prototype, \"syncedAt\", {\n    /**\n     * @returns the date the metadata was synced.\n     * @example metadata.syncedAt; // Date\n     */\n    get: function () {\n      return this._data.syncedAt;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  EvmNftMetadata.parse = function (data) {\n    return __assign(__assign({}, data), {\n      chain: EvmChain_1.EvmChain.create(data.chain),\n      tokenAddress: EvmAddress_1.EvmAddress.create(data.tokenAddress),\n      syncedAt: (0, common_core_1.maybe)(data.syncedAt, common_core_1.dateInputToDate)\n    });\n  };\n  return EvmNftMetadata;\n}();\nexports.EvmNftMetadata = EvmNftMetadata;","map":{"version":3,"sources":["../../../src/dataTypes/EvmNftMetadata/EvmNftMetadata.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EvmNftMetadata = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar EvmAddress_1 = require(\"../EvmAddress\");\nvar EvmChain_1 = require(\"../EvmChain\");\n/**\n * The EvmNftMetadata contains metadata of an NFT.\n *\n * @category DataType\n */\nvar EvmNftMetadata = /** @class */ (function () {\n    function EvmNftMetadata(data) {\n        this._data = EvmNftMetadata.parse(data);\n    }\n    /**\n     *  Create a new instance of EvmNftMetadata from any valid EvmNftMetadata input\n     *\n     * @param data - the EvmNftMetadataish type\n     * @example\n     * ```ts\n     * const token = EvmNftMetadataish.create(value);\n     * ```\n     */\n    EvmNftMetadata.create = function (data) {\n        if (data instanceof EvmNftMetadata) {\n            return data;\n        }\n        return new EvmNftMetadata(data);\n    };\n    /**\n     * Compares two EvmNftMetadata instances. This checks if the chain and tokenAddress of both meatdatas are equal.\n     *\n     * @param dataA - the first EvmNftMetadataish to compare\n     * @param dataB - the second EvmNftMetadataish to compare\n     * @returns true if the two EvmNftMetadataData are equal\n     * @example\n     * ```ts\n     * EvmNftMetadata.equals(dataA, dataB);\n     * ```\n     */\n    EvmNftMetadata.equals = function (dataA, dataB) {\n        var metadataA = EvmNftMetadata.create(dataA);\n        var metadataB = EvmNftMetadata.create(dataB);\n        if (!metadataA._data.chain.equals(metadataB._data.chain)) {\n            return false;\n        }\n        if (!metadataA._data.tokenAddress.equals(metadataB._data.tokenAddress)) {\n            return false;\n        }\n        return true;\n    };\n    /**\n     * Compares EvmNftMetadata instance to current instance\n     *\n     * @param data - the EvmNftMetadataish to compare\n     * @returns true if the EvmNftMetadataish is equals given metadata\n     * @example\n     * ```ts\n     * metadata.equals(data);\n     * ```\n     */\n    EvmNftMetadata.prototype.equals = function (data) {\n        return EvmNftMetadata.equals(this, data);\n    };\n    /**\n     * @returns the data as JSON.\n     * @example metadata.toJSON();\n     */\n    EvmNftMetadata.prototype.toJSON = function () {\n        var data = this._data;\n        return __assign(__assign({}, data), { chain: data.chain.format(), tokenAddress: data.tokenAddress.format() });\n    };\n    /**\n     * @returns the data as JSON.\n     * @example metadata.format();\n     */\n    EvmNftMetadata.prototype.format = function () {\n        return this.toJSON();\n    };\n    Object.defineProperty(EvmNftMetadata.prototype, \"result\", {\n        /**\n         * @returns all the data without casting it to JSON.\n         * @example metadata.result;\n         */\n        get: function () {\n            return this._data;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNftMetadata.prototype, \"name\", {\n        /**\n         * @returns the name in the metadata.\n         * @example metadata.name; // \"Baby Ape Mutant Club\"\n         */\n        get: function () {\n            return this._data.name;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNftMetadata.prototype, \"symbol\", {\n        /**\n         * @returns the symbol in the metadata.\n         * @example metadata.symbol; // \"BAMC\"\n         */\n        get: function () {\n            return this._data.symbol;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNftMetadata.prototype, \"contractType\", {\n        /**\n         * @returns the contract type of the NFT.\n         * @example metadata.contractType; // \"ERC721\"\n         */\n        get: function () {\n            return this._data.contractType;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNftMetadata.prototype, \"chain\", {\n        /**\n         * @returns the chain in the metadata.\n         * @example metadata.chain; // EvmChain\n         */\n        get: function () {\n            return this._data.chain;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNftMetadata.prototype, \"tokenAddress\", {\n        /**\n         * @returns the token address in the metadata.\n         * @example metadata.tokenAddress; // EvmAddress\n         */\n        get: function () {\n            return this._data.tokenAddress;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNftMetadata.prototype, \"syncedAt\", {\n        /**\n         * @returns the date the metadata was synced.\n         * @example metadata.syncedAt; // Date\n         */\n        get: function () {\n            return this._data.syncedAt;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    EvmNftMetadata.parse = function (data) { return (__assign(__assign({}, data), { chain: EvmChain_1.EvmChain.create(data.chain), tokenAddress: EvmAddress_1.EvmAddress.create(data.tokenAddress), syncedAt: (0, common_core_1.maybe)(data.syncedAt, common_core_1.dateInputToDate) })); };\n    return EvmNftMetadata;\n}());\nexports.EvmNftMetadata = EvmNftMetadata;\n//# sourceMappingURL=EvmNftMetadata.js.map"]},"metadata":{},"sourceType":"script"}