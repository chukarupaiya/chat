{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BigNumber = void 0;\nvar BigNumberFormatter_1 = require(\"./BigNumberFormatter\");\nvar BigNumberParser_1 = require(\"./BigNumberParser\");\n/**\n * The BigNumber class is a MoralisData that references to a the value of a BigNumber\n *\n * @category DataType\n */\nvar BigNumber = /** @class */function () {\n  function BigNumber(value) {\n    this.value = value;\n  }\n  /**\n   * Create a new instance of BigNumber from any valid address input.\n   *\n   * @param value - the BigNumberish type\n   * @example BigNumber.create(12);\n   * @example BigNumber.create(\"20\");\n   * @returns a new BigNumber instance\n   */\n  BigNumber.create = function (value) {\n    if (value instanceof BigNumber) {\n      return value;\n    }\n    return new BigNumber(BigNumberParser_1.BigNumberParser.parseInt(value));\n  };\n  /**\n   * Creates a new BigNumber from given decimals.\n   * @param value\n   * @param decimals - This is optional and defaults to 0\n   * @example BigNumber.fromDecimal(\"1.23456789\", 18);\n   */\n  BigNumber.fromDecimal = function (value, decimals) {\n    if (decimals === void 0) {\n      decimals = 0;\n    }\n    return new BigNumber(BigNumberParser_1.BigNumberParser.parseDecimal(value, decimals));\n  };\n  /**\n   * @returns the value of this BigNumber as a BigInt\n   * @example BigNumber.create(12).toBigInt();\n   */\n  BigNumber.prototype.toBigInt = function () {\n    return this.value;\n  };\n  /**\n   * Adds a BigNumber to current BigNumber instance.\n   * @param value - the BigNumberish to add\n   * @returns the result of the addition\n   * @example BigNumber.create(12).add(7);\n   * @example BigNumber.create(12).add(\"1000000000000000000\");\n   */\n  BigNumber.prototype.add = function (value) {\n    return new BigNumber(this.value + asBigInt(value));\n  };\n  /**\n   * Subtracts a BigNumber from current BigNumber instance.\n   * @param value - the BigNumberish to subtract\n   * @returns the result of the subtraction\n   * @example BigNumber.create(12).sub(7);\n   * @example BigNumber.create(\"1000000000000000000\").sub(20);\n   */\n  BigNumber.prototype.sub = function (value) {\n    return new BigNumber(this.value - asBigInt(value));\n  };\n  /**\n   * Multiplies a BigNumber with current BigNumber instance.\n   * @param value - the BigNumberish to multiply\n   * @returns the result of the multiplication\n   * @example BigNumber.create(12).mul(7);\n   * @example BigNumber.create(12).mul(\"1000000000000000000\");\n   */\n  BigNumber.prototype.mul = function (value) {\n    return new BigNumber(this.value * asBigInt(value));\n  };\n  /**\n   * Divides a BigNumber with current BigNumber instance.\n   * @param value - the BigNumberish to divide\n   * @returns the result of the division\n   * @example BigNumber.create(12).div(7);\n   * @example BigNumber.create(1).div(\"1000000000000000000\");\n   */\n  BigNumber.prototype.div = function (value) {\n    return new BigNumber(this.value / asBigInt(value));\n  };\n  /**\n   * Checks the equality of the current BigNumber with another BigNumber.\n   * @param value - the BigNumberish to compare\n   * @returns true if the BigNumbers are equal\n   * @example BigNumber.create(12).equals(BigNumber.create(12)); // true\n   */\n  BigNumber.prototype.equals = function (value) {\n    return this.value === value.toBigInt();\n  };\n  /**\n   * Converts BigNumber instance to value in given decimals.\n   * @param decimals - The decimals to convert to\n   * @example BigNumber.create(12).toDecimal(18);\n   */\n  BigNumber.prototype.toDecimal = function (decimals) {\n    return BigNumberFormatter_1.BigNumberFormatter.toDecimal(this.value, decimals);\n  };\n  /**\n   * Converts BigNumber instance to string.\n   * @example BigNumber.create(12).toString();\n   */\n  BigNumber.prototype.toString = function () {\n    return this.value.toString();\n  };\n  /**\n   * Converts BigNumber instance to hex string.\n   * @example BigNumber.create(12).toHex();\n   */\n  BigNumber.prototype.toHex = function () {\n    return BigNumberFormatter_1.BigNumberFormatter.toHex(this.value);\n  };\n  /**\n   * Converts BigNumber instance to hex string.\n   * @example BigNumber.create(12).toJSON();\n   */\n  BigNumber.prototype.toJSON = function () {\n    return this.toHex();\n  };\n  return BigNumber;\n}();\nexports.BigNumber = BigNumber;\nfunction asBigInt(value) {\n  return BigNumber.create(value).toBigInt();\n}","map":{"version":3,"sources":["../../../src/dataTypes/BigNumber/BigNumber.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BigNumber = void 0;\nvar BigNumberFormatter_1 = require(\"./BigNumberFormatter\");\nvar BigNumberParser_1 = require(\"./BigNumberParser\");\n/**\n * The BigNumber class is a MoralisData that references to a the value of a BigNumber\n *\n * @category DataType\n */\nvar BigNumber = /** @class */ (function () {\n    function BigNumber(value) {\n        this.value = value;\n    }\n    /**\n     * Create a new instance of BigNumber from any valid address input.\n     *\n     * @param value - the BigNumberish type\n     * @example BigNumber.create(12);\n     * @example BigNumber.create(\"20\");\n     * @returns a new BigNumber instance\n     */\n    BigNumber.create = function (value) {\n        if (value instanceof BigNumber) {\n            return value;\n        }\n        return new BigNumber(BigNumberParser_1.BigNumberParser.parseInt(value));\n    };\n    /**\n     * Creates a new BigNumber from given decimals.\n     * @param value\n     * @param decimals - This is optional and defaults to 0\n     * @example BigNumber.fromDecimal(\"1.23456789\", 18);\n     */\n    BigNumber.fromDecimal = function (value, decimals) {\n        if (decimals === void 0) { decimals = 0; }\n        return new BigNumber(BigNumberParser_1.BigNumberParser.parseDecimal(value, decimals));\n    };\n    /**\n     * @returns the value of this BigNumber as a BigInt\n     * @example BigNumber.create(12).toBigInt();\n     */\n    BigNumber.prototype.toBigInt = function () {\n        return this.value;\n    };\n    /**\n     * Adds a BigNumber to current BigNumber instance.\n     * @param value - the BigNumberish to add\n     * @returns the result of the addition\n     * @example BigNumber.create(12).add(7);\n     * @example BigNumber.create(12).add(\"1000000000000000000\");\n     */\n    BigNumber.prototype.add = function (value) {\n        return new BigNumber(this.value + asBigInt(value));\n    };\n    /**\n     * Subtracts a BigNumber from current BigNumber instance.\n     * @param value - the BigNumberish to subtract\n     * @returns the result of the subtraction\n     * @example BigNumber.create(12).sub(7);\n     * @example BigNumber.create(\"1000000000000000000\").sub(20);\n     */\n    BigNumber.prototype.sub = function (value) {\n        return new BigNumber(this.value - asBigInt(value));\n    };\n    /**\n     * Multiplies a BigNumber with current BigNumber instance.\n     * @param value - the BigNumberish to multiply\n     * @returns the result of the multiplication\n     * @example BigNumber.create(12).mul(7);\n     * @example BigNumber.create(12).mul(\"1000000000000000000\");\n     */\n    BigNumber.prototype.mul = function (value) {\n        return new BigNumber(this.value * asBigInt(value));\n    };\n    /**\n     * Divides a BigNumber with current BigNumber instance.\n     * @param value - the BigNumberish to divide\n     * @returns the result of the division\n     * @example BigNumber.create(12).div(7);\n     * @example BigNumber.create(1).div(\"1000000000000000000\");\n     */\n    BigNumber.prototype.div = function (value) {\n        return new BigNumber(this.value / asBigInt(value));\n    };\n    /**\n     * Checks the equality of the current BigNumber with another BigNumber.\n     * @param value - the BigNumberish to compare\n     * @returns true if the BigNumbers are equal\n     * @example BigNumber.create(12).equals(BigNumber.create(12)); // true\n     */\n    BigNumber.prototype.equals = function (value) {\n        return this.value === value.toBigInt();\n    };\n    /**\n     * Converts BigNumber instance to value in given decimals.\n     * @param decimals - The decimals to convert to\n     * @example BigNumber.create(12).toDecimal(18);\n     */\n    BigNumber.prototype.toDecimal = function (decimals) {\n        return BigNumberFormatter_1.BigNumberFormatter.toDecimal(this.value, decimals);\n    };\n    /**\n     * Converts BigNumber instance to string.\n     * @example BigNumber.create(12).toString();\n     */\n    BigNumber.prototype.toString = function () {\n        return this.value.toString();\n    };\n    /**\n     * Converts BigNumber instance to hex string.\n     * @example BigNumber.create(12).toHex();\n     */\n    BigNumber.prototype.toHex = function () {\n        return BigNumberFormatter_1.BigNumberFormatter.toHex(this.value);\n    };\n    /**\n     * Converts BigNumber instance to hex string.\n     * @example BigNumber.create(12).toJSON();\n     */\n    BigNumber.prototype.toJSON = function () {\n        return this.toHex();\n    };\n    return BigNumber;\n}());\nexports.BigNumber = BigNumber;\nfunction asBigInt(value) {\n    return BigNumber.create(value).toBigInt();\n}\n//# sourceMappingURL=BigNumber.js.map"]},"metadata":{},"sourceType":"script"}