{"ast":null,"code":"var colors = require('./colors');\nmodule['exports'] = function () {\n  //\n  // Extends prototype of native string object to allow for \"foo\".red syntax\n  //\n  var addProperty = function (color, func) {\n    String.prototype.__defineGetter__(color, func);\n  };\n  addProperty('strip', function () {\n    return colors.strip(this);\n  });\n  addProperty('stripColors', function () {\n    return colors.strip(this);\n  });\n  addProperty('trap', function () {\n    return colors.trap(this);\n  });\n  addProperty('zalgo', function () {\n    return colors.zalgo(this);\n  });\n  addProperty('zebra', function () {\n    return colors.zebra(this);\n  });\n  addProperty('rainbow', function () {\n    return colors.rainbow(this);\n  });\n  addProperty('random', function () {\n    return colors.random(this);\n  });\n  addProperty('america', function () {\n    return colors.america(this);\n  });\n\n  //\n  // Iterate through all default styles and colors\n  //\n  var x = Object.keys(colors.styles);\n  x.forEach(function (style) {\n    addProperty(style, function () {\n      return colors.stylize(this, style);\n    });\n  });\n  function applyTheme(theme) {\n    //\n    // Remark: This is a list of methods that exist\n    // on String that you should not overwrite.\n    //\n    var stringPrototypeBlacklist = ['__defineGetter__', '__defineSetter__', '__lookupGetter__', '__lookupSetter__', 'charAt', 'constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'toLocaleString', 'toString', 'valueOf', 'charCodeAt', 'indexOf', 'lastIndexOf', 'length', 'localeCompare', 'match', 'repeat', 'replace', 'search', 'slice', 'split', 'substring', 'toLocaleLowerCase', 'toLocaleUpperCase', 'toLowerCase', 'toUpperCase', 'trim', 'trimLeft', 'trimRight'];\n    Object.keys(theme).forEach(function (prop) {\n      if (stringPrototypeBlacklist.indexOf(prop) !== -1) {\n        console.log('warn: '.red + ('String.prototype' + prop).magenta + ' is probably something you don\\'t want to override.  ' + 'Ignoring style name');\n      } else {\n        if (typeof theme[prop] === 'string') {\n          colors[prop] = colors[theme[prop]];\n          addProperty(prop, function () {\n            return colors[prop](this);\n          });\n        } else {\n          var themePropApplicator = function (str) {\n            var ret = str || this;\n            for (var t = 0; t < theme[prop].length; t++) {\n              ret = colors[theme[prop][t]](ret);\n            }\n            return ret;\n          };\n          addProperty(prop, themePropApplicator);\n          colors[prop] = function (str) {\n            return themePropApplicator(str);\n          };\n        }\n      }\n    });\n  }\n  colors.setTheme = function (theme) {\n    if (typeof theme === 'string') {\n      console.log('colors.setTheme now only accepts an object, not a string. ' + 'If you are trying to set a theme from a file, it is now your (the ' + 'caller\\'s) responsibility to require the file.  The old syntax ' + 'looked like colors.setTheme(__dirname + ' + '\\'/../themes/generic-logging.js\\'); The new syntax looks like ' + 'colors.setTheme(require(__dirname + ' + '\\'/../themes/generic-logging.js\\'));');\n      return;\n    } else {\n      applyTheme(theme);\n    }\n  };\n};","map":{"version":3,"names":["colors","require","module","addProperty","color","func","String","prototype","__defineGetter__","strip","trap","zalgo","zebra","rainbow","random","america","x","Object","keys","styles","forEach","style","stylize","applyTheme","theme","stringPrototypeBlacklist","prop","indexOf","console","log","red","magenta","themePropApplicator","str","ret","t","length","setTheme"],"sources":["/Users/karupaiyachu/Desktop/project/chat-app copy/node_modules/colors/lib/extendStringPrototype.js"],"sourcesContent":["var colors = require('./colors');\n\nmodule['exports'] = function() {\n  //\n  // Extends prototype of native string object to allow for \"foo\".red syntax\n  //\n  var addProperty = function(color, func) {\n    String.prototype.__defineGetter__(color, func);\n  };\n\n  addProperty('strip', function() {\n    return colors.strip(this);\n  });\n\n  addProperty('stripColors', function() {\n    return colors.strip(this);\n  });\n\n  addProperty('trap', function() {\n    return colors.trap(this);\n  });\n\n  addProperty('zalgo', function() {\n    return colors.zalgo(this);\n  });\n\n  addProperty('zebra', function() {\n    return colors.zebra(this);\n  });\n\n  addProperty('rainbow', function() {\n    return colors.rainbow(this);\n  });\n\n  addProperty('random', function() {\n    return colors.random(this);\n  });\n\n  addProperty('america', function() {\n    return colors.america(this);\n  });\n\n  //\n  // Iterate through all default styles and colors\n  //\n  var x = Object.keys(colors.styles);\n  x.forEach(function(style) {\n    addProperty(style, function() {\n      return colors.stylize(this, style);\n    });\n  });\n\n  function applyTheme(theme) {\n    //\n    // Remark: This is a list of methods that exist\n    // on String that you should not overwrite.\n    //\n    var stringPrototypeBlacklist = [\n      '__defineGetter__', '__defineSetter__', '__lookupGetter__',\n      '__lookupSetter__', 'charAt', 'constructor', 'hasOwnProperty',\n      'isPrototypeOf', 'propertyIsEnumerable', 'toLocaleString', 'toString',\n      'valueOf', 'charCodeAt', 'indexOf', 'lastIndexOf', 'length',\n      'localeCompare', 'match', 'repeat', 'replace', 'search', 'slice',\n      'split', 'substring', 'toLocaleLowerCase', 'toLocaleUpperCase',\n      'toLowerCase', 'toUpperCase', 'trim', 'trimLeft', 'trimRight',\n    ];\n\n    Object.keys(theme).forEach(function(prop) {\n      if (stringPrototypeBlacklist.indexOf(prop) !== -1) {\n        console.log('warn: '.red + ('String.prototype' + prop).magenta +\n          ' is probably something you don\\'t want to override.  ' +\n          'Ignoring style name');\n      } else {\n        if (typeof(theme[prop]) === 'string') {\n          colors[prop] = colors[theme[prop]];\n          addProperty(prop, function() {\n            return colors[prop](this);\n          });\n        } else {\n          var themePropApplicator = function(str) {\n            var ret = str || this;\n            for (var t = 0; t < theme[prop].length; t++) {\n              ret = colors[theme[prop][t]](ret);\n            }\n            return ret;\n          };\n          addProperty(prop, themePropApplicator);\n          colors[prop] = function(str) {\n            return themePropApplicator(str);\n          };\n        }\n      }\n    });\n  }\n\n  colors.setTheme = function(theme) {\n    if (typeof theme === 'string') {\n      console.log('colors.setTheme now only accepts an object, not a string. ' +\n        'If you are trying to set a theme from a file, it is now your (the ' +\n        'caller\\'s) responsibility to require the file.  The old syntax ' +\n        'looked like colors.setTheme(__dirname + ' +\n        '\\'/../themes/generic-logging.js\\'); The new syntax looks like '+\n        'colors.setTheme(require(__dirname + ' +\n        '\\'/../themes/generic-logging.js\\'));');\n      return;\n    } else {\n      applyTheme(theme);\n    }\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}