{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EvmNft = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar EvmAddress_1 = require(\"../EvmAddress\");\nvar EvmChain_1 = require(\"../EvmChain\");\n/**\n * The EvmNft class is a MoralisData that references to a the NFT of the type; Erc721 or Erc1155\n *\n * @category DataType\n */\nvar EvmNft = /** @class */function () {\n  function EvmNft(data, core) {\n    this._data = EvmNft.parse(data, core);\n  }\n  /**\n   * Create a new instance of EvmNft from any valid address input\n   *\n   * @param data - the EvmNftish type\n   * @param core - the Core instance\n   * @example\n   * ```ts\n   * const nft = EvmNft.create(data);\n   * ```\n   * @returns an instance of EvmNft\n   */\n  EvmNft.create = function (data, core) {\n    if (data instanceof EvmNft) {\n      return data;\n    }\n    var finalCore = core !== null && core !== void 0 ? core : common_core_1.CoreProvider.getDefault();\n    return new EvmNft(data, finalCore);\n  };\n  // TODO: refactor to reduce complexity\n  /**\n   * Compares two EvmNftish data. verifies that the chain, tokenAddress and owner of values are equal.\n   * @param valueA - the first EvmNftish data to compare\n   * @param valueB - the second EvmNftish data to compare\n   * @returns true if the values are equal, false otherwise\n   * @example\n   * ```ts\n   *  EvmNft.equals(valueA, valueB);\n   * ```\n   */\n  // eslint-disable-next-line complexity\n  EvmNft.equals = function (valueA, valueB) {\n    var nftA = EvmNft.create(valueA);\n    var nftB = EvmNft.create(valueB);\n    if (!nftA._data.chain.equals(nftB._data.chain)) {\n      return false;\n    }\n    if (!nftA._data.tokenAddress.equals(nftB._data.tokenAddress)) {\n      return false;\n    }\n    // Owners are different between tokens\n    if (nftA._data.ownerOf && nftB._data.ownerOf && !nftA._data.ownerOf.equals(nftB._data.ownerOf)) {\n      return false;\n    }\n    // Owner is defined in only one token\n    if (nftA._data.ownerOf && !nftB._data.ownerOf || !nftA._data.ownerOf && nftB._data.ownerOf) {\n      return false;\n    }\n    return true;\n  };\n  /**\n   * Compares an EvmNftish data to this EvmNft instance.\n   * @param value - the value to compare\n   * @returns true if the value is equal to the current instance, false otherwise\n   * @example\n   * ```ts\n   * nft.equals(value);\n   * ```\n   */\n  EvmNft.prototype.equals = function (value) {\n    return EvmNft.equals(this, value);\n  };\n  /**\n   * Converts the EvmNft instance to a JSON object.\n   * @returns JSON object of the EvmNft instance\n   * @example `nft.toJSON()`\n   */\n  EvmNft.prototype.toJSON = function () {\n    var _b, _c, _d;\n    var data = this._data;\n    return __assign(__assign({}, data), {\n      tokenAddress: data.tokenAddress.format(),\n      chain: data.chain.format(),\n      ownerOf: (_b = data.ownerOf) === null || _b === void 0 ? void 0 : _b.format(),\n      blockNumberMinted: (_c = data.blockNumberMinted) === null || _c === void 0 ? void 0 : _c.toString(),\n      blockNumber: (_d = data.blockNumber) === null || _d === void 0 ? void 0 : _d.toString()\n    });\n  };\n  /**\n   * Converts the EvmNft instance to a JSON object.\n   * @returns JSON object of the EvmNft instance\n   * @example `nft.format()`\n   */\n  EvmNft.prototype.format = function () {\n    return this.toJSON();\n  };\n  Object.defineProperty(EvmNft.prototype, \"result\", {\n    get: function () {\n      return this._data;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNft.prototype, \"chain\", {\n    /**\n     * @returns the NFT chain\n     * @example\n     * ```\n     * nft.chain // EvmChain\n     * ```\n     */\n    get: function () {\n      return this._data.chain;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNft.prototype, \"contractType\", {\n    /**\n     * @returns the NFT contract type\n     * @example\n     * ```\n     * nft.contractType // \"ERC721\" | \"ERC1155\"\n     * ```\n     */\n    get: function () {\n      return this._data.contractType;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNft.prototype, \"tokenAddress\", {\n    /**\n     * @returns the NFT token address\n     * @example\n     * ```\n     * nft.tokenAddress // EvmAddress\n     * ```\n     */\n    get: function () {\n      return this._data.tokenAddress;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNft.prototype, \"metadata\", {\n    /**\n     * @returns the NFT metadata\n     * @example\n     * ```ts\n     * nft.metadata\n     * // {\n     * // name: 'Pancake',\n     * // description: 'The dessert series 1',\n     * // image: 'ipfs://QmNQFXCZ6LGzvpMW9Q5PWbCrEnLknQrPwr2r8pbQAgzQ9A/4863BD6B-6C92-4B96-BF80-8020B2F7C3A5.jpeg',\n     * // }\n     * ```\n     */\n    get: function () {\n      return this._data.metadata;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNft.prototype, \"tokenUri\", {\n    /**\n     * @returns the NFT token URI\n     * @example\n     * ```\n     * nft.tokenUri // \"https://gateway.moralisipfs.com/ipfs/QmajSqgxY3cWBgBeRm38vasJAcTit1kp5EwqVHxszJYgUC/728.json\"\n     * ```\n     */\n    get: function () {\n      return this._data.tokenUri;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNft.prototype, \"tokenHash\", {\n    /**\n     * @returns the NFT token hash\n     * @example\n     * ```\n     * nft.tokenHash // \"QmajSqgxY3cWBgBeRm38vasJAcTit1kp5EwqVHxszJYgUC\"\n     * ```\n     */\n    get: function () {\n      return this._data.tokenHash;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNft.prototype, \"name\", {\n    /**\n     * @returns the NFT name\n     * @example\n     * ```\n     * nft.name // \"Tether USD\"\n     * ```\n     */\n    get: function () {\n      return this._data.name;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNft.prototype, \"symbol\", {\n    /**\n     * @returns the NFT symbol\n     * @example\n     * ```\n     * nft.symbol // \"USDT\"\n     * ```\n     */\n    get: function () {\n      return this._data.symbol;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNft.prototype, \"ownerOf\", {\n    /**\n     * @returns the NFT owner of address\n     * @example\n     * ```\n     * nft.ownerOf // EvmAddress\n     * ```\n     */\n    get: function () {\n      return this._data.ownerOf;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNft.prototype, \"blockNumberMinted\", {\n    /**\n     * @returns the NFT block number minted from\n     * @example\n     * ```\n     * nft.blockNumberMinted // BigNumber\n     * ```\n     */\n    get: function () {\n      return this._data.blockNumberMinted;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNft.prototype, \"blockNumber\", {\n    /**\n     * @returns the NFT block number\n     * @example\n     * ```\n     * nft.blockNumber // BigNumber\n     * ```\n     */\n    get: function () {\n      return this._data.blockNumber;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNft.prototype, \"lastMetadataSync\", {\n    /**\n     * @returns the NFT latest metadata sync date\n     * @example\n     * ```\n     * nft.latestMetadataSync // Date\n     * ```\n     */\n    get: function () {\n      return this._data.lastMetadataSync;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNft.prototype, \"lastTokenUriSync\", {\n    /**\n     * @returns the NFT latest token URI sync date\n     * @example\n     * ```\n     * nft.latestTokenUriSync // Date\n     * ```\n     */\n    get: function () {\n      return this._data.lastTokenUriSync;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNft.prototype, \"amount\", {\n    /**\n     * @returns the NFT amount\n     * @example\n     * ```\n     * nft.amount // 2\n     * ```\n     */\n    get: function () {\n      return this._data.amount;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNft.prototype, \"tokenId\", {\n    /**\n     * @returns the token id\n     * @example\n     * ```\n     * nft.tokenId // '1234'\n     * ```\n     */\n    get: function () {\n      return this._data.tokenId;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  var _a;\n  _a = EvmNft;\n  EvmNft.parse = function (data, core) {\n    return __assign(__assign({}, data), {\n      chain: EvmChain_1.EvmChain.create(data.chain, core),\n      contractType: (0, common_core_1.maybe)(data.contractType),\n      tokenAddress: EvmAddress_1.EvmAddress.create(data.tokenAddress, core),\n      metadata: (0, common_core_1.maybe)(data.metadata, _a.validateMetadata),\n      tokenUri: (0, common_core_1.maybe)(data.tokenUri),\n      tokenHash: (0, common_core_1.maybe)(data.tokenHash),\n      name: (0, common_core_1.maybe)(data.name),\n      symbol: (0, common_core_1.maybe)(data.symbol),\n      ownerOf: (0, common_core_1.maybe)(data.ownerOf, function (ownerOf) {\n        return EvmAddress_1.EvmAddress.create(ownerOf, core);\n      }),\n      blockNumberMinted: (0, common_core_1.maybe)(data.blockNumberMinted, common_core_1.BigNumber.create),\n      blockNumber: (0, common_core_1.maybe)(data.blockNumber, common_core_1.BigNumber.create),\n      lastMetadataSync: (0, common_core_1.maybe)(data.lastMetadataSync, common_core_1.dateInputToDate),\n      lastTokenUriSync: (0, common_core_1.maybe)(data.lastTokenUriSync, common_core_1.dateInputToDate),\n      amount: (0, common_core_1.maybe)(data.amount, function (value) {\n        return +value;\n      })\n    });\n  };\n  /**\n   * This function confirms that the NFT metadata is a valid JSON string.\n   *\n   * @param value - the new value for the NFT metadata\n   * @returns the parsed value of the JSON string\n   * @throws {CoreError} if the value is not a valid JSON string\n   */\n  EvmNft.validateMetadata = function (value) {\n    try {\n      return JSON.parse(value);\n    } catch (error) {\n      throw new common_core_1.CoreError({\n        code: common_core_1.CoreErrorCode.INVALID_ARGUMENT,\n        message: 'Invalid metadata provided, cannot parse the value to JSON'\n      });\n    }\n  };\n  return EvmNft;\n}();\nexports.EvmNft = EvmNft;","map":{"version":3,"sources":["../../../src/dataTypes/EvmNft/EvmNft.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EvmNft = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar EvmAddress_1 = require(\"../EvmAddress\");\nvar EvmChain_1 = require(\"../EvmChain\");\n/**\n * The EvmNft class is a MoralisData that references to a the NFT of the type; Erc721 or Erc1155\n *\n * @category DataType\n */\nvar EvmNft = /** @class */ (function () {\n    function EvmNft(data, core) {\n        this._data = EvmNft.parse(data, core);\n    }\n    /**\n     * Create a new instance of EvmNft from any valid address input\n     *\n     * @param data - the EvmNftish type\n     * @param core - the Core instance\n     * @example\n     * ```ts\n     * const nft = EvmNft.create(data);\n     * ```\n     * @returns an instance of EvmNft\n     */\n    EvmNft.create = function (data, core) {\n        if (data instanceof EvmNft) {\n            return data;\n        }\n        var finalCore = core !== null && core !== void 0 ? core : common_core_1.CoreProvider.getDefault();\n        return new EvmNft(data, finalCore);\n    };\n    // TODO: refactor to reduce complexity\n    /**\n     * Compares two EvmNftish data. verifies that the chain, tokenAddress and owner of values are equal.\n     * @param valueA - the first EvmNftish data to compare\n     * @param valueB - the second EvmNftish data to compare\n     * @returns true if the values are equal, false otherwise\n     * @example\n     * ```ts\n     *  EvmNft.equals(valueA, valueB);\n     * ```\n     */\n    // eslint-disable-next-line complexity\n    EvmNft.equals = function (valueA, valueB) {\n        var nftA = EvmNft.create(valueA);\n        var nftB = EvmNft.create(valueB);\n        if (!nftA._data.chain.equals(nftB._data.chain)) {\n            return false;\n        }\n        if (!nftA._data.tokenAddress.equals(nftB._data.tokenAddress)) {\n            return false;\n        }\n        // Owners are different between tokens\n        if (nftA._data.ownerOf && nftB._data.ownerOf && !nftA._data.ownerOf.equals(nftB._data.ownerOf)) {\n            return false;\n        }\n        // Owner is defined in only one token\n        if ((nftA._data.ownerOf && !nftB._data.ownerOf) || (!nftA._data.ownerOf && nftB._data.ownerOf)) {\n            return false;\n        }\n        return true;\n    };\n    /**\n     * Compares an EvmNftish data to this EvmNft instance.\n     * @param value - the value to compare\n     * @returns true if the value is equal to the current instance, false otherwise\n     * @example\n     * ```ts\n     * nft.equals(value);\n     * ```\n     */\n    EvmNft.prototype.equals = function (value) {\n        return EvmNft.equals(this, value);\n    };\n    /**\n     * Converts the EvmNft instance to a JSON object.\n     * @returns JSON object of the EvmNft instance\n     * @example `nft.toJSON()`\n     */\n    EvmNft.prototype.toJSON = function () {\n        var _b, _c, _d;\n        var data = this._data;\n        return __assign(__assign({}, data), { tokenAddress: data.tokenAddress.format(), chain: data.chain.format(), ownerOf: (_b = data.ownerOf) === null || _b === void 0 ? void 0 : _b.format(), blockNumberMinted: (_c = data.blockNumberMinted) === null || _c === void 0 ? void 0 : _c.toString(), blockNumber: (_d = data.blockNumber) === null || _d === void 0 ? void 0 : _d.toString() });\n    };\n    /**\n     * Converts the EvmNft instance to a JSON object.\n     * @returns JSON object of the EvmNft instance\n     * @example `nft.format()`\n     */\n    EvmNft.prototype.format = function () {\n        return this.toJSON();\n    };\n    Object.defineProperty(EvmNft.prototype, \"result\", {\n        get: function () {\n            return this._data;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNft.prototype, \"chain\", {\n        /**\n         * @returns the NFT chain\n         * @example\n         * ```\n         * nft.chain // EvmChain\n         * ```\n         */\n        get: function () {\n            return this._data.chain;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNft.prototype, \"contractType\", {\n        /**\n         * @returns the NFT contract type\n         * @example\n         * ```\n         * nft.contractType // \"ERC721\" | \"ERC1155\"\n         * ```\n         */\n        get: function () {\n            return this._data.contractType;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNft.prototype, \"tokenAddress\", {\n        /**\n         * @returns the NFT token address\n         * @example\n         * ```\n         * nft.tokenAddress // EvmAddress\n         * ```\n         */\n        get: function () {\n            return this._data.tokenAddress;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNft.prototype, \"metadata\", {\n        /**\n         * @returns the NFT metadata\n         * @example\n         * ```ts\n         * nft.metadata\n         * // {\n         * // name: 'Pancake',\n         * // description: 'The dessert series 1',\n         * // image: 'ipfs://QmNQFXCZ6LGzvpMW9Q5PWbCrEnLknQrPwr2r8pbQAgzQ9A/4863BD6B-6C92-4B96-BF80-8020B2F7C3A5.jpeg',\n         * // }\n         * ```\n         */\n        get: function () {\n            return this._data.metadata;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNft.prototype, \"tokenUri\", {\n        /**\n         * @returns the NFT token URI\n         * @example\n         * ```\n         * nft.tokenUri // \"https://gateway.moralisipfs.com/ipfs/QmajSqgxY3cWBgBeRm38vasJAcTit1kp5EwqVHxszJYgUC/728.json\"\n         * ```\n         */\n        get: function () {\n            return this._data.tokenUri;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNft.prototype, \"tokenHash\", {\n        /**\n         * @returns the NFT token hash\n         * @example\n         * ```\n         * nft.tokenHash // \"QmajSqgxY3cWBgBeRm38vasJAcTit1kp5EwqVHxszJYgUC\"\n         * ```\n         */\n        get: function () {\n            return this._data.tokenHash;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNft.prototype, \"name\", {\n        /**\n         * @returns the NFT name\n         * @example\n         * ```\n         * nft.name // \"Tether USD\"\n         * ```\n         */\n        get: function () {\n            return this._data.name;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNft.prototype, \"symbol\", {\n        /**\n         * @returns the NFT symbol\n         * @example\n         * ```\n         * nft.symbol // \"USDT\"\n         * ```\n         */\n        get: function () {\n            return this._data.symbol;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNft.prototype, \"ownerOf\", {\n        /**\n         * @returns the NFT owner of address\n         * @example\n         * ```\n         * nft.ownerOf // EvmAddress\n         * ```\n         */\n        get: function () {\n            return this._data.ownerOf;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNft.prototype, \"blockNumberMinted\", {\n        /**\n         * @returns the NFT block number minted from\n         * @example\n         * ```\n         * nft.blockNumberMinted // BigNumber\n         * ```\n         */\n        get: function () {\n            return this._data.blockNumberMinted;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNft.prototype, \"blockNumber\", {\n        /**\n         * @returns the NFT block number\n         * @example\n         * ```\n         * nft.blockNumber // BigNumber\n         * ```\n         */\n        get: function () {\n            return this._data.blockNumber;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNft.prototype, \"lastMetadataSync\", {\n        /**\n         * @returns the NFT latest metadata sync date\n         * @example\n         * ```\n         * nft.latestMetadataSync // Date\n         * ```\n         */\n        get: function () {\n            return this._data.lastMetadataSync;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNft.prototype, \"lastTokenUriSync\", {\n        /**\n         * @returns the NFT latest token URI sync date\n         * @example\n         * ```\n         * nft.latestTokenUriSync // Date\n         * ```\n         */\n        get: function () {\n            return this._data.lastTokenUriSync;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNft.prototype, \"amount\", {\n        /**\n         * @returns the NFT amount\n         * @example\n         * ```\n         * nft.amount // 2\n         * ```\n         */\n        get: function () {\n            return this._data.amount;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNft.prototype, \"tokenId\", {\n        /**\n         * @returns the token id\n         * @example\n         * ```\n         * nft.tokenId // '1234'\n         * ```\n         */\n        get: function () {\n            return this._data.tokenId;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    var _a;\n    _a = EvmNft;\n    EvmNft.parse = function (data, core) { return (__assign(__assign({}, data), { chain: EvmChain_1.EvmChain.create(data.chain, core), contractType: (0, common_core_1.maybe)(data.contractType), tokenAddress: EvmAddress_1.EvmAddress.create(data.tokenAddress, core), metadata: (0, common_core_1.maybe)(data.metadata, _a.validateMetadata), tokenUri: (0, common_core_1.maybe)(data.tokenUri), tokenHash: (0, common_core_1.maybe)(data.tokenHash), name: (0, common_core_1.maybe)(data.name), symbol: (0, common_core_1.maybe)(data.symbol), ownerOf: (0, common_core_1.maybe)(data.ownerOf, function (ownerOf) { return EvmAddress_1.EvmAddress.create(ownerOf, core); }), blockNumberMinted: (0, common_core_1.maybe)(data.blockNumberMinted, common_core_1.BigNumber.create), blockNumber: (0, common_core_1.maybe)(data.blockNumber, common_core_1.BigNumber.create), lastMetadataSync: (0, common_core_1.maybe)(data.lastMetadataSync, common_core_1.dateInputToDate), lastTokenUriSync: (0, common_core_1.maybe)(data.lastTokenUriSync, common_core_1.dateInputToDate), amount: (0, common_core_1.maybe)(data.amount, function (value) { return +value; }) })); };\n    /**\n     * This function confirms that the NFT metadata is a valid JSON string.\n     *\n     * @param value - the new value for the NFT metadata\n     * @returns the parsed value of the JSON string\n     * @throws {CoreError} if the value is not a valid JSON string\n     */\n    EvmNft.validateMetadata = function (value) {\n        try {\n            return JSON.parse(value);\n        }\n        catch (error) {\n            throw new common_core_1.CoreError({\n                code: common_core_1.CoreErrorCode.INVALID_ARGUMENT,\n                message: 'Invalid metadata provided, cannot parse the value to JSON',\n            });\n        }\n    };\n    return EvmNft;\n}());\nexports.EvmNft = EvmNft;\n//# sourceMappingURL=EvmNft.js.map"]},"metadata":{},"sourceType":"script"}