{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Erc20Value = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar Erc20_1 = require(\"../Erc20/Erc20\");\nvar EVM_ERC20_DEFAULT_DECIMALS = 18;\n/**\n * The Erc20Value class is a MoralisData that references to a the value of an Erc20Token\n * It holds data about the data about the amount of tokens and the number of decimals.\n *\n * @category DataType\n */\nvar Erc20Value = /** @class */function () {\n  function Erc20Value(amount, options, core) {\n    var _this = this;\n    var _a, _b, _c;\n    /**\n     * Displays the token in text format\n     * @returns the value and also the token symbol if available\n     * @example value.display();\n     */\n    this.display = function () {\n      if (!_this._token) {\n        return \"\".concat(_this.value);\n      }\n      return \"\".concat(_this.value, \" \").concat(_this._token.symbol);\n    };\n    this._value = Erc20Value.parse({\n      amount: amount,\n      decimals: (_c = (_a = options === null || options === void 0 ? void 0 : options.decimals) !== null && _a !== void 0 ? _a : (_b = options === null || options === void 0 ? void 0 : options.token) === null || _b === void 0 ? void 0 : _b.decimals) !== null && _c !== void 0 ? _c : EVM_ERC20_DEFAULT_DECIMALS,\n      token: options === null || options === void 0 ? void 0 : options.token\n    });\n    if (options === null || options === void 0 ? void 0 : options.token) {\n      this._token = Erc20_1.Erc20Token.create(options.token, core);\n    }\n  }\n  /**\n   * Create a new instance of Erc20Value from any valid input\n   * @param value - The value to create\n   * @param options - The options for the token\n   * @param core - The MoralisCore instance\n   * @example Erc20Value.create(1000, { decimals: 3 });\n   * @returns The created value\n   * @throws CoreError if the value is invalid\n   */\n  Erc20Value.create = function (value, options, core) {\n    if (value instanceof Erc20Value) {\n      return value;\n    }\n    return new Erc20Value(value, options, core);\n  };\n  /**\n   * Compares two Erc20Valueish instances.\n   * @param valueA - The first value to compare\n   * @param valueB - The second value to compare\n   * @returns True if the values are equal\n   * @example\n   * ```ts\n   * const valueA = Erc20Value.create(1000, { decimals: 3 });\n   * const valueB = Erc20Value.create(10000, { decimals: 4 });\n   * Erc20Value.equals(valueA, valueB); // true\n   * ```\n   */\n  Erc20Value.equals = function (valueA, valueB) {\n    var erc20ValueA = Erc20Value.create(valueA);\n    var erc20ValueB = Erc20Value.create(valueB);\n    return erc20ValueA.value === erc20ValueB.value;\n  };\n  /**\n   * Compares Erc20Value with current instance.\n   * @param value - The value to compare\n   * @returns True if the values are equal\n   * @example value.equals(valueA);\n   */\n  Erc20Value.prototype.equals = function (value) {\n    return Erc20Value.equals(this, value);\n  };\n  /**\n   * Convert the value to a number\n   * @returns the value in number format\n   * @example value.toNumber();\n   */\n  Erc20Value.prototype.toNumber = function () {\n    return +this.value;\n  };\n  /**\n   * Convert the value to a string\n   * @returns the value in string format\n   * @example value.toString();\n   */\n  Erc20Value.prototype.toString = function () {\n    return this.value;\n  };\n  /**\n   * Convert the value to a string\n   * @returns the value in string format\n   * @example value.format();\n   */\n  Erc20Value.prototype.format = function () {\n    return this.toString();\n  };\n  /**\n   * Displays the token in JSON format\n   * @returns the value and also the token if available\n   * @example value.toJSON();\n   */\n  Erc20Value.prototype.toJSON = function () {\n    if (this.token) {\n      return {\n        value: this.value,\n        token: this.token.toJSON()\n      };\n    }\n    return {\n      value: this.value\n    };\n  };\n  Object.defineProperty(Erc20Value.prototype, \"decimals\", {\n    /**\n     * @returns the token decimals\n     * @example value.decimals; // 15\n     */\n    get: function () {\n      return this._value.decimals;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Erc20Value.prototype, \"amount\", {\n    /**\n     * @returns the token amount\n     * @example value.amount; // BigNumber\n     */\n    get: function () {\n      return this._value.amount;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Erc20Value.prototype, \"value\", {\n    /**\n     * @returns the token value\n     * @example value.value; // \"1000\"\n     */\n    get: function () {\n      return this._value.amount.toDecimal(this.decimals);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Erc20Value.prototype, \"token\", {\n    /**\n     * @returns the token\n     * @example value.token; // Erc20Token\n     */\n    get: function () {\n      var _a;\n      return (_a = this._token) !== null && _a !== void 0 ? _a : null;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Erc20Value.parse = function (_a) {\n    var amount = _a.amount,\n      decimals = _a.decimals,\n      token = _a.token;\n    if (token && token.decimals && +token.decimals !== +decimals) {\n      throw new common_core_1.CoreError({\n        code: common_core_1.CoreErrorCode.INVALID_DATA,\n        message: 'Decimals do not match'\n      });\n    }\n    return {\n      amount: common_core_1.BigNumber.create(amount),\n      decimals: +decimals\n    };\n  };\n  return Erc20Value;\n}();\nexports.Erc20Value = Erc20Value;","map":{"version":3,"sources":["../../../src/dataTypes/Erc20Value/Erc20Value.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Erc20Value = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar Erc20_1 = require(\"../Erc20/Erc20\");\nvar EVM_ERC20_DEFAULT_DECIMALS = 18;\n/**\n * The Erc20Value class is a MoralisData that references to a the value of an Erc20Token\n * It holds data about the data about the amount of tokens and the number of decimals.\n *\n * @category DataType\n */\nvar Erc20Value = /** @class */ (function () {\n    function Erc20Value(amount, options, core) {\n        var _this = this;\n        var _a, _b, _c;\n        /**\n         * Displays the token in text format\n         * @returns the value and also the token symbol if available\n         * @example value.display();\n         */\n        this.display = function () {\n            if (!_this._token) {\n                return \"\".concat(_this.value);\n            }\n            return \"\".concat(_this.value, \" \").concat(_this._token.symbol);\n        };\n        this._value = Erc20Value.parse({\n            amount: amount,\n            decimals: (_c = (_a = options === null || options === void 0 ? void 0 : options.decimals) !== null && _a !== void 0 ? _a : (_b = options === null || options === void 0 ? void 0 : options.token) === null || _b === void 0 ? void 0 : _b.decimals) !== null && _c !== void 0 ? _c : EVM_ERC20_DEFAULT_DECIMALS,\n            token: options === null || options === void 0 ? void 0 : options.token,\n        });\n        if (options === null || options === void 0 ? void 0 : options.token) {\n            this._token = Erc20_1.Erc20Token.create(options.token, core);\n        }\n    }\n    /**\n     * Create a new instance of Erc20Value from any valid input\n     * @param value - The value to create\n     * @param options - The options for the token\n     * @param core - The MoralisCore instance\n     * @example Erc20Value.create(1000, { decimals: 3 });\n     * @returns The created value\n     * @throws CoreError if the value is invalid\n     */\n    Erc20Value.create = function (value, options, core) {\n        if (value instanceof Erc20Value) {\n            return value;\n        }\n        return new Erc20Value(value, options, core);\n    };\n    /**\n     * Compares two Erc20Valueish instances.\n     * @param valueA - The first value to compare\n     * @param valueB - The second value to compare\n     * @returns True if the values are equal\n     * @example\n     * ```ts\n     * const valueA = Erc20Value.create(1000, { decimals: 3 });\n     * const valueB = Erc20Value.create(10000, { decimals: 4 });\n     * Erc20Value.equals(valueA, valueB); // true\n     * ```\n     */\n    Erc20Value.equals = function (valueA, valueB) {\n        var erc20ValueA = Erc20Value.create(valueA);\n        var erc20ValueB = Erc20Value.create(valueB);\n        return erc20ValueA.value === erc20ValueB.value;\n    };\n    /**\n     * Compares Erc20Value with current instance.\n     * @param value - The value to compare\n     * @returns True if the values are equal\n     * @example value.equals(valueA);\n     */\n    Erc20Value.prototype.equals = function (value) {\n        return Erc20Value.equals(this, value);\n    };\n    /**\n     * Convert the value to a number\n     * @returns the value in number format\n     * @example value.toNumber();\n     */\n    Erc20Value.prototype.toNumber = function () {\n        return +this.value;\n    };\n    /**\n     * Convert the value to a string\n     * @returns the value in string format\n     * @example value.toString();\n     */\n    Erc20Value.prototype.toString = function () {\n        return this.value;\n    };\n    /**\n     * Convert the value to a string\n     * @returns the value in string format\n     * @example value.format();\n     */\n    Erc20Value.prototype.format = function () {\n        return this.toString();\n    };\n    /**\n     * Displays the token in JSON format\n     * @returns the value and also the token if available\n     * @example value.toJSON();\n     */\n    Erc20Value.prototype.toJSON = function () {\n        if (this.token) {\n            return { value: this.value, token: this.token.toJSON() };\n        }\n        return { value: this.value };\n    };\n    Object.defineProperty(Erc20Value.prototype, \"decimals\", {\n        /**\n         * @returns the token decimals\n         * @example value.decimals; // 15\n         */\n        get: function () {\n            return this._value.decimals;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Erc20Value.prototype, \"amount\", {\n        /**\n         * @returns the token amount\n         * @example value.amount; // BigNumber\n         */\n        get: function () {\n            return this._value.amount;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Erc20Value.prototype, \"value\", {\n        /**\n         * @returns the token value\n         * @example value.value; // \"1000\"\n         */\n        get: function () {\n            return this._value.amount.toDecimal(this.decimals);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Erc20Value.prototype, \"token\", {\n        /**\n         * @returns the token\n         * @example value.token; // Erc20Token\n         */\n        get: function () {\n            var _a;\n            return (_a = this._token) !== null && _a !== void 0 ? _a : null;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Erc20Value.parse = function (_a) {\n        var amount = _a.amount, decimals = _a.decimals, token = _a.token;\n        if (token && token.decimals && +token.decimals !== +decimals) {\n            throw new common_core_1.CoreError({\n                code: common_core_1.CoreErrorCode.INVALID_DATA,\n                message: 'Decimals do not match',\n            });\n        }\n        return {\n            amount: common_core_1.BigNumber.create(amount),\n            decimals: +decimals,\n        };\n    };\n    return Erc20Value;\n}());\nexports.Erc20Value = Erc20Value;\n//# sourceMappingURL=Erc20Value.js.map"]},"metadata":{},"sourceType":"script"}