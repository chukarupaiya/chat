{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getNFTMetadataOperation = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar dataTypes_1 = require(\"../../dataTypes\");\nvar EvmChainResolver_1 = require(\"../../EvmChainResolver\");\n/**\n * Get NFT data, including metadata (where available), for the given NFT token ID and contract address.\n * * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n */\nexports.getNFTMetadataOperation = {\n  method: 'GET',\n  name: 'getNFTMetadata',\n  id: 'getNFTMetadata',\n  groupName: 'nft',\n  isNullable: true,\n  urlPathPattern: '/nft/{address}/{tokenId}',\n  urlPathParamNames: ['address', 'tokenId'],\n  urlSearchParamNames: ['chain', 'format', 'normalizeMetadata'],\n  getRequestUrlParams: getRequestUrlParams,\n  serializeRequest: serializeRequest,\n  deserializeRequest: deserializeRequest,\n  deserializeResponse: deserializeResponse\n};\n// Methods\nfunction getRequestUrlParams(request, core) {\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n    address: dataTypes_1.EvmAddress.create(request.address, core).lowercase,\n    tokenId: request.tokenId,\n    format: request.format,\n    normalizeMetadata: request.normalizeMetadata\n  };\n}\nfunction deserializeResponse(jsonResponse, request, core) {\n  return dataTypes_1.EvmNft.create(__assign(__assign({}, (0, common_core_1.toCamelCase)(jsonResponse)), {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core),\n    ownerOf: jsonResponse.owner_of ? dataTypes_1.EvmAddress.create(jsonResponse.owner_of, core) : undefined,\n    lastMetadataSync: jsonResponse.last_metadata_sync ? new Date(jsonResponse.last_metadata_sync) : undefined,\n    lastTokenUriSync: jsonResponse.last_token_uri_sync ? new Date(jsonResponse.last_token_uri_sync) : undefined\n  }), core);\n}\nfunction serializeRequest(request, core) {\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n    format: request.format,\n    address: dataTypes_1.EvmAddress.create(request.address, core).checksum,\n    tokenId: request.tokenId,\n    normalizeMetadata: request.normalizeMetadata\n  };\n}\nfunction deserializeRequest(jsonRequest, core) {\n  return {\n    chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),\n    format: jsonRequest.format,\n    address: dataTypes_1.EvmAddress.create(jsonRequest.address, core),\n    tokenId: jsonRequest.tokenId,\n    normalizeMetadata: jsonRequest.normalizeMetadata\n  };\n}","map":{"version":3,"sources":["../../../src/operations/nft/getNFTMetadataOperation.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getNFTMetadataOperation = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar dataTypes_1 = require(\"../../dataTypes\");\nvar EvmChainResolver_1 = require(\"../../EvmChainResolver\");\n/**\n * Get NFT data, including metadata (where available), for the given NFT token ID and contract address.\n * * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n */\nexports.getNFTMetadataOperation = {\n    method: 'GET',\n    name: 'getNFTMetadata',\n    id: 'getNFTMetadata',\n    groupName: 'nft',\n    isNullable: true,\n    urlPathPattern: '/nft/{address}/{tokenId}',\n    urlPathParamNames: ['address', 'tokenId'],\n    urlSearchParamNames: ['chain', 'format', 'normalizeMetadata'],\n    getRequestUrlParams: getRequestUrlParams,\n    serializeRequest: serializeRequest,\n    deserializeRequest: deserializeRequest,\n    deserializeResponse: deserializeResponse,\n};\n// Methods\nfunction getRequestUrlParams(request, core) {\n    return {\n        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n        address: dataTypes_1.EvmAddress.create(request.address, core).lowercase,\n        tokenId: request.tokenId,\n        format: request.format,\n        normalizeMetadata: request.normalizeMetadata,\n    };\n}\nfunction deserializeResponse(jsonResponse, request, core) {\n    return dataTypes_1.EvmNft.create(__assign(__assign({}, (0, common_core_1.toCamelCase)(jsonResponse)), { chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core), ownerOf: jsonResponse.owner_of ? dataTypes_1.EvmAddress.create(jsonResponse.owner_of, core) : undefined, lastMetadataSync: jsonResponse.last_metadata_sync ? new Date(jsonResponse.last_metadata_sync) : undefined, lastTokenUriSync: jsonResponse.last_token_uri_sync ? new Date(jsonResponse.last_token_uri_sync) : undefined }), core);\n}\nfunction serializeRequest(request, core) {\n    return {\n        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n        format: request.format,\n        address: dataTypes_1.EvmAddress.create(request.address, core).checksum,\n        tokenId: request.tokenId,\n        normalizeMetadata: request.normalizeMetadata,\n    };\n}\nfunction deserializeRequest(jsonRequest, core) {\n    return {\n        chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),\n        format: jsonRequest.format,\n        address: dataTypes_1.EvmAddress.create(jsonRequest.address, core),\n        tokenId: jsonRequest.tokenId,\n        normalizeMetadata: jsonRequest.normalizeMetadata,\n    };\n}\n//# sourceMappingURL=getNFTMetadataOperation.js.map"]},"metadata":{},"sourceType":"script"}