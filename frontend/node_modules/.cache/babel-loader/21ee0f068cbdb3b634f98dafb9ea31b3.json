{"ast":null,"code":"var _jsxFileName = \"/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/SingleChat.js\",\n  _s = $RefreshSig$();\nimport { FormControl } from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport \"./SingleChat.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport Pay from \"./Pay\";\nimport PaymentChoice from \"./PaymentChoice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ENDPOINT = \"http://localhost:5000\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\nvar socket, selectedChatCompare;\nconst SingleChat = _ref => {\n  _s();\n  let {\n    fetchAgain,\n    setFetchAgain\n  } = _ref;\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\"\n    }\n  };\n  const {\n    selectedChat,\n    setSelectedChat,\n    user,\n    notification,\n    setNotification\n  } = ChatState();\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      };\n      setLoading(true);\n      const {\n        data\n      } = await axios.get(`/api/message/${selectedChat._id}`, config);\n      setMessages(data);\n      setLoading(false);\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\"\n      });\n    }\n  };\n  const sendMessage = async event => {\n    if (event.key === \"Enter\" && newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`\n          }\n        };\n        setNewMessage(\"\");\n        console.log(newMessage + \" \" + selectedChat);\n        const {\n          data\n        } = await axios.post(\"/api/message\", {\n          content: newMessage,\n          chatId: selectedChat,\n          payment: false,\n          payment_mode: \"false\",\n          chat_mode: \"private\",\n          payment_type: \"false\",\n          currency: \"false\"\n        }, config);\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\"\n        });\n      }\n    }\n  };\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n    console.log(socket);\n    // eslint-disable-next-line\n  }, []);\n  useEffect(() => {\n    fetchMessages();\n    selectedChatCompare = selectedChat;\n    // eslint-disable-next-line\n  }, [selectedChat]);\n  const refAgain = () => {\n    fetchMessages();\n  };\n  useEffect(() => {\n    socket.on(\"message recieved\", newMessageRecieved => {\n      if (!selectedChatCompare ||\n      // if chat is not selected or doesn't match current chat\n      selectedChatCompare._id !== newMessageRecieved.chat._id) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n  const typingHandler = e => {\n    setNewMessage(e.target.value);\n    if (!socketConnected) return;\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: selectedChat ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        fontSize: {\n          base: \"28px\",\n          md: \"30px\"\n        },\n        pb: 3,\n        px: 2,\n        w: \"100%\",\n        fontFamily: \"Work sans\",\n        d: \"flex\",\n        justifyContent: {\n          base: \"space-between\"\n        },\n        alignItems: \"center\",\n        color: \"white\",\n        children: [/*#__PURE__*/_jsxDEV(IconButton, {\n          d: {\n            base: \"flex\",\n            md: \"none\"\n          },\n          icon: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 21\n          }, this),\n          onClick: () => setSelectedChat(\"\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 13\n        }, this), messages && (!selectedChat.isGroupChat ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [getSender(user, selectedChat.users), /*#__PURE__*/_jsxDEV(ProfileModal, {\n            user: getSenderFull(user, selectedChat.users)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [selectedChat.chatName.toUpperCase(), /*#__PURE__*/_jsxDEV(UpdateGroupChatModal, {\n            fetchMessages: fetchMessages,\n            fetchAgain: fetchAgain,\n            setFetchAgain: setFetchAgain\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        d: \"flex\",\n        flexDir: \"column\",\n        justifyContent: \"flex-end\",\n        p: 3,\n        bg: \"rgb(66,69,73)\",\n        w: \"100%\",\n        h: \"100%\",\n        borderRadius: \"lg\",\n        overflowY: \"hidden\",\n        children: [loading ? /*#__PURE__*/_jsxDEV(Spinner, {\n          size: \"xl\",\n          w: 20,\n          h: 20,\n          alignSelf: \"center\",\n          margin: \"auto\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages\",\n          children: /*#__PURE__*/_jsxDEV(ScrollableChat, {\n            messages: messages,\n            refAgain: refAgain\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          onKeyDown: sendMessage,\n          id: \"first-name\",\n          isRequired: true,\n          mt: 3,\n          children: [istyping ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(Lottie, {\n              options: defaultOptions\n              // height={50}\n              ,\n              width: 70,\n              style: {\n                marginBottom: 15,\n                marginLeft: 0\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              margin: \"auto\",\n              display: \"flex\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(Input, {\n              variant: \"filled\",\n              bg: \"rgb(54,57,62)\",\n              color: \"white\",\n              focusBorderColor: \"rgb(54,57,62)\",\n              placeholder: \"Enter a message..\",\n              value: newMessage,\n              width: \"97%\",\n              onChange: typingHandler,\n              _hover: {\n                bg: \"rgb(54,57,62)\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(PaymentChoice, {\n              fetchAgain: fetchAgain,\n              setFetchAgain: setFetchAgain,\n              fetchMessages: fetchMessages,\n              refAgain: refAgain\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) :\n    /*#__PURE__*/\n    // to get socket.io on same page\n    _jsxDEV(Box, {\n      d: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      h: \"100%\",\n      w: \"100%\",\n      bg: \"rgb(54,57,62)\",\n      children: /*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"3xl\",\n        pb: 3,\n        fontFamily: \"Work sans\",\n        color: \"white\",\n        children: \"Click on a user to start chatting\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n_s(SingleChat, \"J0/5w4jPVqRx8QfTCSBBWdq70n4=\", false, function () {\n  return [useToast];\n});\n_c = SingleChat;\nexport default SingleChat;\nvar _c;\n$RefreshReg$(_c, \"SingleChat\");","map":{"version":3,"names":["FormControl","Input","Box","Text","IconButton","Spinner","useToast","getSender","getSenderFull","useEffect","useState","axios","ArrowBackIcon","ProfileModal","ScrollableChat","Lottie","animationData","io","UpdateGroupChatModal","ChatState","Pay","PaymentChoice","ENDPOINT","socket","selectedChatCompare","SingleChat","fetchAgain","setFetchAgain","messages","setMessages","loading","setLoading","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","toast","defaultOptions","loop","autoplay","rendererSettings","preserveAspectRatio","selectedChat","setSelectedChat","user","notification","setNotification","fetchMessages","config","headers","Authorization","token","data","get","_id","emit","error","title","description","status","duration","isClosable","position","sendMessage","event","key","console","log","post","content","chatId","payment","payment_mode","chat_mode","payment_type","currency","on","refAgain","newMessageRecieved","chat","includes","typingHandler","e","target","value","lastTypingTime","Date","getTime","timerLength","setTimeout","timeNow","timeDiff","base","md","isGroupChat","users","chatName","toUpperCase","marginBottom","marginLeft","margin","display","bg"],"sources":["/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/SingleChat.js"],"sourcesContent":["import { FormControl } from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport \"./SingleChat.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\n\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport Pay from \"./Pay\";\nimport PaymentChoice from \"./PaymentChoice\";\n\nconst ENDPOINT = \"http://localhost:5000\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\nvar socket, selectedChatCompare;\n\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      setLoading(true);\n\n      const { data } = await axios.get(\n        `/api/message/${selectedChat._id}`,\n        config\n      );\n      setMessages(data);\n      setLoading(false);\n\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  const sendMessage = async (event) => {\n    if (event.key === \"Enter\" && newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        console.log(newMessage + \" \" + selectedChat);\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n            payment: false,\n            payment_mode:\"false\",\n            chat_mode:\"private\",\n            payment_type:\"false\",\n            currency:\"false\",\n          },\n          config\n        );\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n    console.log(socket);\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    fetchMessages();\n\n    selectedChatCompare = selectedChat;\n    // eslint-disable-next-line\n  }, [selectedChat]);\n\n  const refAgain = () => {\n    fetchMessages();\n  };\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  return (\n    <>\n      {selectedChat ? (\n        <>\n          <Text\n            fontSize={{ base: \"28px\", md: \"30px\" }}\n            pb={3}\n            px={2}\n            w=\"100%\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent={{ base: \"space-between\" }}\n            alignItems=\"center\"\n            color=\"white\"\n          >\n            <IconButton\n              d={{ base: \"flex\", md: \"none\" }}\n              icon={<ArrowBackIcon />}\n              onClick={() => setSelectedChat(\"\")}\n            />\n            {messages &&\n              (!selectedChat.isGroupChat ? (\n                <>\n                  {getSender(user, selectedChat.users)}\n                  <ProfileModal\n                    user={getSenderFull(user, selectedChat.users)}\n                  />\n                </>\n              ) : (\n                <>\n                  {selectedChat.chatName.toUpperCase()}\n                  <UpdateGroupChatModal\n                    fetchMessages={fetchMessages}\n                    fetchAgain={fetchAgain}\n                    setFetchAgain={setFetchAgain}\n                  />\n                </>\n              ))}\n          </Text>\n          <Box\n            d=\"flex\"\n            flexDir=\"column\"\n            justifyContent=\"flex-end\"\n            p={3}\n            bg=\"rgb(66,69,73)\"\n            w=\"100%\"\n            h=\"100%\"\n            borderRadius=\"lg\"\n            overflowY=\"hidden\"\n          >\n            {loading ? (\n              <Spinner\n                size=\"xl\"\n                w={20}\n                h={20}\n                alignSelf=\"center\"\n                margin=\"auto\"\n              />\n            ) : (\n              <div className=\"messages\">\n                <ScrollableChat messages={messages} refAgain={refAgain} />\n              </div>\n            )}\n\n            <FormControl\n              onKeyDown={sendMessage}\n              id=\"first-name\"\n              isRequired\n              mt={3}\n            >\n              {istyping ? (\n                <div>\n                  <Lottie\n                    options={defaultOptions}\n                    // height={50}\n                    width={70}\n                    style={{ marginBottom: 15, marginLeft: 0 }}\n                  />\n                </div>\n              ) : (\n                <></>\n              )}\n              <div style={{ margin: \"auto\", display: \"flex\" }}>\n                <Input\n                  variant=\"filled\"\n                  bg=\"rgb(54,57,62)\"\n                  color=\"white\"\n                  focusBorderColor=\"rgb(54,57,62)\"\n                  placeholder=\"Enter a message..\"\n                  value={newMessage}\n                  width=\"97%\"\n                  onChange={typingHandler}\n                  _hover={{ bg: \"rgb(54,57,62)\" }}\n                />\n                <PaymentChoice\n                  fetchAgain={fetchAgain}\n                  setFetchAgain={setFetchAgain}\n                  fetchMessages={fetchMessages}\n                  refAgain={refAgain}\n                />\n              </div>\n            </FormControl>\n          </Box>\n        </>\n      ) : (\n        // to get socket.io on same page\n        <Box\n          d=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          h=\"100%\"\n          w=\"100%\"\n          bg=\"rgb(54,57,62)\"\n        >\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\" color=\"white\">\n            Click on a user to start chatting\n          </Text>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default SingleChat;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}