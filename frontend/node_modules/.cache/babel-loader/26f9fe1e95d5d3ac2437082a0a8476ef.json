{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EvmSignature = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar bytes_1 = require(\"@ethersproject/bytes\");\n/**\n * Represents of a signed EVM signature\n * Can be created with a valid r,s,v signature or a hex string\n */\nvar EvmSignature = /** @class */function () {\n  function EvmSignature(data) {\n    this._data = EvmSignature.parse(data);\n  }\n  EvmSignature.create = function (data) {\n    if (data instanceof EvmSignature) {\n      return data;\n    }\n    return new EvmSignature(data);\n  };\n  EvmSignature.equals = function (dataA, dataB) {\n    var signatureA = EvmSignature.create(dataA);\n    var signatureB = EvmSignature.create(dataB);\n    return signatureA.serialized === signatureB.serialized;\n  };\n  /**\n   * Checks the equality of the current transfer instance with another nft transfer\n   * @param data - the transfer to compare with\n   * @example transaction.equals(data)\n   * @returns true if the transfers are equal, false otherwise\n   */\n  EvmSignature.prototype.equals = function (data) {\n    return EvmSignature.equals(this, data);\n  };\n  Object.defineProperty(EvmSignature.prototype, \"r\", {\n    get: function () {\n      return this._data.r;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmSignature.prototype, \"s\", {\n    get: function () {\n      return this._data.s;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmSignature.prototype, \"v\", {\n    get: function () {\n      return this._data.v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmSignature.prototype, \"serialized\", {\n    get: function () {\n      return (0, bytes_1.joinSignature)(this._data);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  EvmSignature.prototype.toJSON = function () {\n    return {\n      r: this.r,\n      s: this.s,\n      v: this.v.toString()\n    };\n  };\n  EvmSignature.prototype.format = function () {\n    return this.serialized;\n  };\n  EvmSignature.parse = function (data) {\n    if (typeof data === 'string') {\n      return (0, bytes_1.splitSignature)(data);\n    }\n    return (0, bytes_1.splitSignature)({\n      r: (0, bytes_1.hexlify)(common_core_1.BigNumber.create(data.r).toBigInt()),\n      s: (0, bytes_1.hexlify)(common_core_1.BigNumber.create(data.s).toBigInt()),\n      v: +data.v\n    });\n  };\n  return EvmSignature;\n}();\nexports.EvmSignature = EvmSignature;","map":{"version":3,"sources":["../../../src/dataTypes/EvmSignature/EvmSignature.ts"],"names":[],"mappings":";;;;;;AAAA,IAAA,aAAA,GAAA,OAAA,CAAA,0BAAA,CAAA;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;AAOA;;;AAGG;AACH,IAAA,YAAA,GAAA,aAAA,YAAA;EAUE,SAAA,YAAA,CAAY,IAAuB,EAAA;IACjC,IAAI,CAAC,KAAK,GAAG,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC;EACvC;EAXO,YAAA,CAAA,MAAM,GAAb,UAAc,IAAqB,EAAA;IACjC,IAAI,IAAI,YAAY,YAAY,EAAE;MAChC,OAAO,IAAI;IACZ;IACD,OAAO,IAAI,YAAY,CAAC,IAAI,CAAC;EAC/B,CAAC;EAoBM,YAAA,CAAA,MAAM,GAAb,UAAc,KAAsB,EAAE,KAAsB,EAAA;IAC1D,IAAM,UAAU,GAAG,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC;IAC7C,IAAM,UAAU,GAAG,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC;IAE7C,OAAO,UAAU,CAAC,UAAU,KAAK,UAAU,CAAC,UAAU;EACxD,CAAC;EAED;;;;;AAKG;EACH,YAAA,CAAA,SAAA,CAAA,MAAM,GAAN,UAAO,IAAqB,EAAA;IAC1B,OAAO,YAAY,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC;EACxC,CAAC;EAED,MAAA,CAAA,cAAA,CAAI,YAAA,CAAA,SAAA,EAAA,GAAC,EAAA;SAAL,YAAA;MACE,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC;IACrB,CAAC;;;IAAA;EAED,MAAA,CAAA,cAAA,CAAI,YAAA,CAAA,SAAA,EAAA,GAAC,EAAA;SAAL,YAAA;MACE,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC;IACrB,CAAC;;;IAAA;EAED,MAAA,CAAA,cAAA,CAAI,YAAA,CAAA,SAAA,EAAA,GAAC,EAAA;SAAL,YAAA;MACE,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC;IACrB,CAAC;;;IAAA;EAED,MAAA,CAAA,cAAA,CAAI,YAAA,CAAA,SAAA,EAAA,YAAU,EAAA;SAAd,YAAA;MACE,OAAO,CAAA,CAAA,EAAA,OAAA,CAAA,aAAa,EAAC,IAAI,CAAC,KAAK,CAAC;IAClC,CAAC;;;IAAA;EAED,YAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IACE,OAAO;MACL,CAAC,EAAE,IAAI,CAAC,CAAC;MACT,CAAC,EAAE,IAAI,CAAC,CAAC;MACT,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,QAAQ;KACnB;EACH,CAAC;EAED,YAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IACE,OAAO,IAAI,CAAC,UAAU;EACxB,CAAC;EAvDM,YAAA,CAAA,KAAK,GAAG,UAAC,IAAuB,EAAA;IACrC,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;MAC5B,OAAO,CAAA,CAAA,EAAA,OAAA,CAAA,cAAc,EAAC,IAAI,CAAC;IAC5B;IAED,OAAO,CAAA,CAAA,EAAA,OAAA,CAAA,cAAc,EAAC;MACpB,CAAC,EAAE,CAAA,CAAA,EAAA,OAAA,CAAA,OAAO,EAAC,aAAA,CAAA,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;MAC/C,CAAC,EAAE,CAAA,CAAA,EAAA,OAAA,CAAA,OAAO,EAAC,aAAA,CAAA,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;MAC/C,CAAC,EAAE,CAAC,IAAI,CAAC;KACV,CAAC;EACJ,CAAC;EA8CH,OAAA,YAAC;CAAA,EAAA;AAtEY,OAAA,CAAA,YAAA,GAAA,YAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EvmSignature = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar bytes_1 = require(\"@ethersproject/bytes\");\n/**\n * Represents of a signed EVM signature\n * Can be created with a valid r,s,v signature or a hex string\n */\nvar EvmSignature = /** @class */ (function () {\n    function EvmSignature(data) {\n        this._data = EvmSignature.parse(data);\n    }\n    EvmSignature.create = function (data) {\n        if (data instanceof EvmSignature) {\n            return data;\n        }\n        return new EvmSignature(data);\n    };\n    EvmSignature.equals = function (dataA, dataB) {\n        var signatureA = EvmSignature.create(dataA);\n        var signatureB = EvmSignature.create(dataB);\n        return signatureA.serialized === signatureB.serialized;\n    };\n    /**\n     * Checks the equality of the current transfer instance with another nft transfer\n     * @param data - the transfer to compare with\n     * @example transaction.equals(data)\n     * @returns true if the transfers are equal, false otherwise\n     */\n    EvmSignature.prototype.equals = function (data) {\n        return EvmSignature.equals(this, data);\n    };\n    Object.defineProperty(EvmSignature.prototype, \"r\", {\n        get: function () {\n            return this._data.r;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmSignature.prototype, \"s\", {\n        get: function () {\n            return this._data.s;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmSignature.prototype, \"v\", {\n        get: function () {\n            return this._data.v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmSignature.prototype, \"serialized\", {\n        get: function () {\n            return (0, bytes_1.joinSignature)(this._data);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    EvmSignature.prototype.toJSON = function () {\n        return {\n            r: this.r,\n            s: this.s,\n            v: this.v.toString(),\n        };\n    };\n    EvmSignature.prototype.format = function () {\n        return this.serialized;\n    };\n    EvmSignature.parse = function (data) {\n        if (typeof data === 'string') {\n            return (0, bytes_1.splitSignature)(data);\n        }\n        return (0, bytes_1.splitSignature)({\n            r: (0, bytes_1.hexlify)(common_core_1.BigNumber.create(data.r).toBigInt()),\n            s: (0, bytes_1.hexlify)(common_core_1.BigNumber.create(data.s).toBigInt()),\n            v: +data.v,\n        });\n    };\n    return EvmSignature;\n}());\nexports.EvmSignature = EvmSignature;\n//# sourceMappingURL=EvmSignature.js.map"]},"metadata":{},"sourceType":"script"}