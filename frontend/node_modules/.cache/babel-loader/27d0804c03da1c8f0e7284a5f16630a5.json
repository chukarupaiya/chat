{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EvmSimpleBlock = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar EvmChain_1 = require(\"../EvmChain\");\n/**\n * The EvmSimpleBlock is a representation of a block.\n *\n * @category DataType\n */\nvar EvmSimpleBlock = /** @class */function () {\n  function EvmSimpleBlock(data, core) {\n    this._data = EvmSimpleBlock.parse(data, core);\n  }\n  /**\n   * Create a new instance of EvmSimpleBlock from any valid transaction input\n   * @param data - the EvmSimpleBlockish type\n   * @example const transaction = EvmTransaction.create(data);\n   */\n  EvmSimpleBlock.create = function (data, core) {\n    if (data instanceof EvmSimpleBlock) {\n      return data;\n    }\n    var finalCore = core !== null && core !== void 0 ? core : common_core_1.CoreProvider.getDefault();\n    return new EvmSimpleBlock(data, finalCore);\n  };\n  /**\n   * Check the equality between two Evm blocks. It compares their hashes and blocks.\n   * @param dataA - The first block to compare\n   * @param dataB - The second block to compare\n   * @example EvmTransaction.equals(dataA, dataB)\n   */\n  EvmSimpleBlock.equals = function (dataA, dataB) {\n    var blockA = EvmSimpleBlock.create(dataA);\n    var blockB = EvmSimpleBlock.create(dataB);\n    if (!blockA.chain.equals(blockB.chain)) {\n      return false;\n    }\n    if (blockA.hash !== blockB.hash) {\n      return false;\n    }\n    if (!blockA.number.equals(blockB.number)) {\n      return false;\n    }\n    return true;\n  };\n  /**\n   * Checks the equality of the current block with another evm block\n   * @param data - the block to compare with\n   * @example\n   * ```ts\n   * block.equals(data)\n   * ```\n   */\n  EvmSimpleBlock.prototype.equals = function (data) {\n    return EvmSimpleBlock.equals(this, data);\n  };\n  /**\n   * @returns a JSON represention of the block.\n   * @example\n   * ```\n   * block.toJSON()\n   * ```\n   */\n  EvmSimpleBlock.prototype.toJSON = function () {\n    var data = this._data;\n    return __assign(__assign({}, data), {\n      number: data.number.toString(),\n      chain: data.chain.format()\n    });\n  };\n  /**\n   * @returns a JSON represention of the block.\n   * @example\n   * ```\n   * block.format()\n   * ```\n   */\n  EvmSimpleBlock.prototype.format = function () {\n    return this.toJSON();\n  };\n  Object.defineProperty(EvmSimpleBlock.prototype, \"result\", {\n    /**\n     * @returns all the data without casting it to JSON.\n     * @example block.result\n     */\n    get: function () {\n      return this._data;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmSimpleBlock.prototype, \"number\", {\n    /**\n     * @returns the block number.\n     * @example block.number // BigNumber\n     */\n    get: function () {\n      return this._data.number;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmSimpleBlock.prototype, \"hash\", {\n    /**\n     * @returns the block hash.\n     * @example block.hash // \"0x9b559aef7ea858608c2e554246fe4a24287e7aeeb976848df2b9a2531f4b9171\"\n     */\n    get: function () {\n      return this._data.hash;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmSimpleBlock.prototype, \"timestamp\", {\n    /**\n     * @returns the block timestamp.\n     * @example block.timestamp // Date\n     */\n    get: function () {\n      return this._data.timestamp;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmSimpleBlock.prototype, \"chain\", {\n    /**\n     * @returns the block chain.\n     * @example block.chain // EvmChain\n     */\n    get: function () {\n      return this._data.chain;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  EvmSimpleBlock.parse = function (data, core) {\n    return {\n      timestamp: (0, common_core_1.dateInputToDate)(data.timestamp),\n      number: common_core_1.BigNumber.create(data.number),\n      chain: EvmChain_1.EvmChain.create(data.chain, core),\n      hash: data.hash\n    };\n  };\n  return EvmSimpleBlock;\n}();\nexports.EvmSimpleBlock = EvmSimpleBlock;","map":{"version":3,"sources":["../../../src/dataTypes/EvmBlock/EvmSimpleBlock.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EvmSimpleBlock = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar EvmChain_1 = require(\"../EvmChain\");\n/**\n * The EvmSimpleBlock is a representation of a block.\n *\n * @category DataType\n */\nvar EvmSimpleBlock = /** @class */ (function () {\n    function EvmSimpleBlock(data, core) {\n        this._data = EvmSimpleBlock.parse(data, core);\n    }\n    /**\n     * Create a new instance of EvmSimpleBlock from any valid transaction input\n     * @param data - the EvmSimpleBlockish type\n     * @example const transaction = EvmTransaction.create(data);\n     */\n    EvmSimpleBlock.create = function (data, core) {\n        if (data instanceof EvmSimpleBlock) {\n            return data;\n        }\n        var finalCore = core !== null && core !== void 0 ? core : common_core_1.CoreProvider.getDefault();\n        return new EvmSimpleBlock(data, finalCore);\n    };\n    /**\n     * Check the equality between two Evm blocks. It compares their hashes and blocks.\n     * @param dataA - The first block to compare\n     * @param dataB - The second block to compare\n     * @example EvmTransaction.equals(dataA, dataB)\n     */\n    EvmSimpleBlock.equals = function (dataA, dataB) {\n        var blockA = EvmSimpleBlock.create(dataA);\n        var blockB = EvmSimpleBlock.create(dataB);\n        if (!blockA.chain.equals(blockB.chain)) {\n            return false;\n        }\n        if (blockA.hash !== blockB.hash) {\n            return false;\n        }\n        if (!blockA.number.equals(blockB.number)) {\n            return false;\n        }\n        return true;\n    };\n    /**\n     * Checks the equality of the current block with another evm block\n     * @param data - the block to compare with\n     * @example\n     * ```ts\n     * block.equals(data)\n     * ```\n     */\n    EvmSimpleBlock.prototype.equals = function (data) {\n        return EvmSimpleBlock.equals(this, data);\n    };\n    /**\n     * @returns a JSON represention of the block.\n     * @example\n     * ```\n     * block.toJSON()\n     * ```\n     */\n    EvmSimpleBlock.prototype.toJSON = function () {\n        var data = this._data;\n        return __assign(__assign({}, data), { number: data.number.toString(), chain: data.chain.format() });\n    };\n    /**\n     * @returns a JSON represention of the block.\n     * @example\n     * ```\n     * block.format()\n     * ```\n     */\n    EvmSimpleBlock.prototype.format = function () {\n        return this.toJSON();\n    };\n    Object.defineProperty(EvmSimpleBlock.prototype, \"result\", {\n        /**\n         * @returns all the data without casting it to JSON.\n         * @example block.result\n         */\n        get: function () {\n            return this._data;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmSimpleBlock.prototype, \"number\", {\n        /**\n         * @returns the block number.\n         * @example block.number // BigNumber\n         */\n        get: function () {\n            return this._data.number;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmSimpleBlock.prototype, \"hash\", {\n        /**\n         * @returns the block hash.\n         * @example block.hash // \"0x9b559aef7ea858608c2e554246fe4a24287e7aeeb976848df2b9a2531f4b9171\"\n         */\n        get: function () {\n            return this._data.hash;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmSimpleBlock.prototype, \"timestamp\", {\n        /**\n         * @returns the block timestamp.\n         * @example block.timestamp // Date\n         */\n        get: function () {\n            return this._data.timestamp;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmSimpleBlock.prototype, \"chain\", {\n        /**\n         * @returns the block chain.\n         * @example block.chain // EvmChain\n         */\n        get: function () {\n            return this._data.chain;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    EvmSimpleBlock.parse = function (data, core) { return ({\n        timestamp: (0, common_core_1.dateInputToDate)(data.timestamp),\n        number: common_core_1.BigNumber.create(data.number),\n        chain: EvmChain_1.EvmChain.create(data.chain, core),\n        hash: data.hash,\n    }); };\n    return EvmSimpleBlock;\n}());\nexports.EvmSimpleBlock = EvmSimpleBlock;\n//# sourceMappingURL=EvmSimpleBlock.js.map"]},"metadata":{},"sourceType":"script"}