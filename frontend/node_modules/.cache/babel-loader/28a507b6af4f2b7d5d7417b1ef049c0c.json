{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SolNetwork = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar solNetworkNames = ['mainnet', 'devnet'];\n/**\n * A representation of a Solana network.\n *\n * @category DataType\n */\nvar SolNetwork = /** @class */function () {\n  function SolNetwork(network) {\n    this.network = network;\n  }\n  Object.defineProperty(SolNetwork, \"MAINNET\", {\n    /**\n     * Returns MAINNET network\n     *\n     * @example SolNetwork.MAINNET\n     */\n    get: function () {\n      return SolNetwork.create('mainnet');\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SolNetwork, \"DEVNET\", {\n    /**\n     * Returns DEVNET network\n     *\n     * @example SolNetwork.MAINNET\n     */\n    get: function () {\n      return SolNetwork.create('devnet');\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Create a new instance of SolNetwork from any valid network input.\n   *\n   * @example `const network = SolNetwork.create(\"mainnet\")`\n   * @throws an error when a passed network is invalid.\n   */\n  SolNetwork.create = function (network) {\n    return network instanceof SolNetwork ? network : new SolNetwork(SolNetwork.parse(network));\n  };\n  SolNetwork.parse = function (network) {\n    if (typeof network === 'string') {\n      if (!solNetworkNames.includes(network)) {\n        throw new common_core_1.CoreError({\n          code: common_core_1.CoreErrorCode.INVALID_ARGUMENT,\n          message: \"Solana network is not supported: \".concat(network)\n        });\n      }\n    }\n    return network;\n  };\n  /**\n   * Formats the network to a specific format.\n   * Currently returns a string representing the network.\n   * @example network.format(); // \"mainnet\"\n   */\n  SolNetwork.prototype.format = function () {\n    // TODO: add `format` argument\n    return this.network;\n  };\n  /**\n   * Checks the equality of the current network with another Solana network.\n   * @example `network.equals(\"mainnet\")`\n   * @example `network.equals(SolNetwork.create(\"mainnet\"))`\n   */\n  SolNetwork.prototype.equals = function (network) {\n    return this.network === SolNetwork.create(network).network;\n  };\n  /**\n   * @returns a string representing the network.\n   * @example network.toJSON(); // \"mainnet\"\n   */\n  SolNetwork.prototype.toJSON = function () {\n    return this.network;\n  };\n  /**\n   * @returns a string representing the network.\n   * @example network.toString(); // \"mainnet\"\n   */\n  SolNetwork.prototype.toString = function () {\n    return this.network;\n  };\n  return SolNetwork;\n}();\nexports.SolNetwork = SolNetwork;","map":{"version":3,"sources":["../../../src/dataTypes/SolNetwork/SolNetwork.ts"],"names":[],"mappings":";;;;;;AAAA,IAAA,aAAA,GAAA,OAAA,CAAA,0BAAA,CAAA;AAEA,IAAM,eAAe,GAAG,CAAC,SAAS,EAAE,QAAQ,CAAU;AA4BtD;;;;AAIG;AACH,IAAA,UAAA,GAAA,aAAA,YAAA;EAyCE,SAAA,UAAA,CAAoC,OAAuB,EAAA;IAAvB,IAAA,CAAA,OAAO,GAAP,OAAO;EAAmB;EAnC9D,MAAA,CAAA,cAAA,CAAkB,UAAA,EAAA,SAAO,EAAA;IALzB;;;;AAIG;SACH,YAAA;MACE,OAAO,UAAU,CAAC,MAAM,CAAC,SAAS,CAAC;IACrC,CAAC;;;IAAA;EAOD,MAAA,CAAA,cAAA,CAAkB,UAAA,EAAA,QAAM,EAAA;IALxB;;;;AAIG;SACH,YAAA;MACE,OAAO,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC;IACpC,CAAC;;;IAAA;EAED;;;;;AAKG;EACW,UAAA,CAAA,MAAM,GAApB,UAAqB,OAAsB,EAAA;IACzC,OAAO,OAAO,YAAY,UAAU,GAAG,OAAO,GAAG,IAAI,UAAU,CAAC,UAAU,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;EAC5F,CAAC;EAEc,UAAA,CAAA,KAAK,GAApB,UAAqB,OAA0B,EAAA;IAC7C,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;MAC/B,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,OAAyB,CAAC,EAAE;QACxD,MAAM,IAAI,aAAA,CAAA,SAAS,CAAC;UAClB,IAAI,EAAE,aAAA,CAAA,aAAa,CAAC,gBAAgB;UACpC,OAAO,EAAE,mCAAA,CAAA,MAAA,CAAoC,OAAO;SACrD,CAAC;MACH;IACF;IACD,OAAO,OAAyB;EAClC,CAAC;EAID;;;;AAIG;EACI,UAAA,CAAA,SAAA,CAAA,MAAM,GAAb,YAAA;IACE;IACA,OAAO,IAAI,CAAC,OAAO;EACrB,CAAC;EAED;;;;AAIG;EACI,UAAA,CAAA,SAAA,CAAA,MAAM,GAAb,UAAc,OAAsB,EAAA;IAClC,OAAO,IAAI,CAAC,OAAO,KAAK,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO;EAC5D,CAAC;EAED;;;AAGG;EACI,UAAA,CAAA,SAAA,CAAA,MAAM,GAAb,YAAA;IACE,OAAO,IAAI,CAAC,OAAO;EACrB,CAAC;EAED;;;AAGG;EACI,UAAA,CAAA,SAAA,CAAA,QAAQ,GAAf,YAAA;IACE,OAAO,IAAI,CAAC,OAAO;EACrB,CAAC;EACH,OAAA,UAAC;AAAD,CAAC,EAAA;AA7EY,OAAA,CAAA,UAAA,GAAA,UAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SolNetwork = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar solNetworkNames = ['mainnet', 'devnet'];\n/**\n * A representation of a Solana network.\n *\n * @category DataType\n */\nvar SolNetwork = /** @class */ (function () {\n    function SolNetwork(network) {\n        this.network = network;\n    }\n    Object.defineProperty(SolNetwork, \"MAINNET\", {\n        /**\n         * Returns MAINNET network\n         *\n         * @example SolNetwork.MAINNET\n         */\n        get: function () {\n            return SolNetwork.create('mainnet');\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(SolNetwork, \"DEVNET\", {\n        /**\n         * Returns DEVNET network\n         *\n         * @example SolNetwork.MAINNET\n         */\n        get: function () {\n            return SolNetwork.create('devnet');\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Create a new instance of SolNetwork from any valid network input.\n     *\n     * @example `const network = SolNetwork.create(\"mainnet\")`\n     * @throws an error when a passed network is invalid.\n     */\n    SolNetwork.create = function (network) {\n        return network instanceof SolNetwork ? network : new SolNetwork(SolNetwork.parse(network));\n    };\n    SolNetwork.parse = function (network) {\n        if (typeof network === 'string') {\n            if (!solNetworkNames.includes(network)) {\n                throw new common_core_1.CoreError({\n                    code: common_core_1.CoreErrorCode.INVALID_ARGUMENT,\n                    message: \"Solana network is not supported: \".concat(network),\n                });\n            }\n        }\n        return network;\n    };\n    /**\n     * Formats the network to a specific format.\n     * Currently returns a string representing the network.\n     * @example network.format(); // \"mainnet\"\n     */\n    SolNetwork.prototype.format = function () {\n        // TODO: add `format` argument\n        return this.network;\n    };\n    /**\n     * Checks the equality of the current network with another Solana network.\n     * @example `network.equals(\"mainnet\")`\n     * @example `network.equals(SolNetwork.create(\"mainnet\"))`\n     */\n    SolNetwork.prototype.equals = function (network) {\n        return this.network === SolNetwork.create(network).network;\n    };\n    /**\n     * @returns a string representing the network.\n     * @example network.toJSON(); // \"mainnet\"\n     */\n    SolNetwork.prototype.toJSON = function () {\n        return this.network;\n    };\n    /**\n     * @returns a string representing the network.\n     * @example network.toString(); // \"mainnet\"\n     */\n    SolNetwork.prototype.toString = function () {\n        return this.network;\n    };\n    return SolNetwork;\n}());\nexports.SolNetwork = SolNetwork;\n//# sourceMappingURL=SolNetwork.js.map"]},"metadata":{},"sourceType":"script"}