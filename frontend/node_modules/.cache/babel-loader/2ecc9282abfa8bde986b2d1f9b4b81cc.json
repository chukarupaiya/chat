{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getNativeBalancesForAddressesOperation = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar dataTypes_1 = require(\"../../dataTypes\");\nvar EvmChainResolver_1 = require(\"../../EvmChainResolver\");\n/** Get the native balances for a set of specific addresses */\nexports.getNativeBalancesForAddressesOperation = {\n  method: 'GET',\n  name: 'getNativeBalancesForAddresses',\n  id: 'getNativeBalancesForAddresses',\n  groupName: 'balance',\n  urlPathPattern: '/wallets/balance',\n  urlSearchParamNames: ['chain', 'providerUrl', 'toBlock', 'walletAddresses'],\n  getRequestUrlParams: getRequestUrlParams,\n  serializeRequest: serializeRequest,\n  deserializeRequest: deserializeRequest,\n  deserializeResponse: deserializeResponse\n};\n// Methods\nfunction getRequestUrlParams(request, core) {\n  var _a;\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n    providerUrl: request.providerUrl,\n    to_block: (0, common_core_1.maybe)(request.toBlock, String),\n    wallet_addresses: (_a = request.walletAddresses) === null || _a === void 0 ? void 0 : _a.map(function (address) {\n      return dataTypes_1.EvmAddress.create(address, core).checksum;\n    })\n  };\n}\nfunction deserializeResponse(jsonResponse, request, core) {\n  return (jsonResponse !== null && jsonResponse !== void 0 ? jsonResponse : []).map(function (chainBalances) {\n    return {\n      chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core),\n      blockNumber: chainBalances.block_number,\n      blockTimestamp: chainBalances.block_timestamp,\n      totalBalance: dataTypes_1.EvmNative.create(chainBalances.total_balance, 'wei'),\n      walletBalances: chainBalances.wallet_balances.map(function (walletBalance) {\n        return {\n          address: dataTypes_1.EvmAddress.create(walletBalance.address, core),\n          balance: dataTypes_1.EvmNative.create(walletBalance.balance, 'wei')\n        };\n      })\n    };\n  });\n}\nfunction serializeRequest(request, core) {\n  var _a;\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n    providerUrl: request.providerUrl,\n    toBlock: request.toBlock,\n    walletAddresses: (_a = request.walletAddresses) === null || _a === void 0 ? void 0 : _a.map(function (address) {\n      return dataTypes_1.EvmAddress.create(address, core).checksum;\n    })\n  };\n}\nfunction deserializeRequest(jsonRequest, core) {\n  var _a;\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(jsonRequest.chain, core),\n    providerUrl: jsonRequest.providerUrl,\n    toBlock: jsonRequest.toBlock,\n    walletAddresses: (_a = jsonRequest.walletAddresses) === null || _a === void 0 ? void 0 : _a.map(function (address) {\n      return dataTypes_1.EvmAddress.create(address, core);\n    })\n  };\n}","map":{"version":3,"sources":["../../../src/operations/balance/getNativeBalancesForAddressesOperation.ts"],"names":[],"mappings":";;;;;;AAAA,IAAA,aAAA,GAAA,OAAA,CAAA,0BAAA,CAAA;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;AACA,IAAA,kBAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;AA2BA;AACa,OAAA,CAAA,sCAAsC,GAK/C;EACF,MAAM,EAAE,KAAK;EACb,IAAI,EAAE,+BAA+B;EACrC,EAAE,EAAE,+BAA+B;EACnC,SAAS,EAAE,SAAS;EACpB,cAAc,EAAE,kBAAkB;EAClC,mBAAmB,EAAE,CAAC,OAAO,EAAE,aAAa,EAAE,SAAS,EAAE,iBAAiB,CAAC;EAE3E,mBAAmB,EAAA,mBAAA;EACnB,gBAAgB,EAAA,gBAAA;EAChB,kBAAkB,EAAA,kBAAA;EAClB,mBAAmB,EAAA;CACpB;AAED;AAEA,SAAS,mBAAmB,CAAC,OAA6C,EAAE,IAAU,EAAA;;EACpF,OAAO;IACL,KAAK,EAAE,kBAAA,CAAA,gBAAgB,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,MAAM;IAC3D,WAAW,EAAE,OAAO,CAAC,WAAW;IAChC,QAAQ,EAAE,CAAA,CAAA,EAAA,aAAA,CAAA,KAAK,EAAC,OAAO,CAAC,OAAO,EAAE,MAAM,CAAC;IACxC,gBAAgB,EAAE,CAAA,EAAA,GAAA,OAAO,CAAC,eAAe,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,GAAG,CAAC,UAAC,OAAO,EAAA;MAAK,OAAA,WAAA,CAAA,UAAU,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,QAAQ;IAAzC,CAAyC;GACtG;AACH;AAEA,SAAS,mBAAmB,CAC1B,YAAuD,EACvD,OAA6C,EAC7C,IAAU,EAAA;EAEV,OAAO,CAAC,YAAY,KAAA,IAAA,IAAZ,YAAY,KAAA,KAAA,CAAA,GAAZ,YAAY,GAAI,EAAE,EAAE,GAAG,CAAC,UAAC,aAAa,EAAA;IAAK,OAAC;MAClD,KAAK,EAAE,kBAAA,CAAA,gBAAgB,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC;MACpD,WAAW,EAAE,aAAa,CAAC,YAAY;MACvC,cAAc,EAAE,aAAa,CAAC,eAAe;MAC7C,YAAY,EAAE,WAAA,CAAA,SAAS,CAAC,MAAM,CAAC,aAAa,CAAC,aAAa,EAAE,KAAK,CAAC;MAClE,cAAc,EAAE,aAAa,CAAC,eAAe,CAAC,GAAG,CAAC,UAAC,aAAa,EAAA;QAAK,OAAC;UACpE,OAAO,EAAE,WAAA,CAAA,UAAU,CAAC,MAAM,CAAC,aAAa,CAAC,OAAO,EAAE,IAAI,CAAC;UACvD,OAAO,EAAE,WAAA,CAAA,SAAS,CAAC,MAAM,CAAC,aAAa,CAAC,OAAO,EAAE,KAAK;SACvD;MAHoE,CAGnE;KACH;EATkD,CASjD,CAAC;AACL;AAEA,SAAS,gBAAgB,CAAC,OAA6C,EAAE,IAAU,EAAA;;EACjF,OAAO;IACL,KAAK,EAAE,kBAAA,CAAA,gBAAgB,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,MAAM;IAC3D,WAAW,EAAE,OAAO,CAAC,WAAW;IAChC,OAAO,EAAE,OAAO,CAAC,OAAO;IACxB,eAAe,EAAE,CAAA,EAAA,GAAA,OAAO,CAAC,eAAe,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,GAAG,CAAC,UAAC,OAAO,EAAA;MAAK,OAAA,WAAA,CAAA,UAAU,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,QAAQ;IAAzC,CAAyC;GACrG;AACH;AAEA,SAAS,kBAAkB,CACzB,WAAqD,EACrD,IAAU,EAAA;;EAEV,OAAO;IACL,KAAK,EAAE,kBAAA,CAAA,gBAAgB,CAAC,OAAO,CAAC,WAAW,CAAC,KAAK,EAAE,IAAI,CAAC;IACxD,WAAW,EAAE,WAAW,CAAC,WAAW;IACpC,OAAO,EAAE,WAAW,CAAC,OAAO;IAC5B,eAAe,EAAE,CAAA,EAAA,GAAA,WAAW,CAAC,eAAe,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,GAAG,CAAC,UAAC,OAAO,EAAA;MAAK,OAAA,WAAA,CAAA,UAAU,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC;IAAhC,CAAgC;GAChG;AACH","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getNativeBalancesForAddressesOperation = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar dataTypes_1 = require(\"../../dataTypes\");\nvar EvmChainResolver_1 = require(\"../../EvmChainResolver\");\n/** Get the native balances for a set of specific addresses */\nexports.getNativeBalancesForAddressesOperation = {\n    method: 'GET',\n    name: 'getNativeBalancesForAddresses',\n    id: 'getNativeBalancesForAddresses',\n    groupName: 'balance',\n    urlPathPattern: '/wallets/balance',\n    urlSearchParamNames: ['chain', 'providerUrl', 'toBlock', 'walletAddresses'],\n    getRequestUrlParams: getRequestUrlParams,\n    serializeRequest: serializeRequest,\n    deserializeRequest: deserializeRequest,\n    deserializeResponse: deserializeResponse,\n};\n// Methods\nfunction getRequestUrlParams(request, core) {\n    var _a;\n    return {\n        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n        providerUrl: request.providerUrl,\n        to_block: (0, common_core_1.maybe)(request.toBlock, String),\n        wallet_addresses: (_a = request.walletAddresses) === null || _a === void 0 ? void 0 : _a.map(function (address) { return dataTypes_1.EvmAddress.create(address, core).checksum; }),\n    };\n}\nfunction deserializeResponse(jsonResponse, request, core) {\n    return (jsonResponse !== null && jsonResponse !== void 0 ? jsonResponse : []).map(function (chainBalances) { return ({\n        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core),\n        blockNumber: chainBalances.block_number,\n        blockTimestamp: chainBalances.block_timestamp,\n        totalBalance: dataTypes_1.EvmNative.create(chainBalances.total_balance, 'wei'),\n        walletBalances: chainBalances.wallet_balances.map(function (walletBalance) { return ({\n            address: dataTypes_1.EvmAddress.create(walletBalance.address, core),\n            balance: dataTypes_1.EvmNative.create(walletBalance.balance, 'wei'),\n        }); }),\n    }); });\n}\nfunction serializeRequest(request, core) {\n    var _a;\n    return {\n        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n        providerUrl: request.providerUrl,\n        toBlock: request.toBlock,\n        walletAddresses: (_a = request.walletAddresses) === null || _a === void 0 ? void 0 : _a.map(function (address) { return dataTypes_1.EvmAddress.create(address, core).checksum; }),\n    };\n}\nfunction deserializeRequest(jsonRequest, core) {\n    var _a;\n    return {\n        chain: EvmChainResolver_1.EvmChainResolver.resolve(jsonRequest.chain, core),\n        providerUrl: jsonRequest.providerUrl,\n        toBlock: jsonRequest.toBlock,\n        walletAddresses: (_a = jsonRequest.walletAddresses) === null || _a === void 0 ? void 0 : _a.map(function (address) { return dataTypes_1.EvmAddress.create(address, core); }),\n    };\n}\n//# sourceMappingURL=getNativeBalancesForAddressesOperation.js.map"]},"metadata":{},"sourceType":"script"}