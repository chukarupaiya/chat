{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.rlphash = exports.ripemd160FromArray = exports.ripemd160FromString = exports.ripemd160 = exports.sha256FromArray = exports.sha256FromString = exports.sha256 = exports.keccakFromArray = exports.keccakFromHexString = exports.keccakFromString = exports.keccak256 = exports.keccak = void 0;\nvar keccak_1 = require(\"ethereum-cryptography/keccak\");\nvar createHash = require('create-hash');\nvar externals_1 = require(\"./externals\");\nvar bytes_1 = require(\"./bytes\");\nvar helpers_1 = require(\"./helpers\");\n/**\n * Creates Keccak hash of a Buffer input\n * @param a The input data (Buffer)\n * @param bits (number = 256) The Keccak width\n */\nvar keccak = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n  (0, helpers_1.assertIsBuffer)(a);\n  switch (bits) {\n    case 224:\n      {\n        return (0, keccak_1.keccak224)(a);\n      }\n    case 256:\n      {\n        return (0, keccak_1.keccak256)(a);\n      }\n    case 384:\n      {\n        return (0, keccak_1.keccak384)(a);\n      }\n    case 512:\n      {\n        return (0, keccak_1.keccak512)(a);\n      }\n    default:\n      {\n        throw new Error(\"Invald algorithm: keccak\".concat(bits));\n      }\n  }\n};\nexports.keccak = keccak;\n/**\n * Creates Keccak-256 hash of the input, alias for keccak(a, 256).\n * @param a The input data (Buffer)\n */\nvar keccak256 = function (a) {\n  return (0, exports.keccak)(a);\n};\nexports.keccak256 = keccak256;\n/**\n * Creates Keccak hash of a utf-8 string input\n * @param a The input data (String)\n * @param bits (number = 256) The Keccak width\n */\nvar keccakFromString = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n  (0, helpers_1.assertIsString)(a);\n  var buf = Buffer.from(a, 'utf8');\n  return (0, exports.keccak)(buf, bits);\n};\nexports.keccakFromString = keccakFromString;\n/**\n * Creates Keccak hash of an 0x-prefixed string input\n * @param a The input data (String)\n * @param bits (number = 256) The Keccak width\n */\nvar keccakFromHexString = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n  (0, helpers_1.assertIsHexString)(a);\n  return (0, exports.keccak)((0, bytes_1.toBuffer)(a), bits);\n};\nexports.keccakFromHexString = keccakFromHexString;\n/**\n * Creates Keccak hash of a number array input\n * @param a The input data (number[])\n * @param bits (number = 256) The Keccak width\n */\nvar keccakFromArray = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n  (0, helpers_1.assertIsArray)(a);\n  return (0, exports.keccak)((0, bytes_1.toBuffer)(a), bits);\n};\nexports.keccakFromArray = keccakFromArray;\n/**\n * Creates SHA256 hash of an input.\n * @param  a The input data (Buffer|Array|String)\n */\nvar _sha256 = function (a) {\n  a = (0, bytes_1.toBuffer)(a);\n  return createHash('sha256').update(a).digest();\n};\n/**\n * Creates SHA256 hash of a Buffer input.\n * @param a The input data (Buffer)\n */\nvar sha256 = function (a) {\n  (0, helpers_1.assertIsBuffer)(a);\n  return _sha256(a);\n};\nexports.sha256 = sha256;\n/**\n * Creates SHA256 hash of a string input.\n * @param a The input data (string)\n */\nvar sha256FromString = function (a) {\n  (0, helpers_1.assertIsString)(a);\n  return _sha256(a);\n};\nexports.sha256FromString = sha256FromString;\n/**\n * Creates SHA256 hash of a number[] input.\n * @param a The input data (number[])\n */\nvar sha256FromArray = function (a) {\n  (0, helpers_1.assertIsArray)(a);\n  return _sha256(a);\n};\nexports.sha256FromArray = sha256FromArray;\n/**\n * Creates RIPEMD160 hash of the input.\n * @param a The input data (Buffer|Array|String|Number)\n * @param padded Whether it should be padded to 256 bits or not\n */\nvar _ripemd160 = function (a, padded) {\n  a = (0, bytes_1.toBuffer)(a);\n  var hash = createHash('rmd160').update(a).digest();\n  if (padded === true) {\n    return (0, bytes_1.setLengthLeft)(hash, 32);\n  } else {\n    return hash;\n  }\n};\n/**\n * Creates RIPEMD160 hash of a Buffer input.\n * @param a The input data (Buffer)\n * @param padded Whether it should be padded to 256 bits or not\n */\nvar ripemd160 = function (a, padded) {\n  (0, helpers_1.assertIsBuffer)(a);\n  return _ripemd160(a, padded);\n};\nexports.ripemd160 = ripemd160;\n/**\n * Creates RIPEMD160 hash of a string input.\n * @param a The input data (String)\n * @param padded Whether it should be padded to 256 bits or not\n */\nvar ripemd160FromString = function (a, padded) {\n  (0, helpers_1.assertIsString)(a);\n  return _ripemd160(a, padded);\n};\nexports.ripemd160FromString = ripemd160FromString;\n/**\n * Creates RIPEMD160 hash of a number[] input.\n * @param a The input data (number[])\n * @param padded Whether it should be padded to 256 bits or not\n */\nvar ripemd160FromArray = function (a, padded) {\n  (0, helpers_1.assertIsArray)(a);\n  return _ripemd160(a, padded);\n};\nexports.ripemd160FromArray = ripemd160FromArray;\n/**\n * Creates SHA-3 hash of the RLP encoded version of the input.\n * @param a The input data\n */\nvar rlphash = function (a) {\n  return (0, exports.keccak)(externals_1.rlp.encode(a));\n};\nexports.rlphash = rlphash;","map":{"version":3,"sources":["../src/hash.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.rlphash = exports.ripemd160FromArray = exports.ripemd160FromString = exports.ripemd160 = exports.sha256FromArray = exports.sha256FromString = exports.sha256 = exports.keccakFromArray = exports.keccakFromHexString = exports.keccakFromString = exports.keccak256 = exports.keccak = void 0;\nvar keccak_1 = require(\"ethereum-cryptography/keccak\");\nvar createHash = require('create-hash');\nvar externals_1 = require(\"./externals\");\nvar bytes_1 = require(\"./bytes\");\nvar helpers_1 = require(\"./helpers\");\n/**\n * Creates Keccak hash of a Buffer input\n * @param a The input data (Buffer)\n * @param bits (number = 256) The Keccak width\n */\nvar keccak = function (a, bits) {\n    if (bits === void 0) { bits = 256; }\n    (0, helpers_1.assertIsBuffer)(a);\n    switch (bits) {\n        case 224: {\n            return (0, keccak_1.keccak224)(a);\n        }\n        case 256: {\n            return (0, keccak_1.keccak256)(a);\n        }\n        case 384: {\n            return (0, keccak_1.keccak384)(a);\n        }\n        case 512: {\n            return (0, keccak_1.keccak512)(a);\n        }\n        default: {\n            throw new Error(\"Invald algorithm: keccak\".concat(bits));\n        }\n    }\n};\nexports.keccak = keccak;\n/**\n * Creates Keccak-256 hash of the input, alias for keccak(a, 256).\n * @param a The input data (Buffer)\n */\nvar keccak256 = function (a) {\n    return (0, exports.keccak)(a);\n};\nexports.keccak256 = keccak256;\n/**\n * Creates Keccak hash of a utf-8 string input\n * @param a The input data (String)\n * @param bits (number = 256) The Keccak width\n */\nvar keccakFromString = function (a, bits) {\n    if (bits === void 0) { bits = 256; }\n    (0, helpers_1.assertIsString)(a);\n    var buf = Buffer.from(a, 'utf8');\n    return (0, exports.keccak)(buf, bits);\n};\nexports.keccakFromString = keccakFromString;\n/**\n * Creates Keccak hash of an 0x-prefixed string input\n * @param a The input data (String)\n * @param bits (number = 256) The Keccak width\n */\nvar keccakFromHexString = function (a, bits) {\n    if (bits === void 0) { bits = 256; }\n    (0, helpers_1.assertIsHexString)(a);\n    return (0, exports.keccak)((0, bytes_1.toBuffer)(a), bits);\n};\nexports.keccakFromHexString = keccakFromHexString;\n/**\n * Creates Keccak hash of a number array input\n * @param a The input data (number[])\n * @param bits (number = 256) The Keccak width\n */\nvar keccakFromArray = function (a, bits) {\n    if (bits === void 0) { bits = 256; }\n    (0, helpers_1.assertIsArray)(a);\n    return (0, exports.keccak)((0, bytes_1.toBuffer)(a), bits);\n};\nexports.keccakFromArray = keccakFromArray;\n/**\n * Creates SHA256 hash of an input.\n * @param  a The input data (Buffer|Array|String)\n */\nvar _sha256 = function (a) {\n    a = (0, bytes_1.toBuffer)(a);\n    return createHash('sha256').update(a).digest();\n};\n/**\n * Creates SHA256 hash of a Buffer input.\n * @param a The input data (Buffer)\n */\nvar sha256 = function (a) {\n    (0, helpers_1.assertIsBuffer)(a);\n    return _sha256(a);\n};\nexports.sha256 = sha256;\n/**\n * Creates SHA256 hash of a string input.\n * @param a The input data (string)\n */\nvar sha256FromString = function (a) {\n    (0, helpers_1.assertIsString)(a);\n    return _sha256(a);\n};\nexports.sha256FromString = sha256FromString;\n/**\n * Creates SHA256 hash of a number[] input.\n * @param a The input data (number[])\n */\nvar sha256FromArray = function (a) {\n    (0, helpers_1.assertIsArray)(a);\n    return _sha256(a);\n};\nexports.sha256FromArray = sha256FromArray;\n/**\n * Creates RIPEMD160 hash of the input.\n * @param a The input data (Buffer|Array|String|Number)\n * @param padded Whether it should be padded to 256 bits or not\n */\nvar _ripemd160 = function (a, padded) {\n    a = (0, bytes_1.toBuffer)(a);\n    var hash = createHash('rmd160').update(a).digest();\n    if (padded === true) {\n        return (0, bytes_1.setLengthLeft)(hash, 32);\n    }\n    else {\n        return hash;\n    }\n};\n/**\n * Creates RIPEMD160 hash of a Buffer input.\n * @param a The input data (Buffer)\n * @param padded Whether it should be padded to 256 bits or not\n */\nvar ripemd160 = function (a, padded) {\n    (0, helpers_1.assertIsBuffer)(a);\n    return _ripemd160(a, padded);\n};\nexports.ripemd160 = ripemd160;\n/**\n * Creates RIPEMD160 hash of a string input.\n * @param a The input data (String)\n * @param padded Whether it should be padded to 256 bits or not\n */\nvar ripemd160FromString = function (a, padded) {\n    (0, helpers_1.assertIsString)(a);\n    return _ripemd160(a, padded);\n};\nexports.ripemd160FromString = ripemd160FromString;\n/**\n * Creates RIPEMD160 hash of a number[] input.\n * @param a The input data (number[])\n * @param padded Whether it should be padded to 256 bits or not\n */\nvar ripemd160FromArray = function (a, padded) {\n    (0, helpers_1.assertIsArray)(a);\n    return _ripemd160(a, padded);\n};\nexports.ripemd160FromArray = ripemd160FromArray;\n/**\n * Creates SHA-3 hash of the RLP encoded version of the input.\n * @param a The input data\n */\nvar rlphash = function (a) {\n    return (0, exports.keccak)(externals_1.rlp.encode(a));\n};\nexports.rlphash = rlphash;\n//# sourceMappingURL=hash.js.map"]},"metadata":{},"sourceType":"script"}