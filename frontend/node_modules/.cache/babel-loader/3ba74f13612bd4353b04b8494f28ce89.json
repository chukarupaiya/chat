{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StreamEvmTransactionLog = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar common_evm_utils_1 = require(\"@moralisweb3/common-evm-utils\");\nvar StreamTriggerOutput_1 = require(\"../StreamTriggerOutput\");\n/**\n * The StreamEvmTransactionLog class is a representation of a transaction log that is returned by the Moralis Stream API\n *\n * @category DataType\n */\nvar StreamEvmTransactionLog = /** @class */function () {\n  function StreamEvmTransactionLog(_a, core) {\n    var data = __rest(_a, []);\n    this._data = StreamEvmTransactionLog.parse(data, core);\n  }\n  /**\n   * Create a new instance of StreamEvmTransactionLog\n   *\n   * @param data - the StreamEvmTransactionLogish type\n   * @param core - the Core instance\n   * @example\n   * ```ts\n   * const transactionLog = StreamEvmTransactionLog.create(data);\n   * ```\n   * @returns an instance of StreamEvmTransactionLog\n   */\n  StreamEvmTransactionLog.create = function (data, core) {\n    if (data instanceof StreamEvmTransactionLog) {\n      return data;\n    }\n    var finalCore = core !== null && core !== void 0 ? core : common_core_1.CoreProvider.getDefault();\n    return new StreamEvmTransactionLog(data, finalCore);\n  };\n  StreamEvmTransactionLog.parse = function (data, core) {\n    return __assign(__assign({}, data), {\n      chain: common_evm_utils_1.EvmChain.create(data.chain, core),\n      logIndex: +data.logIndex,\n      address: common_evm_utils_1.EvmAddress.create(data.address, core),\n      topic0: (0, common_core_1.maybe)(data.topic0),\n      topic1: (0, common_core_1.maybe)(data.topic1),\n      topic2: (0, common_core_1.maybe)(data.topic2),\n      topic3: (0, common_core_1.maybe)(data.topic3),\n      triggers: (0, common_core_1.maybe)(data.triggers, function (triggers) {\n        return triggers.map(function (trigger) {\n          return StreamTriggerOutput_1.StreamTriggerOutput.create(trigger, core);\n        });\n      })\n    });\n  };\n  /**\n   * Compares two StreamEvmTransactionLog data. It checks a deep equality check of both values.\n   * @param valueA - the first StreamEvmTransactionLogish data to compare\n   * @param valueB - the second StreamEvmTransactionLogish data to compare\n   * @returns true if the values are equal, false otherwise\n   * @example\n   * ```ts\n   *  StreamEvmTransactionLog.equals(valueA, valueB);\n   * ```\n   */\n  StreamEvmTransactionLog.equals = function (valueA, valueB) {\n    var _a, _b;\n    var transactionLogA = StreamEvmTransactionLog.create(valueA);\n    var transactionLogB = StreamEvmTransactionLog.create(valueB);\n    if (!transactionLogA.chain.equals(transactionLogB.chain)) {\n      return false;\n    }\n    if (transactionLogA.transactionHash !== transactionLogB.transactionHash) {\n      return false;\n    }\n    if (transactionLogA.logIndex !== transactionLogB.logIndex) {\n      return false;\n    }\n    if (((_a = transactionLogA.triggers) === null || _a === void 0 ? void 0 : _a.length) !== ((_b = transactionLogB.triggers) === null || _b === void 0 ? void 0 : _b.length) || !StreamTriggerOutput_1.StreamTriggerOutput.arrayEquals(transactionLogA.triggers || [], transactionLogB.triggers || [])) {\n      return false;\n    }\n    return true;\n  };\n  /**\n   * Compares an StreamEvmTransactionLogish data to this StreamEvmTransactionLog instance.\n   * @param value - the value to compare\n   * @returns true if the value is equal to the current instance, false otherwise\n   * @example\n   * ```ts\n   * transactionLog.equals(value);\n   * ```\n   */\n  StreamEvmTransactionLog.prototype.equals = function (value) {\n    return StreamEvmTransactionLog.equals(this, value);\n  };\n  /**\n   * Converts the StreamEvmTransactionLog instance to a JSON object.\n   * @returns JSON object of the StreamEvmTransactionLog instance\n   * @example `transactionLog.toJSON()`\n   */\n  StreamEvmTransactionLog.prototype.toJSON = function () {\n    var _a = this._data,\n      chain = _a.chain,\n      address = _a.address,\n      triggers = _a.triggers,\n      data = __rest(_a, [\"chain\", \"address\", \"triggers\"]);\n    return __assign(__assign({}, data), {\n      chain: chain.format(),\n      address: address.format(),\n      triggers: triggers === null || triggers === void 0 ? void 0 : triggers.map(function (trigger) {\n        return trigger.format();\n      })\n    });\n  };\n  /**\n   * Converts the StreamEvmTransactionLog instance to a JSON object.\n   * @returns JSON object of the StreamEvmTransactionLog instance\n   * @example `transactionLog.toJSON()`\n   */\n  StreamEvmTransactionLog.prototype.format = function () {\n    return this.toJSON();\n  };\n  Object.defineProperty(StreamEvmTransactionLog.prototype, \"chain\", {\n    get: function () {\n      return this._data.chain;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StreamEvmTransactionLog.prototype, \"logIndex\", {\n    get: function () {\n      return this._data.logIndex;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StreamEvmTransactionLog.prototype, \"transactionHash\", {\n    get: function () {\n      return this._data.transactionHash;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StreamEvmTransactionLog.prototype, \"address\", {\n    get: function () {\n      return this._data.address;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StreamEvmTransactionLog.prototype, \"data\", {\n    get: function () {\n      return this._data.data;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StreamEvmTransactionLog.prototype, \"topic0\", {\n    get: function () {\n      return this._data.topic0;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StreamEvmTransactionLog.prototype, \"topic1\", {\n    get: function () {\n      return this._data.topic1;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StreamEvmTransactionLog.prototype, \"topic2\", {\n    get: function () {\n      return this._data.topic2;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StreamEvmTransactionLog.prototype, \"topic3\", {\n    get: function () {\n      return this._data.topic3;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StreamEvmTransactionLog.prototype, \"triggers\", {\n    get: function () {\n      return this._data.triggers;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return StreamEvmTransactionLog;\n}();\nexports.StreamEvmTransactionLog = StreamEvmTransactionLog;","map":{"version":3,"sources":["../../../src/dataTypes/StreamEvmTransactionLog/StreamEvmTransactionLog.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StreamEvmTransactionLog = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar common_evm_utils_1 = require(\"@moralisweb3/common-evm-utils\");\nvar StreamTriggerOutput_1 = require(\"../StreamTriggerOutput\");\n/**\n * The StreamEvmTransactionLog class is a representation of a transaction log that is returned by the Moralis Stream API\n *\n * @category DataType\n */\nvar StreamEvmTransactionLog = /** @class */ (function () {\n    function StreamEvmTransactionLog(_a, core) {\n        var data = __rest(_a, []);\n        this._data = StreamEvmTransactionLog.parse(data, core);\n    }\n    /**\n     * Create a new instance of StreamEvmTransactionLog\n     *\n     * @param data - the StreamEvmTransactionLogish type\n     * @param core - the Core instance\n     * @example\n     * ```ts\n     * const transactionLog = StreamEvmTransactionLog.create(data);\n     * ```\n     * @returns an instance of StreamEvmTransactionLog\n     */\n    StreamEvmTransactionLog.create = function (data, core) {\n        if (data instanceof StreamEvmTransactionLog) {\n            return data;\n        }\n        var finalCore = core !== null && core !== void 0 ? core : common_core_1.CoreProvider.getDefault();\n        return new StreamEvmTransactionLog(data, finalCore);\n    };\n    StreamEvmTransactionLog.parse = function (data, core) {\n        return __assign(__assign({}, data), { chain: common_evm_utils_1.EvmChain.create(data.chain, core), logIndex: +data.logIndex, address: common_evm_utils_1.EvmAddress.create(data.address, core), topic0: (0, common_core_1.maybe)(data.topic0), topic1: (0, common_core_1.maybe)(data.topic1), topic2: (0, common_core_1.maybe)(data.topic2), topic3: (0, common_core_1.maybe)(data.topic3), triggers: (0, common_core_1.maybe)(data.triggers, function (triggers) {\n                return triggers.map(function (trigger) { return StreamTriggerOutput_1.StreamTriggerOutput.create(trigger, core); });\n            }) });\n    };\n    /**\n     * Compares two StreamEvmTransactionLog data. It checks a deep equality check of both values.\n     * @param valueA - the first StreamEvmTransactionLogish data to compare\n     * @param valueB - the second StreamEvmTransactionLogish data to compare\n     * @returns true if the values are equal, false otherwise\n     * @example\n     * ```ts\n     *  StreamEvmTransactionLog.equals(valueA, valueB);\n     * ```\n     */\n    StreamEvmTransactionLog.equals = function (valueA, valueB) {\n        var _a, _b;\n        var transactionLogA = StreamEvmTransactionLog.create(valueA);\n        var transactionLogB = StreamEvmTransactionLog.create(valueB);\n        if (!transactionLogA.chain.equals(transactionLogB.chain)) {\n            return false;\n        }\n        if (transactionLogA.transactionHash !== transactionLogB.transactionHash) {\n            return false;\n        }\n        if (transactionLogA.logIndex !== transactionLogB.logIndex) {\n            return false;\n        }\n        if (((_a = transactionLogA.triggers) === null || _a === void 0 ? void 0 : _a.length) !== ((_b = transactionLogB.triggers) === null || _b === void 0 ? void 0 : _b.length) ||\n            !StreamTriggerOutput_1.StreamTriggerOutput.arrayEquals(transactionLogA.triggers || [], transactionLogB.triggers || [])) {\n            return false;\n        }\n        return true;\n    };\n    /**\n     * Compares an StreamEvmTransactionLogish data to this StreamEvmTransactionLog instance.\n     * @param value - the value to compare\n     * @returns true if the value is equal to the current instance, false otherwise\n     * @example\n     * ```ts\n     * transactionLog.equals(value);\n     * ```\n     */\n    StreamEvmTransactionLog.prototype.equals = function (value) {\n        return StreamEvmTransactionLog.equals(this, value);\n    };\n    /**\n     * Converts the StreamEvmTransactionLog instance to a JSON object.\n     * @returns JSON object of the StreamEvmTransactionLog instance\n     * @example `transactionLog.toJSON()`\n     */\n    StreamEvmTransactionLog.prototype.toJSON = function () {\n        var _a = this._data, chain = _a.chain, address = _a.address, triggers = _a.triggers, data = __rest(_a, [\"chain\", \"address\", \"triggers\"]);\n        return __assign(__assign({}, data), { chain: chain.format(), address: address.format(), triggers: triggers === null || triggers === void 0 ? void 0 : triggers.map(function (trigger) { return trigger.format(); }) });\n    };\n    /**\n     * Converts the StreamEvmTransactionLog instance to a JSON object.\n     * @returns JSON object of the StreamEvmTransactionLog instance\n     * @example `transactionLog.toJSON()`\n     */\n    StreamEvmTransactionLog.prototype.format = function () {\n        return this.toJSON();\n    };\n    Object.defineProperty(StreamEvmTransactionLog.prototype, \"chain\", {\n        get: function () {\n            return this._data.chain;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StreamEvmTransactionLog.prototype, \"logIndex\", {\n        get: function () {\n            return this._data.logIndex;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StreamEvmTransactionLog.prototype, \"transactionHash\", {\n        get: function () {\n            return this._data.transactionHash;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StreamEvmTransactionLog.prototype, \"address\", {\n        get: function () {\n            return this._data.address;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StreamEvmTransactionLog.prototype, \"data\", {\n        get: function () {\n            return this._data.data;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StreamEvmTransactionLog.prototype, \"topic0\", {\n        get: function () {\n            return this._data.topic0;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StreamEvmTransactionLog.prototype, \"topic1\", {\n        get: function () {\n            return this._data.topic1;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StreamEvmTransactionLog.prototype, \"topic2\", {\n        get: function () {\n            return this._data.topic2;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StreamEvmTransactionLog.prototype, \"topic3\", {\n        get: function () {\n            return this._data.topic3;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StreamEvmTransactionLog.prototype, \"triggers\", {\n        get: function () {\n            return this._data.triggers;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return StreamEvmTransactionLog;\n}());\nexports.StreamEvmTransactionLog = StreamEvmTransactionLog;\n//# sourceMappingURL=StreamEvmTransactionLog.js.map"]},"metadata":{},"sourceType":"script"}