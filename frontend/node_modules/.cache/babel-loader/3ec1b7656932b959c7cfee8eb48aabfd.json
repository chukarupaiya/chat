{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EvmAddress = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar address_1 = require(\"@ethersproject/address\");\nvar CommonEvmUtilsConfig_1 = require(\"../../config/CommonEvmUtilsConfig\");\n/**\n * A representation of an address on the EVM network.\n *\n * Use this class any time you work with an address, as it will provide utilities to validate the address,\n * and format it to lowercase and checksum format.\n *\n * @category DataType\n */\nvar EvmAddress = /** @class */function () {\n  function EvmAddress(address, config) {\n    this.config = config;\n    this._value = EvmAddress.parse(address);\n  }\n  Object.defineProperty(EvmAddress, \"ZERO_ADDRESS\", {\n    /**\n     * @returns EvmAddress instance of the zero address: \"0x0000000000000000000000000000000000000000\"\n     * @example `EvmAddress.ZERO_ADDRESS`\n     */\n    get: function () {\n      return EvmAddress.create('0x0000000000000000000000000000000000000000');\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Create a new instance of EvmAddress from any valid address input\n   *\n   * @example\n   * ```\n   * const address = EvmAddress.create(\"0xfb6916095ca1df60bb79ce92ce3ea74c37c5d359\")\n   * const address = EvmAddress.create(\"0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359\")\n   * const address = EvmAddress.ZERO_ADDRESS\n   * ```\n   */\n  EvmAddress.create = function (address, core) {\n    if (address instanceof EvmAddress) {\n      return address;\n    }\n    var finalCore = core || common_core_1.CoreProvider.getDefault();\n    return new EvmAddress(address, finalCore.config);\n  };\n  EvmAddress.parse = function (address) {\n    if (!(0, address_1.isAddress)(address)) {\n      throw new common_core_1.CoreError({\n        code: common_core_1.CoreErrorCode.INVALID_ARGUMENT,\n        message: 'Invalid address provided'\n      });\n    }\n    return (0, address_1.getAddress)(address);\n  };\n  /**\n   * Check the equality between two Evm addresses\n   * @example `EvmAddress.equals(\"0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359\", \"0xfb6916095ca1df60bb79ce92ce3ea74c37c5d359\")`\n   */\n  EvmAddress.equals = function (addressA, addressB) {\n    return EvmAddress.create(addressA)._value === EvmAddress.create(addressB)._value;\n  };\n  /**\n   * Checks the equality of the current address with another evm address\n   * @example `address.equals(\"0xfb6916095ca1df60bb79ce92ce3ea74c37c5d359\")`\n   */\n  EvmAddress.prototype.equals = function (address) {\n    return EvmAddress.equals(this, address);\n  };\n  /**\n   * Formats the address to a specific format.\n   * If no formatStyle is provided as argument, it will use the `formatEvmAddress` set in the config.\n   * @example `address.format() // \"0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359\"`\n   */\n  EvmAddress.prototype.format = function (style) {\n    var formatStyle = style !== null && style !== void 0 ? style : this.config.get(CommonEvmUtilsConfig_1.CommonEvmUtilsConfig.formatEvmAddress);\n    if (formatStyle === 'checksum') {\n      return this.checksum;\n    }\n    if (formatStyle === 'lowercase') {\n      return this.lowercase;\n    }\n    throw new common_core_1.CoreError({\n      code: common_core_1.CoreErrorCode.INVALID_ARGUMENT,\n      message: 'Cannot format address, invalid config.formatAddress'\n    });\n  };\n  Object.defineProperty(EvmAddress.prototype, \"checksum\", {\n    /**\n     * @returns the address value in checksum (EIP-55) format (see https://eips.ethereum.org/EIPS/eip-55)\n     * @example `address.checksum // \"0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359\"`\n     */\n    get: function () {\n      return this._value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmAddress.prototype, \"lowercase\", {\n    /**\n     * @returns the address value in lowercase format\n     * @example `address.lowercase // \"0xfb6916095ca1df60bb79ce92ce3ea74c37c5d359\"`\n     */\n    get: function () {\n      return this._value.toLowerCase();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return EvmAddress;\n}();\nexports.EvmAddress = EvmAddress;","map":{"version":3,"sources":["../../../src/dataTypes/EvmAddress/EvmAddress.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EvmAddress = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar address_1 = require(\"@ethersproject/address\");\nvar CommonEvmUtilsConfig_1 = require(\"../../config/CommonEvmUtilsConfig\");\n/**\n * A representation of an address on the EVM network.\n *\n * Use this class any time you work with an address, as it will provide utilities to validate the address,\n * and format it to lowercase and checksum format.\n *\n * @category DataType\n */\nvar EvmAddress = /** @class */ (function () {\n    function EvmAddress(address, config) {\n        this.config = config;\n        this._value = EvmAddress.parse(address);\n    }\n    Object.defineProperty(EvmAddress, \"ZERO_ADDRESS\", {\n        /**\n         * @returns EvmAddress instance of the zero address: \"0x0000000000000000000000000000000000000000\"\n         * @example `EvmAddress.ZERO_ADDRESS`\n         */\n        get: function () {\n            return EvmAddress.create('0x0000000000000000000000000000000000000000');\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Create a new instance of EvmAddress from any valid address input\n     *\n     * @example\n     * ```\n     * const address = EvmAddress.create(\"0xfb6916095ca1df60bb79ce92ce3ea74c37c5d359\")\n     * const address = EvmAddress.create(\"0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359\")\n     * const address = EvmAddress.ZERO_ADDRESS\n     * ```\n     */\n    EvmAddress.create = function (address, core) {\n        if (address instanceof EvmAddress) {\n            return address;\n        }\n        var finalCore = core || common_core_1.CoreProvider.getDefault();\n        return new EvmAddress(address, finalCore.config);\n    };\n    EvmAddress.parse = function (address) {\n        if (!(0, address_1.isAddress)(address)) {\n            throw new common_core_1.CoreError({\n                code: common_core_1.CoreErrorCode.INVALID_ARGUMENT,\n                message: 'Invalid address provided',\n            });\n        }\n        return (0, address_1.getAddress)(address);\n    };\n    /**\n     * Check the equality between two Evm addresses\n     * @example `EvmAddress.equals(\"0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359\", \"0xfb6916095ca1df60bb79ce92ce3ea74c37c5d359\")`\n     */\n    EvmAddress.equals = function (addressA, addressB) {\n        return EvmAddress.create(addressA)._value === EvmAddress.create(addressB)._value;\n    };\n    /**\n     * Checks the equality of the current address with another evm address\n     * @example `address.equals(\"0xfb6916095ca1df60bb79ce92ce3ea74c37c5d359\")`\n     */\n    EvmAddress.prototype.equals = function (address) {\n        return EvmAddress.equals(this, address);\n    };\n    /**\n     * Formats the address to a specific format.\n     * If no formatStyle is provided as argument, it will use the `formatEvmAddress` set in the config.\n     * @example `address.format() // \"0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359\"`\n     */\n    EvmAddress.prototype.format = function (style) {\n        var formatStyle = style !== null && style !== void 0 ? style : this.config.get(CommonEvmUtilsConfig_1.CommonEvmUtilsConfig.formatEvmAddress);\n        if (formatStyle === 'checksum') {\n            return this.checksum;\n        }\n        if (formatStyle === 'lowercase') {\n            return this.lowercase;\n        }\n        throw new common_core_1.CoreError({\n            code: common_core_1.CoreErrorCode.INVALID_ARGUMENT,\n            message: 'Cannot format address, invalid config.formatAddress',\n        });\n    };\n    Object.defineProperty(EvmAddress.prototype, \"checksum\", {\n        /**\n         * @returns the address value in checksum (EIP-55) format (see https://eips.ethereum.org/EIPS/eip-55)\n         * @example `address.checksum // \"0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359\"`\n         */\n        get: function () {\n            return this._value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmAddress.prototype, \"lowercase\", {\n        /**\n         * @returns the address value in lowercase format\n         * @example `address.lowercase // \"0xfb6916095ca1df60bb79ce92ce3ea74c37c5d359\"`\n         */\n        get: function () {\n            return this._value.toLowerCase();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return EvmAddress;\n}());\nexports.EvmAddress = EvmAddress;\n//# sourceMappingURL=EvmAddress.js.map"]},"metadata":{},"sourceType":"script"}