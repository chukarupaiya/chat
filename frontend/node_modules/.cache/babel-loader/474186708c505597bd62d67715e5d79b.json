{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LogParser = void 0;\nvar abi_1 = require(\"@ethersproject/abi\");\nvar LogParser = /** @class */function () {\n  function LogParser(abiItems) {\n    this.abiInterface = new abi_1.Interface(abiItems);\n  }\n  LogParser.prototype.read = function (log) {\n    // Solidity supports max 3 topics. https://docs.soliditylang.org/en/latest/contracts.html#events\n    var topics = [log.topic0, log.topic1, log.topic2, log.topic3].filter(function (t) {\n      return t !== null;\n    });\n    // Do not call the `this.abiInterface.parseLog()` method here! The @ethersproject/abi package (5.7.0) has a bug,\n    // that doesn't return `args` with named keys in a specific case. That problem doesn't occur when we call directly the decodeEventLog() method.\n    var eventFragment = this.abiInterface.getEvent(topics[0]);\n    var args = this.abiInterface.decodeEventLog(eventFragment, log.data, topics);\n    var params = {};\n    for (var _i = 0, _a = eventFragment.inputs; _i < _a.length; _i++) {\n      var input = _a[_i];\n      var value = args[input.name];\n      if (value instanceof abi_1.Indexed) {\n        value = value.hash;\n      }\n      params[input.name] = {\n        type: input.type,\n        value: value\n      };\n    }\n    return {\n      name: eventFragment.name,\n      params: params\n    };\n  };\n  return LogParser;\n}();\nexports.LogParser = LogParser;","map":{"version":3,"sources":["../../../src/mapping/logs-processor/LogParser.ts"],"names":[],"mappings":";;;;;;AAEA,IAAA,KAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;AAcA,IAAA,SAAA,GAAA,aAAA,YAAA;EAGE,SAAA,SAAA,CAAmB,QAAmB,EAAA;IACpC,IAAI,CAAC,YAAY,GAAG,IAAI,KAAA,CAAA,SAAS,CAAC,QAA0B,CAAC;EAC/D;EAEO,SAAA,CAAA,SAAA,CAAA,IAAI,GAAX,UAAY,GAAQ,EAAA;IAClB;IACA,IAAM,MAAM,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,UAAC,CAAC,EAAA;MAAK,OAAA,CAAC,KAAK,IAAI;IAAV,CAAU,CAAa;IAErG;IACA;IAEA,IAAM,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAC3D,IAAM,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,aAAa,EAAE,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC;IAE9E,IAAM,MAAM,GAA6B,CAAA,CAAE;IAE3C,KAAoB,IAAA,EAAA,GAAA,CAAoB,EAApB,EAAA,GAAA,aAAa,CAAC,MAAM,EAApB,EAAA,GAAA,EAAA,CAAA,MAAoB,EAApB,EAAA,EAAoB,EAAE;MAArC,IAAM,KAAK,GAAA,EAAA,CAAA,EAAA,CAAA;MACd,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;MAC5B,IAAI,KAAK,YAAY,KAAA,CAAA,OAAO,EAAE;QAC5B,KAAK,GAAG,KAAK,CAAC,IAAI;MACnB;MACD,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG;QACnB,IAAI,EAAE,KAAK,CAAC,IAAI;QAChB,KAAK,EAAA;OACN;IACF;IAED,OAAO;MACL,IAAI,EAAE,aAAa,CAAC,IAAI;MACxB,MAAM,EAAA;KACP;EACH,CAAC;EACH,OAAA,SAAC;AAAD,CAAC,EAAA;AAnCY,OAAA,CAAA,SAAA,GAAA,SAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LogParser = void 0;\nvar abi_1 = require(\"@ethersproject/abi\");\nvar LogParser = /** @class */ (function () {\n    function LogParser(abiItems) {\n        this.abiInterface = new abi_1.Interface(abiItems);\n    }\n    LogParser.prototype.read = function (log) {\n        // Solidity supports max 3 topics. https://docs.soliditylang.org/en/latest/contracts.html#events\n        var topics = [log.topic0, log.topic1, log.topic2, log.topic3].filter(function (t) { return t !== null; });\n        // Do not call the `this.abiInterface.parseLog()` method here! The @ethersproject/abi package (5.7.0) has a bug,\n        // that doesn't return `args` with named keys in a specific case. That problem doesn't occur when we call directly the decodeEventLog() method.\n        var eventFragment = this.abiInterface.getEvent(topics[0]);\n        var args = this.abiInterface.decodeEventLog(eventFragment, log.data, topics);\n        var params = {};\n        for (var _i = 0, _a = eventFragment.inputs; _i < _a.length; _i++) {\n            var input = _a[_i];\n            var value = args[input.name];\n            if (value instanceof abi_1.Indexed) {\n                value = value.hash;\n            }\n            params[input.name] = {\n                type: input.type,\n                value: value,\n            };\n        }\n        return {\n            name: eventFragment.name,\n            params: params,\n        };\n    };\n    return LogParser;\n}());\nexports.LogParser = LogParser;\n//# sourceMappingURL=LogParser.js.map"]},"metadata":{},"sourceType":"script"}