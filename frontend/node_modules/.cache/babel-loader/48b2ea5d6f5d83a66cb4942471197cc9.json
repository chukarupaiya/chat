{"ast":null,"code":"\"use strict\";\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isZeroAddress = exports.zeroAddress = exports.importPublic = exports.privateToAddress = exports.privateToPublic = exports.publicToAddress = exports.pubToAddress = exports.isValidPublic = exports.isValidPrivate = exports.generateAddress2 = exports.generateAddress = exports.isValidChecksumAddress = exports.toChecksumAddress = exports.isValidAddress = exports.Account = void 0;\nvar assert_1 = __importDefault(require(\"assert\"));\nvar externals_1 = require(\"./externals\");\nvar secp256k1_1 = require(\"ethereum-cryptography/secp256k1\");\nvar internal_1 = require(\"./internal\");\nvar constants_1 = require(\"./constants\");\nvar bytes_1 = require(\"./bytes\");\nvar hash_1 = require(\"./hash\");\nvar helpers_1 = require(\"./helpers\");\nvar types_1 = require(\"./types\");\nvar Account = /** @class */function () {\n  /**\n   * This constructor assigns and validates the values.\n   * Use the static factory methods to assist in creating an Account from varying data types.\n   */\n  function Account(nonce, balance, stateRoot, codeHash) {\n    if (nonce === void 0) {\n      nonce = new externals_1.BN(0);\n    }\n    if (balance === void 0) {\n      balance = new externals_1.BN(0);\n    }\n    if (stateRoot === void 0) {\n      stateRoot = constants_1.KECCAK256_RLP;\n    }\n    if (codeHash === void 0) {\n      codeHash = constants_1.KECCAK256_NULL;\n    }\n    this.nonce = nonce;\n    this.balance = balance;\n    this.stateRoot = stateRoot;\n    this.codeHash = codeHash;\n    this._validate();\n  }\n  Account.fromAccountData = function (accountData) {\n    var nonce = accountData.nonce,\n      balance = accountData.balance,\n      stateRoot = accountData.stateRoot,\n      codeHash = accountData.codeHash;\n    return new Account(nonce ? new externals_1.BN((0, bytes_1.toBuffer)(nonce)) : undefined, balance ? new externals_1.BN((0, bytes_1.toBuffer)(balance)) : undefined, stateRoot ? (0, bytes_1.toBuffer)(stateRoot) : undefined, codeHash ? (0, bytes_1.toBuffer)(codeHash) : undefined);\n  };\n  Account.fromRlpSerializedAccount = function (serialized) {\n    var values = externals_1.rlp.decode(serialized);\n    if (!Array.isArray(values)) {\n      throw new Error('Invalid serialized account input. Must be array');\n    }\n    return this.fromValuesArray(values);\n  };\n  Account.fromValuesArray = function (values) {\n    var _a = __read(values, 4),\n      nonce = _a[0],\n      balance = _a[1],\n      stateRoot = _a[2],\n      codeHash = _a[3];\n    return new Account(new externals_1.BN(nonce), new externals_1.BN(balance), stateRoot, codeHash);\n  };\n  Account.prototype._validate = function () {\n    if (this.nonce.lt(new externals_1.BN(0))) {\n      throw new Error('nonce must be greater than zero');\n    }\n    if (this.balance.lt(new externals_1.BN(0))) {\n      throw new Error('balance must be greater than zero');\n    }\n    if (this.stateRoot.length !== 32) {\n      throw new Error('stateRoot must have a length of 32');\n    }\n    if (this.codeHash.length !== 32) {\n      throw new Error('codeHash must have a length of 32');\n    }\n  };\n  /**\n   * Returns a Buffer Array of the raw Buffers for the account, in order.\n   */\n  Account.prototype.raw = function () {\n    return [(0, types_1.bnToUnpaddedBuffer)(this.nonce), (0, types_1.bnToUnpaddedBuffer)(this.balance), this.stateRoot, this.codeHash];\n  };\n  /**\n   * Returns the RLP serialization of the account as a `Buffer`.\n   */\n  Account.prototype.serialize = function () {\n    return externals_1.rlp.encode(this.raw());\n  };\n  /**\n   * Returns a `Boolean` determining if the account is a contract.\n   */\n  Account.prototype.isContract = function () {\n    return !this.codeHash.equals(constants_1.KECCAK256_NULL);\n  };\n  /**\n   * Returns a `Boolean` determining if the account is empty complying to the definition of\n   * account emptiness in [EIP-161](https://eips.ethereum.org/EIPS/eip-161):\n   * \"An account is considered empty when it has no code and zero nonce and zero balance.\"\n   */\n  Account.prototype.isEmpty = function () {\n    return this.balance.isZero() && this.nonce.isZero() && this.codeHash.equals(constants_1.KECCAK256_NULL);\n  };\n  return Account;\n}();\nexports.Account = Account;\n/**\n * Checks if the address is a valid. Accepts checksummed addresses too.\n */\nvar isValidAddress = function (hexAddress) {\n  try {\n    (0, helpers_1.assertIsString)(hexAddress);\n  } catch (e) {\n    return false;\n  }\n  return /^0x[0-9a-fA-F]{40}$/.test(hexAddress);\n};\nexports.isValidAddress = isValidAddress;\n/**\n * Returns a checksummed address.\n *\n * If an eip1191ChainId is provided, the chainId will be included in the checksum calculation. This\n * has the effect of checksummed addresses for one chain having invalid checksums for others.\n * For more details see [EIP-1191](https://eips.ethereum.org/EIPS/eip-1191).\n *\n * WARNING: Checksums with and without the chainId will differ and the EIP-1191 checksum is not\n * backwards compatible to the original widely adopted checksum format standard introduced in\n * [EIP-55](https://eips.ethereum.org/EIPS/eip-55), so this will break in existing applications.\n * Usage of this EIP is therefore discouraged unless you have a very targeted use case.\n */\nvar toChecksumAddress = function (hexAddress, eip1191ChainId) {\n  (0, helpers_1.assertIsHexString)(hexAddress);\n  var address = (0, internal_1.stripHexPrefix)(hexAddress).toLowerCase();\n  var prefix = '';\n  if (eip1191ChainId) {\n    var chainId = (0, types_1.toType)(eip1191ChainId, types_1.TypeOutput.BN);\n    prefix = chainId.toString() + '0x';\n  }\n  var hash = (0, hash_1.keccakFromString)(prefix + address).toString('hex');\n  var ret = '0x';\n  for (var i = 0; i < address.length; i++) {\n    if (parseInt(hash[i], 16) >= 8) {\n      ret += address[i].toUpperCase();\n    } else {\n      ret += address[i];\n    }\n  }\n  return ret;\n};\nexports.toChecksumAddress = toChecksumAddress;\n/**\n * Checks if the address is a valid checksummed address.\n *\n * See toChecksumAddress' documentation for details about the eip1191ChainId parameter.\n */\nvar isValidChecksumAddress = function (hexAddress, eip1191ChainId) {\n  return (0, exports.isValidAddress)(hexAddress) && (0, exports.toChecksumAddress)(hexAddress, eip1191ChainId) === hexAddress;\n};\nexports.isValidChecksumAddress = isValidChecksumAddress;\n/**\n * Generates an address of a newly created contract.\n * @param from The address which is creating this new address\n * @param nonce The nonce of the from account\n */\nvar generateAddress = function (from, nonce) {\n  (0, helpers_1.assertIsBuffer)(from);\n  (0, helpers_1.assertIsBuffer)(nonce);\n  var nonceBN = new externals_1.BN(nonce);\n  if (nonceBN.isZero()) {\n    // in RLP we want to encode null in the case of zero nonce\n    // read the RLP documentation for an answer if you dare\n    return (0, hash_1.rlphash)([from, null]).slice(-20);\n  }\n  // Only take the lower 160bits of the hash\n  return (0, hash_1.rlphash)([from, Buffer.from(nonceBN.toArray())]).slice(-20);\n};\nexports.generateAddress = generateAddress;\n/**\n * Generates an address for a contract created using CREATE2.\n * @param from The address which is creating this new address\n * @param salt A salt\n * @param initCode The init code of the contract being created\n */\nvar generateAddress2 = function (from, salt, initCode) {\n  (0, helpers_1.assertIsBuffer)(from);\n  (0, helpers_1.assertIsBuffer)(salt);\n  (0, helpers_1.assertIsBuffer)(initCode);\n  (0, assert_1.default)(from.length === 20);\n  (0, assert_1.default)(salt.length === 32);\n  var address = (0, hash_1.keccak256)(Buffer.concat([Buffer.from('ff', 'hex'), from, salt, (0, hash_1.keccak256)(initCode)]));\n  return address.slice(-20);\n};\nexports.generateAddress2 = generateAddress2;\n/**\n * Checks if the private key satisfies the rules of the curve secp256k1.\n */\nvar isValidPrivate = function (privateKey) {\n  return (0, secp256k1_1.privateKeyVerify)(privateKey);\n};\nexports.isValidPrivate = isValidPrivate;\n/**\n * Checks if the public key satisfies the rules of the curve secp256k1\n * and the requirements of Ethereum.\n * @param publicKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */\nvar isValidPublic = function (publicKey, sanitize) {\n  if (sanitize === void 0) {\n    sanitize = false;\n  }\n  (0, helpers_1.assertIsBuffer)(publicKey);\n  if (publicKey.length === 64) {\n    // Convert to SEC1 for secp256k1\n    return (0, secp256k1_1.publicKeyVerify)(Buffer.concat([Buffer.from([4]), publicKey]));\n  }\n  if (!sanitize) {\n    return false;\n  }\n  return (0, secp256k1_1.publicKeyVerify)(publicKey);\n};\nexports.isValidPublic = isValidPublic;\n/**\n * Returns the ethereum address of a given public key.\n * Accepts \"Ethereum public keys\" and SEC1 encoded keys.\n * @param pubKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */\nvar pubToAddress = function (pubKey, sanitize) {\n  if (sanitize === void 0) {\n    sanitize = false;\n  }\n  (0, helpers_1.assertIsBuffer)(pubKey);\n  if (sanitize && pubKey.length !== 64) {\n    pubKey = Buffer.from((0, secp256k1_1.publicKeyConvert)(pubKey, false).slice(1));\n  }\n  (0, assert_1.default)(pubKey.length === 64);\n  // Only take the lower 160bits of the hash\n  return (0, hash_1.keccak)(pubKey).slice(-20);\n};\nexports.pubToAddress = pubToAddress;\nexports.publicToAddress = exports.pubToAddress;\n/**\n * Returns the ethereum public key of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */\nvar privateToPublic = function (privateKey) {\n  (0, helpers_1.assertIsBuffer)(privateKey);\n  // skip the type flag and use the X, Y points\n  return Buffer.from((0, secp256k1_1.publicKeyCreate)(privateKey, false)).slice(1);\n};\nexports.privateToPublic = privateToPublic;\n/**\n * Returns the ethereum address of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */\nvar privateToAddress = function (privateKey) {\n  return (0, exports.publicToAddress)((0, exports.privateToPublic)(privateKey));\n};\nexports.privateToAddress = privateToAddress;\n/**\n * Converts a public key to the Ethereum format.\n */\nvar importPublic = function (publicKey) {\n  (0, helpers_1.assertIsBuffer)(publicKey);\n  if (publicKey.length !== 64) {\n    publicKey = Buffer.from((0, secp256k1_1.publicKeyConvert)(publicKey, false).slice(1));\n  }\n  return publicKey;\n};\nexports.importPublic = importPublic;\n/**\n * Returns the zero address.\n */\nvar zeroAddress = function () {\n  var addressLength = 20;\n  var addr = (0, bytes_1.zeros)(addressLength);\n  return (0, bytes_1.bufferToHex)(addr);\n};\nexports.zeroAddress = zeroAddress;\n/**\n * Checks if a given address is the zero address.\n */\nvar isZeroAddress = function (hexAddress) {\n  try {\n    (0, helpers_1.assertIsString)(hexAddress);\n  } catch (e) {\n    return false;\n  }\n  var zeroAddr = (0, exports.zeroAddress)();\n  return zeroAddr === hexAddress;\n};\nexports.isZeroAddress = isZeroAddress;","map":{"version":3,"sources":["../src/account.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isZeroAddress = exports.zeroAddress = exports.importPublic = exports.privateToAddress = exports.privateToPublic = exports.publicToAddress = exports.pubToAddress = exports.isValidPublic = exports.isValidPrivate = exports.generateAddress2 = exports.generateAddress = exports.isValidChecksumAddress = exports.toChecksumAddress = exports.isValidAddress = exports.Account = void 0;\nvar assert_1 = __importDefault(require(\"assert\"));\nvar externals_1 = require(\"./externals\");\nvar secp256k1_1 = require(\"ethereum-cryptography/secp256k1\");\nvar internal_1 = require(\"./internal\");\nvar constants_1 = require(\"./constants\");\nvar bytes_1 = require(\"./bytes\");\nvar hash_1 = require(\"./hash\");\nvar helpers_1 = require(\"./helpers\");\nvar types_1 = require(\"./types\");\nvar Account = /** @class */ (function () {\n    /**\n     * This constructor assigns and validates the values.\n     * Use the static factory methods to assist in creating an Account from varying data types.\n     */\n    function Account(nonce, balance, stateRoot, codeHash) {\n        if (nonce === void 0) { nonce = new externals_1.BN(0); }\n        if (balance === void 0) { balance = new externals_1.BN(0); }\n        if (stateRoot === void 0) { stateRoot = constants_1.KECCAK256_RLP; }\n        if (codeHash === void 0) { codeHash = constants_1.KECCAK256_NULL; }\n        this.nonce = nonce;\n        this.balance = balance;\n        this.stateRoot = stateRoot;\n        this.codeHash = codeHash;\n        this._validate();\n    }\n    Account.fromAccountData = function (accountData) {\n        var nonce = accountData.nonce, balance = accountData.balance, stateRoot = accountData.stateRoot, codeHash = accountData.codeHash;\n        return new Account(nonce ? new externals_1.BN((0, bytes_1.toBuffer)(nonce)) : undefined, balance ? new externals_1.BN((0, bytes_1.toBuffer)(balance)) : undefined, stateRoot ? (0, bytes_1.toBuffer)(stateRoot) : undefined, codeHash ? (0, bytes_1.toBuffer)(codeHash) : undefined);\n    };\n    Account.fromRlpSerializedAccount = function (serialized) {\n        var values = externals_1.rlp.decode(serialized);\n        if (!Array.isArray(values)) {\n            throw new Error('Invalid serialized account input. Must be array');\n        }\n        return this.fromValuesArray(values);\n    };\n    Account.fromValuesArray = function (values) {\n        var _a = __read(values, 4), nonce = _a[0], balance = _a[1], stateRoot = _a[2], codeHash = _a[3];\n        return new Account(new externals_1.BN(nonce), new externals_1.BN(balance), stateRoot, codeHash);\n    };\n    Account.prototype._validate = function () {\n        if (this.nonce.lt(new externals_1.BN(0))) {\n            throw new Error('nonce must be greater than zero');\n        }\n        if (this.balance.lt(new externals_1.BN(0))) {\n            throw new Error('balance must be greater than zero');\n        }\n        if (this.stateRoot.length !== 32) {\n            throw new Error('stateRoot must have a length of 32');\n        }\n        if (this.codeHash.length !== 32) {\n            throw new Error('codeHash must have a length of 32');\n        }\n    };\n    /**\n     * Returns a Buffer Array of the raw Buffers for the account, in order.\n     */\n    Account.prototype.raw = function () {\n        return [\n            (0, types_1.bnToUnpaddedBuffer)(this.nonce),\n            (0, types_1.bnToUnpaddedBuffer)(this.balance),\n            this.stateRoot,\n            this.codeHash,\n        ];\n    };\n    /**\n     * Returns the RLP serialization of the account as a `Buffer`.\n     */\n    Account.prototype.serialize = function () {\n        return externals_1.rlp.encode(this.raw());\n    };\n    /**\n     * Returns a `Boolean` determining if the account is a contract.\n     */\n    Account.prototype.isContract = function () {\n        return !this.codeHash.equals(constants_1.KECCAK256_NULL);\n    };\n    /**\n     * Returns a `Boolean` determining if the account is empty complying to the definition of\n     * account emptiness in [EIP-161](https://eips.ethereum.org/EIPS/eip-161):\n     * \"An account is considered empty when it has no code and zero nonce and zero balance.\"\n     */\n    Account.prototype.isEmpty = function () {\n        return this.balance.isZero() && this.nonce.isZero() && this.codeHash.equals(constants_1.KECCAK256_NULL);\n    };\n    return Account;\n}());\nexports.Account = Account;\n/**\n * Checks if the address is a valid. Accepts checksummed addresses too.\n */\nvar isValidAddress = function (hexAddress) {\n    try {\n        (0, helpers_1.assertIsString)(hexAddress);\n    }\n    catch (e) {\n        return false;\n    }\n    return /^0x[0-9a-fA-F]{40}$/.test(hexAddress);\n};\nexports.isValidAddress = isValidAddress;\n/**\n * Returns a checksummed address.\n *\n * If an eip1191ChainId is provided, the chainId will be included in the checksum calculation. This\n * has the effect of checksummed addresses for one chain having invalid checksums for others.\n * For more details see [EIP-1191](https://eips.ethereum.org/EIPS/eip-1191).\n *\n * WARNING: Checksums with and without the chainId will differ and the EIP-1191 checksum is not\n * backwards compatible to the original widely adopted checksum format standard introduced in\n * [EIP-55](https://eips.ethereum.org/EIPS/eip-55), so this will break in existing applications.\n * Usage of this EIP is therefore discouraged unless you have a very targeted use case.\n */\nvar toChecksumAddress = function (hexAddress, eip1191ChainId) {\n    (0, helpers_1.assertIsHexString)(hexAddress);\n    var address = (0, internal_1.stripHexPrefix)(hexAddress).toLowerCase();\n    var prefix = '';\n    if (eip1191ChainId) {\n        var chainId = (0, types_1.toType)(eip1191ChainId, types_1.TypeOutput.BN);\n        prefix = chainId.toString() + '0x';\n    }\n    var hash = (0, hash_1.keccakFromString)(prefix + address).toString('hex');\n    var ret = '0x';\n    for (var i = 0; i < address.length; i++) {\n        if (parseInt(hash[i], 16) >= 8) {\n            ret += address[i].toUpperCase();\n        }\n        else {\n            ret += address[i];\n        }\n    }\n    return ret;\n};\nexports.toChecksumAddress = toChecksumAddress;\n/**\n * Checks if the address is a valid checksummed address.\n *\n * See toChecksumAddress' documentation for details about the eip1191ChainId parameter.\n */\nvar isValidChecksumAddress = function (hexAddress, eip1191ChainId) {\n    return (0, exports.isValidAddress)(hexAddress) && (0, exports.toChecksumAddress)(hexAddress, eip1191ChainId) === hexAddress;\n};\nexports.isValidChecksumAddress = isValidChecksumAddress;\n/**\n * Generates an address of a newly created contract.\n * @param from The address which is creating this new address\n * @param nonce The nonce of the from account\n */\nvar generateAddress = function (from, nonce) {\n    (0, helpers_1.assertIsBuffer)(from);\n    (0, helpers_1.assertIsBuffer)(nonce);\n    var nonceBN = new externals_1.BN(nonce);\n    if (nonceBN.isZero()) {\n        // in RLP we want to encode null in the case of zero nonce\n        // read the RLP documentation for an answer if you dare\n        return (0, hash_1.rlphash)([from, null]).slice(-20);\n    }\n    // Only take the lower 160bits of the hash\n    return (0, hash_1.rlphash)([from, Buffer.from(nonceBN.toArray())]).slice(-20);\n};\nexports.generateAddress = generateAddress;\n/**\n * Generates an address for a contract created using CREATE2.\n * @param from The address which is creating this new address\n * @param salt A salt\n * @param initCode The init code of the contract being created\n */\nvar generateAddress2 = function (from, salt, initCode) {\n    (0, helpers_1.assertIsBuffer)(from);\n    (0, helpers_1.assertIsBuffer)(salt);\n    (0, helpers_1.assertIsBuffer)(initCode);\n    (0, assert_1.default)(from.length === 20);\n    (0, assert_1.default)(salt.length === 32);\n    var address = (0, hash_1.keccak256)(Buffer.concat([Buffer.from('ff', 'hex'), from, salt, (0, hash_1.keccak256)(initCode)]));\n    return address.slice(-20);\n};\nexports.generateAddress2 = generateAddress2;\n/**\n * Checks if the private key satisfies the rules of the curve secp256k1.\n */\nvar isValidPrivate = function (privateKey) {\n    return (0, secp256k1_1.privateKeyVerify)(privateKey);\n};\nexports.isValidPrivate = isValidPrivate;\n/**\n * Checks if the public key satisfies the rules of the curve secp256k1\n * and the requirements of Ethereum.\n * @param publicKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */\nvar isValidPublic = function (publicKey, sanitize) {\n    if (sanitize === void 0) { sanitize = false; }\n    (0, helpers_1.assertIsBuffer)(publicKey);\n    if (publicKey.length === 64) {\n        // Convert to SEC1 for secp256k1\n        return (0, secp256k1_1.publicKeyVerify)(Buffer.concat([Buffer.from([4]), publicKey]));\n    }\n    if (!sanitize) {\n        return false;\n    }\n    return (0, secp256k1_1.publicKeyVerify)(publicKey);\n};\nexports.isValidPublic = isValidPublic;\n/**\n * Returns the ethereum address of a given public key.\n * Accepts \"Ethereum public keys\" and SEC1 encoded keys.\n * @param pubKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */\nvar pubToAddress = function (pubKey, sanitize) {\n    if (sanitize === void 0) { sanitize = false; }\n    (0, helpers_1.assertIsBuffer)(pubKey);\n    if (sanitize && pubKey.length !== 64) {\n        pubKey = Buffer.from((0, secp256k1_1.publicKeyConvert)(pubKey, false).slice(1));\n    }\n    (0, assert_1.default)(pubKey.length === 64);\n    // Only take the lower 160bits of the hash\n    return (0, hash_1.keccak)(pubKey).slice(-20);\n};\nexports.pubToAddress = pubToAddress;\nexports.publicToAddress = exports.pubToAddress;\n/**\n * Returns the ethereum public key of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */\nvar privateToPublic = function (privateKey) {\n    (0, helpers_1.assertIsBuffer)(privateKey);\n    // skip the type flag and use the X, Y points\n    return Buffer.from((0, secp256k1_1.publicKeyCreate)(privateKey, false)).slice(1);\n};\nexports.privateToPublic = privateToPublic;\n/**\n * Returns the ethereum address of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */\nvar privateToAddress = function (privateKey) {\n    return (0, exports.publicToAddress)((0, exports.privateToPublic)(privateKey));\n};\nexports.privateToAddress = privateToAddress;\n/**\n * Converts a public key to the Ethereum format.\n */\nvar importPublic = function (publicKey) {\n    (0, helpers_1.assertIsBuffer)(publicKey);\n    if (publicKey.length !== 64) {\n        publicKey = Buffer.from((0, secp256k1_1.publicKeyConvert)(publicKey, false).slice(1));\n    }\n    return publicKey;\n};\nexports.importPublic = importPublic;\n/**\n * Returns the zero address.\n */\nvar zeroAddress = function () {\n    var addressLength = 20;\n    var addr = (0, bytes_1.zeros)(addressLength);\n    return (0, bytes_1.bufferToHex)(addr);\n};\nexports.zeroAddress = zeroAddress;\n/**\n * Checks if a given address is the zero address.\n */\nvar isZeroAddress = function (hexAddress) {\n    try {\n        (0, helpers_1.assertIsString)(hexAddress);\n    }\n    catch (e) {\n        return false;\n    }\n    var zeroAddr = (0, exports.zeroAddress)();\n    return zeroAddr === hexAddress;\n};\nexports.isZeroAddress = isZeroAddress;\n//# sourceMappingURL=account.js.map"]},"metadata":{},"sourceType":"script"}