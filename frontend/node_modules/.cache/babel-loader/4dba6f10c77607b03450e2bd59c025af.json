{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getPairReservesOperation = void 0;\nvar dataTypes_1 = require(\"../../dataTypes\");\nvar EvmChainResolver_1 = require(\"../../EvmChainResolver\");\n/** Get the liquidity reserves for a given pair address. Only Uniswap V2 based exchanges supported at the moment. */\nexports.getPairReservesOperation = {\n  method: 'GET',\n  name: 'getPairReserves',\n  id: 'getPairReserves',\n  groupName: 'defi',\n  urlPathPattern: '/{pairAddress}/reserves',\n  urlPathParamNames: ['pairAddress'],\n  urlSearchParamNames: ['chain', 'toBlock', 'toDate'],\n  getRequestUrlParams: getRequestUrlParams,\n  serializeRequest: serializeRequest,\n  deserializeRequest: deserializeRequest,\n  deserializeResponse: deserializeResponse\n};\n// Methods\nfunction getRequestUrlParams(request, core) {\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n    pairAddress: dataTypes_1.EvmAddress.create(request.pairAddress, core).lowercase,\n    to_block: request.toBlock,\n    to_date: request.toDate ? new Date(request.toDate).toISOString() : undefined\n  };\n}\nfunction serializeRequest(request, core) {\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n    toBlock: request.toBlock,\n    toDate: request.toDate ? new Date(request.toDate).toISOString() : undefined,\n    pairAddress: dataTypes_1.EvmAddress.create(request.pairAddress, core).lowercase\n  };\n}\nfunction deserializeRequest(jsonRequest, core) {\n  return {\n    chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),\n    toBlock: jsonRequest.toBlock,\n    toDate: jsonRequest.toDate ? new Date(jsonRequest.toDate) : undefined,\n    pairAddress: dataTypes_1.EvmAddress.create(jsonRequest.pairAddress, core)\n  };\n}\nfunction deserializeResponse(jsonResponse) {\n  return jsonResponse;\n}","map":{"version":3,"sources":["../../../src/operations/defi/getPairReservesOperation.ts"],"names":[],"mappings":";;;;;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;AACA,IAAA,kBAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;AA4BA;AACa,OAAA,CAAA,wBAAwB,GAKjC;EACF,MAAM,EAAE,KAAK;EACb,IAAI,EAAE,iBAAiB;EACvB,EAAE,EAAE,iBAAiB;EACrB,SAAS,EAAE,MAAM;EACjB,cAAc,EAAE,yBAAyB;EACzC,iBAAiB,EAAE,CAAC,aAAa,CAAC;EAClC,mBAAmB,EAAE,CAAC,OAAO,EAAE,SAAS,EAAE,QAAQ,CAAC;EAEnD,mBAAmB,EAAA,mBAAA;EACnB,gBAAgB,EAAA,gBAAA;EAChB,kBAAkB,EAAA,kBAAA;EAClB,mBAAmB,EAAA;CACpB;AAED;AAEA,SAAS,mBAAmB,CAAC,OAA+B,EAAE,IAAU,EAAA;EACtE,OAAO;IACL,KAAK,EAAE,kBAAA,CAAA,gBAAgB,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,MAAM;IAC3D,WAAW,EAAE,WAAA,CAAA,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC,SAAS;IACnE,QAAQ,EAAE,OAAO,CAAC,OAAO;IACzB,OAAO,EAAE,OAAO,CAAC,MAAM,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,GAAG;GACpE;AACH;AAEA,SAAS,gBAAgB,CAAC,OAA+B,EAAE,IAAU,EAAA;EACnE,OAAO;IACL,KAAK,EAAE,kBAAA,CAAA,gBAAgB,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,MAAM;IAC3D,OAAO,EAAE,OAAO,CAAC,OAAO;IACxB,MAAM,EAAE,OAAO,CAAC,MAAM,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,GAAG,SAAS;IAC3E,WAAW,EAAE,WAAA,CAAA,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;GAC3D;AACH;AAEA,SAAS,kBAAkB,CAAC,WAAuC,EAAE,IAAU,EAAA;EAC7E,OAAO;IACL,KAAK,EAAE,WAAA,CAAA,QAAQ,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,EAAE,IAAI,CAAC;IAC/C,OAAO,EAAE,WAAW,CAAC,OAAO;IAC5B,MAAM,EAAE,WAAW,CAAC,MAAM,GAAG,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,GAAG,SAAS;IACrE,WAAW,EAAE,WAAA,CAAA,UAAU,CAAC,MAAM,CAAC,WAAW,CAAC,WAAW,EAAE,IAAI;GAC7D;AACH;AAEA,SAAS,mBAAmB,CAAC,YAAyC,EAAA;EACpE,OAAO,YAAY;AACrB","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getPairReservesOperation = void 0;\nvar dataTypes_1 = require(\"../../dataTypes\");\nvar EvmChainResolver_1 = require(\"../../EvmChainResolver\");\n/** Get the liquidity reserves for a given pair address. Only Uniswap V2 based exchanges supported at the moment. */\nexports.getPairReservesOperation = {\n    method: 'GET',\n    name: 'getPairReserves',\n    id: 'getPairReserves',\n    groupName: 'defi',\n    urlPathPattern: '/{pairAddress}/reserves',\n    urlPathParamNames: ['pairAddress'],\n    urlSearchParamNames: ['chain', 'toBlock', 'toDate'],\n    getRequestUrlParams: getRequestUrlParams,\n    serializeRequest: serializeRequest,\n    deserializeRequest: deserializeRequest,\n    deserializeResponse: deserializeResponse,\n};\n// Methods\nfunction getRequestUrlParams(request, core) {\n    return {\n        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n        pairAddress: dataTypes_1.EvmAddress.create(request.pairAddress, core).lowercase,\n        to_block: request.toBlock,\n        to_date: request.toDate ? new Date(request.toDate).toISOString() : undefined,\n    };\n}\nfunction serializeRequest(request, core) {\n    return {\n        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n        toBlock: request.toBlock,\n        toDate: request.toDate ? new Date(request.toDate).toISOString() : undefined,\n        pairAddress: dataTypes_1.EvmAddress.create(request.pairAddress, core).lowercase,\n    };\n}\nfunction deserializeRequest(jsonRequest, core) {\n    return {\n        chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),\n        toBlock: jsonRequest.toBlock,\n        toDate: jsonRequest.toDate ? new Date(jsonRequest.toDate) : undefined,\n        pairAddress: dataTypes_1.EvmAddress.create(jsonRequest.pairAddress, core),\n    };\n}\nfunction deserializeResponse(jsonResponse) {\n    return jsonResponse;\n}\n//# sourceMappingURL=getPairReservesOperation.js.map"]},"metadata":{},"sourceType":"script"}