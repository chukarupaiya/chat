{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getWalletNFTTransfersOperation = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar dataTypes_1 = require(\"../../dataTypes\");\nvar EvmChainResolver_1 = require(\"../../EvmChainResolver\");\n/** Get transfers of NFTs given the wallet and other parameters. */\nexports.getWalletNFTTransfersOperation = {\n  method: 'GET',\n  name: 'getWalletNFTTransfers',\n  id: 'getWalletNFTTransfers',\n  groupName: 'nft',\n  urlPathPattern: '/{address}/nft/transfers',\n  urlPathParamNames: ['address'],\n  urlSearchParamNames: ['chain', 'format', 'direction', 'fromBlock', 'toBlock', 'limit', 'cursor', 'disableTotal'],\n  firstPageIndex: 0,\n  getRequestUrlParams: getRequestUrlParams,\n  serializeRequest: serializeRequest,\n  deserializeRequest: deserializeRequest,\n  deserializeResponse: deserializeResponse\n};\n// Methods\nfunction getRequestUrlParams(request, core) {\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n    address: dataTypes_1.EvmAddress.create(request.address, core).lowercase,\n    format: request.format,\n    direction: request.direction,\n    from_block: (0, common_core_1.maybe)(request.fromBlock, String),\n    to_block: request.toBlock,\n    limit: (0, common_core_1.maybe)(request.limit, String),\n    cursor: request.cursor,\n    disable_total: request.disableTotal\n  };\n}\nfunction deserializeResponse(jsonResponse, request, core) {\n  var _a;\n  return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (transfer) {\n    return dataTypes_1.EvmNftTransfer.create(__assign(__assign({}, (0, common_core_1.toCamelCase)(transfer)), {\n      chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core),\n      tokenAddress: dataTypes_1.EvmAddress.create(transfer.token_address, core),\n      toAddress: dataTypes_1.EvmAddress.create(transfer.to_address, core),\n      operator: transfer.operator ? dataTypes_1.EvmAddress.create(transfer.operator, core) : null,\n      fromAddress: transfer.from_address ? dataTypes_1.EvmAddress.create(transfer.from_address, core) : null,\n      value: transfer.value ? dataTypes_1.EvmNative.create(transfer.value, 'wei') : null,\n      blockTimestamp: new Date(transfer.block_timestamp)\n    }), core);\n  });\n}\nfunction serializeRequest(request, core) {\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n    format: request.format,\n    direction: request.direction,\n    fromBlock: request.fromBlock,\n    toBlock: request.toBlock,\n    limit: request.limit,\n    cursor: request.cursor,\n    address: dataTypes_1.EvmAddress.create(request.address, core).checksum,\n    disableTotal: request.disableTotal\n  };\n}\nfunction deserializeRequest(jsonRequest, core) {\n  return {\n    chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),\n    format: jsonRequest.format,\n    direction: jsonRequest.direction,\n    fromBlock: jsonRequest.fromBlock,\n    toBlock: jsonRequest.toBlock,\n    limit: jsonRequest.limit,\n    cursor: jsonRequest.cursor,\n    address: dataTypes_1.EvmAddress.create(jsonRequest.address, core),\n    disableTotal: jsonRequest.disableTotal\n  };\n}","map":{"version":3,"sources":["../../../src/operations/nft/getWalletNFTTransfersOperation.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getWalletNFTTransfersOperation = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar dataTypes_1 = require(\"../../dataTypes\");\nvar EvmChainResolver_1 = require(\"../../EvmChainResolver\");\n/** Get transfers of NFTs given the wallet and other parameters. */\nexports.getWalletNFTTransfersOperation = {\n    method: 'GET',\n    name: 'getWalletNFTTransfers',\n    id: 'getWalletNFTTransfers',\n    groupName: 'nft',\n    urlPathPattern: '/{address}/nft/transfers',\n    urlPathParamNames: ['address'],\n    urlSearchParamNames: ['chain', 'format', 'direction', 'fromBlock', 'toBlock', 'limit', 'cursor', 'disableTotal'],\n    firstPageIndex: 0,\n    getRequestUrlParams: getRequestUrlParams,\n    serializeRequest: serializeRequest,\n    deserializeRequest: deserializeRequest,\n    deserializeResponse: deserializeResponse,\n};\n// Methods\nfunction getRequestUrlParams(request, core) {\n    return {\n        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n        address: dataTypes_1.EvmAddress.create(request.address, core).lowercase,\n        format: request.format,\n        direction: request.direction,\n        from_block: (0, common_core_1.maybe)(request.fromBlock, String),\n        to_block: request.toBlock,\n        limit: (0, common_core_1.maybe)(request.limit, String),\n        cursor: request.cursor,\n        disable_total: request.disableTotal,\n    };\n}\nfunction deserializeResponse(jsonResponse, request, core) {\n    var _a;\n    return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (transfer) {\n        return dataTypes_1.EvmNftTransfer.create(__assign(__assign({}, (0, common_core_1.toCamelCase)(transfer)), { chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core), tokenAddress: dataTypes_1.EvmAddress.create(transfer.token_address, core), toAddress: dataTypes_1.EvmAddress.create(transfer.to_address, core), operator: transfer.operator ? dataTypes_1.EvmAddress.create(transfer.operator, core) : null, fromAddress: transfer.from_address ? dataTypes_1.EvmAddress.create(transfer.from_address, core) : null, value: transfer.value ? dataTypes_1.EvmNative.create(transfer.value, 'wei') : null, blockTimestamp: new Date(transfer.block_timestamp) }), core);\n    });\n}\nfunction serializeRequest(request, core) {\n    return {\n        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n        format: request.format,\n        direction: request.direction,\n        fromBlock: request.fromBlock,\n        toBlock: request.toBlock,\n        limit: request.limit,\n        cursor: request.cursor,\n        address: dataTypes_1.EvmAddress.create(request.address, core).checksum,\n        disableTotal: request.disableTotal,\n    };\n}\nfunction deserializeRequest(jsonRequest, core) {\n    return {\n        chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),\n        format: jsonRequest.format,\n        direction: jsonRequest.direction,\n        fromBlock: jsonRequest.fromBlock,\n        toBlock: jsonRequest.toBlock,\n        limit: jsonRequest.limit,\n        cursor: jsonRequest.cursor,\n        address: dataTypes_1.EvmAddress.create(jsonRequest.address, core),\n        disableTotal: jsonRequest.disableTotal,\n    };\n}\n//# sourceMappingURL=getWalletNFTTransfersOperation.js.map"]},"metadata":{},"sourceType":"script"}