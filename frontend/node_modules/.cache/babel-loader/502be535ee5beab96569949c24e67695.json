{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EvmNftCollection = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar EvmAddress_1 = require(\"../EvmAddress\");\nvar EvmChain_1 = require(\"../EvmChain\");\n/**\n * The EvmNftCollection is a representation of an nft collection.\n *\n * @category DataType\n */\nvar EvmNftCollection = /** @class */function () {\n  function EvmNftCollection(data, core) {\n    this._data = EvmNftCollection.parse(data, core);\n  }\n  /**\n   * Create a new instance of EvmNftCollection from any valid transaction input\n   * @param data - the EvmNftCollectionish type\n   * @example const collection = EvmTransaction.create(data);\n   */\n  EvmNftCollection.create = function (data, core) {\n    if (data instanceof EvmNftCollection) {\n      return data;\n    }\n    var finalCore = core !== null && core !== void 0 ? core : common_core_1.CoreProvider.getDefault();\n    return new EvmNftCollection(data, finalCore);\n  };\n  /**\n   * Check the equality between two Evm collections. It compares their hashes and collections.\n   * @param dataA - The first collection to compare\n   * @param dataB - The second collection to compare\n   * @example EvmNftCollection.equals(dataA, dataB)\n   */\n  EvmNftCollection.equals = function (dataA, dataB) {\n    var collectionA = EvmNftCollection.create(dataA);\n    var collectionB = EvmNftCollection.create(dataB);\n    if (!collectionA.chain.equals(collectionB.chain)) {\n      return false;\n    }\n    if (!collectionA.tokenAddress.equals(collectionB.tokenAddress)) {\n      return false;\n    }\n    return true;\n  };\n  /**\n   * Checks the equality of the current collection with another evm collection\n   * @param data - the collection to compare with\n   * @example\n   * ```ts\n   * collection.equals(data)\n   * ```\n   */\n  EvmNftCollection.prototype.equals = function (data) {\n    return EvmNftCollection.equals(this, data);\n  };\n  /**\n   * @returns a JSON represention of the collection.\n   * @example\n   * ```\n   * collection.toJSON()\n   * ```\n   */\n  EvmNftCollection.prototype.toJSON = function () {\n    var data = this._data;\n    return __assign(__assign({}, data), {\n      chain: data.chain.format(),\n      tokenAddress: data.tokenAddress.format()\n    });\n  };\n  /**\n   * @returns a JSON represention of the collection.\n   * @example\n   * ```\n   * collection.format()\n   * ```\n   */\n  EvmNftCollection.prototype.format = function () {\n    return this.toJSON();\n  };\n  Object.defineProperty(EvmNftCollection.prototype, \"result\", {\n    /**\n     * @returns all the data without casting it to JSON.\n     * @example collection.result\n     */\n    get: function () {\n      return this._data;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftCollection.prototype, \"chain\", {\n    /**\n     * @returns the chain where the collection is deployed.\n     * @example collection.chain // EvmChain\n     */\n    get: function () {\n      return this._data.chain;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftCollection.prototype, \"tokenAddress\", {\n    /**\n     * @returns the token address of collection.\n     * @example collection.tokenAddress // EvmAddress\n     */\n    get: function () {\n      return this._data.tokenAddress;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftCollection.prototype, \"contractType\", {\n    /**\n     * @returns the token type of collection.\n     * @example collection.tokenAddress // 'ERC721'\n     */\n    get: function () {\n      return this._data.contractType;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftCollection.prototype, \"name\", {\n    /**\n     * @returns the token name of collection.\n     * @example collection.tokenAddress // 'Test NFT'\n     */\n    get: function () {\n      return this._data.name;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftCollection.prototype, \"symbol\", {\n    /**\n     * @returns the token symbol of collection.\n     * @example collection.symbol // 'TEST'\n     */\n    get: function () {\n      return this._data.symbol;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  EvmNftCollection.parse = function (data, core) {\n    return __assign(__assign({}, data), {\n      tokenAddress: EvmAddress_1.EvmAddress.create(data.tokenAddress, core),\n      chain: EvmChain_1.EvmChain.create(data.chain, core),\n      contractType: (0, common_core_1.maybe)(data.contractType)\n    });\n  };\n  return EvmNftCollection;\n}();\nexports.EvmNftCollection = EvmNftCollection;","map":{"version":3,"sources":["../../../src/dataTypes/EvmNftCollection/EvmNftCollection.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EvmNftCollection = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar EvmAddress_1 = require(\"../EvmAddress\");\nvar EvmChain_1 = require(\"../EvmChain\");\n/**\n * The EvmNftCollection is a representation of an nft collection.\n *\n * @category DataType\n */\nvar EvmNftCollection = /** @class */ (function () {\n    function EvmNftCollection(data, core) {\n        this._data = EvmNftCollection.parse(data, core);\n    }\n    /**\n     * Create a new instance of EvmNftCollection from any valid transaction input\n     * @param data - the EvmNftCollectionish type\n     * @example const collection = EvmTransaction.create(data);\n     */\n    EvmNftCollection.create = function (data, core) {\n        if (data instanceof EvmNftCollection) {\n            return data;\n        }\n        var finalCore = core !== null && core !== void 0 ? core : common_core_1.CoreProvider.getDefault();\n        return new EvmNftCollection(data, finalCore);\n    };\n    /**\n     * Check the equality between two Evm collections. It compares their hashes and collections.\n     * @param dataA - The first collection to compare\n     * @param dataB - The second collection to compare\n     * @example EvmNftCollection.equals(dataA, dataB)\n     */\n    EvmNftCollection.equals = function (dataA, dataB) {\n        var collectionA = EvmNftCollection.create(dataA);\n        var collectionB = EvmNftCollection.create(dataB);\n        if (!collectionA.chain.equals(collectionB.chain)) {\n            return false;\n        }\n        if (!collectionA.tokenAddress.equals(collectionB.tokenAddress)) {\n            return false;\n        }\n        return true;\n    };\n    /**\n     * Checks the equality of the current collection with another evm collection\n     * @param data - the collection to compare with\n     * @example\n     * ```ts\n     * collection.equals(data)\n     * ```\n     */\n    EvmNftCollection.prototype.equals = function (data) {\n        return EvmNftCollection.equals(this, data);\n    };\n    /**\n     * @returns a JSON represention of the collection.\n     * @example\n     * ```\n     * collection.toJSON()\n     * ```\n     */\n    EvmNftCollection.prototype.toJSON = function () {\n        var data = this._data;\n        return __assign(__assign({}, data), { chain: data.chain.format(), tokenAddress: data.tokenAddress.format() });\n    };\n    /**\n     * @returns a JSON represention of the collection.\n     * @example\n     * ```\n     * collection.format()\n     * ```\n     */\n    EvmNftCollection.prototype.format = function () {\n        return this.toJSON();\n    };\n    Object.defineProperty(EvmNftCollection.prototype, \"result\", {\n        /**\n         * @returns all the data without casting it to JSON.\n         * @example collection.result\n         */\n        get: function () {\n            return this._data;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNftCollection.prototype, \"chain\", {\n        /**\n         * @returns the chain where the collection is deployed.\n         * @example collection.chain // EvmChain\n         */\n        get: function () {\n            return this._data.chain;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNftCollection.prototype, \"tokenAddress\", {\n        /**\n         * @returns the token address of collection.\n         * @example collection.tokenAddress // EvmAddress\n         */\n        get: function () {\n            return this._data.tokenAddress;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNftCollection.prototype, \"contractType\", {\n        /**\n         * @returns the token type of collection.\n         * @example collection.tokenAddress // 'ERC721'\n         */\n        get: function () {\n            return this._data.contractType;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNftCollection.prototype, \"name\", {\n        /**\n         * @returns the token name of collection.\n         * @example collection.tokenAddress // 'Test NFT'\n         */\n        get: function () {\n            return this._data.name;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNftCollection.prototype, \"symbol\", {\n        /**\n         * @returns the token symbol of collection.\n         * @example collection.symbol // 'TEST'\n         */\n        get: function () {\n            return this._data.symbol;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    EvmNftCollection.parse = function (data, core) { return (__assign(__assign({}, data), { tokenAddress: EvmAddress_1.EvmAddress.create(data.tokenAddress, core), chain: EvmChain_1.EvmChain.create(data.chain, core), contractType: (0, common_core_1.maybe)(data.contractType) })); };\n    return EvmNftCollection;\n}());\nexports.EvmNftCollection = EvmNftCollection;\n//# sourceMappingURL=EvmNftCollection.js.map"]},"metadata":{},"sourceType":"script"}