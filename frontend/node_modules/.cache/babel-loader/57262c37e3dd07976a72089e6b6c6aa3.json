{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EvmStreamResultParser = void 0;\nvar common_evm_utils_1 = require(\"@moralisweb3/common-evm-utils\");\nvar StreamErc1155Approval_1 = require(\"../StreamErc1155Approval/StreamErc1155Approval\");\nvar StreamErc20Approval_1 = require(\"../StreamErc20Approval/StreamErc20Approval\");\nvar StreamErc20Transfer_1 = require(\"../StreamErc20Transfer/StreamErc20Transfer\");\nvar StreamErc721Approval_1 = require(\"../StreamErc721Approval/StreamErc721Approval\");\nvar StreamEvmInternalTransaction_1 = require(\"../StreamEvmInternalTransaction/StreamEvmInternalTransaction\");\nvar StreamEvmNftTransfer_1 = require(\"../StreamEvmNftTransfer/StreamEvmNftTransfer\");\nvar StreamEvmTransaction_1 = require(\"../StreamEvmTransaction/StreamEvmTransaction\");\nvar StreamEvmTransactionLog_1 = require(\"../StreamEvmTransactionLog/StreamEvmTransactionLog\");\nvar StreamNativeBalance_1 = require(\"../StreamNativeBalance\");\nvar EvmStreamResultParser = /** @class */function () {\n  function EvmStreamResultParser() {}\n  EvmStreamResultParser.parseChainId = function (value, core) {\n    // Only needed for the initial test-response where we get an empty string as chain\n    return value === '' ? common_evm_utils_1.EvmChain.ETHEREUM : common_evm_utils_1.EvmChain.create(value, core);\n  };\n  EvmStreamResultParser.parseErc20Transfers = function (value, chain) {\n    return value.map(function (transfer) {\n      return StreamErc20Transfer_1.StreamErc20Transfer.create(__assign({\n        chain: chain\n      }, transfer));\n    });\n  };\n  EvmStreamResultParser.parseErc20Approvals = function (value, chain) {\n    return value.map(function (approval) {\n      return StreamErc20Approval_1.StreamErc20Approval.create(__assign({\n        chain: chain\n      }, approval));\n    });\n  };\n  EvmStreamResultParser.parseNftTransfers = function (value, chain) {\n    return value.map(function (transfer) {\n      return StreamEvmNftTransfer_1.StreamEvmNftTransfer.create(__assign({\n        chain: chain\n      }, transfer));\n    });\n  };\n  EvmStreamResultParser.parseNftApprovals = function (value, chain) {\n    return {\n      ERC721: value.ERC721.map(function (approval) {\n        return StreamErc721Approval_1.StreamErc721Approval.create(__assign({\n          chain: chain\n        }, approval));\n      }),\n      ERC1155: value.ERC1155.map(function (approval) {\n        return StreamErc1155Approval_1.StreamErc1155Approval.create(__assign({\n          chain: chain\n        }, approval));\n      })\n    };\n  };\n  EvmStreamResultParser.parseBlock = function (value, chain) {\n    if (value.number === '') {\n      return common_evm_utils_1.EvmSimpleBlock.create({\n        chain: chain,\n        number: 0,\n        hash: '',\n        timestamp: '0'\n      });\n    }\n    return common_evm_utils_1.EvmSimpleBlock.create(__assign({\n      chain: chain\n    }, value));\n  };\n  EvmStreamResultParser.parseLogs = function (value, chain) {\n    return value.map(function (log) {\n      return StreamEvmTransactionLog_1.StreamEvmTransactionLog.create(__assign({\n        chain: chain\n      }, log));\n    });\n  };\n  EvmStreamResultParser.parseTransactions = function (value, chain) {\n    return value.map(function (transaction) {\n      return StreamEvmTransaction_1.StreamEvmTransaction.create(__assign({\n        chain: chain\n      }, transaction));\n    });\n  };\n  EvmStreamResultParser.parseInternalTransactions = function (value, chain) {\n    return value.map(function (transaction) {\n      return StreamEvmInternalTransaction_1.StreamEvmInternalTransaction.create(__assign({\n        chain: chain\n      }, transaction));\n    });\n  };\n  EvmStreamResultParser.parseNativeBalances = function (value) {\n    return value.map(function (nativeBalance) {\n      return StreamNativeBalance_1.StreamNativeBalance.create(nativeBalance);\n    });\n  };\n  var _a;\n  _a = EvmStreamResultParser;\n  EvmStreamResultParser.parse = function (value, core) {\n    var chain = _a.parseChainId(value.chainId, core);\n    return {\n      chain: chain,\n      erc20Transfers: _a.parseErc20Transfers(value.erc20Transfers, chain),\n      erc20Approvals: _a.parseErc20Approvals(value.erc20Approvals, chain),\n      nftTransfers: _a.parseNftTransfers(value.nftTransfers, chain),\n      /**\n       * @deprecated Will be removed. Use nftTokenApprovals\n       */\n      nftApprovals: _a.parseNftApprovals(value.nftApprovals, chain),\n      block: _a.parseBlock(value.block, chain),\n      logs: _a.parseLogs(value.logs, chain),\n      txs: _a.parseTransactions(value.txs, chain),\n      txsInternal: _a.parseInternalTransactions(value.txsInternal, chain),\n      abi: value.abi,\n      retries: value.retries,\n      confirmed: value.confirmed,\n      streamId: value.streamId,\n      tag: value.tag,\n      nativeBalances: _a.parseNativeBalances(value.nativeBalances)\n    };\n  };\n  return EvmStreamResultParser;\n}();\nexports.EvmStreamResultParser = EvmStreamResultParser;","map":{"version":3,"sources":["../../../src/dataTypes/EvmStreamResult/EvmStreamResultParser.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EvmStreamResultParser = void 0;\nvar common_evm_utils_1 = require(\"@moralisweb3/common-evm-utils\");\nvar StreamErc1155Approval_1 = require(\"../StreamErc1155Approval/StreamErc1155Approval\");\nvar StreamErc20Approval_1 = require(\"../StreamErc20Approval/StreamErc20Approval\");\nvar StreamErc20Transfer_1 = require(\"../StreamErc20Transfer/StreamErc20Transfer\");\nvar StreamErc721Approval_1 = require(\"../StreamErc721Approval/StreamErc721Approval\");\nvar StreamEvmInternalTransaction_1 = require(\"../StreamEvmInternalTransaction/StreamEvmInternalTransaction\");\nvar StreamEvmNftTransfer_1 = require(\"../StreamEvmNftTransfer/StreamEvmNftTransfer\");\nvar StreamEvmTransaction_1 = require(\"../StreamEvmTransaction/StreamEvmTransaction\");\nvar StreamEvmTransactionLog_1 = require(\"../StreamEvmTransactionLog/StreamEvmTransactionLog\");\nvar StreamNativeBalance_1 = require(\"../StreamNativeBalance\");\nvar EvmStreamResultParser = /** @class */ (function () {\n    function EvmStreamResultParser() {\n    }\n    EvmStreamResultParser.parseChainId = function (value, core) {\n        // Only needed for the initial test-response where we get an empty string as chain\n        return value === '' ? common_evm_utils_1.EvmChain.ETHEREUM : common_evm_utils_1.EvmChain.create(value, core);\n    };\n    EvmStreamResultParser.parseErc20Transfers = function (value, chain) {\n        return value.map(function (transfer) {\n            return StreamErc20Transfer_1.StreamErc20Transfer.create(__assign({ chain: chain }, transfer));\n        });\n    };\n    EvmStreamResultParser.parseErc20Approvals = function (value, chain) {\n        return value.map(function (approval) {\n            return StreamErc20Approval_1.StreamErc20Approval.create(__assign({ chain: chain }, approval));\n        });\n    };\n    EvmStreamResultParser.parseNftTransfers = function (value, chain) {\n        return value.map(function (transfer) {\n            return StreamEvmNftTransfer_1.StreamEvmNftTransfer.create(__assign({ chain: chain }, transfer));\n        });\n    };\n    EvmStreamResultParser.parseNftApprovals = function (value, chain) {\n        return {\n            ERC721: value.ERC721.map(function (approval) {\n                return StreamErc721Approval_1.StreamErc721Approval.create(__assign({ chain: chain }, approval));\n            }),\n            ERC1155: value.ERC1155.map(function (approval) {\n                return StreamErc1155Approval_1.StreamErc1155Approval.create(__assign({ chain: chain }, approval));\n            }),\n        };\n    };\n    EvmStreamResultParser.parseBlock = function (value, chain) {\n        if (value.number === '') {\n            return common_evm_utils_1.EvmSimpleBlock.create({\n                chain: chain,\n                number: 0,\n                hash: '',\n                timestamp: '0',\n            });\n        }\n        return common_evm_utils_1.EvmSimpleBlock.create(__assign({ chain: chain }, value));\n    };\n    EvmStreamResultParser.parseLogs = function (value, chain) {\n        return value.map(function (log) {\n            return StreamEvmTransactionLog_1.StreamEvmTransactionLog.create(__assign({ chain: chain }, log));\n        });\n    };\n    EvmStreamResultParser.parseTransactions = function (value, chain) {\n        return value.map(function (transaction) {\n            return StreamEvmTransaction_1.StreamEvmTransaction.create(__assign({ chain: chain }, transaction));\n        });\n    };\n    EvmStreamResultParser.parseInternalTransactions = function (value, chain) {\n        return value.map(function (transaction) {\n            return StreamEvmInternalTransaction_1.StreamEvmInternalTransaction.create(__assign({ chain: chain }, transaction));\n        });\n    };\n    EvmStreamResultParser.parseNativeBalances = function (value) {\n        return value.map(function (nativeBalance) { return StreamNativeBalance_1.StreamNativeBalance.create(nativeBalance); });\n    };\n    var _a;\n    _a = EvmStreamResultParser;\n    EvmStreamResultParser.parse = function (value, core) {\n        var chain = _a.parseChainId(value.chainId, core);\n        return {\n            chain: chain,\n            erc20Transfers: _a.parseErc20Transfers(value.erc20Transfers, chain),\n            erc20Approvals: _a.parseErc20Approvals(value.erc20Approvals, chain),\n            nftTransfers: _a.parseNftTransfers(value.nftTransfers, chain),\n            /**\n             * @deprecated Will be removed. Use nftTokenApprovals\n             */\n            nftApprovals: _a.parseNftApprovals(value.nftApprovals, chain),\n            block: _a.parseBlock(value.block, chain),\n            logs: _a.parseLogs(value.logs, chain),\n            txs: _a.parseTransactions(value.txs, chain),\n            txsInternal: _a.parseInternalTransactions(value.txsInternal, chain),\n            abi: value.abi,\n            retries: value.retries,\n            confirmed: value.confirmed,\n            streamId: value.streamId,\n            tag: value.tag,\n            nativeBalances: _a.parseNativeBalances(value.nativeBalances),\n        };\n    };\n    return EvmStreamResultParser;\n}());\nexports.EvmStreamResultParser = EvmStreamResultParser;\n//# sourceMappingURL=EvmStreamResultParser.js.map"]},"metadata":{},"sourceType":"script"}