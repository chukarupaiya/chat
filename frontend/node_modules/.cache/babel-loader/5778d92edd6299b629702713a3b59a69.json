{"ast":null,"code":"\"use strict\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.makeGetStreamById = void 0;\nvar api_utils_1 = require(\"@moralisweb3/api-utils\");\nvar StreamNetwork_1 = require(\"../utils/StreamNetwork\");\nvar IncorrectNetworkError_1 = require(\"../utils/IncorrectNetworkError\");\nvar common_streams_utils_1 = require(\"@moralisweb3/common-streams-utils\");\nvar makeGetAptosStream = function (core, baseUrl, _a) {\n  var networkType = _a.networkType,\n    network = _a.network,\n    options = __rest(_a, [\"networkType\", \"network\"]);\n  return new api_utils_1.OperationResolver(common_streams_utils_1.getStreamAptosOperation, baseUrl, core).fetch(options);\n};\nvar makeGetEvmStream = function (core, baseUrl, _a) {\n  var networkType = _a.networkType,\n    network = _a.network,\n    options = __rest(_a, [\"networkType\", \"network\"]);\n  return new api_utils_1.OperationResolver(common_streams_utils_1.getStreamEvmOperation, baseUrl, core).fetch(options);\n};\nvar makeGetStreamById = function (core, baseUrl) {\n  return function (getStreamOptions) {\n    // Backwards compatibility for the 'network' parameter\n    if (!getStreamOptions.networkType && getStreamOptions.network) {\n      getStreamOptions.networkType = getStreamOptions.network;\n    }\n    switch (getStreamOptions.networkType) {\n      case StreamNetwork_1.StreamNetwork.APTOS:\n        return makeGetAptosStream(core, baseUrl, getStreamOptions);\n      case StreamNetwork_1.StreamNetwork.EVM:\n        return makeGetEvmStream(core, baseUrl, getStreamOptions);\n      default:\n        if (getStreamOptions.networkType === undefined) {\n          return makeGetEvmStream(core, baseUrl, getStreamOptions);\n        }\n        throw new IncorrectNetworkError_1.IncorrectNetworkError(getStreamOptions.networkType);\n    }\n  };\n};\nexports.makeGetStreamById = makeGetStreamById;","map":{"version":3,"sources":["../../src/methods/getById.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;AACA,IAAA,eAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;AACA,IAAA,uBAAA,GAAA,OAAA,CAAA,gCAAA,CAAA;AACA,IAAA,sBAAA,GAAA,OAAA,CAAA,mCAAA,CAAA;AAsBA,IAAM,kBAAkB,GAAG,UACzB,IAAU,EACV,OAAe,EACf,EAA2D,EAAA;EAAzD,IAAA,WAAW,GAAA,EAAA,CAAA,WAAA;IAAE,OAAO,GAAA,EAAA,CAAA,OAAA;IAAK,OAAO,GAAA,MAAA,CAAA,EAAA,EAAlC,CAAA,aAAA,EAAA,SAAA,CAAoC,CAAF;EAElC,OAAO,IAAI,WAAA,CAAA,iBAAiB,CAAC,sBAAA,CAAA,uBAAuB,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC;AACrF,CAAC;AAED,IAAM,gBAAgB,GAAG,UAAC,IAAU,EAAE,OAAe,EAAE,EAAyD,EAAA;EAAvD,IAAA,WAAW,GAAA,EAAA,CAAA,WAAA;IAAE,OAAO,GAAA,EAAA,CAAA,OAAA;IAAK,OAAO,GAAA,MAAA,CAAA,EAAA,EAAlC,CAAA,aAAA,EAAA,SAAA,CAAoC,CAAF;EACvF,OAAO,IAAI,WAAA,CAAA,iBAAiB,CAAC,sBAAA,CAAA,qBAAqB,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC;AACnF,CAAC;AAEM,IAAM,iBAAiB,GAAG,UAAC,IAAU,EAAE,OAAe,EAAA;EAC3D,OAAQ,UAAC,gBAAkC,EAAA;IACzC;IACA,IAAI,CAAC,gBAAgB,CAAC,WAAW,IAAI,gBAAgB,CAAC,OAAO,EAAE;MAC7D,gBAAgB,CAAC,WAAW,GAAG,gBAAgB,CAAC,OAAO;IACxD;IAED,QAAQ,gBAAgB,CAAC,WAAW;MAClC,KAAK,eAAA,CAAA,aAAa,CAAC,KAAK;QACtB,OAAO,kBAAkB,CAAC,IAAI,EAAE,OAAO,EAAE,gBAAgB,CAAC;MAC5D,KAAK,eAAA,CAAA,aAAa,CAAC,GAAG;QACpB,OAAO,gBAAgB,CAAC,IAAI,EAAE,OAAO,EAAE,gBAAgB,CAAC;MAC1D;QACE,IAAI,gBAAgB,CAAC,WAAW,KAAK,SAAS,EAAE;UAC9C,OAAO,gBAAgB,CAAC,IAAI,EAAE,OAAO,EAAE,gBAAgB,CAAC;QACzD;QACD,MAAM,IAAI,uBAAA,CAAA,qBAAqB,CAAC,gBAAgB,CAAC,WAAW,CAAC;IAAC;EAEpE,CAAC;AACH,CAAC;AAnBY,OAAA,CAAA,iBAAiB,GAAA,iBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.makeGetStreamById = void 0;\nvar api_utils_1 = require(\"@moralisweb3/api-utils\");\nvar StreamNetwork_1 = require(\"../utils/StreamNetwork\");\nvar IncorrectNetworkError_1 = require(\"../utils/IncorrectNetworkError\");\nvar common_streams_utils_1 = require(\"@moralisweb3/common-streams-utils\");\nvar makeGetAptosStream = function (core, baseUrl, _a) {\n    var networkType = _a.networkType, network = _a.network, options = __rest(_a, [\"networkType\", \"network\"]);\n    return new api_utils_1.OperationResolver(common_streams_utils_1.getStreamAptosOperation, baseUrl, core).fetch(options);\n};\nvar makeGetEvmStream = function (core, baseUrl, _a) {\n    var networkType = _a.networkType, network = _a.network, options = __rest(_a, [\"networkType\", \"network\"]);\n    return new api_utils_1.OperationResolver(common_streams_utils_1.getStreamEvmOperation, baseUrl, core).fetch(options);\n};\nvar makeGetStreamById = function (core, baseUrl) {\n    return (function (getStreamOptions) {\n        // Backwards compatibility for the 'network' parameter\n        if (!getStreamOptions.networkType && getStreamOptions.network) {\n            getStreamOptions.networkType = getStreamOptions.network;\n        }\n        switch (getStreamOptions.networkType) {\n            case StreamNetwork_1.StreamNetwork.APTOS:\n                return makeGetAptosStream(core, baseUrl, getStreamOptions);\n            case StreamNetwork_1.StreamNetwork.EVM:\n                return makeGetEvmStream(core, baseUrl, getStreamOptions);\n            default:\n                if (getStreamOptions.networkType === undefined) {\n                    return makeGetEvmStream(core, baseUrl, getStreamOptions);\n                }\n                throw new IncorrectNetworkError_1.IncorrectNetworkError(getStreamOptions.networkType);\n        }\n    });\n};\nexports.makeGetStreamById = makeGetStreamById;\n//# sourceMappingURL=getById.js.map"]},"metadata":{},"sourceType":"script"}