{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.searchNFTsOperation = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar dataTypes_1 = require(\"../../dataTypes\");\nvar EvmChainResolver_1 = require(\"../../EvmChainResolver\");\n/** Get NFTs that match a given metadata search query. */\nexports.searchNFTsOperation = {\n  method: 'GET',\n  name: 'searchNFTs',\n  id: 'searchNFTs',\n  groupName: 'nft',\n  urlPathPattern: '/nft/search',\n  urlSearchParamNames: ['chain', 'format', 'q', 'filter', 'fromBlock', 'toBlock', 'fromDate', 'toDate', 'addresses', 'cursor', 'limit', 'disableTotal'],\n  firstPageIndex: 0,\n  getRequestUrlParams: getRequestUrlParams,\n  serializeRequest: serializeRequest,\n  deserializeRequest: deserializeRequest,\n  deserializeResponse: deserializeResponse\n};\n// Methods\nfunction getRequestUrlParams(request, core) {\n  var _a;\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n    format: request.format,\n    q: request.q,\n    filter: request.filter,\n    from_block: (0, common_core_1.maybe)(request.fromBlock, String),\n    to_block: (0, common_core_1.maybe)(request.toBlock, String),\n    from_date: request.fromDate ? new Date(request.fromDate).toISOString() : undefined,\n    to_date: request.toDate ? new Date(request.toDate).toISOString() : undefined,\n    addresses: (_a = request.addresses) === null || _a === void 0 ? void 0 : _a.map(function (address) {\n      return dataTypes_1.EvmAddress.create(address, core).lowercase;\n    }),\n    cursor: request.cursor,\n    limit: (0, common_core_1.maybe)(request.limit, String),\n    disable_total: request.disableTotal\n  };\n}\nfunction deserializeResponse(jsonResponse, request, core) {\n  var _a;\n  return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (nft) {\n    return {\n      token: dataTypes_1.EvmNft.create({\n        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core),\n        contractType: nft.contract_type,\n        tokenAddress: nft.token_address,\n        tokenId: nft.token_id,\n        tokenUri: nft.token_uri,\n        metadata: nft.metadata,\n        tokenHash: nft.token_hash\n      }, core),\n      tokenHash: nft.token_hash,\n      blockNumberMinted: nft.block_number_minted,\n      lastMetadataSync: nft.last_metadata_sync ? new Date(nft.last_metadata_sync) : undefined,\n      lastTokenUriSync: nft.last_token_uri_sync ? new Date(nft.last_token_uri_sync) : undefined,\n      batchId: nft.batch_id,\n      frozen: nft.frozen,\n      frozenLogIndex: nft.frozen_log_index,\n      imported: nft.imported,\n      isValid: nft.is_valid,\n      openseaLookup: nft.opensea_lookup,\n      resyncing: nft.resyncing,\n      syncing: nft.syncing,\n      updatedAt: new Date(nft.updatedAt)\n    };\n  });\n}\nfunction serializeRequest(request, core) {\n  var _a;\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n    format: request.format,\n    q: request.q,\n    filter: request.filter,\n    fromBlock: request.fromBlock,\n    toBlock: request.toBlock,\n    fromDate: request.fromDate,\n    toDate: request.toDate,\n    addresses: (_a = request.addresses) === null || _a === void 0 ? void 0 : _a.map(function (address) {\n      return dataTypes_1.EvmAddress.create(address, core).checksum;\n    }),\n    cursor: request.cursor,\n    limit: request.limit,\n    disableTotal: request.disableTotal\n  };\n}\nfunction deserializeRequest(jsonRequest, core) {\n  return {\n    chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),\n    format: jsonRequest.format,\n    q: jsonRequest.q,\n    filter: jsonRequest.filter,\n    fromBlock: jsonRequest.fromBlock,\n    toBlock: jsonRequest.toBlock,\n    fromDate: jsonRequest.fromDate,\n    toDate: jsonRequest.toDate,\n    addresses: (0, common_core_1.maybe)(jsonRequest.addresses, function (addresses) {\n      return addresses.map(function (address) {\n        return dataTypes_1.EvmAddress.create(address, core);\n      });\n    }),\n    cursor: jsonRequest.cursor,\n    limit: jsonRequest.limit,\n    disableTotal: jsonRequest.disableTotal\n  };\n}","map":{"version":3,"sources":["../../../src/operations/nft/searchNFTsOperation.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.searchNFTsOperation = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar dataTypes_1 = require(\"../../dataTypes\");\nvar EvmChainResolver_1 = require(\"../../EvmChainResolver\");\n/** Get NFTs that match a given metadata search query. */\nexports.searchNFTsOperation = {\n    method: 'GET',\n    name: 'searchNFTs',\n    id: 'searchNFTs',\n    groupName: 'nft',\n    urlPathPattern: '/nft/search',\n    urlSearchParamNames: [\n        'chain',\n        'format',\n        'q',\n        'filter',\n        'fromBlock',\n        'toBlock',\n        'fromDate',\n        'toDate',\n        'addresses',\n        'cursor',\n        'limit',\n        'disableTotal',\n    ],\n    firstPageIndex: 0,\n    getRequestUrlParams: getRequestUrlParams,\n    serializeRequest: serializeRequest,\n    deserializeRequest: deserializeRequest,\n    deserializeResponse: deserializeResponse,\n};\n// Methods\nfunction getRequestUrlParams(request, core) {\n    var _a;\n    return {\n        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n        format: request.format,\n        q: request.q,\n        filter: request.filter,\n        from_block: (0, common_core_1.maybe)(request.fromBlock, String),\n        to_block: (0, common_core_1.maybe)(request.toBlock, String),\n        from_date: request.fromDate ? new Date(request.fromDate).toISOString() : undefined,\n        to_date: request.toDate ? new Date(request.toDate).toISOString() : undefined,\n        addresses: (_a = request.addresses) === null || _a === void 0 ? void 0 : _a.map(function (address) { return dataTypes_1.EvmAddress.create(address, core).lowercase; }),\n        cursor: request.cursor,\n        limit: (0, common_core_1.maybe)(request.limit, String),\n        disable_total: request.disableTotal,\n    };\n}\nfunction deserializeResponse(jsonResponse, request, core) {\n    var _a;\n    return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (nft) { return ({\n        token: dataTypes_1.EvmNft.create({\n            chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core),\n            contractType: nft.contract_type,\n            tokenAddress: nft.token_address,\n            tokenId: nft.token_id,\n            tokenUri: nft.token_uri,\n            metadata: nft.metadata,\n            tokenHash: nft.token_hash,\n        }, core),\n        tokenHash: nft.token_hash,\n        blockNumberMinted: nft.block_number_minted,\n        lastMetadataSync: nft.last_metadata_sync ? new Date(nft.last_metadata_sync) : undefined,\n        lastTokenUriSync: nft.last_token_uri_sync ? new Date(nft.last_token_uri_sync) : undefined,\n        batchId: nft.batch_id,\n        frozen: nft.frozen,\n        frozenLogIndex: nft.frozen_log_index,\n        imported: nft.imported,\n        isValid: nft.is_valid,\n        openseaLookup: nft.opensea_lookup,\n        resyncing: nft.resyncing,\n        syncing: nft.syncing,\n        updatedAt: new Date(nft.updatedAt),\n    }); });\n}\nfunction serializeRequest(request, core) {\n    var _a;\n    return {\n        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n        format: request.format,\n        q: request.q,\n        filter: request.filter,\n        fromBlock: request.fromBlock,\n        toBlock: request.toBlock,\n        fromDate: request.fromDate,\n        toDate: request.toDate,\n        addresses: (_a = request.addresses) === null || _a === void 0 ? void 0 : _a.map(function (address) { return dataTypes_1.EvmAddress.create(address, core).checksum; }),\n        cursor: request.cursor,\n        limit: request.limit,\n        disableTotal: request.disableTotal,\n    };\n}\nfunction deserializeRequest(jsonRequest, core) {\n    return {\n        chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),\n        format: jsonRequest.format,\n        q: jsonRequest.q,\n        filter: jsonRequest.filter,\n        fromBlock: jsonRequest.fromBlock,\n        toBlock: jsonRequest.toBlock,\n        fromDate: jsonRequest.fromDate,\n        toDate: jsonRequest.toDate,\n        addresses: (0, common_core_1.maybe)(jsonRequest.addresses, function (addresses) {\n            return addresses.map(function (address) { return dataTypes_1.EvmAddress.create(address, core); });\n        }),\n        cursor: jsonRequest.cursor,\n        limit: jsonRequest.limit,\n        disableTotal: jsonRequest.disableTotal,\n    };\n}\n//# sourceMappingURL=searchNFTsOperation.js.map"]},"metadata":{},"sourceType":"script"}