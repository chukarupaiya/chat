{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getMessageFromApiRequestError = exports.isApiRequestError = void 0;\nvar axios_1 = require(\"axios\");\n/**\n * Verify if the error is an AxiosError that is caused by a HTTP API error.\n */\nvar isApiRequestError = function (error) {\n  // Check if the error is an axios error\n  if (!(error instanceof axios_1.AxiosError)) {\n    return false;\n  }\n  // Check if the error is a result of a 400 or 500 response\n  if (error.code !== axios_1.AxiosError.ERR_BAD_REQUEST && error.code !== axios_1.AxiosError.ERR_BAD_RESPONSE) {\n    return false;\n  }\n  return true;\n};\nexports.isApiRequestError = isApiRequestError;\n/**\n * Extract the message from a ApiRequestError. Note that this is implemented based on how the Moralis APIs return Errors.\n * This can be in the form:\n * - { message: 'some message' }\n * - { message: ['some message', 'some other message'] }\n * - { }\n */\nvar getMessageFromApiRequestError = function (error) {\n  var _a = error.response.data,\n    message = _a.message,\n    details = _a.details;\n  var result = 'Unknown error (no error info returned from API)';\n  if (Array.isArray(message)) {\n    result = message.join(', ');\n  } else if (typeof message === 'string') {\n    result = message;\n  }\n  if (details) {\n    result += \" \".concat(JSON.stringify(details));\n  }\n  return result;\n};\nexports.getMessageFromApiRequestError = getMessageFromApiRequestError;","map":{"version":3,"sources":["../../../src/controllers/RequestController/ApiRequestError.ts"],"names":[],"mappings":";;;;;;AAAA,IAAA,OAAA,GAAA,OAAA,CAAA,OAAA,CAAA;AAMA;;AAEG;AACI,IAAM,iBAAiB,GAAG,UAAC,KAAc,EAAA;EAC9C;EACA,IAAI,EAAE,KAAK,YAAY,OAAA,CAAA,UAAU,CAAC,EAAE;IAClC,OAAO,KAAK;EACb;EAED;EACA,IAAI,KAAK,CAAC,IAAI,KAAK,OAAA,CAAA,UAAU,CAAC,eAAe,IAAI,KAAK,CAAC,IAAI,KAAK,OAAA,CAAA,UAAU,CAAC,gBAAgB,EAAE;IAC3F,OAAO,KAAK;EACb;EAED,OAAO,IAAI;AACb,CAAC;AAZY,OAAA,CAAA,iBAAiB,GAAA,iBAAA;AAc9B;;;;;;AAMG;AACI,IAAM,6BAA6B,GAAG,UAAC,KAAsB,EAAA;EAC5D,IAAA,EAAA,GAAuB,KAAK,CAAC,QAAQ,CAAC,IAAI;IAAxC,OAAO,GAAA,EAAA,CAAA,OAAA;IAAE,OAAO,GAAA,EAAA,CAAA,OAAwB;EAEhD,IAAI,MAAM,GAAG,iDAAiD;EAE9D,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;IAC1B,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC;GAC5B,MAAM,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;IACtC,MAAM,GAAG,OAAO;EACjB;EAED,IAAI,OAAO,EAAE;IACX,MAAM,IAAI,GAAA,CAAA,MAAA,CAAI,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAE;EACxC;EAED,OAAO,MAAM;AACf,CAAC;AAhBY,OAAA,CAAA,6BAA6B,GAAA,6BAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getMessageFromApiRequestError = exports.isApiRequestError = void 0;\nvar axios_1 = require(\"axios\");\n/**\n * Verify if the error is an AxiosError that is caused by a HTTP API error.\n */\nvar isApiRequestError = function (error) {\n    // Check if the error is an axios error\n    if (!(error instanceof axios_1.AxiosError)) {\n        return false;\n    }\n    // Check if the error is a result of a 400 or 500 response\n    if (error.code !== axios_1.AxiosError.ERR_BAD_REQUEST && error.code !== axios_1.AxiosError.ERR_BAD_RESPONSE) {\n        return false;\n    }\n    return true;\n};\nexports.isApiRequestError = isApiRequestError;\n/**\n * Extract the message from a ApiRequestError. Note that this is implemented based on how the Moralis APIs return Errors.\n * This can be in the form:\n * - { message: 'some message' }\n * - { message: ['some message', 'some other message'] }\n * - { }\n */\nvar getMessageFromApiRequestError = function (error) {\n    var _a = error.response.data, message = _a.message, details = _a.details;\n    var result = 'Unknown error (no error info returned from API)';\n    if (Array.isArray(message)) {\n        result = message.join(', ');\n    }\n    else if (typeof message === 'string') {\n        result = message;\n    }\n    if (details) {\n        result += \" \".concat(JSON.stringify(details));\n    }\n    return result;\n};\nexports.getMessageFromApiRequestError = getMessageFromApiRequestError;\n//# sourceMappingURL=ApiRequestError.js.map"]},"metadata":{},"sourceType":"script"}