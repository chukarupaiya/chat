{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sha3 = void 0;\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar SHA3_NULL_S = '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';\nvar isHexStrict = function (hex) {\n  return /^(-)?0x[0-9a-f]*$/i.test(hex);\n};\nvar sha3 = function (value) {\n  var bufferValue;\n  if (isHexStrict(value) && /^0x/i.test(value.toString())) {\n    bufferValue = (0, ethereumjs_util_1.toBuffer)(value);\n  } else {\n    // Assume value is an arbitrary string\n    bufferValue = Buffer.from(value, 'utf-8');\n  }\n  var returnValue = (0, ethereumjs_util_1.bufferToHex)((0, ethereumjs_util_1.keccak256)(bufferValue));\n  if (returnValue === SHA3_NULL_S) {\n    return null;\n  }\n  return returnValue;\n};\nexports.sha3 = sha3;","map":{"version":3,"sources":["../../src/utils/sha3.ts"],"names":[],"mappings":";;;;;;AAAA,IAAA,iBAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;AAEA,IAAM,WAAW,GAAG,oEAAoE;AAExF,IAAM,WAAW,GAAG,UAAC,GAAW,EAAA;EAC9B,OAAO,oBAAoB,CAAC,IAAI,CAAC,GAAG,CAAC;AACvC,CAAC;AAEM,IAAM,IAAI,GAAG,UAAU,KAAa,EAAA;EACzC,IAAI,WAAmB;EACvB,IAAI,WAAW,CAAC,KAAK,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,EAAE;IACvD,WAAW,GAAG,CAAA,CAAA,EAAA,iBAAA,CAAA,QAAQ,EAAC,KAAK,CAAC;GAC9B,MAAM;IACL;IACA,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,OAAO,CAAC;EAC1C;EAED,IAAM,WAAW,GAAG,CAAA,CAAA,EAAA,iBAAA,CAAA,WAAW,EAAC,CAAA,CAAA,EAAA,iBAAA,CAAA,SAAS,EAAC,WAAW,CAAC,CAAC;EAEvD,IAAI,WAAW,KAAK,WAAW,EAAE;IAC/B,OAAO,IAAI;EACZ;EACD,OAAO,WAAW;AACpB,CAAC;AAfY,OAAA,CAAA,IAAI,GAAA,IAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sha3 = void 0;\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar SHA3_NULL_S = '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';\nvar isHexStrict = function (hex) {\n    return /^(-)?0x[0-9a-f]*$/i.test(hex);\n};\nvar sha3 = function (value) {\n    var bufferValue;\n    if (isHexStrict(value) && /^0x/i.test(value.toString())) {\n        bufferValue = (0, ethereumjs_util_1.toBuffer)(value);\n    }\n    else {\n        // Assume value is an arbitrary string\n        bufferValue = Buffer.from(value, 'utf-8');\n    }\n    var returnValue = (0, ethereumjs_util_1.bufferToHex)((0, ethereumjs_util_1.keccak256)(bufferValue));\n    if (returnValue === SHA3_NULL_S) {\n        return null;\n    }\n    return returnValue;\n};\nexports.sha3 = sha3;\n//# sourceMappingURL=sha3.js.map"]},"metadata":{},"sourceType":"script"}