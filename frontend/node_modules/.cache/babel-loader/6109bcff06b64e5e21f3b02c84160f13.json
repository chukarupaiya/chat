{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LoggerController = void 0;\n/* eslint-disable no-console */\nvar isMoralisError_1 = require(\"../Error/isMoralisError\");\nvar CoreConfig_1 = require(\"../Config/CoreConfig\");\nvar logLevelMap = {\n  verbose: 5,\n  debug: 4,\n  info: 3,\n  warning: 2,\n  error: 1,\n  off: 0\n};\n/**\n * LoggerController, responsible to create log messages for each module.\n * It should be created with the name of the module like `new Logger('module-name')`\n * It will then prefix any logs with that module-name for easy debugging\n * It will show only logs up to the specified `logLevel` in the MoralisConfig\n */\nvar LoggerController = /** @class */function () {\n  function LoggerController(moduleName, config) {\n    this.moduleName = moduleName;\n    this.config = config;\n  }\n  LoggerController.create = function (moduleName, core) {\n    return new LoggerController(moduleName, core.config);\n  };\n  Object.defineProperty(LoggerController.prototype, \"level\", {\n    get: function () {\n      return this.config.get(CoreConfig_1.CoreConfig.logLevel);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  LoggerController.prototype._transport = function (level, message, details) {\n    var logMessage = this._makeLogMessage(message);\n    var args = [logMessage, details].filter(function (arg) {\n      return arg != null;\n    });\n    switch (level) {\n      case 'error':\n        console.error.apply(console, args);\n        break;\n      case 'warn':\n        console.warn.apply(console, args);\n        break;\n      case 'log':\n        console.log.apply(console, args);\n        break;\n    }\n  };\n  LoggerController.prototype._shouldLog = function (logLevel) {\n    var level = logLevelMap[logLevel];\n    var acceptedLevel = logLevelMap[this.level];\n    if (level > acceptedLevel) {\n      return false;\n    }\n    return true;\n  };\n  LoggerController.prototype._makeLogMessage = function (message) {\n    return \"Moralis[\".concat(this.moduleName, \"]: \").concat(message);\n  };\n  LoggerController.prototype.error = function (error, details) {\n    if (!this._shouldLog('error')) {\n      return;\n    }\n    var message = '';\n    if (typeof error === 'string') {\n      message = error;\n    } else if ((0, isMoralisError_1.isMoralisError)(error)) {\n      message = error.message;\n      if (error.details) {\n        if (details) {\n          details._errorDetails = error.details;\n        } else {\n          details = {\n            _errorDetails: error.details\n          };\n        }\n      }\n    } else {\n      message = error.message;\n    }\n    this._transport('error', message, details);\n  };\n  LoggerController.prototype.warn = function (message, details) {\n    if (!this._shouldLog('warning')) {\n      return;\n    }\n    this._transport('warn', message, details);\n  };\n  LoggerController.prototype.info = function (message, details) {\n    if (!this._shouldLog('info')) {\n      return;\n    }\n    this._transport('log', message, details);\n  };\n  LoggerController.prototype.debug = function (message, details) {\n    if (!this._shouldLog('debug')) {\n      return;\n    }\n    this._transport('log', message, details);\n  };\n  LoggerController.prototype.verbose = function (message, details) {\n    if (!this._shouldLog('verbose')) {\n      return;\n    }\n    this._transport('log', message, details);\n  };\n  return LoggerController;\n}();\nexports.LoggerController = LoggerController;","map":{"version":3,"sources":["../../src/controllers/LoggerController.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LoggerController = void 0;\n/* eslint-disable no-console */\nvar isMoralisError_1 = require(\"../Error/isMoralisError\");\nvar CoreConfig_1 = require(\"../Config/CoreConfig\");\nvar logLevelMap = {\n    verbose: 5,\n    debug: 4,\n    info: 3,\n    warning: 2,\n    error: 1,\n    off: 0,\n};\n/**\n * LoggerController, responsible to create log messages for each module.\n * It should be created with the name of the module like `new Logger('module-name')`\n * It will then prefix any logs with that module-name for easy debugging\n * It will show only logs up to the specified `logLevel` in the MoralisConfig\n */\nvar LoggerController = /** @class */ (function () {\n    function LoggerController(moduleName, config) {\n        this.moduleName = moduleName;\n        this.config = config;\n    }\n    LoggerController.create = function (moduleName, core) {\n        return new LoggerController(moduleName, core.config);\n    };\n    Object.defineProperty(LoggerController.prototype, \"level\", {\n        get: function () {\n            return this.config.get(CoreConfig_1.CoreConfig.logLevel);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    LoggerController.prototype._transport = function (level, message, details) {\n        var logMessage = this._makeLogMessage(message);\n        var args = [logMessage, details].filter(function (arg) { return arg != null; });\n        switch (level) {\n            case 'error':\n                console.error.apply(console, args);\n                break;\n            case 'warn':\n                console.warn.apply(console, args);\n                break;\n            case 'log':\n                console.log.apply(console, args);\n                break;\n        }\n    };\n    LoggerController.prototype._shouldLog = function (logLevel) {\n        var level = logLevelMap[logLevel];\n        var acceptedLevel = logLevelMap[this.level];\n        if (level > acceptedLevel) {\n            return false;\n        }\n        return true;\n    };\n    LoggerController.prototype._makeLogMessage = function (message) {\n        return \"Moralis[\".concat(this.moduleName, \"]: \").concat(message);\n    };\n    LoggerController.prototype.error = function (error, details) {\n        if (!this._shouldLog('error')) {\n            return;\n        }\n        var message = '';\n        if (typeof error === 'string') {\n            message = error;\n        }\n        else if ((0, isMoralisError_1.isMoralisError)(error)) {\n            message = error.message;\n            if (error.details) {\n                if (details) {\n                    details._errorDetails = error.details;\n                }\n                else {\n                    details = {\n                        _errorDetails: error.details,\n                    };\n                }\n            }\n        }\n        else {\n            message = error.message;\n        }\n        this._transport('error', message, details);\n    };\n    LoggerController.prototype.warn = function (message, details) {\n        if (!this._shouldLog('warning')) {\n            return;\n        }\n        this._transport('warn', message, details);\n    };\n    LoggerController.prototype.info = function (message, details) {\n        if (!this._shouldLog('info')) {\n            return;\n        }\n        this._transport('log', message, details);\n    };\n    LoggerController.prototype.debug = function (message, details) {\n        if (!this._shouldLog('debug')) {\n            return;\n        }\n        this._transport('log', message, details);\n    };\n    LoggerController.prototype.verbose = function (message, details) {\n        if (!this._shouldLog('verbose')) {\n            return;\n        }\n        this._transport('log', message, details);\n    };\n    return LoggerController;\n}());\nexports.LoggerController = LoggerController;\n//# sourceMappingURL=LoggerController.js.map"]},"metadata":{},"sourceType":"script"}