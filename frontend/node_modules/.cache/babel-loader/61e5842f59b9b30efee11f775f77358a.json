{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BigNumberParser = void 0;\nvar Error_1 = require(\"../../Error\");\nvar BigNumberParser = /** @class */function () {\n  function BigNumberParser() {}\n  BigNumberParser.parseInt = function (value) {\n    assertNotEmpty(value);\n    if (typeof value === 'string') {\n      if (value.length === 0) {\n        throw createError('Value is empty');\n      }\n      var isNegativeHex = value.startsWith('-0x');\n      if (isNegativeHex) {\n        value = value.substring(1);\n      }\n      var result = BigInt(value);\n      if (isNegativeHex) {\n        result *= BigInt(-1);\n      }\n      return result;\n    }\n    return BigInt(value);\n  };\n  // TODO: refactor to reduce complexity\n  // eslint-disable-next-line complexity\n  BigNumberParser.parseDecimal = function (value, decimals) {\n    assertNotEmpty(value);\n    var multiplier = getMultiplier(decimals);\n    if (typeof value === 'number') {\n      return BigInt(value) * multiplier;\n    }\n    if (typeof value === 'bigint') {\n      return value * multiplier;\n    }\n    var isNegative = value.startsWith('-');\n    if (isNegative) {\n      value = value.substring(1);\n    }\n    var fragments = value.split('.');\n    if (fragments.length > 2) {\n      throw createError('Value has more than one dot');\n    }\n    if (fragments.some(function (fragment) {\n      return !fragment;\n    })) {\n      throw createError('Value has empty fragments');\n    }\n    var result;\n    if (fragments.length === 1) {\n      result = BigInt(fragments[0]) * multiplier;\n    } else {\n      var whole = fragments[0];\n      var fraction = fragments[1];\n      if (fraction.length > decimals) {\n        throw createError(\"Value has too long fractional part: \".concat(fraction.length, \", max: \").concat(decimals));\n      }\n      if (fraction.length < decimals) {\n        fraction = fraction.padEnd(decimals, '0');\n      }\n      result = BigInt(whole) * multiplier + BigInt(fraction);\n    }\n    if (isNegative) {\n      result *= BigInt(-1);\n    }\n    return result;\n  };\n  return BigNumberParser;\n}();\nexports.BigNumberParser = BigNumberParser;\nfunction assertNotEmpty(value) {\n  if (value === null) {\n    throw createError('Value is null');\n  }\n  if (value === undefined) {\n    throw createError('Value is undefined');\n  }\n}\nfunction getMultiplier(decimals) {\n  if (decimals < 0) {\n    throw createError('Invalid decimals');\n  }\n  // decimals = 0, multiplier = 1\n  // decimals = 1, multiplier = 10\n  // decimals = 2, multiplier = 100\n  // ...\n  var ten = BigInt(10);\n  var multiplier = BigInt(1);\n  while (decimals-- > 0) {\n    multiplier *= ten;\n  }\n  return multiplier;\n}\nfunction createError(message) {\n  return new Error_1.CoreError({\n    code: Error_1.CoreErrorCode.BIG_NUMBER_ERROR,\n    message: message\n  });\n}","map":{"version":3,"sources":["../../../src/dataTypes/BigNumber/BigNumberParser.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BigNumberParser = void 0;\nvar Error_1 = require(\"../../Error\");\nvar BigNumberParser = /** @class */ (function () {\n    function BigNumberParser() {\n    }\n    BigNumberParser.parseInt = function (value) {\n        assertNotEmpty(value);\n        if (typeof value === 'string') {\n            if (value.length === 0) {\n                throw createError('Value is empty');\n            }\n            var isNegativeHex = value.startsWith('-0x');\n            if (isNegativeHex) {\n                value = value.substring(1);\n            }\n            var result = BigInt(value);\n            if (isNegativeHex) {\n                result *= BigInt(-1);\n            }\n            return result;\n        }\n        return BigInt(value);\n    };\n    // TODO: refactor to reduce complexity\n    // eslint-disable-next-line complexity\n    BigNumberParser.parseDecimal = function (value, decimals) {\n        assertNotEmpty(value);\n        var multiplier = getMultiplier(decimals);\n        if (typeof value === 'number') {\n            return BigInt(value) * multiplier;\n        }\n        if (typeof value === 'bigint') {\n            return value * multiplier;\n        }\n        var isNegative = value.startsWith('-');\n        if (isNegative) {\n            value = value.substring(1);\n        }\n        var fragments = value.split('.');\n        if (fragments.length > 2) {\n            throw createError('Value has more than one dot');\n        }\n        if (fragments.some(function (fragment) { return !fragment; })) {\n            throw createError('Value has empty fragments');\n        }\n        var result;\n        if (fragments.length === 1) {\n            result = BigInt(fragments[0]) * multiplier;\n        }\n        else {\n            var whole = fragments[0];\n            var fraction = fragments[1];\n            if (fraction.length > decimals) {\n                throw createError(\"Value has too long fractional part: \".concat(fraction.length, \", max: \").concat(decimals));\n            }\n            if (fraction.length < decimals) {\n                fraction = fraction.padEnd(decimals, '0');\n            }\n            result = BigInt(whole) * multiplier + BigInt(fraction);\n        }\n        if (isNegative) {\n            result *= BigInt(-1);\n        }\n        return result;\n    };\n    return BigNumberParser;\n}());\nexports.BigNumberParser = BigNumberParser;\nfunction assertNotEmpty(value) {\n    if (value === null) {\n        throw createError('Value is null');\n    }\n    if (value === undefined) {\n        throw createError('Value is undefined');\n    }\n}\nfunction getMultiplier(decimals) {\n    if (decimals < 0) {\n        throw createError('Invalid decimals');\n    }\n    // decimals = 0, multiplier = 1\n    // decimals = 1, multiplier = 10\n    // decimals = 2, multiplier = 100\n    // ...\n    var ten = BigInt(10);\n    var multiplier = BigInt(1);\n    while (decimals-- > 0) {\n        multiplier *= ten;\n    }\n    return multiplier;\n}\nfunction createError(message) {\n    return new Error_1.CoreError({\n        code: Error_1.CoreErrorCode.BIG_NUMBER_ERROR,\n        message: message,\n    });\n}\n//# sourceMappingURL=BigNumberParser.js.map"]},"metadata":{},"sourceType":"script"}