{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Module = void 0;\nvar LoggerController_1 = require(\"../controllers/LoggerController\");\nvar ModuleType_1 = require(\"./ModuleType\");\n/**\n * The base class of every Moralis class that gets registered as a module via MoralisModules\n * It should always be created with:\n * - `name`: name of the module (should be unique)\n * - `core`: the Core instance\n * - `type`: (optional) CoreModuleType, defaults to CoreModuleType.DEFAULT\n *\n * When creating an api, or network module, you should use the ApiModule or NetworkModule\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nvar Module = /** @class */function () {\n  function Module(name, core, type) {\n    if (type === void 0) {\n      type = ModuleType_1.ModuleType.DEFAULT;\n    }\n    this.name = name;\n    this.core = core;\n    this.type = type;\n    this.logger = LoggerController_1.LoggerController.create(this.name, this.core);\n  }\n  /**\n   * Any cleanup that needs to be done for removing this module.\n   * It also should remove the module via `this.core.modules.remove(this.name)`\n   */\n  Module.prototype.cleanUp = function () {\n    this.core.modules.remove(this.name);\n  };\n  return Module;\n}();\nexports.Module = Module;","map":{"version":3,"sources":["../../src/Modules/Module.ts"],"names":[],"mappings":";;;;;;AACA,IAAA,kBAAA,GAAA,OAAA,CAAA,iCAAA,CAAA;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,cAAA,CAAA;AAEA;;;;;;;;AAQG;AACH;AACA,IAAA,MAAA,GAAA,aAAA,YAAA;EAGE,SAAA,MAAA,CACkB,IAAY,EACT,IAAU,EACb,IAAqC,EAAA;IAArC,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA;MAAA,IAAA,GAAmB,YAAA,CAAA,UAAU,CAAC,OAAO;IAAA;IAFrC,IAAA,CAAA,IAAI,GAAJ,IAAI;IACD,IAAA,CAAA,IAAI,GAAJ,IAAI;IACP,IAAA,CAAA,IAAI,GAAJ,IAAI;IALH,IAAA,CAAA,MAAM,GAAG,kBAAA,CAAA,gBAAgB,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC;EAMtE;EAUH;;;AAGG;EACI,MAAA,CAAA,SAAA,CAAA,OAAO,GAAd,YAAA;IACE,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;EACrC,CAAC;EACH,OAAA,MAAC;AAAD,CAAC,EAAA;AAxBqB,OAAA,CAAA,MAAA,GAAA,MAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Module = void 0;\nvar LoggerController_1 = require(\"../controllers/LoggerController\");\nvar ModuleType_1 = require(\"./ModuleType\");\n/**\n * The base class of every Moralis class that gets registered as a module via MoralisModules\n * It should always be created with:\n * - `name`: name of the module (should be unique)\n * - `core`: the Core instance\n * - `type`: (optional) CoreModuleType, defaults to CoreModuleType.DEFAULT\n *\n * When creating an api, or network module, you should use the ApiModule or NetworkModule\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nvar Module = /** @class */ (function () {\n    function Module(name, core, type) {\n        if (type === void 0) { type = ModuleType_1.ModuleType.DEFAULT; }\n        this.name = name;\n        this.core = core;\n        this.type = type;\n        this.logger = LoggerController_1.LoggerController.create(this.name, this.core);\n    }\n    /**\n     * Any cleanup that needs to be done for removing this module.\n     * It also should remove the module via `this.core.modules.remove(this.name)`\n     */\n    Module.prototype.cleanUp = function () {\n        this.core.modules.remove(this.name);\n    };\n    return Module;\n}());\nexports.Module = Module;\n//# sourceMappingURL=Module.js.map"]},"metadata":{},"sourceType":"script"}