{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AptosNative = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar unitToDecimals = {\n  aptos: 8,\n  octas: 0\n};\n/**\n * The AptosNative class is a MoralisData that references to the value of Aptos native currency APT\n *\n * @category DataType\n */\nvar AptosNative = /** @class */function () {\n  function AptosNative(rawValue) {\n    this.rawValue = rawValue;\n  }\n  /**\n   * Create a new instance of AptosNative from any valid {@link AptosNativeish} value.\n   * @param value - the value to create the AptosNative from\n   * @param unit - the unit of the value (optional), defaults to `aptos`\n   * @returns a new instance of AptosNative\n   * @example\n   * ```ts\n   * const native = AptosNative.create(2, 'octas');\n   * const native = AptosNative.create(2);\n   *```\n   */\n  AptosNative.create = function (value, unit) {\n    if (value instanceof AptosNative) {\n      return value;\n    }\n    return new AptosNative(AptosNative.parse(value, unit));\n  };\n  AptosNative.parse = function (value, unit) {\n    if (unit === void 0) {\n      unit = 'aptos';\n    }\n    var decimal;\n    if (typeof unit === 'number') {\n      decimal = unit;\n    } else if (unitToDecimals[unit] !== undefined) {\n      decimal = unitToDecimals[unit];\n    } else {\n      throw new common_core_1.CoreError({\n        code: common_core_1.CoreErrorCode.INVALID_ARGUMENT,\n        message: \"Not supported Aptos unit: \".concat(unit)\n      });\n    }\n    return common_core_1.BigNumber.fromDecimal(value.toString(), decimal);\n  };\n  /**\n   * Compares two AptosNativeish values.\n   * @param valueA - the first value to compare\n   * @param valueB - the second value to compare\n   * @returns true if the values are equal\n   * @example\n   * ```ts\n   * AptosNative.equals(AptosNative.create(1), AptosNative.create(1)); // true\n   * ```\n   */\n  AptosNative.equals = function (valueA, valueB) {\n    var aptosNativeA = AptosNative.create(valueA);\n    var aptosNativeB = AptosNative.create(valueB);\n    return aptosNativeA.octas === aptosNativeB.octas;\n  };\n  /**\n   * Compares AptosNative with current instance.\n   * @param value - the value to compare with\n   * @returns true if the values are equal\n   * @example\n   * ```ts\n   * const native = AptosNative.create(2, 'octas');\n   * native.equals(AptosNative.create(1)); // false\n   * ```\n   */\n  AptosNative.prototype.equals = function (value) {\n    return AptosNative.equals(this, value);\n  };\n  /**\n   * Converts the AptosNative to a string.\n   * @returns the value of the AptosNative as a string\n   * @example `native.format()`\n   */\n  AptosNative.prototype.format = function () {\n    // TODO: add `format` argument\n    return this.octas;\n  };\n  /**\n   * Converts the AptosNative to a string.\n   * @returns the value of the AptosNative as a string\n   * @example `native.toJSON()`\n   */\n  AptosNative.prototype.toJSON = function () {\n    return this.octas;\n  };\n  /**\n   * Converts the AptosNative to a string.\n   * @returns the value of the AptosNative as a string\n   * @example `native.toString()`\n   */\n  AptosNative.prototype.toString = function () {\n    return this.octas;\n  };\n  Object.defineProperty(AptosNative.prototype, \"value\", {\n    /**\n     * @returns the value of the AptosNative as a BigNumber\n     * @example `native.value`\n     */\n    get: function () {\n      return this.rawValue;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AptosNative.prototype, \"aptos\", {\n    /**\n     * Converts the AptosNative to an aptos unit.\n     * @returns the value of the AptosNative as an aptos string\n     * @example `native.aptos`\n     */\n    get: function () {\n      return this.rawValue.toDecimal(unitToDecimals['aptos']);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AptosNative.prototype, \"octas\", {\n    /**\n     * Converts the AptosNative to a string.\n     * @returns the value of the AptosNative as a string\n     * @example `native.lamports`\n     */\n    get: function () {\n      return this.rawValue.toString();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return AptosNative;\n}();\nexports.AptosNative = AptosNative;","map":{"version":3,"sources":["../../../src/dataTypes/AptosNative/AptosNative.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AptosNative = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar unitToDecimals = {\n    aptos: 8,\n    octas: 0,\n};\n/**\n * The AptosNative class is a MoralisData that references to the value of Aptos native currency APT\n *\n * @category DataType\n */\nvar AptosNative = /** @class */ (function () {\n    function AptosNative(rawValue) {\n        this.rawValue = rawValue;\n    }\n    /**\n     * Create a new instance of AptosNative from any valid {@link AptosNativeish} value.\n     * @param value - the value to create the AptosNative from\n     * @param unit - the unit of the value (optional), defaults to `aptos`\n     * @returns a new instance of AptosNative\n     * @example\n     * ```ts\n     * const native = AptosNative.create(2, 'octas');\n     * const native = AptosNative.create(2);\n     *```\n     */\n    AptosNative.create = function (value, unit) {\n        if (value instanceof AptosNative) {\n            return value;\n        }\n        return new AptosNative(AptosNative.parse(value, unit));\n    };\n    AptosNative.parse = function (value, unit) {\n        if (unit === void 0) { unit = 'aptos'; }\n        var decimal;\n        if (typeof unit === 'number') {\n            decimal = unit;\n        }\n        else if (unitToDecimals[unit] !== undefined) {\n            decimal = unitToDecimals[unit];\n        }\n        else {\n            throw new common_core_1.CoreError({\n                code: common_core_1.CoreErrorCode.INVALID_ARGUMENT,\n                message: \"Not supported Aptos unit: \".concat(unit),\n            });\n        }\n        return common_core_1.BigNumber.fromDecimal(value.toString(), decimal);\n    };\n    /**\n     * Compares two AptosNativeish values.\n     * @param valueA - the first value to compare\n     * @param valueB - the second value to compare\n     * @returns true if the values are equal\n     * @example\n     * ```ts\n     * AptosNative.equals(AptosNative.create(1), AptosNative.create(1)); // true\n     * ```\n     */\n    AptosNative.equals = function (valueA, valueB) {\n        var aptosNativeA = AptosNative.create(valueA);\n        var aptosNativeB = AptosNative.create(valueB);\n        return aptosNativeA.octas === aptosNativeB.octas;\n    };\n    /**\n     * Compares AptosNative with current instance.\n     * @param value - the value to compare with\n     * @returns true if the values are equal\n     * @example\n     * ```ts\n     * const native = AptosNative.create(2, 'octas');\n     * native.equals(AptosNative.create(1)); // false\n     * ```\n     */\n    AptosNative.prototype.equals = function (value) {\n        return AptosNative.equals(this, value);\n    };\n    /**\n     * Converts the AptosNative to a string.\n     * @returns the value of the AptosNative as a string\n     * @example `native.format()`\n     */\n    AptosNative.prototype.format = function () {\n        // TODO: add `format` argument\n        return this.octas;\n    };\n    /**\n     * Converts the AptosNative to a string.\n     * @returns the value of the AptosNative as a string\n     * @example `native.toJSON()`\n     */\n    AptosNative.prototype.toJSON = function () {\n        return this.octas;\n    };\n    /**\n     * Converts the AptosNative to a string.\n     * @returns the value of the AptosNative as a string\n     * @example `native.toString()`\n     */\n    AptosNative.prototype.toString = function () {\n        return this.octas;\n    };\n    Object.defineProperty(AptosNative.prototype, \"value\", {\n        /**\n         * @returns the value of the AptosNative as a BigNumber\n         * @example `native.value`\n         */\n        get: function () {\n            return this.rawValue;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(AptosNative.prototype, \"aptos\", {\n        /**\n         * Converts the AptosNative to an aptos unit.\n         * @returns the value of the AptosNative as an aptos string\n         * @example `native.aptos`\n         */\n        get: function () {\n            return this.rawValue.toDecimal(unitToDecimals['aptos']);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(AptosNative.prototype, \"octas\", {\n        /**\n         * Converts the AptosNative to a string.\n         * @returns the value of the AptosNative as a string\n         * @example `native.lamports`\n         */\n        get: function () {\n            return this.rawValue.toString();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return AptosNative;\n}());\nexports.AptosNative = AptosNative;\n//# sourceMappingURL=AptosNative.js.map"]},"metadata":{},"sourceType":"script"}