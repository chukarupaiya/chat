{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Erc20Transfer = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar EvmAddress_1 = require(\"../EvmAddress\");\nvar EvmChain_1 = require(\"../EvmChain\");\n/**\n * The Erc20Transfer is a representation of an Erc20 token transfer.\n *\n * @category DataType\n */\nvar Erc20Transfer = /** @class */function () {\n  function Erc20Transfer(data) {\n    this._data = Erc20Transfer.parse(data);\n  }\n  /**\n   * Create a new instance of Erc20Transfer from any valid input\n   * @param data - the Erc20Transferish type\n   * @example\n   * ```\n   * const transfer = Erc20Transfer.create(data);\n   *```\n   */\n  Erc20Transfer.create = function (data) {\n    if (data instanceof Erc20Transfer) {\n      return data;\n    }\n    return new Erc20Transfer(data);\n  };\n  /**\n   * Check the equality between two Erc20 transfers\n   * @param dataA - The first transfer to compare\n   * @param dataB - The second transfer to compare\n   * @example Erc20Transfer.equals(dataA, dataB)\n   * @returns true if the transfers are equal, false otherwise\n   */\n  Erc20Transfer.equals = function (dataA, dataB) {\n    var tokenA = Erc20Transfer.create(dataA);\n    var tokenB = Erc20Transfer.create(dataB);\n    return JSON.stringify(tokenA.toJSON()) === JSON.stringify(tokenB.toJSON());\n  };\n  /**\n   * Checks the equality of the current trnasfer with another erc20 trnasfer\n   * @param data - the transfer to compare with\n   * @example transfer.equals(data)\n   * @returns true if the transfers are equal, false otherwise\n   */\n  Erc20Transfer.prototype.equals = function (data) {\n    return Erc20Transfer.equals(this, data);\n  };\n  /**\n   * @returns a JSON represention of the transfer.\n   * @example transfer.toJSON()\n   */\n  Erc20Transfer.prototype.toJSON = function () {\n    var data = this._data;\n    return __assign(__assign({}, data), {\n      chain: data.chain.format(),\n      address: data.address.format(),\n      blockNumber: data.blockNumber.toString(),\n      toAddress: data.toAddress.format(),\n      fromAddress: data.fromAddress.format(),\n      value: data.value.toString()\n    });\n  };\n  /**\n   * @returns a JSON represention of the transfer.\n   * @example transfer.format()\n   */\n  Erc20Transfer.prototype.format = function () {\n    return this.toJSON();\n  };\n  Object.defineProperty(Erc20Transfer.prototype, \"result\", {\n    /**\n     * @returns all the data without casting it to JSON.\n     * @example transfer.result\n     */\n    get: function () {\n      return this._data;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Erc20Transfer.prototype, \"address\", {\n    /**\n     * @returns the address of the tranfer\n     * @example transfer.address // EvmAddress\n     */\n    get: function () {\n      return this._data.address;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Erc20Transfer.prototype, \"blockHash\", {\n    /**\n     * @returns the block hash of the tranfer\n     * @example transfer.blockHash // \"0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86\"\n     */\n    get: function () {\n      return this._data.blockHash;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Erc20Transfer.prototype, \"blockNumber\", {\n    /**\n     * @returns the block number of the tranfer\n     * @example transfer.blockNumber // BigNumber\n     */\n    get: function () {\n      return this._data.blockNumber;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Erc20Transfer.prototype, \"blockTimestamp\", {\n    /**\n     * @returns the block timestamp of the tranfer\n     * @example transfer.blockTimestamp // Date\n     */\n    get: function () {\n      return this._data.blockTimestamp;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Erc20Transfer.prototype, \"chain\", {\n    /**\n     * @returns the chain of the tranfer\n     * @example transfer.chain // EvmChain\n     */\n    get: function () {\n      return this._data.chain;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Erc20Transfer.prototype, \"fromAddress\", {\n    /**\n     * @returns the from address of the tranfer\n     * @example transfer.fromAddress // EvmAddress\n     */\n    get: function () {\n      return this._data.fromAddress;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Erc20Transfer.prototype, \"toAddress\", {\n    /**\n     * @returns the to address of the tranfer\n     * @example transfer.toAddress // EvmAddress\n     */\n    get: function () {\n      return this._data.toAddress;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Erc20Transfer.prototype, \"transactionHash\", {\n    /**\n     * @returns the transaction hash of the tranfer\n     * @example transfer.transactionHash // \"0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86\"\n     */\n    get: function () {\n      return this._data.transactionHash;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Erc20Transfer.prototype, \"value\", {\n    /**\n     * @returns the value of the tranfer\n     * @example transfer.value // BigNumber\n     */\n    get: function () {\n      return this._data.value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Erc20Transfer.prototype, \"transactionIndex\", {\n    /**\n     * @returns the transactionIndex of the tranfer\n     * @example transfer.transactionIndex // 3\n     */\n    get: function () {\n      return this._data.transactionIndex;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Erc20Transfer.prototype, \"logIndex\", {\n    /**\n     * @returns the logIndex of the tranfer\n     * @example transfer.logIndex // 2\n     */\n    get: function () {\n      return this._data.logIndex;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Erc20Transfer.parse = function (data) {\n    return __assign(__assign({}, data), {\n      chain: EvmChain_1.EvmChain.create(data.chain),\n      address: EvmAddress_1.EvmAddress.create(data.address),\n      blockTimestamp: (0, common_core_1.dateInputToDate)(data.blockTimestamp),\n      blockNumber: common_core_1.BigNumber.create(data.blockNumber),\n      toAddress: EvmAddress_1.EvmAddress.create(data.toAddress),\n      fromAddress: EvmAddress_1.EvmAddress.create(data.fromAddress),\n      value: common_core_1.BigNumber.create(data.value)\n    });\n  };\n  return Erc20Transfer;\n}();\nexports.Erc20Transfer = Erc20Transfer;","map":{"version":3,"sources":["../../../src/dataTypes/Erc20Transfer/Erc20Transfer.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Erc20Transfer = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar EvmAddress_1 = require(\"../EvmAddress\");\nvar EvmChain_1 = require(\"../EvmChain\");\n/**\n * The Erc20Transfer is a representation of an Erc20 token transfer.\n *\n * @category DataType\n */\nvar Erc20Transfer = /** @class */ (function () {\n    function Erc20Transfer(data) {\n        this._data = Erc20Transfer.parse(data);\n    }\n    /**\n     * Create a new instance of Erc20Transfer from any valid input\n     * @param data - the Erc20Transferish type\n     * @example\n     * ```\n     * const transfer = Erc20Transfer.create(data);\n     *```\n     */\n    Erc20Transfer.create = function (data) {\n        if (data instanceof Erc20Transfer) {\n            return data;\n        }\n        return new Erc20Transfer(data);\n    };\n    /**\n     * Check the equality between two Erc20 transfers\n     * @param dataA - The first transfer to compare\n     * @param dataB - The second transfer to compare\n     * @example Erc20Transfer.equals(dataA, dataB)\n     * @returns true if the transfers are equal, false otherwise\n     */\n    Erc20Transfer.equals = function (dataA, dataB) {\n        var tokenA = Erc20Transfer.create(dataA);\n        var tokenB = Erc20Transfer.create(dataB);\n        return JSON.stringify(tokenA.toJSON()) === JSON.stringify(tokenB.toJSON());\n    };\n    /**\n     * Checks the equality of the current trnasfer with another erc20 trnasfer\n     * @param data - the transfer to compare with\n     * @example transfer.equals(data)\n     * @returns true if the transfers are equal, false otherwise\n     */\n    Erc20Transfer.prototype.equals = function (data) {\n        return Erc20Transfer.equals(this, data);\n    };\n    /**\n     * @returns a JSON represention of the transfer.\n     * @example transfer.toJSON()\n     */\n    Erc20Transfer.prototype.toJSON = function () {\n        var data = this._data;\n        return __assign(__assign({}, data), { chain: data.chain.format(), address: data.address.format(), blockNumber: data.blockNumber.toString(), toAddress: data.toAddress.format(), fromAddress: data.fromAddress.format(), value: data.value.toString() });\n    };\n    /**\n     * @returns a JSON represention of the transfer.\n     * @example transfer.format()\n     */\n    Erc20Transfer.prototype.format = function () {\n        return this.toJSON();\n    };\n    Object.defineProperty(Erc20Transfer.prototype, \"result\", {\n        /**\n         * @returns all the data without casting it to JSON.\n         * @example transfer.result\n         */\n        get: function () {\n            return this._data;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Erc20Transfer.prototype, \"address\", {\n        /**\n         * @returns the address of the tranfer\n         * @example transfer.address // EvmAddress\n         */\n        get: function () {\n            return this._data.address;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Erc20Transfer.prototype, \"blockHash\", {\n        /**\n         * @returns the block hash of the tranfer\n         * @example transfer.blockHash // \"0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86\"\n         */\n        get: function () {\n            return this._data.blockHash;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Erc20Transfer.prototype, \"blockNumber\", {\n        /**\n         * @returns the block number of the tranfer\n         * @example transfer.blockNumber // BigNumber\n         */\n        get: function () {\n            return this._data.blockNumber;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Erc20Transfer.prototype, \"blockTimestamp\", {\n        /**\n         * @returns the block timestamp of the tranfer\n         * @example transfer.blockTimestamp // Date\n         */\n        get: function () {\n            return this._data.blockTimestamp;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Erc20Transfer.prototype, \"chain\", {\n        /**\n         * @returns the chain of the tranfer\n         * @example transfer.chain // EvmChain\n         */\n        get: function () {\n            return this._data.chain;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Erc20Transfer.prototype, \"fromAddress\", {\n        /**\n         * @returns the from address of the tranfer\n         * @example transfer.fromAddress // EvmAddress\n         */\n        get: function () {\n            return this._data.fromAddress;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Erc20Transfer.prototype, \"toAddress\", {\n        /**\n         * @returns the to address of the tranfer\n         * @example transfer.toAddress // EvmAddress\n         */\n        get: function () {\n            return this._data.toAddress;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Erc20Transfer.prototype, \"transactionHash\", {\n        /**\n         * @returns the transaction hash of the tranfer\n         * @example transfer.transactionHash // \"0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86\"\n         */\n        get: function () {\n            return this._data.transactionHash;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Erc20Transfer.prototype, \"value\", {\n        /**\n         * @returns the value of the tranfer\n         * @example transfer.value // BigNumber\n         */\n        get: function () {\n            return this._data.value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Erc20Transfer.prototype, \"transactionIndex\", {\n        /**\n         * @returns the transactionIndex of the tranfer\n         * @example transfer.transactionIndex // 3\n         */\n        get: function () {\n            return this._data.transactionIndex;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Erc20Transfer.prototype, \"logIndex\", {\n        /**\n         * @returns the logIndex of the tranfer\n         * @example transfer.logIndex // 2\n         */\n        get: function () {\n            return this._data.logIndex;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Erc20Transfer.parse = function (data) { return (__assign(__assign({}, data), { chain: EvmChain_1.EvmChain.create(data.chain), address: EvmAddress_1.EvmAddress.create(data.address), blockTimestamp: (0, common_core_1.dateInputToDate)(data.blockTimestamp), blockNumber: common_core_1.BigNumber.create(data.blockNumber), toAddress: EvmAddress_1.EvmAddress.create(data.toAddress), fromAddress: EvmAddress_1.EvmAddress.create(data.fromAddress), value: common_core_1.BigNumber.create(data.value) })); };\n    return Erc20Transfer;\n}());\nexports.Erc20Transfer = Erc20Transfer;\n//# sourceMappingURL=Erc20Transfer.js.map"]},"metadata":{},"sourceType":"script"}