{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EvmNftTrade = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar EvmAddress_1 = require(\"../EvmAddress\");\nvar EvmChain_1 = require(\"../EvmChain\");\nvar EvmNative_1 = require(\"../EvmNative\");\n/**\n * The EvmNftTrade is a representation of a published trade.\n *\n * Use this class any time you work with a transaction.\n *\n * @category DataType\n */\nvar EvmNftTrade = /** @class */function () {\n  function EvmNftTrade(data) {\n    this._data = EvmNftTrade.parse(data);\n  }\n  /**\n   * Create a new instance of EvmNftTrade from any valid transaction input\n   * @param data - the EvmNftTradeish type\n   * @example\n   * ```\n   * const trade = EvmNftTrade.create(data);\n   *```\n   */\n  EvmNftTrade.create = function (data) {\n    if (data instanceof EvmNftTrade) {\n      return data;\n    }\n    return new EvmNftTrade(data);\n  };\n  /**\n   * Check the equality between two Evm trades. It compares the `chain`, `blockNumber`, `transactionIndex` and `transactionHash`\n   * @param dataA - The first trade\n   * @param dataB - The second trade\n   * @example\n   * ```ts\n   * EvmNftTrade.equals(dataA, dataB)\n   * ```\n   * @returns true if the trades are equal, false otherwise\n   */\n  EvmNftTrade.equals = function (dataA, dataB) {\n    var transactionA = EvmNftTrade.create(dataA);\n    var transactionB = EvmNftTrade.create(dataB);\n    if (!transactionA._data.chain.equals(transactionB._data.chain)) {\n      return false;\n    }\n    if (!transactionA._data.blockNumber.equals(transactionB._data.blockNumber)) {\n      return false;\n    }\n    if (transactionA._data.transactionHash !== transactionB._data.transactionHash) {\n      return false;\n    }\n    if (transactionA._data.transactionIndex !== transactionB._data.transactionIndex) {\n      return false;\n    }\n    return true;\n  };\n  /**\n   * Checks the equality of the current trade instance with another evm trade\n   * @param data - the trade to compare with\n   * @example\n   * ```ts\n   * trade.equals(data)\n   * ```\n   * @returns true if the trades are equal, false otherwise\n   */\n  EvmNftTrade.prototype.equals = function (data) {\n    return EvmNftTrade.equals(this, data);\n  };\n  /**\n   * @returns a JSON represention of the trade.\n   * @example\n   * ```\n   * trade.toJSON()\n   * ```\n   */\n  EvmNftTrade.prototype.toJSON = function () {\n    var data = this._data;\n    return __assign(__assign({}, data), {\n      chain: data.chain.format(),\n      sellerAddress: data.sellerAddress.format(),\n      buyerAddress: data.buyerAddress.format(),\n      marketplaceAddress: data.marketplaceAddress.format(),\n      tokenAddress: data.tokenAddress.format(),\n      priceTokenAddress: data.priceTokenAddress ? data.priceTokenAddress.format() : undefined,\n      blockNumber: data.blockNumber.toString(),\n      price: data.price.toString(),\n      blockTimestamp: data.blockTimestamp.toString()\n    });\n  };\n  /**\n   * @returns a JSON represention of the trade.\n   * @example\n   * ```\n   * trade.format()\n   * ```\n   */\n  EvmNftTrade.prototype.format = function () {\n    return this.toJSON();\n  };\n  Object.defineProperty(EvmNftTrade.prototype, \"result\", {\n    /**\n     * @returns all the data without casting it to JSON.\n     * @example trade.result\n     */\n    get: function () {\n      return this._data;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTrade.prototype, \"sellerAddress\", {\n    /**\n     * @returns the trade seller address\n     * @example trade.sellerAddress // EvmAddress\n     */\n    get: function () {\n      return this._data.sellerAddress;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTrade.prototype, \"buyerAddress\", {\n    /**\n     * @returns the trade buyer address\n     * @example trade.buyerAddress // EvmAddress\n     */\n    get: function () {\n      return this._data.buyerAddress;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTrade.prototype, \"marketplaceAddress\", {\n    /**\n     * @returns the trade marketplace address\n     * @example trade.marketplaceAddress // EvmAddress\n     */\n    get: function () {\n      return this._data.marketplaceAddress;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTrade.prototype, \"tokenAddress\", {\n    /**\n     * @returns the trade token address\n     * @example trade.tokenAddress // EvmAddress\n     */\n    get: function () {\n      return this._data.tokenAddress;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTrade.prototype, \"priceTokenAddress\", {\n    /**\n     * @returns the trade price token address\n     * @example trade.priceTokenAddress // EvmAddress\n     */\n    get: function () {\n      return this._data.priceTokenAddress;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTrade.prototype, \"price\", {\n    /**\n     * @returns the trade price\n     * @example trade.price // EvmNative\n     */\n    get: function () {\n      return this._data.price;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTrade.prototype, \"blockNumber\", {\n    /**\n     * @returns the trade block number\n     * @example trade.blockNumber // BigNumber\n     */\n    get: function () {\n      return this._data.blockNumber;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTrade.prototype, \"transactionIndex\", {\n    /**\n     * @returns the trade transaction index\n     * @example trade.transactionIndex // 164\n     */\n    get: function () {\n      return this._data.transactionIndex;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTrade.prototype, \"transactionHash\", {\n    /**\n     * @returns the trade transaction hash\n     * @example trade.transactionHash // \"0x4de0bcef1450492bd5c2e7693cf644c40005868d0dcc8a7a50a80ef2efa88d1e\"\n     */\n    get: function () {\n      return this._data.transactionHash;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTrade.prototype, \"chain\", {\n    /**\n     * @returns the trade chain\n     * @example trade.chain // EvmChain\n     */\n    get: function () {\n      return this._data.chain;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTrade.prototype, \"tokenIds\", {\n    /**\n     * @returns the trade token Ids\n     * @example trade.tokenIds // [\"16404\"]\n     */\n    get: function () {\n      return this._data.tokenIds;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTrade.prototype, \"blockHash\", {\n    /**\n     * @returns the trade block hash\n     * @example trade.blockHash // \"0x4de0bcef1450492bd5c2e7693cf644c40005868d0dcc8a7a50a80ef2efa88d1e\"\n     */\n    get: function () {\n      return this._data.blockHash;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTrade.prototype, \"blockTimestamp\", {\n    /**\n     * @returns the trade block timestamp\n     * @example trade.blockTimestamp // Date\n     */\n    get: function () {\n      return this._data.blockTimestamp;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  EvmNftTrade.parse = function (data) {\n    return __assign(__assign({}, data), {\n      chain: EvmChain_1.EvmChain.create(data.chain),\n      sellerAddress: EvmAddress_1.EvmAddress.create(data.sellerAddress),\n      buyerAddress: EvmAddress_1.EvmAddress.create(data.buyerAddress),\n      marketplaceAddress: EvmAddress_1.EvmAddress.create(data.marketplaceAddress),\n      tokenAddress: EvmAddress_1.EvmAddress.create(data.tokenAddress),\n      priceTokenAddress: (0, common_core_1.maybe)(data.priceTokenAddress, EvmAddress_1.EvmAddress.create),\n      blockNumber: common_core_1.BigNumber.create(data.blockNumber),\n      price: EvmNative_1.EvmNative.create(data.price),\n      transactionIndex: +data.transactionIndex,\n      blockTimestamp: (0, common_core_1.dateInputToDate)(data.blockTimestamp)\n    });\n  };\n  return EvmNftTrade;\n}();\nexports.EvmNftTrade = EvmNftTrade;","map":{"version":3,"sources":["../../../src/dataTypes/EvmNftTrade/EvmNftTrade.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EvmNftTrade = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar EvmAddress_1 = require(\"../EvmAddress\");\nvar EvmChain_1 = require(\"../EvmChain\");\nvar EvmNative_1 = require(\"../EvmNative\");\n/**\n * The EvmNftTrade is a representation of a published trade.\n *\n * Use this class any time you work with a transaction.\n *\n * @category DataType\n */\nvar EvmNftTrade = /** @class */ (function () {\n    function EvmNftTrade(data) {\n        this._data = EvmNftTrade.parse(data);\n    }\n    /**\n     * Create a new instance of EvmNftTrade from any valid transaction input\n     * @param data - the EvmNftTradeish type\n     * @example\n     * ```\n     * const trade = EvmNftTrade.create(data);\n     *```\n     */\n    EvmNftTrade.create = function (data) {\n        if (data instanceof EvmNftTrade) {\n            return data;\n        }\n        return new EvmNftTrade(data);\n    };\n    /**\n     * Check the equality between two Evm trades. It compares the `chain`, `blockNumber`, `transactionIndex` and `transactionHash`\n     * @param dataA - The first trade\n     * @param dataB - The second trade\n     * @example\n     * ```ts\n     * EvmNftTrade.equals(dataA, dataB)\n     * ```\n     * @returns true if the trades are equal, false otherwise\n     */\n    EvmNftTrade.equals = function (dataA, dataB) {\n        var transactionA = EvmNftTrade.create(dataA);\n        var transactionB = EvmNftTrade.create(dataB);\n        if (!transactionA._data.chain.equals(transactionB._data.chain)) {\n            return false;\n        }\n        if (!transactionA._data.blockNumber.equals(transactionB._data.blockNumber)) {\n            return false;\n        }\n        if (transactionA._data.transactionHash !== transactionB._data.transactionHash) {\n            return false;\n        }\n        if (transactionA._data.transactionIndex !== transactionB._data.transactionIndex) {\n            return false;\n        }\n        return true;\n    };\n    /**\n     * Checks the equality of the current trade instance with another evm trade\n     * @param data - the trade to compare with\n     * @example\n     * ```ts\n     * trade.equals(data)\n     * ```\n     * @returns true if the trades are equal, false otherwise\n     */\n    EvmNftTrade.prototype.equals = function (data) {\n        return EvmNftTrade.equals(this, data);\n    };\n    /**\n     * @returns a JSON represention of the trade.\n     * @example\n     * ```\n     * trade.toJSON()\n     * ```\n     */\n    EvmNftTrade.prototype.toJSON = function () {\n        var data = this._data;\n        return __assign(__assign({}, data), { chain: data.chain.format(), sellerAddress: data.sellerAddress.format(), buyerAddress: data.buyerAddress.format(), marketplaceAddress: data.marketplaceAddress.format(), tokenAddress: data.tokenAddress.format(), priceTokenAddress: data.priceTokenAddress ? data.priceTokenAddress.format() : undefined, blockNumber: data.blockNumber.toString(), price: data.price.toString(), blockTimestamp: data.blockTimestamp.toString() });\n    };\n    /**\n     * @returns a JSON represention of the trade.\n     * @example\n     * ```\n     * trade.format()\n     * ```\n     */\n    EvmNftTrade.prototype.format = function () {\n        return this.toJSON();\n    };\n    Object.defineProperty(EvmNftTrade.prototype, \"result\", {\n        /**\n         * @returns all the data without casting it to JSON.\n         * @example trade.result\n         */\n        get: function () {\n            return this._data;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNftTrade.prototype, \"sellerAddress\", {\n        /**\n         * @returns the trade seller address\n         * @example trade.sellerAddress // EvmAddress\n         */\n        get: function () {\n            return this._data.sellerAddress;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNftTrade.prototype, \"buyerAddress\", {\n        /**\n         * @returns the trade buyer address\n         * @example trade.buyerAddress // EvmAddress\n         */\n        get: function () {\n            return this._data.buyerAddress;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNftTrade.prototype, \"marketplaceAddress\", {\n        /**\n         * @returns the trade marketplace address\n         * @example trade.marketplaceAddress // EvmAddress\n         */\n        get: function () {\n            return this._data.marketplaceAddress;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNftTrade.prototype, \"tokenAddress\", {\n        /**\n         * @returns the trade token address\n         * @example trade.tokenAddress // EvmAddress\n         */\n        get: function () {\n            return this._data.tokenAddress;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNftTrade.prototype, \"priceTokenAddress\", {\n        /**\n         * @returns the trade price token address\n         * @example trade.priceTokenAddress // EvmAddress\n         */\n        get: function () {\n            return this._data.priceTokenAddress;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNftTrade.prototype, \"price\", {\n        /**\n         * @returns the trade price\n         * @example trade.price // EvmNative\n         */\n        get: function () {\n            return this._data.price;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNftTrade.prototype, \"blockNumber\", {\n        /**\n         * @returns the trade block number\n         * @example trade.blockNumber // BigNumber\n         */\n        get: function () {\n            return this._data.blockNumber;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNftTrade.prototype, \"transactionIndex\", {\n        /**\n         * @returns the trade transaction index\n         * @example trade.transactionIndex // 164\n         */\n        get: function () {\n            return this._data.transactionIndex;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNftTrade.prototype, \"transactionHash\", {\n        /**\n         * @returns the trade transaction hash\n         * @example trade.transactionHash // \"0x4de0bcef1450492bd5c2e7693cf644c40005868d0dcc8a7a50a80ef2efa88d1e\"\n         */\n        get: function () {\n            return this._data.transactionHash;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNftTrade.prototype, \"chain\", {\n        /**\n         * @returns the trade chain\n         * @example trade.chain // EvmChain\n         */\n        get: function () {\n            return this._data.chain;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNftTrade.prototype, \"tokenIds\", {\n        /**\n         * @returns the trade token Ids\n         * @example trade.tokenIds // [\"16404\"]\n         */\n        get: function () {\n            return this._data.tokenIds;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNftTrade.prototype, \"blockHash\", {\n        /**\n         * @returns the trade block hash\n         * @example trade.blockHash // \"0x4de0bcef1450492bd5c2e7693cf644c40005868d0dcc8a7a50a80ef2efa88d1e\"\n         */\n        get: function () {\n            return this._data.blockHash;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNftTrade.prototype, \"blockTimestamp\", {\n        /**\n         * @returns the trade block timestamp\n         * @example trade.blockTimestamp // Date\n         */\n        get: function () {\n            return this._data.blockTimestamp;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    EvmNftTrade.parse = function (data) { return (__assign(__assign({}, data), { chain: EvmChain_1.EvmChain.create(data.chain), sellerAddress: EvmAddress_1.EvmAddress.create(data.sellerAddress), buyerAddress: EvmAddress_1.EvmAddress.create(data.buyerAddress), marketplaceAddress: EvmAddress_1.EvmAddress.create(data.marketplaceAddress), tokenAddress: EvmAddress_1.EvmAddress.create(data.tokenAddress), priceTokenAddress: (0, common_core_1.maybe)(data.priceTokenAddress, EvmAddress_1.EvmAddress.create), blockNumber: common_core_1.BigNumber.create(data.blockNumber), price: EvmNative_1.EvmNative.create(data.price), transactionIndex: +data.transactionIndex, blockTimestamp: (0, common_core_1.dateInputToDate)(data.blockTimestamp) })); };\n    return EvmNftTrade;\n}());\nexports.EvmNftTrade = EvmNftTrade;\n//# sourceMappingURL=EvmNftTrade.js.map"]},"metadata":{},"sourceType":"script"}