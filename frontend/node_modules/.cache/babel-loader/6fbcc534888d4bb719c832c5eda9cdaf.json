{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getNFTLowestPriceOperation = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar dataTypes_1 = require(\"../../dataTypes\");\nvar EvmChainResolver_1 = require(\"../../EvmChainResolver\");\n/** Get the lowest executed price for an NFT contract for the last x days (only trades paid in ETH). */\nexports.getNFTLowestPriceOperation = {\n  method: 'GET',\n  name: 'getNFTLowestPrice',\n  id: 'getNFTLowestPrice',\n  groupName: 'nft',\n  isNullable: true,\n  urlPathPattern: '/nft/{address}/lowestprice',\n  urlPathParamNames: ['address'],\n  urlSearchParamNames: ['chain', 'days', 'marketplace'],\n  getRequestUrlParams: getRequestUrlParams,\n  serializeRequest: serializeRequest,\n  deserializeRequest: deserializeRequest,\n  deserializeResponse: deserializeResponse\n};\n// Methods\nfunction getRequestUrlParams(request, core) {\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n    address: dataTypes_1.EvmAddress.create(request.address, core).lowercase,\n    days: (0, common_core_1.maybe)(request.days, String),\n    marketplace: request.marketplace\n  };\n}\nfunction deserializeResponse(jsonResponse, request, core) {\n  return dataTypes_1.EvmNftTrade.create(__assign(__assign({}, (0, common_core_1.toCamelCase)(jsonResponse)), {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core),\n    sellerAddress: dataTypes_1.EvmAddress.create(jsonResponse.seller_address, core),\n    buyerAddress: dataTypes_1.EvmAddress.create(jsonResponse.buyer_address, core),\n    marketplaceAddress: dataTypes_1.EvmAddress.create(jsonResponse.marketplace_address, core),\n    tokenAddress: dataTypes_1.EvmAddress.create(jsonResponse.token_address, core),\n    price: dataTypes_1.EvmNative.create(jsonResponse.price, 'wei'),\n    blockTimestamp: new Date(jsonResponse.block_timestamp),\n    tokenIds: jsonResponse.token_ids\n  }));\n}\nfunction serializeRequest(request, core) {\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n    days: request.days,\n    marketplace: request.marketplace,\n    address: dataTypes_1.EvmAddress.create(request.address, core).checksum\n  };\n}\nfunction deserializeRequest(jsonRequest, core) {\n  return {\n    chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),\n    days: jsonRequest.days,\n    marketplace: jsonRequest.marketplace,\n    address: dataTypes_1.EvmAddress.create(jsonRequest.address, core)\n  };\n}","map":{"version":3,"sources":["../../../src/operations/nft/getNFTLowestPriceOperation.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getNFTLowestPriceOperation = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar dataTypes_1 = require(\"../../dataTypes\");\nvar EvmChainResolver_1 = require(\"../../EvmChainResolver\");\n/** Get the lowest executed price for an NFT contract for the last x days (only trades paid in ETH). */\nexports.getNFTLowestPriceOperation = {\n    method: 'GET',\n    name: 'getNFTLowestPrice',\n    id: 'getNFTLowestPrice',\n    groupName: 'nft',\n    isNullable: true,\n    urlPathPattern: '/nft/{address}/lowestprice',\n    urlPathParamNames: ['address'],\n    urlSearchParamNames: ['chain', 'days', 'marketplace'],\n    getRequestUrlParams: getRequestUrlParams,\n    serializeRequest: serializeRequest,\n    deserializeRequest: deserializeRequest,\n    deserializeResponse: deserializeResponse,\n};\n// Methods\nfunction getRequestUrlParams(request, core) {\n    return {\n        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n        address: dataTypes_1.EvmAddress.create(request.address, core).lowercase,\n        days: (0, common_core_1.maybe)(request.days, String),\n        marketplace: request.marketplace,\n    };\n}\nfunction deserializeResponse(jsonResponse, request, core) {\n    return dataTypes_1.EvmNftTrade.create(__assign(__assign({}, (0, common_core_1.toCamelCase)(jsonResponse)), { chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core), sellerAddress: dataTypes_1.EvmAddress.create(jsonResponse.seller_address, core), buyerAddress: dataTypes_1.EvmAddress.create(jsonResponse.buyer_address, core), marketplaceAddress: dataTypes_1.EvmAddress.create(jsonResponse.marketplace_address, core), tokenAddress: dataTypes_1.EvmAddress.create(jsonResponse.token_address, core), price: dataTypes_1.EvmNative.create(jsonResponse.price, 'wei'), blockTimestamp: new Date(jsonResponse.block_timestamp), tokenIds: jsonResponse.token_ids }));\n}\nfunction serializeRequest(request, core) {\n    return {\n        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n        days: request.days,\n        marketplace: request.marketplace,\n        address: dataTypes_1.EvmAddress.create(request.address, core).checksum,\n    };\n}\nfunction deserializeRequest(jsonRequest, core) {\n    return {\n        chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),\n        days: jsonRequest.days,\n        marketplace: jsonRequest.marketplace,\n        address: dataTypes_1.EvmAddress.create(jsonRequest.address, core),\n    };\n}\n//# sourceMappingURL=getNFTLowestPriceOperation.js.map"]},"metadata":{},"sourceType":"script"}