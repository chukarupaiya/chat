{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getBalanceOperation = void 0;\nvar dataTypes_1 = require(\"../../dataTypes\");\nvar SolNetworkResolver_1 = require(\"../../SolNetworkResolver\");\n/** Gets native balance owned by the given network and address */\nexports.getBalanceOperation = {\n  method: 'GET',\n  name: 'getBalance',\n  id: 'balance',\n  groupName: 'account',\n  urlPathParamNames: ['network', 'address'],\n  urlPathPattern: '/account/{network}/{address}/balance',\n  getRequestUrlParams: getRequestUrlParams,\n  deserializeResponse: deserializeResponse,\n  serializeRequest: serializeRequest,\n  deserializeRequest: deserializeRequest\n};\n// Methods\nfunction getRequestUrlParams(request, core) {\n  return {\n    network: SolNetworkResolver_1.SolNetworkResolver.resolve(request.network, core),\n    address: dataTypes_1.SolAddress.create(request.address).address\n  };\n}\nfunction deserializeResponse(jsonResponse) {\n  return dataTypes_1.SolNative.create(jsonResponse.lamports);\n}\nfunction serializeRequest(request, core) {\n  return {\n    address: dataTypes_1.SolAddress.create(request.address).address,\n    network: SolNetworkResolver_1.SolNetworkResolver.resolve(request.network, core)\n  };\n}\nfunction deserializeRequest(jsonRequest) {\n  return {\n    network: dataTypes_1.SolNetwork.create(jsonRequest.network),\n    address: dataTypes_1.SolAddress.create(jsonRequest.address)\n  };\n}","map":{"version":3,"sources":["../../../src/operations/account/getBalanceOperation.ts"],"names":[],"mappings":";;;;;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;AACA,IAAA,oBAAA,GAAA,OAAA,CAAA,0BAAA,CAAA;AAsBA;AACa,OAAA,CAAA,mBAAmB,GAK5B;EACF,MAAM,EAAE,KAAK;EACb,IAAI,EAAE,YAAY;EAClB,EAAE,EAAE,SAAS;EACb,SAAS,EAAE,SAAS;EACpB,iBAAiB,EAAE,CAAC,SAAS,EAAE,SAAS,CAAC;EACzC,cAAc,EAAE,sCAAsC;EAEtD,mBAAmB,EAAA,mBAAA;EACnB,mBAAmB,EAAA,mBAAA;EACnB,gBAAgB,EAAA,gBAAA;EAChB,kBAAkB,EAAA;CACnB;AAED;AAEA,SAAS,mBAAmB,CAAC,OAA0B,EAAE,IAAU,EAAA;EACjE,OAAO;IACL,OAAO,EAAE,oBAAA,CAAA,kBAAkB,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC;IAC1D,OAAO,EAAE,WAAA,CAAA,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;GAC7C;AACH;AAEA,SAAS,mBAAmB,CAAC,YAAoC,EAAA;EAC/D,OAAO,WAAA,CAAA,SAAS,CAAC,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC;AAChD;AAEA,SAAS,gBAAgB,CAAC,OAA0B,EAAE,IAAU,EAAA;EAC9D,OAAO;IACL,OAAO,EAAE,WAAA,CAAA,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,OAAO;IACnD,OAAO,EAAE,oBAAA,CAAA,kBAAkB,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI;GAC1D;AACH;AAEA,SAAS,kBAAkB,CAAC,WAAkC,EAAA;EAC5D,OAAO;IACL,OAAO,EAAE,WAAA,CAAA,UAAU,CAAC,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC;IAC/C,OAAO,EAAE,WAAA,CAAA,UAAU,CAAC,MAAM,CAAC,WAAW,CAAC,OAAO;GAC/C;AACH","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getBalanceOperation = void 0;\nvar dataTypes_1 = require(\"../../dataTypes\");\nvar SolNetworkResolver_1 = require(\"../../SolNetworkResolver\");\n/** Gets native balance owned by the given network and address */\nexports.getBalanceOperation = {\n    method: 'GET',\n    name: 'getBalance',\n    id: 'balance',\n    groupName: 'account',\n    urlPathParamNames: ['network', 'address'],\n    urlPathPattern: '/account/{network}/{address}/balance',\n    getRequestUrlParams: getRequestUrlParams,\n    deserializeResponse: deserializeResponse,\n    serializeRequest: serializeRequest,\n    deserializeRequest: deserializeRequest,\n};\n// Methods\nfunction getRequestUrlParams(request, core) {\n    return {\n        network: SolNetworkResolver_1.SolNetworkResolver.resolve(request.network, core),\n        address: dataTypes_1.SolAddress.create(request.address).address,\n    };\n}\nfunction deserializeResponse(jsonResponse) {\n    return dataTypes_1.SolNative.create(jsonResponse.lamports);\n}\nfunction serializeRequest(request, core) {\n    return {\n        address: dataTypes_1.SolAddress.create(request.address).address,\n        network: SolNetworkResolver_1.SolNetworkResolver.resolve(request.network, core),\n    };\n}\nfunction deserializeRequest(jsonRequest) {\n    return {\n        network: dataTypes_1.SolNetwork.create(jsonRequest.network),\n        address: dataTypes_1.SolAddress.create(jsonRequest.address),\n    };\n}\n//# sourceMappingURL=getBalanceOperation.js.map"]},"metadata":{},"sourceType":"script"}