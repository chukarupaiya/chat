{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getNFTMetadataOperation = void 0;\nvar dataTypes_1 = require(\"../../dataTypes\");\nvar SolNetworkResolver_1 = require(\"../../SolNetworkResolver\");\n/** Gets the contract level metadata (mint, standard, name, symbol, metaplex) for the given network and contract */\nexports.getNFTMetadataOperation = {\n  method: 'GET',\n  name: 'getNFTMetadata',\n  id: 'getNFTMetadata',\n  groupName: 'nft',\n  urlPathParamNames: ['network', 'address'],\n  urlPathPattern: '/nft/{network}/{address}/metadata',\n  getRequestUrlParams: getRequestUrlParams,\n  deserializeResponse: deserializeResponse,\n  serializeRequest: serializeRequest,\n  deserializeRequest: deserializeRequest\n};\n// Methods\nfunction getRequestUrlParams(request, core) {\n  return {\n    network: SolNetworkResolver_1.SolNetworkResolver.resolve(request.network, core),\n    address: dataTypes_1.SolAddress.create(request.address).address\n  };\n}\nfunction deserializeResponse(jsonResponse) {\n  return {\n    mint: dataTypes_1.SolAddress.create(jsonResponse.mint),\n    standard: jsonResponse.standard,\n    name: jsonResponse.name,\n    symbol: jsonResponse.symbol,\n    metaplex: {\n      metadataUri: jsonResponse.metaplex.metadataUri,\n      updateAuthority: dataTypes_1.SolAddress.create(jsonResponse.metaplex.updateAuthority),\n      sellerFeeBasisPoints: jsonResponse.metaplex.sellerFeeBasisPoints,\n      primarySaleHappened: jsonResponse.metaplex.primarySaleHappened,\n      isMutable: jsonResponse.metaplex.isMutable,\n      masterEdition: jsonResponse.metaplex.masterEdition\n    }\n  };\n}\nfunction serializeRequest(request, core) {\n  return {\n    address: dataTypes_1.SolAddress.create(request.address).address,\n    network: SolNetworkResolver_1.SolNetworkResolver.resolve(request.network, core)\n  };\n}\nfunction deserializeRequest(jsonRequest) {\n  return {\n    network: dataTypes_1.SolNetwork.create(jsonRequest.network),\n    address: dataTypes_1.SolAddress.create(jsonRequest.address)\n  };\n}","map":{"version":3,"sources":["../../../src/operations/nft/getNFTMetadataOperation.ts"],"names":[],"mappings":";;;;;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;AACA,IAAA,oBAAA,GAAA,OAAA,CAAA,0BAAA,CAAA;AAuBA;AACa,OAAA,CAAA,uBAAuB,GAKhC;EACF,MAAM,EAAE,KAAK;EACb,IAAI,EAAE,gBAAgB;EACtB,EAAE,EAAE,gBAAgB;EACpB,SAAS,EAAE,KAAK;EAChB,iBAAiB,EAAE,CAAC,SAAS,EAAE,SAAS,CAAC;EACzC,cAAc,EAAE,mCAAmC;EAEnD,mBAAmB,EAAA,mBAAA;EACnB,mBAAmB,EAAA,mBAAA;EACnB,gBAAgB,EAAA,gBAAA;EAChB,kBAAkB,EAAA;CACnB;AAED;AAEA,SAAS,mBAAmB,CAAC,OAA8B,EAAE,IAAU,EAAA;EACrE,OAAO;IACL,OAAO,EAAE,oBAAA,CAAA,kBAAkB,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC;IAC1D,OAAO,EAAE,WAAA,CAAA,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;GAC7C;AACH;AAEA,SAAS,mBAAmB,CAAC,YAAwC,EAAA;EACnE,OAAO;IACL,IAAI,EAAE,WAAA,CAAA,UAAU,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC;IAC1C,QAAQ,EAAE,YAAY,CAAC,QAAQ;IAC/B,IAAI,EAAE,YAAY,CAAC,IAAI;IACvB,MAAM,EAAE,YAAY,CAAC,MAAM;IAC3B,QAAQ,EAAE;MACR,WAAW,EAAE,YAAY,CAAC,QAAQ,CAAC,WAAW;MAC9C,eAAe,EAAE,WAAA,CAAA,UAAU,CAAC,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,eAAe,CAAC;MACzE,oBAAoB,EAAE,YAAY,CAAC,QAAQ,CAAC,oBAAoB;MAChE,mBAAmB,EAAE,YAAY,CAAC,QAAQ,CAAC,mBAAmB;MAC9D,SAAS,EAAE,YAAY,CAAC,QAAQ,CAAC,SAAS;MAC1C,aAAa,EAAE,YAAY,CAAC,QAAQ,CAAC;IACtC;GACF;AACH;AAEA,SAAS,gBAAgB,CAAC,OAA8B,EAAE,IAAU,EAAA;EAClE,OAAO;IACL,OAAO,EAAE,WAAA,CAAA,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,OAAO;IACnD,OAAO,EAAE,oBAAA,CAAA,kBAAkB,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI;GAC1D;AACH;AAEA,SAAS,kBAAkB,CAAC,WAAsC,EAAA;EAChE,OAAO;IACL,OAAO,EAAE,WAAA,CAAA,UAAU,CAAC,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC;IAC/C,OAAO,EAAE,WAAA,CAAA,UAAU,CAAC,MAAM,CAAC,WAAW,CAAC,OAAO;GAC/C;AACH","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getNFTMetadataOperation = void 0;\nvar dataTypes_1 = require(\"../../dataTypes\");\nvar SolNetworkResolver_1 = require(\"../../SolNetworkResolver\");\n/** Gets the contract level metadata (mint, standard, name, symbol, metaplex) for the given network and contract */\nexports.getNFTMetadataOperation = {\n    method: 'GET',\n    name: 'getNFTMetadata',\n    id: 'getNFTMetadata',\n    groupName: 'nft',\n    urlPathParamNames: ['network', 'address'],\n    urlPathPattern: '/nft/{network}/{address}/metadata',\n    getRequestUrlParams: getRequestUrlParams,\n    deserializeResponse: deserializeResponse,\n    serializeRequest: serializeRequest,\n    deserializeRequest: deserializeRequest,\n};\n// Methods\nfunction getRequestUrlParams(request, core) {\n    return {\n        network: SolNetworkResolver_1.SolNetworkResolver.resolve(request.network, core),\n        address: dataTypes_1.SolAddress.create(request.address).address,\n    };\n}\nfunction deserializeResponse(jsonResponse) {\n    return {\n        mint: dataTypes_1.SolAddress.create(jsonResponse.mint),\n        standard: jsonResponse.standard,\n        name: jsonResponse.name,\n        symbol: jsonResponse.symbol,\n        metaplex: {\n            metadataUri: jsonResponse.metaplex.metadataUri,\n            updateAuthority: dataTypes_1.SolAddress.create(jsonResponse.metaplex.updateAuthority),\n            sellerFeeBasisPoints: jsonResponse.metaplex.sellerFeeBasisPoints,\n            primarySaleHappened: jsonResponse.metaplex.primarySaleHappened,\n            isMutable: jsonResponse.metaplex.isMutable,\n            masterEdition: jsonResponse.metaplex.masterEdition,\n        },\n    };\n}\nfunction serializeRequest(request, core) {\n    return {\n        address: dataTypes_1.SolAddress.create(request.address).address,\n        network: SolNetworkResolver_1.SolNetworkResolver.resolve(request.network, core),\n    };\n}\nfunction deserializeRequest(jsonRequest) {\n    return {\n        network: dataTypes_1.SolNetwork.create(jsonRequest.network),\n        address: dataTypes_1.SolAddress.create(jsonRequest.address),\n    };\n}\n//# sourceMappingURL=getNFTMetadataOperation.js.map"]},"metadata":{},"sourceType":"script"}