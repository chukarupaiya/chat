{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getNFTTradesOperation = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar dataTypes_1 = require(\"../../dataTypes\");\nvar EvmChainResolver_1 = require(\"../../EvmChainResolver\");\n/** Get trades of NFTs for a given contract and marketplace. */\nexports.getNFTTradesOperation = {\n  method: 'GET',\n  name: 'getNFTTrades',\n  id: 'getNFTTrades',\n  groupName: 'nft',\n  urlPathPattern: '/nft/{address}/trades',\n  urlPathParamNames: ['address'],\n  urlSearchParamNames: ['chain', 'fromBlock', 'toBlock', 'fromDate', 'toDate', 'marketplace', 'cursor', 'limit', 'disableTotal'],\n  firstPageIndex: 0,\n  getRequestUrlParams: getRequestUrlParams,\n  serializeRequest: serializeRequest,\n  deserializeRequest: deserializeRequest,\n  deserializeResponse: deserializeResponse\n};\n// Methods\nfunction getRequestUrlParams(request, core) {\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n    address: dataTypes_1.EvmAddress.create(request.address, core).lowercase,\n    from_block: (0, common_core_1.maybe)(request.fromBlock, String),\n    to_block: (0, common_core_1.maybe)(request.toBlock, String),\n    from_date: request.fromDate ? new Date(request.fromDate).toISOString() : undefined,\n    to_date: request.toDate ? new Date(request.toDate).toISOString() : undefined,\n    marketplace: request.marketplace,\n    cursor: request.cursor,\n    limit: (0, common_core_1.maybe)(request.limit, String),\n    disable_total: request.disableTotal\n  };\n}\nfunction deserializeResponse(jsonResponse, request, core) {\n  var _a;\n  return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (trade) {\n    return dataTypes_1.EvmNftTrade.create(__assign(__assign({}, (0, common_core_1.toCamelCase)(trade)), {\n      chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core),\n      sellerAddress: dataTypes_1.EvmAddress.create(trade.seller_address, core),\n      buyerAddress: dataTypes_1.EvmAddress.create(trade.buyer_address, core),\n      marketplaceAddress: dataTypes_1.EvmAddress.create(trade.marketplace_address, core),\n      tokenAddress: dataTypes_1.EvmAddress.create(trade.token_address, core),\n      price: dataTypes_1.EvmNative.create(trade.price, 'wei'),\n      blockTimestamp: new Date(trade.block_timestamp),\n      tokenIds: trade.token_ids\n    }));\n  });\n}\nfunction serializeRequest(request, core) {\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n    fromBlock: request.fromBlock,\n    toBlock: request.toBlock,\n    fromDate: request.fromDate,\n    toDate: request.toDate,\n    marketplace: request.marketplace,\n    cursor: request.cursor,\n    limit: request.limit,\n    address: dataTypes_1.EvmAddress.create(request.address, core).checksum,\n    disableTotal: request.disableTotal\n  };\n}\nfunction deserializeRequest(jsonRequest, core) {\n  return {\n    chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),\n    fromBlock: jsonRequest.fromBlock,\n    toBlock: jsonRequest.toBlock,\n    fromDate: jsonRequest.fromDate,\n    toDate: jsonRequest.toDate,\n    marketplace: jsonRequest.marketplace,\n    cursor: jsonRequest.cursor,\n    limit: jsonRequest.limit,\n    address: dataTypes_1.EvmAddress.create(jsonRequest.address, core),\n    disableTotal: jsonRequest.disableTotal\n  };\n}","map":{"version":3,"sources":["../../../src/operations/nft/getNFTTradesOperation.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getNFTTradesOperation = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar dataTypes_1 = require(\"../../dataTypes\");\nvar EvmChainResolver_1 = require(\"../../EvmChainResolver\");\n/** Get trades of NFTs for a given contract and marketplace. */\nexports.getNFTTradesOperation = {\n    method: 'GET',\n    name: 'getNFTTrades',\n    id: 'getNFTTrades',\n    groupName: 'nft',\n    urlPathPattern: '/nft/{address}/trades',\n    urlPathParamNames: ['address'],\n    urlSearchParamNames: [\n        'chain',\n        'fromBlock',\n        'toBlock',\n        'fromDate',\n        'toDate',\n        'marketplace',\n        'cursor',\n        'limit',\n        'disableTotal',\n    ],\n    firstPageIndex: 0,\n    getRequestUrlParams: getRequestUrlParams,\n    serializeRequest: serializeRequest,\n    deserializeRequest: deserializeRequest,\n    deserializeResponse: deserializeResponse,\n};\n// Methods\nfunction getRequestUrlParams(request, core) {\n    return {\n        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n        address: dataTypes_1.EvmAddress.create(request.address, core).lowercase,\n        from_block: (0, common_core_1.maybe)(request.fromBlock, String),\n        to_block: (0, common_core_1.maybe)(request.toBlock, String),\n        from_date: request.fromDate ? new Date(request.fromDate).toISOString() : undefined,\n        to_date: request.toDate ? new Date(request.toDate).toISOString() : undefined,\n        marketplace: request.marketplace,\n        cursor: request.cursor,\n        limit: (0, common_core_1.maybe)(request.limit, String),\n        disable_total: request.disableTotal,\n    };\n}\nfunction deserializeResponse(jsonResponse, request, core) {\n    var _a;\n    return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (trade) {\n        return dataTypes_1.EvmNftTrade.create(__assign(__assign({}, (0, common_core_1.toCamelCase)(trade)), { chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core), sellerAddress: dataTypes_1.EvmAddress.create(trade.seller_address, core), buyerAddress: dataTypes_1.EvmAddress.create(trade.buyer_address, core), marketplaceAddress: dataTypes_1.EvmAddress.create(trade.marketplace_address, core), tokenAddress: dataTypes_1.EvmAddress.create(trade.token_address, core), price: dataTypes_1.EvmNative.create(trade.price, 'wei'), blockTimestamp: new Date(trade.block_timestamp), tokenIds: trade.token_ids }));\n    });\n}\nfunction serializeRequest(request, core) {\n    return {\n        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n        fromBlock: request.fromBlock,\n        toBlock: request.toBlock,\n        fromDate: request.fromDate,\n        toDate: request.toDate,\n        marketplace: request.marketplace,\n        cursor: request.cursor,\n        limit: request.limit,\n        address: dataTypes_1.EvmAddress.create(request.address, core).checksum,\n        disableTotal: request.disableTotal,\n    };\n}\nfunction deserializeRequest(jsonRequest, core) {\n    return {\n        chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),\n        fromBlock: jsonRequest.fromBlock,\n        toBlock: jsonRequest.toBlock,\n        fromDate: jsonRequest.fromDate,\n        toDate: jsonRequest.toDate,\n        marketplace: jsonRequest.marketplace,\n        cursor: jsonRequest.cursor,\n        limit: jsonRequest.limit,\n        address: dataTypes_1.EvmAddress.create(jsonRequest.address, core),\n        disableTotal: jsonRequest.disableTotal,\n    };\n}\n//# sourceMappingURL=getNFTTradesOperation.js.map"]},"metadata":{},"sourceType":"script"}