{"ast":null,"code":"\"use strict\";\n\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OperationRequestValidator = void 0;\nvar Error_1 = require(\"../Error\");\nvar OperationRequestValidator = /** @class */function () {\n  function OperationRequestValidator(operation) {\n    this.allParamNames = __spreadArray(__spreadArray(__spreadArray([], operation.urlPathParamNames || [], true), operation.urlSearchParamNames || [], true), operation.bodyParamNames || [], true);\n  }\n  OperationRequestValidator.prototype.validate = function (request) {\n    var requestParamNames = Object.keys(request);\n    for (var _i = 0, requestParamNames_1 = requestParamNames; _i < requestParamNames_1.length; _i++) {\n      var paramName = requestParamNames_1[_i];\n      if (!this.allParamNames.includes(paramName)) {\n        var allParamsNames = this.allParamNames.join(', ');\n        throw new Error_1.MoralisError({\n          code: Error_1.CoreErrorCode.INVALID_ARGUMENT,\n          message: \"Request contains unknown parameter: \".concat(paramName, \". This operation supports the following parameters: \").concat(allParamsNames)\n        });\n      }\n    }\n  };\n  return OperationRequestValidator;\n}();\nexports.OperationRequestValidator = OperationRequestValidator;","map":{"version":3,"sources":["../../src/operations/OperationRequestValidator.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,IAAA,OAAA,GAAA,OAAA,CAAA,UAAA,CAAA;AAGA,IAAA,yBAAA,GAAA,aAAA,YAAA;EAGE,SAAA,yBAAA,CAAmB,SAAwD,EAAA;IACzE,IAAI,CAAC,aAAa,GAAA,aAAA,CAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EACZ,SAAS,CAAC,iBAAiB,IAAI,EAAE,EAAC,IAAA,CAAA,EAClC,SAAS,CAAC,mBAAmB,IAAI,EAAE,EAAC,IAAA,CAAA,EACpC,SAAS,CAAC,cAAc,IAAI,EAAE,EAAC,IAAA,CACpC;EACH;EAEO,yBAAA,CAAA,SAAA,CAAA,QAAQ,GAAf,UAAgB,OAAgB,EAAA;IAC9B,IAAM,iBAAiB,GAAG,MAAM,CAAC,IAAI,CAAC,OAAkC,CAAC;IAEzE,KAAwB,IAAA,EAAA,GAAA,CAAiB,EAAjB,mBAAA,GAAA,iBAAiB,EAAjB,EAAA,GAAA,mBAAA,CAAA,MAAiB,EAAjB,EAAA,EAAiB,EAAE;MAAtC,IAAM,SAAS,GAAA,mBAAA,CAAA,EAAA,CAAA;MAClB,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,SAA0B,CAAC,EAAE;QAC5D,IAAM,cAAc,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC;QACpD,MAAM,IAAI,OAAA,CAAA,YAAY,CAAC;UACrB,IAAI,EAAE,OAAA,CAAA,aAAa,CAAC,gBAAgB;UACpC,OAAO,EAAE,sCAAA,CAAA,MAAA,CAAuC,SAAS,EAAA,sDAAA,CAAA,CAAA,MAAA,CAAuD,cAAc;SAC/H,CAAC;MACH;IACF;EACH,CAAC;EACH,OAAA,yBAAC;AAAD,CAAC,EAAA;AAxBY,OAAA,CAAA,yBAAA,GAAA,yBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OperationRequestValidator = void 0;\nvar Error_1 = require(\"../Error\");\nvar OperationRequestValidator = /** @class */ (function () {\n    function OperationRequestValidator(operation) {\n        this.allParamNames = __spreadArray(__spreadArray(__spreadArray([], (operation.urlPathParamNames || []), true), (operation.urlSearchParamNames || []), true), (operation.bodyParamNames || []), true);\n    }\n    OperationRequestValidator.prototype.validate = function (request) {\n        var requestParamNames = Object.keys(request);\n        for (var _i = 0, requestParamNames_1 = requestParamNames; _i < requestParamNames_1.length; _i++) {\n            var paramName = requestParamNames_1[_i];\n            if (!this.allParamNames.includes(paramName)) {\n                var allParamsNames = this.allParamNames.join(', ');\n                throw new Error_1.MoralisError({\n                    code: Error_1.CoreErrorCode.INVALID_ARGUMENT,\n                    message: \"Request contains unknown parameter: \".concat(paramName, \". This operation supports the following parameters: \").concat(allParamsNames),\n                });\n            }\n        }\n    };\n    return OperationRequestValidator;\n}());\nexports.OperationRequestValidator = OperationRequestValidator;\n//# sourceMappingURL=OperationRequestValidator.js.map"]},"metadata":{},"sourceType":"script"}