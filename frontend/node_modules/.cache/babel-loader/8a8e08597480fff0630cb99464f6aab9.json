{"ast":null,"code":"'use strict';\n\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base(ALPHABET) {\n  if (ALPHABET.length >= 255) {\n    throw new TypeError('Alphabet too long');\n  }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) {\n      throw new TypeError(x + ' is ambiguous');\n    }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n  function encode(source) {\n    if (source instanceof Uint8Array) {} else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) {\n      throw new TypeError('Expected Uint8Array');\n    }\n    if (source.length === 0) {\n      return '';\n    }\n    // Skip & count leading zeroes.\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n    // Allocate enough space in big-endian base58 representation.\n    var size = (pend - pbegin) * iFACTOR + 1 >>> 0;\n    var b58 = new Uint8Array(size);\n    // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n      // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++) {\n        carry += 256 * b58[it1] >>> 0;\n        b58[it1] = carry % BASE >>> 0;\n        carry = carry / BASE >>> 0;\n      }\n      if (carry !== 0) {\n        throw new Error('Non-zero carry');\n      }\n      length = i;\n      pbegin++;\n    }\n    // Skip leading zeroes in base58 result.\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n    // Translate the result into a string.\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) {\n      str += ALPHABET.charAt(b58[it2]);\n    }\n    return str;\n  }\n  function decodeUnsafe(source) {\n    if (typeof source !== 'string') {\n      throw new TypeError('Expected String');\n    }\n    if (source.length === 0) {\n      return new Uint8Array();\n    }\n    var psz = 0;\n    // Skip and count leading '1's.\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n    // Allocate enough space in big-endian base256 representation.\n    var size = (source.length - psz) * FACTOR + 1 >>> 0; // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size);\n    // Process the characters.\n    while (source[psz]) {\n      // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n      // Invalid character\n      if (carry === 255) {\n        return;\n      }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++) {\n        carry += BASE * b256[it3] >>> 0;\n        b256[it3] = carry % 256 >>> 0;\n        carry = carry / 256 >>> 0;\n      }\n      if (carry !== 0) {\n        throw new Error('Non-zero carry');\n      }\n      length = i;\n      psz++;\n    }\n    // Skip leading zeroes in b256.\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch;\n  }\n  function decode(string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) {\n      return buffer;\n    }\n    throw new Error('Non-base' + BASE + ' character');\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  };\n}\nmodule.exports = base;","map":{"version":3,"names":["base","ALPHABET","length","TypeError","BASE_MAP","Uint8Array","j","i","x","charAt","xc","charCodeAt","BASE","LEADER","FACTOR","Math","log","iFACTOR","encode","source","ArrayBuffer","isView","buffer","byteOffset","byteLength","Array","isArray","from","zeroes","pbegin","pend","size","b58","carry","it1","Error","it2","str","repeat","decodeUnsafe","psz","b256","it3","it4","vch","decode","string","module","exports"],"sources":["/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/node_modules/base-x/src/index.js"],"sourcesContent":["'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) {\n    } else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength)\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source)\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = new Uint8Array(zeroes + (size - it4))\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}