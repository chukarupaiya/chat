{"ast":null,"code":"\"use strict\";\n\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LogDocumentBuilder = void 0;\nvar LogDocumentValueFormatter_1 = require(\"./LogDocumentValueFormatter\");\nvar ParamNameResolver_1 = require(\"./ParamNameResolver\");\nvar LogRelatedId_1 = require(\"../common/LogRelatedId\");\nvar paramNames = ['id', 'name', 'logIndex', 'transactionHash', 'address', 'blockHash', 'blockTimestamp', 'blockNumber', 'confirmed', 'chainId'];\nvar restrictedParamNames = __spreadArray(__spreadArray([], paramNames, true), [\n// Some extra names\n'_id', 'uniqueId', 'updatedAt', 'createdAt', 'user', 'userId'], false);\nvar LogDocumentBuilder = /** @class */function () {\n  function LogDocumentBuilder() {}\n  LogDocumentBuilder.build = function (log, parsedLog, block, confirmed, chainId) {\n    var nameResolver = new ParamNameResolver_1.ParamNameResolver(restrictedParamNames);\n    var chain = Number(chainId);\n    var document = {\n      id: LogRelatedId_1.LogRelatedId.create(chain, log.transactionHash, log.logIndex),\n      name: parsedLog.name,\n      logIndex: parseInt(log.logIndex, 10),\n      transactionHash: log.transactionHash,\n      address: log.address,\n      blockHash: block.hash,\n      blockTimestamp: parseInt(block.timestamp, 10),\n      blockNumber: parseInt(block.number, 10),\n      confirmed: confirmed,\n      chainId: chain\n    };\n    nameResolver.iterate(parsedLog.params, function (safeParamName, paramValue) {\n      document[safeParamName] = LogDocumentValueFormatter_1.LogDocumentValueFormatter.format(paramValue);\n    });\n    return document;\n  };\n  return LogDocumentBuilder;\n}();\nexports.LogDocumentBuilder = LogDocumentBuilder;","map":{"version":3,"sources":["../../../src/mapping/logs-processor/LogDocumentBuilder.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAGA,IAAA,2BAAA,GAAA,OAAA,CAAA,6BAAA,CAAA;AACA,IAAA,mBAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;AAEA,IAAA,cAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;AAqBA,IAAM,UAAU,GAA8B,CAC5C,IAAI,EACJ,MAAM,EACN,UAAU,EACV,iBAAiB,EACjB,SAAS,EACT,WAAW,EACX,gBAAgB,EAChB,aAAa,EACb,WAAW,EACX,SAAS,CACV;AAED,IAAM,oBAAoB,GAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EACrB,UAAU,EAAA,IAAA,CAAA,EAAA;AACb;AACA,KAAK,EACL,UAAU,EACV,WAAW,EACX,WAAW,EACX,MAAM,EACN,QAAQ,C,QACT;AAED,IAAA,kBAAA,GAAA,aAAA,YAAA;EAAA,SAAA,kBAAA,GAAA,CAuBA;EAtBgB,kBAAA,CAAA,KAAK,GAAnB,UAAoB,GAAQ,EAAE,SAAoB,EAAE,KAAY,EAAE,SAAkB,EAAE,OAAe,EAAA;IACnG,IAAM,YAAY,GAAG,IAAI,mBAAA,CAAA,iBAAiB,CAAC,oBAAoB,CAAC;IAChE,IAAM,KAAK,GAAG,MAAM,CAAC,OAAO,CAAC;IAE7B,IAAM,QAAQ,GAAgB;MAC5B,EAAE,EAAE,cAAA,CAAA,YAAY,CAAC,MAAM,CAAC,KAAK,EAAE,GAAG,CAAC,eAAe,EAAE,GAAG,CAAC,QAAQ,CAAC;MACjE,IAAI,EAAE,SAAS,CAAC,IAAI;MACpB,QAAQ,EAAE,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,CAAC;MACpC,eAAe,EAAE,GAAG,CAAC,eAAe;MACpC,OAAO,EAAE,GAAG,CAAC,OAAO;MACpB,SAAS,EAAE,KAAK,CAAC,IAAI;MACrB,cAAc,EAAE,QAAQ,CAAC,KAAK,CAAC,SAAS,EAAE,EAAE,CAAC;MAC7C,WAAW,EAAE,QAAQ,CAAC,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC;MACvC,SAAS,EAAA,SAAA;MACT,OAAO,EAAE;KACV;IAED,YAAY,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,EAAE,UAAC,aAAa,EAAE,UAAU,EAAA;MAC/D,QAAQ,CAAC,aAAa,CAAC,GAAG,2BAAA,CAAA,yBAAyB,CAAC,MAAM,CAAC,UAAU,CAAC;IACxE,CAAC,CAAC;IACF,OAAO,QAAQ;EACjB,CAAC;EACH,OAAA,kBAAC;AAAD,CAAC,EAAA;AAvBY,OAAA,CAAA,kBAAA,GAAA,kBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LogDocumentBuilder = void 0;\nvar LogDocumentValueFormatter_1 = require(\"./LogDocumentValueFormatter\");\nvar ParamNameResolver_1 = require(\"./ParamNameResolver\");\nvar LogRelatedId_1 = require(\"../common/LogRelatedId\");\nvar paramNames = [\n    'id',\n    'name',\n    'logIndex',\n    'transactionHash',\n    'address',\n    'blockHash',\n    'blockTimestamp',\n    'blockNumber',\n    'confirmed',\n    'chainId',\n];\nvar restrictedParamNames = __spreadArray(__spreadArray([], paramNames, true), [\n    // Some extra names\n    '_id',\n    'uniqueId',\n    'updatedAt',\n    'createdAt',\n    'user',\n    'userId',\n], false);\nvar LogDocumentBuilder = /** @class */ (function () {\n    function LogDocumentBuilder() {\n    }\n    LogDocumentBuilder.build = function (log, parsedLog, block, confirmed, chainId) {\n        var nameResolver = new ParamNameResolver_1.ParamNameResolver(restrictedParamNames);\n        var chain = Number(chainId);\n        var document = {\n            id: LogRelatedId_1.LogRelatedId.create(chain, log.transactionHash, log.logIndex),\n            name: parsedLog.name,\n            logIndex: parseInt(log.logIndex, 10),\n            transactionHash: log.transactionHash,\n            address: log.address,\n            blockHash: block.hash,\n            blockTimestamp: parseInt(block.timestamp, 10),\n            blockNumber: parseInt(block.number, 10),\n            confirmed: confirmed,\n            chainId: chain,\n        };\n        nameResolver.iterate(parsedLog.params, function (safeParamName, paramValue) {\n            document[safeParamName] = LogDocumentValueFormatter_1.LogDocumentValueFormatter.format(paramValue);\n        });\n        return document;\n    };\n    return LogDocumentBuilder;\n}());\nexports.LogDocumentBuilder = LogDocumentBuilder;\n//# sourceMappingURL=LogDocumentBuilder.js.map"]},"metadata":{},"sourceType":"script"}