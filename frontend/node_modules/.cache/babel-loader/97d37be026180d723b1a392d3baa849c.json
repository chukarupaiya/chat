{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTokenPriceOperation = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar dataTypes_1 = require(\"../../dataTypes\");\nvar SolNetworkResolver_1 = require(\"../../SolNetworkResolver\");\n/** Gets the token price (usd and native) for a given contract address and network */\nexports.getTokenPriceOperation = {\n  method: 'GET',\n  name: 'getTokenPrice',\n  id: 'getTokenPrice',\n  groupName: 'token',\n  urlPathParamNames: ['network', 'address'],\n  urlPathPattern: '/token/{network}/{address}/price',\n  getRequestUrlParams: getRequestUrlParams,\n  deserializeResponse: deserializeResponse,\n  serializeRequest: serializeRequest,\n  deserializeRequest: deserializeRequest\n};\n// Methods\nfunction getRequestUrlParams(request, core) {\n  var network = SolNetworkResolver_1.SolNetworkResolver.resolve(request.network, core);\n  if (network !== 'mainnet') {\n    throw new common_core_1.MoralisApiError({\n      message: \"Incorrct value for 'network', getTokenPrice is only available on mainnet\",\n      code: common_core_1.ApiErrorCode.INVALID_PARAMS\n    });\n  }\n  return {\n    network: SolNetworkResolver_1.SolNetworkResolver.resolve(request.network, core),\n    address: dataTypes_1.SolAddress.create(request.address).address\n  };\n}\nfunction deserializeResponse(jsonResponse) {\n  return {\n    nativePrice: {\n      value: dataTypes_1.SolNative.create(jsonResponse.nativePrice.value, 'solana'),\n      decimals: jsonResponse.nativePrice.decimals,\n      name: jsonResponse.nativePrice.name,\n      symbol: jsonResponse.nativePrice.symbol\n    },\n    usdPrice: jsonResponse.usdPrice,\n    exchangeAddress: dataTypes_1.SolAddress.create(jsonResponse.exchangeAddress),\n    exchangeName: jsonResponse.exchangeName\n  };\n}\nfunction serializeRequest(request, core) {\n  return {\n    address: dataTypes_1.SolAddress.create(request.address).address,\n    network: SolNetworkResolver_1.SolNetworkResolver.resolve(request.network, core)\n  };\n}\nfunction deserializeRequest(jsonRequest) {\n  return {\n    network: dataTypes_1.SolNetwork.create(jsonRequest.network),\n    address: dataTypes_1.SolAddress.create(jsonRequest.address)\n  };\n}","map":{"version":3,"sources":["../../../src/operations/token/getTokenPriceOperation.ts"],"names":[],"mappings":";;;;;;AAAA,IAAA,aAAA,GAAA,OAAA,CAAA,0BAAA,CAAA;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;AACA,IAAA,oBAAA,GAAA,OAAA,CAAA,0BAAA,CAAA;AAuBA;AACa,OAAA,CAAA,sBAAsB,GAK/B;EACF,MAAM,EAAE,KAAK;EACb,IAAI,EAAE,eAAe;EACrB,EAAE,EAAE,eAAe;EACnB,SAAS,EAAE,OAAO;EAClB,iBAAiB,EAAE,CAAC,SAAS,EAAE,SAAS,CAAC;EACzC,cAAc,EAAE,kCAAkC;EAElD,mBAAmB,EAAA,mBAAA;EACnB,mBAAmB,EAAA,mBAAA;EACnB,gBAAgB,EAAA,gBAAA;EAChB,kBAAkB,EAAA;CACnB;AAED;AAEA,SAAS,mBAAmB,CAAC,OAA6B,EAAE,IAAU,EAAA;EACpE,IAAM,OAAO,GAAG,oBAAA,CAAA,kBAAkB,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC;EAEjE,IAAI,OAAO,KAAK,SAAS,EAAE;IACzB,MAAM,IAAI,aAAA,CAAA,eAAe,CAAC;MACxB,OAAO,EAAE,0EAA0E;MACnF,IAAI,EAAE,aAAA,CAAA,YAAY,CAAC;KACpB,CAAC;EACH;EAED,OAAO;IACL,OAAO,EAAE,oBAAA,CAAA,kBAAkB,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC;IAC1D,OAAO,EAAE,WAAA,CAAA,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;GAC7C;AACH;AAEA,SAAS,mBAAmB,CAAC,YAAuC,EAAA;EAClE,OAAO;IACL,WAAW,EAAE;MACX,KAAK,EAAE,WAAA,CAAA,SAAS,CAAC,MAAM,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,EAAE,QAAQ,CAAC;MACjE,QAAQ,EAAE,YAAY,CAAC,WAAW,CAAC,QAAQ;MAC3C,IAAI,EAAE,YAAY,CAAC,WAAW,CAAC,IAAI;MACnC,MAAM,EAAE,YAAY,CAAC,WAAW,CAAC;KAClC;IACD,QAAQ,EAAE,YAAY,CAAC,QAAQ;IAC/B,eAAe,EAAE,WAAA,CAAA,UAAU,CAAC,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC;IAChE,YAAY,EAAE,YAAY,CAAC;GAC5B;AACH;AAEA,SAAS,gBAAgB,CAAC,OAA6B,EAAE,IAAU,EAAA;EACjE,OAAO;IACL,OAAO,EAAE,WAAA,CAAA,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,OAAO;IACnD,OAAO,EAAE,oBAAA,CAAA,kBAAkB,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI;GAC1D;AACH;AAEA,SAAS,kBAAkB,CAAC,WAAqC,EAAA;EAC/D,OAAO;IACL,OAAO,EAAE,WAAA,CAAA,UAAU,CAAC,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC;IAC/C,OAAO,EAAE,WAAA,CAAA,UAAU,CAAC,MAAM,CAAC,WAAW,CAAC,OAAO;GAC/C;AACH","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getTokenPriceOperation = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar dataTypes_1 = require(\"../../dataTypes\");\nvar SolNetworkResolver_1 = require(\"../../SolNetworkResolver\");\n/** Gets the token price (usd and native) for a given contract address and network */\nexports.getTokenPriceOperation = {\n    method: 'GET',\n    name: 'getTokenPrice',\n    id: 'getTokenPrice',\n    groupName: 'token',\n    urlPathParamNames: ['network', 'address'],\n    urlPathPattern: '/token/{network}/{address}/price',\n    getRequestUrlParams: getRequestUrlParams,\n    deserializeResponse: deserializeResponse,\n    serializeRequest: serializeRequest,\n    deserializeRequest: deserializeRequest,\n};\n// Methods\nfunction getRequestUrlParams(request, core) {\n    var network = SolNetworkResolver_1.SolNetworkResolver.resolve(request.network, core);\n    if (network !== 'mainnet') {\n        throw new common_core_1.MoralisApiError({\n            message: \"Incorrct value for 'network', getTokenPrice is only available on mainnet\",\n            code: common_core_1.ApiErrorCode.INVALID_PARAMS,\n        });\n    }\n    return {\n        network: SolNetworkResolver_1.SolNetworkResolver.resolve(request.network, core),\n        address: dataTypes_1.SolAddress.create(request.address).address,\n    };\n}\nfunction deserializeResponse(jsonResponse) {\n    return {\n        nativePrice: {\n            value: dataTypes_1.SolNative.create(jsonResponse.nativePrice.value, 'solana'),\n            decimals: jsonResponse.nativePrice.decimals,\n            name: jsonResponse.nativePrice.name,\n            symbol: jsonResponse.nativePrice.symbol,\n        },\n        usdPrice: jsonResponse.usdPrice,\n        exchangeAddress: dataTypes_1.SolAddress.create(jsonResponse.exchangeAddress),\n        exchangeName: jsonResponse.exchangeName,\n    };\n}\nfunction serializeRequest(request, core) {\n    return {\n        address: dataTypes_1.SolAddress.create(request.address).address,\n        network: SolNetworkResolver_1.SolNetworkResolver.resolve(request.network, core),\n    };\n}\nfunction deserializeRequest(jsonRequest) {\n    return {\n        network: dataTypes_1.SolNetwork.create(jsonRequest.network),\n        address: dataTypes_1.SolAddress.create(jsonRequest.address),\n    };\n}\n//# sourceMappingURL=getTokenPriceOperation.js.map"]},"metadata":{},"sourceType":"script"}