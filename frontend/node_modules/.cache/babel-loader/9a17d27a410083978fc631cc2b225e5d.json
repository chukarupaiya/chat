{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getMultipleNFTsOperation = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar dataTypes_1 = require(\"../../dataTypes\");\nvar EvmChainResolver_1 = require(\"../../EvmChainResolver\");\n/**\n * Get NFTs for a given contract address, including metadata for all NFTs (where available).\n * * Results are limited to 100 per page by default\n * * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection.\n */\nexports.getMultipleNFTsOperation = {\n  method: 'POST',\n  name: 'getMultipleNFTs',\n  id: 'getMultipleNFTs',\n  groupName: 'nft',\n  urlPathPattern: '/nft/getMultipleNFTs',\n  urlSearchParamNames: ['chain'],\n  bodyType: 'properties',\n  bodyParamNames: ['tokens', 'normalizeMetadata'],\n  getRequestUrlParams: getRequestUrlParams,\n  getRequestBody: getRequestBody,\n  serializeRequest: serializeRequest,\n  deserializeRequest: deserializeRequest,\n  deserializeResponse: deserializeResponse\n};\n// Methods\nfunction getRequestUrlParams(request, core) {\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex\n  };\n}\nfunction getRequestBody(request, core) {\n  return {\n    tokens: request.tokens.map(function (token) {\n      return {\n        token_address: dataTypes_1.EvmAddress.create(token.tokenAddress, core).lowercase,\n        token_id: token.tokenId\n      };\n    }),\n    normalizeMetadata: request.normalizeMetadata\n  };\n}\nfunction deserializeResponse(jsonResponse, request, core) {\n  return (jsonResponse !== null && jsonResponse !== void 0 ? jsonResponse : []).map(function (nft) {\n    if (nft === null) {\n      return null;\n    }\n    return dataTypes_1.EvmNft.create(__assign(__assign({}, (0, common_core_1.toCamelCase)(nft)), {\n      chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core),\n      amount: nft.amount ? parseInt(nft.amount, 10) : undefined,\n      ownerOf: dataTypes_1.EvmAddress.create(nft.owner_of, core),\n      lastMetadataSync: (0, common_core_1.dateInputToDate)(nft.last_metadata_sync),\n      lastTokenUriSync: (0, common_core_1.dateInputToDate)(nft.last_token_uri_sync)\n    }), core);\n  });\n}\nfunction serializeRequest(request, core) {\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n    normalizeMetadata: request.normalizeMetadata,\n    tokens: request.tokens.map(function (token) {\n      return {\n        tokenAddress: dataTypes_1.EvmAddress.create(token.tokenAddress, core).lowercase,\n        tokenId: token.tokenId\n      };\n    })\n  };\n}\nfunction deserializeRequest(jsonRequest, core) {\n  return {\n    chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),\n    normalizeMetadata: jsonRequest.normalizeMetadata,\n    tokens: jsonRequest.tokens.map(function (token) {\n      return {\n        tokenAddress: dataTypes_1.EvmAddress.create(token.tokenAddress, core),\n        tokenId: token.tokenId\n      };\n    })\n  };\n}","map":{"version":3,"sources":["../../../src/operations/nft/getMultipleNFTsOperation.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,IAAA,aAAA,GAAA,OAAA,CAAA,0BAAA,CAAA;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;AACA,IAAA,kBAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;AAkCA;;;;AAIG;AACU,OAAA,CAAA,wBAAwB,GAKjC;EACF,MAAM,EAAE,MAAM;EACd,IAAI,EAAE,iBAAiB;EACvB,EAAE,EAAE,iBAAiB;EACrB,SAAS,EAAE,KAAK;EAChB,cAAc,EAAE,sBAAsB;EACtC,mBAAmB,EAAE,CAAC,OAAO,CAAC;EAC9B,QAAQ,EAAE,YAAY;EACtB,cAAc,EAAE,CAAC,QAAQ,EAAE,mBAAmB,CAAC;EAE/C,mBAAmB,EAAA,mBAAA;EACnB,cAAc,EAAA,cAAA;EACd,gBAAgB,EAAA,gBAAA;EAChB,kBAAkB,EAAA,kBAAA;EAClB,mBAAmB,EAAA;CACpB;AAED;AACA,SAAS,mBAAmB,CAAC,OAA+B,EAAE,IAAU,EAAA;EACtE,OAAO;IACL,KAAK,EAAE,kBAAA,CAAA,gBAAgB,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;GACtD;AACH;AAEA,SAAS,cAAc,CAAC,OAA+B,EAAE,IAAU,EAAA;EACjE,OAAO;IACL,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,UAAC,KAAK,EAAA;MAAK,OAAC;QACrC,aAAa,EAAE,WAAA,CAAA,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC,SAAS;QACpE,QAAQ,EAAE,KAAK,CAAC;OACjB;IAHqC,CAGpC,CAAC;IACH,iBAAiB,EAAE,OAAO,CAAC;GAC5B;AACH;AAEA,SAAS,mBAAmB,CAAC,YAAyC,EAAE,OAA+B,EAAE,IAAU,EAAA;EACjH,OAAO,CAAC,YAAY,KAAA,IAAA,IAAZ,YAAY,KAAA,KAAA,CAAA,GAAZ,YAAY,GAAI,EAAE,EAAE,GAAG,CAAC,UAAC,GAAG,EAAA;IAClC,IAAI,GAAG,KAAK,IAAI,EAAE;MAChB,OAAO,IAAI;IACZ;IAED,OAAO,WAAA,CAAA,MAAM,CAAC,MAAM,CAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EAEb,CAAA,CAAA,EAAA,aAAA,CAAA,WAAW,EAAC,GAAG,CAAC,CAAA,EAAA;MACnB,KAAK,EAAE,kBAAA,CAAA,gBAAgB,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC;MACpD,MAAM,EAAE,GAAG,CAAC,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAC,MAAM,EAAE,EAAE,CAAC,GAAG,SAAS;MACzD,OAAO,EAAE,WAAA,CAAA,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC;MAC9C,gBAAgB,EAAE,CAAA,CAAA,EAAA,aAAA,CAAA,eAAe,EAAC,GAAG,CAAC,kBAAkB,CAAC;MACzD,gBAAgB,EAAE,CAAA,CAAA,EAAA,aAAA,CAAA,eAAe,EAAC,GAAG,CAAC,mBAAmB;IAAC,CAAA,CAAA,EAE5D,IAAI,CACL;EACH,CAAC,CAAC;AACJ;AAEA,SAAS,gBAAgB,CAAC,OAA+B,EAAE,IAAU,EAAA;EACnE,OAAO;IACL,KAAK,EAAE,kBAAA,CAAA,gBAAgB,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,MAAM;IAC3D,iBAAiB,EAAE,OAAO,CAAC,iBAAiB;IAC5C,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,UAAC,KAAK,EAAA;MAAK,OAAC;QACrC,YAAY,EAAE,WAAA,CAAA,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC,SAAS;QACnE,OAAO,EAAE,KAAK,CAAC;OAChB;IAHqC,CAGpC;GACH;AACH;AAEA,SAAS,kBAAkB,CAAC,WAAuC,EAAE,IAAU,EAAA;EAC7E,OAAO;IACL,KAAK,EAAE,WAAA,CAAA,QAAQ,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,EAAE,IAAI,CAAC;IAC/C,iBAAiB,EAAE,WAAW,CAAC,iBAAiB;IAChD,MAAM,EAAE,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,UAAC,KAAK,EAAA;MAAK,OAAC;QACzC,YAAY,EAAE,WAAA,CAAA,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,YAAY,EAAE,IAAI,CAAC;QACzD,OAAO,EAAE,KAAK,CAAC;OAChB;IAHyC,CAGxC;GACH;AACH","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getMultipleNFTsOperation = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar dataTypes_1 = require(\"../../dataTypes\");\nvar EvmChainResolver_1 = require(\"../../EvmChainResolver\");\n/**\n * Get NFTs for a given contract address, including metadata for all NFTs (where available).\n * * Results are limited to 100 per page by default\n * * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection.\n */\nexports.getMultipleNFTsOperation = {\n    method: 'POST',\n    name: 'getMultipleNFTs',\n    id: 'getMultipleNFTs',\n    groupName: 'nft',\n    urlPathPattern: '/nft/getMultipleNFTs',\n    urlSearchParamNames: ['chain'],\n    bodyType: 'properties',\n    bodyParamNames: ['tokens', 'normalizeMetadata'],\n    getRequestUrlParams: getRequestUrlParams,\n    getRequestBody: getRequestBody,\n    serializeRequest: serializeRequest,\n    deserializeRequest: deserializeRequest,\n    deserializeResponse: deserializeResponse,\n};\n// Methods\nfunction getRequestUrlParams(request, core) {\n    return {\n        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n    };\n}\nfunction getRequestBody(request, core) {\n    return {\n        tokens: request.tokens.map(function (token) { return ({\n            token_address: dataTypes_1.EvmAddress.create(token.tokenAddress, core).lowercase,\n            token_id: token.tokenId,\n        }); }),\n        normalizeMetadata: request.normalizeMetadata,\n    };\n}\nfunction deserializeResponse(jsonResponse, request, core) {\n    return (jsonResponse !== null && jsonResponse !== void 0 ? jsonResponse : []).map(function (nft) {\n        if (nft === null) {\n            return null;\n        }\n        return dataTypes_1.EvmNft.create(__assign(__assign({}, (0, common_core_1.toCamelCase)(nft)), { chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core), amount: nft.amount ? parseInt(nft.amount, 10) : undefined, ownerOf: dataTypes_1.EvmAddress.create(nft.owner_of, core), lastMetadataSync: (0, common_core_1.dateInputToDate)(nft.last_metadata_sync), lastTokenUriSync: (0, common_core_1.dateInputToDate)(nft.last_token_uri_sync) }), core);\n    });\n}\nfunction serializeRequest(request, core) {\n    return {\n        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n        normalizeMetadata: request.normalizeMetadata,\n        tokens: request.tokens.map(function (token) { return ({\n            tokenAddress: dataTypes_1.EvmAddress.create(token.tokenAddress, core).lowercase,\n            tokenId: token.tokenId,\n        }); }),\n    };\n}\nfunction deserializeRequest(jsonRequest, core) {\n    return {\n        chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),\n        normalizeMetadata: jsonRequest.normalizeMetadata,\n        tokens: jsonRequest.tokens.map(function (token) { return ({\n            tokenAddress: dataTypes_1.EvmAddress.create(token.tokenAddress, core),\n            tokenId: token.tokenId,\n        }); }),\n    };\n}\n//# sourceMappingURL=getMultipleNFTsOperation.js.map"]},"metadata":{},"sourceType":"script"}