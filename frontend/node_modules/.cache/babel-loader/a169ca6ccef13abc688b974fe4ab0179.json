{"ast":null,"code":"import { defaultSnapOrigin } from '../config';\n/**\n * Get the installed snaps in MetaMask.\n *\n * @returns The snaps installed in MetaMask.\n */\nexport const getSnaps = async () => {\n  return await window.ethereum.request({\n    method: 'wallet_getSnaps'\n  });\n};\n\n/**\n * Connect a snap to MetaMask.\n *\n * @param snapId - The ID of the snap.\n * @param params - The params to pass with the snap to connect.\n */\nexport const connectSnap = async function () {\n  let snapId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultSnapOrigin;\n  let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  console.log(\"connect snap \");\n  await window.ethereum.request({\n    method: 'wallet_enable',\n    params: [{\n      wallet_snap: {\n        [snapId]: {\n          ...params\n        }\n      }\n    }]\n  });\n};\n\n/**\n * Get the snap from MetaMask.\n *\n * @param version - The version of the snap to install (optional).\n * @returns The snap object returned by the extension.\n */\nexport const getSnap = async version => {\n  try {\n    const snaps = await getSnaps();\n    return Object.values(snaps).find(snap => snap.id === defaultSnapOrigin && (!version || snap.version === version));\n  } catch (e) {\n    console.log('Failed to obtain installed snap', e);\n    return undefined;\n  }\n};\n\n/**\n * Invoke the \"hello\" method from the example snap.\n */\nexport const sendHello = async () => {\n  console.log(\"hlo\");\n  await window.ethereum.request({\n    method: 'wallet_invokeSnap',\n    params: [defaultSnapOrigin, {\n      method: 'inApp'\n    }]\n  });\n};\nexport const isLocalSnap = snapId => snapId.startsWith('local:');","map":{"version":3,"names":["defaultSnapOrigin","getSnaps","window","ethereum","request","method","connectSnap","snapId","params","console","log","wallet_snap","getSnap","version","snaps","Object","values","find","snap","id","e","undefined","sendHello","isLocalSnap","startsWith"],"sources":["/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/Metamask-snaps-main 2/packages/site/src/utils/snap.ts"],"sourcesContent":["import { defaultSnapOrigin } from '../config';\nimport { GetSnapsResponse, Snap } from '../types';\n\n\n/**\n * Get the installed snaps in MetaMask.\n *\n * @returns The snaps installed in MetaMask.\n */\nexport const getSnaps = async (): Promise<GetSnapsResponse> => {\n  return (await window.ethereum.request({\n    method: 'wallet_getSnaps',\n  })) as unknown as GetSnapsResponse;\n};\n\n/**\n * Connect a snap to MetaMask.\n *\n * @param snapId - The ID of the snap.\n * @param params - The params to pass with the snap to connect.\n */\nexport const connectSnap = async (\n \n  snapId: string = defaultSnapOrigin,\n  params: Record<'version' | string, unknown> = {},\n) => {\n  console.log(\"connect snap \")\n  await window.ethereum.request({\n    method: 'wallet_enable',\n    params: [\n      {\n        wallet_snap: {\n          [snapId]: {\n            ...params,\n          },\n        },\n      },\n    ],\n  });\n};\n\n/**\n * Get the snap from MetaMask.\n *\n * @param version - The version of the snap to install (optional).\n * @returns The snap object returned by the extension.\n */\nexport const getSnap = async (version?: string): Promise<Snap | undefined> => {\n  try {\n    const snaps = await getSnaps();\n\n    return Object.values(snaps).find(\n      (snap) =>\n        snap.id === defaultSnapOrigin && (!version || snap.version === version),\n    );\n  } catch (e) {\n    console.log('Failed to obtain installed snap', e);\n    return undefined;\n  }\n};\n\n/**\n * Invoke the \"hello\" method from the example snap.\n */\nexport const sendHello = async () => {\n  console.log(\"hlo\")\n  await window.ethereum.request({\n    method: 'wallet_invokeSnap',\n    params: [\n      defaultSnapOrigin,\n      {\n        method: 'inApp',\n      },\n    ],\n  });\n};\n\n\n\n\n\n\n\n\n\n\n\nexport const isLocalSnap = (snapId: string) => snapId.startsWith('local:');\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,WAAW;AAI7C;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,QAAQ,GAAG,YAAuC;EAC7D,OAAQ,MAAMC,MAAM,CAACC,QAAQ,CAACC,OAAO,CAAC;IACpCC,MAAM,EAAE;EACV,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,WAAW,GAAG,kBAItB;EAAA,IAFHC,MAAc,uEAAGP,iBAAiB;EAAA,IAClCQ,MAA2C,uEAAG,CAAC,CAAC;EAEhDC,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;EAC5B,MAAMR,MAAM,CAACC,QAAQ,CAACC,OAAO,CAAC;IAC5BC,MAAM,EAAE,eAAe;IACvBG,MAAM,EAAE,CACN;MACEG,WAAW,EAAE;QACX,CAACJ,MAAM,GAAG;UACR,GAAGC;QACL;MACF;IACF,CAAC;EAEL,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMI,OAAO,GAAG,MAAOC,OAAgB,IAAgC;EAC5E,IAAI;IACF,MAAMC,KAAK,GAAG,MAAMb,QAAQ,EAAE;IAE9B,OAAOc,MAAM,CAACC,MAAM,CAACF,KAAK,CAAC,CAACG,IAAI,CAC7BC,IAAI,IACHA,IAAI,CAACC,EAAE,KAAKnB,iBAAiB,KAAK,CAACa,OAAO,IAAIK,IAAI,CAACL,OAAO,KAAKA,OAAO,CAAC,CAC1E;EACH,CAAC,CAAC,OAAOO,CAAC,EAAE;IACVX,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEU,CAAC,CAAC;IACjD,OAAOC,SAAS;EAClB;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMC,SAAS,GAAG,YAAY;EACnCb,OAAO,CAACC,GAAG,CAAC,KAAK,CAAC;EAClB,MAAMR,MAAM,CAACC,QAAQ,CAACC,OAAO,CAAC;IAC5BC,MAAM,EAAE,mBAAmB;IAC3BG,MAAM,EAAE,CACNR,iBAAiB,EACjB;MACEK,MAAM,EAAE;IACV,CAAC;EAEL,CAAC,CAAC;AACJ,CAAC;AAYD,OAAO,MAAMkB,WAAW,GAAIhB,MAAc,IAAKA,MAAM,CAACiB,UAAU,CAAC,QAAQ,CAAC"},"metadata":{},"sourceType":"module"}