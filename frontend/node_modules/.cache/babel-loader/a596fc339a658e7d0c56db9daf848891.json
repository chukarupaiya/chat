{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getNFTTokenIdOwnersOperation = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar dataTypes_1 = require(\"../../dataTypes\");\nvar EvmChainResolver_1 = require(\"../../EvmChainResolver\");\n/**\n * Get owners of a specific NFT given the contract address and token ID.\n * * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n */\nexports.getNFTTokenIdOwnersOperation = {\n  method: 'GET',\n  name: 'getNFTTokenIdOwners',\n  id: 'getNFTTokenIdOwners',\n  groupName: 'nft',\n  urlPathPattern: '/nft/{address}/{tokenId}/owners',\n  urlPathParamNames: ['address', 'tokenId'],\n  urlSearchParamNames: ['chain', 'format', 'limit', 'cursor', 'normalizeMetadata', 'disableTotal'],\n  firstPageIndex: 1,\n  getRequestUrlParams: getRequestUrlParams,\n  serializeRequest: serializeRequest,\n  deserializeRequest: deserializeRequest,\n  deserializeResponse: deserializeResponse\n};\n// Methods\nfunction getRequestUrlParams(request, core) {\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n    address: dataTypes_1.EvmAddress.create(request.address, core).lowercase,\n    format: request.format,\n    limit: (0, common_core_1.maybe)(request.limit, String),\n    cursor: request.cursor,\n    tokenId: request.tokenId,\n    normalizeMetadata: request.normalizeMetadata,\n    disable_total: request.disableTotal\n  };\n}\nfunction deserializeResponse(jsonResponse, request, core) {\n  var _a;\n  return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (nft) {\n    return dataTypes_1.EvmNft.create(__assign(__assign({}, (0, common_core_1.toCamelCase)(nft)), {\n      chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core),\n      ownerOf: dataTypes_1.EvmAddress.create(nft.owner_of, core),\n      lastMetadataSync: new Date(nft.last_metadata_sync),\n      lastTokenUriSync: new Date(nft.last_token_uri_sync)\n    }));\n  });\n}\nfunction serializeRequest(request, core) {\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n    format: request.format,\n    limit: request.limit,\n    cursor: request.cursor,\n    address: dataTypes_1.EvmAddress.create(request.address, core).checksum,\n    tokenId: request.tokenId,\n    normalizeMetadata: request.normalizeMetadata,\n    disableTotal: request.disableTotal\n  };\n}\nfunction deserializeRequest(jsonRequest, core) {\n  return {\n    chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),\n    format: jsonRequest.format,\n    limit: jsonRequest.limit,\n    cursor: jsonRequest.cursor,\n    address: dataTypes_1.EvmAddress.create(jsonRequest.address, core),\n    tokenId: jsonRequest.tokenId,\n    normalizeMetadata: jsonRequest.normalizeMetadata,\n    disableTotal: jsonRequest.disableTotal\n  };\n}","map":{"version":3,"sources":["../../../src/operations/nft/getNFTTokenIdOwnersOperation.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getNFTTokenIdOwnersOperation = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar dataTypes_1 = require(\"../../dataTypes\");\nvar EvmChainResolver_1 = require(\"../../EvmChainResolver\");\n/**\n * Get owners of a specific NFT given the contract address and token ID.\n * * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n */\nexports.getNFTTokenIdOwnersOperation = {\n    method: 'GET',\n    name: 'getNFTTokenIdOwners',\n    id: 'getNFTTokenIdOwners',\n    groupName: 'nft',\n    urlPathPattern: '/nft/{address}/{tokenId}/owners',\n    urlPathParamNames: ['address', 'tokenId'],\n    urlSearchParamNames: ['chain', 'format', 'limit', 'cursor', 'normalizeMetadata', 'disableTotal'],\n    firstPageIndex: 1,\n    getRequestUrlParams: getRequestUrlParams,\n    serializeRequest: serializeRequest,\n    deserializeRequest: deserializeRequest,\n    deserializeResponse: deserializeResponse,\n};\n// Methods\nfunction getRequestUrlParams(request, core) {\n    return {\n        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n        address: dataTypes_1.EvmAddress.create(request.address, core).lowercase,\n        format: request.format,\n        limit: (0, common_core_1.maybe)(request.limit, String),\n        cursor: request.cursor,\n        tokenId: request.tokenId,\n        normalizeMetadata: request.normalizeMetadata,\n        disable_total: request.disableTotal,\n    };\n}\nfunction deserializeResponse(jsonResponse, request, core) {\n    var _a;\n    return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (nft) {\n        return dataTypes_1.EvmNft.create(__assign(__assign({}, (0, common_core_1.toCamelCase)(nft)), { chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core), ownerOf: dataTypes_1.EvmAddress.create(nft.owner_of, core), lastMetadataSync: new Date(nft.last_metadata_sync), lastTokenUriSync: new Date(nft.last_token_uri_sync) }));\n    });\n}\nfunction serializeRequest(request, core) {\n    return {\n        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n        format: request.format,\n        limit: request.limit,\n        cursor: request.cursor,\n        address: dataTypes_1.EvmAddress.create(request.address, core).checksum,\n        tokenId: request.tokenId,\n        normalizeMetadata: request.normalizeMetadata,\n        disableTotal: request.disableTotal,\n    };\n}\nfunction deserializeRequest(jsonRequest, core) {\n    return {\n        chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),\n        format: jsonRequest.format,\n        limit: jsonRequest.limit,\n        cursor: jsonRequest.cursor,\n        address: dataTypes_1.EvmAddress.create(jsonRequest.address, core),\n        tokenId: jsonRequest.tokenId,\n        normalizeMetadata: jsonRequest.normalizeMetadata,\n        disableTotal: jsonRequest.disableTotal,\n    };\n}\n//# sourceMappingURL=getNFTTokenIdOwnersOperation.js.map"]},"metadata":{},"sourceType":"script"}