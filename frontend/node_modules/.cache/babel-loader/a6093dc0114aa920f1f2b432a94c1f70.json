{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.verifyChallengeSolanaOperation = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar common_sol_utils_1 = require(\"@moralisweb3/common-sol-utils\");\nexports.verifyChallengeSolanaOperation = {\n  method: 'POST',\n  name: 'verifyChallengeSolana',\n  id: 'verifyChallengeSolana',\n  groupName: 'solana',\n  urlPathPattern: '/challenge/verify/solana',\n  bodyParamNames: ['message', 'signature'],\n  bodyType: 'properties',\n  getRequestUrlParams: getRequestUrlParams,\n  getRequestBody: getRequestBody,\n  serializeRequest: serializeRequest,\n  deserializeRequest: deserializeRequest,\n  deserializeResponse: deserializeResponse\n};\n// Methods\nfunction getRequestUrlParams() {\n  return {};\n}\nfunction getRequestBody(request) {\n  return {\n    message: request.message,\n    signature: request.signature\n  };\n}\nfunction deserializeResponse(_a) {\n  var network = _a.network,\n    jsonResponse = __rest(_a, [\"network\"]);\n  return __assign(__assign({}, jsonResponse), {\n    solNetwork: common_sol_utils_1.SolNetwork.create(network),\n    address: common_sol_utils_1.SolAddress.create(jsonResponse.address),\n    expirationTime: (0, common_core_1.maybe)(jsonResponse.expirationTime, function (value) {\n      return new Date(value);\n    }),\n    notBefore: (0, common_core_1.maybe)(jsonResponse.notBefore, function (value) {\n      return new Date(value);\n    })\n  });\n}\nfunction serializeRequest(request) {\n  return {\n    message: request.message,\n    signature: request.signature\n  };\n}\nfunction deserializeRequest(jsonRequest) {\n  return {\n    message: jsonRequest.message,\n    signature: jsonRequest.signature\n  };\n}","map":{"version":3,"sources":["../../../src/operations/solana/verifyChallengeSolanaOperation.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,aAAA,GAAA,OAAA,CAAA,0BAAA,CAAA;AACA,IAAA,kBAAA,GAAA,OAAA,CAAA,+BAAA,CAAA;AAuBa,OAAA,CAAA,8BAA8B,GAKvC;EACF,MAAM,EAAE,MAAM;EACd,IAAI,EAAE,uBAAuB;EAC7B,EAAE,EAAE,uBAAuB;EAC3B,SAAS,EAAE,QAAQ;EACnB,cAAc,EAAE,0BAA0B;EAC1C,cAAc,EAAE,CAAC,SAAS,EAAE,WAAW,CAAC;EACxC,QAAQ,EAAE,YAAY;EAEtB,mBAAmB,EAAA,mBAAA;EACnB,cAAc,EAAA,cAAA;EACd,gBAAgB,EAAA,gBAAA;EAChB,kBAAkB,EAAA,kBAAA;EAClB,mBAAmB,EAAA;CACpB;AAED;AAEA,SAAS,mBAAmB,GAAA;EAC1B,OAAO,CAAA,CAAE;AACX;AAEA,SAAS,cAAc,CAAC,OAAqC,EAAA;EAC3D,OAAO;IACL,OAAO,EAAE,OAAO,CAAC,OAAO;IACxB,SAAS,EAAE,OAAO,CAAC;GACpB;AACH;AAEA,SAAS,mBAAmB,CAAC,EAA+D,EAAA;EAA7D,IAAA,OAAO,GAAA,EAAA,CAAA,OAAA;IAAK,YAAY,GAAA,MAAA,CAAA,EAAA,EAA1B,CAAA,SAAA,CAA4B,CAAF;EACrD,OAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACK,YAAY,CAAA,EAAA;IACf,UAAU,EAAE,kBAAA,CAAA,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC;IACtC,OAAO,EAAE,kBAAA,CAAA,UAAU,CAAC,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC;IAChD,cAAc,EAAE,CAAA,CAAA,EAAA,aAAA,CAAA,KAAK,EAAC,YAAY,CAAC,cAAc,EAAE,UAAC,KAAK,EAAA;MAAK,OAAA,IAAI,IAAI,CAAC,KAAK,CAAC;IAAf,CAAe,CAAC;IAC9E,SAAS,EAAE,CAAA,CAAA,EAAA,aAAA,CAAA,KAAK,EAAC,YAAY,CAAC,SAAS,EAAE,UAAC,KAAK,EAAA;MAAK,OAAA,IAAI,IAAI,CAAC,KAAK,CAAC;IAAf,CAAe;EAAC,CAAA,CAAA;AAExE;AAEA,SAAS,gBAAgB,CAAC,OAAqC,EAAA;EAC7D,OAAO;IACL,OAAO,EAAE,OAAO,CAAC,OAAO;IACxB,SAAS,EAAE,OAAO,CAAC;GACpB;AACH;AAEA,SAAS,kBAAkB,CAAC,WAA6C,EAAA;EACvE,OAAO;IACL,OAAO,EAAE,WAAW,CAAC,OAAO;IAC5B,SAAS,EAAE,WAAW,CAAC;GACxB;AACH","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.verifyChallengeSolanaOperation = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar common_sol_utils_1 = require(\"@moralisweb3/common-sol-utils\");\nexports.verifyChallengeSolanaOperation = {\n    method: 'POST',\n    name: 'verifyChallengeSolana',\n    id: 'verifyChallengeSolana',\n    groupName: 'solana',\n    urlPathPattern: '/challenge/verify/solana',\n    bodyParamNames: ['message', 'signature'],\n    bodyType: 'properties',\n    getRequestUrlParams: getRequestUrlParams,\n    getRequestBody: getRequestBody,\n    serializeRequest: serializeRequest,\n    deserializeRequest: deserializeRequest,\n    deserializeResponse: deserializeResponse,\n};\n// Methods\nfunction getRequestUrlParams() {\n    return {};\n}\nfunction getRequestBody(request) {\n    return {\n        message: request.message,\n        signature: request.signature,\n    };\n}\nfunction deserializeResponse(_a) {\n    var network = _a.network, jsonResponse = __rest(_a, [\"network\"]);\n    return __assign(__assign({}, jsonResponse), { solNetwork: common_sol_utils_1.SolNetwork.create(network), address: common_sol_utils_1.SolAddress.create(jsonResponse.address), expirationTime: (0, common_core_1.maybe)(jsonResponse.expirationTime, function (value) { return new Date(value); }), notBefore: (0, common_core_1.maybe)(jsonResponse.notBefore, function (value) { return new Date(value); }) });\n}\nfunction serializeRequest(request) {\n    return {\n        message: request.message,\n        signature: request.signature,\n    };\n}\nfunction deserializeRequest(jsonRequest) {\n    return {\n        message: jsonRequest.message,\n        signature: jsonRequest.signature,\n    };\n}\n//# sourceMappingURL=verifyChallengeSolanaOperation.js.map"]},"metadata":{},"sourceType":"script"}