{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EvmNative = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar unitToDecimals = {\n  ether: 18,\n  finney: 15,\n  szabo: 12,\n  gwei: 9,\n  mwei: 6,\n  kwei: 3,\n  wei: 0\n};\n/**\n * The EvmNative class is a MoralisData that references to the value of an EVM native currency (like ETH, BNB etc.)\n *\n * @category DataType\n */\nvar EvmNative = /** @class */function () {\n  function EvmNative(native, unit) {\n    if (unit === void 0) {\n      unit = 'ether';\n    }\n    this.rawValue = EvmNative.parse(native, unit);\n  }\n  Object.defineProperty(EvmNative, \"ONE_ETH\", {\n    /**\n     * Returns value of one ether.\n     *\n     * @example EvmNative.ONE_ETH\n     */\n    get: function () {\n      return EvmNative.create(1, 'ether');\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNative, \"ONE_GWEI\", {\n    /**\n     * Returns value of one gwei.\n     *\n     * @example EvmNative.ONE_GWEI\n     */\n    get: function () {\n      return EvmNative.create(1, 'gwei');\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNative, \"ONE_WEI\", {\n    /**\n     * Returns value of one wei.\n     *\n     * @example EvmNative.ONE_WEI\n     */\n    get: function () {\n      return EvmNative.create(1, 'wei');\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Create a new instance of EvmNative from any valid {@link EvmNativeish} value.\n   * @param native - the value to create the EvmNative from\n   * @param unit - the unit of the value (optional), defaults to `ether`\n   * @returns a new instance of EvmNative\n   * @example\n   * ```ts\n   * const native = EvmNative.create(2, 'gwei');\n   * const native = EvmNative.create(2);\n   * const native = EvmNative.create(2, 'wei');\n   *```\n   */\n  EvmNative.create = function (native, unit) {\n    if (native instanceof EvmNative) {\n      return native;\n    }\n    return new EvmNative(native, unit);\n  };\n  EvmNative.parse = function (native, unit) {\n    var decimals;\n    if (typeof unit === 'number') {\n      decimals = unit;\n    } else {\n      if (unitToDecimals[unit] == null) {\n        throw new common_core_1.CoreError({\n          code: common_core_1.CoreErrorCode.INVALID_ARGUMENT,\n          message: 'Unit should be a decimal number or valid EvmNativeUnit string'\n        });\n      }\n      decimals = unitToDecimals[unit];\n    }\n    return common_core_1.BigNumber.fromDecimal(native.toString(), decimals);\n  };\n  /**\n   * Compares two EvmNative values.\n   * @param valueA - the first value to compare\n   * @param valueB - the second value to compare\n   * @returns true if the values are equal\n   * @example\n   * ```ts\n   * EvmNative.equals(EvmNative.create(1, 'ether'), EvmNative.create(1, 'ether')); // true\n   * ```\n   */\n  EvmNative.equals = function (valueA, valueB) {\n    var evmNativeA = EvmNative.create(valueA);\n    var evmNativeB = EvmNative.create(valueB);\n    return evmNativeA.rawValue.equals(evmNativeB.rawValue);\n  };\n  /**\n   * Compares EvmNative with current instance.\n   * @param value - the value to compare with\n   * @returns true if the values are equal\n   * @example\n   * ```ts\n   * const native = EvmNative.create(1, 'gwei');\n   * native.equals(EvmNative.create(1, 'ether')); // false\n   * ```\n   */\n  EvmNative.prototype.equals = function (value) {\n    return EvmNative.equals(this, value);\n  };\n  /**\n   * Converts the EvmNative to a string.\n   * @returns the value of the EvmNative as a string\n   * @example `native.toString()`\n   */\n  EvmNative.prototype.toString = function () {\n    return this.wei;\n  };\n  /**\n   * Converts the EvmNative to a string.\n   * @returns the value of the EvmNative as a string\n   * @example `native.format()`\n   */\n  EvmNative.prototype.format = function () {\n    return this.toString();\n  };\n  Object.defineProperty(EvmNative.prototype, \"value\", {\n    /**\n     * @returns the value of the EvmNative as a BigNumber\n     * @example `native.value`\n     */\n    get: function () {\n      return this.rawValue;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNative.prototype, \"wei\", {\n    /**\n     * Converts the EvmNative to a string representation of the value in wei.\n     * @returns the value of the EvmNative as a string\n     * @example `native.wei`\n     */\n    get: function () {\n      return this.value.toString();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNative.prototype, \"gwei\", {\n    /**\n     * Converts the EvmNative to a string representation of the value in gwei.\n     * @returns the value of the EvmNative as a string\n     * @example `native.gwei`\n     */\n    get: function () {\n      return this.rawValue.toDecimal(unitToDecimals['gwei']);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNative.prototype, \"ether\", {\n    /**\n     * Converts the EvmNative to a string representation of the value in ether.\n     * @returns the value of the EvmNative as a string\n     * @example `native.ether`\n     */\n    get: function () {\n      return this.rawValue.toDecimal(unitToDecimals['ether']);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return EvmNative;\n}();\nexports.EvmNative = EvmNative;","map":{"version":3,"sources":["../../../src/dataTypes/EvmNative/EvmNative.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EvmNative = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar unitToDecimals = {\n    ether: 18,\n    finney: 15,\n    szabo: 12,\n    gwei: 9,\n    mwei: 6,\n    kwei: 3,\n    wei: 0,\n};\n/**\n * The EvmNative class is a MoralisData that references to the value of an EVM native currency (like ETH, BNB etc.)\n *\n * @category DataType\n */\nvar EvmNative = /** @class */ (function () {\n    function EvmNative(native, unit) {\n        if (unit === void 0) { unit = 'ether'; }\n        this.rawValue = EvmNative.parse(native, unit);\n    }\n    Object.defineProperty(EvmNative, \"ONE_ETH\", {\n        /**\n         * Returns value of one ether.\n         *\n         * @example EvmNative.ONE_ETH\n         */\n        get: function () {\n            return EvmNative.create(1, 'ether');\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNative, \"ONE_GWEI\", {\n        /**\n         * Returns value of one gwei.\n         *\n         * @example EvmNative.ONE_GWEI\n         */\n        get: function () {\n            return EvmNative.create(1, 'gwei');\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNative, \"ONE_WEI\", {\n        /**\n         * Returns value of one wei.\n         *\n         * @example EvmNative.ONE_WEI\n         */\n        get: function () {\n            return EvmNative.create(1, 'wei');\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Create a new instance of EvmNative from any valid {@link EvmNativeish} value.\n     * @param native - the value to create the EvmNative from\n     * @param unit - the unit of the value (optional), defaults to `ether`\n     * @returns a new instance of EvmNative\n     * @example\n     * ```ts\n     * const native = EvmNative.create(2, 'gwei');\n     * const native = EvmNative.create(2);\n     * const native = EvmNative.create(2, 'wei');\n     *```\n     */\n    EvmNative.create = function (native, unit) {\n        if (native instanceof EvmNative) {\n            return native;\n        }\n        return new EvmNative(native, unit);\n    };\n    EvmNative.parse = function (native, unit) {\n        var decimals;\n        if (typeof unit === 'number') {\n            decimals = unit;\n        }\n        else {\n            if (unitToDecimals[unit] == null) {\n                throw new common_core_1.CoreError({\n                    code: common_core_1.CoreErrorCode.INVALID_ARGUMENT,\n                    message: 'Unit should be a decimal number or valid EvmNativeUnit string',\n                });\n            }\n            decimals = unitToDecimals[unit];\n        }\n        return common_core_1.BigNumber.fromDecimal(native.toString(), decimals);\n    };\n    /**\n     * Compares two EvmNative values.\n     * @param valueA - the first value to compare\n     * @param valueB - the second value to compare\n     * @returns true if the values are equal\n     * @example\n     * ```ts\n     * EvmNative.equals(EvmNative.create(1, 'ether'), EvmNative.create(1, 'ether')); // true\n     * ```\n     */\n    EvmNative.equals = function (valueA, valueB) {\n        var evmNativeA = EvmNative.create(valueA);\n        var evmNativeB = EvmNative.create(valueB);\n        return evmNativeA.rawValue.equals(evmNativeB.rawValue);\n    };\n    /**\n     * Compares EvmNative with current instance.\n     * @param value - the value to compare with\n     * @returns true if the values are equal\n     * @example\n     * ```ts\n     * const native = EvmNative.create(1, 'gwei');\n     * native.equals(EvmNative.create(1, 'ether')); // false\n     * ```\n     */\n    EvmNative.prototype.equals = function (value) {\n        return EvmNative.equals(this, value);\n    };\n    /**\n     * Converts the EvmNative to a string.\n     * @returns the value of the EvmNative as a string\n     * @example `native.toString()`\n     */\n    EvmNative.prototype.toString = function () {\n        return this.wei;\n    };\n    /**\n     * Converts the EvmNative to a string.\n     * @returns the value of the EvmNative as a string\n     * @example `native.format()`\n     */\n    EvmNative.prototype.format = function () {\n        return this.toString();\n    };\n    Object.defineProperty(EvmNative.prototype, \"value\", {\n        /**\n         * @returns the value of the EvmNative as a BigNumber\n         * @example `native.value`\n         */\n        get: function () {\n            return this.rawValue;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNative.prototype, \"wei\", {\n        /**\n         * Converts the EvmNative to a string representation of the value in wei.\n         * @returns the value of the EvmNative as a string\n         * @example `native.wei`\n         */\n        get: function () {\n            return this.value.toString();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNative.prototype, \"gwei\", {\n        /**\n         * Converts the EvmNative to a string representation of the value in gwei.\n         * @returns the value of the EvmNative as a string\n         * @example `native.gwei`\n         */\n        get: function () {\n            return this.rawValue.toDecimal(unitToDecimals['gwei']);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNative.prototype, \"ether\", {\n        /**\n         * Converts the EvmNative to a string representation of the value in ether.\n         * @returns the value of the EvmNative as a string\n         * @example `native.ether`\n         */\n        get: function () {\n            return this.rawValue.toDecimal(unitToDecimals['ether']);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return EvmNative;\n}());\nexports.EvmNative = EvmNative;\n//# sourceMappingURL=EvmNative.js.map"]},"metadata":{},"sourceType":"script"}