{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EvmEvent = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar EvmAddress_1 = require(\"../EvmAddress\");\nvar EvmChain_1 = require(\"../EvmChain\");\nvar EvmNative_1 = require(\"../EvmNative\");\n/**\n * The EvmEvent is a representation of an event.\n *\n * Use this class any time you work with an event.\n *\n * @category DataType\n */\nvar EvmEvent = /** @class */function () {\n  function EvmEvent(_data) {\n    this._data = _data;\n  }\n  /**\n   * Create a new instance of EvmEvent from any valid event input\n   * @param data - the EvmEventish type\n   * @example\n   * ```\n   * const event = EvmEventish.create(data);\n   *```\n   */\n  EvmEvent.create = function (data, core) {\n    if (data instanceof EvmEvent) {\n      return data;\n    }\n    var finalCore = core !== null && core !== void 0 ? core : common_core_1.CoreProvider.getDefault();\n    return new EvmEvent(EvmEvent.parse(data, finalCore));\n  };\n  /**\n   * Check the equality between two Evm events. It checks if the chain, block number, address and data are equal.\n   * @param dataA - The first event\n   * @param dataB - The second event\n   * @example\n   * ```ts\n   * EvmEvent.equals(dataA, dataB)\n   * ```\n   * @returns true if the events are equal, false otherwise\n   */\n  EvmEvent.equals = function (dataA, dataB) {\n    var eventA = EvmEvent.create(dataA);\n    var eventB = EvmEvent.create(dataB);\n    if (!eventA._data.chain.equals(eventB._data.chain)) {\n      return false;\n    }\n    if (!eventA._data.blockNumber.equals(eventB._data.blockNumber)) {\n      return false;\n    }\n    if (!eventA._data.address.equals(eventB._data.address)) {\n      return false;\n    }\n    if (eventA._data.data !== eventB._data.data) {\n      return false;\n    }\n    return true;\n  };\n  /**\n   * Checks the equality of the current event instance with another evm event\n   * @param data - the event to compare with\n   * @example\n   * ```ts\n   * event.equals(data)\n   * ```\n   * @returns true if the events are equal, false otherwise\n   */\n  EvmEvent.prototype.equals = function (data) {\n    return EvmEvent.equals(this, data);\n  };\n  /**\n   * @returns a JSON represention of the event.\n   * @example\n   * ```\n   * event.toJSON()\n   * ```\n   */\n  EvmEvent.prototype.toJSON = function () {\n    var _a, _b, _c;\n    var data = this._data;\n    return __assign(__assign({}, data), {\n      chain: data.chain.format(),\n      address: data.address.format(),\n      blockNumber: data.blockNumber.toString(),\n      data: {\n        from: (_a = data.data.from) === null || _a === void 0 ? void 0 : _a.format(),\n        to: (_b = data.data.to) === null || _b === void 0 ? void 0 : _b.format(),\n        value: (_c = data.data.value) === null || _c === void 0 ? void 0 : _c.format()\n      }\n    });\n  };\n  /**\n   * @returns a JSON represention of the event.\n   * @example event.format()\n   */\n  EvmEvent.prototype.format = function () {\n    return this.toJSON();\n  };\n  Object.defineProperty(EvmEvent.prototype, \"result\", {\n    /**\n     * @returns all the data without casting it to JSON.\n     * @example event.result\n     */\n    get: function () {\n      return this._data;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmEvent.prototype, \"chain\", {\n    /**\n     * @returns the event chain\n     * @example event.chain // EvmChain\n     */\n    get: function () {\n      return this._data.chain;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmEvent.prototype, \"address\", {\n    /**\n     * @returns the event address\n     * @example event.address // EvmAddress\n     */\n    get: function () {\n      return this._data.address;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmEvent.prototype, \"blockNumber\", {\n    /**\n     * @returns the event block number\n     * @example event.blockNumber // BigNumber\n     */\n    get: function () {\n      return this._data.blockNumber;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmEvent.prototype, \"blockTimestamp\", {\n    /**\n     * @returns the event block timestamp\n     * @example event.blockTimestamp // Date\n     */\n    get: function () {\n      return this._data.blockTimestamp;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmEvent.prototype, \"data\", {\n    /**\n     * @returns the event data with from address, to address and value\n     * @example event.data\n     */\n    get: function () {\n      return this._data.data;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmEvent.prototype, \"transactionHash\", {\n    /**\n     * @returns the event block trannsaciton hash\n     * @example event.transactionHash // \"0xc9f62f4f6ab505a96c1a84ec2899c6bfd86245ef1effaa689fc997798be763d5\"\n     */\n    get: function () {\n      return this._data.transactionHash;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmEvent.prototype, \"blockHash\", {\n    /**\n     * @returns the event block hash\n     * @example event.blockHash // \"0xc9f62f4f6ab505a96c1a84ec2899c6bfd86245ef1effaa689fc997798be763d5\"\n     */\n    get: function () {\n      return this._data.blockHash;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  EvmEvent.parse = function (data, core) {\n    return __assign(__assign({}, data), {\n      chain: EvmChain_1.EvmChain.create(data.chain, core),\n      address: EvmAddress_1.EvmAddress.create(data.address, core),\n      blockNumber: common_core_1.BigNumber.create(data.blockNumber),\n      blockTimestamp: (0, common_core_1.dateInputToDate)(data.blockTimestamp),\n      data: {\n        from: (0, common_core_1.maybe)(data.data.from, function (from) {\n          return EvmAddress_1.EvmAddress.create(from, core);\n        }),\n        to: (0, common_core_1.maybe)(data.data.to, function (to) {\n          return EvmAddress_1.EvmAddress.create(to, core);\n        }),\n        value: (0, common_core_1.maybe)(data.data.value, EvmNative_1.EvmNative.create)\n      }\n    });\n  };\n  return EvmEvent;\n}();\nexports.EvmEvent = EvmEvent;","map":{"version":3,"sources":["../../../src/dataTypes/EvmEvent/EvmEvent.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EvmEvent = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar EvmAddress_1 = require(\"../EvmAddress\");\nvar EvmChain_1 = require(\"../EvmChain\");\nvar EvmNative_1 = require(\"../EvmNative\");\n/**\n * The EvmEvent is a representation of an event.\n *\n * Use this class any time you work with an event.\n *\n * @category DataType\n */\nvar EvmEvent = /** @class */ (function () {\n    function EvmEvent(_data) {\n        this._data = _data;\n    }\n    /**\n     * Create a new instance of EvmEvent from any valid event input\n     * @param data - the EvmEventish type\n     * @example\n     * ```\n     * const event = EvmEventish.create(data);\n     *```\n     */\n    EvmEvent.create = function (data, core) {\n        if (data instanceof EvmEvent) {\n            return data;\n        }\n        var finalCore = core !== null && core !== void 0 ? core : common_core_1.CoreProvider.getDefault();\n        return new EvmEvent(EvmEvent.parse(data, finalCore));\n    };\n    /**\n     * Check the equality between two Evm events. It checks if the chain, block number, address and data are equal.\n     * @param dataA - The first event\n     * @param dataB - The second event\n     * @example\n     * ```ts\n     * EvmEvent.equals(dataA, dataB)\n     * ```\n     * @returns true if the events are equal, false otherwise\n     */\n    EvmEvent.equals = function (dataA, dataB) {\n        var eventA = EvmEvent.create(dataA);\n        var eventB = EvmEvent.create(dataB);\n        if (!eventA._data.chain.equals(eventB._data.chain)) {\n            return false;\n        }\n        if (!eventA._data.blockNumber.equals(eventB._data.blockNumber)) {\n            return false;\n        }\n        if (!eventA._data.address.equals(eventB._data.address)) {\n            return false;\n        }\n        if (eventA._data.data !== eventB._data.data) {\n            return false;\n        }\n        return true;\n    };\n    /**\n     * Checks the equality of the current event instance with another evm event\n     * @param data - the event to compare with\n     * @example\n     * ```ts\n     * event.equals(data)\n     * ```\n     * @returns true if the events are equal, false otherwise\n     */\n    EvmEvent.prototype.equals = function (data) {\n        return EvmEvent.equals(this, data);\n    };\n    /**\n     * @returns a JSON represention of the event.\n     * @example\n     * ```\n     * event.toJSON()\n     * ```\n     */\n    EvmEvent.prototype.toJSON = function () {\n        var _a, _b, _c;\n        var data = this._data;\n        return __assign(__assign({}, data), { chain: data.chain.format(), address: data.address.format(), blockNumber: data.blockNumber.toString(), data: {\n                from: (_a = data.data.from) === null || _a === void 0 ? void 0 : _a.format(),\n                to: (_b = data.data.to) === null || _b === void 0 ? void 0 : _b.format(),\n                value: (_c = data.data.value) === null || _c === void 0 ? void 0 : _c.format(),\n            } });\n    };\n    /**\n     * @returns a JSON represention of the event.\n     * @example event.format()\n     */\n    EvmEvent.prototype.format = function () {\n        return this.toJSON();\n    };\n    Object.defineProperty(EvmEvent.prototype, \"result\", {\n        /**\n         * @returns all the data without casting it to JSON.\n         * @example event.result\n         */\n        get: function () {\n            return this._data;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmEvent.prototype, \"chain\", {\n        /**\n         * @returns the event chain\n         * @example event.chain // EvmChain\n         */\n        get: function () {\n            return this._data.chain;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmEvent.prototype, \"address\", {\n        /**\n         * @returns the event address\n         * @example event.address // EvmAddress\n         */\n        get: function () {\n            return this._data.address;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmEvent.prototype, \"blockNumber\", {\n        /**\n         * @returns the event block number\n         * @example event.blockNumber // BigNumber\n         */\n        get: function () {\n            return this._data.blockNumber;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmEvent.prototype, \"blockTimestamp\", {\n        /**\n         * @returns the event block timestamp\n         * @example event.blockTimestamp // Date\n         */\n        get: function () {\n            return this._data.blockTimestamp;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmEvent.prototype, \"data\", {\n        /**\n         * @returns the event data with from address, to address and value\n         * @example event.data\n         */\n        get: function () {\n            return this._data.data;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmEvent.prototype, \"transactionHash\", {\n        /**\n         * @returns the event block trannsaciton hash\n         * @example event.transactionHash // \"0xc9f62f4f6ab505a96c1a84ec2899c6bfd86245ef1effaa689fc997798be763d5\"\n         */\n        get: function () {\n            return this._data.transactionHash;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmEvent.prototype, \"blockHash\", {\n        /**\n         * @returns the event block hash\n         * @example event.blockHash // \"0xc9f62f4f6ab505a96c1a84ec2899c6bfd86245ef1effaa689fc997798be763d5\"\n         */\n        get: function () {\n            return this._data.blockHash;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    EvmEvent.parse = function (data, core) { return (__assign(__assign({}, data), { chain: EvmChain_1.EvmChain.create(data.chain, core), address: EvmAddress_1.EvmAddress.create(data.address, core), blockNumber: common_core_1.BigNumber.create(data.blockNumber), blockTimestamp: (0, common_core_1.dateInputToDate)(data.blockTimestamp), data: {\n            from: (0, common_core_1.maybe)(data.data.from, function (from) { return EvmAddress_1.EvmAddress.create(from, core); }),\n            to: (0, common_core_1.maybe)(data.data.to, function (to) { return EvmAddress_1.EvmAddress.create(to, core); }),\n            value: (0, common_core_1.maybe)(data.data.value, EvmNative_1.EvmNative.create),\n        } })); };\n    return EvmEvent;\n}());\nexports.EvmEvent = EvmEvent;\n//# sourceMappingURL=EvmEvent.js.map"]},"metadata":{},"sourceType":"script"}