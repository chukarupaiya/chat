{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getWalletTransactionsVerboseOperation = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar dataTypes_1 = require(\"../../dataTypes\");\nvar EvmChainResolver_1 = require(\"../../EvmChainResolver\");\n/** Get native transactions ordered by block number in descending order. */\nexports.getWalletTransactionsVerboseOperation = {\n  method: 'GET',\n  name: 'getWalletTransactionsVerbose',\n  id: 'getWalletTransactionsVerbose',\n  groupName: 'transaction',\n  urlPathPattern: '/{address}/verbose',\n  urlPathParamNames: ['address'],\n  urlSearchParamNames: ['chain', 'fromBlock', 'toBlock', 'fromDate', 'toDate', 'cursor', 'limit', 'disableTotal'],\n  firstPageIndex: 0,\n  getRequestUrlParams: getRequestUrlParams,\n  serializeRequest: serializeRequest,\n  deserializeRequest: deserializeRequest,\n  deserializeResponse: deserializeResponse\n};\n// Methods\nfunction getRequestUrlParams(request, core) {\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n    from_block: (0, common_core_1.maybe)(request.fromBlock, String),\n    to_block: (0, common_core_1.maybe)(request.toBlock, String),\n    from_date: request.fromDate ? new Date(request.fromDate).toISOString() : undefined,\n    to_date: request.toDate ? new Date(request.toDate).toISOString() : undefined,\n    cursor: request.cursor,\n    limit: (0, common_core_1.maybe)(request.limit, String),\n    address: dataTypes_1.EvmAddress.create(request.address, core).lowercase,\n    disable_total: request.disableTotal\n  };\n}\nfunction serializeRequest(request, core) {\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n    fromBlock: request.fromBlock,\n    toBlock: request.toBlock,\n    fromDate: request.fromDate,\n    toDate: request.toDate,\n    cursor: request.cursor,\n    limit: request.limit,\n    address: dataTypes_1.EvmAddress.create(request.address, core).checksum,\n    disableTotal: request.disableTotal\n  };\n}\nfunction deserializeRequest(jsonRequest, core) {\n  return {\n    chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),\n    fromBlock: jsonRequest.fromBlock,\n    toBlock: jsonRequest.toBlock,\n    fromDate: jsonRequest.fromDate,\n    toDate: jsonRequest.toDate,\n    cursor: jsonRequest.cursor,\n    limit: jsonRequest.limit,\n    address: dataTypes_1.EvmAddress.create(jsonRequest.address, core),\n    disableTotal: jsonRequest.disableTotal\n  };\n}\nfunction deserializeResponse(jsonResponse, request, core) {\n  var _a;\n  return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (transfer) {\n    var _a;\n    return dataTypes_1.EvmTransaction.create({\n      cumulativeGasUsed: transfer.receipt_cumulative_gas_used,\n      gasPrice: transfer.gas_price,\n      gasUsed: transfer.receipt_gas_used,\n      index: +transfer.transaction_index,\n      contractAddress: transfer.receipt_contract_address,\n      receiptRoot: transfer.receipt_root,\n      receiptStatus: +transfer.receipt_status,\n      chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core),\n      data: transfer.input,\n      from: dataTypes_1.EvmAddress.create(transfer.from_address, core),\n      hash: transfer.hash,\n      nonce: transfer.nonce,\n      value: transfer.value,\n      blockHash: transfer.block_hash,\n      blockNumber: +transfer.block_number,\n      blockTimestamp: new Date(transfer.block_timestamp),\n      gas: common_core_1.BigNumber.create(transfer.gas),\n      to: dataTypes_1.EvmAddress.create(transfer.to_address, core),\n      logs: ((_a = transfer.logs) !== null && _a !== void 0 ? _a : []).map(function (log) {\n        return dataTypes_1.EvmTransactionLog.create({\n          logIndex: +log.log_index,\n          transactionHash: log.transaction_hash,\n          transactionIndex: +log.transaction_index,\n          address: log.address,\n          data: log.data,\n          topics: [log.topic0, log.topic1, log.topic2, log.topic3],\n          blockHash: log.block_hash,\n          blockNumber: +log.block_number,\n          blockTimestamp: transfer.block_timestamp,\n          chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core)\n        }, core);\n      })\n    }, core);\n  });\n}","map":{"version":3,"sources":["../../../src/operations/transaction/getWalletTransactionsVerboseOperation.ts"],"names":[],"mappings":";;;;;;AAAA,IAAA,aAAA,GAAA,OAAA,CAAA,0BAAA,CAAA;AASA,IAAA,WAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;AASA,IAAA,kBAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;AAmCA;AACa,OAAA,CAAA,qCAAqC,GAK9C;EACF,MAAM,EAAE,KAAK;EACb,IAAI,EAAE,8BAA8B;EACpC,EAAE,EAAE,8BAA8B;EAClC,SAAS,EAAE,aAAa;EACxB,cAAc,EAAE,oBAAoB;EACpC,iBAAiB,EAAE,CAAC,SAAS,CAAC;EAC9B,mBAAmB,EAAE,CAAC,OAAO,EAAE,WAAW,EAAE,SAAS,EAAE,UAAU,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,cAAc,CAAC;EAC/G,cAAc,EAAE,CAAC;EAEjB,mBAAmB,EAAA,mBAAA;EACnB,gBAAgB,EAAA,gBAAA;EAChB,kBAAkB,EAAA,kBAAA;EAClB,mBAAmB,EAAA;CACpB;AAED;AAEA,SAAS,mBAAmB,CAAC,OAA4C,EAAE,IAAU,EAAA;EACnF,OAAO;IACL,KAAK,EAAE,kBAAA,CAAA,gBAAgB,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,MAAM;IAC3D,UAAU,EAAE,CAAA,CAAA,EAAA,aAAA,CAAA,KAAK,EAAC,OAAO,CAAC,SAAS,EAAE,MAAM,CAAC;IAC5C,QAAQ,EAAE,CAAA,CAAA,EAAA,aAAA,CAAA,KAAK,EAAC,OAAO,CAAC,OAAO,EAAE,MAAM,CAAC;IACxC,SAAS,EAAE,OAAO,CAAC,QAAQ,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,GAAG,SAAS;IAClF,OAAO,EAAE,OAAO,CAAC,MAAM,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,GAAG,SAAS;IAC5E,MAAM,EAAE,OAAO,CAAC,MAAM;IACtB,KAAK,EAAE,CAAA,CAAA,EAAA,aAAA,CAAA,KAAK,EAAC,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC;IACnC,OAAO,EAAE,WAAA,CAAA,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,SAAS;IAC3D,aAAa,EAAE,OAAO,CAAC;GACxB;AACH;AAEA,SAAS,gBAAgB,CAAC,OAA4C,EAAE,IAAU,EAAA;EAChF,OAAO;IACL,KAAK,EAAE,kBAAA,CAAA,gBAAgB,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,MAAM;IAC3D,SAAS,EAAE,OAAO,CAAC,SAAS;IAC5B,OAAO,EAAE,OAAO,CAAC,OAAO;IACxB,QAAQ,EAAE,OAAO,CAAC,QAAQ;IAC1B,MAAM,EAAE,OAAO,CAAC,MAAM;IACtB,MAAM,EAAE,OAAO,CAAC,MAAM;IACtB,KAAK,EAAE,OAAO,CAAC,KAAK;IACpB,OAAO,EAAE,WAAA,CAAA,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,QAAQ;IAC1D,YAAY,EAAE,OAAO,CAAC;GACvB;AACH;AAEA,SAAS,kBAAkB,CACzB,WAAoD,EACpD,IAAU,EAAA;EAEV,OAAO;IACL,KAAK,EAAE,WAAA,CAAA,QAAQ,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,EAAE,IAAI,CAAC;IAC/C,SAAS,EAAE,WAAW,CAAC,SAAS;IAChC,OAAO,EAAE,WAAW,CAAC,OAAO;IAC5B,QAAQ,EAAE,WAAW,CAAC,QAAQ;IAC9B,MAAM,EAAE,WAAW,CAAC,MAAM;IAC1B,MAAM,EAAE,WAAW,CAAC,MAAM;IAC1B,KAAK,EAAE,WAAW,CAAC,KAAK;IACxB,OAAO,EAAE,WAAA,CAAA,UAAU,CAAC,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC;IACrD,YAAY,EAAE,WAAW,CAAC;GAC3B;AACH;AAEA,SAAS,mBAAmB,CAC1B,YAAsD,EACtD,OAAgD,EAChD,IAAU,EAAA;;EAEV,OAAO,CAAC,CAAA,EAAA,GAAA,YAAY,CAAC,MAAM,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,EAAE,EAAE,GAAG,CAAC,UAAC,QAAQ,EAAA;;IAC9C,OAAA,WAAA,CAAA,cAAc,CAAC,MAAM,CACnB;MACE,iBAAiB,EAAE,QAAQ,CAAC,2BAA2B;MACvD,QAAQ,EAAE,QAAQ,CAAC,SAAS;MAC5B,OAAO,EAAE,QAAQ,CAAC,gBAAgB;MAClC,KAAK,EAAE,CAAC,QAAQ,CAAC,iBAAiB;MAClC,eAAe,EAAE,QAAQ,CAAC,wBAAkC;MAC5D,WAAW,EAAE,QAAQ,CAAC,YAAsB;MAC5C,aAAa,EAAE,CAAC,QAAQ,CAAC,cAAc;MACvC,KAAK,EAAE,kBAAA,CAAA,gBAAgB,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC;MACpD,IAAI,EAAE,QAAQ,CAAC,KAAK;MACpB,IAAI,EAAE,WAAA,CAAA,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY,EAAE,IAAI,CAAC;MACpD,IAAI,EAAE,QAAQ,CAAC,IAAI;MACnB,KAAK,EAAE,QAAQ,CAAC,KAAK;MACrB,KAAK,EAAE,QAAQ,CAAC,KAAK;MACrB,SAAS,EAAE,QAAQ,CAAC,UAAU;MAC9B,WAAW,EAAE,CAAC,QAAQ,CAAC,YAAY;MACnC,cAAc,EAAE,IAAI,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC;MAClD,GAAG,EAAE,aAAA,CAAA,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAa,CAAC;MAC7C,EAAE,EAAE,WAAA,CAAA,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAoB,EAAE,IAAI,CAAC;MAC1D,IAAI,EAAE,CAAC,CAAA,EAAA,GAAA,QAAQ,CAAC,IAAI,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,EAAE,EAAE,GAAG,CAAC,UAAC,GAAG,EAAA;QAClC,OAAA,WAAA,CAAA,iBAAiB,CAAC,MAAM,CACtB;UACE,QAAQ,EAAE,CAAC,GAAG,CAAC,SAAS;UACxB,eAAe,EAAE,GAAG,CAAC,gBAAgB;UACrC,gBAAgB,EAAE,CAAC,GAAG,CAAC,iBAAiB;UACxC,OAAO,EAAE,GAAG,CAAC,OAAO;UACpB,IAAI,EAAE,GAAG,CAAC,IAAI;UACd,MAAM,EAAE,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,MAAkB,EAAE,GAAG,CAAC,MAAkB,EAAE,GAAG,CAAC,MAAkB,CAAC;UAC5F,SAAS,EAAE,GAAG,CAAC,UAAU;UACzB,WAAW,EAAE,CAAC,GAAG,CAAC,YAAY;UAC9B,cAAc,EAAE,QAAQ,CAAC,eAAe;UACxC,KAAK,EAAE,kBAAA,CAAA,gBAAgB,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI;SACpD,EACD,IAAI,CACL;MAdD,CAcC;KAEJ,EACD,IAAI,CACL;GAAA,CACF;AACH","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getWalletTransactionsVerboseOperation = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar dataTypes_1 = require(\"../../dataTypes\");\nvar EvmChainResolver_1 = require(\"../../EvmChainResolver\");\n/** Get native transactions ordered by block number in descending order. */\nexports.getWalletTransactionsVerboseOperation = {\n    method: 'GET',\n    name: 'getWalletTransactionsVerbose',\n    id: 'getWalletTransactionsVerbose',\n    groupName: 'transaction',\n    urlPathPattern: '/{address}/verbose',\n    urlPathParamNames: ['address'],\n    urlSearchParamNames: ['chain', 'fromBlock', 'toBlock', 'fromDate', 'toDate', 'cursor', 'limit', 'disableTotal'],\n    firstPageIndex: 0,\n    getRequestUrlParams: getRequestUrlParams,\n    serializeRequest: serializeRequest,\n    deserializeRequest: deserializeRequest,\n    deserializeResponse: deserializeResponse,\n};\n// Methods\nfunction getRequestUrlParams(request, core) {\n    return {\n        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n        from_block: (0, common_core_1.maybe)(request.fromBlock, String),\n        to_block: (0, common_core_1.maybe)(request.toBlock, String),\n        from_date: request.fromDate ? new Date(request.fromDate).toISOString() : undefined,\n        to_date: request.toDate ? new Date(request.toDate).toISOString() : undefined,\n        cursor: request.cursor,\n        limit: (0, common_core_1.maybe)(request.limit, String),\n        address: dataTypes_1.EvmAddress.create(request.address, core).lowercase,\n        disable_total: request.disableTotal,\n    };\n}\nfunction serializeRequest(request, core) {\n    return {\n        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n        fromBlock: request.fromBlock,\n        toBlock: request.toBlock,\n        fromDate: request.fromDate,\n        toDate: request.toDate,\n        cursor: request.cursor,\n        limit: request.limit,\n        address: dataTypes_1.EvmAddress.create(request.address, core).checksum,\n        disableTotal: request.disableTotal,\n    };\n}\nfunction deserializeRequest(jsonRequest, core) {\n    return {\n        chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),\n        fromBlock: jsonRequest.fromBlock,\n        toBlock: jsonRequest.toBlock,\n        fromDate: jsonRequest.fromDate,\n        toDate: jsonRequest.toDate,\n        cursor: jsonRequest.cursor,\n        limit: jsonRequest.limit,\n        address: dataTypes_1.EvmAddress.create(jsonRequest.address, core),\n        disableTotal: jsonRequest.disableTotal,\n    };\n}\nfunction deserializeResponse(jsonResponse, request, core) {\n    var _a;\n    return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (transfer) {\n        var _a;\n        return dataTypes_1.EvmTransaction.create({\n            cumulativeGasUsed: transfer.receipt_cumulative_gas_used,\n            gasPrice: transfer.gas_price,\n            gasUsed: transfer.receipt_gas_used,\n            index: +transfer.transaction_index,\n            contractAddress: transfer.receipt_contract_address,\n            receiptRoot: transfer.receipt_root,\n            receiptStatus: +transfer.receipt_status,\n            chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core),\n            data: transfer.input,\n            from: dataTypes_1.EvmAddress.create(transfer.from_address, core),\n            hash: transfer.hash,\n            nonce: transfer.nonce,\n            value: transfer.value,\n            blockHash: transfer.block_hash,\n            blockNumber: +transfer.block_number,\n            blockTimestamp: new Date(transfer.block_timestamp),\n            gas: common_core_1.BigNumber.create(transfer.gas),\n            to: dataTypes_1.EvmAddress.create(transfer.to_address, core),\n            logs: ((_a = transfer.logs) !== null && _a !== void 0 ? _a : []).map(function (log) {\n                return dataTypes_1.EvmTransactionLog.create({\n                    logIndex: +log.log_index,\n                    transactionHash: log.transaction_hash,\n                    transactionIndex: +log.transaction_index,\n                    address: log.address,\n                    data: log.data,\n                    topics: [log.topic0, log.topic1, log.topic2, log.topic3],\n                    blockHash: log.block_hash,\n                    blockNumber: +log.block_number,\n                    blockTimestamp: transfer.block_timestamp,\n                    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core),\n                }, core);\n            }),\n        }, core);\n    });\n}\n//# sourceMappingURL=getWalletTransactionsVerboseOperation.js.map"]},"metadata":{},"sourceType":"script"}