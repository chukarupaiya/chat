{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getWalletNFTsOperation = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar dataTypes_1 = require(\"../../dataTypes\");\nvar EvmChainResolver_1 = require(\"../../EvmChainResolver\");\n/**\n * Get NFTs owned by a given address.\n * * The response will include status [SYNCED/SYNCING] based on the contracts being indexed.\n * * Use the token_address param to get results for a specific contract only\n * * Note results will include all indexed NFTs\n * * Any request which includes the token_address param will start the indexing process for that NFT collection the very first time it is requested.\n */\nexports.getWalletNFTsOperation = {\n  method: 'GET',\n  name: 'getWalletNFTs',\n  id: 'getWalletNFTs',\n  groupName: 'nft',\n  firstPageIndex: 1,\n  urlPathPattern: '/{address}/nft',\n  urlPathParamNames: ['address'],\n  urlSearchParamNames: ['chain', 'format', 'limit', 'tokenAddresses', 'cursor', 'normalizeMetadata', 'disableTotal'],\n  getRequestUrlParams: getRequestUrlParams,\n  serializeRequest: serializeRequest,\n  deserializeRequest: deserializeRequest,\n  deserializeResponse: deserializeResponse\n};\n// Methods\nfunction getRequestUrlParams(request, core) {\n  var _a;\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n    address: dataTypes_1.EvmAddress.create(request.address, core).lowercase,\n    format: request.format,\n    limit: (0, common_core_1.maybe)(request.limit, String),\n    token_addresses: (_a = request.tokenAddresses) === null || _a === void 0 ? void 0 : _a.map(function (address) {\n      return dataTypes_1.EvmAddress.create(address, core).lowercase;\n    }),\n    cursor: request.cursor,\n    normalizeMetadata: request.normalizeMetadata,\n    disable_total: request.disableTotal\n  };\n}\nfunction deserializeResponse(jsonResponse, request, core) {\n  var _a;\n  return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (nft) {\n    return dataTypes_1.EvmNft.create({\n      chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core),\n      contractType: nft.contract_type,\n      tokenAddress: nft.token_address,\n      tokenId: nft.token_id,\n      tokenUri: nft.token_uri,\n      metadata: nft.metadata,\n      name: nft.name,\n      symbol: nft.symbol,\n      amount: nft.amount ? parseInt(nft.amount, 10) : undefined,\n      blockNumberMinted: nft.block_number_minted,\n      blockNumber: nft.block_number,\n      ownerOf: dataTypes_1.EvmAddress.create(nft.owner_of, core),\n      tokenHash: nft.token_hash,\n      lastMetadataSync: (0, common_core_1.dateInputToDate)(nft.last_metadata_sync),\n      lastTokenUriSync: (0, common_core_1.dateInputToDate)(nft.last_token_uri_sync)\n    });\n  });\n}\nfunction serializeRequest(request, core) {\n  var _a;\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n    format: request.format,\n    limit: request.limit,\n    tokenAddresses: (_a = request.tokenAddresses) === null || _a === void 0 ? void 0 : _a.map(function (address) {\n      return dataTypes_1.EvmAddress.create(address, core).checksum;\n    }),\n    cursor: request.cursor,\n    address: dataTypes_1.EvmAddress.create(request.address, core).checksum,\n    normalizeMetadata: request.normalizeMetadata,\n    disableTotal: request.disableTotal\n  };\n}\nfunction deserializeRequest(jsonRequest, core) {\n  return {\n    chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),\n    format: jsonRequest.format,\n    limit: jsonRequest.limit,\n    tokenAddresses: (0, common_core_1.maybe)(jsonRequest.tokenAddresses, function (addresses) {\n      return addresses.map(function (address) {\n        return dataTypes_1.EvmAddress.create(address, core);\n      });\n    }),\n    cursor: jsonRequest.cursor,\n    address: dataTypes_1.EvmAddress.create(jsonRequest.address, core),\n    normalizeMetadata: jsonRequest.normalizeMetadata,\n    disableTotal: jsonRequest.disableTotal\n  };\n}","map":{"version":3,"sources":["../../../src/operations/nft/getWalletNFTsOperation.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getWalletNFTsOperation = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar dataTypes_1 = require(\"../../dataTypes\");\nvar EvmChainResolver_1 = require(\"../../EvmChainResolver\");\n/**\n * Get NFTs owned by a given address.\n * * The response will include status [SYNCED/SYNCING] based on the contracts being indexed.\n * * Use the token_address param to get results for a specific contract only\n * * Note results will include all indexed NFTs\n * * Any request which includes the token_address param will start the indexing process for that NFT collection the very first time it is requested.\n */\nexports.getWalletNFTsOperation = {\n    method: 'GET',\n    name: 'getWalletNFTs',\n    id: 'getWalletNFTs',\n    groupName: 'nft',\n    firstPageIndex: 1,\n    urlPathPattern: '/{address}/nft',\n    urlPathParamNames: ['address'],\n    urlSearchParamNames: ['chain', 'format', 'limit', 'tokenAddresses', 'cursor', 'normalizeMetadata', 'disableTotal'],\n    getRequestUrlParams: getRequestUrlParams,\n    serializeRequest: serializeRequest,\n    deserializeRequest: deserializeRequest,\n    deserializeResponse: deserializeResponse,\n};\n// Methods\nfunction getRequestUrlParams(request, core) {\n    var _a;\n    return {\n        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n        address: dataTypes_1.EvmAddress.create(request.address, core).lowercase,\n        format: request.format,\n        limit: (0, common_core_1.maybe)(request.limit, String),\n        token_addresses: (_a = request.tokenAddresses) === null || _a === void 0 ? void 0 : _a.map(function (address) { return dataTypes_1.EvmAddress.create(address, core).lowercase; }),\n        cursor: request.cursor,\n        normalizeMetadata: request.normalizeMetadata,\n        disable_total: request.disableTotal,\n    };\n}\nfunction deserializeResponse(jsonResponse, request, core) {\n    var _a;\n    return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (nft) {\n        return dataTypes_1.EvmNft.create({\n            chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core),\n            contractType: nft.contract_type,\n            tokenAddress: nft.token_address,\n            tokenId: nft.token_id,\n            tokenUri: nft.token_uri,\n            metadata: nft.metadata,\n            name: nft.name,\n            symbol: nft.symbol,\n            amount: nft.amount ? parseInt(nft.amount, 10) : undefined,\n            blockNumberMinted: nft.block_number_minted,\n            blockNumber: nft.block_number,\n            ownerOf: dataTypes_1.EvmAddress.create(nft.owner_of, core),\n            tokenHash: nft.token_hash,\n            lastMetadataSync: (0, common_core_1.dateInputToDate)(nft.last_metadata_sync),\n            lastTokenUriSync: (0, common_core_1.dateInputToDate)(nft.last_token_uri_sync),\n        });\n    });\n}\nfunction serializeRequest(request, core) {\n    var _a;\n    return {\n        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n        format: request.format,\n        limit: request.limit,\n        tokenAddresses: (_a = request.tokenAddresses) === null || _a === void 0 ? void 0 : _a.map(function (address) { return dataTypes_1.EvmAddress.create(address, core).checksum; }),\n        cursor: request.cursor,\n        address: dataTypes_1.EvmAddress.create(request.address, core).checksum,\n        normalizeMetadata: request.normalizeMetadata,\n        disableTotal: request.disableTotal,\n    };\n}\nfunction deserializeRequest(jsonRequest, core) {\n    return {\n        chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),\n        format: jsonRequest.format,\n        limit: jsonRequest.limit,\n        tokenAddresses: (0, common_core_1.maybe)(jsonRequest.tokenAddresses, function (addresses) {\n            return addresses.map(function (address) { return dataTypes_1.EvmAddress.create(address, core); });\n        }),\n        cursor: jsonRequest.cursor,\n        address: dataTypes_1.EvmAddress.create(jsonRequest.address, core),\n        normalizeMetadata: jsonRequest.normalizeMetadata,\n        disableTotal: jsonRequest.disableTotal,\n    };\n}\n//# sourceMappingURL=getWalletNFTsOperation.js.map"]},"metadata":{},"sourceType":"script"}