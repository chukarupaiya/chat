{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hashPersonalMessage = exports.isValidSignature = exports.fromRpcSig = exports.toCompactSig = exports.toRpcSig = exports.ecrecover = exports.ecsign = void 0;\nvar secp256k1_1 = require(\"ethereum-cryptography/secp256k1\");\nvar externals_1 = require(\"./externals\");\nvar bytes_1 = require(\"./bytes\");\nvar hash_1 = require(\"./hash\");\nvar helpers_1 = require(\"./helpers\");\nvar types_1 = require(\"./types\");\nfunction ecsign(msgHash, privateKey, chainId) {\n  var _a = (0, secp256k1_1.ecdsaSign)(msgHash, privateKey),\n    signature = _a.signature,\n    recovery = _a.recid;\n  var r = Buffer.from(signature.slice(0, 32));\n  var s = Buffer.from(signature.slice(32, 64));\n  if (!chainId || typeof chainId === 'number') {\n    // return legacy type ECDSASignature (deprecated in favor of ECDSASignatureBuffer to handle large chainIds)\n    if (chainId && !Number.isSafeInteger(chainId)) {\n      throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)');\n    }\n    var v_1 = chainId ? recovery + (chainId * 2 + 35) : recovery + 27;\n    return {\n      r: r,\n      s: s,\n      v: v_1\n    };\n  }\n  var chainIdBN = (0, types_1.toType)(chainId, types_1.TypeOutput.BN);\n  var v = chainIdBN.muln(2).addn(35).addn(recovery).toArrayLike(Buffer);\n  return {\n    r: r,\n    s: s,\n    v: v\n  };\n}\nexports.ecsign = ecsign;\nfunction calculateSigRecovery(v, chainId) {\n  var vBN = (0, types_1.toType)(v, types_1.TypeOutput.BN);\n  if (vBN.eqn(0) || vBN.eqn(1)) return (0, types_1.toType)(v, types_1.TypeOutput.BN);\n  if (!chainId) {\n    return vBN.subn(27);\n  }\n  var chainIdBN = (0, types_1.toType)(chainId, types_1.TypeOutput.BN);\n  return vBN.sub(chainIdBN.muln(2).addn(35));\n}\nfunction isValidSigRecovery(recovery) {\n  var rec = new externals_1.BN(recovery);\n  return rec.eqn(0) || rec.eqn(1);\n}\n/**\n * ECDSA public key recovery from signature.\n * NOTE: Accepts `v == 0 | v == 1` for EIP1559 transactions\n * @returns Recovered public key\n */\nvar ecrecover = function (msgHash, v, r, s, chainId) {\n  var signature = Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(s, 32)], 64);\n  var recovery = calculateSigRecovery(v, chainId);\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  }\n  var senderPubKey = (0, secp256k1_1.ecdsaRecover)(signature, recovery.toNumber(), msgHash);\n  return Buffer.from((0, secp256k1_1.publicKeyConvert)(senderPubKey, false).slice(1));\n};\nexports.ecrecover = ecrecover;\n/**\n * Convert signature parameters into the format of `eth_sign` RPC method.\n * NOTE: Accepts `v == 0 | v == 1` for EIP1559 transactions\n * @returns Signature\n */\nvar toRpcSig = function (v, r, s, chainId) {\n  var recovery = calculateSigRecovery(v, chainId);\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  }\n  // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\n  return (0, bytes_1.bufferToHex)(Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(s, 32), (0, bytes_1.toBuffer)(v)]));\n};\nexports.toRpcSig = toRpcSig;\n/**\n * Convert signature parameters into the format of Compact Signature Representation (EIP-2098).\n * NOTE: Accepts `v == 0 | v == 1` for EIP1559 transactions\n * @returns Signature\n */\nvar toCompactSig = function (v, r, s, chainId) {\n  var recovery = calculateSigRecovery(v, chainId);\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  }\n  var vn = (0, types_1.toType)(v, types_1.TypeOutput.Number);\n  var ss = s;\n  if (vn > 28 && vn % 2 === 1 || vn === 1 || vn === 28) {\n    ss = Buffer.from(s);\n    ss[0] |= 0x80;\n  }\n  return (0, bytes_1.bufferToHex)(Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(ss, 32)]));\n};\nexports.toCompactSig = toCompactSig;\n/**\n * Convert signature format of the `eth_sign` RPC method to signature parameters\n * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053\n * NOTE: After EIP1559, `v` could be `0` or `1` but this function assumes\n * it's a signed message (EIP-191 or EIP-712) adding `27` at the end. Remove if needed.\n */\nvar fromRpcSig = function (sig) {\n  var buf = (0, bytes_1.toBuffer)(sig);\n  var r;\n  var s;\n  var v;\n  if (buf.length >= 65) {\n    r = buf.slice(0, 32);\n    s = buf.slice(32, 64);\n    v = (0, bytes_1.bufferToInt)(buf.slice(64));\n  } else if (buf.length === 64) {\n    // Compact Signature Representation (https://eips.ethereum.org/EIPS/eip-2098)\n    r = buf.slice(0, 32);\n    s = buf.slice(32, 64);\n    v = (0, bytes_1.bufferToInt)(buf.slice(32, 33)) >> 7;\n    s[0] &= 0x7f;\n  } else {\n    throw new Error('Invalid signature length');\n  }\n  // support both versions of `eth_sign` responses\n  if (v < 27) {\n    v += 27;\n  }\n  return {\n    v: v,\n    r: r,\n    s: s\n  };\n};\nexports.fromRpcSig = fromRpcSig;\n/**\n * Validate a ECDSA signature.\n * NOTE: Accepts `v == 0 | v == 1` for EIP1559 transactions\n * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one\n */\nvar isValidSignature = function (v, r, s, homesteadOrLater, chainId) {\n  if (homesteadOrLater === void 0) {\n    homesteadOrLater = true;\n  }\n  var SECP256K1_N_DIV_2 = new externals_1.BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);\n  var SECP256K1_N = new externals_1.BN('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);\n  if (r.length !== 32 || s.length !== 32) {\n    return false;\n  }\n  if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {\n    return false;\n  }\n  var rBN = new externals_1.BN(r);\n  var sBN = new externals_1.BN(s);\n  if (rBN.isZero() || rBN.gt(SECP256K1_N) || sBN.isZero() || sBN.gt(SECP256K1_N)) {\n    return false;\n  }\n  if (homesteadOrLater && sBN.cmp(SECP256K1_N_DIV_2) === 1) {\n    return false;\n  }\n  return true;\n};\nexports.isValidSignature = isValidSignature;\n/**\n * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.\n * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`\n * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key\n * used to produce the signature.\n */\nvar hashPersonalMessage = function (message) {\n  (0, helpers_1.assertIsBuffer)(message);\n  var prefix = Buffer.from(\"\\u0019Ethereum Signed Message:\\n\".concat(message.length), 'utf-8');\n  return (0, hash_1.keccak)(Buffer.concat([prefix, message]));\n};\nexports.hashPersonalMessage = hashPersonalMessage;","map":{"version":3,"sources":["../src/signature.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hashPersonalMessage = exports.isValidSignature = exports.fromRpcSig = exports.toCompactSig = exports.toRpcSig = exports.ecrecover = exports.ecsign = void 0;\nvar secp256k1_1 = require(\"ethereum-cryptography/secp256k1\");\nvar externals_1 = require(\"./externals\");\nvar bytes_1 = require(\"./bytes\");\nvar hash_1 = require(\"./hash\");\nvar helpers_1 = require(\"./helpers\");\nvar types_1 = require(\"./types\");\nfunction ecsign(msgHash, privateKey, chainId) {\n    var _a = (0, secp256k1_1.ecdsaSign)(msgHash, privateKey), signature = _a.signature, recovery = _a.recid;\n    var r = Buffer.from(signature.slice(0, 32));\n    var s = Buffer.from(signature.slice(32, 64));\n    if (!chainId || typeof chainId === 'number') {\n        // return legacy type ECDSASignature (deprecated in favor of ECDSASignatureBuffer to handle large chainIds)\n        if (chainId && !Number.isSafeInteger(chainId)) {\n            throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)');\n        }\n        var v_1 = chainId ? recovery + (chainId * 2 + 35) : recovery + 27;\n        return { r: r, s: s, v: v_1 };\n    }\n    var chainIdBN = (0, types_1.toType)(chainId, types_1.TypeOutput.BN);\n    var v = chainIdBN.muln(2).addn(35).addn(recovery).toArrayLike(Buffer);\n    return { r: r, s: s, v: v };\n}\nexports.ecsign = ecsign;\nfunction calculateSigRecovery(v, chainId) {\n    var vBN = (0, types_1.toType)(v, types_1.TypeOutput.BN);\n    if (vBN.eqn(0) || vBN.eqn(1))\n        return (0, types_1.toType)(v, types_1.TypeOutput.BN);\n    if (!chainId) {\n        return vBN.subn(27);\n    }\n    var chainIdBN = (0, types_1.toType)(chainId, types_1.TypeOutput.BN);\n    return vBN.sub(chainIdBN.muln(2).addn(35));\n}\nfunction isValidSigRecovery(recovery) {\n    var rec = new externals_1.BN(recovery);\n    return rec.eqn(0) || rec.eqn(1);\n}\n/**\n * ECDSA public key recovery from signature.\n * NOTE: Accepts `v == 0 | v == 1` for EIP1559 transactions\n * @returns Recovered public key\n */\nvar ecrecover = function (msgHash, v, r, s, chainId) {\n    var signature = Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(s, 32)], 64);\n    var recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error('Invalid signature v value');\n    }\n    var senderPubKey = (0, secp256k1_1.ecdsaRecover)(signature, recovery.toNumber(), msgHash);\n    return Buffer.from((0, secp256k1_1.publicKeyConvert)(senderPubKey, false).slice(1));\n};\nexports.ecrecover = ecrecover;\n/**\n * Convert signature parameters into the format of `eth_sign` RPC method.\n * NOTE: Accepts `v == 0 | v == 1` for EIP1559 transactions\n * @returns Signature\n */\nvar toRpcSig = function (v, r, s, chainId) {\n    var recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error('Invalid signature v value');\n    }\n    // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\n    return (0, bytes_1.bufferToHex)(Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(s, 32), (0, bytes_1.toBuffer)(v)]));\n};\nexports.toRpcSig = toRpcSig;\n/**\n * Convert signature parameters into the format of Compact Signature Representation (EIP-2098).\n * NOTE: Accepts `v == 0 | v == 1` for EIP1559 transactions\n * @returns Signature\n */\nvar toCompactSig = function (v, r, s, chainId) {\n    var recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error('Invalid signature v value');\n    }\n    var vn = (0, types_1.toType)(v, types_1.TypeOutput.Number);\n    var ss = s;\n    if ((vn > 28 && vn % 2 === 1) || vn === 1 || vn === 28) {\n        ss = Buffer.from(s);\n        ss[0] |= 0x80;\n    }\n    return (0, bytes_1.bufferToHex)(Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(ss, 32)]));\n};\nexports.toCompactSig = toCompactSig;\n/**\n * Convert signature format of the `eth_sign` RPC method to signature parameters\n * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053\n * NOTE: After EIP1559, `v` could be `0` or `1` but this function assumes\n * it's a signed message (EIP-191 or EIP-712) adding `27` at the end. Remove if needed.\n */\nvar fromRpcSig = function (sig) {\n    var buf = (0, bytes_1.toBuffer)(sig);\n    var r;\n    var s;\n    var v;\n    if (buf.length >= 65) {\n        r = buf.slice(0, 32);\n        s = buf.slice(32, 64);\n        v = (0, bytes_1.bufferToInt)(buf.slice(64));\n    }\n    else if (buf.length === 64) {\n        // Compact Signature Representation (https://eips.ethereum.org/EIPS/eip-2098)\n        r = buf.slice(0, 32);\n        s = buf.slice(32, 64);\n        v = (0, bytes_1.bufferToInt)(buf.slice(32, 33)) >> 7;\n        s[0] &= 0x7f;\n    }\n    else {\n        throw new Error('Invalid signature length');\n    }\n    // support both versions of `eth_sign` responses\n    if (v < 27) {\n        v += 27;\n    }\n    return {\n        v: v,\n        r: r,\n        s: s,\n    };\n};\nexports.fromRpcSig = fromRpcSig;\n/**\n * Validate a ECDSA signature.\n * NOTE: Accepts `v == 0 | v == 1` for EIP1559 transactions\n * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one\n */\nvar isValidSignature = function (v, r, s, homesteadOrLater, chainId) {\n    if (homesteadOrLater === void 0) { homesteadOrLater = true; }\n    var SECP256K1_N_DIV_2 = new externals_1.BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);\n    var SECP256K1_N = new externals_1.BN('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);\n    if (r.length !== 32 || s.length !== 32) {\n        return false;\n    }\n    if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {\n        return false;\n    }\n    var rBN = new externals_1.BN(r);\n    var sBN = new externals_1.BN(s);\n    if (rBN.isZero() || rBN.gt(SECP256K1_N) || sBN.isZero() || sBN.gt(SECP256K1_N)) {\n        return false;\n    }\n    if (homesteadOrLater && sBN.cmp(SECP256K1_N_DIV_2) === 1) {\n        return false;\n    }\n    return true;\n};\nexports.isValidSignature = isValidSignature;\n/**\n * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.\n * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`\n * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key\n * used to produce the signature.\n */\nvar hashPersonalMessage = function (message) {\n    (0, helpers_1.assertIsBuffer)(message);\n    var prefix = Buffer.from(\"\\u0019Ethereum Signed Message:\\n\".concat(message.length), 'utf-8');\n    return (0, hash_1.keccak)(Buffer.concat([prefix, message]));\n};\nexports.hashPersonalMessage = hashPersonalMessage;\n//# sourceMappingURL=signature.js.map"]},"metadata":{},"sourceType":"script"}