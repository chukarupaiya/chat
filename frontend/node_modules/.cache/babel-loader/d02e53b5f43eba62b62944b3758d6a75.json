{"ast":null,"code":"var _jsxFileName = \"/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/SingleChat.js\",\n  _s = $RefreshSig$();\nimport { FormControl } from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport \"./SingleChat.css\";\nimport { IconButton, Spinner, useToast, Button } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\nimport { Drawer, DrawerBody, DrawerContent, DrawerHeader, DrawerOverlay } from \"@chakra-ui/modal\";\nimport ChatLoading from \"../ChatLoading\";\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport Pay from \"./Pay\";\nimport PaymentChoice from \"./PaymentChoice\";\nimport GroupPayment from \"./GroupPayment\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ENDPOINT = \"http://localhost:5000\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\nvar socket, selectedChatCompare;\nconst SingleChat = _ref => {\n  _s();\n  let {\n    fetchAgain,\n    setFetchAgain,\n    Moralis,\n    EvmChain\n  } = _ref;\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\"\n    }\n  };\n  const {\n    selectedChat,\n    setSelectedChat,\n    user,\n    notification,\n    setNotification\n  } = ChatState();\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      };\n      setLoading(true);\n      const {\n        data\n      } = await axios.get(`/api/message/${selectedChat._id}`, config);\n      setMessages(data);\n      setLoading(false);\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n        receiver_id: getSender(user, selectedChat.users)\n      });\n    }\n  };\n  const sendMessage = async event => {\n    if (event.key === \"Enter\" && newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`\n          }\n        };\n        setNewMessage(\"\");\n        console.log(newMessage + \" \" + selectedChat);\n        const {\n          data\n        } = await axios.post(\"/api/message\", {\n          content: newMessage,\n          chatId: selectedChat,\n          payment: false,\n          payment_mode: \"false\",\n          chat_mode: \"private\",\n          payment_type: \"false\",\n          currency: \"false\",\n          note: \"empty\",\n          token_address: \"empty\"\n        }, config);\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\"\n        });\n      }\n    }\n  };\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n    console.log(socket);\n    // eslint-disable-next-line\n  }, []);\n  useEffect(() => {\n    fetchMessages();\n    selectedChatCompare = selectedChat;\n    // eslint-disable-next-line\n  }, [selectedChat]);\n  const refAgain = () => {\n    fetchMessages();\n  };\n  useEffect(() => {\n    socket.on(\"message recieved\", newMessageRecieved => {\n      if (!selectedChatCompare ||\n      // if chat is not selected or doesn't match current chat\n      selectedChatCompare._id !== newMessageRecieved.chat._id) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n  const typingHandler = e => {\n    setNewMessage(e.target.value);\n    if (!socketConnected) return;\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n  const {\n    isOpen,\n    onOpen,\n    onClose\n  } = useDisclosure();\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loadingChat, setLoadingChat] = useState(false);\n  const {\n    chats,\n    setChats\n  } = ChatState();\n  const history = useHistory();\n  const logoutHandler = () => {\n    localStorage.removeItem(\"userInfo\");\n    localStorage.removeItem(\"address\");\n    history.push(\"/\");\n  };\n  const handleSearch = async () => {\n    if (!search) {\n      toast({\n        title: \"Please Enter something in search\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top-left\"\n      });\n      return;\n    }\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      };\n      const {\n        data\n      } = await axios.get(`/api/user?search=${search}`, config);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\"\n      });\n    }\n  };\n  const accessChat = async userId => {\n    console.log(userId);\n    try {\n      setLoadingChat(true);\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${user.token}`\n        }\n      };\n      const {\n        data\n      } = await axios.post(`/api/chat`, {\n        userId\n      }, config);\n      if (!chats.find(c => c._id === data._id)) setChats([data, ...chats]);\n      setSelectedChat(data);\n      setLoadingChat(false);\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Error fetching the chat\",\n        description: error.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\"\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"single_class_div\",\n      children: selectedChat ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          fontSize: {\n            base: \"20px\",\n            md: \"20px\"\n          },\n          pb: 3,\n          px: 2,\n          w: \"100%\",\n          fontFamily: \"Work sans\",\n          d: \"flex\",\n          justifyContent: {\n            base: \"space-between\"\n          },\n          alignItems: \"center\",\n          color: \"white\",\n          position: \"absolute\",\n          top: \"0\",\n          left: \"0\",\n          padding: \"10px\",\n          bg: \"blackAlpha.400\",\n          backdropFilter: \"auto\",\n          backdropBlur: \"6px\",\n          zIndex: \"1000\",\n          children: [/*#__PURE__*/_jsxDEV(IconButton, {\n            d: {\n              base: \"flex\",\n              md: \"none\"\n            },\n            icon: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 300,\n              columnNumber: 23\n            }, this),\n            onClick: () => setSelectedChat(\"\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 15\n          }, this), messages && (!selectedChat.isGroupChat ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"font1\",\n              children: getSender(user, selectedChat.users)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 306,\n              columnNumber: 21\n            }, this)\n          }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [selectedChat.chatName, /*#__PURE__*/_jsxDEV(UpdateGroupChatModal, {\n              fetchMessages: fetchMessages,\n              fetchAgain: fetchAgain,\n              setFetchAgain: setFetchAgain\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 316,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"ghost\",\n              onClick: onOpen,\n              _hover: {\n                bg: \"#e2b2ff\",\n                color: \"black\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"fas fa-search\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 326,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(Text, {\n                d: {\n                  base: \"none\",\n                  md: \"flex\"\n                },\n                px: 4,\n                className: \"font1\",\n                children: \"Search User\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 327,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 321,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          d: \"flex\",\n          flexDir: \"column\",\n          justifyContent: \"flex-end\",\n          p: 3,\n          bg: \"rgb(66,69,73)\",\n          w: \"100%\",\n          h: \"105%\",\n          borderRadius: \"lg\",\n          overflowY: \"hidden\",\n          paddingTop: \"10px\",\n          children: [loading ? /*#__PURE__*/_jsxDEV(Spinner, {\n            size: \"xl\",\n            w: 20,\n            h: 20,\n            alignSelf: \"center\",\n            margin: \"auto\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"messages\",\n            children: /*#__PURE__*/_jsxDEV(ScrollableChat, {\n              messages: messages,\n              refAgain: refAgain\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 360,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 359,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n            onKeyDown: sendMessage,\n            id: \"first-name\",\n            isRequired: true,\n            mt: 3,\n            children: [istyping ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(Lottie, {\n                options: defaultOptions\n                // height={50}\n                ,\n                width: 70,\n                style: {\n                  marginBottom: 15,\n                  marginLeft: 0\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 372,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 371,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                margin: \"auto\",\n                display: \"flex\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(Input, {\n                variant: \"filled\",\n                bg: \"rgb(54,57,62)\",\n                color: \"white\",\n                focusBorderColor: \"rgb(54,57,62)\",\n                placeholder: \"Enter a message..\",\n                value: newMessage,\n                width: \"97%\",\n                onChange: typingHandler,\n                _hover: {\n                  bg: \"rgb(54,57,62)\"\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 383,\n                columnNumber: 19\n              }, this), messages && (!selectedChat.isGroupChat ? /*#__PURE__*/_jsxDEV(PaymentChoice, {\n                fetchAgain: fetchAgain,\n                setFetchAgain: setFetchAgain,\n                fetchMessages: fetchMessages,\n                refAgain: refAgain,\n                Moralis: Moralis,\n                EvmChain: EvmChain,\n                sender_id: getSender(user, selectedChat.users)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 396,\n                columnNumber: 23\n              }, this) : /*#__PURE__*/_jsxDEV(GroupPayment, {\n                fetchAgain: fetchAgain,\n                setFetchAgain: setFetchAgain,\n                fetchMessages: fetchMessages,\n                refAgain: refAgain,\n                Moralis: Moralis,\n                EvmChain: EvmChain,\n                sender_id: getSender(user, selectedChat.users)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 406,\n                columnNumber: 23\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 382,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 364,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Drawer, {\n          placement: \"right\",\n          onClose: onClose,\n          isOpen: isOpen,\n          children: [/*#__PURE__*/_jsxDEV(DrawerOverlay, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 420,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(DrawerContent, {\n            children: [/*#__PURE__*/_jsxDEV(DrawerHeader, {\n              borderBottomWidth: \"1px\",\n              children: \"Search message\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 422,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(DrawerBody, {\n              children: [/*#__PURE__*/_jsxDEV(Box, {\n                d: \"flex\",\n                pb: 2,\n                children: [/*#__PURE__*/_jsxDEV(Input, {\n                  placeholder: \"Search by message by index\",\n                  mr: 2,\n                  value: search,\n                  onChange: e => setSearch(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 427,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  onClick: handleSearch,\n                  children: \"Go\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 433,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 426,\n                columnNumber: 19\n              }, this), loading ? /*#__PURE__*/_jsxDEV(ChatLoading, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 436,\n                columnNumber: 21\n              }, this) :\n              /*#__PURE__*/\n              // searchResult?.map((user) => (\n              _jsxDEV(GroupBox1, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 439,\n                columnNumber: 21\n              }, this)\n              // ))\n              , loadingChat && /*#__PURE__*/_jsxDEV(Spinner, {\n                ml: \"auto\",\n                d: \"flex\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 442,\n                columnNumber: 35\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 425,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 421,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) :\n      /*#__PURE__*/\n      // to get socket.io on same page\n      _jsxDEV(Box, {\n        d: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        h: \"105%\",\n        w: \"100%\",\n        bg: \"rgb(66,69,73)\",\n        children: /*#__PURE__*/_jsxDEV(Text, {\n          fontSize: \"3xl\",\n          pb: 3,\n          color: \"white\",\n          className: \"font1\",\n          children: \"Click on a user to start chatting\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(SingleChat, \"YRLvmtCTbHidiRroD1bX9d0oMlc=\", true, function () {\n  return [useToast, useDisclosure];\n});\n_c = SingleChat;\nexport default SingleChat;\nvar _c;\n$RefreshReg$(_c, \"SingleChat\");","map":{"version":3,"names":["FormControl","Input","Box","Text","useDisclosure","IconButton","Spinner","useToast","Button","getSender","getSenderFull","useEffect","useState","axios","ArrowBackIcon","ProfileModal","ScrollableChat","Lottie","animationData","Drawer","DrawerBody","DrawerContent","DrawerHeader","DrawerOverlay","ChatLoading","io","UpdateGroupChatModal","ChatState","Pay","PaymentChoice","GroupPayment","ENDPOINT","socket","selectedChatCompare","SingleChat","fetchAgain","setFetchAgain","Moralis","EvmChain","messages","setMessages","loading","setLoading","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","toast","defaultOptions","loop","autoplay","rendererSettings","preserveAspectRatio","selectedChat","setSelectedChat","user","notification","setNotification","fetchMessages","config","headers","Authorization","token","data","get","_id","emit","error","title","description","status","duration","isClosable","position","receiver_id","users","sendMessage","event","key","console","log","post","content","chatId","payment","payment_mode","chat_mode","payment_type","currency","note","token_address","on","refAgain","newMessageRecieved","chat","includes","typingHandler","e","target","value","lastTypingTime","Date","getTime","timerLength","setTimeout","timeNow","timeDiff","isOpen","onOpen","onClose","search","setSearch","searchResult","setSearchResult","loadingChat","setLoadingChat","chats","setChats","history","useHistory","logoutHandler","localStorage","removeItem","push","handleSearch","accessChat","userId","find","c","message","base","md","isGroupChat","chatName","bg","color","marginBottom","marginLeft","margin","display"],"sources":["/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/SingleChat.js"],"sourcesContent":["import { FormControl } from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport \"./SingleChat.css\";\nimport { IconButton, Spinner, useToast, Button } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerHeader,\n  DrawerOverlay,\n} from \"@chakra-ui/modal\";\nimport ChatLoading from \"../ChatLoading\";\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport Pay from \"./Pay\";\nimport PaymentChoice from \"./PaymentChoice\";\nimport GroupPayment from \"./GroupPayment\";\n\nconst ENDPOINT = \"http://localhost:5000\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\nvar socket, selectedChatCompare;\n\nconst SingleChat = ({ fetchAgain, setFetchAgain, Moralis, EvmChain }) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      setLoading(true);\n\n      const { data } = await axios.get(\n        `/api/message/${selectedChat._id}`,\n        config\n      );\n      setMessages(data);\n      setLoading(false);\n\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n        receiver_id: getSender(user, selectedChat.users),\n      });\n    }\n  };\n\n  const sendMessage = async (event) => {\n    if (event.key === \"Enter\" && newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        console.log(newMessage + \" \" + selectedChat);\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n            payment: false,\n            payment_mode: \"false\",\n            chat_mode: \"private\",\n            payment_type: \"false\",\n            currency: \"false\",\n            note: \"empty\",\n            token_address: \"empty\",\n          },\n          config\n        );\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n    console.log(socket);\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    fetchMessages();\n\n    selectedChatCompare = selectedChat;\n    // eslint-disable-next-line\n  }, [selectedChat]);\n\n  const refAgain = () => {\n    fetchMessages();\n  };\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  \n  const [loadingChat, setLoadingChat] = useState(false);\n\n  const {\n\n    chats,\n    setChats,\n  } = ChatState();\n\n  \n  const history = useHistory();\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"userInfo\");\n    localStorage.removeItem(\"address\");\n    history.push(\"/\");\n  };\n\n  const handleSearch = async () => {\n    if (!search) {\n      toast({\n        title: \"Please Enter something in search\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top-left\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const accessChat = async (userId) => {\n    console.log(userId);\n\n    try {\n      setLoadingChat(true);\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\n\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\n      setSelectedChat(data);\n      setLoadingChat(false);\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Error fetching the chat\",\n        description: error.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <div id=\"single_class_div\">\n        {selectedChat ? (\n          <>\n            <Text\n              fontSize={{ base: \"20px\", md: \"20px\" }}\n              pb={3}\n              px={2}\n              w=\"100%\"\n              fontFamily=\"Work sans\"\n              d=\"flex\"\n              justifyContent={{ base: \"space-between\" }}\n              alignItems=\"center\"\n              color=\"white\"\n              position={\"absolute\"}\n              top={\"0\"}\n              left={\"0\"}\n              padding={\"10px\"}\n              bg=\"blackAlpha.400\"\n              backdropFilter=\"auto\"\n              backdropBlur=\"6px\"\n              zIndex={\"1000\"}\n            >\n              <IconButton\n                d={{ base: \"flex\", md: \"none\" }}\n                icon={<ArrowBackIcon />}\n                onClick={() => setSelectedChat(\"\")}\n              />\n              {messages &&\n                (!selectedChat.isGroupChat ? (\n                  <>\n                    <p className=\"font1\">\n                      {getSender(user, selectedChat.users)}\n                    </p>\n                    {/* <ProfileModal\n                    user={getSenderFull(user, selectedChat.users)}\n                  /> */}\n                  </>\n                ) : (\n                  <>\n                    {selectedChat.chatName}\n                    <UpdateGroupChatModal\n                      fetchMessages={fetchMessages}\n                      fetchAgain={fetchAgain}\n                      setFetchAgain={setFetchAgain}\n                    />\n                    <Button\n                      variant=\"ghost\"\n                      onClick={onOpen}\n                      _hover={{ bg: \"#e2b2ff\", color: \"black\" }}\n                    >\n                      <i className=\"fas fa-search\"></i>\n                      <Text\n                        d={{ base: \"none\", md: \"flex\" }}\n                        px={4}\n                        className={\"font1\"}\n                      >\n                        Search User\n                      </Text>\n                    </Button>\n                  </>\n                ))}\n            </Text>\n            <Box\n              d=\"flex\"\n              flexDir=\"column\"\n              justifyContent=\"flex-end\"\n              p={3}\n              bg=\"rgb(66,69,73)\"\n              w=\"100%\"\n              h=\"105%\"\n              borderRadius=\"lg\"\n              overflowY=\"hidden\"\n              paddingTop={\"10px\"}\n            >\n              {loading ? (\n                <Spinner\n                  size=\"xl\"\n                  w={20}\n                  h={20}\n                  alignSelf=\"center\"\n                  margin=\"auto\"\n                />\n              ) : (\n                <div className=\"messages\">\n                  <ScrollableChat messages={messages} refAgain={refAgain} />\n                </div>\n              )}\n\n              <FormControl\n                onKeyDown={sendMessage}\n                id=\"first-name\"\n                isRequired\n                mt={3}\n              >\n                {istyping ? (\n                  <div>\n                    <Lottie\n                      options={defaultOptions}\n                      // height={50}\n                      width={70}\n                      style={{ marginBottom: 15, marginLeft: 0 }}\n                    />\n                  </div>\n                ) : (\n                  <></>\n                )}\n                <div style={{ margin: \"auto\", display: \"flex\" }}>\n                  <Input\n                    variant=\"filled\"\n                    bg=\"rgb(54,57,62)\"\n                    color=\"white\"\n                    focusBorderColor=\"rgb(54,57,62)\"\n                    placeholder=\"Enter a message..\"\n                    value={newMessage}\n                    width=\"97%\"\n                    onChange={typingHandler}\n                    _hover={{ bg: \"rgb(54,57,62)\" }}\n                  />\n                  {messages &&\n                    (!selectedChat.isGroupChat ? (\n                      <PaymentChoice\n                        fetchAgain={fetchAgain}\n                        setFetchAgain={setFetchAgain}\n                        fetchMessages={fetchMessages}\n                        refAgain={refAgain}\n                        Moralis={Moralis}\n                        EvmChain={EvmChain}\n                        sender_id={getSender(user, selectedChat.users)}\n                      />\n                    ) : (\n                      <GroupPayment\n                        fetchAgain={fetchAgain}\n                        setFetchAgain={setFetchAgain}\n                        fetchMessages={fetchMessages}\n                        refAgain={refAgain}\n                        Moralis={Moralis}\n                        EvmChain={EvmChain}\n                        sender_id={getSender(user, selectedChat.users)}\n                      />\n                    ))}\n                </div>\n              </FormControl>\n            </Box>\n            <Drawer placement=\"right\" onClose={onClose} isOpen={isOpen}>\n              <DrawerOverlay />\n              <DrawerContent>\n                <DrawerHeader borderBottomWidth=\"1px\">\n                  Search message\n                </DrawerHeader>\n                <DrawerBody>\n                  <Box d=\"flex\" pb={2}>\n                    <Input\n                      placeholder=\"Search by message by index\"\n                      mr={2}\n                      value={search}\n                      onChange={(e) => setSearch(e.target.value)}\n                    />\n                    <Button onClick={handleSearch}>Go</Button>\n                  </Box>\n                  {loading ? (\n                    <ChatLoading />\n                  ) : (\n                    // searchResult?.map((user) => (\n                    <GroupBox1 />\n                    // ))\n                  )}\n                  {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\n                </DrawerBody>\n              </DrawerContent>\n            </Drawer>\n          </>\n        ) : (\n          // to get socket.io on same page\n          <Box\n            d=\"flex\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n            h=\"105%\"\n            w=\"100%\"\n            bg=\"rgb(66,69,73)\"\n          >\n            <Text fontSize=\"3xl\" pb={3} color=\"white\" className=\"font1\">\n              Click on a user to start chatting\n            </Text>\n          </Box>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default SingleChat;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}