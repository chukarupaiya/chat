{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StreamSelector = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\n/**\n * The StreamSelector class is a representation of a stream selector\n *\n * Use this class any time you want to use a value in your stream trigger data that is not a static value\n *\n * @category DataType\n */\nvar StreamSelector = /** @class */function () {\n  /**\n   * Create a new instance of StreamSelector from any valid stream data field\n   *\n   * @example\n   * ```\n   * const receiverSelector = StreamSelector.create('$to')\n   * const selector = StreamSelector.create('$contract')\n   * ```\n   */\n  function StreamSelector(data) {\n    this._value = StreamSelector.parse(data);\n  }\n  StreamSelector.isSelectorString = function (selector) {\n    if (selector instanceof StreamSelector) {\n      return true;\n    }\n    return selector.startsWith('$');\n  };\n  StreamSelector.create = function (streamSelector) {\n    if (streamSelector instanceof StreamSelector) {\n      return streamSelector;\n    }\n    return new StreamSelector(streamSelector);\n  };\n  StreamSelector.parse = function (streamSelector) {\n    if (!StreamSelector.isSelectorString(streamSelector)) {\n      throw new common_core_1.CoreError({\n        code: common_core_1.CoreErrorCode.INVALID_ARGUMENT,\n        message: 'Invalid selector string provided'\n      });\n    }\n    return streamSelector;\n  };\n  /**\n   * Compares two StreamSelector data. It checks a deep equality check of both values.\n   * @param valueA - the first StreamSelectorish data to compare\n   * @param valueB - the second StreamSelectorish data to compare\n   * @returns true if the values are equal, false otherwise\n   * @example\n   * ```ts\n   *  StreamSelector.equals(valueA, valueB);\n   * ```\n   */\n  StreamSelector.equals = function (valueA, valueB) {\n    var streamSelectorA = StreamSelector.create(valueA);\n    var streamSelectorB = StreamSelector.create(valueB);\n    return streamSelectorA.value === streamSelectorB.value;\n  };\n  /**\n   * Compares an StreamSelectorish data to this StreamSelector instance.\n   * @param streamSelector - the streamSelector to compare\n   * @returns true if the streamSelector is equal to the current instance, false otherwise\n   * @example\n   * ```ts\n   * streamSelector.equals(streamSelector);\n   * ```\n   */\n  StreamSelector.prototype.equals = function (streamSelector) {\n    return StreamSelector.equals(this, streamSelector);\n  };\n  /**\n   * Converts the StreamSelector instance to a JSON object.\n   * @returns JSON object of the StreamSelector instance\n   * @example `streamSelector.format()`\n   */\n  StreamSelector.prototype.format = function () {\n    return this.value;\n  };\n  Object.defineProperty(StreamSelector.prototype, \"value\", {\n    /**\n     * @returns the selector path\n     * @example '$from'\n     */\n    get: function () {\n      return this._value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return StreamSelector;\n}();\nexports.StreamSelector = StreamSelector;","map":{"version":3,"sources":["../../../src/dataTypes/StreamSelector/StreamSelector.ts"],"names":[],"mappings":";;;;;;AAAA,IAAA,aAAA,GAAA,OAAA,CAAA,0BAAA,CAAA;AAaA;;;;;;AAMG;AACH,IAAA,cAAA,GAAA,aAAA,YAAA;EAGE;;;;;;;;AAQG;EACH,SAAA,cAAA,CAAY,IAAyB,EAAA;IACnC,IAAI,CAAC,MAAM,GAAG,cAAc,CAAC,KAAK,CAAC,IAAI,CAAC;EAC1C;EAEO,cAAA,CAAA,gBAAgB,GAAvB,UAAwB,QAA2B,EAAA;IACjD,IAAI,QAAQ,YAAY,cAAc,EAAE;MACtC,OAAO,IAAI;IACZ;IAED,OAAO,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC;EACjC,CAAC;EAEM,cAAA,CAAA,MAAM,GAAb,UAAc,cAAiC,EAAA;IAC7C,IAAI,cAAc,YAAY,cAAc,EAAE;MAC5C,OAAO,cAAc;IACtB;IACD,OAAO,IAAI,cAAc,CAAC,cAAc,CAAC;EAC3C,CAAC;EAEc,cAAA,CAAA,KAAK,GAApB,UAAqB,cAAmC,EAAA;IACtD,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,cAAc,CAAC,EAAE;MACpD,MAAM,IAAI,aAAA,CAAA,SAAS,CAAC;QAClB,IAAI,EAAE,aAAA,CAAA,aAAa,CAAC,gBAAgB;QACpC,OAAO,EAAE;OACV,CAAC;IACH;IAED,OAAO,cAAc;EACvB,CAAC;EAED;;;;;;;;;AASG;EACI,cAAA,CAAA,MAAM,GAAb,UAAc,MAAyB,EAAE,MAAyB,EAAA;IAChE,IAAM,eAAe,GAAG,cAAc,CAAC,MAAM,CAAC,MAAM,CAAC;IACrD,IAAM,eAAe,GAAG,cAAc,CAAC,MAAM,CAAC,MAAM,CAAC;IAErD,OAAO,eAAe,CAAC,KAAK,KAAK,eAAe,CAAC,KAAK;EACxD,CAAC;EAED;;;;;;;;AAQG;EACH,cAAA,CAAA,SAAA,CAAA,MAAM,GAAN,UAAO,cAAiC,EAAA;IACtC,OAAO,cAAc,CAAC,MAAM,CAAC,IAAI,EAAE,cAAc,CAAC;EACpD,CAAC;EAED;;;;AAIG;EACH,cAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IACE,OAAO,IAAI,CAAC,KAAK;EACnB,CAAC;EAMD,MAAA,CAAA,cAAA,CAAI,cAAA,CAAA,SAAA,EAAA,OAAK,EAAA;IAJT;;;AAGG;SACH,YAAA;MACE,OAAO,IAAI,CAAC,MAAM;IACpB,CAAC;;;IAAA;EACH,OAAA,cAAC;AAAD,CAAC,EAAA;AAxFY,OAAA,CAAA,cAAA,GAAA,cAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StreamSelector = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\n/**\n * The StreamSelector class is a representation of a stream selector\n *\n * Use this class any time you want to use a value in your stream trigger data that is not a static value\n *\n * @category DataType\n */\nvar StreamSelector = /** @class */ (function () {\n    /**\n     * Create a new instance of StreamSelector from any valid stream data field\n     *\n     * @example\n     * ```\n     * const receiverSelector = StreamSelector.create('$to')\n     * const selector = StreamSelector.create('$contract')\n     * ```\n     */\n    function StreamSelector(data) {\n        this._value = StreamSelector.parse(data);\n    }\n    StreamSelector.isSelectorString = function (selector) {\n        if (selector instanceof StreamSelector) {\n            return true;\n        }\n        return selector.startsWith('$');\n    };\n    StreamSelector.create = function (streamSelector) {\n        if (streamSelector instanceof StreamSelector) {\n            return streamSelector;\n        }\n        return new StreamSelector(streamSelector);\n    };\n    StreamSelector.parse = function (streamSelector) {\n        if (!StreamSelector.isSelectorString(streamSelector)) {\n            throw new common_core_1.CoreError({\n                code: common_core_1.CoreErrorCode.INVALID_ARGUMENT,\n                message: 'Invalid selector string provided',\n            });\n        }\n        return streamSelector;\n    };\n    /**\n     * Compares two StreamSelector data. It checks a deep equality check of both values.\n     * @param valueA - the first StreamSelectorish data to compare\n     * @param valueB - the second StreamSelectorish data to compare\n     * @returns true if the values are equal, false otherwise\n     * @example\n     * ```ts\n     *  StreamSelector.equals(valueA, valueB);\n     * ```\n     */\n    StreamSelector.equals = function (valueA, valueB) {\n        var streamSelectorA = StreamSelector.create(valueA);\n        var streamSelectorB = StreamSelector.create(valueB);\n        return streamSelectorA.value === streamSelectorB.value;\n    };\n    /**\n     * Compares an StreamSelectorish data to this StreamSelector instance.\n     * @param streamSelector - the streamSelector to compare\n     * @returns true if the streamSelector is equal to the current instance, false otherwise\n     * @example\n     * ```ts\n     * streamSelector.equals(streamSelector);\n     * ```\n     */\n    StreamSelector.prototype.equals = function (streamSelector) {\n        return StreamSelector.equals(this, streamSelector);\n    };\n    /**\n     * Converts the StreamSelector instance to a JSON object.\n     * @returns JSON object of the StreamSelector instance\n     * @example `streamSelector.format()`\n     */\n    StreamSelector.prototype.format = function () {\n        return this.value;\n    };\n    Object.defineProperty(StreamSelector.prototype, \"value\", {\n        /**\n         * @returns the selector path\n         * @example '$from'\n         */\n        get: function () {\n            return this._value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return StreamSelector;\n}());\nexports.StreamSelector = StreamSelector;\n//# sourceMappingURL=StreamSelector.js.map"]},"metadata":{},"sourceType":"script"}