{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StreamTrigger = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar common_evm_utils_1 = require(\"@moralisweb3/common-evm-utils\");\nvar StreamSelector_1 = require(\"../StreamSelector\");\n/**\n * The StreamTrigger class is a representation of a stream trigger that is used by the Moralis Stream API\n *\n * @category DataType\n */\nvar StreamTrigger = /** @class */function () {\n  function StreamTrigger(data, core) {\n    this._data = StreamTrigger.parse(data, core);\n  }\n  StreamTrigger.create = function (data, core) {\n    if (data instanceof StreamTrigger) {\n      return data;\n    }\n    var finalCore = core !== null && core !== void 0 ? core : common_core_1.CoreProvider.getDefault();\n    return new StreamTrigger(data, finalCore);\n  };\n  StreamTrigger.parseSelectorOrAddress = function (input, core) {\n    var result;\n    // If it is not an EvmAddress, it can be a string, but only the ones that are selectors should be treated that way\n    if (!(input instanceof common_evm_utils_1.EvmAddress) && StreamSelector_1.StreamSelector.isSelectorString(input)) {\n      result = StreamSelector_1.StreamSelector.create(input);\n    } else {\n      result = common_evm_utils_1.EvmAddress.create(input, core);\n    }\n    return result;\n  };\n  // eslint-disable-next-line complexity\n  StreamTrigger.equals = function (valueA, valueB) {\n    var _a, _b;\n    var streamTriggerA = StreamTrigger.create(valueA);\n    var streamTriggerB = StreamTrigger.create(valueB);\n    if (streamTriggerA.type !== streamTriggerB.type) {\n      return false;\n    }\n    // contractAddress can be a StreamSelector or an EvmAddress. It is easier to compare them as strings\n    if (streamTriggerA.contractAddress.format() !== streamTriggerB.contractAddress.format()) {\n      return false;\n    }\n    if (streamTriggerA.functionAbi !== streamTriggerB.functionAbi) {\n      return false;\n    }\n    if (((_a = streamTriggerA.inputs) === null || _a === void 0 ? void 0 : _a.length) !== ((_b = streamTriggerB.inputs) === null || _b === void 0 ? void 0 : _b.length)) {\n      return false;\n    }\n    var triggerInputsA = streamTriggerA.inputs || [];\n    var triggerInputsB = streamTriggerB.inputs || [];\n    for (var i = 0; i < (triggerInputsA === null || triggerInputsA === void 0 ? void 0 : triggerInputsA.length); i++) {\n      if (triggerInputsA[i] !== triggerInputsB[i]) {\n        return false;\n      }\n    }\n    if (streamTriggerA.topic0 !== streamTriggerB.topic0) {\n      return false;\n    }\n    if (streamTriggerA.callFrom !== streamTriggerB.callFrom) {\n      return false;\n    }\n    return true;\n  };\n  /**\n   * Compares two StreamTrigger arrays. It checks a deep equality check of both values, meaning that all the values have to be on both arrays.\n   * @param valueA - the first StreamTriggerish[] data to compare\n   * @param valueB - the second StreamTriggerish[] data to compare\n   * @returns true if all values are equal, false otherwise\n   * @example\n   * ```ts\n   *  StreamTrigger.arrayEquals(valueA, valueB);\n   * ```\n   */\n  StreamTrigger.arrayEquals = function (valueA, valueB) {\n    if (valueA.length !== valueB.length) {\n      return false;\n    }\n    var triggersA = valueA.map(function (trigger) {\n      return StreamTrigger.create(trigger);\n    });\n    var triggersB = valueB.map(function (trigger) {\n      return StreamTrigger.create(trigger);\n    });\n    var seenTriggersB = Array(triggersB.length).fill(false);\n    var _loop_1 = function (i) {\n      var indexB = triggersB.findIndex(function (triggerB) {\n        return triggerB.equals(triggersA[i]);\n      });\n      if (indexB < 0) {\n        return {\n          value: false\n        };\n      }\n      seenTriggersB[indexB] = true;\n    };\n    for (var i = 0; i < triggersA.length; i++) {\n      var state_1 = _loop_1(i);\n      if (typeof state_1 === \"object\") return state_1.value;\n    }\n    if (seenTriggersB.some(function (seen) {\n      return !seen;\n    })) {\n      return false;\n    }\n    return true;\n  };\n  /**\n   * Compares an StreamTrigger data to this StreamTrigger instance.\n   * @param value - the value to compare\n   * @returns true if the value is equal to the current instance, false otherwise\n   * @example\n   * ```ts\n   * streamTrigger.equals(value);\n   * ```\n   */\n  StreamTrigger.prototype.equals = function (value) {\n    return StreamTrigger.equals(this, value);\n  };\n  /**\n   * Converts the StreamTrigger instance to a JSON object.\n   * @returns JSON object of the StreamTrigger instance\n   * @example `streamTrigger.toJSON()`\n   */\n  StreamTrigger.prototype.toJSON = function () {\n    var _a = this._data,\n      contractAddress = _a.contractAddress,\n      callFrom = _a.callFrom,\n      data = __rest(_a, [\"contractAddress\", \"callFrom\"]);\n    return __assign(__assign({}, data), {\n      contractAddress: contractAddress.format(),\n      callFrom: callFrom === null || callFrom === void 0 ? void 0 : callFrom.format()\n    });\n  };\n  /**\n   * Converts the StreamTrigger instance to a JSON object.\n   * @returns JSON object of the StreamTrigger instance\n   * @example `streamTrigger.format()`\n   */\n  StreamTrigger.prototype.format = function () {\n    return this.toJSON();\n  };\n  Object.defineProperty(StreamTrigger.prototype, \"type\", {\n    get: function () {\n      return this._data.type;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StreamTrigger.prototype, \"contractAddress\", {\n    get: function () {\n      return this._data.contractAddress;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StreamTrigger.prototype, \"functionAbi\", {\n    get: function () {\n      return this._data.functionAbi;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StreamTrigger.prototype, \"inputs\", {\n    get: function () {\n      return this._data.inputs;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StreamTrigger.prototype, \"topic0\", {\n    get: function () {\n      return this._data.topic0;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StreamTrigger.prototype, \"callFrom\", {\n    get: function () {\n      return this._data.callFrom;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  StreamTrigger.parse = function (data, core) {\n    var contractAddressInput = data.contractAddress,\n      callFromInput = data.callFrom,\n      input = __rest(data, [\"contractAddress\", \"callFrom\"]);\n    var contractAddress = StreamTrigger.parseSelectorOrAddress(contractAddressInput, core);\n    var callFrom = (0, common_core_1.maybe)(callFromInput, function (value) {\n      return StreamTrigger.parseSelectorOrAddress(value, core);\n    });\n    return __assign(__assign({}, input), {\n      contractAddress: contractAddress,\n      callFrom: callFrom\n    });\n  };\n  return StreamTrigger;\n}();\nexports.StreamTrigger = StreamTrigger;","map":{"version":3,"sources":["../../../src/dataTypes/StreamTrigger/StreamTrigger.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StreamTrigger = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar common_evm_utils_1 = require(\"@moralisweb3/common-evm-utils\");\nvar StreamSelector_1 = require(\"../StreamSelector\");\n/**\n * The StreamTrigger class is a representation of a stream trigger that is used by the Moralis Stream API\n *\n * @category DataType\n */\nvar StreamTrigger = /** @class */ (function () {\n    function StreamTrigger(data, core) {\n        this._data = StreamTrigger.parse(data, core);\n    }\n    StreamTrigger.create = function (data, core) {\n        if (data instanceof StreamTrigger) {\n            return data;\n        }\n        var finalCore = core !== null && core !== void 0 ? core : common_core_1.CoreProvider.getDefault();\n        return new StreamTrigger(data, finalCore);\n    };\n    StreamTrigger.parseSelectorOrAddress = function (input, core) {\n        var result;\n        // If it is not an EvmAddress, it can be a string, but only the ones that are selectors should be treated that way\n        if (!(input instanceof common_evm_utils_1.EvmAddress) && StreamSelector_1.StreamSelector.isSelectorString(input)) {\n            result = StreamSelector_1.StreamSelector.create(input);\n        }\n        else {\n            result = common_evm_utils_1.EvmAddress.create(input, core);\n        }\n        return result;\n    };\n    // eslint-disable-next-line complexity\n    StreamTrigger.equals = function (valueA, valueB) {\n        var _a, _b;\n        var streamTriggerA = StreamTrigger.create(valueA);\n        var streamTriggerB = StreamTrigger.create(valueB);\n        if (streamTriggerA.type !== streamTriggerB.type) {\n            return false;\n        }\n        // contractAddress can be a StreamSelector or an EvmAddress. It is easier to compare them as strings\n        if (streamTriggerA.contractAddress.format() !== streamTriggerB.contractAddress.format()) {\n            return false;\n        }\n        if (streamTriggerA.functionAbi !== streamTriggerB.functionAbi) {\n            return false;\n        }\n        if (((_a = streamTriggerA.inputs) === null || _a === void 0 ? void 0 : _a.length) !== ((_b = streamTriggerB.inputs) === null || _b === void 0 ? void 0 : _b.length)) {\n            return false;\n        }\n        var triggerInputsA = streamTriggerA.inputs || [];\n        var triggerInputsB = streamTriggerB.inputs || [];\n        for (var i = 0; i < (triggerInputsA === null || triggerInputsA === void 0 ? void 0 : triggerInputsA.length); i++) {\n            if (triggerInputsA[i] !== triggerInputsB[i]) {\n                return false;\n            }\n        }\n        if (streamTriggerA.topic0 !== streamTriggerB.topic0) {\n            return false;\n        }\n        if (streamTriggerA.callFrom !== streamTriggerB.callFrom) {\n            return false;\n        }\n        return true;\n    };\n    /**\n     * Compares two StreamTrigger arrays. It checks a deep equality check of both values, meaning that all the values have to be on both arrays.\n     * @param valueA - the first StreamTriggerish[] data to compare\n     * @param valueB - the second StreamTriggerish[] data to compare\n     * @returns true if all values are equal, false otherwise\n     * @example\n     * ```ts\n     *  StreamTrigger.arrayEquals(valueA, valueB);\n     * ```\n     */\n    StreamTrigger.arrayEquals = function (valueA, valueB) {\n        if (valueA.length !== valueB.length) {\n            return false;\n        }\n        var triggersA = valueA.map(function (trigger) { return StreamTrigger.create(trigger); });\n        var triggersB = valueB.map(function (trigger) { return StreamTrigger.create(trigger); });\n        var seenTriggersB = Array(triggersB.length).fill(false);\n        var _loop_1 = function (i) {\n            var indexB = triggersB.findIndex(function (triggerB) { return triggerB.equals(triggersA[i]); });\n            if (indexB < 0) {\n                return { value: false };\n            }\n            seenTriggersB[indexB] = true;\n        };\n        for (var i = 0; i < triggersA.length; i++) {\n            var state_1 = _loop_1(i);\n            if (typeof state_1 === \"object\")\n                return state_1.value;\n        }\n        if (seenTriggersB.some(function (seen) { return !seen; })) {\n            return false;\n        }\n        return true;\n    };\n    /**\n     * Compares an StreamTrigger data to this StreamTrigger instance.\n     * @param value - the value to compare\n     * @returns true if the value is equal to the current instance, false otherwise\n     * @example\n     * ```ts\n     * streamTrigger.equals(value);\n     * ```\n     */\n    StreamTrigger.prototype.equals = function (value) {\n        return StreamTrigger.equals(this, value);\n    };\n    /**\n     * Converts the StreamTrigger instance to a JSON object.\n     * @returns JSON object of the StreamTrigger instance\n     * @example `streamTrigger.toJSON()`\n     */\n    StreamTrigger.prototype.toJSON = function () {\n        var _a = this._data, contractAddress = _a.contractAddress, callFrom = _a.callFrom, data = __rest(_a, [\"contractAddress\", \"callFrom\"]);\n        return __assign(__assign({}, data), { contractAddress: contractAddress.format(), callFrom: callFrom === null || callFrom === void 0 ? void 0 : callFrom.format() });\n    };\n    /**\n     * Converts the StreamTrigger instance to a JSON object.\n     * @returns JSON object of the StreamTrigger instance\n     * @example `streamTrigger.format()`\n     */\n    StreamTrigger.prototype.format = function () {\n        return this.toJSON();\n    };\n    Object.defineProperty(StreamTrigger.prototype, \"type\", {\n        get: function () {\n            return this._data.type;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StreamTrigger.prototype, \"contractAddress\", {\n        get: function () {\n            return this._data.contractAddress;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StreamTrigger.prototype, \"functionAbi\", {\n        get: function () {\n            return this._data.functionAbi;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StreamTrigger.prototype, \"inputs\", {\n        get: function () {\n            return this._data.inputs;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StreamTrigger.prototype, \"topic0\", {\n        get: function () {\n            return this._data.topic0;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StreamTrigger.prototype, \"callFrom\", {\n        get: function () {\n            return this._data.callFrom;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    StreamTrigger.parse = function (data, core) {\n        var contractAddressInput = data.contractAddress, callFromInput = data.callFrom, input = __rest(data, [\"contractAddress\", \"callFrom\"]);\n        var contractAddress = StreamTrigger.parseSelectorOrAddress(contractAddressInput, core);\n        var callFrom = (0, common_core_1.maybe)(callFromInput, function (value) { return StreamTrigger.parseSelectorOrAddress(value, core); });\n        return __assign(__assign({}, input), { contractAddress: contractAddress, callFrom: callFrom });\n    };\n    return StreamTrigger;\n}());\nexports.StreamTrigger = StreamTrigger;\n//# sourceMappingURL=StreamTrigger.js.map"]},"metadata":{},"sourceType":"script"}