{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AptosNetwork = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar aptosNetworkNames = ['mainnet', 'testnet', 'devnet'];\nvar aptosChainIdToNetworkNames = {\n  '1': 'mainnet',\n  '2': 'testnet'\n};\n/**\n * A representation of a Aptos network.\n *\n * @category DataType\n */\nvar AptosNetwork = /** @class */function () {\n  function AptosNetwork(network) {\n    this.network = network;\n  }\n  Object.defineProperty(AptosNetwork, \"MAINNET\", {\n    /**\n     * Returns MAINNET network\n     *\n     * @example AptosNetwork.MAINNET\n     */\n    get: function () {\n      return AptosNetwork.create('mainnet');\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AptosNetwork, \"TESTNET\", {\n    /**\n     * Returns TESTNET network\n     *\n     * @example AptosNetwork.MAINNET\n     */\n    get: function () {\n      return AptosNetwork.create('testnet');\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AptosNetwork, \"DEVNET\", {\n    /**\n     * Returns DEVNET network\n     *\n     * @example AptosNetwork.MAINNET\n     */\n    get: function () {\n      return AptosNetwork.create('devnet');\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Create a new instance of AptosNetwork from any valid network input.\n   *\n   * @example `const network = AptosNetwork.create(\"mainnet\")`\n   * @throws an error when a passed network is invalid.\n   */\n  AptosNetwork.create = function (network) {\n    return network instanceof AptosNetwork ? network : new AptosNetwork(AptosNetwork.parse(network));\n  };\n  AptosNetwork.parse = function (network) {\n    var _a;\n    if (typeof network !== 'string') {\n      throw new common_core_1.CoreError({\n        code: common_core_1.CoreErrorCode.INVALID_ARGUMENT,\n        message: \"Aptos network is not supported: \".concat(network)\n      });\n    }\n    var networkName = (_a = aptosChainIdToNetworkNames[network]) !== null && _a !== void 0 ? _a : network;\n    if (!aptosNetworkNames.includes(networkName)) {\n      throw new common_core_1.CoreError({\n        code: common_core_1.CoreErrorCode.INVALID_ARGUMENT,\n        message: \"Aptos network is not supported: \".concat(network)\n      });\n    }\n    return networkName;\n  };\n  /**\n   * Formats the network to a specific format.\n   * Currently returns a string representing the network.\n   * @example network.format(); // \"mainnet\"\n   */\n  AptosNetwork.prototype.format = function () {\n    // TODO: add `format` argument\n    return this.network;\n  };\n  /**\n   * Checks the equality of the current network with another Aptos network.\n   * @example `network.equals(\"mainnet\")`\n   * @example `network.equals(AptosNetwork.create(\"mainnet\"))`\n   */\n  AptosNetwork.prototype.equals = function (network) {\n    return this.network === AptosNetwork.create(network).network;\n  };\n  /**\n   * @returns a string representing the network.\n   * @example network.toJSON(); // \"mainnet\"\n   */\n  AptosNetwork.prototype.toJSON = function () {\n    return this.network;\n  };\n  /**\n   * @returns a string representing the network.\n   * @example network.toString(); // \"mainnet\"\n   */\n  AptosNetwork.prototype.toString = function () {\n    return this.network;\n  };\n  return AptosNetwork;\n}();\nexports.AptosNetwork = AptosNetwork;","map":{"version":3,"sources":["../../../src/dataTypes/AptosNetwork/AptosNetwork.ts"],"names":[],"mappings":";;;;;;AAAA,IAAA,aAAA,GAAA,OAAA,CAAA,0BAAA,CAAA;AAEA,IAAM,iBAAiB,GAAG,CAAC,SAAS,EAAE,SAAS,EAAE,QAAQ,CAAU;AACnE,IAAM,0BAA0B,GAAqC;EACnE,GAAG,EAAE,SAAS;EACd,GAAG,EAAE;CACN;AA4BD;;;;AAIG;AACH,IAAA,YAAA,GAAA,aAAA,YAAA;EAyDE,SAAA,YAAA,CAAoC,OAAyB,EAAA;IAAzB,IAAA,CAAA,OAAO,GAAP,OAAO;EAAqB;EAnDhE,MAAA,CAAA,cAAA,CAAkB,YAAA,EAAA,SAAO,EAAA;IALzB;;;;AAIG;SACH,YAAA;MACE,OAAO,YAAY,CAAC,MAAM,CAAC,SAAS,CAAC;IACvC,CAAC;;;IAAA;EAMD,MAAA,CAAA,cAAA,CAAkB,YAAA,EAAA,SAAO,EAAA;IALzB;;;;AAIG;SACH,YAAA;MACE,OAAO,YAAY,CAAC,MAAM,CAAC,SAAS,CAAC;IACvC,CAAC;;;IAAA;EAOD,MAAA,CAAA,cAAA,CAAkB,YAAA,EAAA,QAAM,EAAA;IALxB;;;;AAIG;SACH,YAAA;MACE,OAAO,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAC;IACtC,CAAC;;;IAAA;EAED;;;;;AAKG;EACW,YAAA,CAAA,MAAM,GAApB,UAAqB,OAAwB,EAAA;IAC3C,OAAO,OAAO,YAAY,YAAY,GAAG,OAAO,GAAG,IAAI,YAAY,CAAC,YAAY,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;EAClG,CAAC;EAEc,YAAA,CAAA,KAAK,GAApB,UAAqB,OAA4B,EAAA;;IAC/C,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;MAC/B,MAAM,IAAI,aAAA,CAAA,SAAS,CAAC;QAClB,IAAI,EAAE,aAAA,CAAA,aAAa,CAAC,gBAAgB;QACpC,OAAO,EAAE,kCAAA,CAAA,MAAA,CAAmC,OAAO;OACpD,CAAC;IACH;IAED,IAAM,WAAW,GAAG,CAAA,EAAA,GAAA,0BAA0B,CAAC,OAAO,CAAC,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,OAAO;IAElE,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,WAA+B,CAAC,EAAE;MAChE,MAAM,IAAI,aAAA,CAAA,SAAS,CAAC;QAClB,IAAI,EAAE,aAAA,CAAA,aAAa,CAAC,gBAAgB;QACpC,OAAO,EAAE,kCAAA,CAAA,MAAA,CAAmC,OAAO;OACpD,CAAC;IACH;IAED,OAAO,WAA+B;EACxC,CAAC;EAID;;;;AAIG;EACI,YAAA,CAAA,SAAA,CAAA,MAAM,GAAb,YAAA;IACE;IACA,OAAO,IAAI,CAAC,OAAO;EACrB,CAAC;EAED;;;;AAIG;EACI,YAAA,CAAA,SAAA,CAAA,MAAM,GAAb,UAAc,OAAwB,EAAA;IACpC,OAAO,IAAI,CAAC,OAAO,KAAK,YAAY,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO;EAC9D,CAAC;EAED;;;AAGG;EACI,YAAA,CAAA,SAAA,CAAA,MAAM,GAAb,YAAA;IACE,OAAO,IAAI,CAAC,OAAO;EACrB,CAAC;EAED;;;AAGG;EACI,YAAA,CAAA,SAAA,CAAA,QAAQ,GAAf,YAAA;IACE,OAAO,IAAI,CAAC,OAAO;EACrB,CAAC;EACH,OAAA,YAAC;AAAD,CAAC,EAAA;AA7FY,OAAA,CAAA,YAAA,GAAA,YAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AptosNetwork = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar aptosNetworkNames = ['mainnet', 'testnet', 'devnet'];\nvar aptosChainIdToNetworkNames = {\n    '1': 'mainnet',\n    '2': 'testnet',\n};\n/**\n * A representation of a Aptos network.\n *\n * @category DataType\n */\nvar AptosNetwork = /** @class */ (function () {\n    function AptosNetwork(network) {\n        this.network = network;\n    }\n    Object.defineProperty(AptosNetwork, \"MAINNET\", {\n        /**\n         * Returns MAINNET network\n         *\n         * @example AptosNetwork.MAINNET\n         */\n        get: function () {\n            return AptosNetwork.create('mainnet');\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(AptosNetwork, \"TESTNET\", {\n        /**\n         * Returns TESTNET network\n         *\n         * @example AptosNetwork.MAINNET\n         */\n        get: function () {\n            return AptosNetwork.create('testnet');\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(AptosNetwork, \"DEVNET\", {\n        /**\n         * Returns DEVNET network\n         *\n         * @example AptosNetwork.MAINNET\n         */\n        get: function () {\n            return AptosNetwork.create('devnet');\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Create a new instance of AptosNetwork from any valid network input.\n     *\n     * @example `const network = AptosNetwork.create(\"mainnet\")`\n     * @throws an error when a passed network is invalid.\n     */\n    AptosNetwork.create = function (network) {\n        return network instanceof AptosNetwork ? network : new AptosNetwork(AptosNetwork.parse(network));\n    };\n    AptosNetwork.parse = function (network) {\n        var _a;\n        if (typeof network !== 'string') {\n            throw new common_core_1.CoreError({\n                code: common_core_1.CoreErrorCode.INVALID_ARGUMENT,\n                message: \"Aptos network is not supported: \".concat(network),\n            });\n        }\n        var networkName = (_a = aptosChainIdToNetworkNames[network]) !== null && _a !== void 0 ? _a : network;\n        if (!aptosNetworkNames.includes(networkName)) {\n            throw new common_core_1.CoreError({\n                code: common_core_1.CoreErrorCode.INVALID_ARGUMENT,\n                message: \"Aptos network is not supported: \".concat(network),\n            });\n        }\n        return networkName;\n    };\n    /**\n     * Formats the network to a specific format.\n     * Currently returns a string representing the network.\n     * @example network.format(); // \"mainnet\"\n     */\n    AptosNetwork.prototype.format = function () {\n        // TODO: add `format` argument\n        return this.network;\n    };\n    /**\n     * Checks the equality of the current network with another Aptos network.\n     * @example `network.equals(\"mainnet\")`\n     * @example `network.equals(AptosNetwork.create(\"mainnet\"))`\n     */\n    AptosNetwork.prototype.equals = function (network) {\n        return this.network === AptosNetwork.create(network).network;\n    };\n    /**\n     * @returns a string representing the network.\n     * @example network.toJSON(); // \"mainnet\"\n     */\n    AptosNetwork.prototype.toJSON = function () {\n        return this.network;\n    };\n    /**\n     * @returns a string representing the network.\n     * @example network.toString(); // \"mainnet\"\n     */\n    AptosNetwork.prototype.toString = function () {\n        return this.network;\n    };\n    return AptosNetwork;\n}());\nexports.AptosNetwork = AptosNetwork;\n//# sourceMappingURL=AptosNetwork.js.map"]},"metadata":{},"sourceType":"script"}