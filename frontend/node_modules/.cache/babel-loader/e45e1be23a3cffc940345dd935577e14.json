{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.reSyncMetadataOperation = void 0;\nvar dataTypes_1 = require(\"../../dataTypes\");\nvar EvmChainResolver_1 = require(\"../../EvmChainResolver\");\n/**\n * ReSync the metadata for an NFT\n * * The metadata flag will request a the NFT's metadata from the already existing token_uri\n * * The uri(default) flag will fetch the latest token_uri from the given NFT address. In sync mode the metadata will also be fetched\n * * The sync mode will make the endpoint synchronous so it will wait for the task to be completed before responding\n * * The async mode(default) will make the endpoint asynchronous so we will wait for the task to be completed before responding\n */\nexports.reSyncMetadataOperation = {\n  method: 'GET',\n  name: 'reSyncMetadata',\n  id: 'reSyncMetadata',\n  groupName: 'nft',\n  urlPathPattern: '/nft/{address}/{tokenId}/metadata/resync',\n  urlPathParamNames: ['address', 'tokenId'],\n  urlSearchParamNames: ['chain', 'flag', 'mode'],\n  getRequestUrlParams: getRequestUrlParams,\n  serializeRequest: serializeRequest,\n  deserializeRequest: deserializeRequest,\n  deserializeResponse: deserializeResponse\n};\n// Methods\nfunction getRequestUrlParams(request, core) {\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n    address: dataTypes_1.EvmAddress.create(request.address, core).lowercase,\n    flag: request.flag,\n    mode: request.mode,\n    tokenId: request.tokenId\n  };\n}\nfunction serializeRequest(request, core) {\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n    flag: request.flag,\n    mode: request.mode,\n    address: dataTypes_1.EvmAddress.create(request.address, core).checksum,\n    tokenId: request.tokenId\n  };\n}\nfunction deserializeRequest(jsonRequest, core) {\n  return {\n    chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),\n    flag: jsonRequest.flag,\n    mode: jsonRequest.mode,\n    address: dataTypes_1.EvmAddress.create(jsonRequest.address, core),\n    tokenId: jsonRequest.tokenId\n  };\n}\nfunction deserializeResponse(jsonResponse) {\n  return jsonResponse;\n}","map":{"version":3,"sources":["../../../src/operations/nft/reSyncMetadataOperation.ts"],"names":[],"mappings":";;;;;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;AACA,IAAA,kBAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;AA6BA;;;;;;AAMG;AACU,OAAA,CAAA,uBAAuB,GAKhC;EACF,MAAM,EAAE,KAAK;EACb,IAAI,EAAE,gBAAgB;EACtB,EAAE,EAAE,gBAAgB;EACpB,SAAS,EAAE,KAAK;EAChB,cAAc,EAAE,0CAA0C;EAC1D,iBAAiB,EAAE,CAAC,SAAS,EAAE,SAAS,CAAC;EACzC,mBAAmB,EAAE,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,CAAC;EAE9C,mBAAmB,EAAA,mBAAA;EACnB,gBAAgB,EAAA,gBAAA;EAChB,kBAAkB,EAAA,kBAAA;EAClB,mBAAmB,EAAA;CACpB;AAED;AAEA,SAAS,mBAAmB,CAAC,OAA8B,EAAE,IAAU,EAAA;EACrE,OAAO;IACL,KAAK,EAAE,kBAAA,CAAA,gBAAgB,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,MAAM;IAC3D,OAAO,EAAE,WAAA,CAAA,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,SAAS;IAC3D,IAAI,EAAE,OAAO,CAAC,IAAI;IAClB,IAAI,EAAE,OAAO,CAAC,IAAI;IAClB,OAAO,EAAE,OAAO,CAAC;GAClB;AACH;AAEA,SAAS,gBAAgB,CAAC,OAA8B,EAAE,IAAU,EAAA;EAClE,OAAO;IACL,KAAK,EAAE,kBAAA,CAAA,gBAAgB,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,MAAM;IAC3D,IAAI,EAAE,OAAO,CAAC,IAAI;IAClB,IAAI,EAAE,OAAO,CAAC,IAAI;IAClB,OAAO,EAAE,WAAA,CAAA,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,QAAQ;IAC1D,OAAO,EAAE,OAAO,CAAC;GAClB;AACH;AAEA,SAAS,kBAAkB,CAAC,WAAsC,EAAE,IAAU,EAAA;EAC5E,OAAO;IACL,KAAK,EAAE,WAAA,CAAA,QAAQ,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,EAAE,IAAI,CAAC;IAC/C,IAAI,EAAE,WAAW,CAAC,IAAI;IACtB,IAAI,EAAE,WAAW,CAAC,IAAI;IACtB,OAAO,EAAE,WAAA,CAAA,UAAU,CAAC,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC;IACrD,OAAO,EAAE,WAAW,CAAC;GACtB;AACH;AAEA,SAAS,mBAAmB,CAAC,YAAwC,EAAA;EACnE,OAAO,YAAY;AACrB","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.reSyncMetadataOperation = void 0;\nvar dataTypes_1 = require(\"../../dataTypes\");\nvar EvmChainResolver_1 = require(\"../../EvmChainResolver\");\n/**\n * ReSync the metadata for an NFT\n * * The metadata flag will request a the NFT's metadata from the already existing token_uri\n * * The uri(default) flag will fetch the latest token_uri from the given NFT address. In sync mode the metadata will also be fetched\n * * The sync mode will make the endpoint synchronous so it will wait for the task to be completed before responding\n * * The async mode(default) will make the endpoint asynchronous so we will wait for the task to be completed before responding\n */\nexports.reSyncMetadataOperation = {\n    method: 'GET',\n    name: 'reSyncMetadata',\n    id: 'reSyncMetadata',\n    groupName: 'nft',\n    urlPathPattern: '/nft/{address}/{tokenId}/metadata/resync',\n    urlPathParamNames: ['address', 'tokenId'],\n    urlSearchParamNames: ['chain', 'flag', 'mode'],\n    getRequestUrlParams: getRequestUrlParams,\n    serializeRequest: serializeRequest,\n    deserializeRequest: deserializeRequest,\n    deserializeResponse: deserializeResponse,\n};\n// Methods\nfunction getRequestUrlParams(request, core) {\n    return {\n        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n        address: dataTypes_1.EvmAddress.create(request.address, core).lowercase,\n        flag: request.flag,\n        mode: request.mode,\n        tokenId: request.tokenId,\n    };\n}\nfunction serializeRequest(request, core) {\n    return {\n        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n        flag: request.flag,\n        mode: request.mode,\n        address: dataTypes_1.EvmAddress.create(request.address, core).checksum,\n        tokenId: request.tokenId,\n    };\n}\nfunction deserializeRequest(jsonRequest, core) {\n    return {\n        chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),\n        flag: jsonRequest.flag,\n        mode: jsonRequest.mode,\n        address: dataTypes_1.EvmAddress.create(jsonRequest.address, core),\n        tokenId: jsonRequest.tokenId,\n    };\n}\nfunction deserializeResponse(jsonResponse) {\n    return jsonResponse;\n}\n//# sourceMappingURL=reSyncMetadataOperation.js.map"]},"metadata":{},"sourceType":"script"}