{"ast":null,"code":"var _jsxFileName = \"/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/MultiSig.js\",\n  _s = $RefreshSig$();\nimport { React } from \"react\";\nimport \"./Pay.css\";\nimport { FaDollarSign } from \"react-icons/fa\";\nimport { Input, InputGroup, InputLeftElement, InputRightElement } from \"@chakra-ui/input\";\nimport img from \"../multisig.jpg\";\nimport { BsArrowRight } from \"react-icons/bs\";\nimport { Modal, ModalOverlay, ModalContent, ModalHeader, ModalFooter, ModalBody, ModalCloseButton, Button, useDisclosure, Text, Image, Select, useStyles } from \"@chakra-ui/react\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport \"./SingleChat.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\nimport priceFeed from \"../contracts/frontend-interaction/priceFeed\";\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport senderc20 from \"../contracts/frontend-interaction/senderc20\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ENDPOINT = \"http://localhost:5000\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\nvar socket, selectedChatCompare;\nconst MultiSig = _ref => {\n  _s();\n  let {\n    fetchAgain,\n    setFetchAgain,\n    fetchMessages,\n    refAgain,\n    toClose,\n    Moralis,\n    sender_id\n  } = _ref;\n  const [messages, setMessages] = useState([]);\n  const [currency, setCurrency] = useState(\"\");\n  const [payment_type, setPaymentType] = useState(\"token\");\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n  const [chain, setChain] = useState(\"\");\n  const [token_address, setTokenAddress] = useState(\"\");\n  const [note, setNote] = useState(\"\");\n  const [owner_address, setOwner_address] = useState(\"0x0C9d33186f7D87A94cBA10F3083BB208A49c1647\");\n  const [bal, setBal] = useState(\"\");\n  const [usd, setUsd] = useState(0);\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\"\n    }\n  };\n  const {\n    selectedChat,\n    setSelectedChat,\n    user,\n    notification,\n    setNotification\n  } = ChatState();\n  const sendMessage = async event => {\n    senderc20(token_address, sender_id, newMessage, \"0x0C9d33186f7D87A94cBA10F3083BB208A49c1647\", note);\n\n    //console.log(token_address+\" \"+sender_id+\" \"+newMessage);\n\n    if (newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`\n          }\n        };\n        setNewMessage(\"\");\n        console.log(newMessage + \" \" + selectedChat);\n        const {\n          data\n        } = await axios.post(\"/api/message\", {\n          content: newMessage,\n          chatId: selectedChat,\n          payment: true,\n          payment_mode: \"pay\",\n          chat_mode: \"private\",\n          payment_type: payment_type,\n          currency: currency,\n          receiver_id: sender_id,\n          note: note,\n          token_address: token_address\n        }, config);\n        console.log(data);\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\"\n        });\n      }\n      refAgain();\n    }\n  };\n  const sendMessageReq = async event => {\n    if (newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`\n          }\n        };\n        setNewMessage(\"\");\n        console.log(newMessage + \" \" + selectedChat);\n        const {\n          data\n        } = await axios.post(\"/api/message\", {\n          content: newMessage,\n          chatId: selectedChat,\n          payment: true,\n          payment_mode: \"request\",\n          chat_mode: \"private\",\n          payment_type: payment_type,\n          currency: currency,\n          receiver_id: owner_address,\n          note: note,\n          token_address: token_address\n        }, config);\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\"\n        });\n      }\n      refAgain();\n    }\n  };\n  const typingHandler = e => {\n    setNewMessage(e.target.value);\n    if (!socketConnected) return;\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n    console.log(socket);\n    // eslint-disable-next-line\n  }, []);\n  useEffect(() => {\n    socket.on(\"message recieved\", newMessageRecieved => {\n      if (!selectedChatCompare ||\n      // if chat is not selected or doesn't match current chat\n      selectedChatCompare._id !== newMessageRecieved.chat._id) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n  const [options, setOptions] = useState([]);\n  useEffect(async () => {\n    const {\n      EvmChain\n    } = require(\"@moralisweb3/common-evm-utils\");\n    const address = \"0xE7B0a0ca3443FF1C90E8f3d7fce8B58bd308ca5f\";\n    const chain = EvmChain.MUMBAI;\n    if (Moralis != undefined) {\n      const response = await Moralis.EvmApi.token.getWalletTokenBalances({\n        address,\n        chain\n      });\n      console.log(response.toJSON());\n      setOptions(response.toJSON());\n    }\n  }, [Moralis]);\n  const options2 = options.map(d => {\n    return /*#__PURE__*/_jsxDEV(\"option\", {\n      className: \"font1\",\n      value: d.symbol + \"|\" + d.token_address + \"|\" + Math.pow(10, -18) * d.balance,\n      children: d.symbol\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }, this);\n  });\n  const {\n    isOpen,\n    onOpen,\n    onClose\n  } = useDisclosure();\n  useEffect(async () => {\n    const result = await priceFeed();\n    setUsd(result);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Button, {\n      width: \"100%\",\n      height: \"100%\",\n      margin: \"0px\",\n      padding: \"0px\",\n      className: \"font1\",\n      _focus: {\n        outline: \"none\"\n      },\n      _hover: {\n        transform: \"scale(1.09)\"\n      },\n      borderRadius: \"0px\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        class: \"choice_label1 font2\",\n        style: {\n          fontSize: \"18px\",\n          marginRight: \"5px\"\n        },\n        children: \"MULTI SIG\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        d: {\n          base: \"flex\"\n        },\n        onClick: onOpen,\n        bg: \"linear-gradient(125deg,transparent,rgba(0,0,0,255)90%)\",\n        colorScheme: \"grey\",\n        color: \"white\",\n        width: \"100%\",\n        height: \"100%\",\n        border: \"0px\",\n        zIndex: \"500\",\n        borderRadius: \"0px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"choice_img2\",\n        src: img\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(MultiSig, \"VTUuFAXyVr7NZ19MwvMSOHAEim8=\", false, function () {\n  return [useToast, useDisclosure];\n});\n_c = MultiSig;\nexport default MultiSig;\nvar _c;\n$RefreshReg$(_c, \"MultiSig\");","map":{"version":3,"names":["React","FaDollarSign","Input","InputGroup","InputLeftElement","InputRightElement","img","BsArrowRight","Modal","ModalOverlay","ModalContent","ModalHeader","ModalFooter","ModalBody","ModalCloseButton","Button","useDisclosure","Text","Image","Select","useStyles","FormControl","FormLabel","Box","IconButton","Spinner","useToast","getSender","getSenderFull","useEffect","useState","axios","ArrowBackIcon","ProfileModal","ScrollableChat","Lottie","animationData","priceFeed","io","UpdateGroupChatModal","ChatState","senderc20","ENDPOINT","socket","selectedChatCompare","MultiSig","fetchAgain","setFetchAgain","fetchMessages","refAgain","toClose","Moralis","sender_id","messages","setMessages","currency","setCurrency","payment_type","setPaymentType","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","toast","chain","setChain","token_address","setTokenAddress","note","setNote","owner_address","setOwner_address","bal","setBal","usd","setUsd","defaultOptions","loop","autoplay","rendererSettings","preserveAspectRatio","selectedChat","setSelectedChat","user","notification","setNotification","sendMessage","event","emit","_id","config","headers","Authorization","token","console","log","data","post","content","chatId","payment","payment_mode","chat_mode","receiver_id","error","title","description","status","duration","isClosable","position","sendMessageReq","typingHandler","e","target","value","lastTypingTime","Date","getTime","timerLength","setTimeout","timeNow","timeDiff","on","newMessageRecieved","chat","includes","options","setOptions","EvmChain","require","address","MUMBAI","undefined","response","EvmApi","getWalletTokenBalances","toJSON","options2","map","d","symbol","Math","pow","balance","isOpen","onOpen","onClose","result","outline","transform","fontSize","marginRight","base"],"sources":["/Users/karupaiyachu/Desktop/project/chat-app copy/frontend/src/components/MultiSig.js"],"sourcesContent":["import { React } from \"react\";\nimport \"./Pay.css\";\nimport { FaDollarSign } from \"react-icons/fa\";\nimport {\n  Input,\n  InputGroup,\n  InputLeftElement,\n  InputRightElement,\n} from \"@chakra-ui/input\";\nimport img from \"../multisig.jpg\";\nimport { BsArrowRight } from \"react-icons/bs\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  Text,\n  Image,\n  Select,\n  useStyles,\n} from \"@chakra-ui/react\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport \"./SingleChat.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\nimport priceFeed from \"../contracts/frontend-interaction/priceFeed\";\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nimport senderc20 from \"../contracts/frontend-interaction/senderc20\";\n\nconst ENDPOINT = \"http://localhost:5000\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\nvar socket, selectedChatCompare;\n\nconst MultiSig = ({\n  fetchAgain,\n  setFetchAgain,\n  fetchMessages,\n  refAgain,\n  toClose,\n  Moralis,\n  sender_id,\n}) => {\n  const [messages, setMessages] = useState([]);\n  const [currency, setCurrency] = useState(\"\");\n  const [payment_type, setPaymentType] = useState(\"token\");\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n  const [chain, setChain] = useState(\"\");\n  const [token_address, setTokenAddress] = useState(\"\");\n  const [note, setNote] = useState(\"\");\n  const [owner_address, setOwner_address] = useState(\n    \"0x0C9d33186f7D87A94cBA10F3083BB208A49c1647\"\n  );\n  const [bal, setBal] = useState(\"\");\n  const [usd, setUsd] = useState(0);\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const sendMessage = async (event) => {\n    senderc20(\n      token_address,\n      sender_id,\n      newMessage,\n      \"0x0C9d33186f7D87A94cBA10F3083BB208A49c1647\",\n      note\n    );\n\n    //console.log(token_address+\" \"+sender_id+\" \"+newMessage);\n\n    if (newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        console.log(newMessage + \" \" + selectedChat);\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n            payment: true,\n            payment_mode: \"pay\",\n            chat_mode: \"private\",\n            payment_type: payment_type,\n            currency: currency,\n            receiver_id: sender_id,\n            note: note,\n            token_address: token_address,\n          },\n          config\n        );\n        console.log(data);\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n      refAgain();\n    }\n  };\n\n  const sendMessageReq = async (event) => {\n    if (newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        console.log(newMessage + \" \" + selectedChat);\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n            payment: true,\n            payment_mode: \"request\",\n            chat_mode: \"private\",\n            payment_type: payment_type,\n            currency: currency,\n            receiver_id: owner_address,\n            note: note,\n            token_address: token_address,\n          },\n          config\n        );\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n      refAgain();\n    }\n  };\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n    console.log(socket);\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const [options, setOptions] = useState([]);\n\n  useEffect(async () => {\n    const { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\n    const address = \"0xE7B0a0ca3443FF1C90E8f3d7fce8B58bd308ca5f\";\n\n    const chain = EvmChain.MUMBAI;\n\n    if (Moralis != undefined) {\n      const response = await Moralis.EvmApi.token.getWalletTokenBalances({\n        address,\n        chain,\n      });\n\n      console.log(response.toJSON());\n      setOptions(response.toJSON());\n    }\n  }, [Moralis]);\n\n  const options2 = options.map((d) => {\n    return (\n      <option\n        className=\"font1\"\n        value={\n          d.symbol + \"|\" + d.token_address + \"|\" + Math.pow(10, -18) * d.balance\n        }\n      >\n        {d.symbol}\n      </option>\n    );\n  });\n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  useEffect(async () => {\n    const result = await priceFeed();\n    setUsd(result);\n  }, []);\n\n  return (\n    <>\n      <Button\n        width=\"100%\"\n        height=\"100%\"\n        margin={\"0px\"}\n        padding=\"0px\"\n        className=\"font1\"\n        _focus={{ outline: \"none\" }}\n        _hover={{ transform: \"scale(1.09)\" }}\n        borderRadius={\"0px\"}\n      >\n        <p class=\"choice_label1 font2\" style={{fontSize:\"18px\",marginRight:\"5px\"}}>MULTI SIG</p>\n        <IconButton\n          d={{ base: \"flex\" }}\n          onClick={onOpen}\n          bg=\"linear-gradient(125deg,transparent,rgba(0,0,0,255)90%)\"\n          colorScheme=\"grey\"\n          color={\"white\"}\n          width=\"100%\"\n          height=\"100%\"\n          border={\"0px\"}\n          zIndex={\"500\"}\n          borderRadius={\"0px\"}\n        />\n        <img className={\"choice_img2\"} src={img}></img>\n      </Button>\n\n      \n    </>\n  );\n};\n\nexport default MultiSig;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}