{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EvmNftTransfer = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar EvmAddress_1 = require(\"../EvmAddress\");\nvar EvmChain_1 = require(\"../EvmChain\");\nvar EvmNative_1 = require(\"../EvmNative\");\n/**\n * The EvmNftTransfer is a representation of a completed NFT transfer.\n *\n * @category DataType\n */\nvar EvmNftTransfer = /** @class */function () {\n  function EvmNftTransfer(data, core) {\n    this._data = EvmNftTransfer.parse(data, core);\n  }\n  /**\n   * Create a new instance of EvmNftTransfer from any valid transfer input\n   * @param data - the EvmNftTransferish type\n   * @example\n   * ```\n   * const transfer = EvmNftTransfer.create(data);\n   *```\n   */\n  EvmNftTransfer.create = function (data, core) {\n    if (data instanceof EvmNftTransfer) {\n      return data;\n    }\n    var finalCore = core !== null && core !== void 0 ? core : common_core_1.CoreProvider.getDefault();\n    return new EvmNftTransfer(data, finalCore);\n  };\n  /**\n   * Check the equality between two NFT transfers. The compares the chain, blockHash, tokenId and logIndex.\n   * @param dataA - The first transfer to compare\n   * @param dataB - The second transfer to compare\n   * @example EvmNftTransfer.equals(dataA, dataB)\n   * @returns true if the transfers are equal, false otherwise\n   */\n  EvmNftTransfer.equals = function (dataA, dataB) {\n    var transferA = EvmNftTransfer.create(dataA);\n    var transferB = EvmNftTransfer.create(dataB);\n    if (!transferA.chain.equals(transferB.chain)) {\n      return false;\n    }\n    if (transferA.blockHash !== transferB.blockHash) {\n      return false;\n    }\n    if (transferA.tokenId !== transferB.tokenId) {\n      return false;\n    }\n    if (transferA.logIndex !== transferB.logIndex) {\n      return false;\n    }\n    return true;\n  };\n  /**\n   * Checks the equality of the current transfer instance with another nft transfer\n   * @param data - the transfer to compare with\n   * @example transaction.equals(data)\n   * @returns true if the transfers are equal, false otherwise\n   */\n  EvmNftTransfer.prototype.equals = function (data) {\n    return EvmNftTransfer.equals(this, data);\n  };\n  /**\n   * @returns a JSON represention of the transfer.\n   * @example\n   * ```\n   * transfer.toJSON()\n   * ```\n   */\n  EvmNftTransfer.prototype.toJSON = function () {\n    var data = this._data;\n    return __assign(__assign({}, data), {\n      chain: data.chain.format(),\n      fromAddress: data.fromAddress ? data.fromAddress.format() : undefined,\n      toAddress: data.toAddress.format(),\n      tokenAddress: data.tokenAddress.format(),\n      value: data.value ? data.value.format() : undefined,\n      operator: data.operator ? data.operator.format() : undefined,\n      blockNumber: data.blockNumber.toString()\n    });\n  };\n  /**\n   * @returns a JSON represention of the transfer.\n   * @example\n   * ```\n   * transfer.format()\n   * ```\n   */\n  EvmNftTransfer.prototype.format = function () {\n    return this.toJSON();\n  };\n  Object.defineProperty(EvmNftTransfer.prototype, \"result\", {\n    /**\n     * @returns all the data without casting it to JSON.\n     * @example transfer.result\n     */\n    get: function () {\n      return this._data;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTransfer.prototype, \"chain\", {\n    /**\n     * @returns the chain of the transfer.\n     * @example transfer.chain // EvmChain\n     */\n    get: function () {\n      return this._data.chain;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTransfer.prototype, \"blockHash\", {\n    /**\n     * @returns the block hash of the transfer.\n     * @example transfer.blockHash // \"0x057Ec652A4F150f7FF94f089A38008f49a0DF88e\"\n     */\n    get: function () {\n      return this._data.blockHash;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTransfer.prototype, \"blockNumber\", {\n    /**\n     * @returns the block number of the transfer.\n     * @example transfer.blockNumber // BigNumber\n     */\n    get: function () {\n      return this._data.blockNumber;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTransfer.prototype, \"blockTimestamp\", {\n    /**\n     * @returns the block timestamp of the transfer.\n     * @example transfer.blockTimestamp // Date\n     */\n    get: function () {\n      return this._data.blockTimestamp;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTransfer.prototype, \"fromAddress\", {\n    /**\n     * @returns the from address of the transfer.\n     * @example transfer.fromAddress // EvmAddress\n     */\n    get: function () {\n      return this._data.fromAddress;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTransfer.prototype, \"toAddress\", {\n    /**\n     * @returns the to address of the transfer.\n     * @example transfer.toAddress // EvmAddress\n     */\n    get: function () {\n      return this._data.toAddress;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTransfer.prototype, \"tokenAddress\", {\n    /**\n     * @returns the token address of the transfer.\n     * @example transfer.tokenAddress // EvmAddress\n     */\n    get: function () {\n      return this._data.tokenAddress;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTransfer.prototype, \"tokenId\", {\n    /**\n     * @returns the token id of the transfer.\n     * @example transfer.tokenId // \"15\"\n     */\n    get: function () {\n      return this._data.tokenId;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTransfer.prototype, \"amount\", {\n    /**\n     * @returns the amount of the transfer.\n     * @example transfer.amount // 1\n     */\n    get: function () {\n      return this._data.amount;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTransfer.prototype, \"value\", {\n    /**\n     * @returns the value of the transfer.\n     * @example transfer.value // EvmNative\n     */\n    get: function () {\n      return this._data.value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTransfer.prototype, \"logIndex\", {\n    /**\n     * @returns the log index of the transfer.\n     * @example transfer.logIndex // 0\n     */\n    get: function () {\n      return this._data.logIndex;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTransfer.prototype, \"transactionHash\", {\n    /**\n     * @returns the transaction hash of the transfer.\n     * @example transfer.transactionHash // \"0x057Ec652A4F150f7FF94f089A38008f49a0DF88e\"\n     */\n    get: function () {\n      return this._data.transactionHash;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTransfer.prototype, \"transactionIndex\", {\n    /**\n     * @returns the transaction index of the transfer.\n     * @example transfer.transactionIndex // 123\n     */\n    get: function () {\n      return this._data.transactionIndex;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTransfer.prototype, \"transactionType\", {\n    /**\n     * @returns the transaction type of the transfer.\n     * @example transfer.transactionType // \"1\"\n     */\n    get: function () {\n      return this._data.transactionType;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTransfer.prototype, \"operator\", {\n    /**\n     * @returns the operator of the transfer.\n     * @example transfer.operator // EvmAddress\n     */\n    get: function () {\n      return this._data.operator;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTransfer.prototype, \"contractType\", {\n    /**\n     * @returns the contract type of the transfer.\n     * @example transfer.contractType // \"ERC721\"\n     */\n    get: function () {\n      return this._data.contractType;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  EvmNftTransfer.parse = function (data, core) {\n    return __assign(__assign({}, data), {\n      chain: EvmChain_1.EvmChain.create(data.chain, core),\n      amount: (0, common_core_1.maybe)(data.amount, function (amount) {\n        return +amount;\n      }),\n      blockNumber: common_core_1.BigNumber.create(data.blockNumber),\n      blockTimestamp: (0, common_core_1.dateInputToDate)(data.blockTimestamp),\n      transactionIndex: (0, common_core_1.maybe)(data.transactionIndex, function (index) {\n        return +index;\n      }),\n      transactionType: (0, common_core_1.maybe)(data.transactionType),\n      fromAddress: (0, common_core_1.maybe)(data.fromAddress, function (address) {\n        return EvmAddress_1.EvmAddress.create(address, core);\n      }),\n      toAddress: EvmAddress_1.EvmAddress.create(data.toAddress, core),\n      tokenAddress: EvmAddress_1.EvmAddress.create(data.tokenAddress, core),\n      value: (0, common_core_1.maybe)(data.value, EvmNative_1.EvmNative.create),\n      operator: (0, common_core_1.maybe)(data.operator, function (operator) {\n        return EvmAddress_1.EvmAddress.create(operator, core);\n      }),\n      logIndex: +data.logIndex\n    });\n  };\n  return EvmNftTransfer;\n}();\nexports.EvmNftTransfer = EvmNftTransfer;","map":{"version":3,"sources":["../../../src/dataTypes/EvmNftTransfer/EvmNftTransfer.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EvmNftTransfer = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar EvmAddress_1 = require(\"../EvmAddress\");\nvar EvmChain_1 = require(\"../EvmChain\");\nvar EvmNative_1 = require(\"../EvmNative\");\n/**\n * The EvmNftTransfer is a representation of a completed NFT transfer.\n *\n * @category DataType\n */\nvar EvmNftTransfer = /** @class */ (function () {\n    function EvmNftTransfer(data, core) {\n        this._data = EvmNftTransfer.parse(data, core);\n    }\n    /**\n     * Create a new instance of EvmNftTransfer from any valid transfer input\n     * @param data - the EvmNftTransferish type\n     * @example\n     * ```\n     * const transfer = EvmNftTransfer.create(data);\n     *```\n     */\n    EvmNftTransfer.create = function (data, core) {\n        if (data instanceof EvmNftTransfer) {\n            return data;\n        }\n        var finalCore = core !== null && core !== void 0 ? core : common_core_1.CoreProvider.getDefault();\n        return new EvmNftTransfer(data, finalCore);\n    };\n    /**\n     * Check the equality between two NFT transfers. The compares the chain, blockHash, tokenId and logIndex.\n     * @param dataA - The first transfer to compare\n     * @param dataB - The second transfer to compare\n     * @example EvmNftTransfer.equals(dataA, dataB)\n     * @returns true if the transfers are equal, false otherwise\n     */\n    EvmNftTransfer.equals = function (dataA, dataB) {\n        var transferA = EvmNftTransfer.create(dataA);\n        var transferB = EvmNftTransfer.create(dataB);\n        if (!transferA.chain.equals(transferB.chain)) {\n            return false;\n        }\n        if (transferA.blockHash !== transferB.blockHash) {\n            return false;\n        }\n        if (transferA.tokenId !== transferB.tokenId) {\n            return false;\n        }\n        if (transferA.logIndex !== transferB.logIndex) {\n            return false;\n        }\n        return true;\n    };\n    /**\n     * Checks the equality of the current transfer instance with another nft transfer\n     * @param data - the transfer to compare with\n     * @example transaction.equals(data)\n     * @returns true if the transfers are equal, false otherwise\n     */\n    EvmNftTransfer.prototype.equals = function (data) {\n        return EvmNftTransfer.equals(this, data);\n    };\n    /**\n     * @returns a JSON represention of the transfer.\n     * @example\n     * ```\n     * transfer.toJSON()\n     * ```\n     */\n    EvmNftTransfer.prototype.toJSON = function () {\n        var data = this._data;\n        return __assign(__assign({}, data), { chain: data.chain.format(), fromAddress: data.fromAddress ? data.fromAddress.format() : undefined, toAddress: data.toAddress.format(), tokenAddress: data.tokenAddress.format(), value: data.value ? data.value.format() : undefined, operator: data.operator ? data.operator.format() : undefined, blockNumber: data.blockNumber.toString() });\n    };\n    /**\n     * @returns a JSON represention of the transfer.\n     * @example\n     * ```\n     * transfer.format()\n     * ```\n     */\n    EvmNftTransfer.prototype.format = function () {\n        return this.toJSON();\n    };\n    Object.defineProperty(EvmNftTransfer.prototype, \"result\", {\n        /**\n         * @returns all the data without casting it to JSON.\n         * @example transfer.result\n         */\n        get: function () {\n            return this._data;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNftTransfer.prototype, \"chain\", {\n        /**\n         * @returns the chain of the transfer.\n         * @example transfer.chain // EvmChain\n         */\n        get: function () {\n            return this._data.chain;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNftTransfer.prototype, \"blockHash\", {\n        /**\n         * @returns the block hash of the transfer.\n         * @example transfer.blockHash // \"0x057Ec652A4F150f7FF94f089A38008f49a0DF88e\"\n         */\n        get: function () {\n            return this._data.blockHash;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNftTransfer.prototype, \"blockNumber\", {\n        /**\n         * @returns the block number of the transfer.\n         * @example transfer.blockNumber // BigNumber\n         */\n        get: function () {\n            return this._data.blockNumber;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNftTransfer.prototype, \"blockTimestamp\", {\n        /**\n         * @returns the block timestamp of the transfer.\n         * @example transfer.blockTimestamp // Date\n         */\n        get: function () {\n            return this._data.blockTimestamp;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNftTransfer.prototype, \"fromAddress\", {\n        /**\n         * @returns the from address of the transfer.\n         * @example transfer.fromAddress // EvmAddress\n         */\n        get: function () {\n            return this._data.fromAddress;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNftTransfer.prototype, \"toAddress\", {\n        /**\n         * @returns the to address of the transfer.\n         * @example transfer.toAddress // EvmAddress\n         */\n        get: function () {\n            return this._data.toAddress;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNftTransfer.prototype, \"tokenAddress\", {\n        /**\n         * @returns the token address of the transfer.\n         * @example transfer.tokenAddress // EvmAddress\n         */\n        get: function () {\n            return this._data.tokenAddress;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNftTransfer.prototype, \"tokenId\", {\n        /**\n         * @returns the token id of the transfer.\n         * @example transfer.tokenId // \"15\"\n         */\n        get: function () {\n            return this._data.tokenId;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNftTransfer.prototype, \"amount\", {\n        /**\n         * @returns the amount of the transfer.\n         * @example transfer.amount // 1\n         */\n        get: function () {\n            return this._data.amount;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNftTransfer.prototype, \"value\", {\n        /**\n         * @returns the value of the transfer.\n         * @example transfer.value // EvmNative\n         */\n        get: function () {\n            return this._data.value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNftTransfer.prototype, \"logIndex\", {\n        /**\n         * @returns the log index of the transfer.\n         * @example transfer.logIndex // 0\n         */\n        get: function () {\n            return this._data.logIndex;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNftTransfer.prototype, \"transactionHash\", {\n        /**\n         * @returns the transaction hash of the transfer.\n         * @example transfer.transactionHash // \"0x057Ec652A4F150f7FF94f089A38008f49a0DF88e\"\n         */\n        get: function () {\n            return this._data.transactionHash;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNftTransfer.prototype, \"transactionIndex\", {\n        /**\n         * @returns the transaction index of the transfer.\n         * @example transfer.transactionIndex // 123\n         */\n        get: function () {\n            return this._data.transactionIndex;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNftTransfer.prototype, \"transactionType\", {\n        /**\n         * @returns the transaction type of the transfer.\n         * @example transfer.transactionType // \"1\"\n         */\n        get: function () {\n            return this._data.transactionType;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNftTransfer.prototype, \"operator\", {\n        /**\n         * @returns the operator of the transfer.\n         * @example transfer.operator // EvmAddress\n         */\n        get: function () {\n            return this._data.operator;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EvmNftTransfer.prototype, \"contractType\", {\n        /**\n         * @returns the contract type of the transfer.\n         * @example transfer.contractType // \"ERC721\"\n         */\n        get: function () {\n            return this._data.contractType;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    EvmNftTransfer.parse = function (data, core) { return (__assign(__assign({}, data), { chain: EvmChain_1.EvmChain.create(data.chain, core), amount: (0, common_core_1.maybe)(data.amount, function (amount) { return +amount; }), blockNumber: common_core_1.BigNumber.create(data.blockNumber), blockTimestamp: (0, common_core_1.dateInputToDate)(data.blockTimestamp), transactionIndex: (0, common_core_1.maybe)(data.transactionIndex, function (index) { return +index; }), transactionType: (0, common_core_1.maybe)(data.transactionType), fromAddress: (0, common_core_1.maybe)(data.fromAddress, function (address) { return EvmAddress_1.EvmAddress.create(address, core); }), toAddress: EvmAddress_1.EvmAddress.create(data.toAddress, core), tokenAddress: EvmAddress_1.EvmAddress.create(data.tokenAddress, core), value: (0, common_core_1.maybe)(data.value, EvmNative_1.EvmNative.create), operator: (0, common_core_1.maybe)(data.operator, function (operator) { return EvmAddress_1.EvmAddress.create(operator, core); }), logIndex: +data.logIndex })); };\n    return EvmNftTransfer;\n}());\nexports.EvmNftTransfer = EvmNftTransfer;\n//# sourceMappingURL=EvmNftTransfer.js.map"]},"metadata":{},"sourceType":"script"}