{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTokenMetadataOperation = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar dataTypes_1 = require(\"../../dataTypes\");\nvar EvmChainResolver_1 = require(\"../../EvmChainResolver\");\n/** Get the metadata for a given token contract address (name, symbol, decimals, logo). */\nexports.getTokenMetadataOperation = {\n  method: 'GET',\n  name: 'getTokenMetadata',\n  id: 'getTokenMetadata',\n  groupName: 'token',\n  urlPathPattern: '/erc20/metadata',\n  urlSearchParamNames: ['chain', 'addresses'],\n  getRequestUrlParams: getRequestUrlParams,\n  serializeRequest: serializeRequest,\n  deserializeRequest: deserializeRequest,\n  deserializeResponse: deserializeResponse\n};\n// Methods\nfunction getRequestUrlParams(request, core) {\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n    addresses: request.addresses.map(function (address) {\n      return dataTypes_1.EvmAddress.create(address, core).lowercase;\n    })\n  };\n}\nfunction deserializeResponse(jsonResponse, request, core) {\n  return (jsonResponse !== null && jsonResponse !== void 0 ? jsonResponse : []).map(function (token) {\n    return {\n      token: dataTypes_1.Erc20Token.create(__assign(__assign({}, (0, common_core_1.toCamelCase)(token)), {\n        contractAddress: token.address,\n        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core)\n      }), core),\n      blockNumber: token.block_number,\n      validated: token.validated\n    };\n  });\n}\nfunction serializeRequest(request, core) {\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n    addresses: request.addresses.map(function (address) {\n      return dataTypes_1.EvmAddress.create(address, core).checksum;\n    })\n  };\n}\nfunction deserializeRequest(jsonRequest, core) {\n  return {\n    chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),\n    addresses: jsonRequest.addresses.map(function (address) {\n      return dataTypes_1.EvmAddress.create(address, core);\n    })\n  };\n}","map":{"version":3,"sources":["../../../src/operations/token/getTokenMetadataOperation.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,IAAA,aAAA,GAAA,OAAA,CAAA,0BAAA,CAAA;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;AACA,IAAA,kBAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;AA0BA;AACa,OAAA,CAAA,yBAAyB,GAKlC;EACF,MAAM,EAAE,KAAK;EACb,IAAI,EAAE,kBAAkB;EACxB,EAAE,EAAE,kBAAkB;EACtB,SAAS,EAAE,OAAO;EAClB,cAAc,EAAE,iBAAiB;EACjC,mBAAmB,EAAE,CAAC,OAAO,EAAE,WAAW,CAAC;EAE3C,mBAAmB,EAAA,mBAAA;EACnB,gBAAgB,EAAA,gBAAA;EAChB,kBAAkB,EAAA,kBAAA;EAClB,mBAAmB,EAAA;CACpB;AAED;AAEA,SAAS,mBAAmB,CAAC,OAAgC,EAAE,IAAU,EAAA;EACvE,OAAO;IACL,KAAK,EAAE,kBAAA,CAAA,gBAAgB,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,MAAM;IAC3D,SAAS,EAAE,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,UAAC,OAAO,EAAA;MAAK,OAAA,WAAA,CAAA,UAAU,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,SAAS;IAA1C,CAA0C;GACzF;AACH;AAEA,SAAS,mBAAmB,CAAC,YAA0C,EAAE,OAAgC,EAAE,IAAU,EAAA;EACnH,OAAO,CAAC,YAAY,KAAA,IAAA,IAAZ,YAAY,KAAA,KAAA,CAAA,GAAZ,YAAY,GAAI,EAAE,EAAE,GAAG,CAAC,UAAC,KAAK,EAAA;IACpC,OAAO;MACL,KAAK,EAAE,WAAA,CAAA,UAAU,CAAC,MAAM,CAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EAEjB,CAAA,CAAA,EAAA,aAAA,CAAA,WAAW,EAAC,KAAK,CAAC,CAAA,EAAA;QACrB,eAAe,EAAE,KAAK,CAAC,OAAO;QAC9B,KAAK,EAAE,kBAAA,CAAA,gBAAgB,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI;MAAC,CAAA,CAAA,EAEtD,IAAI,CACL;MACD,WAAW,EAAE,KAAK,CAAC,YAAY;MAC/B,SAAS,EAAE,KAAK,CAAC;KAClB;EACH,CAAC,CAAC;AACJ;AAEA,SAAS,gBAAgB,CAAC,OAAgC,EAAE,IAAU,EAAA;EACpE,OAAO;IACL,KAAK,EAAE,kBAAA,CAAA,gBAAgB,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,MAAM;IAC3D,SAAS,EAAE,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,UAAC,OAAO,EAAA;MAAK,OAAA,WAAA,CAAA,UAAU,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,QAAQ;IAAzC,CAAyC;GACxF;AACH;AAEA,SAAS,kBAAkB,CAAC,WAAwC,EAAE,IAAU,EAAA;EAC9E,OAAO;IACL,KAAK,EAAE,WAAA,CAAA,QAAQ,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,EAAE,IAAI,CAAC;IAC/C,SAAS,EAAE,WAAW,CAAC,SAAS,CAAC,GAAG,CAAC,UAAC,OAAO,EAAA;MAAK,OAAA,WAAA,CAAA,UAAU,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC;IAAhC,CAAgC;GACnF;AACH","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getTokenMetadataOperation = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar dataTypes_1 = require(\"../../dataTypes\");\nvar EvmChainResolver_1 = require(\"../../EvmChainResolver\");\n/** Get the metadata for a given token contract address (name, symbol, decimals, logo). */\nexports.getTokenMetadataOperation = {\n    method: 'GET',\n    name: 'getTokenMetadata',\n    id: 'getTokenMetadata',\n    groupName: 'token',\n    urlPathPattern: '/erc20/metadata',\n    urlSearchParamNames: ['chain', 'addresses'],\n    getRequestUrlParams: getRequestUrlParams,\n    serializeRequest: serializeRequest,\n    deserializeRequest: deserializeRequest,\n    deserializeResponse: deserializeResponse,\n};\n// Methods\nfunction getRequestUrlParams(request, core) {\n    return {\n        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n        addresses: request.addresses.map(function (address) { return dataTypes_1.EvmAddress.create(address, core).lowercase; }),\n    };\n}\nfunction deserializeResponse(jsonResponse, request, core) {\n    return (jsonResponse !== null && jsonResponse !== void 0 ? jsonResponse : []).map(function (token) {\n        return {\n            token: dataTypes_1.Erc20Token.create(__assign(__assign({}, (0, common_core_1.toCamelCase)(token)), { contractAddress: token.address, chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core) }), core),\n            blockNumber: token.block_number,\n            validated: token.validated,\n        };\n    });\n}\nfunction serializeRequest(request, core) {\n    return {\n        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n        addresses: request.addresses.map(function (address) { return dataTypes_1.EvmAddress.create(address, core).checksum; }),\n    };\n}\nfunction deserializeRequest(jsonRequest, core) {\n    return {\n        chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),\n        addresses: jsonRequest.addresses.map(function (address) { return dataTypes_1.EvmAddress.create(address, core); }),\n    };\n}\n//# sourceMappingURL=getTokenMetadataOperation.js.map"]},"metadata":{},"sourceType":"script"}