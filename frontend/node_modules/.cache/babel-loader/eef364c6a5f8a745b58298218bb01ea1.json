{"ast":null,"code":"\"use strict\";\n\n/**\n * Copied (and remove obsolete functionalities) from https://github.com/aptos-labs/aptos-core/blob/main/ecosystem/typescript/sdk/src/hex_string.ts because\n * - We only care about address validation and conversion, this is a dependency for AccountAddress\n * - Resolving this dependency in UMD gives dependency errors\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HexString = void 0;\nvar utils_1 = require(\"@noble/hashes/utils\");\n/**\n * A util class for working with hex strings.\n * Hex strings are strings that are prefixed with `0x`\n */\nvar HexString = /** @class */function () {\n  /**\n   * Creates new HexString instance from regular string. If specified string already starts with \"0x\" prefix,\n   * it will not add another one\n   * @param hexString String to convert\n   * @example\n   * ```\n   *  const string = \"string\";\n   *  new HexString(string); // \"0xstring\"\n   * ```\n   */\n  function HexString(hexString) {\n    if (hexString.startsWith('0x')) {\n      this.hexString = hexString;\n    } else {\n      this.hexString = \"0x\".concat(hexString);\n    }\n  }\n  /**\n   * Creates new hex string from Buffer\n   * @param buffer A buffer to convert\n   * @returns New HexString\n   */\n  HexString.fromBuffer = function (buffer) {\n    return HexString.fromUint8Array(buffer);\n  };\n  /**\n   * Creates new hex string from Uint8Array\n   * @param arr Uint8Array to convert\n   * @returns New HexString\n   */\n  HexString.fromUint8Array = function (arr) {\n    return new HexString((0, utils_1.bytesToHex)(arr));\n  };\n  /**\n   * Ensures `hexString` is instance of `HexString` class\n   * @param hexString String to check\n   * @returns New HexString if `hexString` is regular string or `hexString` if it is HexString instance\n   * @example\n   * ```\n   *  const regularString = \"string\";\n   *  const hexString = new HexString(\"string\"); // \"0xstring\"\n   *  HexString.ensure(regularString); // \"0xstring\"\n   *  HexString.ensure(hexString); // \"0xstring\"\n   * ```\n   */\n  HexString.ensure = function (hexString) {\n    if (typeof hexString === 'string') {\n      return new HexString(hexString);\n    }\n    return hexString;\n  };\n  /**\n   * Getter for inner hexString\n   * @returns Inner hex string\n   */\n  HexString.prototype.hex = function () {\n    return this.hexString;\n  };\n  /**\n   * Getter for inner hexString without prefix\n   * @returns Inner hex string without prefix\n   * @example\n   * ```\n   *  const hexString = new HexString(\"string\"); // \"0xstring\"\n   *  hexString.noPrefix(); // \"string\"\n   * ```\n   */\n  HexString.prototype.noPrefix = function () {\n    return this.hexString.slice(2);\n  };\n  /**\n   * Overrides default `toString` method\n   * @returns Inner hex string\n   */\n  HexString.prototype.toString = function () {\n    return this.hex();\n  };\n  /**\n   * Trimmes extra zeroes in the begining of a string\n   * @returns Inner hexString without leading zeroes\n   * @example\n   * ```\n   *  new HexString(\"0x000000string\").toShortString(); // result = \"0xstring\"\n   * ```\n   */\n  HexString.prototype.toShortString = function () {\n    var trimmed = this.hexString.replace(/^0x0*/, '');\n    return \"0x\".concat(trimmed);\n  };\n  /**\n   * Converts hex string to a Uint8Array\n   * @returns Uint8Array from inner hexString without prefix\n   */\n  HexString.prototype.toUint8Array = function () {\n    return Uint8Array.from((0, utils_1.hexToBytes)(this.noPrefix()));\n  };\n  return HexString;\n}();\nexports.HexString = HexString;","map":{"version":3,"sources":["../../src/utils/HexString.ts"],"names":[],"mappings":";;AAAA;;;;AAIG;;;;;AAEH,IAAA,OAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;AAKA;;;AAGG;AACH,IAAA,SAAA,GAAA,aAAA,YAAA;EAyCE;;;;;;;;;AASG;EACH,SAAA,SAAA,CAAY,SAAiB,EAAA;IAC3B,IAAI,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;MAC9B,IAAI,CAAC,SAAS,GAAG,SAAS;KAC3B,MAAM;MACL,IAAI,CAAC,SAAS,GAAG,IAAA,CAAA,MAAA,CAAK,SAAS,CAAE;IAClC;EACH;EArDA;;;;AAIG;EACI,SAAA,CAAA,UAAU,GAAjB,UAAkB,MAAkB,EAAA;IAClC,OAAO,SAAS,CAAC,cAAc,CAAC,MAAM,CAAC;EACzC,CAAC;EAED;;;;AAIG;EACI,SAAA,CAAA,cAAc,GAArB,UAAsB,GAAe,EAAA;IACnC,OAAO,IAAI,SAAS,CAAC,CAAA,CAAA,EAAA,OAAA,CAAA,UAAU,EAAC,GAAG,CAAC,CAAC;EACvC,CAAC;EAED;;;;;;;;;;;AAWG;EACI,SAAA,CAAA,MAAM,GAAb,UAAc,SAAyB,EAAA;IACrC,IAAI,OAAO,SAAS,KAAK,QAAQ,EAAE;MACjC,OAAO,IAAI,SAAS,CAAC,SAAS,CAAC;IAChC;IACD,OAAO,SAAS;EAClB,CAAC;EAoBD;;;AAGG;EACH,SAAA,CAAA,SAAA,CAAA,GAAG,GAAH,YAAA;IACE,OAAO,IAAI,CAAC,SAAS;EACvB,CAAC;EAED;;;;;;;;AAQG;EACH,SAAA,CAAA,SAAA,CAAA,QAAQ,GAAR,YAAA;IACE,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;EAChC,CAAC;EAED;;;AAGG;EACH,SAAA,CAAA,SAAA,CAAA,QAAQ,GAAR,YAAA;IACE,OAAO,IAAI,CAAC,GAAG,EAAE;EACnB,CAAC;EAED;;;;;;;AAOG;EACH,SAAA,CAAA,SAAA,CAAA,aAAa,GAAb,YAAA;IACE,IAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC;IACnD,OAAO,IAAA,CAAA,MAAA,CAAK,OAAO,CAAE;EACvB,CAAC;EAED;;;AAGG;EACH,SAAA,CAAA,SAAA,CAAA,YAAY,GAAZ,YAAA;IACE,OAAO,UAAU,CAAC,IAAI,CAAC,CAAA,CAAA,EAAA,OAAA,CAAA,UAAU,EAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;EACrD,CAAC;EACH,OAAA,SAAC;AAAD,CAAC,EAAA;AA5GY,OAAA,CAAA,SAAA,GAAA,SAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * Copied (and remove obsolete functionalities) from https://github.com/aptos-labs/aptos-core/blob/main/ecosystem/typescript/sdk/src/hex_string.ts because\n * - We only care about address validation and conversion, this is a dependency for AccountAddress\n * - Resolving this dependency in UMD gives dependency errors\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HexString = void 0;\nvar utils_1 = require(\"@noble/hashes/utils\");\n/**\n * A util class for working with hex strings.\n * Hex strings are strings that are prefixed with `0x`\n */\nvar HexString = /** @class */ (function () {\n    /**\n     * Creates new HexString instance from regular string. If specified string already starts with \"0x\" prefix,\n     * it will not add another one\n     * @param hexString String to convert\n     * @example\n     * ```\n     *  const string = \"string\";\n     *  new HexString(string); // \"0xstring\"\n     * ```\n     */\n    function HexString(hexString) {\n        if (hexString.startsWith('0x')) {\n            this.hexString = hexString;\n        }\n        else {\n            this.hexString = \"0x\".concat(hexString);\n        }\n    }\n    /**\n     * Creates new hex string from Buffer\n     * @param buffer A buffer to convert\n     * @returns New HexString\n     */\n    HexString.fromBuffer = function (buffer) {\n        return HexString.fromUint8Array(buffer);\n    };\n    /**\n     * Creates new hex string from Uint8Array\n     * @param arr Uint8Array to convert\n     * @returns New HexString\n     */\n    HexString.fromUint8Array = function (arr) {\n        return new HexString((0, utils_1.bytesToHex)(arr));\n    };\n    /**\n     * Ensures `hexString` is instance of `HexString` class\n     * @param hexString String to check\n     * @returns New HexString if `hexString` is regular string or `hexString` if it is HexString instance\n     * @example\n     * ```\n     *  const regularString = \"string\";\n     *  const hexString = new HexString(\"string\"); // \"0xstring\"\n     *  HexString.ensure(regularString); // \"0xstring\"\n     *  HexString.ensure(hexString); // \"0xstring\"\n     * ```\n     */\n    HexString.ensure = function (hexString) {\n        if (typeof hexString === 'string') {\n            return new HexString(hexString);\n        }\n        return hexString;\n    };\n    /**\n     * Getter for inner hexString\n     * @returns Inner hex string\n     */\n    HexString.prototype.hex = function () {\n        return this.hexString;\n    };\n    /**\n     * Getter for inner hexString without prefix\n     * @returns Inner hex string without prefix\n     * @example\n     * ```\n     *  const hexString = new HexString(\"string\"); // \"0xstring\"\n     *  hexString.noPrefix(); // \"string\"\n     * ```\n     */\n    HexString.prototype.noPrefix = function () {\n        return this.hexString.slice(2);\n    };\n    /**\n     * Overrides default `toString` method\n     * @returns Inner hex string\n     */\n    HexString.prototype.toString = function () {\n        return this.hex();\n    };\n    /**\n     * Trimmes extra zeroes in the begining of a string\n     * @returns Inner hexString without leading zeroes\n     * @example\n     * ```\n     *  new HexString(\"0x000000string\").toShortString(); // result = \"0xstring\"\n     * ```\n     */\n    HexString.prototype.toShortString = function () {\n        var trimmed = this.hexString.replace(/^0x0*/, '');\n        return \"0x\".concat(trimmed);\n    };\n    /**\n     * Converts hex string to a Uint8Array\n     * @returns Uint8Array from inner hexString without prefix\n     */\n    HexString.prototype.toUint8Array = function () {\n        return Uint8Array.from((0, utils_1.hexToBytes)(this.noPrefix()));\n    };\n    return HexString;\n}());\nexports.HexString = HexString;\n//# sourceMappingURL=HexString.js.map"]},"metadata":{},"sourceType":"script"}