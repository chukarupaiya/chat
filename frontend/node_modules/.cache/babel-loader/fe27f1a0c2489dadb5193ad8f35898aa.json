{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseLog = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar logDecoderUtils_1 = require(\"../utils/logDecoderUtils\");\nvar mapping_1 = require(\"../mapping\");\nvar parseLog = function (webhookData) {\n  if (!(0, logDecoderUtils_1.isWebhook)(webhookData)) {\n    throw new common_core_1.MoralisStreamError({\n      code: common_core_1.StreamErrorCode.GENERIC_STREAM_ERROR,\n      message: 'Cannot decode the logs. No logs found in the webhook, or invalid webhook provided.'\n    });\n  }\n  if (!(0, logDecoderUtils_1.hasAbis)(webhookData)) {\n    throw new common_core_1.MoralisStreamError({\n      code: common_core_1.StreamErrorCode.GENERIC_STREAM_ERROR,\n      message: 'Cannot decode the logs. No abis found in the provided webhook.'\n    });\n  }\n  var logs = webhookData.logs,\n    abi = webhookData.abi;\n  var decodedLogs = [];\n  logs.forEach(function (currentLog) {\n    var params = new mapping_1.LogParser(abi).read(currentLog).params;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    var decodedLog = {};\n    for (var key in params) {\n      if (Object.prototype.hasOwnProperty.call(params, key)) {\n        var element = params[key];\n        decodedLog[key] = element.value;\n      }\n    }\n    decodedLogs.push(decodedLog);\n  });\n  return decodedLogs;\n};\nexports.parseLog = parseLog;","map":{"version":3,"sources":["../../src/methods/logParser.ts"],"names":[],"mappings":";;;;;;AAAA,IAAA,aAAA,GAAA,OAAA,CAAA,0BAAA,CAAA;AAEA,IAAA,iBAAA,GAAA,OAAA,CAAA,0BAAA,CAAA;AACA,IAAA,SAAA,GAAA,OAAA,CAAA,YAAA,CAAA;AAEO,IAAM,QAAQ,GAAG,UAAQ,WAAqB,EAAA;EACnD,IAAI,CAAC,CAAA,CAAA,EAAA,iBAAA,CAAA,SAAS,EAAC,WAAW,CAAC,EAAE;IAC3B,MAAM,IAAI,aAAA,CAAA,kBAAkB,CAAC;MAC3B,IAAI,EAAE,aAAA,CAAA,eAAe,CAAC,oBAAoB;MAC1C,OAAO,EAAE;KACV,CAAC;EACH;EAED,IAAI,CAAC,CAAA,CAAA,EAAA,iBAAA,CAAA,OAAO,EAAC,WAAW,CAAC,EAAE;IACzB,MAAM,IAAI,aAAA,CAAA,kBAAkB,CAAC;MAC3B,IAAI,EAAE,aAAA,CAAA,eAAe,CAAC,oBAAoB;MAC1C,OAAO,EAAE;KACV,CAAC;EACH;EAEO,IAAA,IAAI,GAAU,WAAW,CAAA,IAArB;IAAE,GAAG,GAAK,WAAW,CAAA,GAAhB;EAEjB,IAAM,WAAW,GAAY,EAAE;EAE/B,IAAI,CAAC,OAAO,CAAC,UAAC,UAAU,EAAA;IACd,IAAA,MAAM,GAAK,IAAI,SAAA,CAAA,SAAS,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA,MAAxC;IACd;IACA,IAAM,UAAU,GAAQ,CAAA,CAAE;IAC1B,KAAK,IAAM,GAAG,IAAI,MAAM,EAAE;MACxB,IAAI,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,EAAE;QACrD,IAAM,OAAO,GAAG,MAAM,CAAC,GAAG,CAAC;QAC3B,UAAU,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,KAAK;MAChC;IACF;IACD,WAAW,CAAC,IAAI,CAAC,UAAmB,CAAC;EACvC,CAAC,CAAC;EAEF,OAAO,WAAW;AACpB,CAAC;AAjCY,OAAA,CAAA,QAAQ,GAAA,QAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseLog = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar logDecoderUtils_1 = require(\"../utils/logDecoderUtils\");\nvar mapping_1 = require(\"../mapping\");\nvar parseLog = function (webhookData) {\n    if (!(0, logDecoderUtils_1.isWebhook)(webhookData)) {\n        throw new common_core_1.MoralisStreamError({\n            code: common_core_1.StreamErrorCode.GENERIC_STREAM_ERROR,\n            message: 'Cannot decode the logs. No logs found in the webhook, or invalid webhook provided.',\n        });\n    }\n    if (!(0, logDecoderUtils_1.hasAbis)(webhookData)) {\n        throw new common_core_1.MoralisStreamError({\n            code: common_core_1.StreamErrorCode.GENERIC_STREAM_ERROR,\n            message: 'Cannot decode the logs. No abis found in the provided webhook.',\n        });\n    }\n    var logs = webhookData.logs, abi = webhookData.abi;\n    var decodedLogs = [];\n    logs.forEach(function (currentLog) {\n        var params = new mapping_1.LogParser(abi).read(currentLog).params;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var decodedLog = {};\n        for (var key in params) {\n            if (Object.prototype.hasOwnProperty.call(params, key)) {\n                var element = params[key];\n                decodedLog[key] = element.value;\n            }\n        }\n        decodedLogs.push(decodedLog);\n    });\n    return decodedLogs;\n};\nexports.parseLog = parseLog;\n//# sourceMappingURL=logParser.js.map"]},"metadata":{},"sourceType":"script"}