{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Modules = void 0;\nvar utils_1 = require(\"./utils\");\nvar Error_1 = require(\"../Error\");\n/**\n * MoralisModues handles all registered modules.\n * Any package that is used in Moralis, should register itself via this class.\n * This allows cross-communication between modules and easy management of the modules\n *\n * This class is responsible for:\n * - registering new modules\n * - removing modules (in theory possible for exotic usecases, but might break the app if done after initialisation)\n * - getting individual modules by name, type or everything\n */\nvar Modules = /** @class */function () {\n  function Modules() {\n    this.modules = new Map();\n  }\n  /**\n   * Register and setup a new module by providing a module that is extended from BaseClass.\n   * This will throw an error if the name is not unique\n   * @param module the module that needs to be registered\n   */\n  Modules.prototype.register = function (module) {\n    if (this.modules.has(module.name)) {\n      throw new Error_1.CoreError({\n        code: Error_1.CoreErrorCode.DUPLICATE_MODULE,\n        message: \"The module \\\"\".concat(module.name, \"\\\" has already been registered.\")\n      });\n    }\n    this.modules.set(module.name, module);\n    module.setup();\n  };\n  /**\n   * Returns the module with the given name.\n   * This module should have been registered with `register`\n   * @param name the module name\n   * @returns a valid BaseModule\n   * @throws a CoreError if no module with the given name has been registered\n   */\n  Modules.prototype.get = function (name) {\n    var module = this.modules.get(name);\n    if (!module) {\n      throw new Error_1.CoreError({\n        code: Error_1.CoreErrorCode.MODULE_NOT_FOUND,\n        message: \"Module \\\"\".concat(name, \"\\\" does not exist.\")\n      });\n    }\n    return module;\n  };\n  /**\n   * Tries to return the module with the given name if exist. Otherwise returns null.\n   * @param name the module name\n   * @returns a valid BaseModule or null\n   */\n  Modules.prototype.tryGet = function (name) {\n    return this.modules.get(name) || null;\n  };\n  Modules.prototype.has = function (name) {\n    return this.modules.has(name);\n  };\n  /**\n   * Returns the network module with the provided name.\n   * @param name the module name\n   * @returns a valid ApiModule\n   * @throws a CoreError if no network module with the given name has been registered\n   */\n  Modules.prototype.getApi = function (name) {\n    var module = this.modules.get(name);\n    if (!module || !(0, utils_1.isApiModule)(module)) {\n      throw new Error_1.CoreError({\n        code: Error_1.CoreErrorCode.MODULE_NOT_FOUND,\n        message: \"No ApiModule found with the name \\\"\".concat(name, \"\\\"\")\n      });\n    }\n    return module;\n  };\n  /**\n   * Remove the module with the provided name, if it has been registered,\n   * @param name the module name\n   * @throws a CoreError if the module cannot be found.\n   */\n  Modules.prototype.remove = function (name) {\n    var isRemoved = this.modules.delete(name);\n    if (!isRemoved) {\n      throw new Error_1.CoreError({\n        code: Error_1.CoreErrorCode.MODULE_NOT_FOUND,\n        message: \"Module \\\"\".concat(name, \"\\\" does not exist.\")\n      });\n    }\n  };\n  /**\n   * List all the registered modules\n   * @returns an array of BaseModule that have been registered\n   */\n  Modules.prototype.list = function () {\n    return Array.from(this.modules.values());\n  };\n  /**\n   * Returns the names of all registered modules\n   */\n  Modules.prototype.listNames = function () {\n    return this.list().map(function (module) {\n      return module.name;\n    });\n  };\n  /**\n   * List all the registered api modules (eg. modules with the type CoreModuleType.API)\n   */\n  Modules.prototype.listApis = function () {\n    return this.list().filter(utils_1.isApiModule);\n  };\n  return Modules;\n}();\nexports.Modules = Modules;","map":{"version":3,"sources":["../../src/Modules/Modules.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Modules = void 0;\nvar utils_1 = require(\"./utils\");\nvar Error_1 = require(\"../Error\");\n/**\n * MoralisModues handles all registered modules.\n * Any package that is used in Moralis, should register itself via this class.\n * This allows cross-communication between modules and easy management of the modules\n *\n * This class is responsible for:\n * - registering new modules\n * - removing modules (in theory possible for exotic usecases, but might break the app if done after initialisation)\n * - getting individual modules by name, type or everything\n */\nvar Modules = /** @class */ (function () {\n    function Modules() {\n        this.modules = new Map();\n    }\n    /**\n     * Register and setup a new module by providing a module that is extended from BaseClass.\n     * This will throw an error if the name is not unique\n     * @param module the module that needs to be registered\n     */\n    Modules.prototype.register = function (module) {\n        if (this.modules.has(module.name)) {\n            throw new Error_1.CoreError({\n                code: Error_1.CoreErrorCode.DUPLICATE_MODULE,\n                message: \"The module \\\"\".concat(module.name, \"\\\" has already been registered.\"),\n            });\n        }\n        this.modules.set(module.name, module);\n        module.setup();\n    };\n    /**\n     * Returns the module with the given name.\n     * This module should have been registered with `register`\n     * @param name the module name\n     * @returns a valid BaseModule\n     * @throws a CoreError if no module with the given name has been registered\n     */\n    Modules.prototype.get = function (name) {\n        var module = this.modules.get(name);\n        if (!module) {\n            throw new Error_1.CoreError({ code: Error_1.CoreErrorCode.MODULE_NOT_FOUND, message: \"Module \\\"\".concat(name, \"\\\" does not exist.\") });\n        }\n        return module;\n    };\n    /**\n     * Tries to return the module with the given name if exist. Otherwise returns null.\n     * @param name the module name\n     * @returns a valid BaseModule or null\n     */\n    Modules.prototype.tryGet = function (name) {\n        return this.modules.get(name) || null;\n    };\n    Modules.prototype.has = function (name) {\n        return this.modules.has(name);\n    };\n    /**\n     * Returns the network module with the provided name.\n     * @param name the module name\n     * @returns a valid ApiModule\n     * @throws a CoreError if no network module with the given name has been registered\n     */\n    Modules.prototype.getApi = function (name) {\n        var module = this.modules.get(name);\n        if (!module || !(0, utils_1.isApiModule)(module)) {\n            throw new Error_1.CoreError({\n                code: Error_1.CoreErrorCode.MODULE_NOT_FOUND,\n                message: \"No ApiModule found with the name \\\"\".concat(name, \"\\\"\"),\n            });\n        }\n        return module;\n    };\n    /**\n     * Remove the module with the provided name, if it has been registered,\n     * @param name the module name\n     * @throws a CoreError if the module cannot be found.\n     */\n    Modules.prototype.remove = function (name) {\n        var isRemoved = this.modules.delete(name);\n        if (!isRemoved) {\n            throw new Error_1.CoreError({ code: Error_1.CoreErrorCode.MODULE_NOT_FOUND, message: \"Module \\\"\".concat(name, \"\\\" does not exist.\") });\n        }\n    };\n    /**\n     * List all the registered modules\n     * @returns an array of BaseModule that have been registered\n     */\n    Modules.prototype.list = function () {\n        return Array.from(this.modules.values());\n    };\n    /**\n     * Returns the names of all registered modules\n     */\n    Modules.prototype.listNames = function () {\n        return this.list().map(function (module) { return module.name; });\n    };\n    /**\n     * List all the registered api modules (eg. modules with the type CoreModuleType.API)\n     */\n    Modules.prototype.listApis = function () {\n        return this.list().filter(utils_1.isApiModule);\n    };\n    return Modules;\n}());\nexports.Modules = Modules;\n//# sourceMappingURL=Modules.js.map"]},"metadata":{},"sourceType":"script"}