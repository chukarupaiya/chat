{"version":3,"file":"base-eth-keyring.cjs.development.js","sources":["../src/BaseKeyring.ts"],"sourcesContent":["import HDKey from \"hdkey\";\nimport {\n  toChecksumAddress,\n  publicToAddress,\n  BN,\n  stripHexPrefix,\n} from \"ethereumjs-util\";\nimport { Transaction } from \"@ethereumjs/tx\";\nimport {\n  CryptoHDKey,\n  DataType,\n  EthSignRequest,\n  extend,\n  CryptoAccount,\n} from \"@keystonehq/bc-ur-registry-eth\";\nimport * as uuid from \"uuid\";\nimport { InteractionProvider } from \"./InteractionProvider\";\n\nconst keyringType = \"QR Hardware Wallet Device\";\nconst pathBase = \"m\";\nconst MAX_INDEX = 1000;\n\nexport type StoredKeyring = {\n  //common props;\n  version: number;\n  initialized: boolean;\n  accounts: string[];\n  currentAccount: number;\n  page: number;\n  perPage: number;\n  name: string;\n  keyringMode?: string;\n  keyringAccount?: string;\n  xfp: string;\n\n  //hd props;\n  xpub: string;\n  hdPath: string;\n  indexes: Record<string, number>;\n  childrenPath: string;\n\n  //pubkey props;\n  paths: Record<string, string>;\n};\n\nexport type PagedAccount = { address: string; balance: any; index: number };\n\nconst DEFAULT_CHILDREN_PATH = \"0/*\";\n\nenum KEYRING_MODE {\n  hd = \"hd\",\n  pubkey = \"pubkey\",\n}\n\nenum KEYRING_ACCOUNT {\n  standard = \"account.standard\",\n  ledger_live = \"account.ledger_live\",\n  ledger_legacy = \"account.ledger_legacy\",\n}\n\nexport class BaseKeyring {\n  // @ts-ignore\n  private version = 1;\n  getInteraction = (): InteractionProvider => {\n    throw new Error(\n      \"KeystoneError#invalid_extends: method getInteraction not implemented, please extend BaseKeyring by overwriting this method.\"\n    );\n  };\n  static type = keyringType;\n  protected xfp: string;\n  protected type = keyringType;\n  protected keyringMode: KEYRING_MODE;\n  protected initialized: boolean;\n  protected xpub: string;\n  protected hdPath: string;\n  protected childrenPath: string;\n  protected accounts: string[];\n  protected currentAccount: number;\n  protected page: number;\n  protected perPage: number;\n  protected indexes: Record<string, number>;\n  protected hdk: any;\n  protected name: string;\n  protected paths: Record<string, string>;\n  protected keyringAccount: KEYRING_ACCOUNT;\n\n  private unlockedAccount: number;\n\n  constructor(opts?: StoredKeyring) {\n    //common props\n    this.page = 0;\n    this.perPage = 5;\n    this.accounts = [];\n    this.currentAccount = 0;\n    this.unlockedAccount = 0;\n    this.name = \"QR Hardware\";\n    this.keyringMode = KEYRING_MODE.hd;\n    this.keyringAccount = KEYRING_ACCOUNT.standard;\n    this.initialized = false;\n\n    //hd props;\n    this.xfp = \"\";\n    this.xpub = \"\";\n    this.hdPath = \"\";\n    this.childrenPath = DEFAULT_CHILDREN_PATH;\n    this.indexes = {};\n\n    //pubkey props;\n    this.paths = {};\n\n    this.deserialize(opts);\n  }\n\n  protected requestSignature = async (\n    _requestId: string,\n    signRequest: EthSignRequest,\n    requestTitle?: string,\n    requestDescription?: string\n  ): Promise<{ r: Buffer; s: Buffer; v: Buffer }> => {\n    const ethSignature = await this.getInteraction().requestSignature(\n      signRequest,\n      requestTitle,\n      requestDescription\n    );\n    const requestIdBuffer = ethSignature.getRequestId();\n    const signature = ethSignature.getSignature();\n    if (requestIdBuffer) {\n      const requestId = uuid.stringify(requestIdBuffer);\n      if (requestId !== _requestId) {\n        throw new Error(\n          \"KeystoneError#invalid_data: read signature error: mismatched requestId\"\n        );\n      }\n    }\n    const r = signature.slice(0, 32);\n    const s = signature.slice(32, 64);\n    const v = signature.slice(64);\n    return {\n      r,\n      s,\n      v,\n    };\n  };\n\n  private __readCryptoHDKey = (cryptoHDKey: CryptoHDKey) => {\n    const hdPath = `m/${cryptoHDKey.getOrigin().getPath()}`;\n    const xfp = cryptoHDKey.getOrigin().getSourceFingerprint()?.toString(\"hex\");\n    const childrenPath =\n      cryptoHDKey.getChildren()?.getPath() || DEFAULT_CHILDREN_PATH;\n    const name = cryptoHDKey.getName();\n    if (cryptoHDKey.getNote() === KEYRING_ACCOUNT.standard) {\n      this.keyringAccount = KEYRING_ACCOUNT.standard;\n    } else if (cryptoHDKey.getNote() === KEYRING_ACCOUNT.ledger_legacy) {\n      this.keyringAccount = KEYRING_ACCOUNT.ledger_legacy;\n    }\n    if (!xfp) {\n      throw new Error(\n        \"KeystoneError#invalid_data: invalid crypto-hdkey, cannot get source fingerprint\"\n      );\n    }\n    const xpub = cryptoHDKey.getBip32Key();\n    this.xfp = xfp;\n    this.xpub = xpub;\n    this.hdPath = hdPath;\n    this.childrenPath = childrenPath;\n    if (name !== undefined && name !== \"\") {\n      this.name = name;\n    }\n    this.initialized = true;\n  };\n\n  private __readCryptoAccount = (cryptoAccount: CryptoAccount): boolean => {\n    const xfp = cryptoAccount.getMasterFingerprint()?.toString(\"hex\");\n    if (!xfp) {\n      throw new Error(\n        \"KeystoneError#invalid_data: invalid crypto-account, cannot get master fingerprint\"\n      );\n    }\n    this.xfp = xfp;\n    this.initialized = true;\n    let changed = false;\n    const outputs = cryptoAccount.getOutputDescriptors();\n    if (!outputs || outputs.length === 0) {\n      throw new Error(\n        \"KeystoneError#invalid_data: invalid crypto-account, no crypto output found\"\n      );\n    }\n    if (outputs.length % 5 !== 0) {\n      throw new Error(\n        \"KeystoneError#invalid_data: only support 5x pubkey accounts for now\"\n      );\n    }\n    cryptoAccount.getOutputDescriptors()?.forEach((od) => {\n      try {\n        const cryptoHDKey = od.getHDKey();\n        if (cryptoHDKey) {\n          const key = cryptoHDKey.getKey();\n          const path = `M/${cryptoHDKey.getOrigin().getPath()}`;\n          const address = \"0x\" + publicToAddress(key, true).toString(\"hex\");\n          this.name = cryptoHDKey.getName();\n          if (cryptoHDKey.getNote() === KEYRING_ACCOUNT.ledger_live) {\n            this.keyringAccount = KEYRING_ACCOUNT.ledger_live;\n          }\n          if (this.paths[toChecksumAddress(address)] === undefined) {\n            changed = true;\n          }\n          this.paths[toChecksumAddress(address)] = path;\n        }\n      } catch (e) {\n        throw new Error(`KeystoneError#invalid_data: ${e}`);\n      }\n    });\n    return changed;\n  };\n\n  //initial read\n  async readKeyring(): Promise<void> {\n    const result = await this.getInteraction().readCryptoHDKeyOrCryptoAccount();\n    this.syncKeyring(result);\n  }\n\n  public syncKeyring(data: CryptoHDKey | CryptoAccount): void {\n    if (\n      data.getRegistryType().getType() ===\n      extend.RegistryTypes.CRYPTO_HDKEY.getType()\n    ) {\n      this.keyringMode = KEYRING_MODE.hd;\n      this.__readCryptoHDKey(data as CryptoHDKey);\n    } else {\n      this.keyringMode = KEYRING_MODE.pubkey;\n      this.__readCryptoAccount(data as CryptoAccount);\n    }\n  }\n\n  // private __readLedgerLiveAccounts = async () => {\n  //     const result = await this.getInteraction().readCryptoHDKeyOrCryptoAccount();\n  //     if (result.getRegistryType() === extend.RegistryTypes.CRYPTO_ACCOUNT) {\n  //         const changed = this.__readCryptoAccount(result as CryptoAccount);\n  //         if (!changed) {\n  //             throw new Error(`#KeystoneError#pubkey_account.no_new_account`);\n  //         }\n  //     } else {\n  //         throw new Error(`KeystoneError#pubkey_account.unexpected_urtype`);\n  //     }\n  // };\n\n  public getName = (): string => {\n    return this.name;\n  };\n\n  protected checkKeyring() {\n    if (!this.xfp || !this.xpub || !this.hdPath) {\n      throw new Error(\n        \"KeystoneError#invalid_keyring: keyring not fulfilled, please call function `readKeyring` firstly\"\n      );\n    }\n  }\n\n  serialize(): Promise<StoredKeyring> {\n    return Promise.resolve({\n      //common\n      initialized: this.initialized,\n      accounts: this.accounts,\n      currentAccount: this.currentAccount,\n      page: this.page,\n      perPage: this.perPage,\n      keyringAccount: this.keyringAccount,\n      keyringMode: this.keyringMode,\n      name: this.name,\n      version: this.version,\n      xfp: this.xfp,\n\n      //hd\n      xpub: this.xpub,\n      hdPath: this.hdPath,\n      childrenPath: this.childrenPath,\n      indexes: this.indexes,\n\n      //pubkey\n      paths: this.paths,\n    });\n  }\n\n  deserialize(opts?: StoredKeyring): void {\n    if (opts) {\n      //common props;\n      this.accounts = opts.accounts;\n      this.currentAccount = opts.currentAccount;\n      this.page = opts.page;\n      this.perPage = opts.perPage;\n      this.name = opts.name;\n      this.initialized = opts.initialized;\n      this.keyringMode = (opts.keyringMode as KEYRING_MODE) || KEYRING_MODE.hd;\n      this.keyringAccount =\n        (opts.keyringAccount as KEYRING_ACCOUNT) || KEYRING_ACCOUNT.standard;\n      this.xfp = opts.xfp;\n\n      //hd props;\n      this.xpub = opts.xpub;\n      this.hdPath = opts.hdPath;\n      this.indexes = opts.indexes;\n\n      this.paths = opts.paths;\n\n      this.childrenPath = opts.childrenPath || DEFAULT_CHILDREN_PATH;\n    }\n  }\n\n  setCurrentAccount(index: number): void {\n    this.currentAccount = index;\n  }\n\n  getCurrentAccount(): number {\n    return this.currentAccount;\n  }\n\n  getCurrentAddress(): string {\n    return this.accounts[this.currentAccount];\n  }\n\n  setAccountToUnlock = (index) => {\n    this.unlockedAccount = parseInt(index, 10);\n  };\n\n  async addAccounts(n = 1): Promise<string[]> {\n    const from = this.unlockedAccount;\n    const to = from + n;\n    const newAccounts = [];\n\n    for (let i = from; i < to; i++) {\n      const address = await this.__addressFromIndex(pathBase, i);\n      newAccounts.push(address);\n      this.page = 0;\n      this.unlockedAccount++;\n    }\n    this.accounts = this.accounts.concat(newAccounts);\n    return this.accounts;\n  }\n\n  getFirstPage(): Promise<PagedAccount[]> {\n    this.page = 0;\n    return this.__getPage(1);\n  }\n\n  getNextPage(): Promise<PagedAccount[]> {\n    return this.__getPage(1);\n  }\n\n  getPreviousPage(): Promise<PagedAccount[]> {\n    return this.__getPage(-1);\n  }\n\n  private __getNormalPage = async (\n    increment: number\n  ): Promise<PagedAccount[]> => {\n    this.page += increment;\n    if (this.page <= 0) {\n      this.page = 1;\n    }\n    const from = (this.page - 1) * this.perPage;\n    const to = from + this.perPage;\n\n    const accounts = [];\n\n    for (let i = from; i < to; i++) {\n      const address = await this.__addressFromIndex(pathBase, i);\n      accounts.push({\n        address,\n        balance: null,\n        index: i,\n      });\n      this.indexes[toChecksumAddress(address)] = i;\n    }\n    return accounts;\n  };\n\n  private __getLedgerLivePage = async (\n    increment: number\n  ): Promise<PagedAccount[]> => {\n    const nextPage = this.page + increment;\n    const from = (nextPage - 1) * this.perPage;\n    const to = from + this.perPage;\n\n    const accounts = [];\n\n    for (let i = from; i < to; i++) {\n      const address = await this.__addressFromIndex(pathBase, i);\n      accounts.push({\n        address,\n        balance: null,\n        index: i,\n      });\n    }\n\n    this.page += increment;\n    return accounts;\n  };\n\n  async __getPage(increment: number): Promise<PagedAccount[]> {\n    if (!this.initialized) {\n      await this.readKeyring();\n    }\n    if (this.keyringMode === KEYRING_MODE.hd) {\n      return this.__getNormalPage(increment);\n    } else {\n      return this.__getLedgerLivePage(increment);\n    }\n  }\n\n  getAccounts() {\n    return Promise.resolve(this.accounts);\n  }\n\n  removeAccount(address: string): void {\n    if (\n      !this.accounts.map((a) => a.toLowerCase()).includes(address.toLowerCase())\n    ) {\n      throw new Error(`Address ${address} not found in this keyring`);\n    }\n    this.accounts = this.accounts.filter(\n      (a) => a.toLowerCase() !== address.toLowerCase()\n    );\n  }\n\n  // tx is an instance of the ethereumjs-transaction class.\n\n  private static serializeTx(tx: Transaction): Buffer {\n    // need use EIP-155\n    // @ts-ignore\n    tx.v = new BN(tx.common.chainId());\n    // @ts-ignore\n    tx.r = new BN(0);\n    // @ts-ignore\n    tx.s = new BN(0);\n    return tx.serialize();\n  }\n\n  async signTransaction(\n    address: string,\n    tx: Transaction\n  ): Promise<Transaction> {\n    const hdPath = await this._pathFromAddress(address);\n    const chainId = tx.common.chainId();\n    const requestId = uuid.v4();\n    const ethSignRequest = EthSignRequest.constructETHRequest(\n      BaseKeyring.serializeTx(tx),\n      DataType.transaction,\n      hdPath,\n      this.xfp,\n      requestId,\n      chainId\n    );\n\n    const { r, s, v } = await this.requestSignature(\n      requestId,\n      ethSignRequest,\n      \"Scan with your Keystone\",\n      'After your Keystone has signed the transaction, click on \"Scan Keystone\" to receive the signature'\n    );\n    const txJson = tx.toJSON();\n    return Transaction.fromTxData(\n      {\n        to: txJson[\"to\"],\n        gasLimit: txJson[\"gasLimit\"],\n        gasPrice: txJson[\"gasPrice\"],\n        data: txJson[\"data\"],\n        nonce: txJson[\"nonce\"],\n        value: txJson[\"value\"],\n        r,\n        s,\n        v,\n      },\n      { common: tx.common }\n    );\n  }\n\n  signMessage(withAccount: string, data: string): Promise<string> {\n    return this.signPersonalMessage(withAccount, data);\n  }\n\n  async signPersonalMessage(\n    withAccount: string,\n    messageHex: string\n  ): Promise<string> {\n    const usignedHex = stripHexPrefix(messageHex);\n    const hdPath = await this._pathFromAddress(withAccount);\n    const requestId = uuid.v4();\n    const ethSignRequest = EthSignRequest.constructETHRequest(\n      Buffer.from(usignedHex, \"hex\"),\n      DataType.personalMessage,\n      hdPath,\n      this.xfp,\n      requestId,\n      undefined,\n      withAccount\n    );\n    const { r, s, v } = await this.requestSignature(\n      requestId,\n      ethSignRequest,\n      \"Scan with your Keystone\",\n      'After your Keystone has signed this message, click on \"Scan Keystone\" to receive the signature'\n    );\n    return \"0x\" + Buffer.concat([r, s, v]).toString(\"hex\");\n  }\n\n  async signTypedData(withAccount: string, typedData: any): Promise<string> {\n    const hdPath = await this._pathFromAddress(withAccount);\n    const requestId = uuid.v4();\n    const ethSignRequest = EthSignRequest.constructETHRequest(\n      Buffer.from(JSON.stringify(typedData), \"utf-8\"),\n      DataType.typedData,\n      hdPath,\n      this.xfp,\n      requestId,\n      undefined,\n      withAccount\n    );\n    const { r, s, v } = await this.requestSignature(\n      requestId,\n      ethSignRequest,\n      \"Scan with your Keystone\",\n      'After your Keystone has signed this data, click on \"Scan Keystone\" to receive the signature'\n    );\n    return \"0x\" + Buffer.concat([r, s, v]).toString(\"hex\");\n  }\n\n  __addressFromIndex = async (pb: string, i: number): Promise<string> => {\n    if (this.keyringMode === KEYRING_MODE.hd) {\n      this.checkKeyring();\n      if (!this.hdk) {\n        // @ts-ignore\n        this.hdk = HDKey.fromExtendedKey(this.xpub);\n      }\n      const childrenPath = this.childrenPath\n        .replace(\"*\", String(i))\n        .replace(/\\*/g, \"0\");\n      const dkey = this.hdk.derive(`${pb}/${childrenPath}`);\n      const address =\n        \"0x\" + publicToAddress(dkey.publicKey, true).toString(\"hex\");\n      return toChecksumAddress(address);\n    } else {\n      const result = Object.keys(this.paths)[i];\n      if (result) {\n        return toChecksumAddress(result);\n      } else {\n        throw new Error(`KeystoneError#pubkey_account.no_expected_account`);\n      }\n    }\n  };\n\n  async _pathFromAddress(address: string): Promise<string> {\n    if (this.keyringMode === KEYRING_MODE.hd) {\n      const checksummedAddress = toChecksumAddress(address);\n      let index = this.indexes[checksummedAddress];\n      if (typeof index === \"undefined\") {\n        for (let i = 0; i < MAX_INDEX; i++) {\n          if (\n            checksummedAddress === (await this.__addressFromIndex(pathBase, i))\n          ) {\n            index = i;\n            break;\n          }\n        }\n      }\n\n      if (typeof index === \"undefined\") {\n        throw new Error(\"Unknown address\");\n      }\n      return `${this.hdPath}/${this.childrenPath\n        .replace(\"*\", index.toString())\n        .replace(/\\*/g, \"0\")}`;\n    } else {\n      const checksummedAddress = toChecksumAddress(address);\n      const path = this.paths[checksummedAddress];\n      if (typeof path === \"undefined\") {\n        throw new Error(\"Unknown address\");\n      }\n      return path;\n    }\n  }\n}\n"],"names":["keyringType","pathBase","MAX_INDEX","DEFAULT_CHILDREN_PATH","KEYRING_MODE","KEYRING_ACCOUNT","BaseKeyring","constructor","opts","Error","_requestId","signRequest","requestTitle","requestDescription","ethSignature","getInteraction","requestSignature","requestIdBuffer","getRequestId","signature","getSignature","requestId","uuid","r","slice","s","v","cryptoHDKey","hdPath","getOrigin","getPath","xfp","getSourceFingerprint","toString","childrenPath","getChildren","name","getName","getNote","standard","keyringAccount","ledger_legacy","xpub","getBip32Key","undefined","initialized","cryptoAccount","getMasterFingerprint","changed","outputs","getOutputDescriptors","length","forEach","od","getHDKey","key","getKey","path","address","publicToAddress","ledger_live","paths","toChecksumAddress","e","index","unlockedAccount","parseInt","increment","page","from","perPage","to","accounts","i","__addressFromIndex","push","balance","indexes","nextPage","pb","keyringMode","hd","checkKeyring","hdk","HDKey","fromExtendedKey","replace","String","dkey","derive","publicKey","result","Object","keys","currentAccount","deserialize","readKeyring","readCryptoHDKeyOrCryptoAccount","syncKeyring","data","getRegistryType","getType","extend","RegistryTypes","CRYPTO_HDKEY","__readCryptoHDKey","pubkey","__readCryptoAccount","serialize","Promise","resolve","version","setCurrentAccount","getCurrentAccount","getCurrentAddress","addAccounts","n","newAccounts","concat","getFirstPage","__getPage","getNextPage","getPreviousPage","__getNormalPage","__getLedgerLivePage","getAccounts","removeAccount","map","a","toLowerCase","includes","filter","serializeTx","tx","BN","common","chainId","signTransaction","_pathFromAddress","ethSignRequest","EthSignRequest","constructETHRequest","DataType","transaction","txJson","toJSON","Transaction","fromTxData","gasLimit","gasPrice","nonce","value","signMessage","withAccount","signPersonalMessage","messageHex","usignedHex","stripHexPrefix","Buffer","personalMessage","signTypedData","typedData","JSON","stringify","checksummedAddress"],"mappings":";;;;;;;;;;;;AAkBA,MAAMA,WAAW,GAAG,2BAApB;AACA,MAAMC,QAAQ,GAAG,GAAjB;AACA,MAAMC,SAAS,GAAG,IAAlB;AA2BA,MAAMC,qBAAqB,GAAG,KAA9B;AAEA,IAAKC,YAAL;;AAAA,WAAKA;AACHA,EAAAA,kBAAA,OAAA;AACAA,EAAAA,sBAAA,WAAA;AACD,CAHD,EAAKA,YAAY,KAAZA,YAAY,KAAA,CAAjB;;AAKA,IAAKC,eAAL;;AAAA,WAAKA;AACHA,EAAAA,2BAAA,qBAAA;AACAA,EAAAA,8BAAA,wBAAA;AACAA,EAAAA,gCAAA,0BAAA;AACD,CAJD,EAAKA,eAAe,KAAfA,eAAe,KAAA,CAApB;;MAMaC;AA4BXC,EAAAA,YAAYC;AA3BZ;AACQ,gBAAA,GAAU,CAAV;;AACR,uBAAA,GAAiB;AACf,YAAM,IAAIC,KAAJ,CACJ,6HADI,CAAN;AAGD,KAJD;;AAOU,aAAA,GAAOT,WAAP;;AA2CA,yBAAA,GAAmB,OAC3BU,UAD2B,EAE3BC,WAF2B,EAG3BC,YAH2B,EAI3BC,kBAJ2B;AAM3B,YAAMC,YAAY,GAAG,MAAM,KAAKC,cAAL,GAAsBC,gBAAtB,CACzBL,WADyB,EAEzBC,YAFyB,EAGzBC,kBAHyB,CAA3B;AAKA,YAAMI,eAAe,GAAGH,YAAY,CAACI,YAAb,EAAxB;AACA,YAAMC,SAAS,GAAGL,YAAY,CAACM,YAAb,EAAlB;;AACA,UAAIH,eAAJ,EAAqB;AACnB,cAAMI,SAAS,GAAGC,cAAA,CAAeL,eAAf,CAAlB;;AACA,YAAII,SAAS,KAAKX,UAAlB,EAA8B;AAC5B,gBAAM,IAAID,KAAJ,CACJ,wEADI,CAAN;AAGD;AACF;;AACD,YAAMc,CAAC,GAAGJ,SAAS,CAACK,KAAV,CAAgB,CAAhB,EAAmB,EAAnB,CAAV;AACA,YAAMC,CAAC,GAAGN,SAAS,CAACK,KAAV,CAAgB,EAAhB,EAAoB,EAApB,CAAV;AACA,YAAME,CAAC,GAAGP,SAAS,CAACK,KAAV,CAAgB,EAAhB,CAAV;AACA,aAAO;AACLD,QAAAA,CADK;AAELE,QAAAA,CAFK;AAGLC,QAAAA;AAHK,OAAP;AAKD,KA7BS;;AA+BF,0BAAA,GAAqBC,WAAD;;;AAC1B,YAAMC,MAAM,QAAQD,WAAW,CAACE,SAAZ,GAAwBC,OAAxB,IAApB;AACA,YAAMC,GAAG,4BAAGJ,WAAW,CAACE,SAAZ,GAAwBG,oBAAxB,EAAH,qBAAG,sBAAgDC,QAAhD,CAAyD,KAAzD,CAAZ;AACA,YAAMC,YAAY,GAChB,0BAAAP,WAAW,CAACQ,WAAZ,6CAA2BL,OAA3B,OAAwC3B,qBAD1C;AAEA,YAAMiC,IAAI,GAAGT,WAAW,CAACU,OAAZ,EAAb;;AACA,UAAIV,WAAW,CAACW,OAAZ,OAA0BjC,eAAe,CAACkC,QAA9C,EAAwD;AACtD,aAAKC,cAAL,GAAsBnC,eAAe,CAACkC,QAAtC;AACD,OAFD,MAEO,IAAIZ,WAAW,CAACW,OAAZ,OAA0BjC,eAAe,CAACoC,aAA9C,EAA6D;AAClE,aAAKD,cAAL,GAAsBnC,eAAe,CAACoC,aAAtC;AACD;;AACD,UAAI,CAACV,GAAL,EAAU;AACR,cAAM,IAAItB,KAAJ,CACJ,iFADI,CAAN;AAGD;;AACD,YAAMiC,IAAI,GAAGf,WAAW,CAACgB,WAAZ,EAAb;AACA,WAAKZ,GAAL,GAAWA,GAAX;AACA,WAAKW,IAAL,GAAYA,IAAZ;AACA,WAAKd,MAAL,GAAcA,MAAd;AACA,WAAKM,YAAL,GAAoBA,YAApB;;AACA,UAAIE,IAAI,KAAKQ,SAAT,IAAsBR,IAAI,KAAK,EAAnC,EAAuC;AACrC,aAAKA,IAAL,GAAYA,IAAZ;AACD;;AACD,WAAKS,WAAL,GAAmB,IAAnB;AACD,KAzBO;;AA2BA,4BAAA,GAAuBC,aAAD;;;AAC5B,YAAMf,GAAG,4BAAGe,aAAa,CAACC,oBAAd,EAAH,qBAAG,sBAAsCd,QAAtC,CAA+C,KAA/C,CAAZ;;AACA,UAAI,CAACF,GAAL,EAAU;AACR,cAAM,IAAItB,KAAJ,CACJ,mFADI,CAAN;AAGD;;AACD,WAAKsB,GAAL,GAAWA,GAAX;AACA,WAAKc,WAAL,GAAmB,IAAnB;AACA,UAAIG,OAAO,GAAG,KAAd;AACA,YAAMC,OAAO,GAAGH,aAAa,CAACI,oBAAd,EAAhB;;AACA,UAAI,CAACD,OAAD,IAAYA,OAAO,CAACE,MAAR,KAAmB,CAAnC,EAAsC;AACpC,cAAM,IAAI1C,KAAJ,CACJ,4EADI,CAAN;AAGD;;AACD,UAAIwC,OAAO,CAACE,MAAR,GAAiB,CAAjB,KAAuB,CAA3B,EAA8B;AAC5B,cAAM,IAAI1C,KAAJ,CACJ,qEADI,CAAN;AAGD;;AACD,+BAAAqC,aAAa,CAACI,oBAAd,6CAAsCE,OAAtC,CAA+CC,EAAD;AAC5C,YAAI;AACF,gBAAM1B,WAAW,GAAG0B,EAAE,CAACC,QAAH,EAApB;;AACA,cAAI3B,WAAJ,EAAiB;AACf,kBAAM4B,GAAG,GAAG5B,WAAW,CAAC6B,MAAZ,EAAZ;AACA,kBAAMC,IAAI,QAAQ9B,WAAW,CAACE,SAAZ,GAAwBC,OAAxB,IAAlB;AACA,kBAAM4B,OAAO,GAAG,OAAOC,8BAAe,CAACJ,GAAD,EAAM,IAAN,CAAf,CAA2BtB,QAA3B,CAAoC,KAApC,CAAvB;AACA,iBAAKG,IAAL,GAAYT,WAAW,CAACU,OAAZ,EAAZ;;AACA,gBAAIV,WAAW,CAACW,OAAZ,OAA0BjC,eAAe,CAACuD,WAA9C,EAA2D;AACzD,mBAAKpB,cAAL,GAAsBnC,eAAe,CAACuD,WAAtC;AACD;;AACD,gBAAI,KAAKC,KAAL,CAAWC,gCAAiB,CAACJ,OAAD,CAA5B,MAA2Cd,SAA/C,EAA0D;AACxDI,cAAAA,OAAO,GAAG,IAAV;AACD;;AACD,iBAAKa,KAAL,CAAWC,gCAAiB,CAACJ,OAAD,CAA5B,IAAyCD,IAAzC;AACD;AACF,SAfD,CAeE,OAAOM,CAAP,EAAU;AACV,gBAAM,IAAItD,KAAJ,gCAAyCsD,GAAzC,CAAN;AACD;AACF,OAnBD;AAoBA,aAAOf,OAAP;AACD,KA1CO;AAgER;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEO,gBAAA,GAAU;AACf,aAAO,KAAKZ,IAAZ;AACD,KAFM;;AA0EP,2BAAA,GAAsB4B,KAAD;AACnB,WAAKC,eAAL,GAAuBC,QAAQ,CAACF,KAAD,EAAQ,EAAR,CAA/B;AACD,KAFD;;AAgCQ,wBAAA,GAAkB,MACxBG,SADwB;AAGxB,WAAKC,IAAL,IAAaD,SAAb;;AACA,UAAI,KAAKC,IAAL,IAAa,CAAjB,EAAoB;AAClB,aAAKA,IAAL,GAAY,CAAZ;AACD;;AACD,YAAMC,IAAI,GAAG,CAAC,KAAKD,IAAL,GAAY,CAAb,IAAkB,KAAKE,OAApC;AACA,YAAMC,EAAE,GAAGF,IAAI,GAAG,KAAKC,OAAvB;AAEA,YAAME,QAAQ,GAAG,EAAjB;;AAEA,WAAK,IAAIC,CAAC,GAAGJ,IAAb,EAAmBI,CAAC,GAAGF,EAAvB,EAA2BE,CAAC,EAA5B,EAAgC;AAC9B,cAAMf,OAAO,GAAG,MAAM,KAAKgB,kBAAL,CAAwBzE,QAAxB,EAAkCwE,CAAlC,CAAtB;AACAD,QAAAA,QAAQ,CAACG,IAAT,CAAc;AACZjB,UAAAA,OADY;AAEZkB,UAAAA,OAAO,EAAE,IAFG;AAGZZ,UAAAA,KAAK,EAAES;AAHK,SAAd;AAKA,aAAKI,OAAL,CAAaf,gCAAiB,CAACJ,OAAD,CAA9B,IAA2Ce,CAA3C;AACD;;AACD,aAAOD,QAAP;AACD,KAtBO;;AAwBA,4BAAA,GAAsB,MAC5BL,SAD4B;AAG5B,YAAMW,QAAQ,GAAG,KAAKV,IAAL,GAAYD,SAA7B;AACA,YAAME,IAAI,GAAG,CAACS,QAAQ,GAAG,CAAZ,IAAiB,KAAKR,OAAnC;AACA,YAAMC,EAAE,GAAGF,IAAI,GAAG,KAAKC,OAAvB;AAEA,YAAME,QAAQ,GAAG,EAAjB;;AAEA,WAAK,IAAIC,CAAC,GAAGJ,IAAb,EAAmBI,CAAC,GAAGF,EAAvB,EAA2BE,CAAC,EAA5B,EAAgC;AAC9B,cAAMf,OAAO,GAAG,MAAM,KAAKgB,kBAAL,CAAwBzE,QAAxB,EAAkCwE,CAAlC,CAAtB;AACAD,QAAAA,QAAQ,CAACG,IAAT,CAAc;AACZjB,UAAAA,OADY;AAEZkB,UAAAA,OAAO,EAAE,IAFG;AAGZZ,UAAAA,KAAK,EAAES;AAHK,SAAd;AAKD;;AAED,WAAKL,IAAL,IAAaD,SAAb;AACA,aAAOK,QAAP;AACD,KApBO;;AAsJR,2BAAA,GAAqB,OAAOO,EAAP,EAAmBN,CAAnB;AACnB,UAAI,KAAKO,WAAL,KAAqB5E,YAAY,CAAC6E,EAAtC,EAA0C;AACxC,aAAKC,YAAL;;AACA,YAAI,CAAC,KAAKC,GAAV,EAAe;AACb;AACA,eAAKA,GAAL,GAAWC,KAAK,CAACC,eAAN,CAAsB,KAAK3C,IAA3B,CAAX;AACD;;AACD,cAAMR,YAAY,GAAG,KAAKA,YAAL,CAClBoD,OADkB,CACV,GADU,EACLC,MAAM,CAACd,CAAD,CADD,EAElBa,OAFkB,CAEV,KAFU,EAEH,GAFG,CAArB;AAGA,cAAME,IAAI,GAAG,KAAKL,GAAL,CAASM,MAAT,IAAmBV,MAAM7C,cAAzB,CAAb;AACA,cAAMwB,OAAO,GACX,OAAOC,8BAAe,CAAC6B,IAAI,CAACE,SAAN,EAAiB,IAAjB,CAAf,CAAsCzD,QAAtC,CAA+C,KAA/C,CADT;AAEA,eAAO6B,gCAAiB,CAACJ,OAAD,CAAxB;AACD,OAbD,MAaO;AACL,cAAMiC,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAY,KAAKhC,KAAjB,EAAwBY,CAAxB,CAAf;;AACA,YAAIkB,MAAJ,EAAY;AACV,iBAAO7B,gCAAiB,CAAC6B,MAAD,CAAxB;AACD,SAFD,MAEO;AACL,gBAAM,IAAIlF,KAAJ,mDAAA,CAAN;AACD;AACF;AACF,KAtBD;;;AApbE,SAAK2D,IAAL,GAAY,CAAZ;AACA,SAAKE,OAAL,GAAe,CAAf;AACA,SAAKE,QAAL,GAAgB,EAAhB;AACA,SAAKsB,cAAL,GAAsB,CAAtB;AACA,SAAK7B,eAAL,GAAuB,CAAvB;AACA,SAAK7B,IAAL,GAAY,aAAZ;AACA,SAAK4C,WAAL,GAAmB5E,YAAY,CAAC6E,EAAhC;AACA,SAAKzC,cAAL,GAAsBnC,eAAe,CAACkC,QAAtC;AACA,SAAKM,WAAL,GAAmB,KAAnB;;AAGA,SAAKd,GAAL,GAAW,EAAX;AACA,SAAKW,IAAL,GAAY,EAAZ;AACA,SAAKd,MAAL,GAAc,EAAd;AACA,SAAKM,YAAL,GAAoB/B,qBAApB;AACA,SAAK0E,OAAL,GAAe,EAAf;;AAGA,SAAKhB,KAAL,GAAa,EAAb;AAEA,SAAKkC,WAAL,CAAiBvF,IAAjB;AACD;;;AAyGgB,QAAXwF,WAAW;AACf,UAAML,MAAM,GAAG,MAAM,KAAK5E,cAAL,GAAsBkF,8BAAtB,EAArB;AACA,SAAKC,WAAL,CAAiBP,MAAjB;AACD;;AAEMO,EAAAA,WAAW,CAACC,IAAD;AAChB,QACEA,IAAI,CAACC,eAAL,GAAuBC,OAAvB,OACAC,sBAAM,CAACC,aAAP,CAAqBC,YAArB,CAAkCH,OAAlC,EAFF,EAGE;AACA,WAAKrB,WAAL,GAAmB5E,YAAY,CAAC6E,EAAhC;;AACA,WAAKwB,iBAAL,CAAuBN,IAAvB;AACD,KAND,MAMO;AACL,WAAKnB,WAAL,GAAmB5E,YAAY,CAACsG,MAAhC;;AACA,WAAKC,mBAAL,CAAyBR,IAAzB;AACD;AACF;;AAkBSjB,EAAAA,YAAY;AACpB,QAAI,CAAC,KAAKnD,GAAN,IAAa,CAAC,KAAKW,IAAnB,IAA2B,CAAC,KAAKd,MAArC,EAA6C;AAC3C,YAAM,IAAInB,KAAJ,CACJ,kGADI,CAAN;AAGD;AACF;;AAEDmG,EAAAA,SAAS;AACP,WAAOC,OAAO,CAACC,OAAR,CAAgB;AACrB;AACAjE,MAAAA,WAAW,EAAE,KAAKA,WAFG;AAGrB2B,MAAAA,QAAQ,EAAE,KAAKA,QAHM;AAIrBsB,MAAAA,cAAc,EAAE,KAAKA,cAJA;AAKrB1B,MAAAA,IAAI,EAAE,KAAKA,IALU;AAMrBE,MAAAA,OAAO,EAAE,KAAKA,OANO;AAOrB9B,MAAAA,cAAc,EAAE,KAAKA,cAPA;AAQrBwC,MAAAA,WAAW,EAAE,KAAKA,WARG;AASrB5C,MAAAA,IAAI,EAAE,KAAKA,IATU;AAUrB2E,MAAAA,OAAO,EAAE,KAAKA,OAVO;AAWrBhF,MAAAA,GAAG,EAAE,KAAKA,GAXW;AAarB;AACAW,MAAAA,IAAI,EAAE,KAAKA,IAdU;AAerBd,MAAAA,MAAM,EAAE,KAAKA,MAfQ;AAgBrBM,MAAAA,YAAY,EAAE,KAAKA,YAhBE;AAiBrB2C,MAAAA,OAAO,EAAE,KAAKA,OAjBO;AAmBrB;AACAhB,MAAAA,KAAK,EAAE,KAAKA;AApBS,KAAhB,CAAP;AAsBD;;AAEDkC,EAAAA,WAAW,CAACvF,IAAD;AACT,QAAIA,IAAJ,EAAU;AACR;AACA,WAAKgE,QAAL,GAAgBhE,IAAI,CAACgE,QAArB;AACA,WAAKsB,cAAL,GAAsBtF,IAAI,CAACsF,cAA3B;AACA,WAAK1B,IAAL,GAAY5D,IAAI,CAAC4D,IAAjB;AACA,WAAKE,OAAL,GAAe9D,IAAI,CAAC8D,OAApB;AACA,WAAKlC,IAAL,GAAY5B,IAAI,CAAC4B,IAAjB;AACA,WAAKS,WAAL,GAAmBrC,IAAI,CAACqC,WAAxB;AACA,WAAKmC,WAAL,GAAoBxE,IAAI,CAACwE,WAAL,IAAqC5E,YAAY,CAAC6E,EAAtE;AACA,WAAKzC,cAAL,GACGhC,IAAI,CAACgC,cAAL,IAA2CnC,eAAe,CAACkC,QAD9D;AAEA,WAAKR,GAAL,GAAWvB,IAAI,CAACuB,GAAhB,CAXQ;;AAcR,WAAKW,IAAL,GAAYlC,IAAI,CAACkC,IAAjB;AACA,WAAKd,MAAL,GAAcpB,IAAI,CAACoB,MAAnB;AACA,WAAKiD,OAAL,GAAerE,IAAI,CAACqE,OAApB;AAEA,WAAKhB,KAAL,GAAarD,IAAI,CAACqD,KAAlB;AAEA,WAAK3B,YAAL,GAAoB1B,IAAI,CAAC0B,YAAL,IAAqB/B,qBAAzC;AACD;AACF;;AAED6G,EAAAA,iBAAiB,CAAChD,KAAD;AACf,SAAK8B,cAAL,GAAsB9B,KAAtB;AACD;;AAEDiD,EAAAA,iBAAiB;AACf,WAAO,KAAKnB,cAAZ;AACD;;AAEDoB,EAAAA,iBAAiB;AACf,WAAO,KAAK1C,QAAL,CAAc,KAAKsB,cAAnB,CAAP;AACD;;AAMgB,QAAXqB,WAAW,CAACC,CAAC,GAAG,CAAL;AACf,UAAM/C,IAAI,GAAG,KAAKJ,eAAlB;AACA,UAAMM,EAAE,GAAGF,IAAI,GAAG+C,CAAlB;AACA,UAAMC,WAAW,GAAG,EAApB;;AAEA,SAAK,IAAI5C,CAAC,GAAGJ,IAAb,EAAmBI,CAAC,GAAGF,EAAvB,EAA2BE,CAAC,EAA5B,EAAgC;AAC9B,YAAMf,OAAO,GAAG,MAAM,KAAKgB,kBAAL,CAAwBzE,QAAxB,EAAkCwE,CAAlC,CAAtB;AACA4C,MAAAA,WAAW,CAAC1C,IAAZ,CAAiBjB,OAAjB;AACA,WAAKU,IAAL,GAAY,CAAZ;AACA,WAAKH,eAAL;AACD;;AACD,SAAKO,QAAL,GAAgB,KAAKA,QAAL,CAAc8C,MAAd,CAAqBD,WAArB,CAAhB;AACA,WAAO,KAAK7C,QAAZ;AACD;;AAED+C,EAAAA,YAAY;AACV,SAAKnD,IAAL,GAAY,CAAZ;AACA,WAAO,KAAKoD,SAAL,CAAe,CAAf,CAAP;AACD;;AAEDC,EAAAA,WAAW;AACT,WAAO,KAAKD,SAAL,CAAe,CAAf,CAAP;AACD;;AAEDE,EAAAA,eAAe;AACb,WAAO,KAAKF,SAAL,CAAe,CAAC,CAAhB,CAAP;AACD;;AAgDc,QAATA,SAAS,CAACrD,SAAD;AACb,QAAI,CAAC,KAAKtB,WAAV,EAAuB;AACrB,YAAM,KAAKmD,WAAL,EAAN;AACD;;AACD,QAAI,KAAKhB,WAAL,KAAqB5E,YAAY,CAAC6E,EAAtC,EAA0C;AACxC,aAAO,KAAK0C,eAAL,CAAqBxD,SAArB,CAAP;AACD,KAFD,MAEO;AACL,aAAO,KAAKyD,mBAAL,CAAyBzD,SAAzB,CAAP;AACD;AACF;;AAED0D,EAAAA,WAAW;AACT,WAAOhB,OAAO,CAACC,OAAR,CAAgB,KAAKtC,QAArB,CAAP;AACD;;AAEDsD,EAAAA,aAAa,CAACpE,OAAD;AACX,QACE,CAAC,KAAKc,QAAL,CAAcuD,GAAd,CAAmBC,CAAD,IAAOA,CAAC,CAACC,WAAF,EAAzB,EAA0CC,QAA1C,CAAmDxE,OAAO,CAACuE,WAAR,EAAnD,CADH,EAEE;AACA,YAAM,IAAIxH,KAAJ,YAAqBiD,mCAArB,CAAN;AACD;;AACD,SAAKc,QAAL,GAAgB,KAAKA,QAAL,CAAc2D,MAAd,CACbH,CAAD,IAAOA,CAAC,CAACC,WAAF,OAAoBvE,OAAO,CAACuE,WAAR,EADb,CAAhB;AAGD;;;AAIyB,SAAXG,WAAW,CAACC,EAAD;AACxB;AACA;AACAA,IAAAA,EAAE,CAAC3G,CAAH,GAAO,IAAI4G,iBAAJ,CAAOD,EAAE,CAACE,MAAH,CAAUC,OAAV,EAAP,CAAP;;AAEAH,IAAAA,EAAE,CAAC9G,CAAH,GAAO,IAAI+G,iBAAJ,CAAO,CAAP,CAAP;;AAEAD,IAAAA,EAAE,CAAC5G,CAAH,GAAO,IAAI6G,iBAAJ,CAAO,CAAP,CAAP;AACA,WAAOD,EAAE,CAACzB,SAAH,EAAP;AACD;;AAEoB,QAAf6B,eAAe,CACnB/E,OADmB,EAEnB2E,IAFmB;AAInB,UAAMzG,MAAM,GAAG,MAAM,KAAK8G,gBAAL,CAAsBhF,OAAtB,CAArB;AACA,UAAM8E,OAAO,GAAGH,IAAE,CAACE,MAAH,CAAUC,OAAV,EAAhB;AACA,UAAMnH,SAAS,GAAGC,OAAA,EAAlB;AACA,UAAMqH,cAAc,GAAGC,8BAAc,CAACC,mBAAf,CACrBvI,WAAW,CAAC8H,WAAZ,CAAwBC,IAAxB,CADqB,EAErBS,wBAAQ,CAACC,WAFY,EAGrBnH,MAHqB,EAIrB,KAAKG,GAJgB,EAKrBV,SALqB,EAMrBmH,OANqB,CAAvB;AASA,UAAM;AAAEjH,MAAAA,CAAF;AAAKE,MAAAA,CAAL;AAAQC,MAAAA;AAAR,QAAc,MAAM,KAAKV,gBAAL,CACxBK,SADwB,EAExBsH,cAFwB,EAGxB,yBAHwB,EAIxB,mGAJwB,CAA1B;AAMA,UAAMK,MAAM,GAAGX,IAAE,CAACY,MAAH,EAAf;AACA,WAAOC,cAAW,CAACC,UAAZ,CACL;AACE5E,MAAAA,EAAE,EAAEyE,MAAM,CAAC,IAAD,CADZ;AAEEI,MAAAA,QAAQ,EAAEJ,MAAM,CAAC,UAAD,CAFlB;AAGEK,MAAAA,QAAQ,EAAEL,MAAM,CAAC,UAAD,CAHlB;AAIE7C,MAAAA,IAAI,EAAE6C,MAAM,CAAC,MAAD,CAJd;AAKEM,MAAAA,KAAK,EAAEN,MAAM,CAAC,OAAD,CALf;AAMEO,MAAAA,KAAK,EAAEP,MAAM,CAAC,OAAD,CANf;AAOEzH,MAAAA,CAPF;AAQEE,MAAAA,CARF;AASEC,MAAAA;AATF,KADK,EAYL;AAAE6G,MAAAA,MAAM,EAAEF,IAAE,CAACE;AAAb,KAZK,CAAP;AAcD;;AAEDiB,EAAAA,WAAW,CAACC,WAAD,EAAsBtD,IAAtB;AACT,WAAO,KAAKuD,mBAAL,CAAyBD,WAAzB,EAAsCtD,IAAtC,CAAP;AACD;;AAEwB,QAAnBuD,mBAAmB,CACvBD,WADuB,EAEvBE,UAFuB;AAIvB,UAAMC,UAAU,GAAGC,6BAAc,CAACF,UAAD,CAAjC;AACA,UAAM/H,MAAM,GAAG,MAAM,KAAK8G,gBAAL,CAAsBe,WAAtB,CAArB;AACA,UAAMpI,SAAS,GAAGC,OAAA,EAAlB;AACA,UAAMqH,cAAc,GAAGC,8BAAc,CAACC,mBAAf,CACrBiB,MAAM,CAACzF,IAAP,CAAYuF,UAAZ,EAAwB,KAAxB,CADqB,EAErBd,wBAAQ,CAACiB,eAFY,EAGrBnI,MAHqB,EAIrB,KAAKG,GAJgB,EAKrBV,SALqB,EAMrBuB,SANqB,EAOrB6G,WAPqB,CAAvB;AASA,UAAM;AAAElI,MAAAA,CAAF;AAAKE,MAAAA,CAAL;AAAQC,MAAAA;AAAR,QAAc,MAAM,KAAKV,gBAAL,CACxBK,SADwB,EAExBsH,cAFwB,EAGxB,yBAHwB,EAIxB,gGAJwB,CAA1B;AAMA,WAAO,OAAOmB,MAAM,CAACxC,MAAP,CAAc,CAAC/F,CAAD,EAAIE,CAAJ,EAAOC,CAAP,CAAd,EAAyBO,QAAzB,CAAkC,KAAlC,CAAd;AACD;;AAEkB,QAAb+H,aAAa,CAACP,WAAD,EAAsBQ,SAAtB;AACjB,UAAMrI,MAAM,GAAG,MAAM,KAAK8G,gBAAL,CAAsBe,WAAtB,CAArB;AACA,UAAMpI,SAAS,GAAGC,OAAA,EAAlB;AACA,UAAMqH,cAAc,GAAGC,8BAAc,CAACC,mBAAf,CACrBiB,MAAM,CAACzF,IAAP,CAAY6F,IAAI,CAACC,SAAL,CAAeF,SAAf,CAAZ,EAAuC,OAAvC,CADqB,EAErBnB,wBAAQ,CAACmB,SAFY,EAGrBrI,MAHqB,EAIrB,KAAKG,GAJgB,EAKrBV,SALqB,EAMrBuB,SANqB,EAOrB6G,WAPqB,CAAvB;AASA,UAAM;AAAElI,MAAAA,CAAF;AAAKE,MAAAA,CAAL;AAAQC,MAAAA;AAAR,QAAc,MAAM,KAAKV,gBAAL,CACxBK,SADwB,EAExBsH,cAFwB,EAGxB,yBAHwB,EAIxB,6FAJwB,CAA1B;AAMA,WAAO,OAAOmB,MAAM,CAACxC,MAAP,CAAc,CAAC/F,CAAD,EAAIE,CAAJ,EAAOC,CAAP,CAAd,EAAyBO,QAAzB,CAAkC,KAAlC,CAAd;AACD;;AA0BqB,QAAhByG,gBAAgB,CAAChF,OAAD;AACpB,QAAI,KAAKsB,WAAL,KAAqB5E,YAAY,CAAC6E,EAAtC,EAA0C;AACxC,YAAMmF,kBAAkB,GAAGtG,gCAAiB,CAACJ,OAAD,CAA5C;AACA,UAAIM,KAAK,GAAG,KAAKa,OAAL,CAAauF,kBAAb,CAAZ;;AACA,UAAI,OAAOpG,KAAP,KAAiB,WAArB,EAAkC;AAChC,aAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGvE,SAApB,EAA+BuE,CAAC,EAAhC,EAAoC;AAClC,cACE2F,kBAAkB,MAAM,MAAM,KAAK1F,kBAAL,CAAwBzE,QAAxB,EAAkCwE,CAAlC,CAAZ,CADpB,EAEE;AACAT,YAAAA,KAAK,GAAGS,CAAR;AACA;AACD;AACF;AACF;;AAED,UAAI,OAAOT,KAAP,KAAiB,WAArB,EAAkC;AAChC,cAAM,IAAIvD,KAAJ,CAAU,iBAAV,CAAN;AACD;;AACD,gBAAU,KAAKmB,UAAU,KAAKM,YAAL,CACtBoD,OADsB,CACd,GADc,EACTtB,KAAK,CAAC/B,QAAN,EADS,EAEtBqD,OAFsB,CAEd,KAFc,EAEP,GAFO,GAAzB;AAGD,KApBD,MAoBO;AACL,YAAM8E,kBAAkB,GAAGtG,gCAAiB,CAACJ,OAAD,CAA5C;AACA,YAAMD,IAAI,GAAG,KAAKI,KAAL,CAAWuG,kBAAX,CAAb;;AACA,UAAI,OAAO3G,IAAP,KAAgB,WAApB,EAAiC;AAC/B,cAAM,IAAIhD,KAAJ,CAAU,iBAAV,CAAN;AACD;;AACD,aAAOgD,IAAP;AACD;AACF;;;AA/fMnD,gBAAA,GAAON,WAAP;;;;"}