{"version":3,"file":"bc-ur-registry-eth.cjs.development.js","sources":["../src/RegistryType.ts","../src/EthSignRequest.ts","../src/EthSignature.ts","../src/ETHNFTItem.ts","../src/utlis.ts","../src/index.ts"],"sourcesContent":["import { RegistryType } from \"@keystonehq/bc-ur-registry\";\n\nexport const ExtendedRegistryTypes = {\n  ETH_SIGN_REQUEST: new RegistryType(\"eth-sign-request\", 401),\n  ETH_SIGNATAURE: new RegistryType(\"eth-signature\", 402),\n  ETH_NFT_ITEM: new RegistryType(\"eth-nft-item\", 403),\n};\n","import {\n  CryptoKeypath,\n  extend,\n  DataItem,\n  PathComponent,\n  RegistryItem,\n  DataItemMap,\n} from \"@keystonehq/bc-ur-registry\";\nimport { ExtendedRegistryTypes } from \"./RegistryType\";\nimport * as uuid from \"uuid\";\n\nconst { decodeToDataItem, RegistryTypes } = extend;\n\nenum Keys {\n  requestId = 1,\n  signData,\n  dataType,\n  chainId,\n  derivationPath,\n  address,\n  origin,\n}\n\nexport enum DataType {\n  transaction = 1,\n  typedData = 2,\n  personalMessage = 3,\n  typedTransaction = 4,\n}\n\ntype signRequestProps = {\n  requestId?: Buffer;\n  signData: Buffer;\n  dataType: DataType;\n  chainId?: number;\n  derivationPath: CryptoKeypath;\n  address?: Buffer;\n  origin?: string;\n};\n\nexport class EthSignRequest extends RegistryItem {\n  private requestId?: Buffer;\n  private signData: Buffer;\n  private dataType: DataType;\n  private chainId?: number;\n  private derivationPath: CryptoKeypath;\n  private address?: Buffer;\n  private origin?: string;\n\n  getRegistryType = () => ExtendedRegistryTypes.ETH_SIGN_REQUEST;\n\n  constructor(args: signRequestProps) {\n    super();\n    this.requestId = args.requestId;\n    this.signData = args.signData;\n    this.dataType = args.dataType;\n    this.chainId = args.chainId;\n    this.derivationPath = args.derivationPath;\n    this.address = args.address;\n    this.origin = args.origin;\n  }\n\n  public getRequestId = () => this.requestId;\n  public getSignData = () => this.signData;\n  public getDataType = () => this.dataType;\n  public getChainId = () => this.chainId;\n  public getDerivationPath = () => this.derivationPath.getPath();\n  public getSourceFingerprint = () =>\n    this.derivationPath.getSourceFingerprint();\n  public getSignRequestAddress = () => this.address;\n  public getOrigin = () => this.origin;\n\n  public toDataItem = () => {\n    const map: DataItemMap = {};\n    if (this.requestId) {\n      map[Keys.requestId] = new DataItem(\n        this.requestId,\n        RegistryTypes.UUID.getTag()\n      );\n    }\n    if (this.address) {\n      map[Keys.address] = this.address;\n    }\n    if (this.chainId) {\n      map[Keys.chainId] = this.chainId;\n    }\n\n    if (this.origin) {\n      map[Keys.origin] = this.origin;\n    }\n\n    map[Keys.signData] = this.signData;\n    map[Keys.dataType] = this.dataType;\n\n    const keyPath = this.derivationPath.toDataItem();\n    keyPath.setTag(this.derivationPath.getRegistryType().getTag());\n    map[Keys.derivationPath] = keyPath;\n\n    return new DataItem(map);\n  };\n\n  public static fromDataItem = (dataItem: DataItem) => {\n    const map = dataItem.getData();\n    const signData = map[Keys.signData];\n    const dataType = map[Keys.dataType];\n    const derivationPath = CryptoKeypath.fromDataItem(map[Keys.derivationPath]);\n    const chainId = map[Keys.chainId] ? map[Keys.chainId] : undefined;\n    const address = map[Keys.address] ? map[Keys.address] : undefined;\n    const requestId = map[Keys.requestId]\n      ? map[Keys.requestId].getData()\n      : undefined;\n    const origin = map[Keys.origin] ? map[Keys.origin] : undefined;\n\n    return new EthSignRequest({\n      requestId,\n      signData,\n      dataType,\n      chainId,\n      derivationPath,\n      address,\n      origin,\n    });\n  };\n\n  public static fromCBOR = (_cborPayload: Buffer) => {\n    const dataItem = decodeToDataItem(_cborPayload);\n    return EthSignRequest.fromDataItem(dataItem);\n  };\n\n  public static constructETHRequest(\n    signData: Buffer,\n    signDataType: DataType,\n    hdPath: string,\n    xfp: string,\n    uuidString?: string,\n    chainId?: number,\n    address?: string,\n    origin?: string\n  ) {\n    const paths = hdPath.replace(/[m|M]\\//, \"\").split(\"/\");\n    const hdpathObject = new CryptoKeypath(\n      paths.map((path) => {\n        const index = parseInt(path.replace(\"'\", \"\"));\n        let isHardened = false;\n        if (path.endsWith(\"'\")) {\n          isHardened = true;\n        }\n        return new PathComponent({ index, hardened: isHardened });\n      }),\n      Buffer.from(xfp, \"hex\")\n    );\n\n    return new EthSignRequest({\n      requestId: uuidString\n        ? Buffer.from(uuid.parse(uuidString) as Uint8Array)\n        : undefined,\n      signData,\n      dataType: signDataType,\n      derivationPath: hdpathObject,\n      chainId,\n      address: address\n        ? Buffer.from(address.replace(\"0x\", \"\"), \"hex\")\n        : undefined,\n      origin: origin || undefined,\n    });\n  }\n}\n","import {\n  extend,\n  DataItem,\n  RegistryItem,\n  DataItemMap,\n} from \"@keystonehq/bc-ur-registry\";\nimport { ExtendedRegistryTypes } from \"./RegistryType\";\n\nconst { RegistryTypes, decodeToDataItem } = extend;\n\nenum Keys {\n  requestId = 1,\n  signature,\n}\n\nexport class ETHSignature extends RegistryItem {\n  private requestId?: Buffer;\n  private signature: Buffer;\n\n  getRegistryType = () => ExtendedRegistryTypes.ETH_SIGNATAURE;\n\n  constructor(signature: Buffer, requestId?: Buffer) {\n    super();\n    this.signature = signature;\n    this.requestId = requestId;\n  }\n\n  public getRequestId = () => this.requestId;\n  public getSignature = () => this.signature;\n\n  public toDataItem = () => {\n    const map: DataItemMap = {};\n    if (this.requestId) {\n      map[Keys.requestId] = new DataItem(\n        this.requestId,\n        RegistryTypes.UUID.getTag()\n      );\n    }\n    map[Keys.signature] = this.signature;\n    return new DataItem(map);\n  };\n\n  public static fromDataItem = (dataItem: DataItem) => {\n    const map = dataItem.getData();\n    const signature = map[Keys.signature];\n    const requestId = map[Keys.requestId]\n      ? map[Keys.requestId].getData()\n      : undefined;\n\n    return new ETHSignature(signature, requestId);\n  };\n\n  public static fromCBOR = (_cborPayload: Buffer) => {\n    const dataItem = decodeToDataItem(_cborPayload);\n    return ETHSignature.fromDataItem(dataItem);\n  };\n}\n","import {\n  extend,\n  DataItem,\n  RegistryItem,\n  DataItemMap,\n} from \"@keystonehq/bc-ur-registry\";\nimport { ExtendedRegistryTypes } from \"./RegistryType\";\n\nconst { decodeToDataItem } = extend;\n\nenum Keys {\n  chainId = 1,\n  contractAddress = 2,\n  contractName,\n  name,\n  mediaData,\n}\n\ntype NFTProps = {\n  chainId: number;\n  contractAddress: string;\n  contractName: string;\n  name: string;\n  mediaData: string;\n};\n\nexport class ETHNFTItem extends RegistryItem {\n  private chainId: number;\n  private name: string;\n  private contractAddress: string;\n  private contractName: string;\n  private mediaData: string;\n\n  getRegistryType = () => ExtendedRegistryTypes.ETH_NFT_ITEM;\n\n  constructor(args: NFTProps) {\n    super();\n    this.chainId = args.chainId;\n    this.name = args.name;\n    this.contractAddress = args.contractAddress;\n    this.contractName = args.contractName;\n    this.mediaData = args.mediaData; // remove the data perfix for android usage\n  }\n\n  public getChainId = () => this.chainId;\n  public getName = () => this.name;\n  public getmediaData = () => this.mediaData;\n  public getContractAddress = () => this.contractAddress;\n  public getContractName = () => this.contractName;\n\n  public toDataItem = () => {\n    const map: DataItemMap = {};\n    map[Keys.chainId] = this.chainId;\n    map[Keys.name] = this.name;\n    map[Keys.contractAddress] = this.contractAddress;\n    map[Keys.contractName] = this.contractName;\n    map[Keys.mediaData] = this.mediaData;\n\n    return new DataItem(map);\n  };\n\n  public static fromDataItem = (dataItem: DataItem) => {\n    const map = dataItem.getData();\n    const chainId = map[Keys.chainId];\n    const name = map[Keys.name];\n    const mediaData = map[Keys.mediaData];\n    const contractAddress = map[Keys.contractAddress];\n    const contractName = map[Keys.contractName];\n\n    return new ETHNFTItem({\n      chainId,\n      name,\n      contractAddress,\n      contractName,\n      mediaData,\n    });\n  };\n\n  public static fromCBOR = (_cborPayload: Buffer) => {\n    const dataItem = decodeToDataItem(_cborPayload);\n    return ETHNFTItem.fromDataItem(dataItem);\n  };\n\n  public static constructETHNFTItem(\n    chainId: number,\n    contractAddress: string,\n    contractName: string,\n    name: string,\n    mediaData: string\n  ) {\n    return new ETHNFTItem({\n      chainId,\n      contractAddress,\n      contractName,\n      mediaData,\n      name,\n    });\n  }\n}\n","// @ts-ignore\nimport HDKey from \"hdkey\";\nimport { toChecksumAddress, publicToAddress } from \"ethereumjs-util\";\n\nexport const generateAddressFromXpub = (xpub: string, derivePath: string) => {\n  // @ts-ignore\n  const node = HDKey.fromExtendedKey(xpub);\n  const publicKey = node.derive(derivePath);\n  const address =\n    \"0x\" + publicToAddress(publicKey.publicKey, true).toString(\"hex\");\n  return toChecksumAddress(address);\n};\n\nexport const findHDPathFromAddress = (\n  address: string,\n  xpub: string,\n  numberLimit: number,\n  rootPath: string\n) => {\n  for (let i = 0; i < numberLimit; i++) {\n    const path = `M/0/${i}`;\n    const _address = generateAddressFromXpub(xpub, path);\n    if (address.toLowerCase() == _address.toLowerCase()) {\n      return `${rootPath}/0/${i}`;\n    }\n  }\n  return null;\n};\n","import { patchTags } from \"@keystonehq/bc-ur-registry\";\nimport { ExtendedRegistryTypes } from \"./RegistryType\";\nexport * from \"@keystonehq/bc-ur-registry\";\n\npatchTags(\n  Object.values(ExtendedRegistryTypes)\n    .filter((rt) => !!rt.getTag())\n    .map((rt) => rt.getTag()) as number[]\n);\n\nexport { EthSignRequest, DataType } from \"./EthSignRequest\";\nexport { ETHSignature } from \"./EthSignature\";\nexport { ETHNFTItem } from \"./ETHNFTItem\";\n\nexport { generateAddressFromXpub, findHDPathFromAddress } from \"./utlis\";\n"],"names":["ExtendedRegistryTypes","ETH_SIGN_REQUEST","RegistryType","ETH_SIGNATAURE","ETH_NFT_ITEM","decodeToDataItem","RegistryTypes","extend","Keys","DataType","EthSignRequest","RegistryItem","constructor","args","requestId","signData","dataType","chainId","derivationPath","getPath","getSourceFingerprint","address","origin","map","DataItem","UUID","getTag","keyPath","toDataItem","setTag","getRegistryType","constructETHRequest","signDataType","hdPath","xfp","uuidString","paths","replace","split","hdpathObject","CryptoKeypath","path","index","parseInt","isHardened","endsWith","PathComponent","hardened","Buffer","from","uuid","undefined","dataItem","getData","fromDataItem","_cborPayload","ETHSignature","signature","ETHNFTItem","name","mediaData","contractAddress","contractName","constructETHNFTItem","generateAddressFromXpub","xpub","derivePath","node","HDKey","fromExtendedKey","publicKey","derive","publicToAddress","toString","toChecksumAddress","findHDPathFromAddress","numberLimit","rootPath","i","_address","toLowerCase","patchTags","Object","values","filter","rt"],"mappings":";;;;;;;;;;;AAEO,MAAMA,qBAAqB,GAAG;AACnCC,EAAAA,gBAAgB,eAAE,IAAIC,yBAAJ,CAAiB,kBAAjB,EAAqC,GAArC,CADiB;AAEnCC,EAAAA,cAAc,eAAE,IAAID,yBAAJ,CAAiB,eAAjB,EAAkC,GAAlC,CAFmB;AAGnCE,EAAAA,YAAY,eAAE,IAAIF,yBAAJ,CAAiB,cAAjB,EAAiC,GAAjC;AAHqB,CAA9B;;ACSP,MAAM;AAAEG,EAAAA,gBAAF;AAAoBC,EAAAA;AAApB,IAAsCC,mBAA5C;AAEA,IAAKC,IAAL;;AAAA,WAAKA;AACHA,EAAAA,2BAAA,cAAA;AACAA,EAAAA,0BAAA,aAAA;AACAA,EAAAA,0BAAA,aAAA;AACAA,EAAAA,yBAAA,YAAA;AACAA,EAAAA,gCAAA,mBAAA;AACAA,EAAAA,yBAAA,YAAA;AACAA,EAAAA,wBAAA,WAAA;AACD,CARD,EAAKA,IAAI,KAAJA,IAAI,KAAA,CAAT;;AAUA,WAAYC;AACVA,EAAAA,qCAAA,gBAAA;AACAA,EAAAA,mCAAA,cAAA;AACAA,EAAAA,yCAAA,oBAAA;AACAA,EAAAA,0CAAA,qBAAA;AACD,CALD,EAAYA,gBAAQ,KAARA,gBAAQ,KAAA,CAApB;;AAiBA,MAAaC,uBAAuBC;AAWlCC,EAAAA,YAAYC;AACV;;AAHF,wBAAA,GAAkB,MAAMb,qBAAqB,CAACC,gBAA9C;;AAaO,qBAAA,GAAe,MAAM,KAAKa,SAA1B;;AACA,oBAAA,GAAc,MAAM,KAAKC,QAAzB;;AACA,oBAAA,GAAc,MAAM,KAAKC,QAAzB;;AACA,mBAAA,GAAa,MAAM,KAAKC,OAAxB;;AACA,0BAAA,GAAoB,MAAM,KAAKC,cAAL,CAAoBC,OAApB,EAA1B;;AACA,6BAAA,GAAuB,MAC5B,KAAKD,cAAL,CAAoBE,oBAApB,EADK;;AAEA,8BAAA,GAAwB,MAAM,KAAKC,OAAnC;;AACA,kBAAA,GAAY,MAAM,KAAKC,MAAvB;;AAEA,mBAAA,GAAa;AAClB,YAAMC,GAAG,GAAgB,EAAzB;;AACA,UAAI,KAAKT,SAAT,EAAoB;AAClBS,QAAAA,GAAG,CAACf,IAAI,CAACM,SAAN,CAAH,GAAsB,IAAIU,qBAAJ,CACpB,KAAKV,SADe,EAEpBR,aAAa,CAACmB,IAAd,CAAmBC,MAAnB,EAFoB,CAAtB;AAID;;AACD,UAAI,KAAKL,OAAT,EAAkB;AAChBE,QAAAA,GAAG,CAACf,IAAI,CAACa,OAAN,CAAH,GAAoB,KAAKA,OAAzB;AACD;;AACD,UAAI,KAAKJ,OAAT,EAAkB;AAChBM,QAAAA,GAAG,CAACf,IAAI,CAACS,OAAN,CAAH,GAAoB,KAAKA,OAAzB;AACD;;AAED,UAAI,KAAKK,MAAT,EAAiB;AACfC,QAAAA,GAAG,CAACf,IAAI,CAACc,MAAN,CAAH,GAAmB,KAAKA,MAAxB;AACD;;AAEDC,MAAAA,GAAG,CAACf,IAAI,CAACO,QAAN,CAAH,GAAqB,KAAKA,QAA1B;AACAQ,MAAAA,GAAG,CAACf,IAAI,CAACQ,QAAN,CAAH,GAAqB,KAAKA,QAA1B;AAEA,YAAMW,OAAO,GAAG,KAAKT,cAAL,CAAoBU,UAApB,EAAhB;AACAD,MAAAA,OAAO,CAACE,MAAR,CAAe,KAAKX,cAAL,CAAoBY,eAApB,GAAsCJ,MAAtC,EAAf;AACAH,MAAAA,GAAG,CAACf,IAAI,CAACU,cAAN,CAAH,GAA2BS,OAA3B;AAEA,aAAO,IAAIH,qBAAJ,CAAaD,GAAb,CAAP;AACD,KA3BM;;AAnBL,SAAKT,SAAL,GAAiBD,IAAI,CAACC,SAAtB;AACA,SAAKC,QAAL,GAAgBF,IAAI,CAACE,QAArB;AACA,SAAKC,QAAL,GAAgBH,IAAI,CAACG,QAArB;AACA,SAAKC,OAAL,GAAeJ,IAAI,CAACI,OAApB;AACA,SAAKC,cAAL,GAAsBL,IAAI,CAACK,cAA3B;AACA,SAAKG,OAAL,GAAeR,IAAI,CAACQ,OAApB;AACA,SAAKC,MAAL,GAAcT,IAAI,CAACS,MAAnB;AACD;;AAqEgC,SAAnBS,mBAAmB,CAC/BhB,QAD+B,EAE/BiB,YAF+B,EAG/BC,MAH+B,EAI/BC,GAJ+B,EAK/BC,UAL+B,EAM/BlB,OAN+B,EAO/BI,OAP+B,EAQ/BC,MAR+B;AAU/B,UAAMc,KAAK,GAAGH,MAAM,CAACI,OAAP,CAAe,SAAf,EAA0B,EAA1B,EAA8BC,KAA9B,CAAoC,GAApC,CAAd;AACA,UAAMC,YAAY,GAAG,IAAIC,0BAAJ,CACnBJ,KAAK,CAACb,GAAN,CAAWkB,IAAD;AACR,YAAMC,KAAK,GAAGC,QAAQ,CAACF,IAAI,CAACJ,OAAL,CAAa,GAAb,EAAkB,EAAlB,CAAD,CAAtB;AACA,UAAIO,UAAU,GAAG,KAAjB;;AACA,UAAIH,IAAI,CAACI,QAAL,CAAc,GAAd,CAAJ,EAAwB;AACtBD,QAAAA,UAAU,GAAG,IAAb;AACD;;AACD,aAAO,IAAIE,0BAAJ,CAAkB;AAAEJ,QAAAA,KAAF;AAASK,QAAAA,QAAQ,EAAEH;AAAnB,OAAlB,CAAP;AACD,KAPD,CADmB,EASnBI,MAAM,CAACC,IAAP,CAAYf,GAAZ,EAAiB,KAAjB,CATmB,CAArB;AAYA,WAAO,IAAIxB,cAAJ,CAAmB;AACxBI,MAAAA,SAAS,EAAEqB,UAAU,GACjBa,MAAM,CAACC,IAAP,CAAYC,UAAA,CAAWf,UAAX,CAAZ,CADiB,GAEjBgB,SAHoB;AAIxBpC,MAAAA,QAJwB;AAKxBC,MAAAA,QAAQ,EAAEgB,YALc;AAMxBd,MAAAA,cAAc,EAAEqB,YANQ;AAOxBtB,MAAAA,OAPwB;AAQxBI,MAAAA,OAAO,EAAEA,OAAO,GACZ2B,MAAM,CAACC,IAAP,CAAY5B,OAAO,CAACgB,OAAR,CAAgB,IAAhB,EAAsB,EAAtB,CAAZ,EAAuC,KAAvC,CADY,GAEZc,SAVoB;AAWxB7B,MAAAA,MAAM,EAAEA,MAAM,IAAI6B;AAXM,KAAnB,CAAP;AAaD;;;;AAhEazC,2BAAA,GAAgB0C,QAAD;AAC3B,QAAM7B,GAAG,GAAG6B,QAAQ,CAACC,OAAT,EAAZ;AACA,QAAMtC,QAAQ,GAAGQ,GAAG,CAACf,IAAI,CAACO,QAAN,CAApB;AACA,QAAMC,QAAQ,GAAGO,GAAG,CAACf,IAAI,CAACQ,QAAN,CAApB;AACA,QAAME,cAAc,GAAGsB,0BAAa,CAACc,YAAd,CAA2B/B,GAAG,CAACf,IAAI,CAACU,cAAN,CAA9B,CAAvB;AACA,QAAMD,OAAO,GAAGM,GAAG,CAACf,IAAI,CAACS,OAAN,CAAH,GAAoBM,GAAG,CAACf,IAAI,CAACS,OAAN,CAAvB,GAAwCkC,SAAxD;AACA,QAAM9B,OAAO,GAAGE,GAAG,CAACf,IAAI,CAACa,OAAN,CAAH,GAAoBE,GAAG,CAACf,IAAI,CAACa,OAAN,CAAvB,GAAwC8B,SAAxD;AACA,QAAMrC,SAAS,GAAGS,GAAG,CAACf,IAAI,CAACM,SAAN,CAAH,GACdS,GAAG,CAACf,IAAI,CAACM,SAAN,CAAH,CAAoBuC,OAApB,EADc,GAEdF,SAFJ;AAGA,QAAM7B,MAAM,GAAGC,GAAG,CAACf,IAAI,CAACc,MAAN,CAAH,GAAmBC,GAAG,CAACf,IAAI,CAACc,MAAN,CAAtB,GAAsC6B,SAArD;AAEA,SAAO,IAAIzC,cAAJ,CAAmB;AACxBI,IAAAA,SADwB;AAExBC,IAAAA,QAFwB;AAGxBC,IAAAA,QAHwB;AAIxBC,IAAAA,OAJwB;AAKxBC,IAAAA,cALwB;AAMxBG,IAAAA,OANwB;AAOxBC,IAAAA;AAPwB,GAAnB,CAAP;AASD,CArBa;;AAuBAZ,uBAAA,GAAY6C,YAAD;AACvB,QAAMH,QAAQ,GAAG/C,gBAAgB,CAACkD,YAAD,CAAjC;AACA,SAAO7C,cAAc,CAAC4C,YAAf,CAA4BF,QAA5B,CAAP;AACD,CAHa;;ACpHhB,MAAM;AAAE9C,iBAAAA,eAAF;AAAiBD,oBAAAA;AAAjB,IAAsCE,mBAA5C;AAEA,IAAKC,MAAL;;AAAA,WAAKA;AACHA,EAAAA,2BAAA,cAAA;AACAA,EAAAA,2BAAA,cAAA;AACD,CAHD,EAAKA,MAAI,KAAJA,MAAI,KAAA,CAAT;;AAKA,MAAagD,qBAAqB7C;AAMhCC,EAAAA,YAAY6C,WAAmB3C;AAC7B;;AAHF,wBAAA,GAAkB,MAAMd,qBAAqB,CAACG,cAA9C;;AAQO,qBAAA,GAAe,MAAM,KAAKW,SAA1B;;AACA,qBAAA,GAAe,MAAM,KAAK2C,SAA1B;;AAEA,mBAAA,GAAa;AAClB,YAAMlC,GAAG,GAAgB,EAAzB;;AACA,UAAI,KAAKT,SAAT,EAAoB;AAClBS,QAAAA,GAAG,CAACf,MAAI,CAACM,SAAN,CAAH,GAAsB,IAAIU,qBAAJ,CACpB,KAAKV,SADe,EAEpBR,eAAa,CAACmB,IAAd,CAAmBC,MAAnB,EAFoB,CAAtB;AAID;;AACDH,MAAAA,GAAG,CAACf,MAAI,CAACiD,SAAN,CAAH,GAAsB,KAAKA,SAA3B;AACA,aAAO,IAAIjC,qBAAJ,CAAaD,GAAb,CAAP;AACD,KAVM;;AAPL,SAAKkC,SAAL,GAAiBA,SAAjB;AACA,SAAK3C,SAAL,GAAiBA,SAAjB;AACD;;;;AAiBa0C,yBAAA,GAAgBJ,QAAD;AAC3B,QAAM7B,GAAG,GAAG6B,QAAQ,CAACC,OAAT,EAAZ;AACA,QAAMI,SAAS,GAAGlC,GAAG,CAACf,MAAI,CAACiD,SAAN,CAArB;AACA,QAAM3C,SAAS,GAAGS,GAAG,CAACf,MAAI,CAACM,SAAN,CAAH,GACdS,GAAG,CAACf,MAAI,CAACM,SAAN,CAAH,CAAoBuC,OAApB,EADc,GAEdF,SAFJ;AAIA,SAAO,IAAIK,YAAJ,CAAiBC,SAAjB,EAA4B3C,SAA5B,CAAP;AACD,CARa;;AAUA0C,qBAAA,GAAYD,YAAD;AACvB,QAAMH,QAAQ,GAAG/C,kBAAgB,CAACkD,YAAD,CAAjC;AACA,SAAOC,YAAY,CAACF,YAAb,CAA0BF,QAA1B,CAAP;AACD,CAHa;;AC5ChB,MAAM;AAAE/C,oBAAAA;AAAF,IAAuBE,mBAA7B;AAEA,IAAKC,MAAL;;AAAA,WAAKA;AACHA,EAAAA,yBAAA,YAAA;AACAA,EAAAA,iCAAA,oBAAA;AACAA,EAAAA,8BAAA,iBAAA;AACAA,EAAAA,sBAAA,SAAA;AACAA,EAAAA,2BAAA,cAAA;AACD,CAND,EAAKA,MAAI,KAAJA,MAAI,KAAA,CAAT;;AAgBA,MAAakD,mBAAmB/C;AAS9BC,EAAAA,YAAYC;AACV;;AAHF,wBAAA,GAAkB,MAAMb,qBAAqB,CAACI,YAA9C;;AAWO,mBAAA,GAAa,MAAM,KAAKa,OAAxB;;AACA,gBAAA,GAAU,MAAM,KAAK0C,IAArB;;AACA,qBAAA,GAAe,MAAM,KAAKC,SAA1B;;AACA,2BAAA,GAAqB,MAAM,KAAKC,eAAhC;;AACA,wBAAA,GAAkB,MAAM,KAAKC,YAA7B;;AAEA,mBAAA,GAAa;AAClB,YAAMvC,GAAG,GAAgB,EAAzB;AACAA,MAAAA,GAAG,CAACf,MAAI,CAACS,OAAN,CAAH,GAAoB,KAAKA,OAAzB;AACAM,MAAAA,GAAG,CAACf,MAAI,CAACmD,IAAN,CAAH,GAAiB,KAAKA,IAAtB;AACApC,MAAAA,GAAG,CAACf,MAAI,CAACqD,eAAN,CAAH,GAA4B,KAAKA,eAAjC;AACAtC,MAAAA,GAAG,CAACf,MAAI,CAACsD,YAAN,CAAH,GAAyB,KAAKA,YAA9B;AACAvC,MAAAA,GAAG,CAACf,MAAI,CAACoD,SAAN,CAAH,GAAsB,KAAKA,SAA3B;AAEA,aAAO,IAAIpC,qBAAJ,CAAaD,GAAb,CAAP;AACD,KATM;;AAbL,SAAKN,OAAL,GAAeJ,IAAI,CAACI,OAApB;AACA,SAAK0C,IAAL,GAAY9C,IAAI,CAAC8C,IAAjB;AACA,SAAKE,eAAL,GAAuBhD,IAAI,CAACgD,eAA5B;AACA,SAAKC,YAAL,GAAoBjD,IAAI,CAACiD,YAAzB;AACA,SAAKF,SAAL,GAAiB/C,IAAI,CAAC+C,SAAtB;AACD;;AAyCgC,SAAnBG,mBAAmB,CAC/B9C,OAD+B,EAE/B4C,eAF+B,EAG/BC,YAH+B,EAI/BH,IAJ+B,EAK/BC,SAL+B;AAO/B,WAAO,IAAIF,UAAJ,CAAe;AACpBzC,MAAAA,OADoB;AAEpB4C,MAAAA,eAFoB;AAGpBC,MAAAA,YAHoB;AAIpBF,MAAAA,SAJoB;AAKpBD,MAAAA;AALoB,KAAf,CAAP;AAOD;;;;AApCaD,uBAAA,GAAgBN,QAAD;AAC3B,QAAM7B,GAAG,GAAG6B,QAAQ,CAACC,OAAT,EAAZ;AACA,QAAMpC,OAAO,GAAGM,GAAG,CAACf,MAAI,CAACS,OAAN,CAAnB;AACA,QAAM0C,IAAI,GAAGpC,GAAG,CAACf,MAAI,CAACmD,IAAN,CAAhB;AACA,QAAMC,SAAS,GAAGrC,GAAG,CAACf,MAAI,CAACoD,SAAN,CAArB;AACA,QAAMC,eAAe,GAAGtC,GAAG,CAACf,MAAI,CAACqD,eAAN,CAA3B;AACA,QAAMC,YAAY,GAAGvC,GAAG,CAACf,MAAI,CAACsD,YAAN,CAAxB;AAEA,SAAO,IAAIJ,UAAJ,CAAe;AACpBzC,IAAAA,OADoB;AAEpB0C,IAAAA,IAFoB;AAGpBE,IAAAA,eAHoB;AAIpBC,IAAAA,YAJoB;AAKpBF,IAAAA;AALoB,GAAf,CAAP;AAOD,CAfa;;AAiBAF,mBAAA,GAAYH,YAAD;AACvB,QAAMH,QAAQ,GAAG/C,kBAAgB,CAACkD,YAAD,CAAjC;AACA,SAAOG,UAAU,CAACJ,YAAX,CAAwBF,QAAxB,CAAP;AACD,CAHa;;AC9EhB;AACA,MAGaY,uBAAuB,GAAG,CAACC,IAAD,EAAeC,UAAf;AACrC;AACA,QAAMC,IAAI,GAAGC,KAAK,CAACC,eAAN,CAAsBJ,IAAtB,CAAb;AACA,QAAMK,SAAS,GAAGH,IAAI,CAACI,MAAL,CAAYL,UAAZ,CAAlB;AACA,QAAM7C,OAAO,GACX,OAAOmD,8BAAe,CAACF,SAAS,CAACA,SAAX,EAAsB,IAAtB,CAAf,CAA2CG,QAA3C,CAAoD,KAApD,CADT;AAEA,SAAOC,gCAAiB,CAACrD,OAAD,CAAxB;AACD,CAPM;AASP,MAAasD,qBAAqB,GAAG,CACnCtD,OADmC,EAEnC4C,IAFmC,EAGnCW,WAHmC,EAInCC,QAJmC;AAMnC,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,WAApB,EAAiCE,CAAC,EAAlC,EAAsC;AACpC,UAAMrC,IAAI,UAAUqC,GAApB;;AACA,UAAMC,QAAQ,GAAGf,uBAAuB,CAACC,IAAD,EAAOxB,IAAP,CAAxC;;AACA,QAAIpB,OAAO,CAAC2D,WAAR,MAAyBD,QAAQ,CAACC,WAAT,EAA7B,EAAqD;AACnD,gBAAUH,cAAcC,GAAxB;AACD;AACF;;AACD,SAAO,IAAP;AACD,CAdM;;ACTPG,sBAAS,CACPC,MAAM,CAACC,MAAP,CAAcnF,qBAAd,EACGoF,MADH,CACWC,EAAD,IAAQ,CAAC,CAACA,EAAE,CAAC3D,MAAH,EADpB,EAEGH,GAFH,CAEQ8D,EAAD,IAAQA,EAAE,CAAC3D,MAAH,EAFf,CADO,CAAT;;;;;;;;;;;;;;;;"}