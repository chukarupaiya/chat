{"version":3,"file":"metamask-airgapped-keyring.esm.js","sources":["../src/MetaMaskInteractionProvider.ts","../src/MetaMaskKeyring.ts"],"sourcesContent":["import { InteractionProvider } from \"@keystonehq/base-eth-keyring\";\nimport { EventEmitter } from \"events\";\nimport { ObservableStore } from \"@metamask/obs-store\";\nimport {\n  EthSignRequest,\n  ETHSignature,\n  CryptoHDKey,\n  CryptoAccount,\n} from \"@keystonehq/bc-ur-registry-eth\";\nimport * as uuid from \"uuid\";\n\nexport type IMemState = ObservableStore<{\n  _version: number;\n  sync: {\n    reading: boolean;\n  };\n  sign: {\n    request?: {\n      requestId: string;\n      payload: {\n        type: string;\n        cbor: string;\n      };\n      title?: string;\n      description?: string;\n    };\n  };\n}>;\n\nexport class MetamaskInteractionProvider\n  extends EventEmitter\n  implements InteractionProvider\n{\n  static instance: MetamaskInteractionProvider;\n  public memStore: IMemState;\n  constructor() {\n    super();\n    if (MetamaskInteractionProvider.instance) {\n      return MetamaskInteractionProvider.instance;\n    }\n    this.memStore = new ObservableStore({\n      sync: { reading: false },\n      sign: {},\n      _version: 1,\n    });\n    MetamaskInteractionProvider.instance = this;\n  }\n\n  private cleanSyncListeners = () => {\n    this.removeAllListeners(\"keystone-sync_success-hdkey\");\n    this.removeAllListeners(\"keystone-sync_success-account\");\n    this.removeAllListeners(\"keystone-sync_cancel\");\n  };\n\n  private cleanSignListeners = (requestId: string) => {\n    this.removeAllListeners(`${requestId}-signed`);\n    this.removeAllListeners(`${requestId}-canceled`);\n  };\n\n  readCryptoHDKeyOrCryptoAccount = (): Promise<CryptoHDKey | CryptoAccount> => {\n    return new Promise((resolve, reject) => {\n      this.memStore.updateState({\n        sync: { reading: true },\n      });\n      this.on(\"keystone-sync_success-hdkey\", (cbor: string) => {\n        const cryptoHDKey = CryptoHDKey.fromCBOR(Buffer.from(cbor, \"hex\"));\n        this.resetState();\n        resolve(cryptoHDKey);\n      });\n      this.on(\"keystone-sync_success-account\", (cbor: string) => {\n        const cryptoAccount = CryptoAccount.fromCBOR(Buffer.from(cbor, \"hex\"));\n        this.resetState();\n        resolve(cryptoAccount);\n      });\n      this.on(\"keystone-sync_cancel\", () => {\n        this.resetState();\n        reject(\n          new Error(\n            \"KeystoneError#sync_cancel. Sync process canceled, please retry\"\n          )\n        );\n      });\n    });\n  };\n\n  submitCryptoHDKey = (cbor: string) => {\n    this.emit(\"keystone-sync_success-hdkey\", cbor);\n  };\n\n  submitCryptoAccount = (cbor: string) => {\n    this.emit(\"keystone-sync_success-account\", cbor);\n  };\n\n  cancelSync = () => {\n    this.emit(\"keystone-sync_cancel\");\n  };\n\n  requestSignature = (\n    signRequest: EthSignRequest,\n    requestTitle?: string,\n    requestDescription?: string\n  ): Promise<ETHSignature> => {\n    return new Promise((resolve, reject) => {\n      const ur = signRequest.toUR();\n      const requestIdBuffer = signRequest.getRequestId();\n      const requestId = uuid.stringify(requestIdBuffer);\n      const signPayload = {\n        requestId,\n        payload: {\n          type: ur.type,\n          cbor: ur.cbor.toString(\"hex\"),\n        },\n        title: requestTitle,\n        description: requestDescription,\n      };\n      this.memStore.updateState({\n        sign: {\n          request: signPayload,\n        },\n      });\n\n      this.once(`${requestId}-signed`, (cbor: string) => {\n        const ethSignature = ETHSignature.fromCBOR(Buffer.from(cbor, \"hex\"));\n        this.resetState();\n        resolve(ethSignature);\n      });\n      this.once(`${requestId}-canceled`, () => {\n        this.resetState();\n        reject(\n          new Error(\"KeystoneError#Tx_canceled. Signing canceled, please retry\")\n        );\n      });\n    });\n  };\n\n  submitSignature = (requestId: string, cbor: string) => {\n    this.emit(`${requestId}-signed`, cbor);\n  };\n\n  cancelRequestSignature = () => {\n    const signPayload = this.memStore.getState().sign.request;\n    if (signPayload) {\n      const { requestId } = signPayload;\n      this.memStore.updateState({ sign: {} });\n      this.emit(`${requestId}-canceled`);\n    }\n  };\n\n  public reset = () => {\n    this.cleanSyncListeners();\n    const signPayload = this.memStore.getState().sign.request;\n    if (signPayload) {\n      const { requestId } = signPayload;\n      this.cleanSignListeners(requestId);\n    }\n    this.resetState();\n  };\n\n  private resetState = () => {\n    this.memStore.updateState({\n      sync: {\n        reading: false,\n      },\n      sign: {},\n    });\n  };\n}\n","import { BaseKeyring, StoredKeyring } from \"@keystonehq/base-eth-keyring\";\nimport { MetamaskInteractionProvider } from \"./MetaMaskInteractionProvider\";\nimport {\n  TransactionFactory,\n  Transaction,\n  FeeMarketEIP1559Transaction,\n} from \"@ethereumjs/tx\";\nimport { DataType, EthSignRequest } from \"@keystonehq/bc-ur-registry-eth\";\nimport * as uuid from \"uuid\";\nimport rlp from \"rlp\";\n\nexport class MetaMaskKeyring extends BaseKeyring {\n  static type = BaseKeyring.type;\n  static instance: MetaMaskKeyring;\n  constructor(opts?: StoredKeyring) {\n    super(opts);\n    if (MetaMaskKeyring.instance) {\n      MetaMaskKeyring.instance.deserialize(opts);\n      return MetaMaskKeyring.instance;\n    }\n    MetaMaskKeyring.instance = this;\n  }\n\n  getInteraction = (): MetamaskInteractionProvider => {\n    return new MetamaskInteractionProvider();\n  };\n\n  resetStore = (): void => {\n    this.getInteraction().reset();\n  };\n\n  getMemStore = () => {\n    return this.getInteraction().memStore;\n  };\n\n  async signTransaction(address: string, tx: any): Promise<any> {\n    const dataType =\n      tx.type === 0 ? DataType.transaction : DataType.typedTransaction;\n    let messageToSign;\n    if (tx.type === 0) {\n      messageToSign = rlp.encode((tx as Transaction).getMessageToSign(false));\n    } else {\n      messageToSign = (tx as FeeMarketEIP1559Transaction).getMessageToSign(\n        false\n      );\n    }\n    const hdPath = await this._pathFromAddress(address);\n    const chainId = tx.common.chainId();\n    const requestId = uuid.v4();\n    const ethSignRequest = EthSignRequest.constructETHRequest(\n      messageToSign,\n      dataType,\n      hdPath,\n      this.xfp,\n      requestId,\n      chainId,\n      address\n    );\n    const { r, s, v } = await this.requestSignature(\n      requestId,\n      ethSignRequest,\n      \"Scan with your Keystone\",\n      'After your Keystone has signed the transaction, click on \"Scan Keystone\" to receive the signature'\n    );\n    const txJson = tx.toJSON();\n    txJson.v = v;\n    txJson.s = s;\n    txJson.r = r;\n    txJson.type = tx.type;\n    const transaction = TransactionFactory.fromTxData(txJson, {\n      common: tx.common,\n    });\n    return transaction;\n  }\n\n  removeAccount = (address) => {\n    if (\n      !this.accounts.map((a) => a.toLowerCase()).includes(address.toLowerCase())\n    ) {\n      throw new Error(`Address ${address} not found in this keyring`);\n    }\n    this.accounts = this.accounts.filter(\n      (a) => a.toLowerCase() !== address.toLowerCase()\n    );\n  };\n\n  forgetDevice = () => {\n    //common props\n    this.page = 0;\n    this.perPage = 5;\n    this.accounts = [];\n    this.currentAccount = 0;\n    this.name = \"QR Hardware\";\n    this.initialized = false;\n\n    //hd props;\n    this.xfp = \"\";\n    this.xpub = \"\";\n    this.hdPath = \"\";\n    this.indexes = {};\n    this.hdk = undefined;\n\n    //pubkey props;\n    this.paths = {};\n  };\n\n  submitCryptoHDKey = this.getInteraction().submitCryptoHDKey;\n  submitCryptoAccount = this.getInteraction().submitCryptoAccount;\n  submitSignature = this.getInteraction().submitSignature;\n\n  cancelSync = this.getInteraction().cancelSync;\n  cancelSignRequest = this.getInteraction().cancelRequestSignature;\n}\n"],"names":["MetamaskInteractionProvider","EventEmitter","constructor","removeAllListeners","requestId","Promise","resolve","reject","memStore","updateState","sync","reading","on","cbor","cryptoHDKey","CryptoHDKey","fromCBOR","Buffer","from","resetState","cryptoAccount","CryptoAccount","Error","emit","signRequest","requestTitle","requestDescription","ur","toUR","requestIdBuffer","getRequestId","uuid","signPayload","payload","type","toString","title","description","sign","request","once","ethSignature","ETHSignature","getState","cleanSyncListeners","cleanSignListeners","instance","ObservableStore","_version","MetaMaskKeyring","BaseKeyring","opts","getInteraction","reset","address","accounts","map","a","toLowerCase","includes","filter","page","perPage","currentAccount","name","initialized","xfp","xpub","hdPath","indexes","hdk","undefined","paths","submitCryptoHDKey","submitCryptoAccount","submitSignature","cancelSync","cancelRequestSignature","deserialize","signTransaction","tx","dataType","DataType","transaction","typedTransaction","messageToSign","rlp","encode","getMessageToSign","_pathFromAddress","chainId","common","ethSignRequest","EthSignRequest","constructETHRequest","r","s","v","requestSignature","txJson","toJSON","TransactionFactory","fromTxData"],"mappings":"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"}