{"version":3,"sources":["webpack://matic-ethers/webpack/bootstrap","webpack://matic-ethers/external \"ethers\"","webpack://matic-ethers/external \"@maticnetwork/maticjs\"","webpack://matic-ethers/./src/helpers/do_nothing.ts","webpack://matic-ethers/./src/utils/eth_receipt_to_matic_receipt.ts","webpack://matic-ethers/./src/utils/eth_tx_to_matic_tx.ts","webpack://matic-ethers/./src/utils/matic_big_number.ts","webpack://matic-ethers/./src/helpers/transaction_write_result.ts","webpack://matic-ethers/./src/ethers/ethjs_method.ts","webpack://matic-ethers/./src/ethers/ethjs_contract.ts","webpack://matic-ethers/./src/ethers/web3_client.ts","webpack://matic-ethers/./src/utils/eth_block_to_matic_block.ts","webpack://matic-ethers/./src/index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","doNothing","ethReceiptToMaticReceipt","receipt","maticReceipt","gasUsed","toNumber","cumulativeGasUsed","ethTxToMaticTx","tx","maticTx","gasPrice","toString","gas","gasLimit","transactionHash","hash","bn_","from","isBN","MaticBigNumber","isBigNumber","base","hex","this","toHexString","hexStripZeros","indexOf","slice","toBuffer","add","sub","mul","div","lte","lt","gte","gt","eq","promise","onTransactionHash","onTransactionError","then","response","setTimeout","onTransactionReceipt","wait","catch","err","getReceipt","Promise","res","rej","getTransactionHash","logger","contract_","methodName","args","address","toBigNumber","toConfig_","config","to","nonce","data","type","maxFeePerGas","maxPriorityFeePerGas","encodeABI","interface","encodeFunctionData","estimateGas","result","read","log","getMethod_","_isBigNumber","write","contract","method","arguments","provider","_isProvider","signer","getSigner","getBlock","blockHashOrBlockNumber","block","getBlockWithTransaction","send","hexValue","rawBlock","formatter","blockWithTransactions","stateRoot","transactionsRoot","receiptsRoot","transactions","map","baseFeePerGas","ethBlockToMaticBlock","getChainId","getBalance","balance","getAccounts","getAddress","ensureTransactionNotNull_","message","getTransaction","getTransactionCount","blockNumber","getTransactionReceipt","getGasPrice","toEthTxConfig_","encodeParameters","params","types","defaultAbiCoder","encode","toHex","returnType","isAddress","toLowerCase","replace","Buffer","isBuffer","hexlify","JSON","stringify","isFinite","hexToNumber","hexToNumberString","signTypedData","typedData","domain","EIP712Domain","_signTypedData","etheriumSha3","val","solidityKeccak256","sendRPCRequest","request","chainId","sendTransaction","getContract","abi","decodeParameters","hexString","decode","setup","matic","utils","Web3Client","BN"],"mappings":"2BACE,IAAIA,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUC,QAGnC,IAAIC,EAASJ,EAAiBE,GAAY,CACzCG,EAAGH,EACHI,GAAG,EACHH,QAAS,IAUV,OANAI,EAAQL,GAAUM,KAAKJ,EAAOD,QAASC,EAAQA,EAAOD,QAASF,GAG/DG,EAAOE,GAAI,EAGJF,EAAOD,QA0Df,OArDAF,EAAoBQ,EAAIF,EAGxBN,EAAoBS,EAAIV,EAGxBC,EAAoBU,EAAI,SAASR,EAASS,EAAMC,GAC3CZ,EAAoBa,EAAEX,EAASS,IAClCG,OAAOC,eAAeb,EAASS,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEZ,EAAoBkB,EAAI,SAAShB,GACX,oBAAXiB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAeb,EAASiB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAeb,EAAS,aAAc,CAAEmB,OAAO,KAQvDrB,EAAoBsB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQrB,EAAoBqB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFA1B,EAAoBkB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOrB,EAAoBU,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRzB,EAAoB6B,EAAI,SAAS1B,GAChC,IAAIS,EAAST,GAAUA,EAAOqB,WAC7B,WAAwB,OAAOrB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAH,EAAoBU,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRZ,EAAoBa,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG/B,EAAoBkC,EAAI,GAIjBlC,EAAoBA,EAAoBmC,EAAI,G,gBClFrDhC,EAAOD,QAAUkC,QAAQ,W,cCAzBjC,EAAOD,QAAUkC,QAAQ,0B,wMCAZC,EAAY,aCGZC,EAA2B,SAACC,GAErC,IAAMC,EAAoCD,EAK1C,OAHAC,EAAaC,QAAUF,EAAQE,QAAQC,WACvCF,EAAaG,kBAAoBJ,EAAQI,kBAAkBD,WAEpDF,GCPEI,EAAiB,SAACC,GAC3B,IAAMC,EAA4BD,EAOlC,OANAC,EAAQC,SAAWF,EAAGE,SAASC,WAC/BF,EAAQG,IAAMJ,EAAGK,SAASR,WACzBI,EAAgBI,SAAWL,EAAGK,SAASR,WACxCI,EAAQzB,MAAQwB,EAAGxB,MAAM2B,WACzBF,EAAQK,gBAAkBN,EAAGO,KAEtBN,G,oTCRX,cAGI,WAAYzB,GAAZ,MACI,cAAO,K,OACP,EAAKgC,IAAM,YAAUC,KAAKjC,G,EAoFlC,OAzFoC,OAQzB,EAAAkC,KAAP,SAAYlC,GACR,OAAIA,aAAiBmC,GAGd,YAAUC,YAAYpC,IAGjC,YAAA2B,SAAA,SAASU,GACL,GAAa,KAATA,EAAa,CACb,IAAIC,EAAMC,KAAKP,IAAIQ,cAEnB,OAA6B,KAD7BF,EAAM,QAAMG,cAAcH,IACfI,QAAQ,MAAcJ,EAAIK,MAAM,GAAKL,EAEpD,OAAOC,KAAKP,IAAIL,YAGpB,YAAAN,SAAA,WACI,OAAOkB,KAAKP,IAAIX,YAGpB,YAAAuB,SAAA,WACI,OAAQL,KAAaP,IAAIY,YAG7B,YAAAC,IAAA,SAAI7C,GAIA,OAAO,IAAImC,EAHAI,KAAKP,IAAIa,IAChB,YAAUZ,KAAKjC,EAAM2B,eAK7B,YAAAmB,IAAA,SAAI9C,GAIA,OAAO,IAAImC,EAHAI,KAAKP,IAAIc,IAChB,YAAUb,KAAKjC,EAAM2B,eAK7B,YAAAoB,IAAA,SAAI/C,GAIA,OAAO,IAAImC,EAHAI,KAAKP,IAAIe,IAChB,YAAUd,KAAKjC,EAAM2B,eAK7B,YAAAqB,IAAA,SAAIhD,GAIA,OAAO,IAAImC,EAHAI,KAAKP,IAAIgB,IAChB,YAAUf,KAAKjC,EAAM2B,eAK7B,YAAAsB,IAAA,SAAIjD,GACA,OAAOuC,KAAKP,IAAIiB,IACZ,YAAUhB,KAAKjC,EAAM2B,cAI7B,YAAAuB,GAAA,SAAGlD,GACC,OAAOuC,KAAKP,IAAIkB,GACZ,YAAUjB,KAAKjC,EAAM2B,cAI7B,YAAAwB,IAAA,SAAInD,GACA,OAAOuC,KAAKP,IAAImB,IACZ,YAAUlB,KAAKjC,EAAM2B,cAI7B,YAAAyB,GAAA,SAAGpD,GACC,OAAOuC,KAAKP,IAAIoB,GACZ,YAAUnB,KAAKjC,EAAM2B,cAI7B,YAAA0B,GAAA,SAAGrD,GACC,OAAOuC,KAAKP,IAAIqB,GACZ,YAAUpB,KAAKjC,EAAM2B,cAGjC,EAzFA,CAAoC,iBCEpC,aAgBI,WAAoB2B,GAApB,WAAoB,KAAAA,UAdpB,KAAAC,kBAAoBvC,EACpB,KAAAwC,mBAAqBxC,EAcjBsC,EAAQG,MAAK,SAAAC,GACT,EAAKH,kBAAkBG,EAAS3B,MAChC4B,YAAW,WACH,EAAKC,sBACLF,EAASG,OAAOJ,MAAK,SAAAvC,GACjB,EAAK0C,qBAAqB1C,QAGnC,MACJ4C,OAAM,SAAAC,GACL,EAAKP,mBAAmBO,MAUpC,OA9BI,YAAAC,WAAA,sBACI,OAAO,IAAIC,SAAsC,SAACC,EAAKC,GACnD,EAAKP,qBAAuBM,EAC5B,EAAKV,mBAAqBW,KAC3BV,MAAK,SAAAvC,GACJ,OAAOD,EAAyBC,OAmBxC,YAAAkD,mBAAA,sBACI,OAAO,IAAIH,SAAgB,SAACC,EAAKC,GAC7B,EAAKZ,kBAAoBW,EACzB,EAAKV,mBAAqBW,MAGtC,EArCA,G,mgBCDA,cACI,WAAYE,EAAwBC,EAA6BC,EAAoBC,GAArF,MACI,YAAMH,IAAO,K,OADmB,EAAAC,YAA6B,EAAAC,aAAoB,EAAAC,O,EA6DzF,OA9DoC,OAKhC,sBAAI,sBAAO,C,IAAX,WACI,OAAOjC,KAAK+B,UAAUG,S,gCAG1B,YAAAC,YAAA,SAAY1E,GACR,OAAOA,EAAQ,YAAUiC,KAAKjC,GAASA,GAGnC,YAAA2E,UAAR,SAAkBC,QAAA,IAAAA,MAAA,IACd,IAAMF,EAAcnC,KAAKmC,YACzB,MAAO,CACHG,GAAID,EAAOC,GACX5C,KAAM2C,EAAO3C,KACbP,SAAUgD,EAAYE,EAAOlD,UAC7BG,SAAU6C,EAAYE,EAAO/C,UAC7B7B,MAAO0E,EAAYE,EAAO5E,OAC1B8E,MAAOF,EAAOE,MAEdC,KAAMH,EAAOG,KACbC,KAAMJ,EAAOI,KACbC,aAAcP,EAAYE,EAAOK,cACjCC,qBAAsBR,EAAYE,EAAOM,wBAKjD,YAAAC,UAAA,WACI,OAAO5C,KAAK+B,UAAUc,UAAUC,mBAC5B9C,KAAKgC,WAAYhC,KAAKiC,OAK9B,YAAAc,YAAA,SAAYV,G,MACR,YADQ,IAAAA,MAAA,KACD,EAAArC,KAAK+B,UAAUgB,aAAY/C,KAAKgC,YAAW,UAAIhC,KAAKiC,KAAM,CAAAjC,KAAKoC,UAAUC,MAASnB,MAAK,SAAA8B,GAC1F,OAAOA,EAAOlE,eAItB,YAAAmE,KAAA,SAAKZ,GAED,OADArC,KAAK8B,OAAOoB,IAAI,yBAA0Bb,GACnCrC,KAAKmD,WAAWd,GAAQnB,MAAK,SAAA8B,GAIhC,OAHIA,EAAOI,eACPJ,EAASA,EAAO5D,YAEb4D,MAIP,YAAAG,WAAR,SAAmBd,G,MACf,YADe,IAAAA,MAAA,KACR,EAAArC,KAAK+B,WAAU/B,KAAKgC,YAAW,UAAIhC,KAAKiC,KAAM,CAAAjC,KAAKoC,UAAUC,OAGxE,YAAAgB,MAAA,SAAMhB,GAEF,OADArC,KAAK8B,OAAOoB,IAAI,yBAA0Bb,GACnC,IAAI,EAAuBrC,KAAKmD,WAAWd,KAE1D,EA9DA,CAAoC,sB,2UCApC,cAII,WAAYH,EAAiBoB,EAAoBxB,GAAjD,MACI,YAAMI,EAASJ,IAAO,K,OACtB,EAAKwB,SAAWA,E,EASxB,OAfmC,OAS/B,YAAAC,OAAA,SAAOvB,G,IAAoB,wDAEvB,OADAhC,KAAK8B,OAAOoB,IAAI,cAAeM,WACxB,IAAI,EACPxD,KAAK8B,OAAQ9B,KAAKsD,SAAUtB,EAAYC,IAGpD,EAfA,CAAmC,gB,2UCKnC,cAKI,WAAYwB,EAAmC3B,GAA/C,MACI,YAAMA,IAAO,K,OALjB,EAAA/E,KAAO,QAME0G,EAA4BC,aAC7B,EAAKD,SAAWA,EAChB,EAAKE,OAAS,EAAKF,SAASG,cAG5B,EAAKD,OAAUF,EACf,EAAKA,SAAaA,EAA4B,U,EAwN1D,OArOqC,OAmBjC,YAAAI,SAAA,SAASC,GACL,OAAO9D,KAAKyD,SAASI,SAASC,GAAwB5C,MAAK,SAAA6C,GACvD,OAAOA,MAIf,YAAAC,wBAAA,SAAwBF,GAEpB,IAAML,EAAWzD,KAAKyD,SACtB,OAAOA,EAASQ,KACZ,uBACA,CAAC,QAAMC,SAASJ,IAAyB,IAC3C5C,MAAK,SAAAiD,GACH,IAAMJ,EAAQN,EAASW,UAAUC,sBAAsBF,GASvD,OARAJ,EAAiB,UAAIN,EAASW,UAAU5E,KAAK2E,EAASG,WACtDP,EAAwB,iBAAIN,EAASW,UAAU5E,KAAK2E,EAASI,kBAC7DR,EAAoB,aAAIN,EAASW,UAAU5E,KAAK2E,EAASK,cAEzDT,EAAMU,aAAeV,EAAMU,aAAaC,KAAI,SAAAzF,GACxC,OAAOD,EAAeC,MC5CF,SAAC8E,GAMjC,OALAA,EAAMlF,QAAUkF,EAAMlF,QAAQC,WAC9BiF,EAAMzE,SAAWyE,EAAMzE,SAASR,WAC3BiF,EAAcY,gBACdZ,EAAcY,cAAgBZ,EAAMY,cAAc1E,eAEhD8D,EDyCQa,CAAqBb,OAKpC,YAAAc,WAAA,WACI,OAAO7E,KAAK2D,OAAOkB,cAGvB,YAAAC,WAAA,SAAW5C,GACP,OAAOlC,KAAKyD,SAASqB,WAAW5C,GAAShB,MAAK,SAAA6D,GAC1C,OAAOA,EAAQ3F,eAIvB,YAAA4F,YAAA,WACI,OAAOhF,KAAK2D,OAAOsB,aAAa/D,MAAK,SAAAgB,GACjC,MAAO,CAACA,OAIR,YAAAgD,0BAAR,SAAkC1C,GAC9B,IAAKA,EACD,KAAM,CACFC,KAAM,sBACN0C,QAAS,sFAKrB,YAAAC,eAAA,SAAe7F,GAAf,WACI,OAAOS,KAAKyD,SAAS2B,eAAe7F,GAAiB2B,MAAK,SAAA8B,GAGtD,OAFA,EAAKkC,0BAA0BlC,GAExBhE,EAAegE,OAI9B,YAAAqC,oBAAA,SAAoBnD,EAAiBoD,GACjC,OAAOtF,KAAKyD,SAAS4B,oBAAoBnD,EAASoD,IAGtD,YAAAC,sBAAA,SAAsBhG,GAAtB,WACI,OAAOS,KAAKyD,SAAS8B,sBAAsBhG,GAAiB2B,MAAK,SAAA8B,GAG7D,OAFA,EAAKkC,0BAA0BlC,GAExBtE,EAAyBsE,OAIxC,YAAAwC,YAAA,WACI,OAAOxF,KAAKyD,SAAS+B,cAActE,MAAK,SAAA8B,GACpC,OAAOA,EAAO5D,eAItB,YAAA2D,YAAA,SAAYV,GACR,OAAOrC,KAAKyD,SAASV,YACjB/C,KAAKyF,eAAepD,IACtBnB,MAAK,SAAAzD,GACH,OAAOA,EAAMqB,eAIrB,YAAA4G,iBAAA,SAAiBC,EAAeC,GAC5B,OAAO,QAAMC,gBAAgBC,OAAOF,EAAOD,IAG/C,YAAAI,MAAA,SAAMtI,EAAOuI,GAET,GAAI,QAAMC,UAAUxI,GAChB,OAAOuI,EAAa,UAAY,KAAOvI,EAAMyI,cAAcC,QAAQ,OAAQ,IAG/E,GAAqB,kBAAV1I,EACP,OAAOuI,EAAa,OAASvI,EAAQ,OAAS,OAGlD,GAAI2I,OAAOC,SAAS5I,GAChB,MAAO,KAAOA,EAAM2B,SAAS,OAGjC,GAAqB,iBAAV3B,GAAwBA,IAAU,YAAUoC,YAAYpC,GAC/D,OAAOuI,EAAa,SAAW,QAAMM,QAAQC,KAAKC,UAAU/I,IAIhE,GAAqB,iBAAVA,EAAoB,CAC3B,GAA6B,IAAzBA,EAAM0C,QAAQ,QAAyC,IAAzB1C,EAAM0C,QAAQ,OAC5C,OAAO6F,EAAa,SAAW,QAAMM,QAAQ7I,GAC1C,GAA4B,IAAxBA,EAAM0C,QAAQ,OAAuC,IAAxB1C,EAAM0C,QAAQ,MAClD,OAAO6F,EAAa,QAAUvI,EAC3B,IAAKgJ,SAAShJ,GACjB,OAAOuI,EAAa,SAAW,QAAMM,QAAQ7I,GAIrD,OAAOuI,EAAcvI,EAAQ,EAAI,SAAW,UAAa,QAAM6I,QAAQ7I,IAG3E,YAAAiJ,YAAA,SAAYjJ,GACR,OAAO,YAAUiC,KAAKjC,GAAOqB,YAGjC,YAAA6H,kBAAA,SAAkBlJ,GACd,OAAO,YAAUiC,KAAKjC,GAAO2B,YAGjC,YAAAwH,cAAA,SAAcjD,EAAQkD,GACX,IAAAC,EAAiCD,EAAS,OAAlCjB,EAAyBiB,EAAS,MAAlBpJ,EAASoJ,EAAS,QAIjD,OAHGjB,EAAMmB,qBACEnB,EAAMmB,aAEV/G,KAAK2D,OAAOqD,eAAeF,EAAQlB,EAAOnI,IAGrD,YAAAwJ,aAAA,W,IAAA,WAAa,kDACT,IAAMrB,EAAQnI,EAAMiH,KAAI,SAAAwC,GACpB,OAAO,EAAKnB,MAAMmB,GAAK,MAE3B,OAAO,QAAMC,kBAAkBvB,EAAOnI,IAG1C,YAAA2J,eAAA,SAAeC,GACX,OAAOrH,KAAKyD,SAASQ,KAAKoD,EAAQ9D,OAAQ8D,EAAQ1B,QAAQzE,MAAK,SAAA8B,GAC3D,MAAO,CACHA,OAAQA,OAKZ,YAAAyC,eAAR,SAAuBpD,GACnB,MAAO,CACHiF,QAASjF,EAAOiF,QAChB9E,KAAMH,EAAOG,KACb9C,KAAM2C,EAAO3C,KACbJ,SAAU+C,EAAO/C,SACjBH,SAAUkD,EAAOlD,SACjBoD,MAAOF,EAAOE,MACdD,GAAID,EAAOC,GACX7E,MAAO4E,EAAO5E,QAItB,YAAA4F,MAAA,SAAMhB,GACF,IAAIrB,EAAoBvC,EAGlBuE,EAAS,CACXnB,mBAAkB,WACd,OAAO,IAAIH,SAAQ,SAAAC,GACfX,EAAoBW,OAgBhC,OAZA3B,KAAK2D,OAAO4D,gBACRvH,KAAKyF,eAAepD,IACtBnB,MAAK,SAAAC,GACHH,EAAkBG,EAAS3B,MAC3BwD,EAAOvB,WAAa,WAChB,OAAON,EAASG,OAAOJ,MAAK,SAAAvC,GACxB,OAAOD,EAAyBC,UAGzC4C,OAAM,SAAAC,GACgBA,KAElBwB,GAGX,YAAAC,KAAA,SAAKZ,GACD,OAAOrC,KAAK2D,OAAOhH,KACfqD,KAAKyF,eAAepD,KAI5B,YAAAmF,YAAA,SAAYtF,EAAiBuF,GACzB,OAAO,IAAI,EACPvF,EACA,IAAI,WAASA,EAASuF,EAAKzH,KAAK2D,QAChC3D,KAAK8B,SAIb,YAAA4F,iBAAA,SAAiBC,EAAW/B,GACxB,OAAO,QAAMC,gBAAgB+B,OAAOhC,EAAO+B,IAGnD,EArOA,CAAqC,kBEHrC,2BAQA,OAPI,YAAAE,MAAA,SAAMC,GACFA,EAAMC,MAAMC,WAAa,EACzBF,EAAMC,MAAME,GAAK,EACjBH,EAAMC,MAAMpI,KAAO,SAAClC,GAChB,OAAO,YAAUoC,YAAYpC,KAGzC,EARA,GAae","file":"matic-ethers.node.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","module.exports = require(\"ethers\");","module.exports = require(\"@maticnetwork/maticjs\");","export const doNothing = () => {\r\n\r\n};","import { ITransactionReceipt } from \"@maticnetwork/maticjs\";\r\nimport { providers } from \"ethers\";\r\n\r\nexport const ethReceiptToMaticReceipt = (receipt: providers.TransactionReceipt) => {\r\n\r\n    const maticReceipt: ITransactionReceipt = receipt as any;\r\n\r\n    maticReceipt.gasUsed = receipt.gasUsed.toNumber();\r\n    maticReceipt.cumulativeGasUsed = receipt.cumulativeGasUsed.toNumber();\r\n\r\n    return maticReceipt;\r\n};\r\n","import { IBlock, ITransactionData, ITransactionResult } from \"@maticnetwork/maticjs\";\r\nimport { providers } from \"ethers\";\r\n\r\nexport const ethTxToMaticTx = (tx: providers.TransactionResponse) => {\r\n    const maticTx: ITransactionData = tx as any;\r\n    maticTx.gasPrice = tx.gasPrice.toString();\r\n    maticTx.gas = tx.gasLimit.toNumber();\r\n    (maticTx as any).gasLimit = tx.gasLimit.toNumber();\r\n    maticTx.value = tx.value.toString();\r\n    maticTx.transactionHash = tx.hash;\r\n\r\n    return maticTx;\r\n};\r\n","import { BaseBigNumber } from \"@maticnetwork/maticjs\";\r\nimport { BigNumber, utils } from \"ethers\";\r\n\r\nexport class MaticBigNumber extends BaseBigNumber {\r\n    private bn_: BigNumber;\r\n\r\n    constructor(value) {\r\n        super();\r\n        this.bn_ = BigNumber.from(value);\r\n    }\r\n\r\n    static isBN(value) {\r\n        if (value instanceof MaticBigNumber) {\r\n            return true;\r\n        }\r\n        return BigNumber.isBigNumber(value);\r\n    }\r\n\r\n    toString(base?) {\r\n        if (base === 16) {\r\n            let hex = this.bn_.toHexString();\r\n            hex = utils.hexStripZeros(hex);\r\n            return hex.indexOf('0x') === 0 ? hex.slice(2) : hex;\r\n        }\r\n        return this.bn_.toString();\r\n    }\r\n\r\n    toNumber() {\r\n        return this.bn_.toNumber();\r\n    }\r\n\r\n    toBuffer() {\r\n        return (this as any).bn_.toBuffer();\r\n    }\r\n\r\n    add(value: BaseBigNumber) {\r\n        const bn = this.bn_.add(\r\n            BigNumber.from(value.toString())\r\n        );\r\n        return new MaticBigNumber(bn);\r\n    }\r\n\r\n    sub(value: BaseBigNumber) {\r\n        const bn = this.bn_.sub(\r\n            BigNumber.from(value.toString())\r\n        );\r\n        return new MaticBigNumber(bn);\r\n    }\r\n\r\n    mul(value: BaseBigNumber) {\r\n        const bn = this.bn_.mul(\r\n            BigNumber.from(value.toString())\r\n        );\r\n        return new MaticBigNumber(bn);\r\n    }\r\n\r\n    div(value: BaseBigNumber) {\r\n        const bn = this.bn_.div(\r\n            BigNumber.from(value.toString())\r\n        );\r\n        return new MaticBigNumber(bn);\r\n    }\r\n\r\n    lte(value: BaseBigNumber) {\r\n        return this.bn_.lte(\r\n            BigNumber.from(value.toString())\r\n        );\r\n    }\r\n\r\n    lt(value: BaseBigNumber) {\r\n        return this.bn_.lt(\r\n            BigNumber.from(value.toString())\r\n        );\r\n    }\r\n\r\n    gte(value: BaseBigNumber) {\r\n        return this.bn_.gte(\r\n            BigNumber.from(value.toString())\r\n        );\r\n    }\r\n\r\n    gt(value: BaseBigNumber) {\r\n        return this.bn_.gt(\r\n            BigNumber.from(value.toString())\r\n        );\r\n    }\r\n\r\n    eq(value: BaseBigNumber) {\r\n        return this.bn_.eq(\r\n            BigNumber.from(value.toString())\r\n        );\r\n    }\r\n}","import { ITransactionWriteResult } from \"@maticnetwork/maticjs\";\r\nimport { providers } from \"ethers\";\r\nimport { ethReceiptToMaticReceipt } from \"../utils\";\r\nimport { doNothing } from \"./do_nothing\";\r\n\r\nexport class TransactionWriteResult implements ITransactionWriteResult {\r\n\r\n    onTransactionHash = doNothing as any;\r\n    onTransactionError = doNothing as any;\r\n\r\n    onTransactionReceipt: Function;\r\n\r\n    getReceipt() {\r\n        return new Promise<providers.TransactionReceipt>((res, rej) => {\r\n            this.onTransactionReceipt = res;\r\n            this.onTransactionError = rej;\r\n        }).then(receipt => {\r\n            return ethReceiptToMaticReceipt(receipt);\r\n        });\r\n    }\r\n\r\n    constructor(private promise: Promise<providers.TransactionResponse>) {\r\n        promise.then(response => {\r\n            this.onTransactionHash(response.hash);\r\n            setTimeout(() => {\r\n                if (this.onTransactionReceipt) {\r\n                    response.wait().then(receipt => {\r\n                        this.onTransactionReceipt(receipt);\r\n                    });\r\n                }\r\n            }, 0);\r\n        }).catch(err => {\r\n            this.onTransactionError(err);\r\n        });\r\n    }\r\n\r\n    getTransactionHash() {\r\n        return new Promise<string>((res, rej) => {\r\n            this.onTransactionHash = res;\r\n            this.onTransactionError = rej;\r\n        });\r\n    }\r\n}\r\n","import { BaseContractMethod, ITransactionRequestConfig, ITransactionWriteResult, Logger } from \"@maticnetwork/maticjs\";\r\nimport { BigNumber, Contract, PopulatedTransaction } from \"ethers\";\r\nimport { TransactionWriteResult } from \"../helpers\";\r\n\r\nexport class ContractMethod extends BaseContractMethod {\r\n    constructor(logger: Logger, private contract_: Contract, private methodName, private args) {\r\n        super(logger);\r\n    }\r\n\r\n    get address() {\r\n        return this.contract_.address;\r\n    }\r\n\r\n    toBigNumber(value) {\r\n        return value ? BigNumber.from(value) : value;\r\n    }\r\n\r\n    private toConfig_(config: ITransactionRequestConfig = {}) {\r\n        const toBigNumber = this.toBigNumber;\r\n        return {\r\n            to: config.to,\r\n            from: config.from,\r\n            gasPrice: toBigNumber(config.gasPrice),\r\n            gasLimit: toBigNumber(config.gasLimit),\r\n            value: toBigNumber(config.value),\r\n            nonce: config.nonce,\r\n            // chainId: config.chainId,\r\n            data: config.data,\r\n            type: config.type,\r\n            maxFeePerGas: toBigNumber(config.maxFeePerGas),\r\n            maxPriorityFeePerGas: toBigNumber(config.maxPriorityFeePerGas),\r\n\r\n        } as PopulatedTransaction;\r\n    }\r\n\r\n    encodeABI() {\r\n        return this.contract_.interface.encodeFunctionData(\r\n            this.methodName, this.args\r\n        );\r\n        // return this.contract_.interface.functions.encode[this.methodName](...this.args);\r\n    }\r\n\r\n    estimateGas(config: ITransactionRequestConfig = {}) {\r\n        return this.contract_.estimateGas[this.methodName](...this.args, this.toConfig_(config)).then(result => {\r\n            return result.toNumber();\r\n        });\r\n    }\r\n\r\n    read(config: ITransactionRequestConfig) {\r\n        this.logger.log(\"sending tx with config\", config);\r\n        return this.getMethod_(config).then(result => {\r\n            if (result._isBigNumber) {\r\n                result = result.toString();\r\n            }\r\n            return result;\r\n        });\r\n    }\r\n\r\n    private getMethod_(config: ITransactionRequestConfig = {}) {\r\n        return this.contract_[this.methodName](...this.args, this.toConfig_(config));\r\n    }\r\n\r\n    write(config: ITransactionRequestConfig) {\r\n        this.logger.log(\"sending tx with config\", config);\r\n        return new TransactionWriteResult(this.getMethod_(config));\r\n    }\r\n}\r\n","import { BaseContract } from \"@maticnetwork/maticjs\";\r\nimport { Contract } from \"ethers\";\r\nimport { ContractMethod } from \"./ethjs_method\";\r\n\r\nexport class EthJsContract extends BaseContract {\r\n\r\n    contract: Contract;\r\n\r\n    constructor(address: string, contract: Contract, logger) {\r\n        super(address, logger);\r\n        this.contract = contract;\r\n    }\r\n\r\n    method(methodName: string, ...args) {\r\n        this.logger.log(\"args method\", arguments);\r\n        return new ContractMethod(\r\n            this.logger, this.contract, methodName, args\r\n        );\r\n    }\r\n}","import { providers, Wallet, utils, Contract, ethers, BigNumber } from \"ethers\";\r\nimport { EthJsContract } from \"./ethjs_contract\";\r\nimport { doNothing } from \"../helpers\";\r\nimport { BaseWeb3Client, IBlockWithTransaction, IError, IJsonRpcRequestPayload, IJsonRpcResponse, ITransactionRequestConfig, ITransactionWriteResult } from \"@maticnetwork/maticjs\";\r\nimport { ethBlockToMaticBlock, ethReceiptToMaticReceipt, ethTxToMaticTx } from \"../utils\";\r\n\r\ntype ETHER_PROVIDER = providers.JsonRpcProvider;\r\ntype ETHER_SIGNER = providers.JsonRpcSigner;\r\n\r\nexport class EtherWeb3Client extends BaseWeb3Client {\r\n    name = 'ETHER';\r\n    provider: ETHER_PROVIDER;\r\n    signer: ETHER_SIGNER;\r\n\r\n    constructor(provider: ETHER_PROVIDER | Wallet, logger) {\r\n        super(logger);\r\n        if ((provider as ETHER_PROVIDER)._isProvider) {\r\n            this.provider = provider as ETHER_PROVIDER;\r\n            this.signer = this.provider.getSigner();\r\n        }\r\n        else {\r\n            this.signer = (provider as any);\r\n            this.provider = ((provider as Wallet).provider) as any;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    getBlock(blockHashOrBlockNumber) {\r\n        return this.provider.getBlock(blockHashOrBlockNumber).then(block => {\r\n            return block as any;\r\n        });\r\n    }\r\n\r\n    getBlockWithTransaction(blockHashOrBlockNumber) {\r\n        // return this.provider.getBlockWithTransactions(blockHashOrBlockNumber)\r\n        const provider = this.provider;\r\n        return provider.send(\r\n            'eth_getBlockByNumber',\r\n            [utils.hexValue(blockHashOrBlockNumber), true]\r\n        ).then(rawBlock => {\r\n            const block = provider.formatter.blockWithTransactions(rawBlock);\r\n            block['stateRoot'] = provider.formatter.hash(rawBlock.stateRoot);\r\n            block['transactionsRoot'] = provider.formatter.hash(rawBlock.transactionsRoot);\r\n            block['receiptsRoot'] = provider.formatter.hash(rawBlock.receiptsRoot);\r\n\r\n            block.transactions = block.transactions.map(tx => {\r\n                return ethTxToMaticTx(tx as any);\r\n            }) as any;\r\n\r\n            return ethBlockToMaticBlock(block) as any;\r\n        });\r\n    }\r\n\r\n\r\n    getChainId() {\r\n        return this.signer.getChainId();\r\n    }\r\n\r\n    getBalance(address) {\r\n        return this.provider.getBalance(address).then(balance => {\r\n            return balance.toString();\r\n        });\r\n    }\r\n\r\n    getAccounts() {\r\n        return this.signer.getAddress().then(address => {\r\n            return [address];\r\n        });\r\n    }\r\n\r\n    private ensureTransactionNotNull_(data) {\r\n        if (!data) {\r\n            throw {\r\n                type: 'invalid_transaction' as any,\r\n                message: 'Could not retrieve transaction. Either it is invalid or might be in archive node.'\r\n            } as IError;\r\n        }\r\n    }\r\n\r\n    getTransaction(transactionHash: string) {\r\n        return this.provider.getTransaction(transactionHash).then(result => {\r\n            this.ensureTransactionNotNull_(result);\r\n\r\n            return ethTxToMaticTx(result);\r\n        });\r\n    }\r\n\r\n    getTransactionCount(address: string, blockNumber: any) {\r\n        return this.provider.getTransactionCount(address, blockNumber);\r\n    }\r\n\r\n    getTransactionReceipt(transactionHash: string) {\r\n        return this.provider.getTransactionReceipt(transactionHash).then(result => {\r\n            this.ensureTransactionNotNull_(result);\r\n            \r\n            return ethReceiptToMaticReceipt(result);\r\n        });\r\n    }\r\n\r\n    getGasPrice() {\r\n        return this.provider.getGasPrice().then(result => {\r\n            return result.toString();\r\n        });\r\n    }\r\n\r\n    estimateGas(config) {\r\n        return this.provider.estimateGas(\r\n            this.toEthTxConfig_(config)\r\n        ).then(value => {\r\n            return value.toNumber();\r\n        });\r\n    }\r\n\r\n    encodeParameters(params: any[], types: any[]) {\r\n        return utils.defaultAbiCoder.encode(types, params);\r\n    }\r\n\r\n    toHex(value, returnType) {\r\n\r\n        if (utils.isAddress(value)) {\r\n            return returnType ? 'address' : '0x' + value.toLowerCase().replace(/^0x/i, '');\r\n        }\r\n\r\n        if (typeof value === 'boolean') {\r\n            return returnType ? 'bool' : value ? '0x01' : '0x00';\r\n        }\r\n\r\n        if (Buffer.isBuffer(value)) {\r\n            return '0x' + value.toString('hex');\r\n        }\r\n\r\n        if (typeof value === 'object' && !!value && !BigNumber.isBigNumber(value)) {\r\n            return returnType ? 'string' : utils.hexlify(JSON.stringify(value));\r\n        }\r\n\r\n        // if its a negative number, pass it through numberToHex\r\n        if (typeof value === 'string') {\r\n            if (value.indexOf('-0x') === 0 || value.indexOf('-0X') === 0) {\r\n                return returnType ? 'int256' : utils.hexlify(value);\r\n            } else if (value.indexOf('0x') === 0 || value.indexOf('0X') === 0) {\r\n                return returnType ? 'bytes' : value;\r\n            } else if (!isFinite(value as any)) {\r\n                return returnType ? 'string' : utils.hexlify(value);\r\n            }\r\n        }\r\n\r\n        return returnType ? (value < 0 ? 'int256' : 'uint256') : utils.hexlify(value);\r\n    }\r\n\r\n    hexToNumber(value) {\r\n        return BigNumber.from(value).toNumber();\r\n    }\r\n    \r\n    hexToNumberString(value) {\r\n        return BigNumber.from(value).toString();\r\n    }\r\n\r\n    signTypedData(signer, typedData) {\r\n        const {domain, types, message: value} = typedData;\r\n        if(types.EIP712Domain) {\r\n            delete types.EIP712Domain;\r\n        }\r\n        return this.signer._signTypedData(domain, types, value);\r\n    }\r\n\r\n    etheriumSha3(...value) {\r\n        const types = value.map(val => {\r\n            return this.toHex(val, true);\r\n        });\r\n        return utils.solidityKeccak256(types, value);\r\n    }\r\n\r\n    sendRPCRequest(request: IJsonRpcRequestPayload) {\r\n        return this.provider.send(request.method, request.params).then(result => {\r\n            return {\r\n                result: result\r\n            } as IJsonRpcResponse;\r\n        });\r\n    }\r\n\r\n    private toEthTxConfig_(config: ITransactionRequestConfig) {\r\n        return {\r\n            chainId: config.chainId,\r\n            data: config.data,\r\n            from: config.from as any,\r\n            gasLimit: config.gasLimit,\r\n            gasPrice: config.gasPrice as any,\r\n            nonce: config.nonce,\r\n            to: config.to,\r\n            value: config.value as any\r\n        };\r\n    }\r\n\r\n    write(config: ITransactionRequestConfig) {\r\n        let onTransactionHash = doNothing as any;\r\n        let onTransactionError = doNothing as any;\r\n\r\n        const result = {\r\n            getTransactionHash() {\r\n                return new Promise(res => {\r\n                    onTransactionHash = res;\r\n                });\r\n            }\r\n        } as ITransactionWriteResult;\r\n        this.signer.sendTransaction(\r\n            this.toEthTxConfig_(config)\r\n        ).then(response => {\r\n            onTransactionHash(response.hash);\r\n            result.getReceipt = () => {\r\n                return response.wait().then(receipt => {\r\n                    return ethReceiptToMaticReceipt(receipt);\r\n                });\r\n            };\r\n        }).catch(err => {\r\n            onTransactionError = err;\r\n        });\r\n        return result;\r\n    }\r\n\r\n    read(config: ITransactionRequestConfig) {\r\n        return this.signer.call(\r\n            this.toEthTxConfig_(config)\r\n        );\r\n    }\r\n\r\n    getContract(address: string, abi: any) {\r\n        return new EthJsContract(\r\n            address,\r\n            new Contract(address, abi, this.signer),\r\n            this.logger\r\n        );\r\n    }\r\n\r\n    decodeParameters(hexString, types: any[]) {\r\n        return utils.defaultAbiCoder.decode(types, hexString) as any;\r\n    }\r\n\r\n}\r\n","import { IBlock } from \"@maticnetwork/maticjs\";\r\nimport { providers } from \"ethers\";\r\n\r\nexport const ethBlockToMaticBlock = (block: providers.Block) => {\r\n    block.gasUsed = block.gasUsed.toNumber() as any;\r\n    block.gasLimit = block.gasLimit.toNumber() as any;\r\n    if ((block as any).baseFeePerGas) {\r\n        (block as any).baseFeePerGas = block.baseFeePerGas.toHexString();\r\n    }\r\n    return block as any as IBlock;\r\n};\r\n","import { ITransactionRequestConfig, IPlugin, ITransactionResult, Converter, utils } from \"@maticnetwork/maticjs\";\r\nimport { BigNumber, ethers } from \"ethers\";\r\nimport { EtherWeb3Client } from \"./ethers\";\r\nimport { MaticBigNumber } from \"./utils\";\r\n\r\n\r\nexport class Web3ClientPlugin implements IPlugin {\r\n    setup(matic) {\r\n        matic.utils.Web3Client = EtherWeb3Client as any;\r\n        matic.utils.BN = MaticBigNumber;\r\n        matic.utils.isBN = (value) => {\r\n            return BigNumber.isBigNumber(value);\r\n        };\r\n    }\r\n}\r\n\r\nexport * from \"./ethers\";\r\n\r\n/* tslint:disable-next-line */\r\nexport default Web3ClientPlugin;"],"sourceRoot":""}