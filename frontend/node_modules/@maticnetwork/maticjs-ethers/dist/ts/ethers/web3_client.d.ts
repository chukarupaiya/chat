import { providers, Wallet } from "ethers";
import { EthJsContract } from "./ethjs_contract";
import { BaseWeb3Client, IJsonRpcRequestPayload, IJsonRpcResponse, ITransactionRequestConfig, ITransactionWriteResult } from "@maticnetwork/maticjs";
declare type ETHER_PROVIDER = providers.JsonRpcProvider;
declare type ETHER_SIGNER = providers.JsonRpcSigner;
export declare class EtherWeb3Client extends BaseWeb3Client {
    name: string;
    provider: ETHER_PROVIDER;
    signer: ETHER_SIGNER;
    constructor(provider: ETHER_PROVIDER | Wallet, logger: any);
    getBlock(blockHashOrBlockNumber: any): Promise<any>;
    getBlockWithTransaction(blockHashOrBlockNumber: any): Promise<any>;
    getChainId(): Promise<number>;
    getBalance(address: any): Promise<string>;
    getAccounts(): Promise<string[]>;
    private ensureTransactionNotNull_;
    getTransaction(transactionHash: string): Promise<import("@maticnetwork/maticjs").ITransactionData>;
    getTransactionCount(address: string, blockNumber: any): Promise<number>;
    getTransactionReceipt(transactionHash: string): Promise<import("@maticnetwork/maticjs").ITransactionReceipt>;
    getGasPrice(): Promise<string>;
    estimateGas(config: any): Promise<number>;
    encodeParameters(params: any[], types: any[]): string;
    toHex(value: any, returnType: any): string;
    hexToNumber(value: any): number;
    hexToNumberString(value: any): string;
    signTypedData(signer: any, typedData: any): Promise<string>;
    etheriumSha3(...value: any[]): string;
    sendRPCRequest(request: IJsonRpcRequestPayload): Promise<IJsonRpcResponse>;
    private toEthTxConfig_;
    write(config: ITransactionRequestConfig): ITransactionWriteResult;
    read(config: ITransactionRequestConfig): Promise<string>;
    getContract(address: string, abi: any): EthJsContract;
    decodeParameters(hexString: any, types: any[]): any;
}
export {};
