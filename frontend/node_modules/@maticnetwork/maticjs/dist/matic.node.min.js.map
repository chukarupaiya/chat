{"version":3,"sources":["webpack://Matic/webpack/bootstrap","webpack://Matic/external \"ethereumjs-util\"","webpack://Matic/./node_modules/safe-buffer/index.js","webpack://Matic/external \"@ethereumjs/common\"","webpack://Matic/external \"merkle-patricia-tree\"","webpack://Matic/external \"@ethereumjs/block\"","webpack://Matic/external \"buffer\"","webpack://Matic/external \"node-fetch\"","webpack://Matic/./src/abstracts/contract_method.ts","webpack://Matic/./src/enums/log_event_signature.ts","webpack://Matic/./src/enums/error_type.ts","webpack://Matic/./src/abstracts/base_web3_client.ts","webpack://Matic/./src/abstracts/base_contract.ts","webpack://Matic/./src/abstracts/base_big_number.ts","webpack://Matic/./src/implementation/bn.ts","webpack://Matic/./src/utils/use.ts","webpack://Matic/./src/utils/event_bus.ts","webpack://Matic/./src/utils/error_helper.ts","webpack://Matic/./src/utils/logger.ts","webpack://Matic/./src/utils/merge.ts","webpack://Matic/./src/utils/map_promise.ts","webpack://Matic/./src/constant.ts","webpack://Matic/./src/utils/merkle_tree.ts","webpack://Matic/./src/utils/proof_util.ts","webpack://Matic/./src/utils/http_request.ts","webpack://Matic/./src/utils/converter.ts","webpack://Matic/./src/utils/web3_side_chain_client.ts","webpack://Matic/./src/utils/promise_resolve.ts","webpack://Matic/./src/utils/base_token.ts","webpack://Matic/./src/services/abi_service.ts","webpack://Matic/./src/config.ts","webpack://Matic/./src/services/network_service.ts","webpack://Matic/./src/services/index.ts","webpack://Matic/./src/utils/set_proof_api_url.ts","webpack://Matic/./src/utils/resolve.ts","webpack://Matic/./src/utils/bridge_client.ts","webpack://Matic/./src/utils/abi_manager.ts","webpack://Matic/./src/utils/not_implemented.ts","webpack://Matic/./src/utils/hermez_bridge_client.ts","webpack://Matic/./src/utils/index.ts","webpack://Matic/./src/pos/pos_token.ts","webpack://Matic/./src/pos/erc20.ts","webpack://Matic/./src/pos/root_chain_manager.ts","webpack://Matic/./src/pos/exit_util.ts","webpack://Matic/./src/pos/root_chain.ts","webpack://Matic/./src/pos/erc721.ts","webpack://Matic/./src/pos/erc1155.ts","webpack://Matic/./src/pos/index.ts","webpack://Matic/./src/default.ts","webpack://Matic/./src/hermez/hermez_token.ts","webpack://Matic/./src/hermez/erc20.ts","webpack://Matic/./src/hermez/hermez_bridge.ts","webpack://Matic/./src/hermez/bridge_util.ts","webpack://Matic/./src/hermez/index.ts","webpack://Matic/./src/index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","buffer","Buffer","copyProps","src","dst","SafeBuffer","arg","encodingOrOffset","length","from","alloc","allocUnsafe","allocUnsafeSlow","TypeError","size","fill","encoding","buf","undefined","SlowBuffer","Log_Event_Signature","ERROR_TYPE","logger","getRootHash","startBlock","endBlock","this","sendRPCRequest","jsonrpc","method","params","Number","id","Date","getTime","then","payload","String","result","getAccountsUsingRPC_","address","isBN","throwNotImplemented","toString","base","toNumber","toBuffer","add","sub","mul","div","lte","lt","gte","gt","eq","use","plugin","pluginInstance","setup","defaultExport","eventBusPromise","executor","promise","Promise","eventBus","EventBus","on","emit","ctx","_events","_ctx","event","cb","push","off","index","indexOf","splice","events","all","map","args","resolve","destroy","type","info","message","getMsg_","throw","errMsg","AllowedOnChild","AllowedOnRoot","ProofAPINotSet","BurnTxNotCheckPointed","EIP1559NotSupported","NullSpenderAddress","Unknown","enableLog","isEnabled","log","console","error","merge","assign","obj","mapPromise","values","converter","option","valuesLength","concurrency","limitPromiseRun","promises","maps","val","runPromises","promiseResult","concat","promiseResolve","Permit","utils","sha3","keccak256","leaves","Error","depth","Math","ceil","Array","pow","zeros","layers","createHashes","nodes","treeLevel","left","right","data","getLeaves","getLayers","getRoot","getProof","leaf","compare","proof","siblingIndex","floor","verify","root","isArray","hash","node","getFastMerkleProof","web3","blockNumber","merkleTreeDepth","log2","reversedProof","targetIndex","offset","leftBound","rightBound","nLeaves","pivotLeaf","newLeftBound","queryRootHash","subTreeMerkleRoot","newRightBound","min","expectedHeight","recursiveZeroHash","subTreeHeight","heightDifference","remainingNodesHash","reverse","buildBlockProof","maticWeb3","ProofUtil","client","rootHash","catch","_","subHash","encodeParameters","getReceiptProof","receipt","block","requestConcurrency","receiptsVal","receiptPromise","stateSyncTxHash","getStateSyncTxHash","receiptsTrie","transactions","forEach","tx","transactionHash","getTransactionReceipt","receipts","siblingReceipt","path","encode","transactionIndex","rawReceipt","getReceiptBytes","put","findPath","remaining","blockHash","parentNodes","stack","raw","getRawHeader","receiptTrie","isTypedReceipt","decode","hexType","toHex","status","number","encodedData","cumulativeGasUsed","logsBloom","logs","topics","_block","difficulty","common","chain","Mainnet","hardfork","London","fromHeaderData","fetch","default","baseUrl","url","query","keys","encodeURIComponent","join","headers","res","json","post","body","JSON","stringify","amount","dataType","BN","slice","chainIdToConfigPath","1","5","137","80001","1422","init","config","parent","defaultConfig","child","Web3Client","UnstoppableDomains","resolution","provider","network","version","abiManager","err","getABI","getConfig","isEIP1559Supported","chainId","promiseAny","promisesArray","promiseErrors","counter","reject","MAX_AMOUNT","ADDRESS_ZERO","DAI_PERMIT_TYPEHASH","EIP_2612_PERMIT_TYPEHASH","EIP_2612_DOMAIN_TYPEHASH","UNISWAP_DOMAIN_TYPEHASH","contractParam","getContract","contract_","bridgeType","abi","getContract_","isParent","tokenAddress","getChainId","chainId_","getClient","processWrite","validateTxOption_","createTransactionConfig","txConfig","isWrite","returnTransaction","encodeABI","to","write","sendTransaction","readTransaction","read","TransactionOptionNotObject","processRead","parentDefaultConfig","childDefaultConfig","clientChainId","maxFeePerGas","maxPriorityFeePerGas","isMaxFeeProvided","gasLimit","estimateGas","nonce","getTransactionCount","transferERC20","contract","transferERC721","tokenId","checkForNonNative","methodName","AllowedOnNonNativeTokens","checkForRoot","checkForChild","transferERC1155","param","httpRequest","HttpRequest","contractName","getAddress","abiStoreUrl","hermezBridgeService","createUrlForPos","getBlockIncluded","headerBlockNumber","decimalHeaderBlockNumber","parseInt","start","end","getMerkleProofForHermez","networkID","depositCount","getBridgeTransactionDetails","deposit","service","setProofApi","setHermezProofApi","hermezNetwork","split","reduce","prev","curr","isCheckPointed","txHash","exitUtil","isDeposited","depositTxHash","token","lastStateId","targetLog","find","q","rootStateId","decodeParameters","rootStateIdBN","cache","networkName","targetBridgeABICache","abiForContract","setABI","abiStore","isDepositClaimable","rootChainBridge","bridgeUtil","getBridgeLogData","details","ready_for_claim","isWithdrawExitable","childChainBridge","isClaimed","isExited","BaseWeb3Client","getPOSContracts","rootChainManager","getPredicateAddress","predicateAddress","tokenType","typeToPredicateMethod","isWithdrawn","eventSignature","getExitHash","exitHash","isExitProcessed","isWithdrawnOnIndex","withdrawExitPOS","burnTxHash","isFast","buildPayloadForExit","exit","getContracts","getBalance","userAddress","getAllowance","spenderAddress","predicatePromise","approve","approveMax","amountInABI","depositEther_","withdrawStart","withdrawExit_","burnTransactionHash","burnEventSignature","Erc20Transfer","withdrawExit","withdrawExitFaster","isWithdrawExited","transfer","client_","depositData","exitPayload","rootChain","maticClient_","getLogIndex_","logEventSig","logIndex","findIndex","toLowerCase","getAllLogIndices_","logIndices","getChainBlockInfo","getLastChildBlock","getTransaction","lastChildBlock","txBlockNumber","isCheckPointed_","getRootBlockInfo","rootBlockNumber","findRootBlockFromChild","rootBlockInfo","getRootBlockInfoFromAPI","headerBlock","getBlockProof","getBlockProofFromAPI","blockProof","blockInfo","getBlockWithTransaction","rootBlockInfoResult","blockProofResult","receiptProof","encodePayload_","timestamp","transactionsRoot","receiptsRoot","buildMultiplePayloadsForExit","payloads","headerNumber","receiptParentNodes","blockResult","nibbleArr","byte","etheriumSha3","rootChainDefaultBlock","childBlockNumber","bigOne","bigtwo","checkPointInterval","currentHeaderBlock","ans","mid","headerStart","headerEnd","validateMany_","tokenIds","getTokensCount","options","count","getTokenIdAtIndexForUser","getAllTokens","limit","isApproved","isApprovedAll","approveAll","depositMany","tokensInHex","withdrawStartWithMetaData","withdrawStartMany","Erc721Transfer","withdrawExitOnIndex","isWithdrawExitedMany","Erc721BatchTransfer","isWithdrawExitedOnIndex","erc1155","getAddress_","addresses","addressConfig","approveAll_","predicateAddressPromise","approveAllForMintable","amounts","emptyHex","a","amountsInHex","Erc1155Transfer","withdrawExitMany","Erc1155BatchTransfer","withdrawExitFasterMany","mainPOSContracts","RootChainManagerProxy","mainPlasmaContracts","RootChainProxy","RootChainManager","erc20","getContracts_","erc721","depositEther","POSClient","getHermezContracts","parentBridge","childBridge","getBridgeAddress","contractAddress","isEtherToken","isApprovalNeeded","getOriginTokenInfo","tokenInfo","permitData","networkId","bridgeAsset","depositWithPermit","getPermitData","depositClaim","buildPayloadForClaim","claimAsset","smtProof","mainnetExitRoot","rollupExitRoot","originNetwork","originTokenAddress","destinationNetwork","destinationAddress","metadata","withdraw","withdrawWithPermit","getPermit","contractInstance","permitTypehash","DAI","DOMAIN_TYPEHASH","EIP712DOMAIN_HASH","domainTypehash","EIP_2612","UNISWAP","getTypedData_","permitType","account","typedData","types","EIP712Domain","primaryType","domain","verifyingContract","holder","spender","expiry","allowed","owner","deadline","getSignatureParameters_","signature","v","hexToNumber","includes","encodePermitFunctionData_","signatureParams","getPermitData_","getAccounts","nameMethod","nonceMethod","signTypedData","signatureParameters","HermezToken","getMappedTokenInfo","precalculatedMappedTokenInfo","wrappedToken","networkID_","BRIDGE_TOPIC","decodedBridgeData_","filter","decodedData","inputs","leafType","getBridgeLogData_","getProof_","merkle_proof","main_exit_root","rollup_exit_root","mainHermezContracts","hermezContracts","PolygonZkEVMBridgeProxy","PolygonZkEVMBridge"],"mappings":"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","file":"matic.node.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","module.exports = require(\"ethereumjs-util\");","/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\n/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.prototype = Object.create(Buffer.prototype)\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n","module.exports = require(\"@ethereumjs/common\");","module.exports = require(\"merkle-patricia-tree\");","module.exports = require(\"@ethereumjs/block\");","module.exports = require(\"buffer\");","module.exports = require(\"node-fetch\");","import { ITransactionRequestConfig, ITransactionWriteResult } from \"../interfaces\";\nimport { Logger } from \"../utils\";\n\nexport abstract class BaseContractMethod {\n    constructor(public logger: Logger) {\n\n    }\n    abstract get address(): string;\n    abstract read<T>(tx?: ITransactionRequestConfig, defaultBlock?: number | string): Promise<T>;\n    abstract write(tx: ITransactionRequestConfig,): ITransactionWriteResult;\n    abstract estimateGas(tx: ITransactionRequestConfig,): Promise<number>;\n    abstract encodeABI(): any;\n}","export enum Log_Event_Signature {\n    // PlasmaErc20WithdrawEventSig = '0xebff2602b3f468259e1e99f613fed6691f3a6526effe6ef3e768ba7ae7a36c4f',\n    // PlasmaErc721WithdrawEventSig = '0x9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb',\n    Erc20Transfer = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n    Erc721Transfer = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n    Erc1155Transfer = '0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62',\n    Erc721BatchTransfer = '0xf871896b17e9cb7a64941c62c188a4f5c621b86800e3d15452ece01ce56073df',\n    Erc1155BatchTransfer = '0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb',\n    Erc721TransferWithMetadata = '0xf94915c6d1fd521cee85359239227480c7e8776d7caf1fc3bacad5c269b66a14',\n\n}","export enum ERROR_TYPE {\n    AllowedOnRoot = \"allowed_on_root\",\n    AllowedOnChild = \"allowed_on_child\",\n    Unknown = \"unknown\",\n    ProofAPINotSet = \"proof_api_not_set\",\n    TransactionOptionNotObject = \"transation_object_not_object\",\n    BurnTxNotCheckPointed = \"burn_tx_not_checkpointed\",\n    EIP1559NotSupported = \"eip-1559_not_supported\",\n    NullSpenderAddress = \"null_spender_address\",\n    AllowedOnNonNativeTokens = \"allowed_on_non_native_token\"\n}","import { BaseContract } from \"../abstracts\";\nimport { ITransactionRequestConfig, ITransactionReceipt, ITransactionData, IBlock, IBlockWithTransaction, IJsonRpcRequestPayload, IJsonRpcResponse, ITransactionWriteResult } from \"../interfaces\";\nimport { Logger } from \"../utils\";\n\nexport abstract class BaseWeb3Client {\n    abstract name: string;\n\n    constructor(public logger: Logger) {\n\n    }\n\n    abstract getContract(address: string, abi: any): BaseContract;\n\n    abstract read(config: ITransactionRequestConfig): Promise<string>;\n\n    abstract write(config: ITransactionRequestConfig): ITransactionWriteResult;\n    abstract getGasPrice(): Promise<string>;\n    abstract estimateGas(config: ITransactionRequestConfig): Promise<number>;\n    abstract getChainId(): Promise<number>;\n    abstract getTransactionCount(address: string, blockNumber: any): Promise<number>;\n\n    abstract getTransaction(transactionHash: string): Promise<ITransactionData>;\n    abstract getTransactionReceipt(transactionHash: string): Promise<ITransactionReceipt>;\n    // abstract extend(property: string, methods: IMethod[])\n\n    abstract getBlock(blockHashOrBlockNumber): Promise<IBlock>;\n    abstract getBlockWithTransaction(blockHashOrBlockNumber): Promise<IBlockWithTransaction>;\n    abstract hexToNumber(value: any): number;\n    abstract hexToNumberString(value: any): string;\n    abstract getBalance(address: string): string;\n    abstract getAccounts(): string[];\n    abstract signTypedData(signer: string, typedData: object): string;\n\n    getRootHash?(startBlock: number, endBlock: number) {\n        return this.sendRPCRequest({\n            jsonrpc: '2.0',\n            method: 'eth_getRootHash',\n            params: [Number(startBlock), Number(endBlock)],\n            id: new Date().getTime()\n        }).then(payload => {\n            return String(payload.result);\n        });\n    }\n\n    getAccountsUsingRPC_() {\n        return this.sendRPCRequest({\n            jsonrpc: '2.0',\n            method: 'eth_accounts',\n            params: [],\n            id: new Date().getTime()\n        }).then(payload => {\n            return payload.result;\n        });\n    }\n\n    abstract sendRPCRequest(request: IJsonRpcRequestPayload): Promise<IJsonRpcResponse>;\n\n    abstract encodeParameters(params: any[], types: any[]): string;\n    abstract decodeParameters(hexString: string, types: any[]): any[];\n    abstract etheriumSha3(...value): string;\n\n}\n","import { BaseContractMethod } from \"../abstracts\";\nimport { Logger } from \"../utils\";\n\nexport abstract class BaseContract {\n\n    constructor(public address: string, public logger:Logger) {\n\n    }\n\n    abstract method(methodName: string, ...args): BaseContractMethod;\n}","import { throwNotImplemented } from \"..\";\n\nexport abstract class BaseBigNumber {\n    static isBN(value) {\n        return throwNotImplemented<boolean>();\n    }\n\n    abstract toString(): string;\n    abstract toNumber(): number;\n    abstract toBuffer(): Buffer;\n    abstract add(value: BaseBigNumber): BaseBigNumber;\n    abstract sub(value: BaseBigNumber): BaseBigNumber;\n    abstract mul(value: BaseBigNumber): BaseBigNumber;\n    abstract div(value: BaseBigNumber): BaseBigNumber;\n\n    abstract lte(value: BaseBigNumber): boolean;\n    abstract lt(value: BaseBigNumber): boolean;\n    abstract gte(value: BaseBigNumber): boolean;\n    abstract gt(value: BaseBigNumber): boolean;\n    abstract eq(value: BaseBigNumber): boolean;\n}","import { throwNotImplemented } from \"..\";\nimport { BaseBigNumber } from \"../abstracts\";\n\nexport class EmptyBigNumber extends BaseBigNumber {\n\n    constructor(value) {\n        super();\n    }\n\n    toString(base?) {\n        return throwNotImplemented<string>();\n    }\n\n    toNumber() {\n        return throwNotImplemented<number>();\n    }\n\n    toBuffer(base?) {\n        return throwNotImplemented<Buffer>();\n    }\n\n    add(value: BaseBigNumber) {\n        return throwNotImplemented<BaseBigNumber>();\n    }\n\n    sub(value: BaseBigNumber) {\n        return throwNotImplemented<BaseBigNumber>();\n    }\n\n    mul(value: BaseBigNumber) {\n        return throwNotImplemented<BaseBigNumber>();\n    }\n\n    div(value: BaseBigNumber) {\n        return throwNotImplemented<BaseBigNumber>();\n    }\n\n    lte(value: BaseBigNumber) {\n        return throwNotImplemented<boolean>();\n    }\n\n    lt(value: BaseBigNumber) {\n        return throwNotImplemented<boolean>();\n\n    }\n\n    gte(value: BaseBigNumber) {\n        return throwNotImplemented<boolean>();\n\n    }\n\n    gt(value: BaseBigNumber) {\n        return throwNotImplemented<boolean>();\n\n    }\n\n    eq(value: BaseBigNumber) {\n        return throwNotImplemented<boolean>();\n    }\n}","import { IPlugin } from \"../interfaces\";\nimport { defaultExport } from \"../default\";\n\nexport const use = (plugin, ...payload) => {\n    const pluginInstance: IPlugin = typeof plugin === \"function\" ? new plugin() : plugin;\n    return pluginInstance.setup(defaultExport, ...payload);\n};","export interface IEventBusPromise<T> extends Promise<T> {\n    on(event: string, cb: Function);\n    emit(event: string, ...args);\n    destroy();\n}\n\nexport const eventBusPromise = function <T>(executor: (resolve: (value?: T | PromiseLike<T>) => void, reject: (reason?: any) => void) => void) {\n    const promise: IEventBusPromise<T> = new Promise(executor) as any;\n    const eventBus = new EventBus();\n    promise.on = eventBus.on.bind(eventBus);\n    promise.emit = eventBus.emit.bind(eventBus);\n    return promise;\n};\n\nexport class EventBus {\n\n    constructor(ctx?) {\n        this._ctx = ctx;\n    }\n\n    private _ctx;\n\n    private _events: {\n        [key: string]: Function[]\n    } = {};\n\n    on(event: string, cb: Function) {\n        if (this._events[event] == null) {\n            this._events[event] = [];\n        }\n        this._events[event].push(cb);\n        return this;\n    }\n\n    off(event: string, cb: Function) {\n        if (this._events[event]) {\n            if (cb) {\n                const index = this._events[event].indexOf(cb);\n                this._events[event].splice(index, 1);\n            }\n            else {\n                this._events[event] = [];\n            }\n        }\n    }\n\n    emit(event: string, ...args) {\n        const events = this._events[event] || [];\n        return Promise.all(\n            events.map(cb => {\n                const result = cb.call(this._ctx, ...args);\n                return result && result.then ? result : Promise.resolve(result);\n            })\n        );\n    }\n\n    destroy() {\n        this._events = null;\n        this._ctx = null;\n    }\n}","import { ERROR_TYPE } from \"../enums\";\nimport { IError } from \"../interfaces\";\n\nexport class ErrorHelper implements IError {\n    type: ERROR_TYPE;\n    message: string;\n\n    constructor(type: ERROR_TYPE, info?) {\n        this.type = type;\n        this.message = this.getMsg_(info);\n    }\n\n    throw() {\n        throw this.get();\n    }\n\n    get() {\n        return {\n            message: this.message,\n            type: this.type\n        } as IError;\n    }\n\n    private getMsg_(info) {\n        let errMsg: string;\n        switch (this.type) {\n            case ERROR_TYPE.AllowedOnChild:\n                errMsg = `The action ${info} is allowed only on child token.`;\n                break;\n            case ERROR_TYPE.AllowedOnRoot:\n                errMsg = `The action ${info} is allowed only on root token.`;\n                break;\n            case ERROR_TYPE.ProofAPINotSet:\n                errMsg = `Proof api is not set, please set it using \"setProofApi\"`;\n                break;\n            case ERROR_TYPE.BurnTxNotCheckPointed:\n                errMsg = `Burn transaction has not been checkpointed as yet`;\n                break;\n            case ERROR_TYPE.EIP1559NotSupported:\n                errMsg = `${info ? 'Root' : 'Child'} chain doesn't support eip-1559`;\n                break;\n            case ERROR_TYPE.NullSpenderAddress:\n                errMsg = `Please provide spender address.`;\n                break;\n            default:\n                if (!this.type) {\n                    this.type = ERROR_TYPE.Unknown;\n                }\n                errMsg = this.message;\n                break;\n        }\n        return errMsg;\n    }\n}","import { ERROR_TYPE } from \"../enums\";\nimport { ErrorHelper } from \"./error_helper\";\n\nexport class Logger {\n\n    private isEnabled: boolean;\n\n    enableLog(value) {\n        this.isEnabled = value ? true : false;\n    }\n\n    log(...message) {\n        if (this.isEnabled) {\n            console.log(...message);\n        }\n    }\n\n    error(type: ERROR_TYPE, info?) {\n        return new ErrorHelper(type, info);\n    }\n}","export const merge = (...obj) => {\n    return Object.assign({}, ...obj);\n};","import { promiseResolve } from '..';\nimport { IMapPromiseOption } from '../interfaces';\n\nconst runPromises = (promises: Array<Promise<any>>, converter: Function) => {\n  const maps = promises.map((val, index) => {\n    return converter(val, index);\n  });\n  return Promise.all(maps);\n};\n\nexport function mapPromise(values: any[], converter: Function, option: IMapPromiseOption = {} as any) {\n  const valuesLength = values.length;\n  const concurrency = option.concurrency || valuesLength;\n\n  let result = [];\n  const limitPromiseRun: () => Promise<any> = () => {\n    const promises = values.splice(0, concurrency);\n    return runPromises(promises, converter).then(promiseResult => {\n      result = result.concat(promiseResult);\n\n      return valuesLength > result.length ?\n        limitPromiseRun() : promiseResolve(result);\n    });\n  };\n\n  return limitPromiseRun();\n}\n","export const MAX_AMOUNT = '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff';\nexport const ADDRESS_ZERO = '0x0000000000000000000000000000000000000000';\nexport const DAI_PERMIT_TYPEHASH = \"0xea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb\";\nexport const EIP_2612_PERMIT_TYPEHASH = \"0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9\";\nexport const EIP_2612_DOMAIN_TYPEHASH = \"0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f\";\nexport const UNISWAP_DOMAIN_TYPEHASH = \"0x8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866\";\nexport enum Permit {\n    DAI = \"DAI\",\n    EIP_2612 = \"EIP_2612\",\n    UNISWAP = \"UNISWAP\",\n}\n","const utils = require('ethereumjs-util');\n// const SafeBuffer = require('safe-buffer').Buffer;\nconst sha3 = utils.keccak256;\n\nimport { Buffer as SafeBuffer } from \"safe-buffer\";\n\nexport class MerkleTree {\n    leaves: any;\n    layers: any;\n\n    constructor(leaves = []) {\n        if (leaves.length < 1) {\n            throw new Error('Atleast 1 leaf needed');\n        }\n\n        const depth = Math.ceil(Math.log(leaves.length) / Math.log(2));\n        if (depth > 20) {\n            throw new Error('Depth must be 20 or less');\n        }\n\n        this.leaves = leaves.concat(\n            Array.from(\n                // tslint:disable-next-line\n                Array(Math.pow(2, depth) - leaves.length),\n                () => utils.zeros(32)\n            )\n        );\n        this.layers = [this.leaves];\n        this.createHashes(this.leaves);\n    }\n\n    createHashes(nodes) {\n        if (nodes.length === 1) {\n            return false;\n        }\n\n\n        const treeLevel = [];\n        for (let i = 0; i < nodes.length; i += 2) {\n            const left = nodes[i];\n            const right = nodes[i + 1];\n\n            const data = SafeBuffer.concat([left, right]);\n            treeLevel.push(sha3(data));\n        }\n\n        // is odd number of nodes\n        if (nodes.length % 2 === 1) {\n            treeLevel.push(nodes[nodes.length - 1]);\n        }\n\n        this.layers.push(treeLevel);\n        this.createHashes(treeLevel);\n    }\n\n    getLeaves() {\n        return this.leaves;\n    }\n\n    getLayers() {\n        return this.layers;\n    }\n\n    getRoot() {\n        return this.layers[this.layers.length - 1][0];\n    }\n\n    getProof(leaf) {\n        let index = -1;\n        for (let i = 0; i < this.leaves.length; i++) {\n            if (SafeBuffer.compare(leaf, this.leaves[i]) === 0) {\n                index = i;\n            }\n        }\n\n        const proof = [];\n        if (index <= this.getLeaves().length) {\n            let siblingIndex;\n            for (let i = 0; i < this.layers.length - 1; i++) {\n                if (index % 2 === 0) {\n                    siblingIndex = index + 1;\n                } else {\n                    siblingIndex = index - 1;\n                }\n                index = Math.floor(index / 2);\n                proof.push(this.layers[i][siblingIndex]);\n            }\n        }\n        return proof;\n    }\n\n    verify(value, index, root, proof) {\n        if (!Array.isArray(proof) || !value || !root) {\n            return false;\n        }\n\n        let hash = value;\n        for (let i = 0; i < proof.length; i++) {\n            const node = proof[i];\n            if (index % 2 === 0) {\n                hash = sha3(SafeBuffer.concat([hash, node]));\n            } else {\n                hash = sha3(SafeBuffer.concat([node, hash]));\n            }\n\n            index = Math.floor(index / 2);\n        }\n\n        return SafeBuffer.compare(hash, root) === 0;\n    }\n}\n\n","import { BaseWeb3Client } from \"../abstracts\";\nimport { MerkleTree } from \"./merkle_tree\";\nimport { bufferToHex, keccak256, rlp, setLengthLeft, toBuffer } from \"ethereumjs-util\";\nimport { ITransactionReceipt, IBlock, IBlockWithTransaction } from \"../interfaces\";\nimport { mapPromise } from \"./map_promise\";\nimport { BaseTrie as TRIE } from 'merkle-patricia-tree';\nimport { BlockHeader } from '@ethereumjs/block';\nimport { Converter, promiseResolve, utils } from \"..\";\nimport Common, { Chain, Hardfork } from '@ethereumjs/common';\n\n// Implementation adapted from Tom French's `matic-proofs` library used under MIT License\n// https://github.com/TomAFrench/matic-proofs\n\nexport class ProofUtil {\n\n    static async getFastMerkleProof(\n        web3: BaseWeb3Client,\n        blockNumber: number,\n        startBlock: number,\n        endBlock: number\n    ): Promise<string[]> {\n        const merkleTreeDepth = Math.ceil(Math.log2(endBlock - startBlock + 1));\n\n        // We generate the proof root down, whereas we need from leaf up\n        const reversedProof: string[] = [];\n\n        const offset = startBlock;\n        const targetIndex = blockNumber - offset;\n        let leftBound = 0;\n        let rightBound = endBlock - offset;\n        //   console.log(\"Searching for\", targetIndex);\n        for (let depth = 0; depth < merkleTreeDepth; depth += 1) {\n            const nLeaves = 2 ** (merkleTreeDepth - depth);\n\n            // The pivot leaf is the last leaf which is included in the left subtree\n            const pivotLeaf = leftBound + nLeaves / 2 - 1;\n\n            if (targetIndex > pivotLeaf) {\n                // Get the root hash to the merkle subtree to the left\n                const newLeftBound = pivotLeaf + 1;\n                // eslint-disable-next-line no-await-in-loop\n                const subTreeMerkleRoot = await this.queryRootHash(web3, offset + leftBound, offset + pivotLeaf);\n                reversedProof.push(subTreeMerkleRoot);\n                leftBound = newLeftBound;\n            } else {\n                // Things are more complex when querying to the right.\n                // Root hash may come some layers down so we need to build a full tree by padding with zeros\n                // Some trees may be completely empty\n\n                const newRightBound = Math.min(rightBound, pivotLeaf);\n\n                // Expect the merkle tree to have a height one less than the current layer\n                const expectedHeight = merkleTreeDepth - (depth + 1);\n                if (rightBound <= pivotLeaf) {\n                    // Tree is empty so we repeatedly hash zero to correct height\n                    const subTreeMerkleRoot = this.recursiveZeroHash(expectedHeight, web3);\n                    reversedProof.push(subTreeMerkleRoot);\n                } else {\n                    // Height of tree given by RPC node\n                    const subTreeHeight = Math.ceil(Math.log2(rightBound - pivotLeaf));\n\n                    // Find the difference in height between this and the subtree we want\n                    const heightDifference = expectedHeight - subTreeHeight;\n\n                    // For every extra layer we need to fill 2*n leaves filled with the merkle root of a zero-filled Merkle tree\n                    // We need to build a tree which has heightDifference layers\n\n                    // The first leaf will hold the root hash as returned by the RPC\n                    // eslint-disable-next-line no-await-in-loop\n                    const remainingNodesHash = await this.queryRootHash(web3, offset + pivotLeaf + 1, offset + rightBound);\n\n                    // The remaining leaves will hold the merkle root of a zero-filled tree of height subTreeHeight\n                    const leafRoots = this.recursiveZeroHash(subTreeHeight, web3);\n\n                    // Build a merkle tree of correct size for the subtree using these merkle roots\n                    const leaves = Array.from({ length: 2 ** heightDifference }, () => toBuffer(leafRoots));\n                    leaves[0] = remainingNodesHash;\n                    const subTreeMerkleRoot = new MerkleTree(leaves).getRoot();\n                    reversedProof.push(subTreeMerkleRoot);\n                }\n                rightBound = newRightBound;\n            }\n        }\n\n        return reversedProof.reverse();\n    }\n\n    static buildBlockProof(maticWeb3: BaseWeb3Client, startBlock: number, endBlock: number, blockNumber: number) {\n        return ProofUtil.getFastMerkleProof(\n            maticWeb3, blockNumber, startBlock, endBlock\n        ).then(proof => {\n            return bufferToHex(\n                Buffer.concat(\n                    proof.map(p => {\n                        return toBuffer(p);\n                    })\n                )\n            );\n        });\n    }\n\n    static queryRootHash(client: BaseWeb3Client, startBlock: number, endBlock: number) {\n        return client.getRootHash(startBlock, endBlock).then(rootHash => {\n            return toBuffer(`0x${rootHash}`);\n        }).catch(_ => {\n            return null;\n        });\n    }\n\n    static recursiveZeroHash(n: number, client: BaseWeb3Client) {\n        if (n === 0) return '0x0000000000000000000000000000000000000000000000000000000000000000';\n        const subHash = this.recursiveZeroHash(n - 1, client);\n        return keccak256(\n            toBuffer(client.encodeParameters([subHash, subHash], ['bytes32', 'bytes32'],))\n        );\n    }\n\n    static getReceiptProof(receipt: ITransactionReceipt, block: IBlockWithTransaction, web3: BaseWeb3Client, requestConcurrency = Infinity, receiptsVal?: ITransactionReceipt[]) {\n        const stateSyncTxHash = bufferToHex(ProofUtil.getStateSyncTxHash(block));\n        const receiptsTrie = new TRIE();\n        let receiptPromise: Promise<ITransactionReceipt[]>;\n        if (!receiptsVal) {\n            const receiptPromises = [];\n            block.transactions.forEach(tx => {\n                if (tx.transactionHash === stateSyncTxHash) {\n                    // ignore if tx hash is bor state-sync tx\n                    return;\n                }\n                receiptPromises.push(\n                    web3.getTransactionReceipt(tx.transactionHash)\n                );\n            });\n            receiptPromise = mapPromise(\n                receiptPromises,\n                val => {\n                    return val;\n                },\n                {\n                    concurrency: requestConcurrency,\n                }\n            );\n        }\n        else {\n            receiptPromise = promiseResolve(receiptsVal);\n        }\n\n        return receiptPromise.then(receipts => {\n            return Promise.all(\n                receipts.map(siblingReceipt => {\n                    const path = rlp.encode(siblingReceipt.transactionIndex);\n                    const rawReceipt = ProofUtil.getReceiptBytes(siblingReceipt);\n                    return receiptsTrie.put(path, rawReceipt);\n                })\n            );\n        }).then(_ => {\n            return receiptsTrie.findPath(rlp.encode(receipt.transactionIndex), true);\n        }).then(result => {\n            if (result.remaining.length > 0) {\n                throw new Error('Node does not contain the key');\n            }\n            // result.node.value\n            const prf = {\n                blockHash: toBuffer(receipt.blockHash),\n                parentNodes: result.stack.map(s => s.raw()),\n                root: ProofUtil.getRawHeader(block).receiptTrie,\n                path: rlp.encode(receipt.transactionIndex),\n                value: ProofUtil.isTypedReceipt(receipt) ? result.node.value : rlp.decode(result.node.value)\n            };\n            return prf;\n        });\n    }\n\n    static isTypedReceipt(receipt: ITransactionReceipt) {\n        const hexType = Converter.toHex(receipt.type);\n        return receipt.status != null && hexType !== \"0x0\" && hexType !== \"0x\";\n    }\n\n    // getStateSyncTxHash returns block's tx hash for state-sync receipt\n    // Bor blockchain includes extra receipt/tx for state-sync logs,\n    // but it is not included in transactionRoot or receiptRoot.\n    // So, while calculating proof, we have to exclude them.\n    //\n    // This is derived from block's hash and number\n    // state-sync tx hash = keccak256(\"matic-bor-receipt-\" + block.number + block.hash)\n    static getStateSyncTxHash(block): Buffer {\n        return keccak256(\n            Buffer.concat([\n                // prefix for bor receipt\n                Buffer.from('matic-bor-receipt-', 'utf-8'),\n                setLengthLeft(toBuffer(block.number), 8), // 8 bytes of block number (BigEndian)\n                toBuffer(block.hash), // block hash\n            ])\n        );\n    }\n\n    static getReceiptBytes(receipt: ITransactionReceipt) {\n        let encodedData = rlp.encode([\n            toBuffer(\n                receipt.status !== undefined && receipt.status != null ? (receipt.status ? '0x1' : '0x') : receipt.root\n            ),\n            toBuffer(receipt.cumulativeGasUsed),\n            toBuffer(receipt.logsBloom),\n            // encoded log array\n            receipt.logs.map(l => {\n                // [address, [topics array], data]\n                return [\n                    toBuffer(l.address), // convert address to buffer\n                    l.topics.map(toBuffer), // convert topics to buffer\n                    toBuffer(l.data), // convert data to buffer\n                ];\n            }),\n        ]);\n        if (ProofUtil.isTypedReceipt(receipt)) {\n            encodedData = Buffer.concat([toBuffer(receipt.type), encodedData]);\n        }\n        return encodedData;\n    }\n\n    static getRawHeader(_block) {\n        _block.difficulty = Converter.toHex(_block.difficulty) as any;\n        const common = new Common({\n            chain: Chain.Mainnet, hardfork: Hardfork.London\n        });\n        const rawHeader = BlockHeader.fromHeaderData(_block, {\n            common: common\n        });\n        return rawHeader;\n    }\n}\n","const fetch: (input: RequestInfo, init?: RequestInit) => Promise<Response> =\n    (() => {\n        if (process.env.BUILD_ENV === \"node\") {\n            return require('node-fetch').default;\n        }\n        return window.fetch;\n    })();\n\n\nexport class HttpRequest {\n    baseUrl = \"\";\n\n    constructor(option: { baseUrl: string } | string = {} as any) {\n        option = typeof option === \"string\" ? {\n            baseUrl: option\n        } : option;\n\n        if (option.baseUrl) {\n            this.baseUrl = option.baseUrl;\n        }\n    }\n\n    get<T>(url = \"\", query = {}): Promise<T> {\n        url = this.baseUrl + url + Object.keys(query).\n            map(key => `${encodeURIComponent(key)}=${encodeURIComponent(query[key])}`).join('&');\n\n        return fetch(url, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }\n        }).then(res => {\n            return res.json();\n        });\n    }\n\n    post(url = \"\", body) {\n        url = this.baseUrl + url;\n\n        return fetch(url, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            },\n            body: body ? JSON.stringify(body) : null\n        }).then(res => {\n            return res.json();\n        });\n    }\n}","import { BaseBigNumber } from \"../abstracts\";\nimport { utils } from \"../utils\";\n\nexport class Converter {\n    static toHex(amount: BaseBigNumber | string | number) {\n        const dataType = typeof amount;\n        if (dataType === 'number') {\n            amount = new utils.BN(amount);\n        } else if (dataType === 'string') {\n            if ((amount as string).slice(0, 2) === '0x') {\n                return amount;\n            }\n            amount = new utils.BN(amount);\n        }\n        if (utils.BN.isBN(amount)) {\n            return '0x' + amount.toString(16);\n        }\n        else {\n            throw new Error(`Invalid value ${amount}, value is not a number.`);\n        }\n    }\n}\n","import { IBaseClientConfig } from \"../interfaces\";\nimport { BaseWeb3Client } from \"../abstracts\";\nimport { ABIManager } from \"../utils\";\nimport { Logger } from \"./logger\";\nimport { utils } from \"..\";\n\nconst chainIdToConfigPath = {\n    1: 'Main',\n    5: 'Main',\n    137: 'Matic',\n    80001: 'Matic',\n    1422: 'Hermez'\n};\n\nexport class Web3SideChainClient<T_CONFIG> {\n    parent: BaseWeb3Client;\n    child: BaseWeb3Client;\n\n    config: T_CONFIG;\n\n    abiManager: ABIManager;\n\n    logger = new Logger();\n    resolution: {};\n\n    init(config: IBaseClientConfig) {\n        config = config || {} as any;\n        config.parent.defaultConfig = config.parent.defaultConfig || {} as any;\n        config.child.defaultConfig = config.child.defaultConfig || {} as any;\n        this.config = config as any;\n\n        // tslint:disable-next-line\n        const Web3Client = utils.Web3Client;\n\n        if (!Web3Client) {\n            throw new Error(\"Web3Client is not set\");\n        }\n\n        if (utils.UnstoppableDomains) {\n            this.resolution = utils.UnstoppableDomains;\n        }\n\n        this.parent = new (Web3Client as any)(config.parent.provider, this.logger);\n        this.child = new (Web3Client as any)(config.child.provider, this.logger);\n\n        this.logger.enableLog(config.log);\n\n        const network = config.network;\n        const version = config.version;\n        const abiManager = this.abiManager =\n            new ABIManager(network, version);\n        this.logger.log(\"init called\", abiManager);\n        return abiManager.init().catch(err => {\n            throw new Error(`network ${network} - ${version} is not supported`);\n        });\n    }\n\n    getABI(name: string, type?: string) {\n        return this.abiManager.getABI(name, type);\n    }\n\n    getConfig(path: string) {\n        return this.abiManager.getConfig(path);\n    }\n\n    get mainPlasmaContracts() {\n        return this.getConfig(\"Main.Contracts\");\n    }\n\n    get mainPOSContracts() {\n        return this.getConfig(\"Main.POSContracts\");\n    }\n\n    get mainHermezContracts() {\n        return this.getConfig(\"Main.Contracts\");\n    }\n\n    get hermezContracts() {\n        return this.getConfig(\"zkEVM.Contracts\");\n    }\n\n    isEIP1559Supported(chainId: number): boolean {\n        return this.getConfig(`${chainIdToConfigPath[chainId]}.SupportsEIP1559`);\n    }\n\n}\n","export const promiseResolve = <T>(value?) => {\n    return Promise.resolve<T>(value);\n};\n\nexport const promiseAny = (promisesArray) => {\n    const promiseErrors = new Array(promisesArray.length);\n    let counter = 0;\n\n    //return a new promise\n    return new Promise((resolve, reject) => {\n        promisesArray.forEach((promise) => {\n            Promise.resolve(promise)\n                .then(resolve) // resolve, when any of the input promise resolves\n                .catch((error) => {\n                    promiseErrors[counter] = error;\n                    counter = counter + 1;\n                    if (counter === promisesArray.length) {\n                        // all promises rejected, reject outer promise\n                        reject(promiseErrors);\n                    }\n                }); // reject, when any of the input promise rejects\n        });\n    });\n};\n","import { Web3SideChainClient } from \"./web3_side_chain_client\";\nimport { ITransactionRequestConfig, ITransactionOption, IContractInitParam, IBaseClientConfig, ITransactionWriteResult } from \"../interfaces\";\nimport { BaseContractMethod, BaseContract } from \"../abstracts\";\nimport { Converter, merge } from \"../utils\";\nimport { promiseResolve } from \"./promise_resolve\";\nimport { ERROR_TYPE } from \"../enums\";\nimport { POSERC1155TransferParam, TYPE_AMOUNT } from \"../types\";\nimport { ErrorHelper } from \"./error_helper\";\nimport { ADDRESS_ZERO } from '../constant';\n\nexport interface ITransactionConfigParam {\n    txConfig: ITransactionRequestConfig;\n    method?: BaseContractMethod;\n    isWrite?: boolean;\n    isParent?: boolean;\n}\n\nexport class BaseToken<T_CLIENT_CONFIG> {\n\n    private contract_: BaseContract;\n    private chainId_: number;\n\n    constructor(\n        protected contractParam: IContractInitParam,\n        protected client: Web3SideChainClient<T_CLIENT_CONFIG>,\n    ) {\n    }\n\n    get contractAddress() {\n        return this.contractParam.address;\n    }\n\n    getContract(): Promise<BaseContract> {\n        if (this.contract_) {\n            return promiseResolve<BaseContract>(this.contract_ as any);\n        }\n        const contractParam = this.contractParam;\n        return this.client.getABI(\n            contractParam.name,\n            contractParam.bridgeType,\n        ).then(abi => {\n            this.contract_ = this.getContract_({\n                abi,\n                isParent: contractParam.isParent,\n                tokenAddress: contractParam.address\n            });\n            return this.contract_;\n        });\n    }\n\n    getChainId(): Promise<number> {\n        if (this.chainId_) {\n            return promiseResolve<number>(this.chainId_ as any);\n        }\n        const client = this.getClient(this.contractParam.isParent);\n        return client.getChainId().then(chainId => {\n            this.chainId_ = chainId;\n            return this.chainId_;\n        });\n    }\n\n    protected processWrite(method: BaseContractMethod, option: ITransactionOption = {}): Promise<ITransactionWriteResult> {\n        this.validateTxOption_(option);\n\n        this.client.logger.log(\"process write\");\n        return this.createTransactionConfig(\n            {\n                txConfig: option,\n                isWrite: true,\n                method,\n                isParent: this.contractParam.isParent\n            }).then(config => {\n                this.client.logger.log(\"process write config\");\n                if (option.returnTransaction) {\n                    return merge(config, {\n                        data: method.encodeABI(),\n                        to: method.address\n                    } as ITransactionRequestConfig);\n                }\n                const methodResult = method.write(\n                    config,\n                );\n                return methodResult;\n            });\n    }\n\n    protected sendTransaction(option: ITransactionOption = {}): Promise<ITransactionWriteResult> {\n        this.validateTxOption_(option);\n\n        const isParent = this.contractParam.isParent;\n        const client = this.getClient(isParent);\n        client.logger.log(\"process write\");\n\n        return this.createTransactionConfig(\n            {\n                txConfig: option,\n                isWrite: true,\n                method: null as any,\n                isParent: this.contractParam.isParent\n            }).then(config => {\n                client.logger.log(\"process write config\");\n                if (option.returnTransaction) {\n                    return config as any;\n                }\n                const methodResult = client.write(\n                    config,\n                );\n                return methodResult;\n            });\n    }\n\n    protected readTransaction(option: ITransactionOption = {}): Promise<ITransactionWriteResult> {\n        this.validateTxOption_(option);\n        const isParent = this.contractParam.isParent;\n        const client = this.getClient(isParent);\n        client.logger.log(\"process read\");\n        return this.createTransactionConfig(\n            {\n                txConfig: option,\n                isWrite: true,\n                method: null as any,\n                isParent: this.contractParam.isParent\n            }).then(config => {\n                client.logger.log(\"write tx config created\");\n                if (option.returnTransaction) {\n                    return config as any;\n                }\n                return client.read(\n                    config,\n                );\n            });\n    }\n\n    private validateTxOption_(option: ITransactionOption) {\n        if (typeof option !== 'object' || Array.isArray(option)) {\n            new ErrorHelper(ERROR_TYPE.TransactionOptionNotObject).throw();\n        }\n    }\n\n    protected processRead<T>(method: BaseContractMethod, option: ITransactionOption = {}): Promise<T> {\n        this.validateTxOption_(option);\n        this.client.logger.log(\"process read\");\n        return this.createTransactionConfig(\n            {\n                txConfig: option,\n                isWrite: false,\n                method,\n                isParent: this.contractParam.isParent\n            }).then(config => {\n                this.client.logger.log(\"read tx config created\");\n                if (option.returnTransaction) {\n                    return merge(config, {\n                        data: method.encodeABI(),\n                        to: this.contract_.address\n                    } as ITransactionRequestConfig);\n                }\n                return method.read(\n                    config,\n                );\n            });\n    }\n\n    protected getClient(isParent) {\n        return isParent ? this.client.parent :\n            this.client.child;\n    }\n\n    private getContract_({ isParent, tokenAddress, abi }) {\n        const client = this.getClient(isParent);\n        return client.getContract(tokenAddress, abi);\n    }\n\n    protected get parentDefaultConfig() {\n        const config: IBaseClientConfig = this.client.config as any;\n        return config.parent.defaultConfig;\n    }\n\n    protected get childDefaultConfig() {\n        const config: IBaseClientConfig = this.client.config as any;\n        return config.child.defaultConfig;\n    }\n\n    protected createTransactionConfig({ txConfig, method, isParent, isWrite }: ITransactionConfigParam) {\n        const defaultConfig = isParent ? this.parentDefaultConfig : this.childDefaultConfig;\n        txConfig = merge(defaultConfig, (txConfig || {}));\n        const client = isParent ? this.client.parent :\n            this.client.child;\n        client.logger.log(\"txConfig\", txConfig, \"onRoot\", isParent, \"isWrite\", isWrite);\n        const estimateGas = (config: ITransactionRequestConfig) => {\n            return method ? method.estimateGas(config) :\n                client.estimateGas(config);\n        };\n        // txConfig.chainId = Converter.toHex(txConfig.chainId) as any;\n        if (isWrite) {\n            return this.getChainId().then(clientChainId => {\n                const { maxFeePerGas, maxPriorityFeePerGas } = txConfig;\n\n                const isEIP1559Supported = this.client.isEIP1559Supported(clientChainId);\n                const isMaxFeeProvided = (maxFeePerGas || maxPriorityFeePerGas);\n                txConfig.chainId = txConfig.chainId || clientChainId;\n\n                if (!isEIP1559Supported && isMaxFeeProvided) {\n                    client.logger.error(ERROR_TYPE.EIP1559NotSupported, isParent).throw();\n                }\n                // const [gasLimit, nonce] = \n                return Promise.all([\n                    !(txConfig.gasLimit)\n                        ? estimateGas({\n                            from: txConfig.from, value: txConfig.value\n                        })\n                        : txConfig.gasLimit,\n                    !txConfig.nonce ?\n                        client.getTransactionCount(txConfig.from, 'pending')\n                        : txConfig.nonce\n                ]).then(result => {\n                    const [gasLimit, nonce] = result;\n                    client.logger.log(\"options filled\");\n\n                    txConfig.gasLimit = Number(gasLimit);\n                    txConfig.nonce = nonce;\n                    return txConfig;\n                });\n            });\n        }\n        return promiseResolve<ITransactionRequestConfig>(txConfig);\n    }\n\n    protected transferERC20(to: string, amount: TYPE_AMOUNT, option?: ITransactionOption) {\n        return this.getContract().then(contract => {\n            const method = contract.method(\n                \"transfer\",\n                to,\n                Converter.toHex(amount)\n            );\n            return this.processWrite(\n                method, option\n            );\n        });\n    }\n\n    protected transferERC721(from: string, to: string, tokenId: string, option: ITransactionOption) {\n        return this.getContract().then(contract => {\n            const method = contract.method(\n                \"transferFrom\",\n                from,\n                to,\n                tokenId\n            );\n            return this.processWrite(\n                method, option\n            );\n        });\n    }\n\n    protected checkForNonNative(methodName) {\n        if (this.contractParam.address === ADDRESS_ZERO) {\n            this.client.logger.error(ERROR_TYPE.AllowedOnNonNativeTokens, methodName).throw();\n        }\n    }\n\n    protected checkForRoot(methodName) {\n        if (!this.contractParam.isParent) {\n            this.client.logger.error(ERROR_TYPE.AllowedOnRoot, methodName).throw();\n        }\n    }\n\n    protected checkForChild(methodName) {\n        if (this.contractParam.isParent) {\n            this.client.logger.error(ERROR_TYPE.AllowedOnChild, methodName).throw();\n        }\n    }\n\n    protected transferERC1155(param: POSERC1155TransferParam, option: ITransactionOption) {\n        return this.getContract().then(contract => {\n            const method = contract.method(\n                \"safeTransferFrom\",\n                param.from,\n                param.to,\n                Converter.toHex(param.tokenId),\n                Converter.toHex(param.amount),\n                param.data || '0x'\n            );\n            return this.processWrite(\n                method, option\n            );\n        });\n    }\n\n}\n","import { HttpRequest } from \"../utils\";\n\nexport class ABIService {\n    httpRequest: HttpRequest;\n\n    constructor(baseUrl: string) {\n        this.httpRequest = new HttpRequest(baseUrl);\n    }\n\n    getABI(network: string, version: string, bridgeType: string, contractName: string) {\n        const url = `${network}/${version}/artifacts/${bridgeType}/${contractName}.json`;\n        return this.httpRequest.get(url).then((result: any) => {\n            return result.abi;\n        });\n    }\n\n    getAddress(network: string, version: string) {\n        const url = `${network}/${version}/index.json`;\n        return this.httpRequest.get(url);\n    }\n}\n","\nexport const config = {\n    abiStoreUrl: 'https://static.matic.network/network/',\n    hermezBridgeService: 'https://bridge-api.public.zkevm-test.net/'\n};\n","import { BaseBigNumber, utils } from \"..\";\nimport { HttpRequest } from \"../utils\";\n\nexport class NetworkService {\n    httpRequest: HttpRequest;\n\n    constructor(baseUrl: string) {\n        this.httpRequest = new HttpRequest(baseUrl);\n    }\n\n    private createUrlForPos(network: string, url: string) {\n        return `${network === 'mainnet' ? 'matic' : 'mumbai'}${url}`;\n    }\n\n    getBlockIncluded(network: string, blockNumber: number) {\n        const url = this.createUrlForPos(network, `/block-included/${blockNumber}`);\n        return this.httpRequest.get<{\n            start: string;\n            end: string;\n            headerBlockNumber: BaseBigNumber;\n        }>(url).then(result => {\n            const headerBlockNumber = result.headerBlockNumber as any as string;\n            const decimalHeaderBlockNumber = headerBlockNumber.slice(0, 2) === '0x' ? parseInt(\n                headerBlockNumber, 16\n            ) : headerBlockNumber;\n            result.headerBlockNumber = new utils.BN(decimalHeaderBlockNumber);\n            return result;\n        });\n    }\n\n    getProof(network: string, start, end, blockNumber) {\n        const url = this.createUrlForPos(network, `/fast-merkle-proof?start=${start}&end=${end}&number=${blockNumber}`);\n        return this.httpRequest.get<any>(url).then(result => {\n            return result.proof;\n        });\n    }\n\n    getMerkleProofForHermez(networkID: number, depositCount: number) {\n        const url = `merkle-proof?net_id=${networkID}&deposit_cnt=${depositCount}`;\n        return this.httpRequest.get<any>(url).then(result => {\n            return result.proof;\n        });\n    }\n\n    getBridgeTransactionDetails(networkID: number, depositCount: number) {\n        const url = `bridge?net_id=${networkID}&deposit_cnt=${depositCount}`;\n        return this.httpRequest.get<any>(url).then(result => {\n            return result.deposit;\n        });\n    }\n}\n","import { ABIService } from \"./abi_service\";\nimport { config } from \"../config\";\nimport { NetworkService } from \"./network_service\";\n\nexport * from \"./network_service\";\n\nclass Service {\n    network: NetworkService;\n    hermezNetwork: NetworkService;\n    abi: ABIService;\n}\n\nexport const service = new Service();\nservice.abi = new ABIService(config.abiStoreUrl);\n\n\n\n","import { service, NetworkService } from \"../services\";\n\nexport const setProofApi = (url: string) => {\n    const urlLength = url.length;\n    if (url[urlLength - 1] !== '/') {\n        url += '/';\n    }\n    url += 'api/v1/';\n    service.network = new NetworkService(url);\n};\n\nexport const setHermezProofApi = (url: string) => {\n    const urlLength = url.length;\n    if (url[urlLength - 1] !== '/') {\n        url += '/';\n    }\n    service.hermezNetwork = new NetworkService(url);\n};\n","export function resolve(obj, path) {\n    const properties = Array.isArray(path) ? path : path.split(\".\");\n    return properties.reduce((prev, curr) => prev && prev[curr], obj);\n}","import { Web3SideChainClient } from \"../utils\";\nimport { ExitUtil } from \"../pos\";\nimport { BaseToken, utils } from \"..\";\n\nexport class BridgeClient<T> {\n\n    client: Web3SideChainClient<T> = new Web3SideChainClient();\n\n    exitUtil: ExitUtil;\n\n    /**\n     * check whether a txHash is checkPointed \n     *\n     * @param {string} txHash\n     * @returns\n     * @memberof BridgeClient\n     */\n    isCheckPointed(txHash: string) {\n        return this.exitUtil.isCheckPointed(\n            txHash\n        );\n    }\n\n    isDeposited(depositTxHash: string) {\n        const client = this.client;\n\n        const token = new BaseToken({\n            address: client.abiManager.getConfig(\"Matic.GenesisContracts.StateReceiver\"),\n            isParent: false,\n            name: 'StateReceiver',\n            bridgeType: 'genesis'\n        }, client);\n\n        return token.getContract().then(contract => {\n            return Promise.all([\n                client.parent.getTransactionReceipt(depositTxHash),\n                token['processRead']<string>(\n                    contract.method(\"lastStateId\")\n                )\n            ]);\n        }).then(result => {\n            const [receipt, lastStateId] = result;\n            const eventSignature = `0x103fed9db65eac19c4d870f49ab7520fe03b99f1838e5996caf47e9e43308392`;\n            const targetLog = receipt.logs.find(q => q.topics[0] === eventSignature);\n            if (!targetLog) {\n                throw new Error(\"StateSynced event not found\");\n            }\n            const rootStateId = client.child.decodeParameters(targetLog.topics[1], ['uint256'])[0];\n            const rootStateIdBN = utils.BN.isBN(rootStateId) ? rootStateId : new utils.BN(rootStateId);\n            return new utils.BN(lastStateId).gte(\n                rootStateIdBN\n            );\n        });\n    }\n\n}","import { service } from \"../services\";\nimport { resolve, promiseResolve } from \".\";\n\ntype T_ABI_CACHE = {\n    [networkName: string]: {\n        [version: string]: {\n            address: any,\n            abi: {\n                [bridgeType: string]: {\n                    [contractName: string]: any\n                }\n            }\n        }\n    }\n};\n\nconst cache: T_ABI_CACHE = {};\n\nexport class ABIManager {\n    constructor(public networkName: string, public version: string) {\n\n    }\n\n    init() {\n        return service.abi.getAddress(\n            this.networkName, this.version\n        ).then(result => {\n            cache[this.networkName] = {\n                [this.version]: {\n                    address: result,\n                    abi: {}\n                }\n            };\n        });\n    }\n\n    getConfig(path: string) {\n        return resolve(\n            cache[this.networkName][this.version].address,\n            path\n        );\n    }\n\n    getABI(contractName: string, bridgeType = 'plasma'): Promise<any> {\n        const targetBridgeABICache = cache[this.networkName][this.version].\n            abi[bridgeType];\n\n        if (targetBridgeABICache) {\n            const abiForContract = targetBridgeABICache[contractName];\n            if (abiForContract) {\n                return promiseResolve<any>(abiForContract);\n            }\n        }\n        return service.abi.getABI(\n            this.networkName,\n            this.version,\n            bridgeType,\n            contractName\n        ).then(result => {\n            this.setABI(contractName, bridgeType, result);\n            return result;\n        });\n    }\n\n    setABI(contractName: string, bridgeType: string, abi: any) {\n        const abiStore = cache[this.networkName][this.version].abi;\n        if (!abiStore[bridgeType]) {\n            abiStore[bridgeType] = {};\n        }\n        abiStore[bridgeType][contractName] = abi;\n    }\n}","export const throwNotImplemented = <T>() => {\n    throw new Error(\"not implemented\");\n    return '' as any as T;\n};","import { Web3SideChainClient } from \"../utils\";\nimport { BridgeUtil, HermezBridge } from \"../hermez\";\nimport { service } from \"../services\";\n\nexport class HermezBridgeClient<T> {\n\n    client: Web3SideChainClient<T> = new Web3SideChainClient();\n    bridgeUtil: BridgeUtil;\n    rootChainBridge: HermezBridge;\n    childChainBridge: HermezBridge;\n\n    /**\n     * check whether a txHash is synced with child chain \n     *\n     * @param {string} txHash\n     * @returns\n     * @memberof HermezBridgeClient\n     */\n    isDepositClaimable(txHash: string) {\n        return Promise.all([this.rootChainBridge.networkID(), this.bridgeUtil.getBridgeLogData(\n            txHash, true\n        )]).then(result => {\n            return service.hermezNetwork.getBridgeTransactionDetails(result[0], result[1].depositCount);\n        }).then(details => {\n            return details.ready_for_claim;\n        });\n    }\n\n    /**\n     * check whether proof is submitted on parent chain\n     *\n     * @param {string} txHash\n     * @returns\n     * @memberof HermezBridgeClient\n     */\n    isWithdrawExitable(txHash: string) {\n        return Promise.all([this.childChainBridge.networkID(), this.bridgeUtil.getBridgeLogData(\n            txHash, false\n        )]).then(result => {\n            return service.hermezNetwork.getBridgeTransactionDetails(result[0], result[1].depositCount);\n        }).then(details => {\n            return details.ready_for_claim;\n        });\n    }\n\n    /**\n     * check whether deposit is completed\n     *\n     * @param {string} txHash\n     * @returns\n     * @memberof HermezBridgeClient\n     */\n    isDeposited(txHash: string) {\n        return this.bridgeUtil.getBridgeLogData(\n            txHash, true\n        ).then(result => {\n            return this.childChainBridge.isClaimed(result.depositCount);\n        });\n    }\n\n    /**\n     * check whether deposit is completed\n     *\n     * @param {string} txHash\n     * @returns\n     * @memberof HermezBridgeClient\n     */\n    isExited(txHash: string) {\n        return this.bridgeUtil.getBridgeLogData(\n            txHash, false\n        ).then(result => {\n            return this.rootChainBridge.isClaimed(result.depositCount);\n        });\n    }\n\n}\n","import { BaseWeb3Client, Converter, TYPE_AMOUNT } from \"..\";\nimport { EmptyBigNumber } from \"../implementation\";\n\nexport * from \"./use\";\nexport * from \"./event_bus\";\nexport * from \"./logger\";\nexport * from \"./merge\";\nexport * from \"./map_promise\";\nexport * from \"./proof_util\";\nexport * from \"./http_request\";\nexport * from \"./converter\";\nexport * from \"./web3_side_chain_client\";\nexport * from \"./base_token\";\nexport * from \"./set_proof_api_url\";\nexport * from \"./resolve\";\nexport * from \"./promise_resolve\";\nexport * from \"./bridge_client\";\nexport * from \"./abi_manager\";\nexport * from \"./not_implemented\";\nexport * from \"./hermez_bridge_client\";\n\n\nexport const utils = {\n    converter: Converter,\n    Web3Client: BaseWeb3Client,\n    BN: EmptyBigNumber,\n    UnstoppableDomains: Object\n};\n","import { BaseToken, Web3SideChainClient, promiseResolve } from \"../utils\";\nimport { IContractInitParam, IPOSClientConfig, ITransactionOption } from \"../interfaces\";\nimport { IPOSContracts } from \"../interfaces\";\n\nexport class POSToken extends BaseToken<IPOSClientConfig> {\n\n    private predicateAddress: string;\n\n    constructor(\n        contractParam: IContractInitParam,\n        client: Web3SideChainClient<IPOSClientConfig>,\n        protected getPOSContracts: () => IPOSContracts\n    ) {\n        super(contractParam, client);\n    }\n\n    protected get rootChainManager() {\n        return this.getPOSContracts().rootChainManager;\n    }\n\n    protected get exitUtil() {\n        return this.getPOSContracts().exitUtil;\n    }\n\n\n    getPredicateAddress(): Promise<string> {\n        if (this.predicateAddress) {\n            return promiseResolve(this.predicateAddress);\n        }\n        return this.rootChainManager.method(\n            \"tokenToType\",\n            this.contractParam.address\n        ).then(method => {\n            return method.read();\n        }).then(tokenType => {\n            if (!tokenType) {\n                throw new Error('Invalid Token Type');\n            }\n            return this.rootChainManager.method(\n                \"typeToPredicate\", tokenType\n            );\n        }).then(typeToPredicateMethod => {\n            return typeToPredicateMethod.read<string>();\n        }).then(predicateAddress => {\n            this.predicateAddress = predicateAddress;\n            return predicateAddress;\n        });\n    }\n\n    protected isWithdrawn(txHash: string, eventSignature: string) {\n        if (!txHash) {\n            throw new Error(`txHash not provided`);\n        }\n        return this.exitUtil.getExitHash(\n            txHash, 0, eventSignature\n        ).then(exitHash => {\n            return this.rootChainManager.isExitProcessed(\n                exitHash\n            );\n        });\n    }\n\n    protected isWithdrawnOnIndex(txHash: string, index: number, eventSignature: string) {\n      if (!txHash) {\n          throw new Error(`txHash not provided`);\n      }\n      return this.exitUtil.getExitHash(\n          txHash, index, eventSignature\n      ).then(exitHash => {\n          return this.rootChainManager.isExitProcessed(\n              exitHash\n          );\n      });\n  }\n\n    protected withdrawExitPOS(burnTxHash: string, eventSignature: string, isFast: boolean, option: ITransactionOption) {\n        return this.exitUtil.buildPayloadForExit(\n            burnTxHash,\n            eventSignature,\n            isFast\n        ).then(payload => {\n            return this.rootChainManager.exit(\n                payload, option\n            );\n        });\n    }\n}\n","import { ITransactionOption } from \"../interfaces\";\nimport { Converter, Web3SideChainClient } from \"../utils\";\nimport { POSToken } from \"./pos_token\";\nimport { TYPE_AMOUNT } from \"../types\";\nimport { ERROR_TYPE, Log_Event_Signature } from \"../enums\";\nimport { MAX_AMOUNT, promiseResolve } from \"..\";\nimport { IAllowanceTransactionOption, IApproveTransactionOption, IExitTransactionOption, IPOSClientConfig, IPOSContracts } from \"../interfaces\";\n\nexport class ERC20 extends POSToken {\n\n    constructor(\n        tokenAddress: string,\n        isParent: boolean,\n        client: Web3SideChainClient<IPOSClientConfig>,\n        getContracts: () => IPOSContracts\n    ) {\n        super({\n            isParent,\n            address: tokenAddress,\n            name: 'ChildERC20',\n            bridgeType: 'pos'\n        }, client, getContracts);\n    }\n\n    getBalance(userAddress: string, option?: ITransactionOption) {\n        return this.getContract().then(contract => {\n            const method = contract.method(\n                \"balanceOf\",\n                userAddress\n            );\n            return this.processRead<string>(method, option);\n        });\n    }\n\n    /**\n     * get allowance of user\n     *\n     * @param {string} userAddress\n     * @param {ITransactionOption} [option]\n     * @returns\n     * @memberof ERC20\n     */\n    getAllowance(userAddress: string, option: IAllowanceTransactionOption = {}) {\n        const spenderAddress = option.spenderAddress;\n\n        const predicatePromise = spenderAddress ? promiseResolve(spenderAddress) : this.getPredicateAddress();\n\n        return Promise.all([predicatePromise, this.getContract()]).then(result => {\n            const [predicateAddress, contract] = result;\n            const method = contract.method(\n                \"allowance\",\n                userAddress,\n                predicateAddress,\n            );\n            return this.processRead<string>(method, option);\n        });\n    }\n\n    approve(amount: TYPE_AMOUNT, option: IApproveTransactionOption = {}) {\n        const spenderAddress = option.spenderAddress;\n\n        if (!spenderAddress && !this.contractParam.isParent) {\n            this.client.logger.error(ERROR_TYPE.NullSpenderAddress).throw();\n        }\n\n        const predicatePromise = spenderAddress ? promiseResolve(spenderAddress) : this.getPredicateAddress();\n\n        return Promise.all([predicatePromise, this.getContract()]).then(result => {\n            const [predicateAddress, contract] = result;\n            const method = contract.method(\n                \"approve\",\n                predicateAddress,\n                Converter.toHex(amount)\n            );\n            return this.processWrite(method, option);\n        });\n    }\n\n    approveMax(option: IApproveTransactionOption = {}) {\n        return this.approve(\n            MAX_AMOUNT\n            , option\n        );\n    }\n\n    /**\n     * Deposit given amount of token for user\n     *\n     * @param {TYPE_AMOUNT} amount\n     * @param {string} userAddress\n     * @param {ITransactionOption} [option]\n     * @returns\n     * @memberof ERC20\n     */\n    deposit(amount: TYPE_AMOUNT, userAddress: string, option?: ITransactionOption) {\n        this.checkForRoot(\"deposit\");\n\n        const amountInABI = this.client.parent.encodeParameters(\n            [Converter.toHex(amount)],\n            ['uint256'],\n        );\n        return this.rootChainManager.deposit(\n            userAddress,\n            this.contractParam.address,\n            amountInABI,\n            option\n        );\n    }\n\n    private depositEther_(amount: TYPE_AMOUNT, userAddress: string, option: ITransactionOption = {}) {\n        this.checkForRoot(\"depositEther\");\n\n\n        option.value = Converter.toHex(amount);\n        return this.rootChainManager.method(\"depositEtherFor\", userAddress).then(method => {\n            return this.processWrite(method, option);\n        });\n    }\n\n    /**\n     * initiate withdraw by burning provided amount\n     *\n     * @param {TYPE_AMOUNT} amount\n     * @param {ITransactionOption} [option]\n     * @returns\n     * @memberof ERC20\n     */\n    withdrawStart(amount: TYPE_AMOUNT, option?: ITransactionOption) {\n        this.checkForChild(\"withdrawStart\");\n\n\n        return this.getContract().then(contract => {\n            const method = contract.method(\n                \"withdraw\",\n                Converter.toHex(amount)\n            );\n            return this.processWrite(method, option);\n        });\n    }\n\n    private withdrawExit_(burnTransactionHash: string, isFast: boolean, option: IExitTransactionOption = {}) {\n        const eventSignature = option.burnEventSignature ?\n            option.burnEventSignature : Log_Event_Signature.Erc20Transfer;\n\n        return this.exitUtil.buildPayloadForExit(\n            burnTransactionHash,\n            eventSignature,\n            isFast\n        ).then(payload => {\n            return this.rootChainManager.exit(\n                payload, option\n            );\n        });\n    }\n\n    /**\n     * complete withdraw process after checkpoint has been submitted for the block containing burn tx.\n     *\n     * @param {string} burnTransactionHash\n     * @param {ITransactionOption} [option]\n     * @returns\n     * @memberof ERC20\n     */\n    withdrawExit(burnTransactionHash: string, option?: IExitTransactionOption) {\n        this.checkForRoot(\"withdrawExit\");\n\n        return this.withdrawExit_(burnTransactionHash, false, option);\n    }\n\n    /**\n     * complete withdraw process after checkpoint has been submitted for the block containing burn tx.\n     *\n     *  Note:- It create the proof in api call for fast exit.\n     * \n     * @param {string} burnTransactionHash\n     * @param {ITransactionOption} [option]\n     * @returns\n     * @memberof ERC20\n     */\n    withdrawExitFaster(burnTransactionHash: string, option?: IExitTransactionOption) {\n        this.checkForRoot(\"withdrawExitFaster\");\n\n        return this.withdrawExit_(burnTransactionHash, true, option);\n    }\n\n    /**\n     * check if exit has been completed for a transaction hash\n     *\n     * @param {string} burnTxHash\n     * @returns\n     * @memberof ERC20\n     */\n    isWithdrawExited(burnTxHash: string) {\n        return this.isWithdrawn(burnTxHash, Log_Event_Signature.Erc20Transfer);\n    }\n\n    /**\n     * transfer amount to another user\n     *\n     * @param {TYPE_AMOUNT} amount\n     * @param {string} to\n     * @param {ITransactionOption} [option]\n     * @returns\n     * @memberof ERC20\n     */\n    transfer(amount: TYPE_AMOUNT, to: string, option?: ITransactionOption) {\n        return this.transferERC20(to, amount, option);\n    }\n\n}\n","import { BaseToken, Web3SideChainClient } from \"../utils\";\nimport { IPOSClientConfig, ITransactionOption } from \"../interfaces\";\n\nexport class RootChainManager extends BaseToken<IPOSClientConfig> {\n\n    constructor(client_: Web3SideChainClient<IPOSClientConfig>, address: string) {\n        super({\n            address: address,\n            name: 'RootChainManager',\n            bridgeType: 'pos',\n            isParent: true\n        }, client_);\n    }\n\n    method(methodName: string, ...args) {\n        return this.getContract().then(contract => {\n            return contract.method(methodName, ...args);\n        });\n    }\n\n    deposit(userAddress: string, tokenAddress: string, depositData: string, option?: ITransactionOption) {\n        return this.method(\n            \"depositFor\",\n            userAddress,\n            tokenAddress,\n            depositData\n        ).then(method => {\n            return this.processWrite(method, option);\n        });\n    }\n\n    exit(exitPayload: string, option: ITransactionOption) {\n        return this.method(\"exit\", exitPayload).then(method => {\n            return this.processWrite(\n                method,\n                option\n            );\n        });\n    }\n\n    isExitProcessed(exitHash: string) {\n        return this.method(\n            \"processedExits\", exitHash\n        ).then(method => {\n            return this.processRead<boolean>(method);\n        });\n    }\n\n}\n","import { RootChain } from \"./root_chain\";\nimport { Converter, ProofUtil, Web3SideChainClient } from \"../utils\";\nimport { bufferToHex, rlp } from \"ethereumjs-util\";\nimport { IBlockWithTransaction, ITransactionReceipt } from \"../interfaces\";\nimport { service } from \"../services\";\nimport { BaseBigNumber, BaseWeb3Client } from \"../abstracts\";\nimport { ErrorHelper } from \"../utils/error_helper\";\nimport { ERROR_TYPE, IBaseClientConfig, IRootBlockInfo, utils } from \"..\";\n\ninterface IChainBlockInfo {\n    lastChildBlock: string;\n    txBlockNumber: number;\n}\n\n\n\nexport class ExitUtil {\n    private maticClient_: BaseWeb3Client;\n\n    rootChain: RootChain;\n\n    requestConcurrency: number;\n    config: IBaseClientConfig;\n\n    constructor(client: Web3SideChainClient<IBaseClientConfig>, rootChain: RootChain) {\n        this.maticClient_ = client.child;\n        this.rootChain = rootChain;\n        const config = client.config;\n        this.config = config;\n        this.requestConcurrency = config.requestConcurrency;\n    }\n\n    private getLogIndex_(logEventSig: string, receipt: ITransactionReceipt) {\n        let logIndex = -1;\n\n        switch (logEventSig) {\n            case '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef':\n            case '0xf94915c6d1fd521cee85359239227480c7e8776d7caf1fc3bacad5c269b66a14':\n                logIndex = receipt.logs.findIndex(\n                    log =>\n                        log.topics[0].toLowerCase() === logEventSig.toLowerCase() &&\n                        log.topics[2].toLowerCase() === '0x0000000000000000000000000000000000000000000000000000000000000000'\n                );\n                break;\n\n            case '0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62':\n            case '0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb':\n                logIndex = receipt.logs.findIndex(\n                    log =>\n                        log.topics[0].toLowerCase() === logEventSig.toLowerCase() &&\n                        log.topics[3].toLowerCase() === '0x0000000000000000000000000000000000000000000000000000000000000000'\n                );\n                break;\n\n            default:\n                logIndex = receipt.logs.findIndex(log => log.topics[0].toLowerCase() === logEventSig.toLowerCase());\n        }\n        if (logIndex < 0) {\n            throw new Error(\"Log not found in receipt\");\n        }\n        return logIndex;\n    }\n\n    private getAllLogIndices_(logEventSig: string, receipt: ITransactionReceipt) {\n      let logIndices = [];\n\n      switch (logEventSig) {\n          case '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef':\n          case '0xf94915c6d1fd521cee85359239227480c7e8776d7caf1fc3bacad5c269b66a14':\n            logIndices = receipt.logs.reduce(\n                  (_, log, index) =>\n                      ((log.topics[0].toLowerCase() === logEventSig.toLowerCase() &&\n                      log.topics[2].toLowerCase() === '0x0000000000000000000000000000000000000000000000000000000000000000') &&\n                      logIndices.push(index), logIndices), []\n              );\n              break;\n\n          case '0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62':\n          case '0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb':\n              logIndices = receipt.logs.reduce(\n                (_, log, index) =>\n                    ((log.topics[0].toLowerCase() === logEventSig.toLowerCase() &&\n                    log.topics[3].toLowerCase() === '0x0000000000000000000000000000000000000000000000000000000000000000') &&\n                    logIndices.push(index), logIndices), []\n            );\n            break;\n          \n          case '0xf871896b17e9cb7a64941c62c188a4f5c621b86800e3d15452ece01ce56073df':\n              logIndices = receipt.logs.reduce(\n                (_, log, index) =>\n                    ((log.topics[0].toLowerCase() === '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef' &&\n                    log.topics[2].toLowerCase() === '0x0000000000000000000000000000000000000000000000000000000000000000') &&\n                    logIndices.push(index), logIndices), []\n            );\n            break;\n\n          default:\n            logIndices = receipt.logs.reduce(\n              (_, log, index) =>\n                  ((log.topics[0].toLowerCase() === logEventSig.toLowerCase()) &&\n                  logIndices.push(index), logIndices), []\n          );\n      }\n      if (logIndices.length === 0) {\n          throw new Error(\"Log not found in receipt\");\n      }\n      return logIndices;\n  }\n\n    getChainBlockInfo(burnTxHash: string) {\n        return Promise.all([\n            this.rootChain.getLastChildBlock(),\n            this.maticClient_.getTransaction(burnTxHash),\n        ]).then(result => {\n            return {\n                lastChildBlock: result[0],\n                txBlockNumber: result[1].blockNumber\n            } as IChainBlockInfo;\n        });\n    }\n\n    private isCheckPointed_(data: IChainBlockInfo) {\n        // lastchild block is greater equal to transacton block number; \n        return new utils.BN(data.lastChildBlock).gte(\n            new utils.BN(data.txBlockNumber)\n        );\n    }\n\n    isCheckPointed(burnTxHash: string) {\n        return this.getChainBlockInfo(\n            burnTxHash\n        ).then(result => {\n            return this.isCheckPointed_(\n                result\n            );\n        });\n    }\n\n    /**\n     * returns info about block number existance on parent chain\n     * 1. root block number, \n     * 2. start block number, \n     * 3. end block number \n     *\n     * @private\n     * @param {number} txBlockNumber - transaction block number on child chain\n     * @return {*} \n     * @memberof ExitUtil\n     */\n    private getRootBlockInfo(txBlockNumber: number) {\n        // find in which block child was included in parent\n        let rootBlockNumber: BaseBigNumber;\n        return this.rootChain.findRootBlockFromChild(\n            txBlockNumber\n        ).then(blockNumber => {\n            rootBlockNumber = blockNumber;\n            return this.rootChain.method(\n                \"headerBlocks\",\n                Converter.toHex(blockNumber)\n            );\n        }).then(method => {\n            return method.read<IRootBlockInfo>();\n        }).then(rootBlockInfo => {\n            return {\n                // header block number - root block number in which child block exist \n                headerBlockNumber: rootBlockNumber,\n                // range of block\n                // end - block end number\n                end: rootBlockInfo.end.toString(),\n                // start - block start number\n                start: rootBlockInfo.start.toString(),\n            } as IRootBlockInfo;\n        });\n\n    }\n\n    private getRootBlockInfoFromAPI(txBlockNumber: number) {\n        this.maticClient_.logger.log(\"block info from API 1\");\n        return service.network.getBlockIncluded(\n            this.config.network,\n            txBlockNumber\n        ).then(headerBlock => {\n            this.maticClient_.logger.log(\"block info from API 2\", headerBlock);\n            if (!headerBlock || !headerBlock.start || !headerBlock.end || !headerBlock.headerBlockNumber) {\n                throw Error('Network API Error');\n            }\n            return headerBlock;\n        }).catch(err => {\n            this.maticClient_.logger.log(\"block info from API\", err);\n            return this.getRootBlockInfo(txBlockNumber);\n        });\n    }\n\n    private getBlockProof(txBlockNumber: number, rootBlockInfo: { start, end }) {\n        return ProofUtil.buildBlockProof(\n            this.maticClient_,\n            parseInt(rootBlockInfo.start, 10),\n            parseInt(rootBlockInfo.end, 10),\n            parseInt(txBlockNumber + '', 10)\n        );\n    }\n\n    private getBlockProofFromAPI(txBlockNumber: number, rootBlockInfo: { start, end }) {\n\n        return service.network.getProof(\n            this.config.network,\n            rootBlockInfo.start,\n            rootBlockInfo.end,\n            txBlockNumber\n        ).then(blockProof => {\n            if (!blockProof) {\n                throw Error('Network API Error');\n            }\n            this.maticClient_.logger.log(\"block proof from API 1\");\n            return blockProof;\n        }).catch(_ => {\n            return this.getBlockProof(txBlockNumber, rootBlockInfo);\n        });\n    }\n\n    buildPayloadForExit(burnTxHash: string, logEventSig: string, isFast: boolean, index = 0) {\n\n        if (isFast && !service.network) {\n            new ErrorHelper(ERROR_TYPE.ProofAPINotSet).throw();\n        }\n\n        if (index < 0) {\n          throw new Error('Index must not be a negative integer');\n        }\n\n        let txBlockNumber: number,\n            rootBlockInfo: IRootBlockInfo,\n            receipt: ITransactionReceipt,\n            block: IBlockWithTransaction,\n            blockProof;\n\n        return this.getChainBlockInfo(\n            burnTxHash\n        ).then(blockInfo => {\n            if (!this.isCheckPointed_(blockInfo)) {\n                throw new Error(\n                    'Burn transaction has not been checkpointed as yet'\n                );\n            }\n\n            // step 1 - Get Block number from transaction hash\n            txBlockNumber = blockInfo.txBlockNumber;\n            // step 2-  get transaction receipt from txhash and \n            // block information from block number\n            return Promise.all([\n                this.maticClient_.getTransactionReceipt(burnTxHash),\n                this.maticClient_.getBlockWithTransaction(txBlockNumber)\n            ]);\n        }).then(result => {\n            [receipt, block] = result;\n            // step  3 - get information about block saved in parent chain \n            return (\n                isFast ? this.getRootBlockInfoFromAPI(txBlockNumber) :\n                    this.getRootBlockInfo(txBlockNumber)\n            );\n        }).then(rootBlockInfoResult => {\n            rootBlockInfo = rootBlockInfoResult;\n            // step 4 - build block proof\n            return (\n                isFast ? this.getBlockProofFromAPI(txBlockNumber, rootBlockInfo) :\n                    this.getBlockProof(txBlockNumber, rootBlockInfo)\n            );\n        }).then(blockProofResult => {\n            blockProof = blockProofResult;\n            // step 5- create receipt proof\n            return ProofUtil.getReceiptProof(\n                receipt,\n                block,\n                this.maticClient_,\n                this.requestConcurrency\n            );\n        }).then((receiptProof: any) => {\n            // step 6 - encode payload, convert into hex\n\n            // when token index is not 0\n            if(index > 0) {\n              const logIndices = this.getAllLogIndices_(\n                logEventSig, receipt\n              );\n\n              if(index >= logIndices.length) {\n                throw new Error('Index is grater than the number of tokens in this transaction');\n              }\n\n              return this.encodePayload_(\n                rootBlockInfo.headerBlockNumber.toNumber(),\n                blockProof,\n                txBlockNumber,\n                block.timestamp,\n                Buffer.from(block.transactionsRoot.slice(2), 'hex'),\n                Buffer.from(block.receiptsRoot.slice(2), 'hex'),\n                ProofUtil.getReceiptBytes(receipt), // rlp encoded\n                receiptProof.parentNodes,\n                receiptProof.path,\n                logIndices[index]\n              );\n            }\n\n            // when token index is 0\n            const logIndex = this.getLogIndex_(\n                logEventSig, receipt\n            );\n\n            return this.encodePayload_(\n                rootBlockInfo.headerBlockNumber.toNumber(),\n                blockProof,\n                txBlockNumber,\n                block.timestamp,\n                Buffer.from(block.transactionsRoot.slice(2), 'hex'),\n                Buffer.from(block.receiptsRoot.slice(2), 'hex'),\n                ProofUtil.getReceiptBytes(receipt), // rlp encoded\n                receiptProof.parentNodes,\n                receiptProof.path,\n                logIndex\n            );\n        });\n    }\n\n    buildMultiplePayloadsForExit(burnTxHash: string, logEventSig: string, isFast: boolean) {\n\n      if (isFast && !service.network) {\n          new ErrorHelper(ERROR_TYPE.ProofAPINotSet).throw();\n      }\n\n      let txBlockNumber: number,\n          rootBlockInfo: IRootBlockInfo,\n          receipt: ITransactionReceipt,\n          block: IBlockWithTransaction,\n          blockProof;\n\n      return this.getChainBlockInfo(\n          burnTxHash\n      ).then(blockInfo => {\n          if (!this.isCheckPointed_(blockInfo)) {\n              throw new Error(\n                  'Burn transaction has not been checkpointed as yet'\n              );\n          }\n\n          // step 1 - Get Block number from transaction hash\n          txBlockNumber = blockInfo.txBlockNumber;\n          // step 2-  get transaction receipt from txhash and \n          // block information from block number\n          return Promise.all([\n              this.maticClient_.getTransactionReceipt(burnTxHash),\n              this.maticClient_.getBlockWithTransaction(txBlockNumber)\n          ]);\n      }).then(result => {\n          [receipt, block] = result;\n          // step  3 - get information about block saved in parent chain \n          return (\n              isFast ? this.getRootBlockInfoFromAPI(txBlockNumber) :\n                  this.getRootBlockInfo(txBlockNumber)\n          );\n      }).then(rootBlockInfoResult => {\n          rootBlockInfo = rootBlockInfoResult;\n          // step 4 - build block proof\n          return (\n              isFast ? this.getBlockProofFromAPI(txBlockNumber, rootBlockInfo) :\n                  this.getBlockProof(txBlockNumber, rootBlockInfo)\n          );\n      }).then(blockProofResult => {\n          blockProof = blockProofResult;\n          // step 5- create receipt proof\n          return ProofUtil.getReceiptProof(\n              receipt,\n              block,\n              this.maticClient_,\n              this.requestConcurrency\n          );\n      }).then((receiptProof: any) => {\n          const logIndices = this.getAllLogIndices_(\n              logEventSig, receipt\n          );\n          const payloads:string[] = [];\n\n          // step 6 - encode payloads, convert into hex\n          for (const logIndex of logIndices){\n            payloads.push(\n              this.encodePayload_(\n                rootBlockInfo.headerBlockNumber.toNumber(),\n                blockProof,\n                txBlockNumber,\n                block.timestamp,\n                Buffer.from(block.transactionsRoot.slice(2), 'hex'),\n                Buffer.from(block.receiptsRoot.slice(2), 'hex'),\n                ProofUtil.getReceiptBytes(receipt), // rlp encoded\n                receiptProof.parentNodes,\n                receiptProof.path,\n                logIndex\n              )\n            );\n          }\n\n          return payloads;\n      });\n  }\n\n    private encodePayload_(\n        headerNumber,\n        buildBlockProof,\n        blockNumber,\n        timestamp,\n        transactionsRoot,\n        receiptsRoot,\n        receipt,\n        receiptParentNodes,\n        path,\n        logIndex\n    ) {\n        return bufferToHex(\n            rlp.encode([\n                headerNumber,\n                buildBlockProof,\n                blockNumber,\n                timestamp,\n                bufferToHex(transactionsRoot),\n                bufferToHex(receiptsRoot),\n                bufferToHex(receipt),\n                bufferToHex(rlp.encode(receiptParentNodes)),\n                bufferToHex(Buffer.concat([Buffer.from('00', 'hex'), path])),\n                logIndex,\n            ])\n        );\n    }\n\n    getExitHash(burnTxHash, index, logEventSig) {\n        let lastChildBlock: string,\n            receipt: ITransactionReceipt,\n            block: IBlockWithTransaction;\n\n        return Promise.all([\n            this.rootChain.getLastChildBlock(),\n            this.maticClient_.getTransactionReceipt(burnTxHash)\n        ]).then(result => {\n            lastChildBlock = result[0];\n            receipt = result[1];\n            return this.maticClient_.getBlockWithTransaction(\n                receipt.blockNumber\n            );\n        }).then(blockResult => {\n            block = blockResult;\n            if (!this.isCheckPointed_({ lastChildBlock: lastChildBlock, txBlockNumber: receipt.blockNumber })) {\n                this.maticClient_.logger.error(ERROR_TYPE.BurnTxNotCheckPointed).throw();\n            }\n            return ProofUtil.getReceiptProof(\n                receipt,\n                block,\n                this.maticClient_,\n                this.requestConcurrency\n            );\n        }).then((receiptProof: any) => {\n            let logIndex;\n            const nibbleArr = [];\n            receiptProof.path.forEach(byte => {\n                nibbleArr.push(Buffer.from('0' + (byte / 0x10).toString(16), 'hex'));\n                nibbleArr.push(Buffer.from('0' + (byte % 0x10).toString(16), 'hex'));\n            });\n\n            if(index > 0) {\n              const logIndices = this.getAllLogIndices_(logEventSig, receipt);\n              logIndex = logIndices[index];\n            }\n\n            logIndex = this.getLogIndex_(logEventSig, receipt);\n\n            return this.maticClient_.etheriumSha3(\n                receipt.blockNumber, bufferToHex(Buffer.concat(nibbleArr)), logIndex\n            );\n        });\n    }\n}\n","import { BaseToken, utils, Web3SideChainClient } from \"../utils\";\nimport { TYPE_AMOUNT } from \"../types\";\nimport { IPOSClientConfig, ITransactionOption } from \"../interfaces\";\nimport { BaseBigNumber } from \"..\";\n\nexport class RootChain extends BaseToken<IPOSClientConfig> {\n\n    constructor(client_: Web3SideChainClient<IPOSClientConfig>, address: string) {\n        super({\n            address: address,\n            name: 'RootChain',\n            isParent: true\n        }, client_);\n    }\n\n    method(methodName: string, ...args) {\n        return this.getContract().then(contract => {\n            return contract.method(methodName, ...args);\n        });\n    }\n\n    getLastChildBlock() {\n        return this.method(\"getLastChildBlock\").then(method => {\n            return method.read<string>({}, this.client.config.rootChainDefaultBlock || 'safe');\n        });\n    }\n\n    async findRootBlockFromChild(childBlockNumber: TYPE_AMOUNT): Promise<BaseBigNumber> {\n        const bigOne = new utils.BN(1);\n        const bigtwo = new utils.BN(2);\n        const checkPointInterval = new utils.BN(10000);\n\n        childBlockNumber = new utils.BN(childBlockNumber);\n        // first checkpoint id = start * 10000\n        let start = bigOne;\n\n        // last checkpoint id = end * 10000\n        const method = await this.method(\"currentHeaderBlock\");\n        const currentHeaderBlock = await method.read<string>();\n        let end = new utils.BN(currentHeaderBlock).div(\n            checkPointInterval\n        );\n\n        // binary search on all the checkpoints to find the checkpoint that contains the childBlockNumber\n        let ans;\n        while (start.lte(end)) {\n            if (start.eq(end)) {\n                ans = start;\n                break;\n            }\n            const mid = start.add(end).div(bigtwo);\n            const headerBlocksMethod = await this.method(\n                \"headerBlocks\",\n                mid.mul(checkPointInterval).toString()\n            );\n            const headerBlock = await headerBlocksMethod.read<{ start: number, end: number }>();\n\n            const headerStart = new utils.BN(headerBlock.start);\n            const headerEnd = new utils.BN(headerBlock.end);\n\n            if (headerStart.lte(childBlockNumber) && childBlockNumber.lte(headerEnd)) {\n                // if childBlockNumber is between the upper and lower bounds of the headerBlock, we found our answer\n                ans = mid;\n                break;\n            } else if (headerStart.gt(childBlockNumber)) {\n                // childBlockNumber was checkpointed before this header\n                end = mid.sub(bigOne);\n            } else if (headerEnd.lt(childBlockNumber)) {\n                // childBlockNumber was checkpointed after this header\n                start = mid.add(bigOne);\n            }\n        }\n        return ans.mul(checkPointInterval);\n    }\n\n}\n","import { IPOSClientConfig, IPOSContracts, ITransactionOption } from \"../interfaces\";\nimport { RootChainManager } from \"./root_chain_manager\";\nimport { Converter, Web3SideChainClient } from \"../utils\";\nimport { POSToken } from \"./pos_token\";\nimport { TYPE_AMOUNT } from \"../types\";\nimport { ExitUtil } from \"./exit_util\";\nimport { Log_Event_Signature } from \"../enums\";\n\nexport class ERC721 extends POSToken {\n\n\n    constructor(\n        tokenAddress: string,\n        isParent: boolean,\n        client: Web3SideChainClient<IPOSClientConfig>,\n        getContracts: () => IPOSContracts\n    ) {\n        super({\n            isParent,\n            address: tokenAddress,\n            name: 'ChildERC721',\n            bridgeType: 'pos'\n        }, client, getContracts);\n    }\n\n    private validateMany_(tokenIds) {\n        if (tokenIds.length > 20) {\n            throw new Error('can not process more than 20 tokens');\n        }\n        return tokenIds.map(tokenId => {\n            return Converter.toHex(tokenId);\n        });\n    }\n\n    /**\n     * get tokens count for the user\n     *\n     * @param {string} userAddress\n     * @param {ITransactionOption} [options]\n     * @returns\n     * @memberof ERC721\n     */\n    getTokensCount(userAddress: string, options?: ITransactionOption) {\n        return this.getContract().then(contract => {\n            const method = contract.method(\n                \"balanceOf\",\n                userAddress\n            );\n            return this.processRead<string>(method, options);\n        }).then(count => {\n            return Number(count);\n        });\n    }\n\n    /**\n     * returns token id on supplied index for user\n     *\n     * @param {number} index\n     * @param {string} userAddress\n     * @param {ITransactionOption} [options]\n     * @returns\n     * @memberof ERC721\n     */\n    getTokenIdAtIndexForUser(index: number, userAddress: string, options?: ITransactionOption) {\n        return this.getContract().then(contract => {\n            const method = contract.method(\n                \"tokenOfOwnerByIndex\",\n                userAddress,\n                index\n            );\n\n            return this.processRead<string>(method, options);\n        });\n    }\n\n    /**\n     * get all tokens for user\n     *\n     * @param {string} userAddress\n     * @param {*} [limit=Infinity]\n     * @returns\n     * @memberof ERC721\n     */\n    getAllTokens(userAddress: string, limit = Infinity) {\n        return this.getTokensCount(userAddress).then(count => {\n            count = Number(count);\n            if (count > limit) {\n                count = limit;\n            }\n            const promises = [];\n            for (let i = 0; i < count; i++) {\n                promises.push(\n                    this.getTokenIdAtIndexForUser(i, userAddress)\n                );\n            }\n            return Promise.all(\n                promises\n            );\n        });\n    }\n\n    isApproved(tokenId: string, option?: ITransactionOption) {\n        this.checkForRoot(\"isApproved\");\n\n        return this.getContract().then(contract => {\n            const method = contract.method(\n                \"getApproved\",\n                tokenId\n            );\n            return Promise.all([\n                this.processRead<string>(method, option),\n                this.getPredicateAddress()\n            ]).then(result => {\n                return result[0] === result[1];\n            });\n        });\n    }\n\n    isApprovedAll(userAddress: string, option?: ITransactionOption) {\n        this.checkForRoot(\"isApprovedAll\");\n\n        return Promise.all([this.getContract(), this.getPredicateAddress()]).then(result => {\n            const [contract, predicateAddress] = result;\n            const method = contract.method(\n                \"isApprovedForAll\",\n                userAddress,\n                predicateAddress\n            );\n            return this.processRead<boolean>(method, option);\n        });\n\n    }\n\n    approve(tokenId: TYPE_AMOUNT, option?: ITransactionOption) {\n        this.checkForRoot(\"approve\");\n\n        return Promise.all([this.getContract(), this.getPredicateAddress()]).then(result => {\n            const [contract, predicateAddress] = result;\n            const method = contract.method(\n                \"approve\",\n                predicateAddress,\n                Converter.toHex(tokenId)\n            );\n            return this.processWrite(method, option);\n        });\n    }\n\n    approveAll(option?: ITransactionOption) {\n        this.checkForRoot(\"approveAll\");\n\n        return Promise.all([this.getContract(), this.getPredicateAddress()]).then(result => {\n            const [contract, predicateAddress] = result;\n            const method = contract.method(\n                \"setApprovalForAll\",\n                predicateAddress,\n                true\n            );\n            return this.processWrite(method, option);\n        });\n    }\n\n\n    deposit(tokenId: TYPE_AMOUNT, userAddress: string, option?: ITransactionOption) {\n        this.checkForRoot(\"deposit\");\n\n        const amountInABI = this.client.parent.encodeParameters(\n            [Converter.toHex(tokenId)],\n            ['uint256'],\n        );\n        return this.rootChainManager.deposit(\n            userAddress,\n            this.contractParam.address,\n            amountInABI,\n            option\n        );\n    }\n\n    depositMany(tokenIds: TYPE_AMOUNT[], userAddress: string, option?: ITransactionOption) {\n        this.checkForRoot(\"depositMany\");\n\n        const tokensInHex = this.validateMany_(tokenIds);\n\n        const amountInABI = this.client.parent.encodeParameters(\n            [tokensInHex],\n            ['uint256[]'],\n        );\n        return this.rootChainManager.deposit(\n            userAddress,\n            this.contractParam.address,\n            amountInABI,\n            option\n        );\n    }\n\n    withdrawStart(tokenId: TYPE_AMOUNT, option?: ITransactionOption) {\n        this.checkForChild(\"withdrawStart\");\n\n\n        return this.getContract().then(contract => {\n            const method = contract.method(\n                \"withdraw\",\n                Converter.toHex(tokenId)\n            );\n            return this.processWrite(method, option);\n        });\n    }\n\n    withdrawStartWithMetaData(tokenId: TYPE_AMOUNT, option?: ITransactionOption) {\n        this.checkForChild(\"withdrawStartWithMetaData\");\n\n\n        return this.getContract().then(contract => {\n            const method = contract.method(\n                \"withdrawWithMetadata\",\n                Converter.toHex(tokenId)\n            );\n            return this.processWrite(method, option);\n        });\n    }\n\n    withdrawStartMany(tokenIds: TYPE_AMOUNT[], option?: ITransactionOption) {\n        this.checkForChild(\"withdrawStartMany\");\n\n        const tokensInHex = this.validateMany_(tokenIds);\n\n        return this.getContract().then(contract => {\n            const method = contract.method(\n                \"withdrawBatch\",\n                tokensInHex\n            );\n            return this.processWrite(method, option);\n        });\n    }\n\n    withdrawExit(burnTransactionHash: string, option?: ITransactionOption) {\n        this.checkForRoot(\"withdrawExit\");\n\n        return this.exitUtil.buildPayloadForExit(\n            burnTransactionHash,\n            Log_Event_Signature.Erc721Transfer,\n            false\n        ).then(payload => {\n            return this.rootChainManager.exit(\n                payload, option\n            );\n        });\n    }\n\n    withdrawExitOnIndex(burnTransactionHash: string, index: number, option?: ITransactionOption) {\n      this.checkForRoot(\"withdrawExit\");\n\n      return this.exitUtil.buildPayloadForExit(\n          burnTransactionHash,\n          Log_Event_Signature.Erc721Transfer,\n          false,\n          index\n      ).then(payload => {\n          return this.rootChainManager.exit(\n              payload, option\n          );\n      });\n    }\n\n    // async withdrawExitMany(burnTransactionHash: string, option?: ITransactionOption) {\n    //     this.checkForRoot(\"withdrawExitMany\");\n\n    //     return this.exitUtil.buildMultiplePayloadsForExit(\n    //         burnTransactionHash,\n    //         Log_Event_Signature.Erc721BatchTransfer,\n    //         false\n    //     ).then(async payloads => {\n    //         const exitTxs = [];\n    //         if()\n    //         for(const i in payloads) {\n    //           exitTxs.push(this.rootChainManager.exit(\n    //             payloads[i], option\n    //         ));\n    //         }\n    //         return Promise.all(exitTxs);\n    //         });\n    // }\n\n    withdrawExitFaster(burnTransactionHash: string, option?: ITransactionOption) {\n        this.checkForRoot(\"withdrawExitFaster\");\n\n        return this.exitUtil.buildPayloadForExit(\n            burnTransactionHash,\n            Log_Event_Signature.Erc721Transfer,\n            true\n        ).then(payload => {\n            return this.rootChainManager.exit(\n                payload, option\n            );\n        });\n    }\n\n    // withdrawExitFasterMany(burnTransactionHash: string, option?: ITransactionOption) {\n    //     this.checkForRoot(\"withdrawExitFasterMany\");\n\n\n    //     return this.exitUtil.buildPayloadForExit(\n    //         burnTransactionHash,\n    //         Log_Event_Signature.Erc721BatchTransfer,\n    //         true\n    //     ).then(payload => {\n    //         return this.rootChainManager.exit(\n    //             payload, option\n    //         );\n    //     });\n    // }\n\n    isWithdrawExited(txHash: string) {\n        return this.isWithdrawn(\n            txHash, Log_Event_Signature.Erc721Transfer\n        );\n    }\n\n    isWithdrawExitedMany(txHash: string) {\n        return this.isWithdrawn(\n            txHash, Log_Event_Signature.Erc721BatchTransfer\n        );\n    }\n\n    isWithdrawExitedOnIndex(txHash: string, index: number) {\n        return this.isWithdrawnOnIndex(\n            txHash, index, Log_Event_Signature.Erc721Transfer\n        );\n    }\n\n    /**\n     * tranfer to another user\n     *\n     * @param {string} tokenId\n     * @param {string} from\n     * @param {string} to\n     * @param {ITransactionOption} [option]\n     * @returns\n     * @memberof ERC721\n     */\n    transfer(tokenId: string, from: string, to: string, option?: ITransactionOption) {\n        return this.transferERC721(\n            from,\n            to,\n            tokenId,\n            option\n        );\n    }\n\n}\n","import { IPOSClientConfig, ITransactionOption } from \"../interfaces\";\nimport { Converter, promiseResolve, Web3SideChainClient } from \"../utils\";\nimport { POSToken } from \"./pos_token\";\nimport { Log_Event_Signature } from \"../enums\";\nimport { IPOSContracts, IPOSERC1155Address } from \"../interfaces\";\nimport { POSERC1155DepositBatchParam, POSERC1155DepositParam, POSERC1155TransferParam, TYPE_AMOUNT } from \"..\";\n\nexport class ERC1155 extends POSToken {\n\n    mintablePredicateAddress: string;\n\n    get addressConfig(): IPOSERC1155Address {\n        return this.client.config.erc1155 || {};\n    }\n\n    constructor(\n        tokenAddress: string,\n        isParent: boolean,\n        client: Web3SideChainClient<IPOSClientConfig>,\n        getContracts: () => IPOSContracts\n    ) {\n        super({\n            isParent,\n            address: tokenAddress,\n            name: 'ChildERC1155',\n            bridgeType: 'pos'\n        }, client, getContracts);\n\n    }\n\n    private getAddress_(value: string) {\n        const addresses = this.addressConfig;\n        if (addresses[value]) {\n            return promiseResolve(addresses[value]);\n        }\n\n        return this.client.getConfig(value);\n    }\n\n    /**\n     * get balance of a user for supplied token\n     *\n     * @param {string} userAddress\n     * @param {TYPE_AMOUNT} tokenId\n     * @param {ITransactionOption} [option]\n     * @return {*} \n     * @memberof ERC1155\n     */\n    getBalance(userAddress: string, tokenId: TYPE_AMOUNT, option?: ITransactionOption) {\n        return this.getContract().then(contract => {\n            const method = contract.method(\n                \"balanceOf\",\n                userAddress,\n                Converter.toHex(tokenId)\n            );\n            return this.processRead<string>(method, option);\n        });\n    }\n\n    /**\n     * check if a user is approved for all tokens\n     *\n     * @param {string} userAddress\n     * @param {ITransactionOption} [option]\n     * @return {*} \n     * @memberof ERC1155\n     */\n    isApprovedAll(userAddress: string, option?: ITransactionOption) {\n        this.checkForRoot(\"isApprovedAll\");\n\n        return Promise.all([this.getContract(), this.getPredicateAddress()]).then(result => {\n            const [contract, predicateAddress] = result;\n            const method = contract.method(\n                \"isApprovedForAll\",\n                userAddress,\n                predicateAddress\n            );\n            return this.processRead<boolean>(method, option);\n        });\n\n    }\n\n    private approveAll_(predicateAddressPromise: Promise<string>, option: ITransactionOption) {\n        this.checkForRoot(\"approve\");\n\n        return Promise.all([this.getContract(), predicateAddressPromise]).then(result => {\n            const [contract, predicateAddress] = result;\n            const method = contract.method(\n                \"setApprovalForAll\",\n                predicateAddress,\n                true\n            );\n            return this.processWrite(method, option);\n        });\n    }\n\n    /**\n     * approve all tokens \n     *\n     * @param {ITransactionOption} [option]\n     * @return {*} \n     * @memberof ERC1155\n     */\n    approveAll(option?: ITransactionOption) {\n        this.checkForRoot(\"approve\");\n\n        return this.approveAll_(\n            this.getPredicateAddress(), option\n        );\n    }\n\n    /**\n     * approve all tokens for mintable token\n     *\n     * @param {ITransactionOption} [option]\n     * @return {*} \n     * @memberof ERC1155\n     */\n    approveAllForMintable(option?: ITransactionOption) {\n        this.checkForRoot(\"approveForMintable\");\n        const addressPath = \"Main.POSContracts.MintableERC1155PredicateProxy\";\n        return this.approveAll_(\n            this.getAddress_(addressPath), option\n        );\n    }\n\n    /**\n     * deposit supplied amount of token for a user \n     *\n     * @param {POSERC1155DepositParam} param\n     * @param {ITransactionOption} [option]\n     * @return {*} \n     * @memberof ERC1155\n     */\n    deposit(param: POSERC1155DepositParam, option?: ITransactionOption) {\n        this.checkForRoot(\"deposit\");\n        return this.depositMany({\n            amounts: [param.amount],\n            tokenIds: [param.tokenId],\n            userAddress: param.userAddress,\n            data: param.data\n        }, option);\n    }\n\n    /**\n     * deposit supplied amount of multiple token for user\n     *\n     * @param {POSERC1155DepositBatchParam} param\n     * @param {ITransactionOption} [option]\n     * @return {*} \n     * @memberof ERC1155\n     */\n    depositMany(param: POSERC1155DepositBatchParam, option?: ITransactionOption) {\n        this.checkForRoot(\"depositMany\");\n\n        const { tokenIds, amounts, data, userAddress } = param;\n        const emptyHex = Converter.toHex(0);\n        const amountInABI = this.client.parent.encodeParameters(\n            [\n                tokenIds.map(t => Converter.toHex(t)),\n                amounts.map(a => Converter.toHex(a)),\n                data || emptyHex\n            ],\n            ['uint256[]', 'uint256[]', 'bytes'],\n        );\n\n        return this.rootChainManager.deposit(\n            userAddress,\n            this.contractParam.address,\n            amountInABI,\n            option\n        );\n\n    }\n\n    /**\n     * start withdraw process by burning the required amount for a token\n     *\n     * @param {string} tokenId\n     * @param {TYPE_AMOUNT} amount\n     * @param {ITransactionOption} [option]\n     * @return {*} \n     * @memberof ERC1155\n     */\n    withdrawStart(tokenId: TYPE_AMOUNT, amount: TYPE_AMOUNT, option?: ITransactionOption) {\n        this.checkForChild(\"withdrawStart\");\n\n        return this.getContract().then(contract => {\n            const method = contract.method(\n                \"withdrawSingle\",\n                Converter.toHex(tokenId),\n                Converter.toHex(amount)\n            );\n            return this.processWrite(method, option);\n        });\n    }\n\n    /**\n     * start the withdraw process by burning the supplied amount of multiple token at a time\n     *\n     * @param {TYPE_AMOUNT[]} tokenIds\n     * @param {TYPE_AMOUNT[]} amounts\n     * @param {ITransactionOption} [option]\n     * @return {*} \n     * @memberof ERC1155\n     */\n    withdrawStartMany(tokenIds: TYPE_AMOUNT[], amounts: TYPE_AMOUNT[], option?: ITransactionOption) {\n        this.checkForChild(\"withdrawStartMany\");\n\n        const tokensInHex = tokenIds.map(t => {\n            return Converter.toHex(t);\n        });\n        const amountsInHex = amounts.map(t => {\n            return Converter.toHex(t);\n        });\n\n        return this.getContract().then(contract => {\n            const method = contract.method(\n                \"withdrawBatch\",\n                tokensInHex,\n                amountsInHex\n            );\n            return this.processWrite(method, option);\n        });\n    }\n\n    /**\n     * exit the withdraw process and get the burned amount on root chain\n     *\n     * @param {string} burnTransactionHash\n     * @param {ITransactionOption} [option]\n     * @return {*} \n     * @memberof ERC1155\n     */\n    withdrawExit(burnTransactionHash: string, option?: ITransactionOption) {\n        this.checkForRoot(\"withdrawExit\");\n\n        return this.withdrawExitPOS(\n            burnTransactionHash,\n            Log_Event_Signature.Erc1155Transfer,\n            false,\n            option\n        );\n    }\n\n    /**\n     * exit the withdraw process and get the burned amount on root chain\n     * \n     * the process is faster because it uses proof api\n     *\n     * @param {string} burnTransactionHash\n     * @param {ITransactionOption} [option]\n     * @return {*} \n     * @memberof ERC1155\n     */\n    withdrawExitFaster(burnTransactionHash: string, option?: ITransactionOption) {\n        this.checkForRoot(\"withdrawExitFaster\");\n\n        return this.withdrawExitPOS(\n            burnTransactionHash,\n            Log_Event_Signature.Erc1155Transfer,\n            true,\n            option\n        );\n    }\n\n    /**\n     * exit the withdraw process for many burned transaction and get the burned amount on root chain\n     *\n     * @param {string} burnTransactionHash\n     * @param {ITransactionOption} [option]\n     * @return {*} \n     * @memberof ERC1155\n     */\n    withdrawExitMany(burnTransactionHash: string, option?: ITransactionOption) {\n        this.checkForRoot(\"withdrawExitMany\");\n\n\n        return this.withdrawExitPOS(\n            burnTransactionHash,\n            Log_Event_Signature.Erc1155BatchTransfer,\n            false,\n            option\n        );\n    }\n\n    /**\n     * exit the withdraw process for many burned transaction and get the burned amount on root chain\n     *\n     * the process is faster because it uses proof api\n     * \n     * @param {string} burnTransactionHash\n     * @param {ITransactionOption} [option]\n     * @return {*} \n     * @memberof ERC1155\n     */\n    withdrawExitFasterMany(burnTransactionHash: string, option?: ITransactionOption) {\n        this.checkForRoot(\"withdrawExitFasterMany\");\n\n\n        return this.withdrawExitPOS(\n            burnTransactionHash,\n            Log_Event_Signature.Erc1155BatchTransfer,\n            true,\n            option\n        );\n    }\n\n    /**\n     * check if exit has been completed for a transaction hash\n     *\n     * @param {string} burnTxHash\n     * @return {*} \n     * @memberof ERC1155\n     */\n    isWithdrawExited(txHash: string) {\n        return this.isWithdrawn(\n            txHash, Log_Event_Signature.Erc1155Transfer\n        );\n    }\n\n    /**\n     * check if batch exit has been completed for a transaction hash\n     *\n     * @param {string} txHash\n     * @return {*} \n     * @memberof ERC1155\n     */\n    isWithdrawExitedMany(txHash: string) {\n        return this.isWithdrawn(\n            txHash, Log_Event_Signature.Erc1155BatchTransfer\n        );\n    }\n\n    /**\n     * transfer the required amount of a token to anothe user\n     *\n     * @param {POSERC1155TransferParam} param\n     * @param {ITransactionOption} [option]\n     * @return {*} \n     * @memberof ERC1155\n     */\n    transfer(param: POSERC1155TransferParam, option?: ITransactionOption) {\n        return this.transferERC1155(\n            param, option\n        );\n    }\n}","import { ERC20 } from \"./erc20\";\nimport { RootChainManager } from \"./root_chain_manager\";\nimport { BridgeClient } from \"../utils\";\nimport { IPOSClientConfig, IPOSContracts, ITransactionOption } from \"../interfaces\";\nimport { ExitUtil } from \"./exit_util\";\nimport { RootChain } from \"./root_chain\";\nimport { ERC721 } from \"./erc721\";\nimport { TYPE_AMOUNT } from \"../types\";\nimport { ERC1155 } from \"./erc1155\";\n\nexport * from \"./exit_util\";\nexport * from \"./root_chain_manager\";\nexport * from \"./root_chain\";\n\nexport class POSClient extends BridgeClient<IPOSClientConfig> {\n\n    rootChainManager: RootChainManager;\n\n    init(config: IPOSClientConfig) {\n        const client = this.client;\n\n        return client.init(config).then(_ => {\n            const mainPOSContracts = client.mainPOSContracts;\n            client.config = config = Object.assign(\n                {\n\n                    rootChainManager: mainPOSContracts.RootChainManagerProxy,\n                    rootChain: client.mainPlasmaContracts.RootChainProxy\n                } as IPOSClientConfig,\n                config\n            );\n\n            this.rootChainManager = new RootChainManager(\n                this.client,\n                config.rootChainManager,\n            );\n\n            const rootChain = new RootChain(\n                this.client,\n                config.rootChain,\n            );\n\n            this.exitUtil = new ExitUtil(\n                this.client,\n                rootChain\n            );\n\n            return this;\n        });\n    }\n\n    erc20(tokenAddress, isParent?: boolean) {\n        return new ERC20(\n            tokenAddress,\n            isParent,\n            this.client,\n            this.getContracts_.bind(this)\n        );\n    }\n\n    erc721(tokenAddress, isParent?: boolean) {\n        return new ERC721(\n            tokenAddress,\n            isParent,\n            this.client,\n            this.getContracts_.bind(this)\n        );\n    }\n\n    erc1155(tokenAddress, isParent?: boolean) {\n        return new ERC1155(\n            tokenAddress,\n            isParent,\n            this.client,\n            this.getContracts_.bind(this)\n        );\n    }\n\n    depositEther(amount: TYPE_AMOUNT, userAddress: string, option: ITransactionOption) {\n        return new ERC20(\n            '', true, this.client,\n            this.getContracts_.bind(this),\n        )['depositEther_'](amount, userAddress, option);\n    }\n\n    private getContracts_() {\n        return {\n            exitUtil: this.exitUtil,\n            rootChainManager: this.rootChainManager\n        } as IPOSContracts;\n    }\n}","import { POSClient } from \"./pos\";\nimport { use, utils } from \"./utils\";\n\nexport const defaultExport = {\n    utils: utils,\n    use,\n    POSClient,\n};","import { BaseToken, Web3SideChainClient } from \"../utils\";\nimport { IContractInitParam, IHermezClientConfig } from \"../interfaces\";\nimport { IHermezContracts } from \"../interfaces\";\n\nexport class HermezToken extends BaseToken<IHermezClientConfig> {\n\n    constructor(\n        contractParam: IContractInitParam,\n        client: Web3SideChainClient<IHermezClientConfig>,\n        protected getHermezContracts: () => IHermezContracts\n    ) {\n        super(contractParam, client);\n    }\n\n    protected get parentBridge() {\n        return this.getHermezContracts().parentBridge;\n    }\n\n    protected get childBridge() {\n        return this.getHermezContracts().childBridge;\n    }\n\n    protected get bridgeUtil() {\n        return this.getHermezContracts().bridgeUtil;\n    }\n\n}\n","import { isHexString } from 'ethereumjs-util';\nimport { ITransactionOption } from \"../interfaces\";\nimport { Converter, Web3SideChainClient, promiseAny } from \"../utils\";\nimport { HermezToken } from \"./hermez_token\";\nimport { TYPE_AMOUNT } from \"../types\";\nimport { BaseContractMethod } from \"../abstracts\";\nimport { MAX_AMOUNT, ADDRESS_ZERO, DAI_PERMIT_TYPEHASH, EIP_2612_PERMIT_TYPEHASH, UNISWAP_DOMAIN_TYPEHASH, EIP_2612_DOMAIN_TYPEHASH, Permit, BaseContract, BaseWeb3Client } from \"..\";\nimport { IAllowanceTransactionOption, IApproveTransactionOption, IBridgeTransactionOption, IHermezClientConfig, IHermezContracts } from \"../interfaces\";\n\nexport class ERC20 extends HermezToken {\n\n    constructor(\n        tokenAddress: string,\n        isParent: boolean,\n        client: Web3SideChainClient<IHermezClientConfig>,\n        getContracts: () => IHermezContracts\n    ) {\n        super({\n            isParent,\n            address: tokenAddress,\n            name: 'ERC20',\n            bridgeType: 'zkevm'\n        }, client, getContracts);\n    }\n\n    /**\n     * get bridge for that token\n     *\n     * @returns\n     * @memberof ERC20\n     */\n    getBridgeAddress() {\n        const bridge = this.contractParam.isParent ? this.parentBridge : this.childBridge;\n        return bridge.contractAddress;\n    }\n\n    isEtherToken() {\n        return this.contractParam.address === ADDRESS_ZERO;\n    }\n\n    /**\n     * get token balance of user\n     *\n     * @param {string} userAddress\n     * @param {ITransactionOption} [option]\n     * @returns\n     * @memberof ERC20\n     */\n    getBalance(userAddress: string, option?: ITransactionOption) {\n        if (this.isEtherToken()) {\n            const client = this.contractParam.isParent ? this.client.parent : this.client.child;\n            return client.getBalance(userAddress);\n        } else {\n            return this.getContract().then(contract => {\n                const method = contract.method(\n                    \"balanceOf\",\n                    userAddress\n                );\n                return this.processRead<string>(method, option);\n            });\n        }\n\n    }\n\n    /**\n     * is Approval needed to bridge tokens to other chains\n     *\n     * @returns\n     * @memberof ERC20\n     */\n    isApprovalNeeded() {\n        if (this.isEtherToken()) {\n            return false;\n        }\n\n        const bridge = this.contractParam.isParent ? this.parentBridge : this.childBridge;\n\n        return bridge.getOriginTokenInfo(this.contractParam.address)\n            .then(tokenInfo => {\n                return tokenInfo[1] === ADDRESS_ZERO;\n            });\n    }\n\n    /**\n     * get allowance of user\n     *\n     * @param {string} userAddress\n     * @param {ITransactionOption} [option]\n     * @returns\n     * @memberof ERC20\n     */\n    getAllowance(userAddress: string, option: IAllowanceTransactionOption = {}) {\n        this.checkForNonNative(\"getAllowance\");\n        const spenderAddress = option.spenderAddress ? option.spenderAddress : this.getBridgeAddress();\n\n        return this.getContract().then(contract => {\n            const method = contract.method(\n                \"allowance\",\n                userAddress,\n                spenderAddress,\n            );\n            return this.processRead<string>(method, option);\n        });\n    }\n\n    /**\n     * Approve given amount of tokens for user\n     *\n     * @param {TYPE_AMOUNT} amount\n     * @param {IApproveTransactionOption} [option]\n     * @returns\n     * @memberof ERC20\n     */\n    approve(amount: TYPE_AMOUNT, option: IApproveTransactionOption = {}) {\n        this.checkForNonNative(\"approve\");\n        const spenderAddress = option.spenderAddress ? option.spenderAddress : this.getBridgeAddress();\n\n        return this.getContract().then(contract => {\n            const method = contract.method(\n                \"approve\",\n                spenderAddress,\n                Converter.toHex(amount)\n            );\n            return this.processWrite(method, option);\n        });\n    }\n\n    /**\n     * Approve max amount of tokens for user\n     *\n     * @param {IApproveTransactionOption} [option]\n     * @returns\n     * @memberof ERC20\n     */\n    approveMax(option: IApproveTransactionOption = {}) {\n        this.checkForNonNative(\"approveMax\");\n        return this.approve(\n            MAX_AMOUNT,\n            option\n        );\n    }\n\n    /**\n     * Deposit given amount of token for user\n     *\n     * @param {TYPE_AMOUNT} amount\n     * @param {string} userAddress\n     * @param {IBridgeTransactionOption} [option]\n     * @returns\n     * @memberof ERC20\n     */\n    deposit(amount: TYPE_AMOUNT, userAddress: string, option: IBridgeTransactionOption = {}) {\n        this.checkForRoot(\"deposit\");\n        const permitData = option.permitData || '0x';\n\n        const amountInABI = this.client.parent.encodeParameters(\n            [Converter.toHex(amount)],\n            ['uint256'],\n        );\n\n        if (this.isEtherToken()) {\n            option.value = Converter.toHex(amount);\n        }\n\n        return this.childBridge.networkID().then(networkId => {\n            return this.parentBridge.bridgeAsset(\n                this.contractParam.address,\n                networkId,\n                userAddress,\n                amountInABI,\n                permitData,\n                option\n            );\n        });\n    }\n\n    /**\n     * Deposit given amount of token for user with permit call\n     *\n     * @param {TYPE_AMOUNT} amount\n     * @param {string} userAddress\n     * @param {IBridgeTransactionOption} [option]\n     * @returns\n     * @memberof ERC20\n     */\n    depositWithPermit(amount: TYPE_AMOUNT, userAddress: string, option: IApproveTransactionOption = {}) {\n        this.checkForRoot(\"deposit\");\n        this.checkForNonNative(\"depositWithPermit\");\n\n        const amountInABI = this.client.parent.encodeParameters(\n            [Converter.toHex(amount)],\n            ['uint256'],\n        );\n\n        return this.getPermitData(amountInABI, option).then(permitData => {\n            return this.childBridge.networkID().then(networkId => {\n                return this.parentBridge.bridgeAsset(\n                    this.contractParam.address,\n                    networkId,\n                    userAddress,\n                    amountInABI,\n                    permitData,\n                    option\n                );\n            });\n        });\n    }\n\n    /**\n     * Complete deposit after GlobalExitRootManager is synced from Parent to root\n     *\n     * @param {string} transactionHash\n     * @param {ITransactionOption} [option]\n     * @returns\n     * @memberof ERC20\n     */\n    depositClaim(transactionHash: string, option?: ITransactionOption) {\n        this.checkForChild(\"depositClaim\");\n        return this.parentBridge.networkID().then(networkId => {\n            return this.bridgeUtil.buildPayloadForClaim(\n                transactionHash, true, networkId\n            );\n        }).then(payload => {\n            return this.childBridge.claimAsset(\n                payload.smtProof,\n                payload.index,\n                payload.mainnetExitRoot,\n                payload.rollupExitRoot,\n                payload.originNetwork,\n                payload.originTokenAddress,\n                payload.destinationNetwork,\n                payload.destinationAddress,\n                payload.amount,\n                payload.metadata,\n                option\n            );\n        });\n    }\n\n    /**\n     * initiate withdraw by burning provided amount\n     *\n     * @param {TYPE_AMOUNT} amount\n     * @param {string} userAddress\n     * @param {IBridgeTransactionOption} [option]\n     * @returns\n     * @memberof ERC20\n     */\n    withdraw(amount: TYPE_AMOUNT, userAddress: string, option: IBridgeTransactionOption = {}) {\n        this.checkForChild(\"withdraw\");\n        const permitData = option.permitData || '0x';\n\n        const amountInABI = this.client.parent.encodeParameters(\n            [Converter.toHex(amount)],\n            ['uint256'],\n        );\n\n        if (this.isEtherToken()) {\n            option.value = Converter.toHex(amount);\n        }\n\n        return this.parentBridge.networkID().then(networkId => {\n            return this.childBridge.bridgeAsset(\n                this.contractParam.address,\n                networkId,\n                userAddress,\n                amountInABI,\n                permitData,\n                option\n            );\n        });\n    }\n\n    /**\n     * initiate withdraw by transferring amount with PermitData for native tokens\n     *\n     * @param {TYPE_AMOUNT} amount\n     * @param {string} userAddress\n     * @param {IBridgeTransactionOption} [option]\n     * @returns\n     * @memberof ERC20\n     */\n    withdrawWithPermit(amount: TYPE_AMOUNT, userAddress: string, option: IApproveTransactionOption = {}) {\n        this.checkForChild(\"withdraw\");\n\n        const amountInABI = this.client.parent.encodeParameters(\n            [Converter.toHex(amount)],\n            ['uint256'],\n        );\n\n        return this.getPermitData(amountInABI, option).then(permitData => {\n            return this.parentBridge.networkID().then(networkId => {\n                return this.childBridge.bridgeAsset(\n                    this.contractParam.address,\n                    networkId,\n                    userAddress,\n                    amountInABI,\n                    permitData,\n                    option\n                );\n            });\n        });\n    }\n\n    /**\n     * Complete deposit after GlobalExitRootManager is synced from Parent to root\n     *\n     * @param {string} burnTransactionHash\n     * @param {ITransactionOption} [option]\n     * @returns\n     * @memberof ERC20\n     */\n    withdrawExit(burnTransactionHash: string, option?: ITransactionOption) {\n        this.checkForRoot(\"withdrawExit\");\n        return this.childBridge.networkID().then(networkId => {\n            return this.bridgeUtil.buildPayloadForClaim(\n                burnTransactionHash, false, networkId\n            );\n        }).then(payload => {\n            return this.parentBridge.claimAsset(\n                payload.smtProof,\n                payload.index,\n                payload.mainnetExitRoot,\n                payload.rollupExitRoot,\n                payload.originNetwork,\n                payload.originTokenAddress,\n                payload.destinationNetwork,\n                payload.destinationAddress,\n                payload.amount,\n                payload.metadata,\n                option\n            );\n        });\n    }\n\n    /**\n     * transfer amount to another user\n     *\n     * @param {TYPE_AMOUNT} amount\n     * @param {string} to\n     * @param {ITransactionOption} [option]\n     * @returns\n     * @memberof ERC20\n     */\n    transfer(amount: TYPE_AMOUNT, to: string, option?: ITransactionOption) {\n        return this.transferERC20(to, amount, option);\n    }\n\n    /**\n     * get permitType of the token\n     *\n     * @returns\n     * @memberof ERC20\n     */\n    private getPermit() {\n        let contract: BaseContract;\n        return this.getContract().then(contractInstance => {\n            contract = contractInstance;\n            const method = contract.method(\n                \"PERMIT_TYPEHASH\",\n            );\n            return this.processRead<string>(method);\n        }).then(permitTypehash => {\n            switch (permitTypehash) {\n                case DAI_PERMIT_TYPEHASH: {\n                    return Permit.DAI;\n                }\n                case EIP_2612_PERMIT_TYPEHASH: {\n                    const DOMAIN_TYPEHASH = contract.method(\"DOMAIN_TYPEHASH\");\n                    const EIP712DOMAIN_HASH = contract.method(\"EIP712DOMAIN_HASH\");\n                    return promiseAny([this.processRead<string>(DOMAIN_TYPEHASH), this.processRead<string>(EIP712DOMAIN_HASH)]).then(\n                        (domainTypehash) => {\n                            switch (domainTypehash) {\n                                case EIP_2612_DOMAIN_TYPEHASH: {\n                                    return Permit.EIP_2612;\n                                }\n                                case UNISWAP_DOMAIN_TYPEHASH: {\n                                    return Permit.UNISWAP;\n                                }\n                                default: {\n                                    return Promise.reject(new Error(`Unsupported domain typehash: ${domainTypehash}`));\n                                }\n                            }\n                        }\n                    );\n                }\n                default: {\n                    return Promise.reject(new Error(`Unsupported permit typehash: ${permitTypehash}`));\n                }\n            }\n        });\n    }\n\n    /**\n     * get typedData for signing\n     * @param {string} permitType\n     * @param {string} account\n     * @param {number} chainId\n     * @param {string} name\n     * @param {string} nonce\n     * @param {string} spenderAddress\n     * @param {string} amount\n     * \n     * @returns\n     * @memberof ERC20\n     */\n    private getTypedData_(permitType: string, account: string, chainId: number, name: string, nonce: string, spenderAddress: string, amount: string) {\n        const typedData = {\n            types: {\n                EIP712Domain: [\n                    { name: 'name', type: 'string' },\n                    { name: 'version', type: 'string' },\n                    { name: 'chainId', type: 'uint256' },\n                    { name: 'verifyingContract', type: 'address' }\n                ],\n                Permit: []\n            },\n            primaryType: \"Permit\",\n            domain: {\n                name,\n                version: \"1\",\n                chainId,\n                verifyingContract: this.contractParam.address,\n            },\n            message: {}\n        };\n        switch (permitType) {\n            case Permit.DAI:\n                typedData.types.Permit = [\n                    { name: \"holder\", type: \"address\" },\n                    { name: \"spender\", type: \"address\" },\n                    { name: \"nonce\", type: \"uint256\" },\n                    { name: \"expiry\", type: \"uint256\" },\n                    { name: \"allowed\", type: \"bool\" },\n                ];\n                typedData.message = {\n                    holder: account,\n                    spender: spenderAddress,\n                    nonce,\n                    expiry: MAX_AMOUNT,\n                    allowed: true,\n                };\n            case Permit.EIP_2612:\n            case Permit.UNISWAP:\n\n                if (permitType === Permit.UNISWAP) {\n                    typedData.types.EIP712Domain = [\n                        { name: 'name', type: 'string' },\n                        { name: 'chainId', type: 'uint256' },\n                        { name: 'verifyingContract', type: 'address' }\n                    ];\n                    delete typedData.domain.version;\n                }\n                typedData.types.Permit = [\n                    { name: 'owner', type: 'address' },\n                    { name: 'spender', type: 'address' },\n                    { name: 'value', type: 'uint256' },\n                    { name: 'nonce', type: 'uint256' },\n                    { name: 'deadline', type: 'uint256' }\n                ];\n                typedData.message = {\n                    owner: account,\n                    spender: spenderAddress,\n                    value: amount,\n                    nonce: nonce,\n                    deadline: MAX_AMOUNT,\n                };\n        }\n        return typedData;\n    }\n\n    /**\n     * get {r, s, v} from signature\n     * @param {BaseWeb3Client} client\n     * @param {string} signature\n     * \n     * @returns\n     * @memberof ERC20\n     */\n    private getSignatureParameters_(client: BaseWeb3Client, signature: string) {\n        if (!isHexString(signature)) {\n            throw new Error(\n                'Given value \"'.concat(signature, '\" is not a valid hex string.'),\n            );\n        }\n\n        if (signature.slice(0, 2) !== '0x') {\n            signature = '0x'.concat(signature);\n        }\n\n        const r = signature.slice(0, 66);\n        const s = '0x'.concat(signature.slice(66, 130));\n        let v = client.hexToNumber('0x'.concat(signature.slice(130, 132)));\n        if (![27, 28].includes(v as any)) {\n            v += 27;\n        }\n        return {\n            r: r,\n            s: s,\n            v: v,\n        };\n    }\n\n    /**\n     * encode permit function data\n     * @param {BaseContract} contract\n     * @param {string} permitType\n     * @param {any} signatureParams\n     * @param {string} spenderAddress\n     * @param {string} account\n     * @param {string} nonce\n     * @param {string} amount\n     * \n     * @returns\n     * @memberof ERC20\n     */\n    private encodePermitFunctionData_(contract: BaseContract, permitType: string, signatureParams: any, spenderAddress: string, account: string, nonce: string, amount: string) {\n        const { r, s, v } = signatureParams;\n        let method: BaseContractMethod;\n        switch (permitType) {\n            case Permit.DAI:\n                method = contract.method(\n                    \"permit\",\n                    account,\n                    spenderAddress,\n                    nonce,\n                    MAX_AMOUNT,\n                    true,\n                    v,\n                    r,\n                    s,\n                );\n                break;\n\n            case Permit.EIP_2612:\n            case Permit.UNISWAP:\n                method = contract.method(\n                    \"permit\",\n                    account,\n                    spenderAddress,\n                    amount,\n                    MAX_AMOUNT,\n                    v,\n                    r,\n                    s,\n                );\n                break;\n        }\n        return method.encodeABI();\n    }\n\n    /**\n     * Get permit data for given spender for given amount\n     * @param {TYPE_AMOUNT} amount\n     * @param {string} spenderAddress\n     * \n     * @returns\n     * @memberof ERC20\n     */\n    private getPermitData_(amount: TYPE_AMOUNT, spenderAddress: string) {\n\n        const amountInABI = this.client.parent.encodeParameters(\n            [Converter.toHex(amount)],\n            ['uint256'],\n        );\n\n        const client = this.contractParam.isParent ? this.client.parent : this.client.child;\n        let account: string;\n        let chainId: number;\n        let permitType: string;\n        let contract: BaseContract;\n        let nonce: string;\n\n        return Promise.all([client.name === 'WEB3' ? client.getAccountsUsingRPC_() : client.getAccounts(), this.getContract(), client.getChainId(), this.getPermit()]).then(result => {\n            account = result[0][0];\n            contract = result[1];\n            chainId = result[2];\n            permitType = result[3];\n            const nameMethod = contract.method(\"name\");\n            const nonceMethod = contract.method(\"nonces\", account);\n            return Promise.all([this.processRead<string>(nameMethod), this.processRead<string>(nonceMethod)]);\n        }).then(data => {\n            const name = data[0];\n            nonce = data[1];\n            return this.getTypedData_(permitType, account, chainId, name, nonce, spenderAddress, amountInABI);\n        }).then(typedData => {\n            return client.signTypedData(account, typedData);\n        }).then(signature => {\n            const signatureParameters = this.getSignatureParameters_(client, signature);\n            return this.encodePermitFunctionData_(\n                contract, permitType, signatureParameters, spenderAddress, account, nonce, amountInABI\n            );\n        });\n    }\n\n    /**\n     * Get permit data for given amount\n     * @param {TYPE_AMOUNT} amount\n     * @param {IApproveTransactionOption} option\n     * \n     * @returns\n     * @memberof ERC20\n     */\n    getPermitData(amount: TYPE_AMOUNT, option: IApproveTransactionOption = {}) {\n        this.checkForNonNative(\"getPermitData\");\n\n        const spenderAddress = option.spenderAddress ? option.spenderAddress : this.getBridgeAddress();\n\n        return this.getPermitData_(amount, spenderAddress);\n    }\n\n}\n","import { BaseToken, Web3SideChainClient, Converter, promiseResolve } from \"../utils\";\nimport { IHermezClientConfig, ITransactionOption } from \"../interfaces\";\nimport { TYPE_AMOUNT } from \"../types\";\n\nexport class HermezBridge extends BaseToken<IHermezClientConfig> {\n\n    networkID_: number;\n\n    constructor(client_: Web3SideChainClient<IHermezClientConfig>, address: string, isParent: boolean) {\n        super({\n            address: address,\n            name: 'PolygonZkEVMBridge',\n            bridgeType: 'zkevm',\n            isParent: isParent\n        }, client_);\n    }\n\n    method(methodName: string, ...args) {\n        return this.getContract().then(contract => {\n            return contract.method(methodName, ...args);\n        });\n    }\n\n    /**\n     * bridge function to be called on that network from where token is to be transferred to a different network\n     *\n     * @param {string} token Token address\n     * @param {number} destinationNetwork Network at which tokens will be bridged\n     * @param {string} destinationAddress Address to which tokens will be bridged\n     * @param {TYPE_AMOUNT} amountamount amount of tokens\n     * @param {string} [permitData] Permit data to avoid approve call\n     * @param {ITransactionOption} [option] \n     * \n     * @returns\n     * @memberof HermezBridge\n     */\n    bridgeAsset(\n        token: string,\n        destinationNetwork: number,\n        destinationAddress: string,\n        amount: TYPE_AMOUNT,\n        permitData = '0x',\n        option?: ITransactionOption\n    ) {\n        return this.method(\n            \"bridgeAsset\",\n            token,\n            destinationNetwork,\n            destinationAddress,\n            Converter.toHex(amount),\n            permitData\n        ).then(method => {\n            return this.processWrite(method, option);\n        });\n    }\n\n    /**\n     * Claim function to be called on the destination network\n     *\n     * @param {string[]} smtProof Merkle Proof\n     * @param {number} index Deposit Index\n     * @param {string} mainnetExitRoot Mainnet Exit Root\n     * @param {string} rollupExitRoot RollUP Exit Root\n     * @param {number} originNetwork Network at which token was initially deployed\n     * @param {string} originTokenAddress Address of token at network where token was initially deployed\n     * @param {string} destinationAddress Address to which tokens will be bridged\n     * @param {TYPE_AMOUNT} amount amount of tokens\n     * @param {string} [metadata] Metadata of token\n     * @param {ITransactionOption} [option]\n     * \n     * @returns\n     * @memberof HermezBridge\n     */\n    claimAsset(\n        smtProof: string[],\n        index: number,\n        mainnetExitRoot: string,\n        rollupExitRoot: string,\n        originNetwork: number,\n        originTokenAddress: string,\n        destinationNetwork: number,\n        destinationAddress: string,\n        amount: TYPE_AMOUNT,\n        metadata: string,\n        option: ITransactionOption\n    ) {\n        return this.method(\n            \"claimAsset\",\n            smtProof,\n            index,\n            mainnetExitRoot,\n            rollupExitRoot,\n            originNetwork,\n            originTokenAddress,\n            destinationNetwork,\n            destinationAddress,\n            amount,\n            metadata\n        ).then(method => {\n            return this.processWrite(\n                method,\n                option\n            );\n        });\n    }\n\n    /**\n     * get the address of token which is created by the bridge contract on the non origin chain\n     *\n     * @param {number} originNetwork Network at which the token was initially deployed\n     * @param {string} originTokenAddress Address at the network where token was initially deployed\n     * @returns\n     * @memberof HermezBridge\n     */\n    getMappedTokenInfo(\n        originNetwork: number,\n        originTokenAddress: string\n    ) {\n        return this.method(\n            \"getTokenWrappedAddress\", originNetwork, originTokenAddress\n        ).then(method => {\n            return this.processRead<string>(method);\n        });\n    }\n\n    /**\n     * Tells if claim has already happed or not based on the deposit index\n     *\n     * @param {number} index\n     * @returns\n     * @memberof HermezBridge\n     */\n    isClaimed(\n        index: number,\n    ) {\n        return this.method(\n            \"isClaimed\", index\n        ).then(method => {\n            return this.processRead<string>(method);\n        });\n    }\n\n    /**\n     * Even if the wrapped contract is not deployed on the destination chain, it will tell us the address which is going to be.\n     *\n     * @param {number} originNetwork Network at which the token was initially deployed\n     * @param {string} originTokenAddress Address at the network where token was initially deployed\n     * @returns\n     * @memberof HermezBridge\n     */\n    precalculatedMappedTokenInfo(\n        originNetwork: number,\n        originTokenAddress: string\n    ) {\n        return this.method(\n            \"precalculatedWrapperAddress\", originNetwork, originTokenAddress\n        ).then(method => {\n            return this.processRead<string>(method);\n        });\n    }\n\n    /**\n     * get the address and network of the wrapped token where it was emerged initially\n     *\n     * @param {number} wrappedToken\n     * @returns\n     * @memberof HermezBridge\n     */\n    getOriginTokenInfo(wrappedToken: string) {\n        return this.method(\n            \"wrappedTokenToTokenInfo\", wrappedToken\n        ).then(method => {\n            return this.processRead<[number, string]>(method);\n        });\n    }\n\n    /**\n     * get the network ID for chain in which the bridge contract is deployed\n     *\n     * @returns\n     * @memberof HermezBridge\n     */\n    networkID() {\n        if (this.networkID_) {\n            return promiseResolve<number>(this.networkID_ as any);\n        }\n        return this.method(\n            \"networkID\"\n        ).then(method => {\n            return this.processRead<number>(method);\n        });\n    }\n\n}\n","import { Web3SideChainClient } from \"../utils\";\nimport { service } from \"../services\";\nimport { IBaseClientConfig } from \"..\";\nimport { TYPE_AMOUNT } from '../types';\n\ninterface IBridgeEventInfo {\n    originNetwork: number;\n    originTokenAddress: string;\n    destinationNetwork: number;\n    destinationAddress: string;\n    amount: TYPE_AMOUNT;\n    metadata: string;\n    depositCount: number;\n}\n\ninterface IMerkleProof {\n    merkle_proof: string[];\n    exit_root_num: string;\n    l2_exit_root_num: string;\n    main_exit_root: string;\n    rollup_exit_root: string;\n}\n\ninterface IClaimPayload {\n    smtProof: string[];\n    index: number;\n    mainnetExitRoot: string;\n    rollupExitRoot: string;\n    originNetwork: number;\n    originTokenAddress: string;\n    destinationNetwork: number;\n    destinationAddress: string;\n    amount: TYPE_AMOUNT;\n    metadata: string;\n}\n\nexport class BridgeUtil {\n    private client_: Web3SideChainClient<IBaseClientConfig>;\n    private BRIDGE_TOPIC = \"0x501781209a1f8899323b96b4ef08b168df93e0a90c673d1e4cce39366cb62f9b\";\n\n    constructor(client: Web3SideChainClient<IBaseClientConfig>) {\n        this.client_ = client;\n    }\n\n    private decodedBridgeData_(data: string, isParent: boolean) {\n        const client = isParent ? this.client_.parent : this.client_.child;\n        return this.client_.getABI(\"PolygonZkEVMBridge\", \"zkevm\").then(abi => {\n            const types = abi.filter(event => event.name === \"BridgeEvent\");\n            if (!types.length) {\n                throw new Error(\"Data not decoded\");\n            }\n            const decodedData = client.decodeParameters(data, types[0].inputs);\n            const [leafType, originNetwork, originTokenAddress, destinationNetwork, destinationAddress, amount, metadata, depositCount] = decodedData;\n            return {\n                leafType,\n                originNetwork,\n                originTokenAddress,\n                destinationNetwork,\n                destinationAddress,\n                amount,\n                metadata: metadata || '0x',\n                depositCount,\n            } as IBridgeEventInfo;\n        });\n    }\n\n    private getBridgeLogData_(transactionHash: string, isParent: boolean) {\n        const client = isParent ? this.client_.parent : this.client_.child;\n        return client.getTransactionReceipt(transactionHash)\n            .then(receipt => {\n                const logs = receipt.logs.filter(log => log.topics[0].toLowerCase() === this.BRIDGE_TOPIC);\n                if (!logs.length) {\n                    throw new Error(\"Log not found in receipt\");\n                }\n\n                const data = logs[0].data;\n                return this.decodedBridgeData_(data, isParent);\n            });\n    }\n\n    private getProof_(networkId: number, depositCount: number) {\n        return service.hermezNetwork.getMerkleProofForHermez(\n            networkId,\n            depositCount,\n        ).then(proof => {\n            return proof as IMerkleProof;\n        }).catch(_ => {\n            throw new Error(\"Error in creating proof\");\n        });\n    }\n\n    getBridgeLogData(transactionHash: string, isParent: boolean) {\n        return this.getBridgeLogData_(transactionHash, isParent);\n    }\n\n    buildPayloadForClaim(transactionHash: string, isParent: boolean, networkId: number) {\n        return this.getBridgeLogData_(transactionHash, isParent).then(data => {\n            const {\n                originNetwork,\n                originTokenAddress,\n                destinationNetwork,\n                destinationAddress,\n                amount,\n                metadata,\n                depositCount } = data;\n            return this.getProof_(networkId, depositCount).then(proof => {\n                const payload = {} as IClaimPayload;\n                payload.smtProof = proof.merkle_proof;\n                payload.index = depositCount;\n                payload.mainnetExitRoot = proof.main_exit_root;\n                payload.rollupExitRoot = proof.rollup_exit_root;\n                payload.originNetwork = originNetwork;\n                payload.originTokenAddress = originTokenAddress;\n                payload.destinationNetwork = destinationNetwork;\n                payload.destinationAddress = destinationAddress;\n                payload.amount = amount;\n                payload.metadata = metadata;\n                return payload;\n            });\n        });\n    }\n}\n","import { ERC20 } from \"./erc20\";\nimport { HermezBridge } from \"./hermez_bridge\";\nimport { BridgeUtil } from \"./bridge_util\";\nimport { HermezBridgeClient } from \"../utils\";\nimport { IHermezClientConfig, IHermezContracts } from \"../interfaces\";\nimport { config as urlConfig } from \"../config\";\nimport { service, NetworkService } from \"../services\";\n\nexport * from \"./hermez_bridge\";\nexport * from \"./bridge_util\";\n\nexport class HermezClient extends HermezBridgeClient<IHermezClientConfig> {\n\n    init(config: IHermezClientConfig) {\n        const client = this.client;\n\n        return client.init(config).then(_ => {\n            const mainHermezContracts = client.mainHermezContracts; \n            const hermezContracts = client.hermezContracts;\n            client.config = config = Object.assign(\n                {\n                    parentBridge: mainHermezContracts.PolygonZkEVMBridgeProxy,\n                    childBridge: hermezContracts.PolygonZkEVMBridge,\n                } as IHermezClientConfig,\n                config\n            );\n\n            this.rootChainBridge = new HermezBridge(\n                this.client,\n                config.parentBridge,\n                true\n            );\n\n            this.childChainBridge = new HermezBridge(\n                this.client,\n                config.childBridge,\n                false\n            );\n\n            this.bridgeUtil = new BridgeUtil(\n                this.client\n            );\n\n            if (!service.hermezNetwork) {\n                if (urlConfig.hermezBridgeService[urlConfig.hermezBridgeService.length - 1] !== '/') {\n                    urlConfig.hermezBridgeService += '/';\n                }\n                service.hermezNetwork = new NetworkService(urlConfig.hermezBridgeService);\n            }\n\n            return this;\n        });\n    }\n\n    /**\n     * creates instance of ERC20 token\n     *\n     * @param {string} tokenAddress\n     * @param {boolean} isParent\n     * \n     * @returns\n     * @memberof ERC20\n     */\n    erc20(tokenAddress: string, isParent?: boolean) {\n        return new ERC20(\n            tokenAddress,\n            isParent,\n            this.client,\n            this.getContracts_.bind(this)\n        );\n    }\n\n    private getContracts_() {\n        return {\n            parentBridge: this.rootChainBridge,\n            childBridge: this.childChainBridge,\n            bridgeUtil: this.bridgeUtil\n        } as IHermezContracts;\n    }\n}\n","import { defaultExport } from \"./default\";\n\nexport * from \"./utils\";\nexport * from \"./enums\";\nexport * from \"./pos\";\nexport * from \"./interfaces\";\nexport * from \"./types\";\nexport * from \"./constant\";\nexport * from \"./abstracts\";\nexport * from \"./services\";\nexport * from \"./hermez\";\n\nexport default defaultExport;\n\n"],"sourceRoot":""}