import { BaseToken, Web3SideChainClient } from "../utils";
import { IHermezClientConfig, ITransactionOption } from "../interfaces";
import { TYPE_AMOUNT } from "../types";
export declare class HermezBridge extends BaseToken<IHermezClientConfig> {
    networkID_: number;
    constructor(client_: Web3SideChainClient<IHermezClientConfig>, address: string, isParent: boolean);
    method(methodName: string, ...args: any[]): Promise<import("..").BaseContractMethod>;
    /**
     * bridge function to be called on that network from where token is to be transferred to a different network
     *
     * @param {string} token Token address
     * @param {number} destinationNetwork Network at which tokens will be bridged
     * @param {string} destinationAddress Address to which tokens will be bridged
     * @param {TYPE_AMOUNT} amountamount amount of tokens
     * @param {string} [permitData] Permit data to avoid approve call
     * @param {ITransactionOption} [option]
     *
     * @returns
     * @memberof HermezBridge
     */
    bridgeAsset(token: string, destinationNetwork: number, destinationAddress: string, amount: TYPE_AMOUNT, permitData?: string, option?: ITransactionOption): Promise<import("../interfaces").ITransactionWriteResult>;
    /**
     * Claim function to be called on the destination network
     *
     * @param {string[]} smtProof Merkle Proof
     * @param {number} index Deposit Index
     * @param {string} mainnetExitRoot Mainnet Exit Root
     * @param {string} rollupExitRoot RollUP Exit Root
     * @param {number} originNetwork Network at which token was initially deployed
     * @param {string} originTokenAddress Address of token at network where token was initially deployed
     * @param {string} destinationAddress Address to which tokens will be bridged
     * @param {TYPE_AMOUNT} amount amount of tokens
     * @param {string} [metadata] Metadata of token
     * @param {ITransactionOption} [option]
     *
     * @returns
     * @memberof HermezBridge
     */
    claimAsset(smtProof: string[], index: number, mainnetExitRoot: string, rollupExitRoot: string, originNetwork: number, originTokenAddress: string, destinationNetwork: number, destinationAddress: string, amount: TYPE_AMOUNT, metadata: string, option: ITransactionOption): Promise<import("../interfaces").ITransactionWriteResult>;
    /**
     * get the address of token which is created by the bridge contract on the non origin chain
     *
     * @param {number} originNetwork Network at which the token was initially deployed
     * @param {string} originTokenAddress Address at the network where token was initially deployed
     * @returns
     * @memberof HermezBridge
     */
    getMappedTokenInfo(originNetwork: number, originTokenAddress: string): Promise<string>;
    /**
     * Tells if claim has already happed or not based on the deposit index
     *
     * @param {number} index
     * @returns
     * @memberof HermezBridge
     */
    isClaimed(index: number): Promise<string>;
    /**
     * Even if the wrapped contract is not deployed on the destination chain, it will tell us the address which is going to be.
     *
     * @param {number} originNetwork Network at which the token was initially deployed
     * @param {string} originTokenAddress Address at the network where token was initially deployed
     * @returns
     * @memberof HermezBridge
     */
    precalculatedMappedTokenInfo(originNetwork: number, originTokenAddress: string): Promise<string>;
    /**
     * get the address and network of the wrapped token where it was emerged initially
     *
     * @param {number} wrappedToken
     * @returns
     * @memberof HermezBridge
     */
    getOriginTokenInfo(wrappedToken: string): Promise<[number, string]>;
    /**
     * get the network ID for chain in which the bridge contract is deployed
     *
     * @returns
     * @memberof HermezBridge
     */
    networkID(): Promise<number>;
}
