{"version":3,"file":"cli.js","sourceRoot":"","sources":["../src/cli.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n\nimport { promises as fs, constants as fsConstants } from 'fs';\nimport path from 'path';\n// Intentionally shadowing 'URL' global, which is equivalent\n// Can't use global directly because of missing type, see:\n// https://github.com/DefinitelyTyped/DefinitelyTyped/issues/34960\n// eslint-disable-next-line @typescript-eslint/no-shadow\nimport { URL } from 'url';\nimport semver from 'semver';\nimport yargs from 'yargs/yargs';\nimport type { Argv } from 'yargs';\nimport { hideBin } from 'yargs/helpers';\n\nimport { updateChangelog } from './update-changelog';\nimport { generateDiff } from './generate-diff';\nimport { createEmptyChangelog } from './init';\n\nimport { unreleased, Version } from './constants';\n\nimport {\n  ChangelogFormattingError,\n  InvalidChangelogError,\n  validateChangelog,\n} from './validate-changelog';\nimport { getRepositoryUrl } from './repo';\n\nconst updateEpilog = `New commits will be added to the \"${unreleased}\" section (or \\\nto the section for the current release if the '--rc' flag is used) in reverse \\\nchronological order. Any commits for PRs that are represented already in the \\\nchangelog will be ignored.\n\nIf the '--rc' flag is used and the section for the current release does not \\\nyet exist, it will be created.`;\n\nconst validateEpilog = `This does not ensure that the changelog is complete, \\\nor that each change is in the correct section. It just ensures that the \\\nformatting is correct. Verification of the contents is left for manual review.`;\n\n// eslint-disable-next-line node/no-process-env\nconst npmPackageVersion = process.env.npm_package_version;\n\nfunction isValidUrl(proposedUrl: string) {\n  try {\n    // eslint-disable-next-line no-new\n    new URL(proposedUrl);\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\nfunction exitWithError(errorMessage: string) {\n  console.error(errorMessage);\n  process.exitCode = 1;\n}\n\nasync function readChangelog(changelogPath: string) {\n  return await fs.readFile(changelogPath, {\n    encoding: 'utf8',\n  });\n}\n\nasync function saveChangelog(\n  changelogPath: string,\n  newChangelogContent: string,\n) {\n  await fs.writeFile(changelogPath, newChangelogContent);\n}\n\ninterface UpdateOptions {\n  changelogPath: string;\n  currentVersion?: Version;\n  repoUrl: string;\n  isReleaseCandidate: boolean;\n  projectRootDirectory?: string;\n}\n\nasync function update({\n  changelogPath,\n  currentVersion,\n  isReleaseCandidate,\n  repoUrl,\n  projectRootDirectory,\n}: UpdateOptions) {\n  const changelogContent = await readChangelog(changelogPath);\n\n  const newChangelogContent = await updateChangelog({\n    changelogContent,\n    currentVersion,\n    repoUrl,\n    isReleaseCandidate,\n    projectRootDirectory,\n  });\n\n  if (newChangelogContent) {\n    await saveChangelog(changelogPath, newChangelogContent);\n    console.log('CHANGELOG.md updated.');\n  } else {\n    console.log('There are no new commits to add to the changelog.');\n  }\n}\n\ninterface ValidateOptions {\n  changelogPath: string;\n  currentVersion?: Version;\n  isReleaseCandidate: boolean;\n  repoUrl: string;\n}\n\nasync function validate({\n  changelogPath,\n  currentVersion,\n  isReleaseCandidate,\n  repoUrl,\n}: ValidateOptions) {\n  const changelogContent = await readChangelog(changelogPath);\n\n  try {\n    validateChangelog({\n      changelogContent,\n      currentVersion,\n      repoUrl,\n      isReleaseCandidate,\n    });\n  } catch (error) {\n    if (error instanceof ChangelogFormattingError) {\n      const { validChangelog, invalidChangelog } = error.data;\n      const diff = generateDiff(validChangelog, invalidChangelog);\n      exitWithError(`Changelog not well-formatted. Diff:\\n\\n${diff}`);\n      return;\n    } else if (error instanceof InvalidChangelogError) {\n      exitWithError(`Changelog is invalid: ${error.message}`);\n      return;\n    }\n    throw error;\n  }\n}\n\ninterface InitOptions {\n  changelogPath: string;\n  repoUrl: string;\n}\n\nasync function init({ changelogPath, repoUrl }: InitOptions) {\n  const changelogContent = await createEmptyChangelog({ repoUrl });\n  await saveChangelog(changelogPath, changelogContent);\n}\n\nconst rootDescription = `The root project directory. This determines where we \\\nlook for changes since the last release (defaults to the entire repository at \\\nthe current working directory), and where the changelog path is resolved from \\\n(defaults to the current working directory).`;\n\nfunction configureCommonCommandOptions(_yargs: Argv) {\n  return _yargs\n    .option('file', {\n      default: 'CHANGELOG.md',\n      description: 'The changelog file path',\n      type: 'string',\n    })\n    .option('repo', {\n      default: getRepositoryUrl(),\n      description: `The GitHub repository URL`,\n      type: 'string',\n    })\n    .option('root', {\n      description: rootDescription,\n      type: 'string',\n    });\n}\n\nasync function main() {\n  const { argv } = yargs(hideBin(process.argv))\n    .command(\n      'update',\n      'Update CHANGELOG.md with any changes made since the most recent release.\\nUsage: $0 update [options]',\n      (_yargs) =>\n        configureCommonCommandOptions(_yargs)\n          .option('rc', {\n            default: false,\n            description: `Add new changes to the current release header, rather than to the '${unreleased}' section.`,\n            type: 'boolean',\n          })\n          .option('currentVersion', {\n            default: npmPackageVersion,\n            description:\n              'The current version of the project that the changelog belongs to.',\n            type: 'string',\n          })\n          .epilog(updateEpilog),\n    )\n    .command(\n      'validate',\n      'Validate the changelog, ensuring that it is well-formatted.\\nUsage: $0 validate [options]',\n      (_yargs) =>\n        configureCommonCommandOptions(_yargs)\n          .option('rc', {\n            default: false,\n            description: `Verify that the current version has a release header in the changelog`,\n            type: 'boolean',\n          })\n          .option('currentVersion', {\n            default: npmPackageVersion,\n            description:\n              'The current version of the project that the changelog belongs to.',\n            type: 'string',\n          })\n          .epilog(validateEpilog),\n    )\n    .command('init', 'Initialize a new empty changelog', (_yargs) => {\n      configureCommonCommandOptions(_yargs);\n    })\n    .strict()\n    .demandCommand()\n    .help('help')\n    .usage(\n      `Utilities for validating and updating \"Keep a Changelog\" formatted changelogs.\\nUsage: $0 [command] [options]`,\n    );\n\n  const {\n    currentVersion,\n    file: changelogFilename,\n    rc: isReleaseCandidate,\n    repo: repoUrl,\n    root: projectRootDirectory,\n  } = argv;\n\n  if (isReleaseCandidate && !currentVersion) {\n    exitWithError(\n      `Version not found. Please set the --currentVersion flag, or run this as an npm script from a project with the 'version' field set.`,\n    );\n    return;\n  } else if (currentVersion && semver.valid(currentVersion) === null) {\n    exitWithError(`Current version is not valid SemVer: '${currentVersion}'`);\n    return;\n  } else if (!repoUrl) {\n    exitWithError(\n      `npm package repository URL not found. Please set the '--repo' flag, or run this as an npm script from a project with the 'repository' field set.`,\n    );\n    return;\n  } else if (!isValidUrl(repoUrl)) {\n    exitWithError(`Invalid repo URL: '${repoUrl}'`);\n    return;\n  }\n\n  if (projectRootDirectory) {\n    try {\n      const stat = await fs.stat(projectRootDirectory);\n      if (!stat.isDirectory()) {\n        exitWithError(\n          `Project root must be a directory: '${projectRootDirectory}'`,\n        );\n        return;\n      }\n    } catch (error) {\n      if (error.code === 'ENOENT') {\n        exitWithError(\n          `Root directory specified does not exist: '${projectRootDirectory}'`,\n        );\n        return;\n      } else if (error.code === 'EACCES') {\n        exitWithError(\n          `Access to root directory is forbidden by file access permissions: '${projectRootDirectory}'`,\n        );\n        return;\n      }\n      throw error;\n    }\n  }\n\n  let changelogPath = changelogFilename;\n  if (!path.isAbsolute(changelogFilename) && projectRootDirectory) {\n    changelogPath = path.resolve(projectRootDirectory, changelogFilename);\n  }\n\n  if (!argv._) {\n    throw new Error('No command provided');\n  }\n  const command = argv._[0];\n\n  if (command !== 'init') {\n    try {\n      // eslint-disable-next-line no-bitwise\n      await fs.access(changelogPath, fsConstants.F_OK | fsConstants.W_OK);\n    } catch (error) {\n      if (error.code === 'ENOENT') {\n        exitWithError(`File does not exist: '${changelogPath}'`);\n      } else {\n        exitWithError(`File is not writable: '${changelogPath}'`);\n      }\n      return;\n    }\n  }\n\n  if (command === 'update') {\n    await update({\n      changelogPath,\n      currentVersion,\n      isReleaseCandidate,\n      repoUrl,\n      projectRootDirectory,\n    });\n  } else if (command === 'validate') {\n    await validate({\n      changelogPath,\n      currentVersion,\n      isReleaseCandidate,\n      repoUrl,\n    });\n  } else if (command === 'init') {\n    await init({\n      changelogPath,\n      repoUrl,\n    });\n  }\n}\n\nmain().catch((error) => {\n  exitWithError(error);\n});\n"]}