{"version":3,"file":"validate-changelog.js","sourceRoot":"","sources":["../src/validate-changelog.ts"],"names":[],"mappings":";;;AAAA,2CAAsD;AACtD,uDAAmD;AAEnD;;GAEG;AACH,MAAa,qBAAsB,SAAQ,KAAK;CAAG;AAAnD,sDAAmD;AAEnD;;GAEG;AACH,MAAa,sBAAuB,SAAQ,qBAAqB;IAC/D;QACE,KAAK,CAAC,6CAA6C,CAAC,CAAC;IACvD,CAAC;CACF;AAJD,wDAIC;AAED,MAAa,yBAA0B,SAAQ,qBAAqB;IAClE;QACE,KAAK,CAAC,gDAAgD,CAAC,CAAC;IAC1D,CAAC;CACF;AAJD,8DAIC;AAED;;GAEG;AACH,MAAa,0BAA2B,SAAQ,qBAAqB;IACnE;;OAEG;IACH,YAAY,cAAuB;QACjC,KAAK,CAAC,4CAA4C,cAAc,GAAG,CAAC,CAAC;IACvE,CAAC;CACF;AAPD,gEAOC;AAED;;GAEG;AACH,MAAa,wBAAyB,SAAQ,qBAAqB;IAGjE;;;;;;OAMG;IACH,YAAY,EACV,cAAc,EACd,gBAAgB,GAIjB;QACC,KAAK,CAAC,iCAAiC,CAAC,CAAC;QACzC,IAAI,CAAC,IAAI,GAAG;YACV,cAAc;YACd,gBAAgB;SACjB,CAAC;IACJ,CAAC;CACF;AAvBD,4DAuBC;AASD;;;;;;;;;;;;;;;;;;;;;;GAsBG;AACH,SAAgB,iBAAiB,CAAC,EAChC,gBAAgB,EAChB,cAAc,EACd,OAAO,EACP,kBAAkB,GACO;;IACzB,MAAM,SAAS,GAAG,gCAAc,CAAC,EAAE,gBAAgB,EAAE,OAAO,EAAE,CAAC,CAAC;IAChE,MAAM,oBAAoB,GACxB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,oBAAoB,EAAE,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC;IAC7D,MAAM,cAAc,GAAG,cAAc;QACnC,CAAC,CAAC,SAAS,CAAC,iBAAiB,CAAC,cAAc,CAAC;QAC7C,CAAC,CAAC,SAAS,CAAC;IAEd,IAAI,kBAAkB,EAAE;QACtB,IAAI,CAAC,cAAc,EAAE;YACnB,MAAM,IAAI,KAAK,CACb,6DAA6D,CAC9D,CAAC;SACH;aAAM,IACL,CAAC,SAAS;aACP,WAAW,EAAE;aACb,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,OAAO,KAAK,cAAc,CAAC,EACxD;YACA,MAAM,IAAI,0BAA0B,CAAC,cAAc,CAAC,CAAC;SACtD;aAAM,IAAI,oBAAoB,EAAE;YAC/B,MAAM,IAAI,sBAAsB,EAAE,CAAC;SACpC;aAAM,IACL,CAAA,MAAA,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAG,0BAAc,CAAC,aAAa,CAAC,0CAAE,MAAM;YACtD,CAAA,MAAA,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAG,0BAAc,CAAC,aAAa,CAAC,0CAAE,MAAM,MAAK,CAAC,EAC5D;YACA,MAAM,IAAI,yBAAyB,EAAE,CAAC;SACvC;KACF;IAED,MAAM,cAAc,GAAG,SAAS,CAAC,QAAQ,EAAE,CAAC;IAC5C,IAAI,cAAc,KAAK,gBAAgB,EAAE;QACvC,MAAM,IAAI,wBAAwB,CAAC;YACjC,cAAc;YACd,gBAAgB,EAAE,gBAAgB;SACnC,CAAC,CAAC;KACJ;AACH,CAAC;AAzCD,8CAyCC","sourcesContent":["import { Version, ChangeCategory } from './constants';\nimport { parseChangelog } from './parse-changelog';\n\n/**\n * Indicates that the changelog is invalid.\n */\nexport class InvalidChangelogError extends Error {}\n\n/**\n * Indicates that unreleased changes are still present in the changelog.\n */\nexport class UnreleasedChangesError extends InvalidChangelogError {\n  constructor() {\n    super('Unreleased changes present in the changelog');\n  }\n}\n\nexport class UncategorizedChangesError extends InvalidChangelogError {\n  constructor() {\n    super('Uncategorized changes present in the changelog');\n  }\n}\n\n/**\n * Indicates that the release header for the current version is missing.\n */\nexport class MissingCurrentVersionError extends InvalidChangelogError {\n  /**\n   * @param currentVersion - The current version\n   */\n  constructor(currentVersion: Version) {\n    super(`Current version missing from changelog: '${currentVersion}'`);\n  }\n}\n\n/**\n * Represents a formatting error in a changelog.\n */\nexport class ChangelogFormattingError extends InvalidChangelogError {\n  public data: Record<string, string>;\n\n  /**\n   * @param options\n   * @param options.validChangelog - The string contents of the well-formatted\n   * changelog.\n   * @param options.invalidChangelog - The string contents of the malformed\n   * changelog.\n   */\n  constructor({\n    validChangelog,\n    invalidChangelog,\n  }: {\n    validChangelog: string;\n    invalidChangelog: string;\n  }) {\n    super('Changelog is not well-formatted');\n    this.data = {\n      validChangelog,\n      invalidChangelog,\n    };\n  }\n}\n\ninterface ValidateChangelogOptions {\n  changelogContent: string;\n  currentVersion?: Version;\n  repoUrl: string;\n  isReleaseCandidate: boolean;\n}\n\n/**\n * Validates that a changelog is well-formatted.\n *\n * @param options\n * @param options.changelogContent - The current changelog\n * @param options.currentVersion - The current version. Required if\n * `isReleaseCandidate` is set, but optional otherwise.\n * @param options.repoUrl - The GitHub repository URL for the current\n * project.\n * @param options.isReleaseCandidate - Denotes whether the current project is in\n * the midst of release preparation or not. If this is set, this command will\n * also ensure the current version is represented in the changelog with a\n * header, and that there are no unreleased changes present.\n * @throws `InvalidChangelogError` - Will throw if the changelog is invalid\n * @throws `MissingCurrentVersionError` - Will throw if `isReleaseCandidate` is\n * `true` and the changelog is missing the release header for the current\n * version.\n * @throws `UnreleasedChangesError` - Will throw if `isReleaseCandidate` is\n * `true` and the changelog contains unreleased changes.\n * @throws `UnreleasedChangesError` - Will throw if `isReleaseCandidate` is\n * `true` and the changelog contains uncategorized changes.\n * @throws `ChangelogFormattingError` - Will throw if there is a formatting error.\n */\nexport function validateChangelog({\n  changelogContent,\n  currentVersion,\n  repoUrl,\n  isReleaseCandidate,\n}: ValidateChangelogOptions) {\n  const changelog = parseChangelog({ changelogContent, repoUrl });\n  const hasUnreleasedChanges =\n    Object.keys(changelog.getUnreleasedChanges()).length !== 0;\n  const releaseChanges = currentVersion\n    ? changelog.getReleaseChanges(currentVersion)\n    : undefined;\n\n  if (isReleaseCandidate) {\n    if (!currentVersion) {\n      throw new Error(\n        `A version must be specified if 'isReleaseCandidate' is set.`,\n      );\n    } else if (\n      !changelog\n        .getReleases()\n        .find((release) => release.version === currentVersion)\n    ) {\n      throw new MissingCurrentVersionError(currentVersion);\n    } else if (hasUnreleasedChanges) {\n      throw new UnreleasedChangesError();\n    } else if (\n      releaseChanges?.[ChangeCategory.Uncategorized]?.length &&\n      releaseChanges?.[ChangeCategory.Uncategorized]?.length !== 0\n    ) {\n      throw new UncategorizedChangesError();\n    }\n  }\n\n  const validChangelog = changelog.toString();\n  if (validChangelog !== changelogContent) {\n    throw new ChangelogFormattingError({\n      validChangelog,\n      invalidChangelog: changelogContent,\n    });\n  }\n}\n"]}