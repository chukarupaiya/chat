"use strict";
/* eslint-disable @typescript-eslint/consistent-type-definitions */
Object.defineProperty(exports, "__esModule", { value: true });
const tsd_1 = require("tsd");
// Valid Json:
(0, tsd_1.expectAssignable)(null);
(0, tsd_1.expectAssignable)(false);
(0, tsd_1.expectAssignable)('');
(0, tsd_1.expectAssignable)(0);
(0, tsd_1.expectAssignable)([]);
(0, tsd_1.expectAssignable)({});
(0, tsd_1.expectAssignable)([0]);
(0, tsd_1.expectAssignable)({ a: 0 });
(0, tsd_1.expectAssignable)({ deeply: [{ nested: 1 }, 'mixed', 'types', 0] });
(0, tsd_1.expectAssignable)(['array', { nested: { mixed: true, types: null } }, 0]);
const jsonCompatibleType = { c: 0 };
(0, tsd_1.expectAssignable)(jsonCompatibleType);
// Invalid Json:
(0, tsd_1.expectNotAssignable)(undefined);
(0, tsd_1.expectNotAssignable)(new Date());
(0, tsd_1.expectNotAssignable)(() => 0);
(0, tsd_1.expectNotAssignable)(new Set());
(0, tsd_1.expectNotAssignable)(new Map());
(0, tsd_1.expectNotAssignable)(Symbol('test'));
(0, tsd_1.expectNotAssignable)({ a: new Date() });
(0, tsd_1.expectNotAssignable)(5);
const interfaceWithOptionalProperty = { a: 0 };
(0, tsd_1.expectNotAssignable)(interfaceWithOptionalProperty);
const interfaceWithDate = { a: new Date() };
(0, tsd_1.expectNotAssignable)(interfaceWithDate);
const interfaceWithOptionalDate = { a: new Date() };
(0, tsd_1.expectNotAssignable)(interfaceWithOptionalDate);
const interfaceWithUndefinedTypeUnion = {
    a: 0,
};
(0, tsd_1.expectNotAssignable)(interfaceWithUndefinedTypeUnion);
const interfaceWithFunction = { a: () => 0 };
(0, tsd_1.expectNotAssignable)(interfaceWithFunction);
const typeWithDate = { a: new Date() };
(0, tsd_1.expectNotAssignable)(typeWithDate);
const typeWithOptionalDate = { a: new Date() };
(0, tsd_1.expectNotAssignable)(typeWithOptionalDate);
const typeWithUndefinedTypeUnion = {
    a: 0,
};
(0, tsd_1.expectNotAssignable)(typeWithUndefinedTypeUnion);
const typeWithFunction = { a: () => 0 };
(0, tsd_1.expectNotAssignable)(typeWithFunction);
const typeWithOptionalProperty = { a: undefined };
(0, tsd_1.expectNotAssignable)(typeWithOptionalProperty);
// Edge cases:
// The Json type doesn't protect against the `any` type.
(0, tsd_1.expectAssignable)(null);
const a = { a: 0 };
(0, tsd_1.expectNotAssignable)(a);
// The Json type gets confused by classes. This class instance is valid Json,
// but it's incompatible with the Json type.
class Foo {
}
const foo = new Foo();
(0, tsd_1.expectNotAssignable)(foo);
//# sourceMappingURL=json.test-d.js.map