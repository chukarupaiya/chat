{"version":3,"file":"json.test-d.js","sourceRoot":"","sources":["../src/json.test-d.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/consistent-type-definitions */\n\nimport { expectAssignable, expectNotAssignable } from 'tsd';\n\nimport type { Json } from '.';\n\n// Valid Json:\n\nexpectAssignable<Json>(null);\n\nexpectAssignable<Json>(false);\n\nexpectAssignable<Json>('');\n\nexpectAssignable<Json>(0);\n\nexpectAssignable<Json>([]);\n\nexpectAssignable<Json>({});\n\nexpectAssignable<Json>([0]);\n\nexpectAssignable<Json>({ a: 0 });\n\nexpectAssignable<Json>({ deeply: [{ nested: 1 }, 'mixed', 'types', 0] });\n\nexpectAssignable<Json>(['array', { nested: { mixed: true, types: null } }, 0]);\n\ntype JsonCompatibleType = {\n  c: number;\n};\nconst jsonCompatibleType: JsonCompatibleType = { c: 0 };\nexpectAssignable<Json>(jsonCompatibleType);\n\n// Invalid Json:\n\nexpectNotAssignable<Json>(undefined);\n\nexpectNotAssignable<Json>(new Date());\n\nexpectNotAssignable<Json>(() => 0);\n\nexpectNotAssignable<Json>(new Set());\n\nexpectNotAssignable<Json>(new Map());\n\nexpectNotAssignable<Json>(Symbol('test'));\n\nexpectNotAssignable<Json>({ a: new Date() });\n\nexpectNotAssignable<Json>(5 as number | undefined);\n\ninterface InterfaceWithOptionalProperty {\n  a?: number;\n}\nconst interfaceWithOptionalProperty: InterfaceWithOptionalProperty = { a: 0 };\nexpectNotAssignable<Json>(interfaceWithOptionalProperty);\n\ninterface InterfaceWithDate {\n  a: Date;\n}\nconst interfaceWithDate: InterfaceWithDate = { a: new Date() };\nexpectNotAssignable<Json>(interfaceWithDate);\n\ninterface InterfaceWithOptionalDate {\n  a?: Date;\n}\nconst interfaceWithOptionalDate: InterfaceWithOptionalDate = { a: new Date() };\nexpectNotAssignable<Json>(interfaceWithOptionalDate);\n\ninterface InterfaceWithUndefinedTypeUnion {\n  a: number | undefined;\n}\nconst interfaceWithUndefinedTypeUnion: InterfaceWithUndefinedTypeUnion = {\n  a: 0,\n};\nexpectNotAssignable<Json>(interfaceWithUndefinedTypeUnion);\n\ninterface InterfaceWithFunction {\n  a: () => number;\n}\nconst interfaceWithFunction: InterfaceWithFunction = { a: () => 0 };\nexpectNotAssignable<Json>(interfaceWithFunction);\n\ntype TypeWithDate = {\n  a: Date;\n};\nconst typeWithDate: TypeWithDate = { a: new Date() };\nexpectNotAssignable<Json>(typeWithDate);\n\ntype TypeWithOptionalDate = {\n  a?: Date;\n};\nconst typeWithOptionalDate: TypeWithOptionalDate = { a: new Date() };\nexpectNotAssignable<Json>(typeWithOptionalDate);\n\ntype TypeWithUndefinedTypeUnion = {\n  a: number | undefined;\n};\nconst typeWithUndefinedTypeUnion: TypeWithUndefinedTypeUnion = {\n  a: 0,\n};\nexpectNotAssignable<Json>(typeWithUndefinedTypeUnion);\n\ntype TypeWithFunction = {\n  a: () => number;\n};\nconst typeWithFunction: TypeWithFunction = { a: () => 0 };\nexpectNotAssignable<Json>(typeWithFunction);\n\ntype TypeWithOptionalProperty = {\n  a?: number | undefined;\n};\nconst typeWithOptionalProperty: TypeWithOptionalProperty = { a: undefined };\nexpectNotAssignable<Json>(typeWithOptionalProperty);\n\n// Edge cases:\n\n// The Json type doesn't protect against the `any` type.\nexpectAssignable<Json>(null as any);\n\n// The Json type gets confused by interfaces. This interface is valid Json,\n// but it's incompatible with the Json type.\ninterface A {\n  a: number;\n}\nconst a: A = { a: 0 };\nexpectNotAssignable<Json>(a);\n\n// The Json type gets confused by classes. This class instance is valid Json,\n// but it's incompatible with the Json type.\nclass Foo {\n  a!: number;\n}\nconst foo = new Foo();\nexpectNotAssignable<Json>(foo);\n"]}