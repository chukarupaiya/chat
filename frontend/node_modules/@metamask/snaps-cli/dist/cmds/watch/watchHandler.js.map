{"version":3,"file":"watchHandler.js","sourceRoot":"","sources":["../../../src/cmds/watch/watchHandler.ts"],"names":[],"mappings":"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","sourcesContent":["import chokidar from 'chokidar';\nimport { YargsArgs } from '../../types/yargs';\nimport {\n  getOutfilePath,\n  loadConfig,\n  logError,\n  validateDirPath,\n  validateFilePath,\n  validateOutfileName,\n} from '../../utils';\nimport { bundle } from '../build/bundle';\nimport { snapEval } from '../eval/evalHandler';\nimport { manifestHandler } from '../manifest/manifestHandler';\nimport { serve } from '../serve/serveHandler';\n\n/**\n * Watch a directory and its subdirectories for changes, and build when files\n * are added or changed.\n *\n * Ignores 'node_modules' and dotfiles.\n * Creates destination directory if it doesn't exist.\n *\n * @param argv - Arguments as an object generated by Yargs.\n * @param argv.src - The source file path.\n * @param argv.dist - The output directory path.\n * @param argv.'outfileName' - The output file name.\n */\nexport async function watch(argv: YargsArgs): Promise<void> {\n  const {\n    dist,\n    eval: shouldEval,\n    manifest,\n    outfileName,\n    src,\n    serve: shouldServe,\n  } = argv;\n  if (outfileName) {\n    validateOutfileName(outfileName as string);\n  }\n  await validateFilePath(src);\n  await validateDirPath(dist, true);\n  const rootDir =\n    src.indexOf('/') === -1 ? '.' : src.substring(0, src.lastIndexOf('/') + 1);\n  const outfilePath = getOutfilePath(dist, outfileName as string);\n\n  const buildSnap = async (path?: string, logMessage?: string) => {\n    if (logMessage !== undefined) {\n      console.log(logMessage);\n    }\n\n    try {\n      await bundle(src, outfilePath, argv, loadConfig().bundlerCustomizer);\n\n      if (manifest) {\n        await manifestHandler(argv);\n      }\n\n      if (shouldEval) {\n        await snapEval({ ...argv, bundle: outfilePath });\n      }\n    } catch (error) {\n      logError(\n        `Error ${\n          path === undefined\n            ? 'during initial build'\n            : `while processing \"${path}\"`\n        }.`,\n        error,\n      );\n    }\n  };\n\n  chokidar\n    .watch(rootDir, {\n      ignoreInitial: true,\n      ignored: [\n        '**/node_modules/**',\n        `**/${dist}/**`,\n        `**/test/**`,\n        `**/tests/**`,\n        `**/*.test.js`,\n        `**/*.test.ts`,\n        /* istanbul ignore next */\n        (str: string) => str !== '.' && str.startsWith('.'),\n      ],\n    })\n\n    .on('ready', async () => {\n      await buildSnap();\n      if (shouldServe) {\n        await serve(argv);\n      }\n    })\n    .on('add', (path) => buildSnap(path, `File added: ${path}`))\n    .on('change', (path) => buildSnap(path, `File changed: ${path}`))\n    .on('unlink', (path) => console.log(`File removed: ${path}`))\n    .on('error', (error: Error) => {\n      logError(`Watcher error: ${error.message}`, error);\n    })\n\n    .add(rootDir);\n\n  console.log(`Watching '${rootDir}' for changes...`);\n}\n"]}