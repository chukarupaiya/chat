"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OperationRequestBuilder = void 0;
var common_core_1 = require("@moralisweb3/common-core");
var config_1 = require("../config");
var getCommonHeaders_1 = require("./getCommonHeaders");
var OperationRequestBuilder = /** @class */ (function () {
    function OperationRequestBuilder(operation, core) {
        this.operation = operation;
        this.core = core;
    }
    OperationRequestBuilder.prototype.prepareUrl = function (baseUrl, request) {
        var _this = this;
        var _a;
        var urlParams = this.operation.getRequestUrlParams(request, this.core);
        var urlPath = this.operation.urlPathPattern;
        for (var _i = 0, _b = (_a = this.operation.urlPathParamNames) !== null && _a !== void 0 ? _a : []; _i < _b.length; _i++) {
            var paramName = _b[_i];
            var paramValue = urlParams[paramName];
            if (paramValue === undefined || paramValue === null) {
                throw new Error("Param ".concat(paramName, " is required"));
            }
            urlPath = urlPath.replace("{".concat(paramName, "}"), paramValue);
        }
        var url = "".concat(baseUrl).concat(urlPath);
        var urlSearchParams = {};
        Object.keys(urlParams)
            .filter(function (paramName) { var _a; return !((_a = _this.operation.urlPathParamNames) === null || _a === void 0 ? void 0 : _a.includes(paramName)); })
            .forEach(function (paramName) {
            var paramValue = urlParams[paramName];
            if (paramValue !== undefined && paramValue !== null) {
                urlSearchParams[paramName] = paramValue;
            }
        });
        return { url: url, urlSearchParams: urlSearchParams };
    };
    OperationRequestBuilder.prototype.prepareBody = function (request) {
        if (!this.operation.bodyType && !this.operation.getRequestBody) {
            return undefined;
        }
        if (!this.operation.getRequestBody) {
            throw new Error("getRequestBody is not implemented for operation ".concat(this.operation.name));
        }
        if (!this.operation.bodyParamNames) {
            throw new Error("bodyParamNames are empty for operation ".concat(this.operation.name));
        }
        var body = this.operation.getRequestBody(request, this.core);
        if (this.operation.bodyType === 'properties') {
            return body;
        }
        if (this.operation.bodyType === 'raw') {
            return body;
        }
        throw new Error("Not supported body type: ".concat(this.operation.bodyType));
    };
    OperationRequestBuilder.prototype.prepareHeaders = function () {
        var apiKey = this.core.config.get(config_1.ApiUtilsConfig.apiKey);
        var product = this.core.config.get(common_core_1.CoreConfig.product);
        if (!apiKey) {
            throw new common_core_1.MoralisApiError({
                code: common_core_1.ApiErrorCode.API_KEY_NOT_SET,
                message: 'apiKey is not set',
            });
        }
        var headers = (0, getCommonHeaders_1.getCommonHeaders)();
        headers['x-api-key'] = apiKey;
        if (product) {
            headers['x-moralis-product'] = product;
        }
        return headers;
    };
    return OperationRequestBuilder;
}());
exports.OperationRequestBuilder = OperationRequestBuilder;
//# sourceMappingURL=OperationRequestBuilder.js.map