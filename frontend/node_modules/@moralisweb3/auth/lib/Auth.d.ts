import { ApiModule, Core } from '@moralisweb3/common-core';
import { RequestMessageOptions } from './methods/requestMessage';
import { VerifyEvmOptions, VerifySolOptions, VerifyAptosOptions } from './methods/verify';
import { GetAddressesRequest, GetAddressesResponseAdapter, VerifyChallengeSolanaResponseAdapter, VerifyChallengeEvmResponseAdapter, RequestChallengeEvmResponseAdapter, RequestChallengeEvmRequest, RequestChallengeSolanaResponseAdapter, RequestChallengeSolanaRequest, RemoveBindResponseAdapter, RemoveBindRequest, RequestBindRequest, RequestBindResponseAdapter, VerifyRemoveBindRequest, VerifyRemoveBindResponseAdapter, VerifyRequestBindRequest, VerifyRequestBindResponseAdapter, VerifyChallengeAptosResponseAdapter } from '@moralisweb3/common-auth-utils';
export declare const BASE_URL = "https://authapi.moralis.io";
export declare class Auth extends ApiModule {
    static readonly moduleName = "auth";
    static create(core?: Core): Auth;
    private constructor();
    setup(): void;
    start(): void;
    readonly evm: {
        getAddresses: (request: GetAddressesRequest) => Promise<GetAddressesResponseAdapter>;
        removeBind: (request: RemoveBindRequest) => Promise<RemoveBindResponseAdapter>;
        requestBind: (request: RequestBindRequest) => Promise<RequestBindResponseAdapter>;
        requestChallengeEvm: (request: RequestChallengeEvmRequest) => Promise<RequestChallengeEvmResponseAdapter>;
        verifyRemoveBind: (request: VerifyRemoveBindRequest) => Promise<VerifyRemoveBindResponseAdapter>;
        verifyRequestBind: (request: VerifyRequestBindRequest) => Promise<VerifyRequestBindResponseAdapter>;
    };
    readonly solana: {
        requestChallengeSol: (request: RequestChallengeSolanaRequest) => Promise<RequestChallengeSolanaResponseAdapter>;
    };
    requestMessage: (options: RequestMessageOptions) => Promise<import("@moralisweb3/common-core").ResponseAdapter<{
        id: string;
        profileId: string;
        message: string;
    }, {
        id: string;
        profileId: string;
        message: string;
    }>>;
    verify(options: VerifyEvmOptions): Promise<VerifyChallengeEvmResponseAdapter>;
    verify(options: VerifySolOptions): Promise<VerifyChallengeSolanaResponseAdapter>;
    verify(options: VerifyAptosOptions): Promise<VerifyChallengeAptosResponseAdapter>;
}
//# sourceMappingURL=Auth.d.ts.map