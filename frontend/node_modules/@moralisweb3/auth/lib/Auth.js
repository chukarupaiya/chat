"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Auth = exports.BASE_URL = void 0;
var common_core_1 = require("@moralisweb3/common-core");
var requestMessage_1 = require("./methods/requestMessage");
var verify_1 = require("./methods/verify");
var common_auth_utils_1 = require("@moralisweb3/common-auth-utils");
var api_utils_1 = require("@moralisweb3/api-utils");
exports.BASE_URL = 'https://authapi.moralis.io';
var Auth = /** @class */ (function (_super) {
    __extends(Auth, _super);
    function Auth(core) {
        var _this = _super.call(this, Auth.moduleName, core, exports.BASE_URL) || this;
        // Client-side compatible operation, structured in a predictable way as defined in the operation
        // TODO: generate in seperate package "client-evm-auth" (similar to client-evm-auth)
        _this.evm = {
            getAddresses: function (request) {
                return new api_utils_1.OperationResolver(common_auth_utils_1.getAddressesOperation, _this.baseUrl, _this.core).fetch(request);
            },
            removeBind: function (request) {
                return new api_utils_1.OperationResolver(common_auth_utils_1.removeBindOperation, _this.baseUrl, _this.core).fetch(request);
            },
            requestBind: function (request) {
                return new api_utils_1.OperationResolver(common_auth_utils_1.requestBindOperation, _this.baseUrl, _this.core).fetch(request);
            },
            requestChallengeEvm: function (request) {
                return new api_utils_1.OperationResolver(common_auth_utils_1.requestChallengeEvmOperation, _this.baseUrl, _this.core).fetch(request);
            },
            verifyRemoveBind: function (request) {
                return new api_utils_1.OperationResolver(common_auth_utils_1.verifyRemoveBindOperation, _this.baseUrl, _this.core).fetch(request);
            },
            verifyRequestBind: function (request) {
                return new api_utils_1.OperationResolver(common_auth_utils_1.verifyRequestBindOperation, _this.baseUrl, _this.core).fetch(request);
            },
        };
        // Client-side compatible operation, structured in a predictable way as defined in the operation
        // TODO: generate in separate package "client-evm-auth" (similar to client-evm-auth)
        _this.solana = {
            requestChallengeSol: function (request) {
                return new api_utils_1.OperationResolver(common_auth_utils_1.requestChallengeSolanaOperation, _this.baseUrl, _this.core).fetch(request);
            },
        };
        // Resolves to requestChallengeEvm/requestChallengeSol depending on provided options (defaults to evm)
        _this.requestMessage = function (options) { return (0, requestMessage_1.makeRequestMessage)(_this.core)(options); };
        return _this;
    }
    Auth.create = function (core) {
        return new Auth(core !== null && core !== void 0 ? core : common_core_1.CoreProvider.getDefault());
    };
    Auth.prototype.setup = function () {
        // Nothing
    };
    Auth.prototype.start = function () {
        // Nothing
    };
    Auth.prototype.verify = function (options) {
        return (0, verify_1.makeVerify)(this.core)(options);
    };
    Auth.moduleName = 'auth';
    return Auth;
}(common_core_1.ApiModule));
exports.Auth = Auth;
//# sourceMappingURL=Auth.js.map