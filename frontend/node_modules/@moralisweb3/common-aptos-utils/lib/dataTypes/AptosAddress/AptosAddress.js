"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AptosAddress = void 0;
var common_core_1 = require("@moralisweb3/common-core");
var AccountAddress_1 = require("../../utils/AccountAddress");
/**
 * A representation of an address on the Aptos network.
 *
 * Use this class any time you work with an address.
 *
 * @category DataType
 */
var AptosAddress = /** @class */ (function () {
    function AptosAddress(address) {
        this.address = address;
    }
    /**
     * Create a new instance of AptosAddress from any valid address input.
     *
     * @example `const address = AptosAddress.create("0xcd30fbbda98b2aed026772c13e5ed90a7f056b589ef9e78cd96415e1af12451c")`
     * @throws an error when a passed address is invalid.
     */
    AptosAddress.create = function (address) {
        return address instanceof AptosAddress ? address : new AptosAddress(AptosAddress.parse(address));
    };
    AptosAddress.parse = function (address) {
        try {
            if (!AccountAddress_1.AccountAddress.isValid(address)) {
                // Throw and catch locally to resolve the same way if it is invalid and if it cannot be parsed
                throw new Error();
            }
            return address;
        }
        catch (e) {
            throw new common_core_1.CoreError({
                code: common_core_1.CoreErrorCode.INVALID_ARGUMENT,
                message: "Invalid address provided: ".concat(address),
                cause: e,
            });
        }
    };
    /**
     * Formats the address to hex format.
     * Currently returns a string representing the address.
     * @example address.format(); // "0xcd30fbbda98b2aed026772c13e5ed90a7f056b589ef9e78cd96415e1af12451c"
     */
    AptosAddress.prototype.format = function () {
        // TODO: add `format` argument
        return this.address;
    };
    /**
     * Check the equality between two Aptos addresses
     * @example `AptosAddress.equals("0xcd30fbbda98b2aed026772c13e5ed90a7f056b589ef9e78cd96415e1af12451c", "0xcd30fbbda98b2aed026772c13e5ed90a7f056b589ef9e78cd96415e1af12451c")`
     */
    AptosAddress.equals = function (addressA, addressB) {
        return AptosAddress.create(addressA).equals(addressB);
    };
    /**
     * Checks the equality of the current address with another Aptos address.
     * @example `address.equals("0xcd30fbbda98b2aed026772c13e5ed90a7f056b589ef9e78cd96415e1af12451c")`
     * @example `address.equals(AptosAddress.create("0xcd30fbbda98b2aed026772c13e5ed90a7f056b589ef9e78cd96415e1af12451c"))`
     */
    AptosAddress.prototype.equals = function (address) {
        return this.address === AptosAddress.create(address).address;
    };
    /**
     * @returns a string representing the address.
     * @example address.toString(); // "0xcd30fbbda98b2aed026772c13e5ed90a7f056b589ef9e78cd96415e1af12451c"
     */
    AptosAddress.prototype.toString = function () {
        return this.address;
    };
    /**
     * @returns a string representing the address.
     * @example address.toJSON(); // "0xcd30fbbda98b2aed026772c13e5ed90a7f056b589ef9e78cd96415e1af12451c"
     */
    AptosAddress.prototype.toJSON = function () {
        return this.address;
    };
    return AptosAddress;
}());
exports.AptosAddress = AptosAddress;
//# sourceMappingURL=AptosAddress.js.map