"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AptosNative = void 0;
var common_core_1 = require("@moralisweb3/common-core");
var unitToDecimals = {
    aptos: 8,
    octas: 0,
};
/**
 * The AptosNative class is a MoralisData that references to the value of Aptos native currency APT
 *
 * @category DataType
 */
var AptosNative = /** @class */ (function () {
    function AptosNative(rawValue) {
        this.rawValue = rawValue;
    }
    /**
     * Create a new instance of AptosNative from any valid {@link AptosNativeish} value.
     * @param value - the value to create the AptosNative from
     * @param unit - the unit of the value (optional), defaults to `aptos`
     * @returns a new instance of AptosNative
     * @example
     * ```ts
     * const native = AptosNative.create(2, 'octas');
     * const native = AptosNative.create(2);
     *```
     */
    AptosNative.create = function (value, unit) {
        if (value instanceof AptosNative) {
            return value;
        }
        return new AptosNative(AptosNative.parse(value, unit));
    };
    AptosNative.parse = function (value, unit) {
        if (unit === void 0) { unit = 'aptos'; }
        var decimal;
        if (typeof unit === 'number') {
            decimal = unit;
        }
        else if (unitToDecimals[unit] !== undefined) {
            decimal = unitToDecimals[unit];
        }
        else {
            throw new common_core_1.CoreError({
                code: common_core_1.CoreErrorCode.INVALID_ARGUMENT,
                message: "Not supported Aptos unit: ".concat(unit),
            });
        }
        return common_core_1.BigNumber.fromDecimal(value.toString(), decimal);
    };
    /**
     * Compares two AptosNativeish values.
     * @param valueA - the first value to compare
     * @param valueB - the second value to compare
     * @returns true if the values are equal
     * @example
     * ```ts
     * AptosNative.equals(AptosNative.create(1), AptosNative.create(1)); // true
     * ```
     */
    AptosNative.equals = function (valueA, valueB) {
        var aptosNativeA = AptosNative.create(valueA);
        var aptosNativeB = AptosNative.create(valueB);
        return aptosNativeA.octas === aptosNativeB.octas;
    };
    /**
     * Compares AptosNative with current instance.
     * @param value - the value to compare with
     * @returns true if the values are equal
     * @example
     * ```ts
     * const native = AptosNative.create(2, 'octas');
     * native.equals(AptosNative.create(1)); // false
     * ```
     */
    AptosNative.prototype.equals = function (value) {
        return AptosNative.equals(this, value);
    };
    /**
     * Converts the AptosNative to a string.
     * @returns the value of the AptosNative as a string
     * @example `native.format()`
     */
    AptosNative.prototype.format = function () {
        // TODO: add `format` argument
        return this.octas;
    };
    /**
     * Converts the AptosNative to a string.
     * @returns the value of the AptosNative as a string
     * @example `native.toJSON()`
     */
    AptosNative.prototype.toJSON = function () {
        return this.octas;
    };
    /**
     * Converts the AptosNative to a string.
     * @returns the value of the AptosNative as a string
     * @example `native.toString()`
     */
    AptosNative.prototype.toString = function () {
        return this.octas;
    };
    Object.defineProperty(AptosNative.prototype, "value", {
        /**
         * @returns the value of the AptosNative as a BigNumber
         * @example `native.value`
         */
        get: function () {
            return this.rawValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AptosNative.prototype, "aptos", {
        /**
         * Converts the AptosNative to an aptos unit.
         * @returns the value of the AptosNative as an aptos string
         * @example `native.aptos`
         */
        get: function () {
            return this.rawValue.toDecimal(unitToDecimals['aptos']);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AptosNative.prototype, "octas", {
        /**
         * Converts the AptosNative to a string.
         * @returns the value of the AptosNative as a string
         * @example `native.lamports`
         */
        get: function () {
            return this.rawValue.toString();
        },
        enumerable: false,
        configurable: true
    });
    return AptosNative;
}());
exports.AptosNative = AptosNative;
//# sourceMappingURL=AptosNative.js.map