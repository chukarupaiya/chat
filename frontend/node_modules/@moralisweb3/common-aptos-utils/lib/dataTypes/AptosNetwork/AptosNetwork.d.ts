import { MoralisData, MoralisDataFormatted } from '@moralisweb3/common-core';
declare const aptosNetworkNames: readonly ["mainnet", "testnet", "devnet"];
/**
 * A name of Aptos network.
 *
 * @example "mainnet"
 * @example "devnet"
 */
export type AptosNetworkName = typeof aptosNetworkNames[number];
/**
 * A name of Aptos network.
 *
 * @example "mainnet"
 * @example "devnet"
 */
export type AptosNetworkNameish = AptosNetworkName | string;
/**
 * Valid input for a new AptosNetwork instance.
 * This can be an existing AptosNetwork or a valid network name.
 *
 * @example "mainnet"
 * @example "devnet"
 * @example AptosNetwork.create("mainnet")
 */
export type AptosNetworkish = AptosNetwork | AptosNetworkNameish;
/**
 * A representation of a Aptos network.
 *
 * @category DataType
 */
export declare class AptosNetwork implements MoralisData {
    readonly network: AptosNetworkName;
    /**
     * Returns MAINNET network
     *
     * @example AptosNetwork.MAINNET
     */
    static get MAINNET(): AptosNetwork;
    /**
     * Returns TESTNET network
     *
     * @example AptosNetwork.MAINNET
     */
    static get TESTNET(): AptosNetwork;
    /**
     * Returns DEVNET network
     *
     * @example AptosNetwork.MAINNET
     */
    static get DEVNET(): AptosNetwork;
    /**
     * Create a new instance of AptosNetwork from any valid network input.
     *
     * @example `const network = AptosNetwork.create("mainnet")`
     * @throws an error when a passed network is invalid.
     */
    static create(network: AptosNetworkish): AptosNetwork;
    private static parse;
    private constructor();
    /**
     * Formats the network to a specific format.
     * Currently returns a string representing the network.
     * @example network.format(); // "mainnet"
     */
    format(): MoralisDataFormatted;
    /**
     * Checks the equality of the current network with another Aptos network.
     * @example `network.equals("mainnet")`
     * @example `network.equals(AptosNetwork.create("mainnet"))`
     */
    equals(network: AptosNetworkish): boolean;
    /**
     * @returns a string representing the network.
     * @example network.toJSON(); // "mainnet"
     */
    toJSON(): string;
    /**
     * @returns a string representing the network.
     * @example network.toString(); // "mainnet"
     */
    toString(): string;
}
export {};
//# sourceMappingURL=AptosNetwork.d.ts.map