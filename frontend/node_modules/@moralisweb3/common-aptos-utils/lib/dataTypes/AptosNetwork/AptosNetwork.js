"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AptosNetwork = void 0;
var common_core_1 = require("@moralisweb3/common-core");
var aptosNetworkNames = ['mainnet', 'testnet', 'devnet'];
var aptosChainIdToNetworkNames = {
    '1': 'mainnet',
    '2': 'testnet',
};
/**
 * A representation of a Aptos network.
 *
 * @category DataType
 */
var AptosNetwork = /** @class */ (function () {
    function AptosNetwork(network) {
        this.network = network;
    }
    Object.defineProperty(AptosNetwork, "MAINNET", {
        /**
         * Returns MAINNET network
         *
         * @example AptosNetwork.MAINNET
         */
        get: function () {
            return AptosNetwork.create('mainnet');
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AptosNetwork, "TESTNET", {
        /**
         * Returns TESTNET network
         *
         * @example AptosNetwork.MAINNET
         */
        get: function () {
            return AptosNetwork.create('testnet');
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AptosNetwork, "DEVNET", {
        /**
         * Returns DEVNET network
         *
         * @example AptosNetwork.MAINNET
         */
        get: function () {
            return AptosNetwork.create('devnet');
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Create a new instance of AptosNetwork from any valid network input.
     *
     * @example `const network = AptosNetwork.create("mainnet")`
     * @throws an error when a passed network is invalid.
     */
    AptosNetwork.create = function (network) {
        return network instanceof AptosNetwork ? network : new AptosNetwork(AptosNetwork.parse(network));
    };
    AptosNetwork.parse = function (network) {
        var _a;
        if (typeof network !== 'string') {
            throw new common_core_1.CoreError({
                code: common_core_1.CoreErrorCode.INVALID_ARGUMENT,
                message: "Aptos network is not supported: ".concat(network),
            });
        }
        var networkName = (_a = aptosChainIdToNetworkNames[network]) !== null && _a !== void 0 ? _a : network;
        if (!aptosNetworkNames.includes(networkName)) {
            throw new common_core_1.CoreError({
                code: common_core_1.CoreErrorCode.INVALID_ARGUMENT,
                message: "Aptos network is not supported: ".concat(network),
            });
        }
        return networkName;
    };
    /**
     * Formats the network to a specific format.
     * Currently returns a string representing the network.
     * @example network.format(); // "mainnet"
     */
    AptosNetwork.prototype.format = function () {
        // TODO: add `format` argument
        return this.network;
    };
    /**
     * Checks the equality of the current network with another Aptos network.
     * @example `network.equals("mainnet")`
     * @example `network.equals(AptosNetwork.create("mainnet"))`
     */
    AptosNetwork.prototype.equals = function (network) {
        return this.network === AptosNetwork.create(network).network;
    };
    /**
     * @returns a string representing the network.
     * @example network.toJSON(); // "mainnet"
     */
    AptosNetwork.prototype.toJSON = function () {
        return this.network;
    };
    /**
     * @returns a string representing the network.
     * @example network.toString(); // "mainnet"
     */
    AptosNetwork.prototype.toString = function () {
        return this.network;
    };
    return AptosNetwork;
}());
exports.AptosNetwork = AptosNetwork;
//# sourceMappingURL=AptosNetwork.js.map