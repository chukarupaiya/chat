import { AptosNetwork } from '@moralisweb3/common-aptos-utils';
import { Camelize, Operation, ResponseAdapter } from '@moralisweb3/common-core';
import { AptosAddress } from '@moralisweb3/common-aptos-utils';
import { operations } from '../openapi';
type OperationId = 'verifyChallengeAptos';
type BodyParams = operations[OperationId]['requestBody']['content']['application/json'];
type RequestParams = BodyParams;
type SuccessResponse = operations[OperationId]['responses']['201']['content']['application/json'];
export interface VerifyChallengeAptosRequest extends Camelize<RequestParams> {
}
export type VerifyChallengeAptosJSONRequest = ReturnType<typeof serializeRequest>;
export type VerifyChallengeAptosJSONResponse = SuccessResponse;
export type VerifyChallengeAptosResponse = ReturnType<typeof deserializeResponse>;
export interface VerifyChallengeAptosResponseAdapter extends ResponseAdapter<VerifyChallengeAptosResponse, VerifyChallengeAptosJSONResponse> {
}
export declare const verifyChallengeAptosOperation: Operation<VerifyChallengeAptosRequest, VerifyChallengeAptosJSONRequest, VerifyChallengeAptosResponse, VerifyChallengeAptosJSONResponse>;
declare function deserializeResponse({ chainId, ...jsonResponse }: VerifyChallengeAptosJSONResponse): {
    chain: AptosNetwork;
    address: AptosAddress;
    expirationTime: Date | undefined;
    notBefore: Date | undefined;
    id: string;
    domain: string;
    statement?: string | undefined;
    uri: string;
    resources?: string[] | undefined;
    version: string;
    nonce: string;
    profileId: string;
    publicKey: string;
};
declare function serializeRequest(request: VerifyChallengeAptosRequest): {
    message: string;
    signature: string;
};
export {};
//# sourceMappingURL=verifyChallengeAptosOperation.d.ts.map