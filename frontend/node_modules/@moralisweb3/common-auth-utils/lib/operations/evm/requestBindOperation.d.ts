import { Camelize, Core, Operation, ResponseAdapter } from '@moralisweb3/common-core';
import { EvmAddressish } from '@moralisweb3/common-evm-utils';
import { operations } from '../openapi';
type OperationId = 'requestBind';
type BodyParams = operations[OperationId]['requestBody']['content']['application/json'];
type RequestParams = BodyParams;
type SuccessResponse = operations[OperationId]['responses']['201']['content']['application/json'];
export interface RequestBindRequest extends Camelize<Omit<RequestParams, 'addresses'>> {
    addresses: {
        blockchainType: 'evm' | 'solana';
        address: EvmAddressish;
    }[];
}
export type RequestBindJSONRequest = ReturnType<typeof serializeRequest>;
export type RequestBindJSONResponse = SuccessResponse;
export type RequestBindResponse = ReturnType<typeof deserializeResponse>;
export interface RequestBindResponseAdapter extends ResponseAdapter<RequestBindResponse, RequestBindJSONResponse> {
}
export declare const requestBindOperation: Operation<RequestBindRequest, RequestBindJSONRequest, RequestBindResponse, RequestBindJSONResponse>;
declare function deserializeResponse(jsonResponse: RequestBindJSONResponse): {
    messages: string[];
};
declare function serializeRequest(request: RequestBindRequest, core: Core): {
    addresses: {
        blockchainType: "evm" | "solana";
        address: string;
    }[];
};
export {};
//# sourceMappingURL=requestBindOperation.d.ts.map