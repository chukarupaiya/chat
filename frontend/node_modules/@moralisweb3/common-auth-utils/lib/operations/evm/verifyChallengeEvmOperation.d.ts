import { Camelize, Operation, ResponseAdapter } from '@moralisweb3/common-core';
import { EvmAddress, EvmChain } from '@moralisweb3/common-evm-utils';
import { operations } from '../openapi';
type OperationId = 'verifyChallengeEvm';
type BodyParams = operations[OperationId]['requestBody']['content']['application/json'];
type RequestParams = BodyParams;
type SuccessResponse = operations[OperationId]['responses']['201']['content']['application/json'];
export interface VerifyChallengeEvmRequest extends Camelize<RequestParams> {
}
export type VerifyChallengeEvmJSONRequest = ReturnType<typeof serializeRequest>;
export type VerifyChallengeEvmJSONResponse = SuccessResponse;
export type VerifyChallengeEvmResponse = ReturnType<typeof deserializeResponse>;
export interface VerifyChallengeEvmResponseAdapter extends ResponseAdapter<VerifyChallengeEvmResponse, VerifyChallengeEvmJSONResponse> {
}
export declare const verifyChallengeEvmOperation: Operation<VerifyChallengeEvmRequest, VerifyChallengeEvmJSONRequest, VerifyChallengeEvmResponse, VerifyChallengeEvmJSONResponse>;
declare function deserializeResponse({ chainId, ...jsonResponse }: VerifyChallengeEvmJSONResponse): {
    chain: EvmChain;
    address: EvmAddress;
    expirationTime: Date | undefined;
    notBefore: Date | undefined;
    id: string;
    domain: string;
    statement?: string | undefined;
    uri: string;
    resources?: string[] | undefined;
    version: string;
    nonce: string;
    profileId: string;
};
declare function serializeRequest(request: VerifyChallengeEvmRequest): {
    message: string;
    signature: string;
};
export {};
//# sourceMappingURL=verifyChallengeEvmOperation.d.ts.map