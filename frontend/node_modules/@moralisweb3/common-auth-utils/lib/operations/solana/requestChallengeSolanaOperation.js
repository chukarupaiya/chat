"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.requestChallengeSolanaOperation = void 0;
var common_sol_utils_1 = require("@moralisweb3/common-sol-utils");
/** The back channel challenge containing the id to store on the api and the message to be signed by the user */
exports.requestChallengeSolanaOperation = {
    method: 'POST',
    name: 'requestChallengeSolana',
    id: 'requestChallengeSolana',
    groupName: 'solana',
    urlPathPattern: '/challenge/request/solana',
    bodyParamNames: [
        'domain',
        'network',
        'address',
        'statement',
        'uri',
        'expirationTime',
        'notBefore',
        'resources',
        'timeout',
    ],
    bodyType: 'properties',
    getRequestUrlParams: getRequestUrlParams,
    getRequestBody: getRequestBody,
    serializeRequest: serializeRequest,
    deserializeRequest: deserializeRequest,
    deserializeResponse: deserializeResponse,
};
// Methods
function getRequestUrlParams() {
    return {};
}
function getRequestBody(request) {
    return {
        domain: request.domain,
        network: common_sol_utils_1.SolNetwork.create(request.network).network,
        address: common_sol_utils_1.SolAddress.create(request.address).address,
        statement: request.statement,
        uri: request.uri,
        expirationTime: request.expirationTime,
        notBefore: request.notBefore,
        resources: request.resources,
        timeout: request.timeout,
    };
}
function deserializeResponse(jsonResponse) {
    return jsonResponse;
}
function serializeRequest(request) {
    return {
        domain: request.domain,
        network: common_sol_utils_1.SolNetwork.create(request.network).network,
        address: common_sol_utils_1.SolAddress.create(request.address).address,
        statement: request.statement,
        uri: request.uri,
        expirationTime: request.expirationTime,
        notBefore: request.notBefore,
        resources: request.resources,
        timeout: request.timeout,
    };
}
function deserializeRequest(jsonRequest) {
    return {
        domain: jsonRequest.domain,
        network: common_sol_utils_1.SolNetwork.create(jsonRequest.network),
        address: common_sol_utils_1.SolAddress.create(jsonRequest.address),
        statement: jsonRequest.statement,
        uri: jsonRequest.uri,
        expirationTime: jsonRequest.expirationTime,
        notBefore: jsonRequest.notBefore,
        resources: jsonRequest.resources,
        timeout: jsonRequest.timeout,
    };
}
//# sourceMappingURL=requestChallengeSolanaOperation.js.map