"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.verifyChallengeSolanaOperation = void 0;
var common_core_1 = require("@moralisweb3/common-core");
var common_sol_utils_1 = require("@moralisweb3/common-sol-utils");
exports.verifyChallengeSolanaOperation = {
    method: 'POST',
    name: 'verifyChallengeSolana',
    id: 'verifyChallengeSolana',
    groupName: 'solana',
    urlPathPattern: '/challenge/verify/solana',
    bodyParamNames: ['message', 'signature'],
    bodyType: 'properties',
    getRequestUrlParams: getRequestUrlParams,
    getRequestBody: getRequestBody,
    serializeRequest: serializeRequest,
    deserializeRequest: deserializeRequest,
    deserializeResponse: deserializeResponse,
};
// Methods
function getRequestUrlParams() {
    return {};
}
function getRequestBody(request) {
    return {
        message: request.message,
        signature: request.signature,
    };
}
function deserializeResponse(_a) {
    var network = _a.network, jsonResponse = __rest(_a, ["network"]);
    return __assign(__assign({}, jsonResponse), { solNetwork: common_sol_utils_1.SolNetwork.create(network), address: common_sol_utils_1.SolAddress.create(jsonResponse.address), expirationTime: (0, common_core_1.maybe)(jsonResponse.expirationTime, function (value) { return new Date(value); }), notBefore: (0, common_core_1.maybe)(jsonResponse.notBefore, function (value) { return new Date(value); }) });
}
function serializeRequest(request) {
    return {
        message: request.message,
        signature: request.signature,
    };
}
function deserializeRequest(jsonRequest) {
    return {
        message: jsonRequest.message,
        signature: jsonRequest.signature,
    };
}
//# sourceMappingURL=verifyChallengeSolanaOperation.js.map