import { Module, ModuleFactory } from './Modules/Module';
import { Modules } from './Modules/Modules';
import { LoggerController } from './controllers/LoggerController';
import { Config } from './Config/Config';
import { MoralisCoreConfigValues } from './Config';
import { BigNumber } from './dataTypes';
/**
 * Core is used in all Moralis applications
 * This class is **required** to be implemented in every app
 *
 * This class is responsible for:
 * - registering, removing and accessing modules
 * - accessing and changing the config
 */
export declare class Core {
    readonly modules: Modules;
    readonly config: Config;
    readonly logger: LoggerController;
    static readonly moduleName = "core";
    static create(): Core;
    readonly name = "core";
    private _isStarted;
    get isStarted(): boolean;
    static readonly libVersion = "2.14.1";
    constructor(modules: Modules, config: Config, logger: LoggerController);
    /**
     * Register all specified modules and configurations
     * @params array of all modules (any module that is extended from BaseModule) that you want to include
     */
    registerModules: (modules: (Module | ModuleFactory)[]) => void;
    /**
     * Register a new module
     */
    registerModule: (module: Module | ModuleFactory) => void;
    getModule: <CurrentModule extends Module = Module>(name: string) => CurrentModule;
    /**
     * Start all modules, this function should be called before any interaction with a module,
     * as it is responsible for initialising the modules.
     *
     * This will call `start()` on every registered module
     */
    start: (providedConfig?: Partial<MoralisCoreConfigValues>) => Promise<void>;
    get BigNumber(): typeof BigNumber;
}
//# sourceMappingURL=Core.d.ts.map