"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Core = void 0;
var Modules_1 = require("./Modules/Modules");
var LoggerController_1 = require("./controllers/LoggerController");
var Config_1 = require("./Config/Config");
var CoreConfigSetup_1 = require("./Config/CoreConfigSetup");
var version_1 = require("./version");
var Error_1 = require("./Error");
var dataTypes_1 = require("./dataTypes");
/**
 * Core is used in all Moralis applications
 * This class is **required** to be implemented in every app
 *
 * This class is responsible for:
 * - registering, removing and accessing modules
 * - accessing and changing the config
 */
var Core = /** @class */ (function () {
    function Core(modules, config, logger) {
        var _this = this;
        this.modules = modules;
        this.config = config;
        this.logger = logger;
        this.name = Core.moduleName;
        this._isStarted = false;
        /**
         * Register all specified modules and configurations
         * @params array of all modules (any module that is extended from BaseModule) that you want to include
         */
        this.registerModules = function (modules) {
            modules.forEach(_this.registerModule);
        };
        /**
         * Register a new module
         */
        this.registerModule = function (module) {
            if ('create' in module) {
                module = module.create(_this);
            }
            _this.modules.register(module);
            _this.logger.verbose('Module registered', { module: module.name });
        };
        this.getModule = function (name) {
            return _this.modules.get(name);
        };
        /**
         * Start all modules, this function should be called before any interaction with a module,
         * as it is responsible for initialising the modules.
         *
         * This will call `start()` on every registered module
         */
        this.start = function (providedConfig) { return __awaiter(_this, void 0, void 0, function () {
            var allModules;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this._isStarted) {
                            throw new Error_1.MoralisError({
                                message: 'Modules are started already. This method should be called only one time.',
                                code: Error_1.CoreErrorCode.ALREADY_INITIALIZED,
                            });
                        }
                        this._isStarted = true;
                        allModules = this.modules.list();
                        if (providedConfig) {
                            this.config.merge(providedConfig);
                        }
                        this.logger.verbose('Starting all registered modules', {
                            moduleNames: this.modules.listNames(),
                        });
                        return [4 /*yield*/, Promise.all(allModules.map(function (module) { return module.start(); }))];
                    case 1:
                        _a.sent();
                        this.logger.verbose('Finished starting all registered modules', {
                            moduleNames: this.modules.listNames(),
                        });
                        return [2 /*return*/];
                }
            });
        }); };
    }
    Core.create = function () {
        var modules = new Modules_1.Modules();
        var config = new Config_1.Config();
        var logger = new LoggerController_1.LoggerController(Core.moduleName, config);
        var core = new Core(modules, config, logger);
        CoreConfigSetup_1.CoreConfigSetup.register(config);
        return core;
    };
    Object.defineProperty(Core.prototype, "isStarted", {
        get: function () {
            return this._isStarted;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Core.prototype, "BigNumber", {
        get: function () {
            return dataTypes_1.BigNumber;
        },
        enumerable: false,
        configurable: true
    });
    Core.moduleName = 'core';
    Core.libVersion = version_1.LIB_VERSION;
    return Core;
}());
exports.Core = Core;
//# sourceMappingURL=Core.js.map