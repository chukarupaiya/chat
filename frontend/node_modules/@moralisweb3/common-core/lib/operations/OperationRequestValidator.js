"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OperationRequestValidator = void 0;
var Error_1 = require("../Error");
var OperationRequestValidator = /** @class */ (function () {
    function OperationRequestValidator(operation) {
        this.allParamNames = __spreadArray(__spreadArray(__spreadArray([], (operation.urlPathParamNames || []), true), (operation.urlSearchParamNames || []), true), (operation.bodyParamNames || []), true);
    }
    OperationRequestValidator.prototype.validate = function (request) {
        var requestParamNames = Object.keys(request);
        for (var _i = 0, requestParamNames_1 = requestParamNames; _i < requestParamNames_1.length; _i++) {
            var paramName = requestParamNames_1[_i];
            if (!this.allParamNames.includes(paramName)) {
                var allParamsNames = this.allParamNames.join(', ');
                throw new Error_1.MoralisError({
                    code: Error_1.CoreErrorCode.INVALID_ARGUMENT,
                    message: "Request contains unknown parameter: ".concat(paramName, ". This operation supports the following parameters: ").concat(allParamsNames),
                });
            }
        }
    };
    return OperationRequestValidator;
}());
exports.OperationRequestValidator = OperationRequestValidator;
//# sourceMappingURL=OperationRequestValidator.js.map