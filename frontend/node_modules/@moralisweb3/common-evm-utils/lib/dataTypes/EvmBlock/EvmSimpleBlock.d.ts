import Core, { MoralisDataObject, BigNumber } from '@moralisweb3/common-core';
import { EvmChain } from '../EvmChain';
import { EvmBlockish } from './EvmBlock';
import { EvmSimpleBlockInput, EvmSimpleBlockData } from './types';
/**
 * Valid input for a new EvmSimpleBlock instance.
 * This can be an existing {@link EvmSimpleBlock} or a valid {@link EvmSimpleBlockInput} object
 */
export type EvmSimpleBlockish = EvmSimpleBlockInput | EvmSimpleBlock;
/**
 * The EvmSimpleBlock is a representation of a block.
 *
 * @category DataType
 */
export declare class EvmSimpleBlock implements MoralisDataObject {
    /**
     * Create a new instance of EvmSimpleBlock from any valid transaction input
     * @param data - the EvmSimpleBlockish type
     * @example const transaction = EvmTransaction.create(data);
     */
    static create(data: EvmSimpleBlockish, core?: Core): EvmSimpleBlock;
    private _data;
    constructor(data: EvmSimpleBlockInput, core: Core);
    static parse: (data: EvmSimpleBlockInput, core: Core) => EvmSimpleBlockData;
    /**
     * Check the equality between two Evm blocks. It compares their hashes and blocks.
     * @param dataA - The first block to compare
     * @param dataB - The second block to compare
     * @example EvmTransaction.equals(dataA, dataB)
     */
    static equals(dataA: EvmSimpleBlockish | EvmBlockish, dataB: EvmSimpleBlockish | EvmBlockish): boolean;
    /**
     * Checks the equality of the current block with another evm block
     * @param data - the block to compare with
     * @example
     * ```ts
     * block.equals(data)
     * ```
     */
    equals(data: EvmSimpleBlockish): boolean;
    /**
     * @returns a JSON represention of the block.
     * @example
     * ```
     * block.toJSON()
     * ```
     */
    toJSON(): {
        number: string;
        chain: string | number;
        timestamp: Date;
        hash: string;
    };
    /**
     * @returns a JSON represention of the block.
     * @example
     * ```
     * block.format()
     * ```
     */
    format(): {
        number: string;
        chain: string | number;
        timestamp: Date;
        hash: string;
    };
    /**
     * @returns all the data without casting it to JSON.
     * @example block.result
     */
    get result(): EvmSimpleBlockData;
    /**
     * @returns the block number.
     * @example block.number // BigNumber
     */
    get number(): BigNumber;
    /**
     * @returns the block hash.
     * @example block.hash // "0x9b559aef7ea858608c2e554246fe4a24287e7aeeb976848df2b9a2531f4b9171"
     */
    get hash(): string;
    /**
     * @returns the block timestamp.
     * @example block.timestamp // Date
     */
    get timestamp(): Date;
    /**
     * @returns the block chain.
     * @example block.chain // EvmChain
     */
    get chain(): EvmChain;
}
//# sourceMappingURL=EvmSimpleBlock.d.ts.map