"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EvmSimpleBlock = void 0;
var common_core_1 = require("@moralisweb3/common-core");
var EvmChain_1 = require("../EvmChain");
/**
 * The EvmSimpleBlock is a representation of a block.
 *
 * @category DataType
 */
var EvmSimpleBlock = /** @class */ (function () {
    function EvmSimpleBlock(data, core) {
        this._data = EvmSimpleBlock.parse(data, core);
    }
    /**
     * Create a new instance of EvmSimpleBlock from any valid transaction input
     * @param data - the EvmSimpleBlockish type
     * @example const transaction = EvmTransaction.create(data);
     */
    EvmSimpleBlock.create = function (data, core) {
        if (data instanceof EvmSimpleBlock) {
            return data;
        }
        var finalCore = core !== null && core !== void 0 ? core : common_core_1.CoreProvider.getDefault();
        return new EvmSimpleBlock(data, finalCore);
    };
    /**
     * Check the equality between two Evm blocks. It compares their hashes and blocks.
     * @param dataA - The first block to compare
     * @param dataB - The second block to compare
     * @example EvmTransaction.equals(dataA, dataB)
     */
    EvmSimpleBlock.equals = function (dataA, dataB) {
        var blockA = EvmSimpleBlock.create(dataA);
        var blockB = EvmSimpleBlock.create(dataB);
        if (!blockA.chain.equals(blockB.chain)) {
            return false;
        }
        if (blockA.hash !== blockB.hash) {
            return false;
        }
        if (!blockA.number.equals(blockB.number)) {
            return false;
        }
        return true;
    };
    /**
     * Checks the equality of the current block with another evm block
     * @param data - the block to compare with
     * @example
     * ```ts
     * block.equals(data)
     * ```
     */
    EvmSimpleBlock.prototype.equals = function (data) {
        return EvmSimpleBlock.equals(this, data);
    };
    /**
     * @returns a JSON represention of the block.
     * @example
     * ```
     * block.toJSON()
     * ```
     */
    EvmSimpleBlock.prototype.toJSON = function () {
        var data = this._data;
        return __assign(__assign({}, data), { number: data.number.toString(), chain: data.chain.format() });
    };
    /**
     * @returns a JSON represention of the block.
     * @example
     * ```
     * block.format()
     * ```
     */
    EvmSimpleBlock.prototype.format = function () {
        return this.toJSON();
    };
    Object.defineProperty(EvmSimpleBlock.prototype, "result", {
        /**
         * @returns all the data without casting it to JSON.
         * @example block.result
         */
        get: function () {
            return this._data;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmSimpleBlock.prototype, "number", {
        /**
         * @returns the block number.
         * @example block.number // BigNumber
         */
        get: function () {
            return this._data.number;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmSimpleBlock.prototype, "hash", {
        /**
         * @returns the block hash.
         * @example block.hash // "0x9b559aef7ea858608c2e554246fe4a24287e7aeeb976848df2b9a2531f4b9171"
         */
        get: function () {
            return this._data.hash;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmSimpleBlock.prototype, "timestamp", {
        /**
         * @returns the block timestamp.
         * @example block.timestamp // Date
         */
        get: function () {
            return this._data.timestamp;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmSimpleBlock.prototype, "chain", {
        /**
         * @returns the block chain.
         * @example block.chain // EvmChain
         */
        get: function () {
            return this._data.chain;
        },
        enumerable: false,
        configurable: true
    });
    EvmSimpleBlock.parse = function (data, core) { return ({
        timestamp: (0, common_core_1.dateInputToDate)(data.timestamp),
        number: common_core_1.BigNumber.create(data.number),
        chain: EvmChain_1.EvmChain.create(data.chain, core),
        hash: data.hash,
    }); };
    return EvmSimpleBlock;
}());
exports.EvmSimpleBlock = EvmSimpleBlock;
//# sourceMappingURL=EvmSimpleBlock.js.map