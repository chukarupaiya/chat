import { MoralisDataObject, MoralisDataObjectValue } from '@moralisweb3/common-core';
import { Signature as EthersSignature } from '@ethersproject/bytes';
import { EvmSignatureInput } from './types';
type EvmSignatureData = EthersSignature;
export type EvmSignatureish = EvmSignatureInput | EvmSignature;
/**
 * Represents of a signed EVM signature
 * Can be created with a valid r,s,v signature or a hex string
 */
export declare class EvmSignature implements MoralisDataObject {
    static create(data: EvmSignatureish): EvmSignature;
    private _data;
    constructor(data: EvmSignatureInput);
    static parse: (data: EvmSignatureInput) => EvmSignatureData;
    static equals(dataA: EvmSignatureish, dataB: EvmSignatureish): boolean;
    /**
     * Checks the equality of the current transfer instance with another nft transfer
     * @param data - the transfer to compare with
     * @example transaction.equals(data)
     * @returns true if the transfers are equal, false otherwise
     */
    equals(data: EvmSignatureish): boolean;
    get r(): string;
    get s(): string;
    get v(): number;
    get serialized(): string;
    toJSON(): MoralisDataObjectValue;
    format(): string;
}
export {};
//# sourceMappingURL=EvmSignature.d.ts.map