"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EvmSignature = void 0;
var common_core_1 = require("@moralisweb3/common-core");
var bytes_1 = require("@ethersproject/bytes");
/**
 * Represents of a signed EVM signature
 * Can be created with a valid r,s,v signature or a hex string
 */
var EvmSignature = /** @class */ (function () {
    function EvmSignature(data) {
        this._data = EvmSignature.parse(data);
    }
    EvmSignature.create = function (data) {
        if (data instanceof EvmSignature) {
            return data;
        }
        return new EvmSignature(data);
    };
    EvmSignature.equals = function (dataA, dataB) {
        var signatureA = EvmSignature.create(dataA);
        var signatureB = EvmSignature.create(dataB);
        return signatureA.serialized === signatureB.serialized;
    };
    /**
     * Checks the equality of the current transfer instance with another nft transfer
     * @param data - the transfer to compare with
     * @example transaction.equals(data)
     * @returns true if the transfers are equal, false otherwise
     */
    EvmSignature.prototype.equals = function (data) {
        return EvmSignature.equals(this, data);
    };
    Object.defineProperty(EvmSignature.prototype, "r", {
        get: function () {
            return this._data.r;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmSignature.prototype, "s", {
        get: function () {
            return this._data.s;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmSignature.prototype, "v", {
        get: function () {
            return this._data.v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmSignature.prototype, "serialized", {
        get: function () {
            return (0, bytes_1.joinSignature)(this._data);
        },
        enumerable: false,
        configurable: true
    });
    EvmSignature.prototype.toJSON = function () {
        return {
            r: this.r,
            s: this.s,
            v: this.v.toString(),
        };
    };
    EvmSignature.prototype.format = function () {
        return this.serialized;
    };
    EvmSignature.parse = function (data) {
        if (typeof data === 'string') {
            return (0, bytes_1.splitSignature)(data);
        }
        return (0, bytes_1.splitSignature)({
            r: (0, bytes_1.hexlify)(common_core_1.BigNumber.create(data.r).toBigInt()),
            s: (0, bytes_1.hexlify)(common_core_1.BigNumber.create(data.s).toBigInt()),
            v: +data.v,
        });
    };
    return EvmSignature;
}());
exports.EvmSignature = EvmSignature;
//# sourceMappingURL=EvmSignature.js.map