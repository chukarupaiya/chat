"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNativeBalancesForAddressesOperation = void 0;
var common_core_1 = require("@moralisweb3/common-core");
var dataTypes_1 = require("../../dataTypes");
var EvmChainResolver_1 = require("../../EvmChainResolver");
/** Get the native balances for a set of specific addresses */
exports.getNativeBalancesForAddressesOperation = {
    method: 'GET',
    name: 'getNativeBalancesForAddresses',
    id: 'getNativeBalancesForAddresses',
    groupName: 'balance',
    urlPathPattern: '/wallets/balance',
    urlSearchParamNames: ['chain', 'providerUrl', 'toBlock', 'walletAddresses'],
    getRequestUrlParams: getRequestUrlParams,
    serializeRequest: serializeRequest,
    deserializeRequest: deserializeRequest,
    deserializeResponse: deserializeResponse,
};
// Methods
function getRequestUrlParams(request, core) {
    var _a;
    return {
        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,
        providerUrl: request.providerUrl,
        to_block: (0, common_core_1.maybe)(request.toBlock, String),
        wallet_addresses: (_a = request.walletAddresses) === null || _a === void 0 ? void 0 : _a.map(function (address) { return dataTypes_1.EvmAddress.create(address, core).checksum; }),
    };
}
function deserializeResponse(jsonResponse, request, core) {
    return (jsonResponse !== null && jsonResponse !== void 0 ? jsonResponse : []).map(function (chainBalances) { return ({
        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core),
        blockNumber: chainBalances.block_number,
        blockTimestamp: chainBalances.block_timestamp,
        totalBalance: dataTypes_1.EvmNative.create(chainBalances.total_balance, 'wei'),
        walletBalances: chainBalances.wallet_balances.map(function (walletBalance) { return ({
            address: dataTypes_1.EvmAddress.create(walletBalance.address, core),
            balance: dataTypes_1.EvmNative.create(walletBalance.balance, 'wei'),
        }); }),
    }); });
}
function serializeRequest(request, core) {
    var _a;
    return {
        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,
        providerUrl: request.providerUrl,
        toBlock: request.toBlock,
        walletAddresses: (_a = request.walletAddresses) === null || _a === void 0 ? void 0 : _a.map(function (address) { return dataTypes_1.EvmAddress.create(address, core).checksum; }),
    };
}
function deserializeRequest(jsonRequest, core) {
    var _a;
    return {
        chain: EvmChainResolver_1.EvmChainResolver.resolve(jsonRequest.chain, core),
        providerUrl: jsonRequest.providerUrl,
        toBlock: jsonRequest.toBlock,
        walletAddresses: (_a = jsonRequest.walletAddresses) === null || _a === void 0 ? void 0 : _a.map(function (address) { return dataTypes_1.EvmAddress.create(address, core); }),
    };
}
//# sourceMappingURL=getNativeBalancesForAddressesOperation.js.map