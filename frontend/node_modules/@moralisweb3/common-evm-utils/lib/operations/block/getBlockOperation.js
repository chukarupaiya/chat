"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBlockOperation = void 0;
var common_core_1 = require("@moralisweb3/common-core");
var dataTypes_1 = require("../../dataTypes");
var EvmChainResolver_1 = require("../../EvmChainResolver");
/** Get the contents of a block given the block hash. */
exports.getBlockOperation = {
    method: 'GET',
    name: 'getBlock',
    id: 'getBlock',
    groupName: 'block',
    isNullable: true,
    urlPathPattern: '/block/{blockNumberOrHash}',
    urlPathParamNames: ['blockNumberOrHash'],
    urlSearchParamNames: ['chain'],
    getRequestUrlParams: getRequestUrlParams,
    serializeRequest: serializeRequest,
    deserializeRequest: deserializeRequest,
    deserializeResponse: deserializeResponse,
};
// Methods
function getRequestUrlParams(request, core) {
    return {
        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,
        blockNumberOrHash: request.blockNumberOrHash,
    };
}
function deserializeResponse(jsonResponse, request, core) {
    var _a;
    var data = (0, common_core_1.toCamelCase)(jsonResponse);
    var chain = EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core);
    // TODO: account for changes in api, now we have unknown types for addresses
    // OR fix the types correctly in api
    // I noticed that the docs comes with a type of "string | unknown" which automatically resolves to "unknown". I think we should fix this in the api, casting for now
    return dataTypes_1.EvmBlock.create(__assign(__assign({}, data), { chain: chain, transactions: ((_a = data.transactions) !== null && _a !== void 0 ? _a : []).map(function (transaction) {
            var _a;
            return dataTypes_1.EvmTransaction.create({
                cumulativeGasUsed: transaction.receiptCumulativeGasUsed,
                gasPrice: transaction.gasPrice,
                gasUsed: transaction.receiptGasUsed,
                index: transaction.transactionIndex,
                contractAddress: transaction.receiptContractAddress,
                receiptRoot: transaction.receiptRoot,
                receiptStatus: +transaction.receiptStatus,
                chain: chain,
                data: transaction.input,
                from: transaction.fromAddress,
                hash: transaction.hash,
                nonce: transaction.nonce,
                value: transaction.value,
                blockHash: transaction.blockHash,
                blockNumber: +transaction.blockNumber,
                blockTimestamp: new Date(transaction.blockTimestamp),
                gas: transaction.gas,
                to: transaction.toAddress,
                logs: ((_a = transaction.logs) !== null && _a !== void 0 ? _a : []).map(function (jsonLog) {
                    var log = (0, common_core_1.toCamelCase)(jsonLog);
                    return dataTypes_1.EvmTransactionLog.create({
                        chain: chain,
                        address: log.address,
                        blockHash: log.blockHash,
                        blockNumber: +log.blockNumber,
                        data: log.data,
                        topics: [log.topic0, log.topic1, log.topic2, log.topic3],
                        transactionHash: log.transactionHash,
                        blockTimestamp: log.blockTimestamp,
                        logIndex: +log.logIndex,
                        transactionIndex: +log.transactionIndex,
                    });
                }),
            }, core);
        }) }), core);
}
function serializeRequest(request, core) {
    return {
        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,
        blockNumberOrHash: request.blockNumberOrHash,
    };
}
function deserializeRequest(jsonRequest, core) {
    return {
        chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),
        blockNumberOrHash: jsonRequest.blockNumberOrHash,
    };
}
//# sourceMappingURL=getBlockOperation.js.map