"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPairAddressOperation = void 0;
var dataTypes_1 = require("../../dataTypes");
var EvmChainResolver_1 = require("../../EvmChainResolver");
/**
 * Fetch the pair data of the provided token0+token1 combination.
 * The token0 and token1 options are interchangable (ie. there is no different outcome in "token0=WETH and token1=USDT" or "token0=USDT and token1=WETH")
 */
exports.getPairAddressOperation = {
    method: 'GET',
    name: 'getPairAddress',
    id: 'getPairAddress',
    groupName: 'defi',
    urlPathPattern: '/{token0Address}/{token1Address}/pairAddress',
    urlPathParamNames: ['token0Address', 'token1Address'],
    urlSearchParamNames: ['chain', 'toBlock', 'toDate', 'exchange'],
    getRequestUrlParams: getRequestUrlParams,
    serializeRequest: serializeRequest,
    deserializeRequest: deserializeRequest,
    deserializeResponse: deserializeResponse,
};
// Methods
function getRequestUrlParams(request, core) {
    return {
        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,
        to_block: request.toBlock,
        to_date: request.toDate ? new Date(request.toDate).toISOString() : undefined,
        exchange: request.exchange,
        token0Address: dataTypes_1.EvmAddress.create(request.token0Address, core).lowercase,
        token1Address: dataTypes_1.EvmAddress.create(request.token1Address, core).lowercase,
    };
}
function createErc20Token(token, core, chain) {
    var _a, _b, _c;
    return dataTypes_1.Erc20Token.create({
        contractAddress: (token === null || token === void 0 ? void 0 : token.address) ? dataTypes_1.EvmAddress.create(token === null || token === void 0 ? void 0 : token.address, core) : '',
        decimals: (_a = token === null || token === void 0 ? void 0 : token.decimals) !== null && _a !== void 0 ? _a : 0,
        name: (_b = token === null || token === void 0 ? void 0 : token.name) !== null && _b !== void 0 ? _b : '',
        symbol: (_c = token === null || token === void 0 ? void 0 : token.symbol) !== null && _c !== void 0 ? _c : '',
        logo: token === null || token === void 0 ? void 0 : token.logo,
        thumbnail: token === null || token === void 0 ? void 0 : token.thumbnail,
        chain: EvmChainResolver_1.EvmChainResolver.resolve(chain, core),
    }, core);
}
function deserializeResponse(jsonResponse, request, core) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    return {
        //   ApiResult types generated all come as undefined which should not be the case TODO:
        token0: {
            token: createErc20Token(jsonResponse.token0, core, request.chain),
            blockNumber: (_a = jsonResponse.token0) === null || _a === void 0 ? void 0 : _a.block_number,
            validated: (_b = jsonResponse.token0) === null || _b === void 0 ? void 0 : _b.validated,
            createdAt: ((_c = jsonResponse.token0) === null || _c === void 0 ? void 0 : _c.created_at) ? new Date((_d = jsonResponse.token0) === null || _d === void 0 ? void 0 : _d.created_at) : undefined,
        },
        token1: {
            token: createErc20Token(jsonResponse.token1, core, request.chain),
            blockNumber: (_e = jsonResponse.token1) === null || _e === void 0 ? void 0 : _e.block_number,
            validated: (_f = jsonResponse.token1) === null || _f === void 0 ? void 0 : _f.validated,
            createdAt: ((_g = jsonResponse.token1) === null || _g === void 0 ? void 0 : _g.created_at) ? new Date((_h = jsonResponse.token1) === null || _h === void 0 ? void 0 : _h.created_at) : undefined,
        },
        pairAddress: jsonResponse.pairAddress ? dataTypes_1.EvmAddress.create(jsonResponse.pairAddress, core) : undefined,
    };
}
function serializeRequest(request, core) {
    return {
        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,
        toBlock: request.toBlock,
        toDate: request.toDate ? new Date(request.toDate).toISOString() : undefined,
        exchange: request.exchange,
        token0Address: dataTypes_1.EvmAddress.create(request.token0Address, core).lowercase,
        token1Address: dataTypes_1.EvmAddress.create(request.token1Address, core).lowercase,
    };
}
function deserializeRequest(jsonRequest, core) {
    return {
        chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),
        toBlock: jsonRequest.toBlock,
        toDate: jsonRequest.toDate ? new Date(jsonRequest.toDate) : undefined,
        exchange: jsonRequest.exchange,
        token0Address: dataTypes_1.EvmAddress.create(jsonRequest.token0Address, core),
        token1Address: dataTypes_1.EvmAddress.create(jsonRequest.token1Address, core),
    };
}
//# sourceMappingURL=getPairAddressOperation.js.map