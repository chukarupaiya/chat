import { Core, Camelize, Operation, DateInput, ResponseAdapter } from '@moralisweb3/common-core';
import { EvmChainish, EvmAddressish } from '../../dataTypes';
import { operations } from '../openapi';
type OperationId = 'getPairReserves';
type PathParams = operations[OperationId]['parameters']['path'];
type QueryParams = operations[OperationId]['parameters']['query'];
type RequestParams = PathParams & QueryParams;
type SuccessResponse = operations[OperationId]['responses']['200']['content']['application/json'];
export interface GetPairReservesRequest extends Camelize<Omit<RequestParams, 'chain' | 'pair_address' | 'to_date'>> {
    chain?: EvmChainish;
    pairAddress: EvmAddressish;
    toDate?: DateInput;
}
export type GetPairReservesJSONRequest = ReturnType<typeof serializeRequest>;
export type GetPairReservesJSONResponse = SuccessResponse;
export type GetPairReservesResponse = ReturnType<typeof deserializeResponse>;
export interface GetPairReservesResponseAdapter extends ResponseAdapter<GetPairReservesResponse, GetPairReservesJSONResponse> {
}
/** Get the liquidity reserves for a given pair address. Only Uniswap V2 based exchanges supported at the moment. */
export declare const getPairReservesOperation: Operation<GetPairReservesRequest, GetPairReservesJSONRequest, GetPairReservesResponse, GetPairReservesJSONResponse>;
declare function serializeRequest(request: GetPairReservesRequest, core: Core): {
    chain: "0x1" | "0x5" | "0xaa36a7" | "0x89" | "0x13881" | "0x38" | "0x61" | "0xa86a" | "0xa869" | "0xfa" | "0x19" | "0x152" | "0x2a15c308d" | "0xa4B1";
    toBlock: string | undefined;
    toDate: string | undefined;
    pairAddress: string;
};
declare function deserializeResponse(jsonResponse: GetPairReservesJSONResponse): {
    reserve0?: string | undefined;
    reserve1?: string | undefined;
};
export {};
//# sourceMappingURL=getPairReservesOperation.d.ts.map