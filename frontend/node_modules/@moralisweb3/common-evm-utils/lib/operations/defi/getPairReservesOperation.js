"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPairReservesOperation = void 0;
var dataTypes_1 = require("../../dataTypes");
var EvmChainResolver_1 = require("../../EvmChainResolver");
/** Get the liquidity reserves for a given pair address. Only Uniswap V2 based exchanges supported at the moment. */
exports.getPairReservesOperation = {
    method: 'GET',
    name: 'getPairReserves',
    id: 'getPairReserves',
    groupName: 'defi',
    urlPathPattern: '/{pairAddress}/reserves',
    urlPathParamNames: ['pairAddress'],
    urlSearchParamNames: ['chain', 'toBlock', 'toDate'],
    getRequestUrlParams: getRequestUrlParams,
    serializeRequest: serializeRequest,
    deserializeRequest: deserializeRequest,
    deserializeResponse: deserializeResponse,
};
// Methods
function getRequestUrlParams(request, core) {
    return {
        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,
        pairAddress: dataTypes_1.EvmAddress.create(request.pairAddress, core).lowercase,
        to_block: request.toBlock,
        to_date: request.toDate ? new Date(request.toDate).toISOString() : undefined,
    };
}
function serializeRequest(request, core) {
    return {
        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,
        toBlock: request.toBlock,
        toDate: request.toDate ? new Date(request.toDate).toISOString() : undefined,
        pairAddress: dataTypes_1.EvmAddress.create(request.pairAddress, core).lowercase,
    };
}
function deserializeRequest(jsonRequest, core) {
    return {
        chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),
        toBlock: jsonRequest.toBlock,
        toDate: jsonRequest.toDate ? new Date(jsonRequest.toDate) : undefined,
        pairAddress: dataTypes_1.EvmAddress.create(jsonRequest.pairAddress, core),
    };
}
function deserializeResponse(jsonResponse) {
    return jsonResponse;
}
//# sourceMappingURL=getPairReservesOperation.js.map