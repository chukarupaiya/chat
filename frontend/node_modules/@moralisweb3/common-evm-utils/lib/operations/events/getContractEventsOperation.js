"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getContractEventsOperation = void 0;
var common_core_1 = require("@moralisweb3/common-core");
var dataTypes_1 = require("../../dataTypes");
var EvmChainResolver_1 = require("../../EvmChainResolver");
/** Get events for a contract ordered by block number in descending order. */
exports.getContractEventsOperation = {
    method: 'POST',
    name: 'getContractEvents',
    id: 'getContractEvents',
    groupName: 'events',
    urlPathPattern: '/{address}/events',
    urlPathParamNames: ['address'],
    urlSearchParamNames: [
        'chain',
        'fromBlock',
        'toBlock',
        'fromDate',
        'toDate',
        'topic',
        'offset',
        'limit',
        'disableTotal',
    ],
    bodyParamNames: ['abi'],
    bodyType: 'raw',
    firstPageIndex: 0,
    getRequestUrlParams: getRequestUrlParams,
    getRequestBody: getRequestBody,
    serializeRequest: serializeRequest,
    deserializeRequest: deserializeRequest,
    deserializeResponse: deserializeResponse,
};
// Methods
function getRequestUrlParams(request, core) {
    return {
        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,
        from_block: (0, common_core_1.maybe)(request.fromBlock, String),
        to_block: (0, common_core_1.maybe)(request.toBlock, String),
        from_date: request.fromDate ? new Date(request.fromDate).toISOString() : undefined,
        to_date: request.toDate ? new Date(request.toDate).toISOString() : undefined,
        topic: request.topic,
        offset: (0, common_core_1.maybe)(request.offset, String),
        limit: (0, common_core_1.maybe)(request.limit, String),
        address: dataTypes_1.EvmAddress.create(request.address, core).lowercase,
        disable_total: request.disableTotal,
    };
}
function getRequestBody(request) {
    return request.abi;
}
function deserializeResponse(jsonResponse, request, core) {
    var _a, _b;
    return (_b = ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : [])) === null || _b === void 0 ? void 0 : _b.map(function (event) {
        return dataTypes_1.EvmEvent.create({
            chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core),
            address: request.address,
            blockHash: event.block_hash,
            blockNumber: event.block_number,
            blockTimestamp: event.block_timestamp,
            transactionHash: event.transaction_hash,
            data: {
                to: event.data.to,
                from: event.data.from,
                value: event.data.value,
            },
        }, core);
    });
}
function serializeRequest(request, core) {
    return {
        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,
        fromBlock: request.fromBlock,
        toBlock: request.toBlock,
        fromDate: request.fromDate ? new Date(request.fromDate).toISOString() : undefined,
        toDate: request.toDate ? new Date(request.toDate).toISOString() : undefined,
        topic: request.topic,
        offset: request.offset,
        limit: request.limit,
        address: dataTypes_1.EvmAddress.create(request.address, core).lowercase,
        abi: request.abi,
        disableTotal: request.disableTotal,
    };
}
function deserializeRequest(jsonRequest, core) {
    return {
        chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),
        fromBlock: jsonRequest.fromBlock,
        toBlock: jsonRequest.toBlock,
        fromDate: jsonRequest.fromDate ? new Date(jsonRequest.fromDate) : undefined,
        toDate: jsonRequest.toDate ? new Date(jsonRequest.toDate) : undefined,
        topic: jsonRequest.topic,
        offset: jsonRequest.offset,
        limit: jsonRequest.limit,
        address: dataTypes_1.EvmAddress.create(jsonRequest.address, core),
        abi: jsonRequest.abi,
        disableTotal: jsonRequest.disableTotal,
    };
}
//# sourceMappingURL=getContractEventsOperation.js.map