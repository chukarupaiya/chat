"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getContractNFTsOperation = void 0;
var common_core_1 = require("@moralisweb3/common-core");
var dataTypes_1 = require("../../dataTypes");
var EvmChainResolver_1 = require("../../EvmChainResolver");
/**
 * Get NFTs for a given contract address, including metadata for all NFTs (where available).
 * * Results are limited to 100 per page by default
 * * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection.
 */
exports.getContractNFTsOperation = {
    method: 'GET',
    name: 'getContractNFTs',
    id: 'getContractNFTs',
    groupName: 'nft',
    urlPathPattern: '/nft/{address}',
    urlPathParamNames: ['address'],
    urlSearchParamNames: [
        'chain',
        'format',
        'limit',
        'totalRanges',
        'range',
        'cursor',
        'normalizeMetadata',
        'disableTotal',
    ],
    firstPageIndex: 0,
    getRequestUrlParams: getRequestUrlParams,
    serializeRequest: serializeRequest,
    deserializeRequest: deserializeRequest,
    deserializeResponse: deserializeResponse,
};
// Methods
function getRequestUrlParams(request, core) {
    return {
        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,
        address: dataTypes_1.EvmAddress.create(request.address, core).lowercase,
        format: request.format,
        limit: (0, common_core_1.maybe)(request.limit, String),
        totalRanges: (0, common_core_1.maybe)(request.totalRanges, String),
        range: (0, common_core_1.maybe)(request.range, String),
        cursor: request.cursor,
        normalizeMetadata: request.normalizeMetadata,
        disable_total: request.disableTotal,
    };
}
function deserializeResponse(jsonResponse, request, core) {
    var _a;
    return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (nft) {
        return dataTypes_1.EvmNft.create(__assign(__assign({}, (0, common_core_1.toCamelCase)(nft)), { chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core), ownerOf: nft.owner_of ? dataTypes_1.EvmAddress.create(nft.owner_of, core) : undefined, lastMetadataSync: nft.last_metadata_sync ? new Date(nft.last_metadata_sync) : undefined, lastTokenUriSync: nft.last_token_uri_sync ? new Date(nft.last_token_uri_sync) : undefined }), core);
    });
}
function serializeRequest(request, core) {
    return {
        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,
        format: request.format,
        limit: request.limit,
        totalRanges: request.totalRanges,
        range: request.range,
        cursor: request.cursor,
        address: dataTypes_1.EvmAddress.create(request.address, core).checksum,
        normalizeMetadata: request.normalizeMetadata,
        disableTotal: request.disableTotal,
    };
}
function deserializeRequest(jsonRequest, core) {
    return {
        chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),
        format: jsonRequest.format,
        limit: jsonRequest.limit,
        totalRanges: jsonRequest.totalRanges,
        range: jsonRequest.range,
        cursor: jsonRequest.cursor,
        address: dataTypes_1.EvmAddress.create(jsonRequest.address, core),
        normalizeMetadata: jsonRequest.normalizeMetadata,
        disableTotal: jsonRequest.disableTotal,
    };
}
//# sourceMappingURL=getContractNFTsOperation.js.map