import { Core, Camelize, Operation, ResponseAdapter } from '@moralisweb3/common-core';
import { EvmChainish, EvmNft, EvmAddressish } from '../../dataTypes';
import { operations } from '../openapi';
type GetElementType<Element extends unknown[]> = Element extends (infer Infered)[] ? Infered : never;
type OperationId = 'getMultipleNFTs';
type QueryParams = operations[OperationId]['parameters']['query'];
type BodyParams = operations[OperationId]['requestBody']['content']['application/json'];
type RequestParams = QueryParams & BodyParams;
type SuccessElement = GetElementType<operations[OperationId]['responses']['200']['content']['application/json']>;
type SuccessResponse = (SuccessElement | null)[];
export interface GetMultipleNFTsRequest extends Camelize<Omit<RequestParams, 'chain' | 'tokens'>> {
    chain?: EvmChainish;
    tokens: {
        tokenAddress: EvmAddressish;
        tokenId: string;
    }[];
}
export type GetMultipleNFTsJSONRequest = ReturnType<typeof serializeRequest>;
export type GetMultipleNFTsJSONResponse = SuccessResponse;
export type GetMultipleNFTsResponse = ReturnType<typeof deserializeResponse>;
export interface GetMultipleNFTsResponseAdapter extends ResponseAdapter<GetMultipleNFTsResponse, GetMultipleNFTsJSONResponse> {
}
/**
 * Get NFTs for a given contract address, including metadata for all NFTs (where available).
 * * Results are limited to 100 per page by default
 * * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection.
 */
export declare const getMultipleNFTsOperation: Operation<GetMultipleNFTsRequest, GetMultipleNFTsJSONRequest, GetMultipleNFTsResponse, GetMultipleNFTsJSONResponse>;
declare function deserializeResponse(jsonResponse: GetMultipleNFTsJSONResponse, request: GetMultipleNFTsRequest, core: Core): (EvmNft | null)[];
declare function serializeRequest(request: GetMultipleNFTsRequest, core: Core): {
    chain: "0x1" | "0x5" | "0xaa36a7" | "0x89" | "0x13881" | "0x38" | "0x61" | "0xa86a" | "0xa869" | "0xfa" | "0x19" | "0x152" | "0x2a15c308d" | "0xa4B1";
    normalizeMetadata: boolean | undefined;
    tokens: {
        tokenAddress: string;
        tokenId: string;
    }[];
};
export {};
//# sourceMappingURL=getMultipleNFTsOperation.d.ts.map