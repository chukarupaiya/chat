"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMultipleNFTsOperation = void 0;
var common_core_1 = require("@moralisweb3/common-core");
var dataTypes_1 = require("../../dataTypes");
var EvmChainResolver_1 = require("../../EvmChainResolver");
/**
 * Get NFTs for a given contract address, including metadata for all NFTs (where available).
 * * Results are limited to 100 per page by default
 * * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection.
 */
exports.getMultipleNFTsOperation = {
    method: 'POST',
    name: 'getMultipleNFTs',
    id: 'getMultipleNFTs',
    groupName: 'nft',
    urlPathPattern: '/nft/getMultipleNFTs',
    urlSearchParamNames: ['chain'],
    bodyType: 'properties',
    bodyParamNames: ['tokens', 'normalizeMetadata'],
    getRequestUrlParams: getRequestUrlParams,
    getRequestBody: getRequestBody,
    serializeRequest: serializeRequest,
    deserializeRequest: deserializeRequest,
    deserializeResponse: deserializeResponse,
};
// Methods
function getRequestUrlParams(request, core) {
    return {
        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,
    };
}
function getRequestBody(request, core) {
    return {
        tokens: request.tokens.map(function (token) { return ({
            token_address: dataTypes_1.EvmAddress.create(token.tokenAddress, core).lowercase,
            token_id: token.tokenId,
        }); }),
        normalizeMetadata: request.normalizeMetadata,
    };
}
function deserializeResponse(jsonResponse, request, core) {
    return (jsonResponse !== null && jsonResponse !== void 0 ? jsonResponse : []).map(function (nft) {
        if (nft === null) {
            return null;
        }
        return dataTypes_1.EvmNft.create(__assign(__assign({}, (0, common_core_1.toCamelCase)(nft)), { chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core), amount: nft.amount ? parseInt(nft.amount, 10) : undefined, ownerOf: dataTypes_1.EvmAddress.create(nft.owner_of, core), lastMetadataSync: (0, common_core_1.dateInputToDate)(nft.last_metadata_sync), lastTokenUriSync: (0, common_core_1.dateInputToDate)(nft.last_token_uri_sync) }), core);
    });
}
function serializeRequest(request, core) {
    return {
        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,
        normalizeMetadata: request.normalizeMetadata,
        tokens: request.tokens.map(function (token) { return ({
            tokenAddress: dataTypes_1.EvmAddress.create(token.tokenAddress, core).lowercase,
            tokenId: token.tokenId,
        }); }),
    };
}
function deserializeRequest(jsonRequest, core) {
    return {
        chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),
        normalizeMetadata: jsonRequest.normalizeMetadata,
        tokens: jsonRequest.tokens.map(function (token) { return ({
            tokenAddress: dataTypes_1.EvmAddress.create(token.tokenAddress, core),
            tokenId: token.tokenId,
        }); }),
    };
}
//# sourceMappingURL=getMultipleNFTsOperation.js.map