import { Core, Camelize, Operation, ResponseAdapter } from '@moralisweb3/common-core';
import { EvmChainish, EvmAddressish, EvmNftMetadata } from '../../dataTypes';
import { operations } from '../openapi';
type OperationId = 'getNFTContractMetadata';
type PathParams = operations[OperationId]['parameters']['path'];
type QueryParams = operations[OperationId]['parameters']['query'];
type RequestParams = PathParams & QueryParams;
type SuccessResponse = operations[OperationId]['responses']['200']['content']['application/json'];
export interface GetNFTContractMetadataRequest extends Camelize<Omit<RequestParams, 'chain' | 'address'>> {
    chain?: EvmChainish;
    address: EvmAddressish;
}
export type GetNFTContractMetadataJSONRequest = ReturnType<typeof serializeRequest>;
export type GetNFTContractMetadataJSONResponse = SuccessResponse;
export type GetNFTContractMetadataResponse = ReturnType<typeof deserializeResponse>;
export interface GetNFTContractMetadataResponseAdapter extends ResponseAdapter<GetNFTContractMetadataResponse, GetNFTContractMetadataJSONResponse> {
}
/**
 * Get the collection / contract level metadata for a given contract (name, symbol, base token uri).
 * * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection
 */
export declare const getNFTContractMetadataOperation: Operation<GetNFTContractMetadataRequest, GetNFTContractMetadataJSONRequest, GetNFTContractMetadataResponse, GetNFTContractMetadataJSONResponse>;
declare function deserializeResponse(jsonResponse: GetNFTContractMetadataJSONResponse, request: GetNFTContractMetadataRequest, core: Core): EvmNftMetadata;
declare function serializeRequest(request: GetNFTContractMetadataRequest, core: Core): {
    chain: "0x1" | "0x5" | "0xaa36a7" | "0x89" | "0x13881" | "0x38" | "0x61" | "0xa86a" | "0xa869" | "0xfa" | "0x19" | "0x152" | "0x2a15c308d" | "0xa4B1";
    address: string;
};
export {};
//# sourceMappingURL=getNFTContractMetadataOperation.d.ts.map