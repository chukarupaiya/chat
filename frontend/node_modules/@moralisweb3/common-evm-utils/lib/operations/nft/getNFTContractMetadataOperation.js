"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNFTContractMetadataOperation = void 0;
var common_core_1 = require("@moralisweb3/common-core");
var dataTypes_1 = require("../../dataTypes");
var EvmChainResolver_1 = require("../../EvmChainResolver");
/**
 * Get the collection / contract level metadata for a given contract (name, symbol, base token uri).
 * * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection
 */
exports.getNFTContractMetadataOperation = {
    method: 'GET',
    name: 'getNFTContractMetadata',
    id: 'getNFTContractMetadata',
    groupName: 'nft',
    isNullable: true,
    urlPathPattern: '/nft/{address}/metadata',
    urlPathParamNames: ['address'],
    urlSearchParamNames: ['chain'],
    getRequestUrlParams: getRequestUrlParams,
    serializeRequest: serializeRequest,
    deserializeRequest: deserializeRequest,
    deserializeResponse: deserializeResponse,
};
// Methods
function getRequestUrlParams(request, core) {
    return {
        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,
        address: dataTypes_1.EvmAddress.create(request.address, core).lowercase,
    };
}
function deserializeResponse(jsonResponse, request, core) {
    return dataTypes_1.EvmNftMetadata.create(__assign(__assign({}, (0, common_core_1.toCamelCase)(jsonResponse)), { chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core), tokenAddress: dataTypes_1.EvmAddress.create(jsonResponse.token_address, core), syncedAt: jsonResponse.synced_at ? new Date(jsonResponse.synced_at) : null, contractType: (0, common_core_1.maybe)(jsonResponse.contract_type) }));
}
function serializeRequest(request, core) {
    return {
        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,
        address: dataTypes_1.EvmAddress.create(request.address, core).checksum,
    };
}
function deserializeRequest(jsonRequest, core) {
    return {
        chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),
        address: dataTypes_1.EvmAddress.create(jsonRequest.address, core),
    };
}
//# sourceMappingURL=getNFTContractMetadataOperation.js.map