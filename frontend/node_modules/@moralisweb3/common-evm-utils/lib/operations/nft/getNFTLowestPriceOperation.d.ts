import { Core, Camelize, Operation, ResponseAdapter } from '@moralisweb3/common-core';
import { EvmChainish, EvmAddressish, EvmNftTrade } from '../../dataTypes';
import { operations } from '../openapi';
type OperationId = 'getNFTLowestPrice';
type PathParams = operations[OperationId]['parameters']['path'];
type QueryParams = operations[OperationId]['parameters']['query'];
type RequestParams = PathParams & QueryParams;
type SuccessResponse = operations[OperationId]['responses']['200']['content']['application/json'];
export interface GetNFTLowestPriceRequest extends Camelize<Omit<RequestParams, 'chain' | 'address'>> {
    chain?: EvmChainish;
    address: EvmAddressish;
}
export type GetNFTLowestPriceJSONRequest = ReturnType<typeof serializeRequest>;
export type GetNFTLowestPriceJSONResponse = SuccessResponse;
export type GetNFTLowestPriceResponse = ReturnType<typeof deserializeResponse>;
export interface GetNFTLowestPriceResponseAdapter extends ResponseAdapter<GetNFTLowestPriceResponse, GetNFTLowestPriceJSONResponse> {
}
/** Get the lowest executed price for an NFT contract for the last x days (only trades paid in ETH). */
export declare const getNFTLowestPriceOperation: Operation<GetNFTLowestPriceRequest, GetNFTLowestPriceJSONRequest, GetNFTLowestPriceResponse, GetNFTLowestPriceJSONResponse>;
declare function deserializeResponse(jsonResponse: GetNFTLowestPriceJSONResponse, request: GetNFTLowestPriceRequest, core: Core): EvmNftTrade;
declare function serializeRequest(request: GetNFTLowestPriceRequest, core: Core): {
    chain: "0x1" | "0x5" | "0xaa36a7" | "0x89" | "0x13881" | "0x38" | "0x61" | "0xa86a" | "0xa869" | "0xfa" | "0x19" | "0x152" | "0x2a15c308d" | "0xa4B1";
    days: number | undefined;
    marketplace: "opensea" | undefined;
    address: string;
};
export {};
//# sourceMappingURL=getNFTLowestPriceOperation.d.ts.map