"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNFTLowestPriceOperation = void 0;
var common_core_1 = require("@moralisweb3/common-core");
var dataTypes_1 = require("../../dataTypes");
var EvmChainResolver_1 = require("../../EvmChainResolver");
/** Get the lowest executed price for an NFT contract for the last x days (only trades paid in ETH). */
exports.getNFTLowestPriceOperation = {
    method: 'GET',
    name: 'getNFTLowestPrice',
    id: 'getNFTLowestPrice',
    groupName: 'nft',
    isNullable: true,
    urlPathPattern: '/nft/{address}/lowestprice',
    urlPathParamNames: ['address'],
    urlSearchParamNames: ['chain', 'days', 'marketplace'],
    getRequestUrlParams: getRequestUrlParams,
    serializeRequest: serializeRequest,
    deserializeRequest: deserializeRequest,
    deserializeResponse: deserializeResponse,
};
// Methods
function getRequestUrlParams(request, core) {
    return {
        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,
        address: dataTypes_1.EvmAddress.create(request.address, core).lowercase,
        days: (0, common_core_1.maybe)(request.days, String),
        marketplace: request.marketplace,
    };
}
function deserializeResponse(jsonResponse, request, core) {
    return dataTypes_1.EvmNftTrade.create(__assign(__assign({}, (0, common_core_1.toCamelCase)(jsonResponse)), { chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core), sellerAddress: dataTypes_1.EvmAddress.create(jsonResponse.seller_address, core), buyerAddress: dataTypes_1.EvmAddress.create(jsonResponse.buyer_address, core), marketplaceAddress: dataTypes_1.EvmAddress.create(jsonResponse.marketplace_address, core), tokenAddress: dataTypes_1.EvmAddress.create(jsonResponse.token_address, core), price: dataTypes_1.EvmNative.create(jsonResponse.price, 'wei'), blockTimestamp: new Date(jsonResponse.block_timestamp), tokenIds: jsonResponse.token_ids }));
}
function serializeRequest(request, core) {
    return {
        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,
        days: request.days,
        marketplace: request.marketplace,
        address: dataTypes_1.EvmAddress.create(request.address, core).checksum,
    };
}
function deserializeRequest(jsonRequest, core) {
    return {
        chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),
        days: jsonRequest.days,
        marketplace: jsonRequest.marketplace,
        address: dataTypes_1.EvmAddress.create(jsonRequest.address, core),
    };
}
//# sourceMappingURL=getNFTLowestPriceOperation.js.map