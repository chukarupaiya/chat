import { Core, Camelize, Operation, ResponseAdapter } from '@moralisweb3/common-core';
import { EvmChainish, EvmAddressish, EvmNft } from '../../dataTypes';
import { operations } from '../openapi';
type OperationId = 'getNFTMetadata';
type PathParams = operations[OperationId]['parameters']['path'];
type QueryParams = operations[OperationId]['parameters']['query'];
type RequestParams = PathParams & QueryParams;
type SuccessResponse = operations[OperationId]['responses']['200']['content']['application/json'];
export interface GetNFTMetadataRequest extends Camelize<Omit<RequestParams, 'chain' | 'address'>> {
    chain?: EvmChainish;
    address: EvmAddressish;
}
export type GetNFTMetadataJSONRequest = ReturnType<typeof serializeRequest>;
export type GetNFTMetadataJSONResponse = SuccessResponse;
export type GetNFTMetadataResponse = ReturnType<typeof deserializeResponse>;
export interface GetNFTMetadataResponseAdapter extends ResponseAdapter<GetNFTMetadataResponse, GetNFTMetadataJSONResponse> {
}
/**
 * Get NFT data, including metadata (where available), for the given NFT token ID and contract address.
 * * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection
 */
export declare const getNFTMetadataOperation: Operation<GetNFTMetadataRequest, GetNFTMetadataJSONRequest, GetNFTMetadataResponse, GetNFTMetadataJSONResponse>;
declare function deserializeResponse(jsonResponse: GetNFTMetadataJSONResponse, request: GetNFTMetadataRequest, core: Core): EvmNft;
declare function serializeRequest(request: GetNFTMetadataRequest, core: Core): {
    chain: "0x1" | "0x5" | "0xaa36a7" | "0x89" | "0x13881" | "0x38" | "0x61" | "0xa86a" | "0xa869" | "0xfa" | "0x19" | "0x152" | "0x2a15c308d" | "0xa4B1";
    format: "hex" | "decimal" | undefined;
    address: string;
    tokenId: string;
    normalizeMetadata: boolean | undefined;
};
export {};
//# sourceMappingURL=getNFTMetadataOperation.d.ts.map