import { Core, Camelize, PaginatedOperation, PaginatedResponseAdapter } from '@moralisweb3/common-core';
import { EvmChainish, EvmAddressish, EvmNft } from '../../dataTypes';
import { operations } from '../openapi';
type OperationId = 'getNFTOwners';
type PathParams = operations[OperationId]['parameters']['path'];
type QueryParams = operations[OperationId]['parameters']['query'];
type RequestParams = PathParams & QueryParams;
type SuccessResponse = operations[OperationId]['responses']['200']['content']['application/json'];
export interface GetNFTOwnersRequest extends Camelize<Omit<RequestParams, 'chain' | 'address'>> {
    chain?: EvmChainish;
    address: EvmAddressish;
}
export type GetNFTOwnersJSONRequest = ReturnType<typeof serializeRequest>;
export type GetNFTOwnersJSONResponse = SuccessResponse;
export type GetNFTOwnersResponse = ReturnType<typeof deserializeResponse>;
export interface GetNFTOwnersResponseAdapter extends PaginatedResponseAdapter<GetNFTOwnersResponse, GetNFTOwnersJSONResponse['result']> {
}
/**
 * Get owners of NFTs for a given contract.
 * * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection.
 */
export declare const getNFTOwnersOperation: PaginatedOperation<GetNFTOwnersRequest, GetNFTOwnersJSONRequest, GetNFTOwnersResponse, GetNFTOwnersJSONResponse['result']>;
declare function deserializeResponse(jsonResponse: GetNFTOwnersJSONResponse, request: GetNFTOwnersRequest, core: Core): EvmNft[];
declare function serializeRequest(request: GetNFTOwnersRequest, core: Core): {
    chain: "0x1" | "0x5" | "0xaa36a7" | "0x89" | "0x13881" | "0x38" | "0x61" | "0xa86a" | "0xa869" | "0xfa" | "0x19" | "0x152" | "0x2a15c308d" | "0xa4B1";
    format: "hex" | "decimal" | undefined;
    limit: number | undefined;
    cursor: string | undefined;
    address: string;
    normalizeMetadata: boolean | undefined;
    disableTotal: boolean | undefined;
};
export {};
//# sourceMappingURL=getNFTOwnersOperation.d.ts.map