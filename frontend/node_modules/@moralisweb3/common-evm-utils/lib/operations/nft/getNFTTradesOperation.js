"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNFTTradesOperation = void 0;
var common_core_1 = require("@moralisweb3/common-core");
var dataTypes_1 = require("../../dataTypes");
var EvmChainResolver_1 = require("../../EvmChainResolver");
/** Get trades of NFTs for a given contract and marketplace. */
exports.getNFTTradesOperation = {
    method: 'GET',
    name: 'getNFTTrades',
    id: 'getNFTTrades',
    groupName: 'nft',
    urlPathPattern: '/nft/{address}/trades',
    urlPathParamNames: ['address'],
    urlSearchParamNames: [
        'chain',
        'fromBlock',
        'toBlock',
        'fromDate',
        'toDate',
        'marketplace',
        'cursor',
        'limit',
        'disableTotal',
    ],
    firstPageIndex: 0,
    getRequestUrlParams: getRequestUrlParams,
    serializeRequest: serializeRequest,
    deserializeRequest: deserializeRequest,
    deserializeResponse: deserializeResponse,
};
// Methods
function getRequestUrlParams(request, core) {
    return {
        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,
        address: dataTypes_1.EvmAddress.create(request.address, core).lowercase,
        from_block: (0, common_core_1.maybe)(request.fromBlock, String),
        to_block: (0, common_core_1.maybe)(request.toBlock, String),
        from_date: request.fromDate ? new Date(request.fromDate).toISOString() : undefined,
        to_date: request.toDate ? new Date(request.toDate).toISOString() : undefined,
        marketplace: request.marketplace,
        cursor: request.cursor,
        limit: (0, common_core_1.maybe)(request.limit, String),
        disable_total: request.disableTotal,
    };
}
function deserializeResponse(jsonResponse, request, core) {
    var _a;
    return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (trade) {
        return dataTypes_1.EvmNftTrade.create(__assign(__assign({}, (0, common_core_1.toCamelCase)(trade)), { chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core), sellerAddress: dataTypes_1.EvmAddress.create(trade.seller_address, core), buyerAddress: dataTypes_1.EvmAddress.create(trade.buyer_address, core), marketplaceAddress: dataTypes_1.EvmAddress.create(trade.marketplace_address, core), tokenAddress: dataTypes_1.EvmAddress.create(trade.token_address, core), price: dataTypes_1.EvmNative.create(trade.price, 'wei'), blockTimestamp: new Date(trade.block_timestamp), tokenIds: trade.token_ids }));
    });
}
function serializeRequest(request, core) {
    return {
        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,
        fromBlock: request.fromBlock,
        toBlock: request.toBlock,
        fromDate: request.fromDate,
        toDate: request.toDate,
        marketplace: request.marketplace,
        cursor: request.cursor,
        limit: request.limit,
        address: dataTypes_1.EvmAddress.create(request.address, core).checksum,
        disableTotal: request.disableTotal,
    };
}
function deserializeRequest(jsonRequest, core) {
    return {
        chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),
        fromBlock: jsonRequest.fromBlock,
        toBlock: jsonRequest.toBlock,
        fromDate: jsonRequest.fromDate,
        toDate: jsonRequest.toDate,
        marketplace: jsonRequest.marketplace,
        cursor: jsonRequest.cursor,
        limit: jsonRequest.limit,
        address: dataTypes_1.EvmAddress.create(jsonRequest.address, core),
        disableTotal: jsonRequest.disableTotal,
    };
}
//# sourceMappingURL=getNFTTradesOperation.js.map