import { Core, Camelize, PaginatedOperation, PaginatedResponseAdapter } from '@moralisweb3/common-core';
import { EvmChainish, EvmNftTransfer } from '../../dataTypes';
import { operations } from '../openapi';
type OperationId = 'getNFTTransfersByBlock';
type PathParams = operations[OperationId]['parameters']['path'];
type QueryParams = operations[OperationId]['parameters']['query'];
type RequestParams = PathParams & QueryParams;
type SuccessResponse = operations[OperationId]['responses']['200']['content']['application/json'];
export interface GetNFTTransfersByBlockRequest extends Camelize<Omit<RequestParams, 'chain'>> {
    chain?: EvmChainish;
}
export type GetNFTTransfersByBlockJSONRequest = ReturnType<typeof serializeRequest>;
export type GetNFTTransfersByBlockJSONResponse = SuccessResponse;
export type GetNFTTransfersByBlockResponse = ReturnType<typeof deserializeResponse>;
export interface GetNFTTransfersByBlockResponseAdapter extends PaginatedResponseAdapter<GetNFTTransfersByBlockResponse, GetNFTTransfersByBlockJSONResponse['result']> {
}
/** Get transfers of NFTs given a block number or block hash. */
export declare const getNFTTransfersByBlockOperation: PaginatedOperation<GetNFTTransfersByBlockRequest, GetNFTTransfersByBlockJSONRequest, GetNFTTransfersByBlockResponse, GetNFTTransfersByBlockJSONResponse['result']>;
declare function deserializeResponse(jsonResponse: GetNFTTransfersByBlockJSONResponse, request: GetNFTTransfersByBlockRequest, core: Core): EvmNftTransfer[];
declare function serializeRequest(request: GetNFTTransfersByBlockRequest, core: Core): {
    chain: "0x1" | "0x5" | "0xaa36a7" | "0x89" | "0x13881" | "0x38" | "0x61" | "0xa86a" | "0xa869" | "0xfa" | "0x19" | "0x152" | "0x2a15c308d" | "0xa4B1";
    limit: number | undefined;
    cursor: string | undefined;
    blockNumberOrHash: string;
    disableTotal: boolean | undefined;
};
export {};
//# sourceMappingURL=getNFTTransfersByBlockOperation.d.ts.map