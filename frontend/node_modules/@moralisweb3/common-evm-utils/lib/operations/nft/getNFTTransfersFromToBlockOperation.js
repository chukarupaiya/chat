"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNFTTransfersFromToBlockOperation = void 0;
var common_core_1 = require("@moralisweb3/common-core");
var dataTypes_1 = require("../../dataTypes");
var EvmChainResolver_1 = require("../../EvmChainResolver");
/** Get transfers of NFTs from a block number to a block number. */
exports.getNFTTransfersFromToBlockOperation = {
    method: 'GET',
    name: 'getNFTTransfersFromToBlock',
    id: 'getNFTTransfersFromToBlock',
    groupName: 'nft',
    urlPathPattern: '/nft/transfers',
    urlSearchParamNames: [
        'chain',
        'fromBlock',
        'toBlock',
        'fromDate',
        'toDate',
        'format',
        'limit',
        'cursor',
        'disableTotal',
    ],
    firstPageIndex: 0,
    getRequestUrlParams: getRequestUrlParams,
    serializeRequest: serializeRequest,
    deserializeRequest: deserializeRequest,
    deserializeResponse: deserializeResponse,
};
// Methods
function getRequestUrlParams(request, core) {
    return {
        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,
        from_block: (0, common_core_1.maybe)(request.fromBlock, String),
        to_block: (0, common_core_1.maybe)(request.toBlock, String),
        from_date: request.fromDate ? new Date(request.fromDate).toISOString() : undefined,
        to_date: request.toDate ? new Date(request.toDate).toISOString() : undefined,
        format: request.format,
        limit: (0, common_core_1.maybe)(request.limit, String),
        cursor: request.cursor,
        disable_total: request.disableTotal,
    };
}
function deserializeResponse(jsonResponse, request, core) {
    var _a;
    return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (transfer) {
        return dataTypes_1.EvmNftTransfer.create(__assign(__assign({}, (0, common_core_1.toCamelCase)(transfer)), { chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core), tokenAddress: dataTypes_1.EvmAddress.create(transfer.to_address, core), toAddress: dataTypes_1.EvmAddress.create(transfer.to_address, core), operator: transfer.operator ? dataTypes_1.EvmAddress.create(transfer.operator, core) : null, fromAddress: transfer.from_address ? dataTypes_1.EvmAddress.create(transfer.from_address, core) : null, value: transfer.value ? dataTypes_1.EvmNative.create(transfer.value) : null, blockTimestamp: new Date(transfer.block_timestamp) }));
    });
}
function serializeRequest(request, core) {
    return {
        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,
        fromBlock: request.fromBlock,
        toBlock: request.toBlock,
        fromDate: request.fromDate,
        toDate: request.toDate,
        format: request.format,
        limit: request.limit,
        cursor: request.cursor,
        disableTotal: request.disableTotal,
    };
}
function deserializeRequest(jsonRequest, core) {
    return {
        chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),
        fromBlock: jsonRequest.fromBlock,
        toBlock: jsonRequest.toBlock,
        fromDate: jsonRequest.fromDate,
        toDate: jsonRequest.toDate,
        format: jsonRequest.format,
        limit: jsonRequest.limit,
        cursor: jsonRequest.cursor,
        disableTotal: jsonRequest.disableTotal,
    };
}
//# sourceMappingURL=getNFTTransfersFromToBlockOperation.js.map