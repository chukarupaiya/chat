"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getWalletNFTCollectionsOperation = void 0;
var common_core_1 = require("@moralisweb3/common-core");
var dataTypes_1 = require("../../dataTypes");
var EvmChainResolver_1 = require("../../EvmChainResolver");
/** Get NFT collections owned by a given wallet address. */
exports.getWalletNFTCollectionsOperation = {
    method: 'GET',
    name: 'getWalletNFTCollections',
    id: 'getWalletNFTCollections',
    groupName: 'nft',
    urlPathPattern: '/{address}/nft/collections',
    urlPathParamNames: ['address'],
    urlSearchParamNames: ['chain', 'limit', 'cursor', 'disableTotal'],
    firstPageIndex: 1,
    getRequestUrlParams: getRequestUrlParams,
    serializeRequest: serializeRequest,
    deserializeRequest: deserializeRequest,
    deserializeResponse: deserializeResponse,
};
// Methods
function getRequestUrlParams(request, core) {
    return {
        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,
        address: dataTypes_1.EvmAddress.create(request.address, core).lowercase,
        limit: (0, common_core_1.maybe)(request.limit, String),
        cursor: request.cursor,
        disable_total: request.disableTotal,
    };
}
function deserializeResponse(jsonResponse, request, core) {
    var _a;
    return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (collection) {
        return dataTypes_1.EvmNftCollection.create(__assign(__assign({}, (0, common_core_1.toCamelCase)(collection)), { chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core), tokenAddress: dataTypes_1.EvmAddress.create(collection.token_address, core) }), core);
    });
}
function serializeRequest(request, core) {
    return {
        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,
        limit: request.limit,
        cursor: request.cursor,
        address: dataTypes_1.EvmAddress.create(request.address, core).checksum,
        disableTotal: request.disableTotal,
    };
}
function deserializeRequest(jsonRequest, core) {
    return {
        chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),
        limit: jsonRequest.limit,
        cursor: jsonRequest.cursor,
        address: dataTypes_1.EvmAddress.create(jsonRequest.address, core),
        disableTotal: jsonRequest.disableTotal,
    };
}
//# sourceMappingURL=getWalletNFTCollectionsOperation.js.map