import { Core, Camelize, PaginatedOperation, PaginatedResponseAdapter } from '@moralisweb3/common-core';
import { EvmChainish, EvmAddressish, EvmNft } from '../../dataTypes';
import { operations } from '../openapi';
type OperationId = 'getWalletNFTs';
type PathParams = operations[OperationId]['parameters']['path'];
type QueryParams = operations[OperationId]['parameters']['query'];
type RequestParams = PathParams & QueryParams;
type SuccessResponse = operations[OperationId]['responses']['200']['content']['application/json'];
export interface GetWalletNFTsRequest extends Camelize<Omit<RequestParams, 'chain' | 'token_addresses' | 'address'>> {
    chain?: EvmChainish;
    tokenAddresses?: EvmAddressish[];
    address: EvmAddressish;
}
export type GetWalletNFTsJSONRequest = ReturnType<typeof serializeRequest>;
export type GetWalletNFTsJSONResponse = SuccessResponse;
export type GetWalletNFTsResponse = ReturnType<typeof deserializeResponse>;
export interface GetWalletNFTsResponseAdapter extends PaginatedResponseAdapter<GetWalletNFTsResponse, GetWalletNFTsJSONResponse['result']> {
}
/**
 * Get NFTs owned by a given address.
 * * The response will include status [SYNCED/SYNCING] based on the contracts being indexed.
 * * Use the token_address param to get results for a specific contract only
 * * Note results will include all indexed NFTs
 * * Any request which includes the token_address param will start the indexing process for that NFT collection the very first time it is requested.
 */
export declare const getWalletNFTsOperation: PaginatedOperation<GetWalletNFTsRequest, GetWalletNFTsJSONRequest, GetWalletNFTsResponse, GetWalletNFTsJSONResponse['result']>;
declare function deserializeResponse(jsonResponse: GetWalletNFTsJSONResponse, request: GetWalletNFTsRequest, core: Core): EvmNft[];
declare function serializeRequest(request: GetWalletNFTsRequest, core: Core): {
    chain: "0x1" | "0x5" | "0xaa36a7" | "0x89" | "0x13881" | "0x38" | "0x61" | "0xa86a" | "0xa869" | "0xfa" | "0x19" | "0x152" | "0x2a15c308d" | "0xa4B1";
    format: "hex" | "decimal" | undefined;
    limit: number | undefined;
    tokenAddresses: string[] | undefined;
    cursor: string | undefined;
    address: string;
    normalizeMetadata: boolean | undefined;
    disableTotal: boolean | undefined;
};
export {};
//# sourceMappingURL=getWalletNFTsOperation.d.ts.map