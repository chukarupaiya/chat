"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getWalletNFTsOperation = void 0;
var common_core_1 = require("@moralisweb3/common-core");
var dataTypes_1 = require("../../dataTypes");
var EvmChainResolver_1 = require("../../EvmChainResolver");
/**
 * Get NFTs owned by a given address.
 * * The response will include status [SYNCED/SYNCING] based on the contracts being indexed.
 * * Use the token_address param to get results for a specific contract only
 * * Note results will include all indexed NFTs
 * * Any request which includes the token_address param will start the indexing process for that NFT collection the very first time it is requested.
 */
exports.getWalletNFTsOperation = {
    method: 'GET',
    name: 'getWalletNFTs',
    id: 'getWalletNFTs',
    groupName: 'nft',
    firstPageIndex: 1,
    urlPathPattern: '/{address}/nft',
    urlPathParamNames: ['address'],
    urlSearchParamNames: ['chain', 'format', 'limit', 'tokenAddresses', 'cursor', 'normalizeMetadata', 'disableTotal'],
    getRequestUrlParams: getRequestUrlParams,
    serializeRequest: serializeRequest,
    deserializeRequest: deserializeRequest,
    deserializeResponse: deserializeResponse,
};
// Methods
function getRequestUrlParams(request, core) {
    var _a;
    return {
        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,
        address: dataTypes_1.EvmAddress.create(request.address, core).lowercase,
        format: request.format,
        limit: (0, common_core_1.maybe)(request.limit, String),
        token_addresses: (_a = request.tokenAddresses) === null || _a === void 0 ? void 0 : _a.map(function (address) { return dataTypes_1.EvmAddress.create(address, core).lowercase; }),
        cursor: request.cursor,
        normalizeMetadata: request.normalizeMetadata,
        disable_total: request.disableTotal,
    };
}
function deserializeResponse(jsonResponse, request, core) {
    var _a;
    return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (nft) {
        return dataTypes_1.EvmNft.create({
            chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core),
            contractType: nft.contract_type,
            tokenAddress: nft.token_address,
            tokenId: nft.token_id,
            tokenUri: nft.token_uri,
            metadata: nft.metadata,
            name: nft.name,
            symbol: nft.symbol,
            amount: nft.amount ? parseInt(nft.amount, 10) : undefined,
            blockNumberMinted: nft.block_number_minted,
            blockNumber: nft.block_number,
            ownerOf: dataTypes_1.EvmAddress.create(nft.owner_of, core),
            tokenHash: nft.token_hash,
            lastMetadataSync: (0, common_core_1.dateInputToDate)(nft.last_metadata_sync),
            lastTokenUriSync: (0, common_core_1.dateInputToDate)(nft.last_token_uri_sync),
        });
    });
}
function serializeRequest(request, core) {
    var _a;
    return {
        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,
        format: request.format,
        limit: request.limit,
        tokenAddresses: (_a = request.tokenAddresses) === null || _a === void 0 ? void 0 : _a.map(function (address) { return dataTypes_1.EvmAddress.create(address, core).checksum; }),
        cursor: request.cursor,
        address: dataTypes_1.EvmAddress.create(request.address, core).checksum,
        normalizeMetadata: request.normalizeMetadata,
        disableTotal: request.disableTotal,
    };
}
function deserializeRequest(jsonRequest, core) {
    return {
        chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),
        format: jsonRequest.format,
        limit: jsonRequest.limit,
        tokenAddresses: (0, common_core_1.maybe)(jsonRequest.tokenAddresses, function (addresses) {
            return addresses.map(function (address) { return dataTypes_1.EvmAddress.create(address, core); });
        }),
        cursor: jsonRequest.cursor,
        address: dataTypes_1.EvmAddress.create(jsonRequest.address, core),
        normalizeMetadata: jsonRequest.normalizeMetadata,
        disableTotal: jsonRequest.disableTotal,
    };
}
//# sourceMappingURL=getWalletNFTsOperation.js.map