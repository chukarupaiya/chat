import { Core, Camelize, Operation, ResponseAdapter } from '@moralisweb3/common-core';
import { EvmChainish, EvmAddressish } from '../../dataTypes';
import { operations } from '../openapi';
type OperationId = 'reSyncMetadata';
type PathParams = operations[OperationId]['parameters']['path'];
type QueryParams = operations[OperationId]['parameters']['query'];
type RequestParams = PathParams & QueryParams;
type SuccessResponse = operations[OperationId]['responses']['200']['content']['application/json'];
export interface ReSyncMetadataRequest extends Camelize<Omit<RequestParams, 'chain' | 'address'>> {
    chain?: EvmChainish;
    address: EvmAddressish;
}
export type ReSyncMetadataJSONRequest = ReturnType<typeof serializeRequest>;
export type ReSyncMetadataJSONResponse = SuccessResponse;
export type ReSyncMetadataResponse = ReturnType<typeof deserializeResponse>;
export interface ReSyncMetadataResponseAdapter extends ResponseAdapter<ReSyncMetadataResponse, ReSyncMetadataJSONResponse> {
}
/**
 * ReSync the metadata for an NFT
 * * The metadata flag will request a the NFT's metadata from the already existing token_uri
 * * The uri(default) flag will fetch the latest token_uri from the given NFT address. In sync mode the metadata will also be fetched
 * * The sync mode will make the endpoint synchronous so it will wait for the task to be completed before responding
 * * The async mode(default) will make the endpoint asynchronous so we will wait for the task to be completed before responding
 */
export declare const reSyncMetadataOperation: Operation<ReSyncMetadataRequest, ReSyncMetadataJSONRequest, ReSyncMetadataResponse, ReSyncMetadataJSONResponse>;
declare function serializeRequest(request: ReSyncMetadataRequest, core: Core): {
    chain: "0x1" | "0x5" | "0xaa36a7" | "0x89" | "0x13881" | "0x38" | "0x61" | "0xa86a" | "0xa869" | "0xfa" | "0x19" | "0x152" | "0x2a15c308d" | "0xa4B1";
    flag: "uri" | "metadata" | undefined;
    mode: "async" | "sync" | undefined;
    address: string;
    tokenId: string;
};
declare function deserializeResponse(jsonResponse: ReSyncMetadataJSONResponse): {
    status: string;
};
export {};
//# sourceMappingURL=reSyncMetadataOperation.d.ts.map