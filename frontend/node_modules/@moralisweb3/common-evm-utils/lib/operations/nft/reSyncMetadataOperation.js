"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.reSyncMetadataOperation = void 0;
var dataTypes_1 = require("../../dataTypes");
var EvmChainResolver_1 = require("../../EvmChainResolver");
/**
 * ReSync the metadata for an NFT
 * * The metadata flag will request a the NFT's metadata from the already existing token_uri
 * * The uri(default) flag will fetch the latest token_uri from the given NFT address. In sync mode the metadata will also be fetched
 * * The sync mode will make the endpoint synchronous so it will wait for the task to be completed before responding
 * * The async mode(default) will make the endpoint asynchronous so we will wait for the task to be completed before responding
 */
exports.reSyncMetadataOperation = {
    method: 'GET',
    name: 'reSyncMetadata',
    id: 'reSyncMetadata',
    groupName: 'nft',
    urlPathPattern: '/nft/{address}/{tokenId}/metadata/resync',
    urlPathParamNames: ['address', 'tokenId'],
    urlSearchParamNames: ['chain', 'flag', 'mode'],
    getRequestUrlParams: getRequestUrlParams,
    serializeRequest: serializeRequest,
    deserializeRequest: deserializeRequest,
    deserializeResponse: deserializeResponse,
};
// Methods
function getRequestUrlParams(request, core) {
    return {
        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,
        address: dataTypes_1.EvmAddress.create(request.address, core).lowercase,
        flag: request.flag,
        mode: request.mode,
        tokenId: request.tokenId,
    };
}
function serializeRequest(request, core) {
    return {
        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,
        flag: request.flag,
        mode: request.mode,
        address: dataTypes_1.EvmAddress.create(request.address, core).checksum,
        tokenId: request.tokenId,
    };
}
function deserializeRequest(jsonRequest, core) {
    return {
        chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),
        flag: jsonRequest.flag,
        mode: jsonRequest.mode,
        address: dataTypes_1.EvmAddress.create(jsonRequest.address, core),
        tokenId: jsonRequest.tokenId,
    };
}
function deserializeResponse(jsonResponse) {
    return jsonResponse;
}
//# sourceMappingURL=reSyncMetadataOperation.js.map