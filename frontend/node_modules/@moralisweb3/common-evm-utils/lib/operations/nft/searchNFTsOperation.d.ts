import { Core, Camelize, PaginatedOperation, DateInput, PaginatedResponseAdapter } from '@moralisweb3/common-core';
import { EvmChainish, EvmAddressish, EvmNft } from '../../dataTypes';
import { operations } from '../openapi';
type OperationId = 'searchNFTs';
type QueryParams = operations[OperationId]['parameters']['query'];
type RequestParams = QueryParams;
type SuccessResponse = operations[OperationId]['responses']['200']['content']['application/json'];
export interface SearchNFTsRequest extends Camelize<Omit<RequestParams, 'chain' | 'addresses' | 'from_date' | 'to_date'>> {
    chain?: EvmChainish;
    addresses?: EvmAddressish[];
    fromDate?: DateInput;
    toDate?: DateInput;
}
export type SearchNFTsJSONRequest = ReturnType<typeof serializeRequest>;
export type SearchNFTsJSONResponse = SuccessResponse;
export type SearchNFTsResponse = ReturnType<typeof deserializeResponse>;
export interface SearchNFTsResponseAdapter extends PaginatedResponseAdapter<SearchNFTsResponse, SearchNFTsJSONResponse['result']> {
}
/** Get NFTs that match a given metadata search query. */
export declare const searchNFTsOperation: PaginatedOperation<SearchNFTsRequest, SearchNFTsJSONRequest, SearchNFTsResponse, SearchNFTsJSONResponse['result']>;
declare function deserializeResponse(jsonResponse: SearchNFTsJSONResponse, request: SearchNFTsRequest, core: Core): {
    token: EvmNft;
    tokenHash: string;
    blockNumberMinted: string;
    lastMetadataSync: Date | undefined;
    lastTokenUriSync: Date | undefined;
    batchId: string;
    frozen: number;
    frozenLogIndex: {
        [key: string]: unknown;
    } | undefined;
    imported: {
        [key: string]: unknown;
    } | undefined;
    isValid: number;
    openseaLookup: {
        [key: string]: unknown;
    } | undefined;
    resyncing: number;
    syncing: number;
    updatedAt: Date;
}[];
declare function serializeRequest(request: SearchNFTsRequest, core: Core): {
    chain: "0x1" | "0x5" | "0xaa36a7" | "0x89" | "0x13881" | "0x38" | "0x61" | "0xa86a" | "0xa869" | "0xfa" | "0x19" | "0x152" | "0x2a15c308d" | "0xa4B1";
    format: "hex" | "decimal" | undefined;
    q: string;
    filter: "name" | "description" | "attributes" | "global" | "name,description" | "name,attributes" | "description,attributes" | "name,description,attributes" | undefined;
    fromBlock: number | undefined;
    toBlock: number | undefined;
    fromDate: DateInput | undefined;
    toDate: DateInput | undefined;
    addresses: string[] | undefined;
    cursor: string | undefined;
    limit: number | undefined;
    disableTotal: boolean | undefined;
};
export {};
//# sourceMappingURL=searchNFTsOperation.d.ts.map