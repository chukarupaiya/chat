"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.searchNFTsOperation = void 0;
var common_core_1 = require("@moralisweb3/common-core");
var dataTypes_1 = require("../../dataTypes");
var EvmChainResolver_1 = require("../../EvmChainResolver");
/** Get NFTs that match a given metadata search query. */
exports.searchNFTsOperation = {
    method: 'GET',
    name: 'searchNFTs',
    id: 'searchNFTs',
    groupName: 'nft',
    urlPathPattern: '/nft/search',
    urlSearchParamNames: [
        'chain',
        'format',
        'q',
        'filter',
        'fromBlock',
        'toBlock',
        'fromDate',
        'toDate',
        'addresses',
        'cursor',
        'limit',
        'disableTotal',
    ],
    firstPageIndex: 0,
    getRequestUrlParams: getRequestUrlParams,
    serializeRequest: serializeRequest,
    deserializeRequest: deserializeRequest,
    deserializeResponse: deserializeResponse,
};
// Methods
function getRequestUrlParams(request, core) {
    var _a;
    return {
        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,
        format: request.format,
        q: request.q,
        filter: request.filter,
        from_block: (0, common_core_1.maybe)(request.fromBlock, String),
        to_block: (0, common_core_1.maybe)(request.toBlock, String),
        from_date: request.fromDate ? new Date(request.fromDate).toISOString() : undefined,
        to_date: request.toDate ? new Date(request.toDate).toISOString() : undefined,
        addresses: (_a = request.addresses) === null || _a === void 0 ? void 0 : _a.map(function (address) { return dataTypes_1.EvmAddress.create(address, core).lowercase; }),
        cursor: request.cursor,
        limit: (0, common_core_1.maybe)(request.limit, String),
        disable_total: request.disableTotal,
    };
}
function deserializeResponse(jsonResponse, request, core) {
    var _a;
    return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (nft) { return ({
        token: dataTypes_1.EvmNft.create({
            chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core),
            contractType: nft.contract_type,
            tokenAddress: nft.token_address,
            tokenId: nft.token_id,
            tokenUri: nft.token_uri,
            metadata: nft.metadata,
            tokenHash: nft.token_hash,
        }, core),
        tokenHash: nft.token_hash,
        blockNumberMinted: nft.block_number_minted,
        lastMetadataSync: nft.last_metadata_sync ? new Date(nft.last_metadata_sync) : undefined,
        lastTokenUriSync: nft.last_token_uri_sync ? new Date(nft.last_token_uri_sync) : undefined,
        batchId: nft.batch_id,
        frozen: nft.frozen,
        frozenLogIndex: nft.frozen_log_index,
        imported: nft.imported,
        isValid: nft.is_valid,
        openseaLookup: nft.opensea_lookup,
        resyncing: nft.resyncing,
        syncing: nft.syncing,
        updatedAt: new Date(nft.updatedAt),
    }); });
}
function serializeRequest(request, core) {
    var _a;
    return {
        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,
        format: request.format,
        q: request.q,
        filter: request.filter,
        fromBlock: request.fromBlock,
        toBlock: request.toBlock,
        fromDate: request.fromDate,
        toDate: request.toDate,
        addresses: (_a = request.addresses) === null || _a === void 0 ? void 0 : _a.map(function (address) { return dataTypes_1.EvmAddress.create(address, core).checksum; }),
        cursor: request.cursor,
        limit: request.limit,
        disableTotal: request.disableTotal,
    };
}
function deserializeRequest(jsonRequest, core) {
    return {
        chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),
        format: jsonRequest.format,
        q: jsonRequest.q,
        filter: jsonRequest.filter,
        fromBlock: jsonRequest.fromBlock,
        toBlock: jsonRequest.toBlock,
        fromDate: jsonRequest.fromDate,
        toDate: jsonRequest.toDate,
        addresses: (0, common_core_1.maybe)(jsonRequest.addresses, function (addresses) {
            return addresses.map(function (address) { return dataTypes_1.EvmAddress.create(address, core); });
        }),
        cursor: jsonRequest.cursor,
        limit: jsonRequest.limit,
        disableTotal: jsonRequest.disableTotal,
    };
}
//# sourceMappingURL=searchNFTsOperation.js.map