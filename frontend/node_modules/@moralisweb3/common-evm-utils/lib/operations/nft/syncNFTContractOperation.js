"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.syncNFTContractOperation = void 0;
var dataTypes_1 = require("../../dataTypes");
var EvmChainResolver_1 = require("../../EvmChainResolver");
/** Initiates a sync of a previously non synced Contract. */
exports.syncNFTContractOperation = {
    method: 'PUT',
    name: 'syncNFTContract',
    id: 'syncNFTContract',
    groupName: 'nft',
    urlPathPattern: '/nft/{address}/sync',
    urlPathParamNames: ['address'],
    urlSearchParamNames: ['chain'],
    getRequestUrlParams: getRequestUrlParams,
    serializeRequest: serializeRequest,
    deserializeRequest: deserializeRequest,
    deserializeResponse: deserializeResponse,
};
// Methods
function getRequestUrlParams(request, core) {
    return {
        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,
        address: dataTypes_1.EvmAddress.create(request.address, core).lowercase,
    };
}
function deserializeResponse() {
    return {
        success: true,
    };
}
function serializeRequest(request, core) {
    return {
        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,
        address: dataTypes_1.EvmAddress.create(request.address, core).checksum,
    };
}
function deserializeRequest(jsonRequest, core) {
    return {
        chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),
        address: dataTypes_1.EvmAddress.create(jsonRequest.address, core),
    };
}
//# sourceMappingURL=syncNFTContractOperation.js.map