import Core, { Camelize, Operation, ResponseAdapter } from '@moralisweb3/common-core';
import { EvmAddress } from '../../dataTypes';
import { operations } from '../openapi';
type OperationId = 'resolveDomain';
type PathParams = operations[OperationId]['parameters']['path'];
type QueryParams = operations[OperationId]['parameters']['query'];
type RequestParams = PathParams & QueryParams;
type SuccessResponse = operations[OperationId]['responses']['200']['content']['application/json'];
export interface ResolveDomainRequest extends Camelize<RequestParams> {
}
export type ResolveDomainJSONRequest = ReturnType<typeof serializeRequest>;
export type ResolveDomainJSONResponse = SuccessResponse;
export type ResolveDomainResponse = ReturnType<typeof deserializeResponse>;
export interface ResolveDomainResponseAdapter extends ResponseAdapter<ResolveDomainResponse, ResolveDomainJSONResponse> {
}
/** Resolve an Unstoppable domain and get the address. */
export declare const resolveDomainOperation: Operation<ResolveDomainRequest, ResolveDomainJSONRequest, ResolveDomainResponse, ResolveDomainJSONResponse>;
declare function serializeRequest(request: ResolveDomainRequest): {
    currency: "0x1" | "eth" | undefined;
    domain: string;
};
declare function deserializeResponse(jsonResponse: ResolveDomainJSONResponse, request: ResolveDomainRequest, core: Core): {
    address: EvmAddress;
};
export {};
//# sourceMappingURL=resolveDomainOperation.d.ts.map