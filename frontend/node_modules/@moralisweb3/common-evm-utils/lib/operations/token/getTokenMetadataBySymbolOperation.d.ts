import { Core, Camelize, Operation, ResponseAdapter } from '@moralisweb3/common-core';
import { Erc20Token, EvmChainish } from '../../dataTypes';
import { operations } from '../openapi';
type OperationId = 'getTokenMetadataBySymbol';
type QueryParams = operations[OperationId]['parameters']['query'];
type RequestParams = QueryParams;
type SuccessResponse = operations[OperationId]['responses']['200']['content']['application/json'];
export interface GetTokenMetadataBySymbolRequest extends Camelize<Omit<RequestParams, 'chain'>> {
    chain?: EvmChainish;
}
export type GetTokenMetadataBySymbolJSONRequest = ReturnType<typeof serializeRequest>;
export type GetTokenMetadataBySymbolJSONResponse = SuccessResponse;
export type GetTokenMetadataBySymbolResponse = ReturnType<typeof deserializeResponse>;
export interface GetTokenMetadataBySymbolResponseAdapter extends ResponseAdapter<GetTokenMetadataBySymbolResponse, GetTokenMetadataBySymbolJSONResponse> {
}
/** Get metadata for a list of token symbols (name, symbol, decimals, logo). */
export declare const getTokenMetadataBySymbolOperation: Operation<GetTokenMetadataBySymbolRequest, GetTokenMetadataBySymbolJSONRequest, GetTokenMetadataBySymbolResponse, GetTokenMetadataBySymbolJSONResponse>;
declare function deserializeResponse(jsonResponse: GetTokenMetadataBySymbolJSONResponse, request: GetTokenMetadataBySymbolRequest, core: Core): {
    token: Erc20Token;
    blockNumber: string | undefined;
    validated: string | undefined;
}[];
declare function serializeRequest(request: GetTokenMetadataBySymbolRequest, core: Core): {
    chain: "0x1" | "0x5" | "0xaa36a7" | "0x89" | "0x13881" | "0x38" | "0x61" | "0xa86a" | "0xa869" | "0xfa" | "0x19" | "0x152" | "0x2a15c308d" | "0xa4B1";
    symbols: string[];
};
export {};
//# sourceMappingURL=getTokenMetadataBySymbolOperation.d.ts.map