"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTokenMetadataBySymbolOperation = void 0;
var common_core_1 = require("@moralisweb3/common-core");
var dataTypes_1 = require("../../dataTypes");
var EvmChainResolver_1 = require("../../EvmChainResolver");
/** Get metadata for a list of token symbols (name, symbol, decimals, logo). */
exports.getTokenMetadataBySymbolOperation = {
    method: 'GET',
    name: 'getTokenMetadataBySymbol',
    id: 'getTokenMetadataBySymbol',
    groupName: 'token',
    urlPathPattern: '/erc20/metadata/symbols',
    urlSearchParamNames: ['chain', 'symbols'],
    getRequestUrlParams: getRequestUrlParams,
    serializeRequest: serializeRequest,
    deserializeRequest: deserializeRequest,
    deserializeResponse: deserializeResponse,
};
// Methods
function getRequestUrlParams(request, core) {
    return {
        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,
        symbols: request.symbols,
    };
}
function deserializeResponse(jsonResponse, request, core) {
    return (jsonResponse !== null && jsonResponse !== void 0 ? jsonResponse : []).map(function (token) {
        return {
            token: dataTypes_1.Erc20Token.create(__assign(__assign({}, (0, common_core_1.toCamelCase)(token)), { contractAddress: token.address, chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core) }), core),
            blockNumber: token.block_number,
            validated: token.validated,
        };
    });
}
function serializeRequest(request, core) {
    return {
        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,
        symbols: request.symbols,
    };
}
function deserializeRequest(jsonRequest, core) {
    return {
        chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),
        symbols: jsonRequest.symbols,
    };
}
//# sourceMappingURL=getTokenMetadataBySymbolOperation.js.map