"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTokenPriceOperation = void 0;
var common_core_1 = require("@moralisweb3/common-core");
var dataTypes_1 = require("../../dataTypes");
var EvmChainResolver_1 = require("../../EvmChainResolver");
/** Get the token price denominated in the blockchains native token and USD. */
exports.getTokenPriceOperation = {
    method: 'GET',
    name: 'getTokenPrice',
    id: 'getTokenPrice',
    groupName: 'token',
    urlPathPattern: '/erc20/{address}/price',
    urlPathParamNames: ['address'],
    urlSearchParamNames: ['chain', 'exchange', 'toBlock'],
    getRequestUrlParams: getRequestUrlParams,
    serializeRequest: serializeRequest,
    deserializeRequest: deserializeRequest,
    deserializeResponse: deserializeResponse,
};
// Methods
function getRequestUrlParams(request, core) {
    return {
        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,
        exchange: request.exchange,
        to_block: (0, common_core_1.maybe)(request.toBlock, String),
        address: dataTypes_1.EvmAddress.create(request.address, core).lowercase,
    };
}
function deserializeResponse(jsonResponse, request, core) {
    var _a, _b, _c;
    return __assign(__assign({}, (0, common_core_1.toCamelCase)(jsonResponse)), { nativePrice: ((_a = jsonResponse.nativePrice) === null || _a === void 0 ? void 0 : _a.value)
            ? dataTypes_1.EvmNative.create((_b = jsonResponse.nativePrice) === null || _b === void 0 ? void 0 : _b.value, (_c = jsonResponse.nativePrice) === null || _c === void 0 ? void 0 : _c.decimals)
            : null, exchangeAddress: jsonResponse.exchangeAddress ? dataTypes_1.EvmAddress.create(jsonResponse.exchangeAddress, core) : null });
}
function serializeRequest(request, core) {
    return {
        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,
        exchange: request.exchange,
        toBlock: request.toBlock,
        address: dataTypes_1.EvmAddress.create(request.address, core).checksum,
    };
}
function deserializeRequest(jsonRequest, core) {
    return {
        chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),
        exchange: jsonRequest.exchange,
        toBlock: jsonRequest.toBlock,
        address: dataTypes_1.EvmAddress.create(jsonRequest.address, core),
    };
}
//# sourceMappingURL=getTokenPriceOperation.js.map