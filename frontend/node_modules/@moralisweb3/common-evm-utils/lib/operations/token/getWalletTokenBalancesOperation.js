"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getWalletTokenBalancesOperation = void 0;
var common_core_1 = require("@moralisweb3/common-core");
var dataTypes_1 = require("../../dataTypes");
var EvmChainResolver_1 = require("../../EvmChainResolver");
/** Get token balances for a specific wallet address. */
exports.getWalletTokenBalancesOperation = {
    method: 'GET',
    name: 'getWalletTokenBalances',
    id: 'getWalletTokenBalances',
    groupName: 'token',
    urlPathPattern: '/{address}/erc20',
    urlPathParamNames: ['address'],
    urlSearchParamNames: ['chain', 'toBlock', 'tokenAddresses'],
    getRequestUrlParams: getRequestUrlParams,
    serializeRequest: serializeRequest,
    deserializeRequest: deserializeRequest,
    deserializeResponse: deserializeResponse,
};
// Methods
function getRequestUrlParams(request, core) {
    return {
        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,
        to_block: (0, common_core_1.maybe)(request.toBlock, String),
        token_addresses: (0, common_core_1.maybe)(request.tokenAddresses, function (addresses) {
            return addresses.map(function (address) { return dataTypes_1.EvmAddress.create(address, core).lowercase; });
        }),
        address: dataTypes_1.EvmAddress.create(request.address, core).lowercase,
    };
}
function deserializeResponse(jsonResponse, request, core) {
    return (jsonResponse !== null && jsonResponse !== void 0 ? jsonResponse : []).map(function (token) {
        return dataTypes_1.Erc20Value.create(token.balance, {
            decimals: token.decimals,
            token: {
                decimals: token.decimals,
                name: token.name,
                symbol: token.symbol,
                contractAddress: token.token_address,
                logo: token.logo,
                thumbnail: token.thumbnail,
                chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core),
            },
        }, core);
    });
}
function serializeRequest(request, core) {
    return {
        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,
        tokenAddresses: (0, common_core_1.maybe)(request.tokenAddresses, function (addresses) {
            return addresses.map(function (address) { return dataTypes_1.EvmAddress.create(address, core).checksum; });
        }),
        address: dataTypes_1.EvmAddress.create(request.address).checksum,
        toBlock: request.toBlock,
    };
}
function deserializeRequest(jsonRequest, core) {
    return {
        chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),
        tokenAddresses: (0, common_core_1.maybe)(jsonRequest.tokenAddresses, function (addresses) {
            return addresses.map(function (address) { return dataTypes_1.EvmAddress.create(address, core); });
        }),
        address: dataTypes_1.EvmAddress.create(jsonRequest.address, core),
        toBlock: jsonRequest.toBlock,
    };
}
//# sourceMappingURL=getWalletTokenBalancesOperation.js.map