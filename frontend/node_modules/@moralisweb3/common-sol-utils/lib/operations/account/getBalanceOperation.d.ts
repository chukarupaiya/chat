import { Core, Camelize, Operation, ResponseAdapter } from '@moralisweb3/common-core';
import { SolAddressish, SolNative, SolNetworkish } from '../../dataTypes';
import { operations } from '../openapi';
type OperationId = 'balance';
type PathParams = operations[OperationId]['parameters']['path'];
type SuccessResponse = operations[OperationId]['responses']['200']['content']['application/json'];
export interface GetBalanceRequest extends Camelize<Omit<PathParams, 'network' | 'address'>> {
    network?: SolNetworkish;
    address: SolAddressish;
}
export type GetBalanceJSONRequest = ReturnType<typeof serializeRequest>;
export interface GetBalanceJSONResponse extends SuccessResponse {
}
export type GetBalanceResponse = ReturnType<typeof deserializeResponse>;
export interface GetBalanceResponseAdapter extends ResponseAdapter<GetBalanceResponse, GetBalanceJSONResponse> {
}
/** Gets native balance owned by the given network and address */
export declare const getBalanceOperation: Operation<GetBalanceRequest, GetBalanceJSONRequest, GetBalanceResponse, GetBalanceJSONResponse>;
declare function deserializeResponse(jsonResponse: GetBalanceJSONResponse): SolNative;
declare function serializeRequest(request: GetBalanceRequest, core: Core): {
    address: string;
    network: "mainnet" | "devnet";
};
export {};
//# sourceMappingURL=getBalanceOperation.d.ts.map