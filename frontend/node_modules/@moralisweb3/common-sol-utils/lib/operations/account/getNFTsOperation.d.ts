import { Core, Camelize, Operation, ResponseAdapter } from '@moralisweb3/common-core';
import { SolAddress, SolAddressish, SolNetworkish } from '../../dataTypes';
import { operations } from '../openapi';
type OperationId = 'getNFTs';
type PathParams = operations[OperationId]['parameters']['path'];
type SuccessResponse = operations[OperationId]['responses']['200']['content']['application/json'];
export interface GetNFTsRequest extends Camelize<Omit<PathParams, 'network' | 'address'>> {
    network?: SolNetworkish;
    address: SolAddressish;
}
export type GetNFTsJSONRequest = ReturnType<typeof serializeRequest>;
export interface GetNFTsJSONResponse extends SuccessResponse {
}
export type GetNFTsResponse = ReturnType<typeof deserializeResponse>;
export interface GetNFTsResponseAdapter extends ResponseAdapter<GetNFTsResponse, GetNFTsJSONResponse> {
}
/** Gets NFTs owned by the given network and address */
export declare const getNFTsOperation: Operation<GetNFTsRequest, GetNFTsJSONRequest, GetNFTsResponse, GetNFTsJSONResponse>;
declare function deserializeResponse(jsonResponse: GetNFTsJSONResponse): {
    associatedTokenAddress: SolAddress;
    mint: SolAddress;
}[];
declare function serializeRequest(request: GetNFTsRequest, core: Core): {
    address: string;
    network: "mainnet" | "devnet";
};
export {};
//# sourceMappingURL=getNFTsOperation.d.ts.map