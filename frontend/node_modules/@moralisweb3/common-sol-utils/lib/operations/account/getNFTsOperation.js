"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNFTsOperation = void 0;
var dataTypes_1 = require("../../dataTypes");
var SolNetworkResolver_1 = require("../../SolNetworkResolver");
/** Gets NFTs owned by the given network and address */
exports.getNFTsOperation = {
    method: 'GET',
    name: 'getNFTs',
    id: 'getNFTs',
    groupName: 'account',
    urlPathParamNames: ['network', 'address'],
    urlPathPattern: '/account/{network}/{address}/nft',
    getRequestUrlParams: getRequestUrlParams,
    deserializeResponse: deserializeResponse,
    serializeRequest: serializeRequest,
    deserializeRequest: deserializeRequest,
};
// Methods
function getRequestUrlParams(request, core) {
    return {
        network: SolNetworkResolver_1.SolNetworkResolver.resolve(request.network, core),
        address: dataTypes_1.SolAddress.create(request.address).address,
    };
}
function deserializeResponse(jsonResponse) {
    return jsonResponse.map(function (item) {
        return {
            associatedTokenAddress: dataTypes_1.SolAddress.create(item.associatedTokenAddress),
            mint: dataTypes_1.SolAddress.create(item.mint),
        };
    });
}
function serializeRequest(request, core) {
    return {
        address: dataTypes_1.SolAddress.create(request.address).address,
        network: SolNetworkResolver_1.SolNetworkResolver.resolve(request.network, core),
    };
}
function deserializeRequest(jsonRequest) {
    return {
        network: dataTypes_1.SolNetwork.create(jsonRequest.network),
        address: dataTypes_1.SolAddress.create(jsonRequest.address),
    };
}
//# sourceMappingURL=getNFTsOperation.js.map