import { Core, Camelize, Operation, ResponseAdapter } from '@moralisweb3/common-core';
import { SolAddress, SolAddressish, SolNative, SolNetworkish } from '../../dataTypes';
import { operations } from '../openapi';
type OperationId = 'getPortfolio';
type PathParams = operations[OperationId]['parameters']['path'];
type SuccessResponse = operations[OperationId]['responses']['200']['content']['application/json'];
export interface GetPortfolioRequest extends Camelize<Omit<PathParams, 'network' | 'address'>> {
    network?: SolNetworkish;
    address: SolAddressish;
}
export type GetPortfolioJSONRequest = ReturnType<typeof serializeRequest>;
export interface GetPortfolioJSONResponse extends SuccessResponse {
}
export type GetPortfolioResponse = ReturnType<typeof deserializeResponse>;
export interface GetPortfolioResponseAdapter extends ResponseAdapter<GetPortfolioResponse, GetPortfolioJSONResponse> {
}
/** Gets the portfolio of the given network and address */
export declare const getPortfolioOperation: Operation<GetPortfolioRequest, GetPortfolioJSONRequest, GetPortfolioResponse, GetPortfolioJSONResponse>;
declare function deserializeResponse(jsonResponse: GetPortfolioJSONResponse): {
    nativeBalance: SolNative;
    nfts: {
        associatedTokenAddress: SolAddress;
        mint: SolAddress;
    }[];
    tokens: {
        associatedTokenAddress: SolAddress;
        mint: SolAddress;
        amount: SolNative;
    }[];
};
declare function serializeRequest(request: GetPortfolioRequest, core: Core): {
    address: string;
    network: "mainnet" | "devnet";
};
export {};
//# sourceMappingURL=getPortfolioOperation.d.ts.map