import { Core, Camelize, Operation, ResponseAdapter } from '@moralisweb3/common-core';
import { SolAddress, SolAddressish, SolNative, SolNetworkish } from '../../dataTypes';
import { operations } from '../openapi';
type OperationId = 'getSPL';
type PathParams = operations[OperationId]['parameters']['path'];
type SuccessResponse = operations[OperationId]['responses']['200']['content']['application/json'];
export interface GetSPLRequest extends Camelize<Omit<PathParams, 'network' | 'address'>> {
    network?: SolNetworkish;
    address: SolAddressish;
}
export type GetSPLJSONRequest = ReturnType<typeof serializeRequest>;
export interface GetSPLJSONResponse extends SuccessResponse {
}
export type GetSPLResponse = ReturnType<typeof deserializeResponse>;
export interface GetSPLResponseAdapter extends ResponseAdapter<GetSPLResponse, GetSPLJSONResponse> {
}
/** Gets token balances owned by the given network and address */
export declare const getSPLOperation: Operation<GetSPLRequest, GetSPLJSONRequest, GetSPLResponse, GetSPLJSONResponse>;
declare function deserializeResponse(jsonResponse: GetSPLJSONResponse): {
    associatedTokenAddress: SolAddress;
    mint: SolAddress;
    amount: SolNative;
}[];
declare function serializeRequest(request: GetSPLRequest, core: Core): {
    address: string;
    network: "mainnet" | "devnet";
};
export {};
//# sourceMappingURL=getSPLOperation.d.ts.map