"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNFTMetadataOperation = void 0;
var dataTypes_1 = require("../../dataTypes");
var SolNetworkResolver_1 = require("../../SolNetworkResolver");
/** Gets the contract level metadata (mint, standard, name, symbol, metaplex) for the given network and contract */
exports.getNFTMetadataOperation = {
    method: 'GET',
    name: 'getNFTMetadata',
    id: 'getNFTMetadata',
    groupName: 'nft',
    urlPathParamNames: ['network', 'address'],
    urlPathPattern: '/nft/{network}/{address}/metadata',
    getRequestUrlParams: getRequestUrlParams,
    deserializeResponse: deserializeResponse,
    serializeRequest: serializeRequest,
    deserializeRequest: deserializeRequest,
};
// Methods
function getRequestUrlParams(request, core) {
    return {
        network: SolNetworkResolver_1.SolNetworkResolver.resolve(request.network, core),
        address: dataTypes_1.SolAddress.create(request.address).address,
    };
}
function deserializeResponse(jsonResponse) {
    return {
        mint: dataTypes_1.SolAddress.create(jsonResponse.mint),
        standard: jsonResponse.standard,
        name: jsonResponse.name,
        symbol: jsonResponse.symbol,
        metaplex: {
            metadataUri: jsonResponse.metaplex.metadataUri,
            updateAuthority: dataTypes_1.SolAddress.create(jsonResponse.metaplex.updateAuthority),
            sellerFeeBasisPoints: jsonResponse.metaplex.sellerFeeBasisPoints,
            primarySaleHappened: jsonResponse.metaplex.primarySaleHappened,
            isMutable: jsonResponse.metaplex.isMutable,
            masterEdition: jsonResponse.metaplex.masterEdition,
        },
    };
}
function serializeRequest(request, core) {
    return {
        address: dataTypes_1.SolAddress.create(request.address).address,
        network: SolNetworkResolver_1.SolNetworkResolver.resolve(request.network, core),
    };
}
function deserializeRequest(jsonRequest) {
    return {
        network: dataTypes_1.SolNetwork.create(jsonRequest.network),
        address: dataTypes_1.SolAddress.create(jsonRequest.address),
    };
}
//# sourceMappingURL=getNFTMetadataOperation.js.map