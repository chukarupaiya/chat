import { Core, Camelize, Operation, ResponseAdapter } from '@moralisweb3/common-core';
import { SolAddress, SolAddressish, SolNative, SolNetworkish } from '../../dataTypes';
import { operations } from '../openapi';
type OperationId = 'getTokenPrice';
type PathParams = operations[OperationId]['parameters']['path'];
type SuccessResponse = operations[OperationId]['responses']['200']['content']['application/json'];
export interface GetTokenPriceRequest extends Camelize<Omit<PathParams, 'network' | 'address'>> {
    network?: SolNetworkish;
    address: SolAddressish;
}
export type GetTokenPriceJSONRequest = ReturnType<typeof serializeRequest>;
export interface GetTokenPriceJSONResponse extends SuccessResponse {
}
export type GetTokenPriceResponse = ReturnType<typeof deserializeResponse>;
export interface GetTokenPriceResponseAdapter extends ResponseAdapter<GetTokenPriceResponse, GetTokenPriceJSONResponse> {
}
/** Gets the token price (usd and native) for a given contract address and network */
export declare const getTokenPriceOperation: Operation<GetTokenPriceRequest, GetTokenPriceJSONRequest, GetTokenPriceResponse, GetTokenPriceJSONResponse>;
declare function deserializeResponse(jsonResponse: GetTokenPriceJSONResponse): {
    nativePrice: {
        value: SolNative;
        decimals: number;
        name: string;
        symbol: string;
    };
    usdPrice: number;
    exchangeAddress: SolAddress;
    exchangeName: string;
};
declare function serializeRequest(request: GetTokenPriceRequest, core: Core): {
    address: string;
    network: "mainnet" | "devnet";
};
export {};
//# sourceMappingURL=getTokenPriceOperation.d.ts.map