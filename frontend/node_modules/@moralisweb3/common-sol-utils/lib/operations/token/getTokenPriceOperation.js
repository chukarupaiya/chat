"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTokenPriceOperation = void 0;
var common_core_1 = require("@moralisweb3/common-core");
var dataTypes_1 = require("../../dataTypes");
var SolNetworkResolver_1 = require("../../SolNetworkResolver");
/** Gets the token price (usd and native) for a given contract address and network */
exports.getTokenPriceOperation = {
    method: 'GET',
    name: 'getTokenPrice',
    id: 'getTokenPrice',
    groupName: 'token',
    urlPathParamNames: ['network', 'address'],
    urlPathPattern: '/token/{network}/{address}/price',
    getRequestUrlParams: getRequestUrlParams,
    deserializeResponse: deserializeResponse,
    serializeRequest: serializeRequest,
    deserializeRequest: deserializeRequest,
};
// Methods
function getRequestUrlParams(request, core) {
    var network = SolNetworkResolver_1.SolNetworkResolver.resolve(request.network, core);
    if (network !== 'mainnet') {
        throw new common_core_1.MoralisApiError({
            message: "Incorrct value for 'network', getTokenPrice is only available on mainnet",
            code: common_core_1.ApiErrorCode.INVALID_PARAMS,
        });
    }
    return {
        network: SolNetworkResolver_1.SolNetworkResolver.resolve(request.network, core),
        address: dataTypes_1.SolAddress.create(request.address).address,
    };
}
function deserializeResponse(jsonResponse) {
    return {
        nativePrice: {
            value: dataTypes_1.SolNative.create(jsonResponse.nativePrice.value, 'solana'),
            decimals: jsonResponse.nativePrice.decimals,
            name: jsonResponse.nativePrice.name,
            symbol: jsonResponse.nativePrice.symbol,
        },
        usdPrice: jsonResponse.usdPrice,
        exchangeAddress: dataTypes_1.SolAddress.create(jsonResponse.exchangeAddress),
        exchangeName: jsonResponse.exchangeName,
    };
}
function serializeRequest(request, core) {
    return {
        address: dataTypes_1.SolAddress.create(request.address).address,
        network: SolNetworkResolver_1.SolNetworkResolver.resolve(request.network, core),
    };
}
function deserializeRequest(jsonRequest) {
    return {
        network: dataTypes_1.SolNetwork.create(jsonRequest.network),
        address: dataTypes_1.SolAddress.create(jsonRequest.address),
    };
}
//# sourceMappingURL=getTokenPriceOperation.js.map