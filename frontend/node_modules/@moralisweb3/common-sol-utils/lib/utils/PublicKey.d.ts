/**
 * Copied (and remove obsolete functionalities) from https://github.com/solana-labs/solana-web3.js/blob/master/src/publickey.ts because
 * - We only care about address validation and conversion
 * - Resolving this dependency in UMD gives dependency errors
 */
/// <reference types="node" />
import BN from 'bn.js';
import { Buffer } from 'buffer';
/**
 * Size of public key in bytes
 */
export declare const PUBLIC_KEY_LENGTH = 32;
/**
 * Value to be converted into public key
 */
export type PublicKeyInitData = number | string | Uint8Array | Array<number> | PublicKeyData;
/**
 * JSON object representation of PublicKey class
 */
export type PublicKeyData = {
    /** @internal */
    _bn: BN;
};
export declare class PublicKey {
    /** @internal */
    _bn: BN;
    /**
     * Create a new PublicKey object
     * @param value ed25519 public key as buffer or base-58 encoded string
     */
    constructor(value: PublicKeyInitData);
    /**
     * Return the base-58 representation of the public key
     */
    toBase58(): string;
    /**
     * Return the byte array representation of the public key in big endian
     */
    toBytes(): Uint8Array;
    /**
     * Return the Buffer representation of the public key in big endian
     */
    toBuffer(): Buffer;
    get [Symbol.toStringTag](): string;
    /**
     * Return the base-58 representation of the public key
     */
    toString(): string;
}
//# sourceMappingURL=PublicKey.d.ts.map