"use strict";
/**
 * Copied (and remove obsolete functionalities) from https://github.com/solana-labs/solana-web3.js/blob/master/src/publickey.ts because
 * - We only care about address validation and conversion
 * - Resolving this dependency in UMD gives dependency errors
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PublicKey = exports.PUBLIC_KEY_LENGTH = void 0;
var bn_js_1 = __importDefault(require("bn.js"));
var bs58_1 = __importDefault(require("bs58"));
var buffer_1 = require("buffer");
/**
 * Size of public key in bytes
 */
exports.PUBLIC_KEY_LENGTH = 32;
function isPublicKeyData(value) {
    return value._bn !== undefined;
}
var PublicKey = /** @class */ (function () {
    /**
     * Create a new PublicKey object
     * @param value ed25519 public key as buffer or base-58 encoded string
     */
    function PublicKey(value) {
        if (isPublicKeyData(value)) {
            this._bn = value._bn;
        }
        else {
            if (typeof value === 'string') {
                // assume base 58 encoding by default
                var decoded = bs58_1.default.decode(value);
                if (decoded.length !== exports.PUBLIC_KEY_LENGTH) {
                    throw new Error("Invalid public key input");
                }
                this._bn = new bn_js_1.default(decoded);
            }
            else {
                this._bn = new bn_js_1.default(value);
            }
            if (this._bn.byteLength() > exports.PUBLIC_KEY_LENGTH) {
                throw new Error("Invalid public key input");
            }
        }
    }
    /**
     * Return the base-58 representation of the public key
     */
    PublicKey.prototype.toBase58 = function () {
        return bs58_1.default.encode(this.toBytes());
    };
    /**
     * Return the byte array representation of the public key in big endian
     */
    PublicKey.prototype.toBytes = function () {
        var buf = this.toBuffer();
        return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
    };
    /**
     * Return the Buffer representation of the public key in big endian
     */
    PublicKey.prototype.toBuffer = function () {
        var b = this._bn.toArrayLike(buffer_1.Buffer);
        if (b.length === exports.PUBLIC_KEY_LENGTH) {
            return b;
        }
        var zeroPad = buffer_1.Buffer.alloc(32);
        b.copy(zeroPad, 32 - b.length);
        return zeroPad;
    };
    Object.defineProperty(PublicKey.prototype, Symbol.toStringTag, {
        get: function () {
            return "PublicKey(".concat(this.toString(), ")");
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Return the base-58 representation of the public key
     */
    PublicKey.prototype.toString = function () {
        return this.toBase58();
    };
    return PublicKey;
}());
exports.PublicKey = PublicKey;
//# sourceMappingURL=PublicKey.js.map