import { MoralisDataObject } from '@moralisweb3/common-core';
import { AptosNetwork } from '@moralisweb3/common-aptos-utils';
import { AptosStreamInput, AptosStreamJSON } from './types';
export type AptosStreamish = AptosStreamInput | AptosStream;
/**
 * The AptosStream class is a representation of an Aptos Stream that is returned by the Moralis Stream API
 *
 * @category DataType
 */
export declare class AptosStream implements MoralisDataObject {
    private _data;
    constructor(data: AptosStreamInput);
    /**
     * Create a new instance of AptosStream
     *
     * @param data - the AptosStreamish type
     * @example
     * ```ts
     * const aptosStream = AptosStream.create(data);
     * ```
     * @returns an instance of AptosStream
     */
    static create(data: AptosStreamish): AptosStream;
    private static parse;
    /**
     * Compares two AptosStream data. It checks a deep equality check of both values.
     * @param valueA - the first AptosStreamish data to compare
     * @param valueB - the second AptosStreamish data to compare
     * @returns true if the values are equal, false otherwise
     * @example
     * ```ts
     *  AptosStream.equals(valueA, valueB);
     * ```
     */
    static equals(valueA: AptosStreamish, valueB: AptosStreamish): boolean;
    /**
     * Compares an AptosStreamish data to this AptosStream instance.
     * @param value - the value to compare
     * @returns true if the value is equal to the current instance, false otherwise
     * @example
     * ```ts
     * aptosStream.equals(value);
     * ```
     */
    equals(value: AptosStreamish): boolean;
    /**
     * Converts the AptosStream instance to a JSON object.
     * @returns JSON object of the AptosStream instance
     * @example `aptosStream.toJSON()`
     */
    toJSON(): AptosStreamJSON;
    /**
     * Converts the AptosStream instance to a JSON object.
     * @returns JSON object of the AptosStream instance
     * @example `aptosStream.format()`
     */
    format(): AptosStreamJSON;
    get network(): AptosNetwork[];
    get webhookUrl(): string;
    get description(): string;
    get tag(): string;
    get allAddresses(): boolean;
    get id(): string;
    get status(): import("./types").StreamStatus;
    get statusMessage(): string;
    get demo(): boolean;
    get includeChanges(): boolean;
    get includeEvents(): boolean;
    get includePayload(): boolean;
    get isErrorSince(): string | null;
    get events(): string[];
    get functions(): string[];
    get amountOfAddresses(): number;
}
//# sourceMappingURL=AptosStream.d.ts.map