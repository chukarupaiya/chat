"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AptosStream = void 0;
var common_aptos_utils_1 = require("@moralisweb3/common-aptos-utils");
/**
 * The AptosStream class is a representation of an Aptos Stream that is returned by the Moralis Stream API
 *
 * @category DataType
 */
var AptosStream = /** @class */ (function () {
    function AptosStream(data) {
        this._data = AptosStream.parse(data);
    }
    /**
     * Create a new instance of AptosStream
     *
     * @param data - the AptosStreamish type
     * @example
     * ```ts
     * const aptosStream = AptosStream.create(data);
     * ```
     * @returns an instance of AptosStream
     */
    AptosStream.create = function (data) {
        if (data instanceof AptosStream) {
            return data;
        }
        return new AptosStream(data);
    };
    /**
     * Compares two AptosStream data. It checks a deep equality check of both values.
     * @param valueA - the first AptosStreamish data to compare
     * @param valueB - the second AptosStreamish data to compare
     * @returns true if the values are equal, false otherwise
     * @example
     * ```ts
     *  AptosStream.equals(valueA, valueB);
     * ```
     */
    AptosStream.equals = function (valueA, valueB) {
        var aptosStreamA = AptosStream.create(valueA);
        var aptosStreamB = AptosStream.create(valueB);
        if (aptosStreamA.id !== aptosStreamB.id) {
            return false;
        }
        return true;
    };
    /**
     * Compares an AptosStreamish data to this AptosStream instance.
     * @param value - the value to compare
     * @returns true if the value is equal to the current instance, false otherwise
     * @example
     * ```ts
     * aptosStream.equals(value);
     * ```
     */
    AptosStream.prototype.equals = function (value) {
        return AptosStream.equals(this, value);
    };
    /**
     * Converts the AptosStream instance to a JSON object.
     * @returns JSON object of the AptosStream instance
     * @example `aptosStream.toJSON()`
     */
    AptosStream.prototype.toJSON = function () {
        return __assign(__assign({}, this._data), { network: this.network.map(function (network) { return network.toJSON(); }) });
    };
    /**
     * Converts the AptosStream instance to a JSON object.
     * @returns JSON object of the AptosStream instance
     * @example `aptosStream.format()`
     */
    AptosStream.prototype.format = function () {
        return this.toJSON();
    };
    Object.defineProperty(AptosStream.prototype, "network", {
        get: function () {
            return this._data.network;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AptosStream.prototype, "webhookUrl", {
        get: function () {
            return this._data.webhookUrl;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AptosStream.prototype, "description", {
        get: function () {
            return this._data.description;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AptosStream.prototype, "tag", {
        get: function () {
            return this._data.tag;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AptosStream.prototype, "allAddresses", {
        get: function () {
            return this._data.allAddresses;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AptosStream.prototype, "id", {
        get: function () {
            return this._data.id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AptosStream.prototype, "status", {
        get: function () {
            return this._data.status;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AptosStream.prototype, "statusMessage", {
        get: function () {
            return this._data.statusMessage;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AptosStream.prototype, "demo", {
        get: function () {
            return this._data.demo;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AptosStream.prototype, "includeChanges", {
        get: function () {
            return this._data.includeChanges;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AptosStream.prototype, "includeEvents", {
        get: function () {
            return this._data.includeEvents;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AptosStream.prototype, "includePayload", {
        get: function () {
            return this._data.includePayload;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AptosStream.prototype, "isErrorSince", {
        get: function () {
            return this._data.isErrorSince;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AptosStream.prototype, "events", {
        get: function () {
            return this._data.events;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AptosStream.prototype, "functions", {
        get: function () {
            return this._data.functions;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AptosStream.prototype, "amountOfAddresses", {
        get: function () {
            return this._data.amountOfAddresses;
        },
        enumerable: false,
        configurable: true
    });
    AptosStream.parse = function (data) {
        return __assign(__assign({}, data), { network: data.network.map(function (network) { return common_aptos_utils_1.AptosNetwork.create(network); }) });
    };
    return AptosStream;
}());
exports.AptosStream = AptosStream;
//# sourceMappingURL=AptosStream.js.map