import Core, { MoralisDataObject } from '@moralisweb3/common-core';
import { EvmChain } from '@moralisweb3/common-evm-utils';
import { StreamTrigger } from '../StreamTrigger';
import { EvmStreamInput, EvmStreamJSON } from './types';
export type EvmStreamish = EvmStreamInput | EvmStream;
/**
 * The EvmStream class is a representation of Moralis Stream that is returned by the Moralis Stream API
 *
 * @category DataType
 */
export declare class EvmStream implements MoralisDataObject {
    private _data;
    constructor(data: EvmStreamInput, core: Core);
    /**
     * Create a new instance of EvmStream
     *
     * @param data - the EvmStreamish type
     * @param core - the Core instance
     * @example
     * ```ts
     * const evmStream = EvmStream.create(data);
     * ```
     * @returns an instance of EvmStream
     */
    static create(data: EvmStreamish, core?: Core): EvmStream;
    private static parse;
    /**
     * Compares two EvmStream data. It checks a deep equality check of both values.
     * @param valueA - the first EvmStreamish data to compare
     * @param valueB - the second EvmStreamish data to compare
     * @returns true if the values are equal, false otherwise
     * @example
     * ```ts
     *  EvmStream.equals(valueA, valueB);
     * ```
     */
    static equals(valueA: EvmStreamish, valueB: EvmStreamish): boolean;
    /**
     * Compares an EvmStreamish data to this EvmStream instance.
     * @param value - the value to compare
     * @returns true if the value is equal to the current instance, false otherwise
     * @example
     * ```ts
     * evmStream.equals(value);
     * ```
     */
    equals(value: EvmStreamish): boolean;
    /**
     * Converts the EvmStream instance to a JSON object.
     * @returns JSON object of the EvmStream instance
     * @example `evmStream.toJSON()`
     */
    toJSON(): EvmStreamJSON;
    /**
     * Converts the EvmStream instance to a JSON object.
     * @returns JSON object of the EvmStream instance
     * @example `evmStream.format()`
     */
    format(): EvmStreamJSON;
    get chains(): EvmChain[];
    get chainIds(): (string | number)[];
    get webhookUrl(): string;
    get description(): string;
    get tag(): string;
    get topic0(): string[] | undefined;
    get allAddresses(): boolean;
    get includeNativeTxs(): boolean;
    get includeContractLogs(): boolean;
    get includeInternalTxs(): boolean;
    get abi(): import("..").EvmAbi | undefined;
    get advancedOptions(): import("./types").EvmStreamAdvancedOptions[] | undefined;
    get id(): string;
    get status(): string;
    get statusMessage(): string;
    get triggers(): StreamTrigger[] | undefined;
    get getNativeBalances(): {
        selectors: string[];
        type: import("./types").GetNativeBalanceType;
    }[] | undefined;
}
//# sourceMappingURL=EvmStream.d.ts.map