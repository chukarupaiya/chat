"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EvmStream = void 0;
var common_core_1 = require("@moralisweb3/common-core");
var common_evm_utils_1 = require("@moralisweb3/common-evm-utils");
var StreamTrigger_1 = require("../StreamTrigger");
/**
 * The EvmStream class is a representation of Moralis Stream that is returned by the Moralis Stream API
 *
 * @category DataType
 */
var EvmStream = /** @class */ (function () {
    function EvmStream(data, core) {
        this._data = EvmStream.parse(data, core);
    }
    /**
     * Create a new instance of EvmStream
     *
     * @param data - the EvmStreamish type
     * @param core - the Core instance
     * @example
     * ```ts
     * const evmStream = EvmStream.create(data);
     * ```
     * @returns an instance of EvmStream
     */
    EvmStream.create = function (data, core) {
        if (data instanceof EvmStream) {
            return data;
        }
        var finalCore = core !== null && core !== void 0 ? core : common_core_1.CoreProvider.getDefault();
        return new EvmStream(data, finalCore);
    };
    /**
     * Compares two EvmStream data. It checks a deep equality check of both values.
     * @param valueA - the first EvmStreamish data to compare
     * @param valueB - the second EvmStreamish data to compare
     * @returns true if the values are equal, false otherwise
     * @example
     * ```ts
     *  EvmStream.equals(valueA, valueB);
     * ```
     */
    EvmStream.equals = function (valueA, valueB) {
        var _a, _b;
        var evmStreamA = EvmStream.create(valueA);
        var evmStreamB = EvmStream.create(valueB);
        if (evmStreamA.id !== evmStreamB.id) {
            return false;
        }
        if (((_a = evmStreamA.triggers) === null || _a === void 0 ? void 0 : _a.length) !== ((_b = evmStreamB.triggers) === null || _b === void 0 ? void 0 : _b.length) ||
            !StreamTrigger_1.StreamTrigger.arrayEquals(evmStreamA.triggers || [], evmStreamB.triggers || [])) {
            return false;
        }
        return true;
    };
    /**
     * Compares an EvmStreamish data to this EvmStream instance.
     * @param value - the value to compare
     * @returns true if the value is equal to the current instance, false otherwise
     * @example
     * ```ts
     * evmStream.equals(value);
     * ```
     */
    EvmStream.prototype.equals = function (value) {
        return EvmStream.equals(this, value);
    };
    /**
     * Converts the EvmStream instance to a JSON object.
     * @returns JSON object of the EvmStream instance
     * @example `evmStream.toJSON()`
     */
    EvmStream.prototype.toJSON = function () {
        var _a = this._data, chains = _a.chains, triggers = _a.triggers, data = __rest(_a, ["chains", "triggers"]);
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        return __assign(__assign({}, data), { chainIds: chains.map(function (chain) { return chain.format(); }), triggers: triggers === null || triggers === void 0 ? void 0 : triggers.map(function (trigger) { return trigger.format(); }) });
    };
    /**
     * Converts the EvmStream instance to a JSON object.
     * @returns JSON object of the EvmStream instance
     * @example `evmStream.format()`
     */
    EvmStream.prototype.format = function () {
        return this.toJSON();
    };
    Object.defineProperty(EvmStream.prototype, "chains", {
        get: function () {
            return this._data.chains;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmStream.prototype, "chainIds", {
        get: function () {
            return this._data.chains.map(function (chain) { return chain.format(); });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmStream.prototype, "webhookUrl", {
        get: function () {
            return this._data.webhookUrl;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmStream.prototype, "description", {
        get: function () {
            return this._data.description;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmStream.prototype, "tag", {
        get: function () {
            return this._data.tag;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmStream.prototype, "topic0", {
        get: function () {
            return this._data.topic0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmStream.prototype, "allAddresses", {
        get: function () {
            return this._data.allAddresses;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmStream.prototype, "includeNativeTxs", {
        get: function () {
            return this._data.includeNativeTxs;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmStream.prototype, "includeContractLogs", {
        get: function () {
            return this._data.includeContractLogs;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmStream.prototype, "includeInternalTxs", {
        get: function () {
            return this._data.includeInternalTxs;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmStream.prototype, "abi", {
        get: function () {
            return this._data.abi;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmStream.prototype, "advancedOptions", {
        get: function () {
            return this._data.advancedOptions;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmStream.prototype, "id", {
        get: function () {
            return this._data.id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmStream.prototype, "status", {
        get: function () {
            return this._data.status;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmStream.prototype, "statusMessage", {
        get: function () {
            return this._data.statusMessage;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmStream.prototype, "triggers", {
        get: function () {
            return this._data.triggers;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmStream.prototype, "getNativeBalances", {
        get: function () {
            return this._data.getNativeBalances;
        },
        enumerable: false,
        configurable: true
    });
    EvmStream.parse = function (data, core) {
        var _a, _b, _c, _d;
        return __assign(__assign({}, data), { chains: data.chainIds.map(function (chainId) { return common_evm_utils_1.EvmChain.create(chainId, core); }), topic0: (0, common_core_1.maybe)(data.topic0), allAddresses: (_a = data.allAddresses) !== null && _a !== void 0 ? _a : false, includeContractLogs: (_b = data.includeContractLogs) !== null && _b !== void 0 ? _b : false, includeInternalTxs: (_c = data.includeInternalTxs) !== null && _c !== void 0 ? _c : false, includeNativeTxs: (_d = data.includeNativeTxs) !== null && _d !== void 0 ? _d : false, advancedOptions: (0, common_core_1.maybe)(data.advancedOptions), abi: (0, common_core_1.maybe)(data.abi), triggers: (0, common_core_1.maybe)(data.triggers, function (triggers) { return triggers.map(function (trigger) { return StreamTrigger_1.StreamTrigger.create(trigger, core); }); }), getNativeBalances: (0, common_core_1.maybe)(data.getNativeBalances) });
    };
    return EvmStream;
}());
exports.EvmStream = EvmStream;
//# sourceMappingURL=EvmStream.js.map