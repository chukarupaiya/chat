import Core, { MoralisDataObject } from '@moralisweb3/common-core';
import { EvmStreamResultInput } from './types';
import { Interface } from '@ethersproject/abi';
export type EvmStreamResultish = EvmStreamResultInput | EvmStreamResult;
/**
 * The EvmStreamResult class is representation of the webhook data that is returned from the Stream api
 *
 * @category DataType
 */
export declare class EvmStreamResult implements MoralisDataObject {
    /**
     * Create a new instance of EvmStreamResult
     *
     * @param data - the EvmStreamResultish type
     * @param core - the Core instance
     * @example
     * ```ts
     * const evmStreamResult = EvmStreamResult.create(data);
     * ```
     * @returns an instance of EvmStreamResult
     */
    static create(data: EvmStreamResultish, core?: Core): EvmStreamResult;
    private _data;
    constructor(data: EvmStreamResultInput, core: Core);
    private static parse;
    /**
     * Compares two EvmStreamResult data. It checks a deep equality check of both values.
     * @param valueA - the first EvmStreamResultish data to compare
     * @param valueB - the second EvmStreamResultish data to compare
     * @returns true if the values are equal, false otherwise
     * @example
     * ```ts
     *  EvmStreamResult.equals(valueA, valueB);
     * ```
     */
    static equals(valueA: EvmStreamResultish, valueB: EvmStreamResultish): boolean;
    /**
     * Compares an EvmStreamResultish data to this EvmStreamResult instance.
     * @param value - the value to compare
     * @returns true if the value is equal to the current instance, false otherwise
     * @example
     * ```ts
     * evmStreamResult.equals(value);
     * ```
     */
    equals(value: EvmStreamResultish): boolean;
    /**
     * Converts the EvmStreamResult instance to a JSON object.
     * @returns JSON object of the EvmStreamResult instance
     * @example `evmStreamResult.toJSON()`
     */
    toJSON(): {
        erc20Transfers: import("..").StreamErc20TransferJSON[];
        erc20Approvals: import("..").StreamErc20ApprovalJSON[];
        nftTransfers: import("..").StreamEvmNftTransferJSON[];
        nftApprovals: {
            ERC721: import("..").StreamErc721ApprovalJSON[];
            ERC1155: import("..").StreamErc1155ApprovalJSON[];
        };
        chain: string | number;
        block: {
            number: string;
            chain: string | number;
            timestamp: Date;
            hash: string;
        };
        logs: import("..").StreamEvmTransactionLogJSON[];
        txs: import("..").StreamEvmTransactionJSON[];
        txsInternal: import("..").StreamEvmInternalTransactionJSON[];
        abi: import("..").EvmAbi;
        nativeBalances: import("../StreamNativeBalance").StreamNativeBalanceJSON[];
        retries: number;
        confirmed: boolean;
        tag: string;
        streamId: string;
    };
    /**
     * Converts the EvmStreamResult instance to a JSON object.
     * @returns JSON object of the EvmStreamResult instance
     * @example `evmStreamResult.format()`
     */
    format(): {
        erc20Transfers: import("..").StreamErc20TransferJSON[];
        erc20Approvals: import("..").StreamErc20ApprovalJSON[];
        nftTransfers: import("..").StreamEvmNftTransferJSON[];
        nftApprovals: {
            ERC721: import("..").StreamErc721ApprovalJSON[];
            ERC1155: import("..").StreamErc1155ApprovalJSON[];
        };
        chain: string | number;
        block: {
            number: string;
            chain: string | number;
            timestamp: Date;
            hash: string;
        };
        logs: import("..").StreamEvmTransactionLogJSON[];
        txs: import("..").StreamEvmTransactionJSON[];
        txsInternal: import("..").StreamEvmInternalTransactionJSON[];
        abi: import("..").EvmAbi;
        nativeBalances: import("../StreamNativeBalance").StreamNativeBalanceJSON[];
        retries: number;
        confirmed: boolean;
        tag: string;
        streamId: string;
    };
    get abiInterface(): Interface | null;
    get decodedLogs(): import("@ethersproject/abi").LogDescription[];
    get chain(): import("@moralisweb3/common-evm-utils").EvmChain;
    get streamId(): string;
    get tag(): string;
    get block(): import("@moralisweb3/common-evm-utils").EvmSimpleBlock;
    get retries(): number;
    get confirmed(): boolean;
    get erc20Approvals(): import("..").StreamErc20Approval[];
    get erc20Transfers(): import("..").StreamErc20Transfer[];
    get logs(): import("..").StreamEvmTransactionLog[];
    get nftApprovals(): {
        ERC721: import("..").StreamErc721Approval[];
        ERC1155: import("..").StreamErc1155Approval[];
    };
    get nftTransfers(): import("..").StreamEvmNftTransfer[];
    get txs(): import("..").StreamEvmTransaction[];
    get txsInternal(): import("..").StreamEvmInternalTransaction[];
    get abi(): import("..").EvmAbi;
    get nativeBalances(): import("../StreamNativeBalance").StreamNativeBalance[];
}
//# sourceMappingURL=EvmStreamResult.d.ts.map