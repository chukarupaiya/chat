"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EvmStreamResult = void 0;
var common_core_1 = require("@moralisweb3/common-core");
var EvmStreamResultFormatter_1 = require("./EvmStreamResultFormatter");
var EvmStreamResultParser_1 = require("./EvmStreamResultParser");
var abi_1 = require("@ethersproject/abi");
/**
 * The EvmStreamResult class is representation of the webhook data that is returned from the Stream api
 *
 * @category DataType
 */
var EvmStreamResult = /** @class */ (function () {
    function EvmStreamResult(data, core) {
        this._data = EvmStreamResult.parse(data, core);
    }
    /**
     * Create a new instance of EvmStreamResult
     *
     * @param data - the EvmStreamResultish type
     * @param core - the Core instance
     * @example
     * ```ts
     * const evmStreamResult = EvmStreamResult.create(data);
     * ```
     * @returns an instance of EvmStreamResult
     */
    EvmStreamResult.create = function (data, core) {
        if (data instanceof EvmStreamResult) {
            return data;
        }
        var finalCore = core !== null && core !== void 0 ? core : common_core_1.CoreProvider.getDefault();
        return new EvmStreamResult(data, finalCore);
    };
    /**
     * Compares two EvmStreamResult data. It checks a deep equality check of both values.
     * @param valueA - the first EvmStreamResultish data to compare
     * @param valueB - the second EvmStreamResultish data to compare
     * @returns true if the values are equal, false otherwise
     * @example
     * ```ts
     *  EvmStreamResult.equals(valueA, valueB);
     * ```
     */
    EvmStreamResult.equals = function (valueA, valueB) {
        var evmStreamResultA = EvmStreamResult.create(valueA);
        var evmStreamResultB = EvmStreamResult.create(valueB);
        if (!evmStreamResultA.chain.equals(evmStreamResultB.chain)) {
            return false;
        }
        if (!evmStreamResultA.block.equals(evmStreamResultB.block)) {
            return false;
        }
        if (evmStreamResultA.streamId !== evmStreamResultB.streamId) {
            return false;
        }
        if (evmStreamResultA.tag !== evmStreamResultB.tag) {
            return false;
        }
        if (evmStreamResultA.confirmed !== evmStreamResultB.confirmed) {
            return false;
        }
        return true;
    };
    /**
     * Compares an EvmStreamResultish data to this EvmStreamResult instance.
     * @param value - the value to compare
     * @returns true if the value is equal to the current instance, false otherwise
     * @example
     * ```ts
     * evmStreamResult.equals(value);
     * ```
     */
    EvmStreamResult.prototype.equals = function (value) {
        return EvmStreamResult.equals(this, value);
    };
    /**
     * Converts the EvmStreamResult instance to a JSON object.
     * @returns JSON object of the EvmStreamResult instance
     * @example `evmStreamResult.toJSON()`
     */
    EvmStreamResult.prototype.toJSON = function () {
        return EvmStreamResultFormatter_1.EvmStreamResultFormatter.toJSON(this._data);
    };
    /**
     * Converts the EvmStreamResult instance to a JSON object.
     * @returns JSON object of the EvmStreamResult instance
     * @example `evmStreamResult.format()`
     */
    EvmStreamResult.prototype.format = function () {
        return this.toJSON();
    };
    Object.defineProperty(EvmStreamResult.prototype, "abiInterface", {
        get: function () {
            if (!this.abi || !this.abi.length) {
                return null;
            }
            return new abi_1.Interface(this.abi);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmStreamResult.prototype, "decodedLogs", {
        get: function () {
            var abiInterface = this.abiInterface;
            if (!abiInterface) {
                return [];
            }
            return this.logs.map(function (log) {
                return abiInterface.parseLog({
                    data: log.data,
                    topics: [log.topic0, log.topic1, log.topic2, log.topic3].filter(isNotEmpty),
                });
            });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmStreamResult.prototype, "chain", {
        get: function () {
            return this._data.chain;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmStreamResult.prototype, "streamId", {
        get: function () {
            return this._data.streamId;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmStreamResult.prototype, "tag", {
        get: function () {
            return this._data.tag;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmStreamResult.prototype, "block", {
        get: function () {
            return this._data.block;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmStreamResult.prototype, "retries", {
        get: function () {
            return this._data.retries;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmStreamResult.prototype, "confirmed", {
        get: function () {
            return this._data.confirmed;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmStreamResult.prototype, "erc20Approvals", {
        get: function () {
            return this._data.erc20Approvals;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmStreamResult.prototype, "erc20Transfers", {
        get: function () {
            return this._data.erc20Transfers;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmStreamResult.prototype, "logs", {
        get: function () {
            return this._data.logs;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmStreamResult.prototype, "nftApprovals", {
        get: function () {
            return this._data.nftApprovals;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmStreamResult.prototype, "nftTransfers", {
        get: function () {
            return this._data.nftTransfers;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmStreamResult.prototype, "txs", {
        get: function () {
            return this._data.txs;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmStreamResult.prototype, "txsInternal", {
        get: function () {
            return this._data.txsInternal;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmStreamResult.prototype, "abi", {
        get: function () {
            return this._data.abi;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmStreamResult.prototype, "nativeBalances", {
        get: function () {
            return this._data.nativeBalances;
        },
        enumerable: false,
        configurable: true
    });
    EvmStreamResult.parse = function (data, core) {
        return EvmStreamResultParser_1.EvmStreamResultParser.parse(data, core);
    };
    return EvmStreamResult;
}());
exports.EvmStreamResult = EvmStreamResult;
var isNotEmpty = function (value) { return value != null; };
//# sourceMappingURL=EvmStreamResult.js.map