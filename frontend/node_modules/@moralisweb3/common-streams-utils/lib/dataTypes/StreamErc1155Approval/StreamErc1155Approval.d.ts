import Core, { MoralisDataObject } from '@moralisweb3/common-core';
import { EvmAddress, EvmChain } from '@moralisweb3/common-evm-utils';
import { StreamTriggerOutput } from '../StreamTriggerOutput';
import { StreamErc1155ApprovalInput, StreamErc1155ApprovalJSON } from './types';
export type StreamErc1155Approvalish = StreamErc1155ApprovalInput | StreamErc1155Approval;
/**
 * The StreamErc1155Approval class is a representation of a nft approval (ERC1155) that is returned by the Moralis Stream API
 *
 * @category DataType
 */
export declare class StreamErc1155Approval implements MoralisDataObject {
    /**
     * Create a new instance of StreamErc1155Approval
     *
     * @param data - the StreamErc1155Approvalish type
     * @param core - the Core instance
     * @example
     * ```ts
     * const evmNftApproval = StreamErc1155Approval.create(data);
     * ```
     * @returns an instance of StreamErc1155Approval
     */
    static create(data: StreamErc1155Approvalish, core?: Core): StreamErc1155Approval;
    private _data;
    constructor(data: StreamErc1155ApprovalInput, core: Core);
    private static parse;
    /**
     * Compares two StreamErc1155Approval data. It checks a deep equality check of both values.
     * @param valueA - the first StreamErc1155Approvalish data to compare
     * @param valueB - the second StreamErc1155Approvalish data to compare
     * @returns true if the values are equal, false otherwise
     * @example
     * ```ts
     *  StreamErc1155Approval.equals(valueA, valueB);
     * ```
     */
    static equals(valueA: StreamErc1155Approvalish, valueB: StreamErc1155Approvalish): boolean;
    /**
     * Compares an StreamErc1155Approvalish data to this StreamErc1155Approval instance.
     * @param value - the value to compare
     * @returns true if the value is equal to the current instance, false otherwise
     * @example
     * ```ts
     * evmNftApproval.equals(value);
     * ```
     */
    equals(value: StreamErc1155Approvalish): boolean;
    /**
     * Converts the StreamErc1155Approval instance to a JSON object.
     * @returns JSON object of the StreamErc1155Approval instance
     * @example `evmNftApproval.toJSON()`
     */
    toJSON(): StreamErc1155ApprovalJSON;
    /**
     * Converts the StreamErc1155Approval instance to a JSON object.
     * @returns JSON object of the StreamErc1155Approval instance
     * @example `evmNftApproval.format()`
     */
    format(): StreamErc1155ApprovalJSON;
    get chain(): EvmChain;
    get approved(): boolean;
    get transactionHash(): string;
    get contract(): EvmAddress;
    get logIndex(): number;
    get account(): EvmAddress;
    get operator(): EvmAddress;
    get tokenContractType(): string;
    get tokenName(): string;
    get tokenSymbol(): string;
    get triggers(): StreamTriggerOutput[] | undefined;
}
//# sourceMappingURL=StreamErc1155Approval.d.ts.map