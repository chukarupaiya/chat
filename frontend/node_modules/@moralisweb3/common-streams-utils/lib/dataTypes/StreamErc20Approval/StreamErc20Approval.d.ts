import Core, { BigNumber, MoralisDataObject } from '@moralisweb3/common-core';
import { EvmAddress, EvmChain } from '@moralisweb3/common-evm-utils';
import { StreamTriggerOutput } from '../StreamTriggerOutput';
import { StreamErc20ApprovalInput, StreamErc20ApprovalJSON } from './types';
export type StreamErc20Approvalish = StreamErc20ApprovalInput | StreamErc20Approval;
/**
 * The StreamErc20Transfer class is a representation of a erc20 approval that is returned by the Moralis Stream API
 *
 * @category DataType
 */
export declare class StreamErc20Approval implements MoralisDataObject {
    /**
     * Create a new instance of StreamErc20Approval
     *
     * @param data - the StreamErc20Approvalish type
     * @param core - the Core instance
     * @example
     * ```ts
     * const erc20Approval = StreamErc20Approval.create(data);
     * ```
     * @returns an instance of StreamErc20Approval
     */
    static create(data: StreamErc20Approvalish, core?: Core): StreamErc20Approval;
    private _data;
    constructor(data: StreamErc20ApprovalInput, core: Core);
    private static parse;
    /**
     * Compares two StreamErc20Approval data. It checks a deep equality check of both values.
     * @param valueA - the first StreamErc20Approvalish data to compare
     * @param valueB - the second StreamErc20Approvalish data to compare
     * @returns true if the values are equal, false otherwise
     * @example
     * ```ts
     *  StreamErc20Approval.equals(valueA, valueB);
     * ```
     */
    static equals(valueA: StreamErc20Approvalish, valueB: StreamErc20Approvalish): boolean;
    /**
     * Compares an StreamErc20Approvalish data to this StreamErc20Approval instance.
     * @param value - the value to compare
     * @returns true if the value is equal to the current instance, false otherwise
     * @example
     * ```ts
     * erc20Approval.equals(value);
     * ```
     */
    equals(value: StreamErc20Approvalish): boolean;
    /**
     * Converts the StreamErc20Approval instance to a JSON object.
     * @returns JSON object of the StreamErc20Approval instance
     * @example `erc20Approval.toJSON()`
     */
    toJSON(): StreamErc20ApprovalJSON;
    /**
     * Converts the StreamErc20Approval instance to a JSON object.
     * @returns JSON object of the StreamErc20Approval instance
     * @example `erc20Approval.format()`
     */
    format(): StreamErc20ApprovalJSON;
    get chain(): EvmChain;
    get transactionHash(): string;
    get logIndex(): string | number;
    get owner(): EvmAddress;
    get spender(): EvmAddress;
    get value(): BigNumber;
    get contract(): EvmAddress;
    get tokenName(): string;
    get tokenSymbol(): string;
    get tokenDecimals(): number | undefined;
    get valueWithDecimals(): string | undefined;
    get triggers(): StreamTriggerOutput[] | undefined;
}
//# sourceMappingURL=StreamErc20Approval.d.ts.map