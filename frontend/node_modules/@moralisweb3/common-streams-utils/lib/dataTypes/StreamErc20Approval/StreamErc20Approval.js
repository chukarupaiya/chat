"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StreamErc20Approval = void 0;
var common_core_1 = require("@moralisweb3/common-core");
var common_evm_utils_1 = require("@moralisweb3/common-evm-utils");
var StreamTriggerOutput_1 = require("../StreamTriggerOutput");
/**
 * The StreamErc20Transfer class is a representation of a erc20 approval that is returned by the Moralis Stream API
 *
 * @category DataType
 */
var StreamErc20Approval = /** @class */ (function () {
    function StreamErc20Approval(data, core) {
        this._data = StreamErc20Approval.parse(data, core);
    }
    /**
     * Create a new instance of StreamErc20Approval
     *
     * @param data - the StreamErc20Approvalish type
     * @param core - the Core instance
     * @example
     * ```ts
     * const erc20Approval = StreamErc20Approval.create(data);
     * ```
     * @returns an instance of StreamErc20Approval
     */
    StreamErc20Approval.create = function (data, core) {
        if (data instanceof StreamErc20Approval) {
            return data;
        }
        var finalCore = core !== null && core !== void 0 ? core : common_core_1.CoreProvider.getDefault();
        return new StreamErc20Approval(data, finalCore);
    };
    /**
     * Compares two StreamErc20Approval data. It checks a deep equality check of both values.
     * @param valueA - the first StreamErc20Approvalish data to compare
     * @param valueB - the second StreamErc20Approvalish data to compare
     * @returns true if the values are equal, false otherwise
     * @example
     * ```ts
     *  StreamErc20Approval.equals(valueA, valueB);
     * ```
     */
    StreamErc20Approval.equals = function (valueA, valueB) {
        var _a, _b;
        var erc20ApprovalA = StreamErc20Approval.create(valueA);
        var erc20ApprovalB = StreamErc20Approval.create(valueB);
        if (!erc20ApprovalA.chain.equals(erc20ApprovalB.chain)) {
            return false;
        }
        if (erc20ApprovalA.transactionHash !== erc20ApprovalB.transactionHash) {
            return false;
        }
        if (erc20ApprovalA.logIndex !== erc20ApprovalB.logIndex) {
            return false;
        }
        if (((_a = erc20ApprovalA.triggers) === null || _a === void 0 ? void 0 : _a.length) !== ((_b = erc20ApprovalB.triggers) === null || _b === void 0 ? void 0 : _b.length) ||
            !StreamTriggerOutput_1.StreamTriggerOutput.arrayEquals(erc20ApprovalA.triggers || [], erc20ApprovalB.triggers || [])) {
            return false;
        }
        return true;
    };
    /**
     * Compares an StreamErc20Approvalish data to this StreamErc20Approval instance.
     * @param value - the value to compare
     * @returns true if the value is equal to the current instance, false otherwise
     * @example
     * ```ts
     * erc20Approval.equals(value);
     * ```
     */
    StreamErc20Approval.prototype.equals = function (value) {
        return StreamErc20Approval.equals(this, value);
    };
    /**
     * Converts the StreamErc20Approval instance to a JSON object.
     * @returns JSON object of the StreamErc20Approval instance
     * @example `erc20Approval.toJSON()`
     */
    StreamErc20Approval.prototype.toJSON = function () {
        var _a = this._data, chain = _a.chain, owner = _a.owner, spender = _a.spender, contract = _a.contract, value = _a.value, triggers = _a.triggers, data = __rest(_a, ["chain", "owner", "spender", "contract", "value", "triggers"]);
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        return __assign(__assign({}, data), { chain: chain.format(), owner: owner.format(), spender: spender.format(), contract: contract.format(), value: value.toString(), triggers: triggers === null || triggers === void 0 ? void 0 : triggers.map(function (trigger) { return trigger.format(); }) });
    };
    /**
     * Converts the StreamErc20Approval instance to a JSON object.
     * @returns JSON object of the StreamErc20Approval instance
     * @example `erc20Approval.format()`
     */
    StreamErc20Approval.prototype.format = function () {
        return this.toJSON();
    };
    Object.defineProperty(StreamErc20Approval.prototype, "chain", {
        get: function () {
            return this._data.chain;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StreamErc20Approval.prototype, "transactionHash", {
        get: function () {
            return this._data.transactionHash;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StreamErc20Approval.prototype, "logIndex", {
        get: function () {
            return this._data.logIndex;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StreamErc20Approval.prototype, "owner", {
        get: function () {
            return this._data.owner;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StreamErc20Approval.prototype, "spender", {
        get: function () {
            return this._data.spender;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StreamErc20Approval.prototype, "value", {
        get: function () {
            return this._data.value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StreamErc20Approval.prototype, "contract", {
        get: function () {
            return this._data.contract;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StreamErc20Approval.prototype, "tokenName", {
        get: function () {
            return this._data.tokenName;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StreamErc20Approval.prototype, "tokenSymbol", {
        get: function () {
            return this._data.tokenSymbol;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StreamErc20Approval.prototype, "tokenDecimals", {
        get: function () {
            return this._data.tokenDecimals;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StreamErc20Approval.prototype, "valueWithDecimals", {
        get: function () {
            return this._data.valueWithDecimals;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StreamErc20Approval.prototype, "triggers", {
        get: function () {
            return this._data.triggers;
        },
        enumerable: false,
        configurable: true
    });
    StreamErc20Approval.parse = function (data, core) {
        var chain = common_evm_utils_1.EvmChain.create(data.chain, core);
        return __assign(__assign({}, data), { chain: chain, spender: common_evm_utils_1.EvmAddress.create(data.spender, core), owner: common_evm_utils_1.EvmAddress.create(data.owner, core), logIndex: +data.logIndex, contract: common_evm_utils_1.EvmAddress.create(data.contract, core), value: common_core_1.BigNumber.create(data.value), valueWithDecimals: (0, common_core_1.maybe)(data.valueWithDecimals), tokenDecimals: data.tokenDecimals === '' ? undefined : +data.tokenDecimals, triggers: (0, common_core_1.maybe)(data.triggers, function (triggers) {
                return triggers.map(function (trigger) { return StreamTriggerOutput_1.StreamTriggerOutput.create(trigger, core); });
            }) });
    };
    return StreamErc20Approval;
}());
exports.StreamErc20Approval = StreamErc20Approval;
//# sourceMappingURL=StreamErc20Approval.js.map