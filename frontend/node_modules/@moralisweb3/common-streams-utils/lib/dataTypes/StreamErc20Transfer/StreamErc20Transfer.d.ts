import Core, { BigNumber, MoralisDataObject } from '@moralisweb3/common-core';
import { EvmAddress, EvmChain } from '@moralisweb3/common-evm-utils';
import { StreamTriggerOutput } from '../StreamTriggerOutput';
import { StreamErc20TransferInput, StreamErc20TransferJSON } from './types';
export type StreamErc20Transferish = StreamErc20TransferInput | StreamErc20Transfer;
/**
 * The StreamErc20Transfer class is a representation of a erc20 transfer that is returned by the Moralis Stream API
 *
 * @category DataType
 */
export declare class StreamErc20Transfer implements MoralisDataObject {
    private _data;
    constructor(data: StreamErc20TransferInput, core: Core);
    /**
     * Create a new instance of StreamErc20Transfer
     *
     * @param data - the StreamErc20Transferish type
     * @param core - the Core instance
     * @example
     * ```ts
     * const erc20Transfer = StreamErc20Transfer.create(data);
     * ```
     * @returns an instance of StreamErc20Transfer
     */
    static create(data: StreamErc20Transferish, core?: Core): StreamErc20Transfer;
    private static parse;
    /**
     * Compares two StreamErc20Transfer data. It checks a deep equality check of both values.
     * @param valueA - the first StreamErc20Transferish data to compare
     * @param valueB - the second StreamErc20Transferish data to compare
     * @returns true if the values are equal, false otherwise
     * @example
     * ```ts
     *  StreamErc20Transfer.equals(valueA, valueB);
     * ```
     */
    static equals(valueA: StreamErc20Transferish, valueB: StreamErc20Transferish): boolean;
    /**
     * Compares an StreamErc20Transferish data to this StreamErc20Transfer instance.
     * @param value - the value to compare
     * @returns true if the value is equal to the current instance, false otherwise
     * @example
     * ```ts
     * erc20Transfer.equals(value);
     * ```
     */
    equals(value: StreamErc20Transferish): boolean;
    /**
     * Converts the StreamErc20Transfer instance to a JSON object.
     * @returns JSON object of the StreamErc20Transfer instance
     * @example `erc20Transfer.toJSON()`
     */
    toJSON(): StreamErc20TransferJSON;
    /**
     * Converts the StreamErc20Transfer instance to a JSON object.
     * @returns JSON object of the StreamErc20Transfer instance
     * @example `erc20Transfer.format()`
     */
    format(): StreamErc20TransferJSON;
    get chain(): EvmChain;
    get transactionHash(): string;
    get logIndex(): string | number;
    get from(): EvmAddress;
    get to(): EvmAddress;
    get value(): BigNumber;
    get contract(): EvmAddress;
    get tokenName(): string;
    get tokenSymbol(): string;
    get tokenDecimals(): number | undefined;
    get valueWithDecimals(): string | undefined;
    get triggers(): StreamTriggerOutput[] | undefined;
}
//# sourceMappingURL=StreamErc20Transfer.d.ts.map