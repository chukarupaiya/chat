"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StreamErc721Approval = void 0;
var common_core_1 = require("@moralisweb3/common-core");
var common_evm_utils_1 = require("@moralisweb3/common-evm-utils");
var StreamTriggerOutput_1 = require("../StreamTriggerOutput");
/**
 * The StreamErc1155Approval class is a representation of a nft approval (ERC721) that is returned by the Moralis Stream API
 *
 * @category DataType
 */
var StreamErc721Approval = /** @class */ (function () {
    function StreamErc721Approval(data, core) {
        this._data = StreamErc721Approval.parse(data, core);
    }
    /**
     * Create a new instance of StreamErc721Approval
     *
     * @param data - the StreamErc721Approvalish type
     * @param core - the Core instance
     * @example
     * ```ts
     * const evmNftApproval = StreamErc721Approval.create(data);
     * ```
     * @returns an instance of StreamErc721Approval
     */
    StreamErc721Approval.create = function (data, core) {
        if (data instanceof StreamErc721Approval) {
            return data;
        }
        var finalCore = core !== null && core !== void 0 ? core : common_core_1.CoreProvider.getDefault();
        return new StreamErc721Approval(data, finalCore);
    };
    /**
     * Compares two StreamErc721Approval data. It checks a deep equality check of both values.
     * @param valueA - the first StreamErc721Approvalish data to compare
     * @param valueB - the second StreamErc721Approvalish data to compare
     * @returns true if the values are equal, false otherwise
     * @example
     * ```ts
     *  StreamErc721Approval.equals(valueA, valueB);
     * ```
     */
    // eslint-disable-next-line complexity
    StreamErc721Approval.equals = function (valueA, valueB) {
        var _a, _b;
        var evmNftApprovalA = StreamErc721Approval.create(valueA);
        var evmNftApprovalB = StreamErc721Approval.create(valueB);
        if (!evmNftApprovalA.chain.equals(evmNftApprovalB.chain)) {
            return false;
        }
        if (evmNftApprovalA.transactionHash !== evmNftApprovalB.transactionHash) {
            return false;
        }
        if (!evmNftApprovalA.owner.equals(evmNftApprovalB.owner)) {
            return false;
        }
        if (!evmNftApprovalA.contract.equals(evmNftApprovalB.contract)) {
            return false;
        }
        if (evmNftApprovalA.tokenId !== evmNftApprovalB.tokenId) {
            return false;
        }
        if (!evmNftApprovalA.approved.equals(evmNftApprovalB.approved)) {
            return false;
        }
        if (((_a = evmNftApprovalA.triggers) === null || _a === void 0 ? void 0 : _a.length) !== ((_b = evmNftApprovalB.triggers) === null || _b === void 0 ? void 0 : _b.length) ||
            !StreamTriggerOutput_1.StreamTriggerOutput.arrayEquals(evmNftApprovalA.triggers || [], evmNftApprovalB.triggers || [])) {
            return false;
        }
        return true;
    };
    /**
     * Compares an StreamErc721Approvalish data to this StreamErc721Approval instance.
     * @param value - the value to compare
     * @returns true if the value is equal to the current instance, false otherwise
     * @example
     * ```ts
     * evmNftApproval.equals(value);
     * ```
     */
    StreamErc721Approval.prototype.equals = function (value) {
        return StreamErc721Approval.equals(this, value);
    };
    /**
     * Converts the StreamErc721Approval instance to a JSON object.
     * @returns JSON object of the StreamErc721Approval instance
     * @example `evmNftApproval.toJSON()`
     */
    StreamErc721Approval.prototype.toJSON = function () {
        var _a;
        var data = this._data;
        return __assign(__assign({}, data), { chain: data.chain.format(), contract: data.contract.format(), owner: data.owner.format(), approved: data.approved.format(), triggers: (_a = data.triggers) === null || _a === void 0 ? void 0 : _a.map(function (trigger) { return trigger.format(); }) });
    };
    /**
     * Converts the StreamErc721Approval instance to a JSON object.
     * @returns JSON object of the StreamErc721Approval instance
     * @example `evmNftApproval.format()`
     */
    StreamErc721Approval.prototype.format = function () {
        return this.toJSON();
    };
    Object.defineProperty(StreamErc721Approval.prototype, "chain", {
        get: function () {
            return this._data.chain;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StreamErc721Approval.prototype, "approved", {
        get: function () {
            return this._data.approved;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StreamErc721Approval.prototype, "owner", {
        get: function () {
            return this._data.owner;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StreamErc721Approval.prototype, "transactionHash", {
        get: function () {
            return this._data.transactionHash;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StreamErc721Approval.prototype, "contract", {
        get: function () {
            return this._data.contract;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StreamErc721Approval.prototype, "logIndex", {
        get: function () {
            return this._data.logIndex;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StreamErc721Approval.prototype, "tokenId", {
        get: function () {
            return this._data.tokenId;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StreamErc721Approval.prototype, "tokenContractType", {
        get: function () {
            return this._data.tokenContractType;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StreamErc721Approval.prototype, "tokenName", {
        get: function () {
            return this._data.tokenName;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StreamErc721Approval.prototype, "tokenSymbol", {
        get: function () {
            return this._data.tokenSymbol;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StreamErc721Approval.prototype, "triggers", {
        get: function () {
            return this._data.triggers;
        },
        enumerable: false,
        configurable: true
    });
    StreamErc721Approval.parse = function (data, core) {
        var chain = common_evm_utils_1.EvmChain.create(data.chain, core);
        return __assign(__assign({}, data), { chain: chain, logIndex: +data.logIndex, owner: common_evm_utils_1.EvmAddress.create(data.owner, core), contract: common_evm_utils_1.EvmAddress.create(data.contract, core), tokenContractType: data.tokenContractType, approved: common_evm_utils_1.EvmAddress.create(data.approved, core), triggers: (0, common_core_1.maybe)(data.triggers, function (triggers) {
                return triggers.map(function (trigger) { return StreamTriggerOutput_1.StreamTriggerOutput.create(trigger, core); });
            }) });
    };
    return StreamErc721Approval;
}());
exports.StreamErc721Approval = StreamErc721Approval;
//# sourceMappingURL=StreamErc721Approval.js.map