import Core, { BigNumber, MoralisDataObject } from '@moralisweb3/common-core';
import { EvmAddress, EvmChain } from '@moralisweb3/common-evm-utils';
import { StreamTriggerOutput } from '../StreamTriggerOutput';
import { StreamEvmInternalTransactionInput, StreamEvmInternalTransactionJSON } from './types';
export type StreamEvmInternalTransactionish = StreamEvmInternalTransactionInput | StreamEvmInternalTransaction;
/**
 * The StreamEvmInternalTransaction class is a representation of an internal transaction that is returned by the Moralis Stream API
 *
 * @category DataType
 */
export declare class StreamEvmInternalTransaction implements MoralisDataObject {
    private _data;
    constructor(data: StreamEvmInternalTransactionInput, core: Core);
    /**
     * Create a new instance of StreamEvmInternalTransactionish
     *
     * @param data - the StreamEvmInternalTransactionishish type
     * @param core - the Core instance
     * @example
     * ```ts
     * const transaction = StreamEvmTransactionish.create(data);
     * ```
     * @returns an instance of StreamEvmInternalTransaction
     */
    static create(data: StreamEvmInternalTransactionish, core?: Core): StreamEvmInternalTransaction;
    private static parse;
    /**
     * Compares two StreamEvmInternalTransaction data. It checks a deep equality check of both values.
     * @param valueA - the first StreamEvmInternalTransactionish data to compare
     * @param valueB - the second StreamEvmInternalTransactionish data to compare
     * @returns true if the values are equal, false otherwise
     * @example
     * ```ts
     *  StreamEvmInternalTransaction.equals(valueA, valueB);
     * ```
     */
    static equals(valueA: StreamEvmInternalTransactionish, valueB: StreamEvmInternalTransactionish): boolean;
    /**
     * Compares an StreamEvmInternalTransactionish data to this StreamEvmInternalTransaction instance.
     * @param value - the value to compare
     * @returns true if the value is equal to the current instance, false otherwise
     * @example
     * ```ts
     * evmInternalTransaction.equals(value);
     * ```
     */
    equals(value: StreamEvmInternalTransactionish): boolean;
    /**
     * Converts the StreamEvmInternalTransaction instance to a JSON object.
     * @returns JSON object of the StreamEvmInternalTransaction instance
     * @example `evmInternalTransaction.toJSON()`
     */
    toJSON(): StreamEvmInternalTransactionJSON;
    /**
     * Converts the StreamEvmInternalTransaction instance to a JSON object.
     * @returns JSON object of the StreamEvmInternalTransaction instance
     * @example `evmInternalTransaction.format()`
     */
    format(): StreamEvmInternalTransactionJSON;
    get chain(): EvmChain;
    get from(): EvmAddress | undefined;
    get to(): EvmAddress | undefined;
    get value(): BigNumber | undefined;
    get transactionHash(): string;
    get gas(): BigNumber | undefined;
    get triggers(): StreamTriggerOutput[] | undefined;
}
//# sourceMappingURL=StreamEvmInternalTransaction.d.ts.map