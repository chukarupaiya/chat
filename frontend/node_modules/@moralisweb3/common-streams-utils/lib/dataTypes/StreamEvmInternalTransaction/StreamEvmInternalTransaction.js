"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StreamEvmInternalTransaction = void 0;
var common_core_1 = require("@moralisweb3/common-core");
var common_evm_utils_1 = require("@moralisweb3/common-evm-utils");
var StreamTriggerOutput_1 = require("../StreamTriggerOutput");
/**
 * The StreamEvmInternalTransaction class is a representation of an internal transaction that is returned by the Moralis Stream API
 *
 * @category DataType
 */
var StreamEvmInternalTransaction = /** @class */ (function () {
    function StreamEvmInternalTransaction(data, core) {
        this._data = StreamEvmInternalTransaction.parse(data, core);
    }
    /**
     * Create a new instance of StreamEvmInternalTransactionish
     *
     * @param data - the StreamEvmInternalTransactionishish type
     * @param core - the Core instance
     * @example
     * ```ts
     * const transaction = StreamEvmTransactionish.create(data);
     * ```
     * @returns an instance of StreamEvmInternalTransaction
     */
    StreamEvmInternalTransaction.create = function (data, core) {
        if (data instanceof StreamEvmInternalTransaction) {
            return data;
        }
        var finalCore = core !== null && core !== void 0 ? core : common_core_1.CoreProvider.getDefault();
        return new StreamEvmInternalTransaction(data, finalCore);
    };
    /**
     * Compares two StreamEvmInternalTransaction data. It checks a deep equality check of both values.
     * @param valueA - the first StreamEvmInternalTransactionish data to compare
     * @param valueB - the second StreamEvmInternalTransactionish data to compare
     * @returns true if the values are equal, false otherwise
     * @example
     * ```ts
     *  StreamEvmInternalTransaction.equals(valueA, valueB);
     * ```
     */
    StreamEvmInternalTransaction.equals = function (valueA, valueB) {
        var _a, _b;
        var evmInternalTransactionA = StreamEvmInternalTransaction.create(valueA);
        var evmInternalTransactionB = StreamEvmInternalTransaction.create(valueB);
        if (!evmInternalTransactionA.chain.equals(evmInternalTransactionB.chain)) {
            return false;
        }
        if (evmInternalTransactionA.transactionHash !== evmInternalTransactionB.transactionHash) {
            return false;
        }
        if (((_a = evmInternalTransactionA.triggers) === null || _a === void 0 ? void 0 : _a.length) !== ((_b = evmInternalTransactionB.triggers) === null || _b === void 0 ? void 0 : _b.length) ||
            !StreamTriggerOutput_1.StreamTriggerOutput.arrayEquals(evmInternalTransactionA.triggers || [], evmInternalTransactionB.triggers || [])) {
            return false;
        }
        return true;
    };
    /**
     * Compares an StreamEvmInternalTransactionish data to this StreamEvmInternalTransaction instance.
     * @param value - the value to compare
     * @returns true if the value is equal to the current instance, false otherwise
     * @example
     * ```ts
     * evmInternalTransaction.equals(value);
     * ```
     */
    StreamEvmInternalTransaction.prototype.equals = function (value) {
        return StreamEvmInternalTransaction.equals(this, value);
    };
    /**
     * Converts the StreamEvmInternalTransaction instance to a JSON object.
     * @returns JSON object of the StreamEvmInternalTransaction instance
     * @example `evmInternalTransaction.toJSON()`
     */
    StreamEvmInternalTransaction.prototype.toJSON = function () {
        var _a, _b, _c, _d, _e;
        var data = this._data;
        return __assign(__assign({}, data), { chain: data.chain.format(), from: (_a = data.from) === null || _a === void 0 ? void 0 : _a.format(), to: (_b = data.to) === null || _b === void 0 ? void 0 : _b.format(), value: (_c = data.value) === null || _c === void 0 ? void 0 : _c.toString(), gas: (_d = data.gas) === null || _d === void 0 ? void 0 : _d.toString(), triggers: (_e = data.triggers) === null || _e === void 0 ? void 0 : _e.map(function (trigger) { return trigger.format(); }) });
    };
    /**
     * Converts the StreamEvmInternalTransaction instance to a JSON object.
     * @returns JSON object of the StreamEvmInternalTransaction instance
     * @example `evmInternalTransaction.format()`
     */
    StreamEvmInternalTransaction.prototype.format = function () {
        return this.toJSON();
    };
    Object.defineProperty(StreamEvmInternalTransaction.prototype, "chain", {
        get: function () {
            return this._data.chain;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StreamEvmInternalTransaction.prototype, "from", {
        get: function () {
            return this._data.from;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StreamEvmInternalTransaction.prototype, "to", {
        get: function () {
            return this._data.to;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StreamEvmInternalTransaction.prototype, "value", {
        get: function () {
            return this._data.value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StreamEvmInternalTransaction.prototype, "transactionHash", {
        get: function () {
            return this._data.transactionHash;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StreamEvmInternalTransaction.prototype, "gas", {
        get: function () {
            return this._data.gas;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StreamEvmInternalTransaction.prototype, "triggers", {
        get: function () {
            return this._data.triggers;
        },
        enumerable: false,
        configurable: true
    });
    StreamEvmInternalTransaction.parse = function (data, core) { return (__assign(__assign({}, data), { chain: common_evm_utils_1.EvmChain.create(data.chain, core), from: (0, common_core_1.maybe)(data.from, function (value) { return common_evm_utils_1.EvmAddress.create(value, core); }), to: (0, common_core_1.maybe)(data.to, function (value) { return common_evm_utils_1.EvmAddress.create(value, core); }), value: (0, common_core_1.maybe)(data.value, function (value) { return common_core_1.BigNumber.create(value); }), gas: (0, common_core_1.maybe)(data.gas, function (value) { return common_core_1.BigNumber.create(value); }), triggers: (0, common_core_1.maybe)(data.triggers, function (triggers) { return triggers.map(function (trigger) { return StreamTriggerOutput_1.StreamTriggerOutput.create(trigger, core); }); }) })); };
    return StreamEvmInternalTransaction;
}());
exports.StreamEvmInternalTransaction = StreamEvmInternalTransaction;
//# sourceMappingURL=StreamEvmInternalTransaction.js.map