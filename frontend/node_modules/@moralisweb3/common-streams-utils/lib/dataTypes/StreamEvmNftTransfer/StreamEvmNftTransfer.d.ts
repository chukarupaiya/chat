import Core, { MoralisDataObject } from '@moralisweb3/common-core';
import { EvmAddress, EvmChain } from '@moralisweb3/common-evm-utils';
import { StreamTriggerOutput } from '../StreamTriggerOutput';
import { StreamEvmNftTransferInput, StreamEvmNftTransferJSON } from './types';
type StreamEvmNftTransferish = StreamEvmNftTransfer | StreamEvmNftTransferInput;
/**
 * The StreamEvmNftTransfer class is a representation of a nft transfer (EREC721 or ERC1155) that is returned by the Moralis Stream API
 *
 * @category DataType
 */
export declare class StreamEvmNftTransfer implements MoralisDataObject {
    private _data;
    constructor(data: StreamEvmNftTransferInput, core: Core);
    /**
     * Create a new instance of StreamEvmNftTransferish
     *
     * @param data - the StreamEvmNftTransferishish type
     * @param core - the Core instance
     * @example
     * ```ts
     * const transfer = StreamEvmTransactionish.create(data);
     * ```
     * @returns an instance of StreamEvmNftTransfer
     */
    static create(data: StreamEvmNftTransferish, core?: Core): StreamEvmNftTransfer;
    private static parse;
    /**
     * Compares two StreamEvmNftTransfer data. It checks a deep equality check of both values.
     * @param valueA - the first StreamEvmNftTransferish data to compare
     * @param valueB - the second StreamEvmNftTransferish data to compare
     * @returns true if the values are equal, false otherwise
     * @example
     * ```ts
     *  StreamEvmNftTransfer.equals(valueA, valueB);
     * ```
     */
    static equals(valueA: StreamEvmNftTransferish, valueB: StreamEvmNftTransferish): boolean;
    /**
     * Compares an StreamEvmNftTransferish data to this StreamEvmNftTransfer instance.
     * @param value - the value to compare
     * @returns true if the value is equal to the current instance, false otherwise
     * @example
     * ```ts
     * transfer.equals(value);
     * ```
     */
    equals(value: StreamEvmNftTransferish): boolean;
    /**
     * Converts the StreamEvmNftTransfer instance to a JSON object.
     * @returns JSON object of the StreamEvmNftTransfer instance
     * @example `transfer.toJSON()`
     */
    toJSON(): StreamEvmNftTransferJSON;
    /**
     * Converts the StreamEvmNftTransfer instance to a JSON object.
     * @returns JSON object of the StreamEvmNftTransfer instance
     * @example `transfer.toJSON()`
     */
    format(): StreamEvmNftTransferJSON;
    get chain(): EvmChain;
    get transactionHash(): string;
    get from(): EvmAddress;
    get to(): EvmAddress;
    get contract(): EvmAddress;
    get logIndex(): number;
    get tokenId(): string;
    get amount(): number;
    get tokenContractType(): string;
    get tokenName(): string;
    get tokenSymbol(): string;
    get operator(): EvmAddress | undefined;
    get triggers(): StreamTriggerOutput[] | undefined;
}
export {};
//# sourceMappingURL=StreamEvmNftTransfer.d.ts.map