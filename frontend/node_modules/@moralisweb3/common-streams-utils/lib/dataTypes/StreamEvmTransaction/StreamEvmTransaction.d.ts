import Core, { BigNumber, MoralisDataObject } from '@moralisweb3/common-core';
import { EvmAddress, EvmChain, EvmSignature } from '@moralisweb3/common-evm-utils';
import { StreamTriggerOutput } from '../StreamTriggerOutput';
import { StreamEvmTransactionInput, StreamEvmTransactionJSON } from './types';
type StreamEvmTransactionish = StreamEvmTransaction | StreamEvmTransactionInput;
/**
 * The StreamEvmTransaction class is a representation of a transaction that is returned by the Moralis Stream API
 *
 * @category DataType
 */
export declare class StreamEvmTransaction implements MoralisDataObject {
    private _data;
    constructor({ ...data }: StreamEvmTransactionInput, core: Core);
    /**
     * Create a new instance of StreamEvmTransactionish
     *
     * @param data - the StreamEvmTransactionishish type
     * @param core - the Core instance
     * @example
     * ```ts
     * const transaction = StreamEvmTransactionish.create(data);
     * ```
     * @returns an instance of StreamEvmTransaction
     */
    static create(data: StreamEvmTransactionish, core?: Core): StreamEvmTransaction;
    private static parse;
    /**
     * Compares two StreamEvmTransaction data. It checks a deep equality check of both values.
     * @param valueA - the first StreamEvmTransactionish data to compare
     * @param valueB - the second StreamEvmTransactionish data to compare
     * @returns true if the values are equal, false otherwise
     * @example
     * ```ts
     *  StreamEvmTransaction.equals(valueA, valueB);
     * ```
     */
    static equals(valueA: StreamEvmTransactionish, valueB: StreamEvmTransactionish): boolean;
    /**
     * Compares an StreamEvmTransactionish data to this StreamEvmTransaction instance.
     * @param value - the value to compare
     * @returns true if the value is equal to the current instance, false otherwise
     * @example
     * ```ts
     * transaction.equals(value);
     * ```
     */
    equals(value: StreamEvmTransactionish): boolean;
    /**
     * Converts the StreamEvmTransaction instance to a JSON object.
     * @returns JSON object of the StreamEvmTransaction instance
     * @example `transaction.toJSON()`
     */
    toJSON(): StreamEvmTransactionJSON;
    /**
     * Converts the StreamEvmTransaction instance to a JSON object.
     * @returns JSON object of the StreamEvmTransaction instance
     * @example `transaction.toJSON()`
     */
    format(): StreamEvmTransactionJSON;
    get chain(): EvmChain;
    get input(): string | undefined;
    get transactionIndex(): number;
    get fromAddress(): EvmAddress;
    get toAddress(): EvmAddress | undefined;
    get receiptGasUsed(): BigNumber | undefined;
    get receiptCumulativeGasUsed(): BigNumber | undefined;
    get receiptContractAddress(): EvmAddress | undefined;
    get signature(): EvmSignature | undefined;
    get r(): string | undefined;
    get s(): string | undefined;
    get v(): number | undefined;
    get hash(): string;
    get gas(): BigNumber | undefined;
    get gasPrice(): BigNumber | undefined;
    get nonce(): BigNumber | undefined;
    get value(): BigNumber | undefined;
    get type(): number | undefined;
    get receiptRoot(): string | undefined;
    get receiptStatus(): number | undefined;
    get triggers(): StreamTriggerOutput[] | undefined;
}
export {};
//# sourceMappingURL=StreamEvmTransaction.d.ts.map