import Core, { MoralisDataObject } from '@moralisweb3/common-core';
import { EvmAddress, EvmChain } from '@moralisweb3/common-evm-utils';
import { StreamTriggerOutput } from '../StreamTriggerOutput';
import { StreamEvmTransactionLogInput, StreamEvmTransactionLogJSON } from './types';
type StreamEvmTransactionLogish = StreamEvmTransactionLog | StreamEvmTransactionLogInput;
/**
 * The StreamEvmTransactionLog class is a representation of a transaction log that is returned by the Moralis Stream API
 *
 * @category DataType
 */
export declare class StreamEvmTransactionLog implements MoralisDataObject {
    private _data;
    constructor({ ...data }: StreamEvmTransactionLogInput, core: Core);
    /**
     * Create a new instance of StreamEvmTransactionLog
     *
     * @param data - the StreamEvmTransactionLogish type
     * @param core - the Core instance
     * @example
     * ```ts
     * const transactionLog = StreamEvmTransactionLog.create(data);
     * ```
     * @returns an instance of StreamEvmTransactionLog
     */
    static create(data: StreamEvmTransactionLogish, core?: Core): StreamEvmTransactionLog;
    private static parse;
    /**
     * Compares two StreamEvmTransactionLog data. It checks a deep equality check of both values.
     * @param valueA - the first StreamEvmTransactionLogish data to compare
     * @param valueB - the second StreamEvmTransactionLogish data to compare
     * @returns true if the values are equal, false otherwise
     * @example
     * ```ts
     *  StreamEvmTransactionLog.equals(valueA, valueB);
     * ```
     */
    static equals(valueA: StreamEvmTransactionLogish, valueB: StreamEvmTransactionLogish): boolean;
    /**
     * Compares an StreamEvmTransactionLogish data to this StreamEvmTransactionLog instance.
     * @param value - the value to compare
     * @returns true if the value is equal to the current instance, false otherwise
     * @example
     * ```ts
     * transactionLog.equals(value);
     * ```
     */
    equals(value: StreamEvmTransactionLogish): boolean;
    /**
     * Converts the StreamEvmTransactionLog instance to a JSON object.
     * @returns JSON object of the StreamEvmTransactionLog instance
     * @example `transactionLog.toJSON()`
     */
    toJSON(): StreamEvmTransactionLogJSON;
    /**
     * Converts the StreamEvmTransactionLog instance to a JSON object.
     * @returns JSON object of the StreamEvmTransactionLog instance
     * @example `transactionLog.toJSON()`
     */
    format(): StreamEvmTransactionLogJSON;
    get chain(): EvmChain;
    get logIndex(): number;
    get transactionHash(): string;
    get address(): EvmAddress;
    get data(): string;
    get topic0(): string | undefined;
    get topic1(): string | undefined;
    get topic2(): string | undefined;
    get topic3(): string | undefined;
    get triggers(): StreamTriggerOutput[] | undefined;
}
export {};
//# sourceMappingURL=StreamEvmTransactionLog.d.ts.map