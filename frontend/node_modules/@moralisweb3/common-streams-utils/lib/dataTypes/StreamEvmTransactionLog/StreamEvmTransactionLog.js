"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StreamEvmTransactionLog = void 0;
var common_core_1 = require("@moralisweb3/common-core");
var common_evm_utils_1 = require("@moralisweb3/common-evm-utils");
var StreamTriggerOutput_1 = require("../StreamTriggerOutput");
/**
 * The StreamEvmTransactionLog class is a representation of a transaction log that is returned by the Moralis Stream API
 *
 * @category DataType
 */
var StreamEvmTransactionLog = /** @class */ (function () {
    function StreamEvmTransactionLog(_a, core) {
        var data = __rest(_a, []);
        this._data = StreamEvmTransactionLog.parse(data, core);
    }
    /**
     * Create a new instance of StreamEvmTransactionLog
     *
     * @param data - the StreamEvmTransactionLogish type
     * @param core - the Core instance
     * @example
     * ```ts
     * const transactionLog = StreamEvmTransactionLog.create(data);
     * ```
     * @returns an instance of StreamEvmTransactionLog
     */
    StreamEvmTransactionLog.create = function (data, core) {
        if (data instanceof StreamEvmTransactionLog) {
            return data;
        }
        var finalCore = core !== null && core !== void 0 ? core : common_core_1.CoreProvider.getDefault();
        return new StreamEvmTransactionLog(data, finalCore);
    };
    StreamEvmTransactionLog.parse = function (data, core) {
        return __assign(__assign({}, data), { chain: common_evm_utils_1.EvmChain.create(data.chain, core), logIndex: +data.logIndex, address: common_evm_utils_1.EvmAddress.create(data.address, core), topic0: (0, common_core_1.maybe)(data.topic0), topic1: (0, common_core_1.maybe)(data.topic1), topic2: (0, common_core_1.maybe)(data.topic2), topic3: (0, common_core_1.maybe)(data.topic3), triggers: (0, common_core_1.maybe)(data.triggers, function (triggers) {
                return triggers.map(function (trigger) { return StreamTriggerOutput_1.StreamTriggerOutput.create(trigger, core); });
            }) });
    };
    /**
     * Compares two StreamEvmTransactionLog data. It checks a deep equality check of both values.
     * @param valueA - the first StreamEvmTransactionLogish data to compare
     * @param valueB - the second StreamEvmTransactionLogish data to compare
     * @returns true if the values are equal, false otherwise
     * @example
     * ```ts
     *  StreamEvmTransactionLog.equals(valueA, valueB);
     * ```
     */
    StreamEvmTransactionLog.equals = function (valueA, valueB) {
        var _a, _b;
        var transactionLogA = StreamEvmTransactionLog.create(valueA);
        var transactionLogB = StreamEvmTransactionLog.create(valueB);
        if (!transactionLogA.chain.equals(transactionLogB.chain)) {
            return false;
        }
        if (transactionLogA.transactionHash !== transactionLogB.transactionHash) {
            return false;
        }
        if (transactionLogA.logIndex !== transactionLogB.logIndex) {
            return false;
        }
        if (((_a = transactionLogA.triggers) === null || _a === void 0 ? void 0 : _a.length) !== ((_b = transactionLogB.triggers) === null || _b === void 0 ? void 0 : _b.length) ||
            !StreamTriggerOutput_1.StreamTriggerOutput.arrayEquals(transactionLogA.triggers || [], transactionLogB.triggers || [])) {
            return false;
        }
        return true;
    };
    /**
     * Compares an StreamEvmTransactionLogish data to this StreamEvmTransactionLog instance.
     * @param value - the value to compare
     * @returns true if the value is equal to the current instance, false otherwise
     * @example
     * ```ts
     * transactionLog.equals(value);
     * ```
     */
    StreamEvmTransactionLog.prototype.equals = function (value) {
        return StreamEvmTransactionLog.equals(this, value);
    };
    /**
     * Converts the StreamEvmTransactionLog instance to a JSON object.
     * @returns JSON object of the StreamEvmTransactionLog instance
     * @example `transactionLog.toJSON()`
     */
    StreamEvmTransactionLog.prototype.toJSON = function () {
        var _a = this._data, chain = _a.chain, address = _a.address, triggers = _a.triggers, data = __rest(_a, ["chain", "address", "triggers"]);
        return __assign(__assign({}, data), { chain: chain.format(), address: address.format(), triggers: triggers === null || triggers === void 0 ? void 0 : triggers.map(function (trigger) { return trigger.format(); }) });
    };
    /**
     * Converts the StreamEvmTransactionLog instance to a JSON object.
     * @returns JSON object of the StreamEvmTransactionLog instance
     * @example `transactionLog.toJSON()`
     */
    StreamEvmTransactionLog.prototype.format = function () {
        return this.toJSON();
    };
    Object.defineProperty(StreamEvmTransactionLog.prototype, "chain", {
        get: function () {
            return this._data.chain;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StreamEvmTransactionLog.prototype, "logIndex", {
        get: function () {
            return this._data.logIndex;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StreamEvmTransactionLog.prototype, "transactionHash", {
        get: function () {
            return this._data.transactionHash;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StreamEvmTransactionLog.prototype, "address", {
        get: function () {
            return this._data.address;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StreamEvmTransactionLog.prototype, "data", {
        get: function () {
            return this._data.data;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StreamEvmTransactionLog.prototype, "topic0", {
        get: function () {
            return this._data.topic0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StreamEvmTransactionLog.prototype, "topic1", {
        get: function () {
            return this._data.topic1;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StreamEvmTransactionLog.prototype, "topic2", {
        get: function () {
            return this._data.topic2;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StreamEvmTransactionLog.prototype, "topic3", {
        get: function () {
            return this._data.topic3;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StreamEvmTransactionLog.prototype, "triggers", {
        get: function () {
            return this._data.triggers;
        },
        enumerable: false,
        configurable: true
    });
    return StreamEvmTransactionLog;
}());
exports.StreamEvmTransactionLog = StreamEvmTransactionLog;
//# sourceMappingURL=StreamEvmTransactionLog.js.map