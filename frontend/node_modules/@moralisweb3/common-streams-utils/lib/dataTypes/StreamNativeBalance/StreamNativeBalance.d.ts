import Core, { MoralisDataObject } from '@moralisweb3/common-core';
import { EvmAddress, EvmNative } from '@moralisweb3/common-evm-utils';
import { StreamNativeBalanceData, StreamNativeBalanceInput, StreamNativeBalanceJSON } from './types';
export type StreamNativeBalanceish = StreamNativeBalance | StreamNativeBalanceInput | StreamNativeBalanceData;
/**
 * The NativeBalance class is a representation of a nativeBalance-address pair
 *
 * @category DataType
 */
export declare class StreamNativeBalance implements MoralisDataObject {
    private readonly _data;
    constructor(data: StreamNativeBalanceInput, core: Core);
    static create(data: StreamNativeBalanceish, core?: Core): StreamNativeBalance;
    private static parse;
    static equals(valueA: StreamNativeBalanceish, valueB: StreamNativeBalanceish): boolean;
    /**
     * Compares an NativeBalance data to this NativeBalance instance.
     * @param value - the value to compare
     * @returns true if the value is equal to the current instance, false otherwise
     * @example
     * ```ts
     * nativeBalanceTrigger.equals(value);
     * ```
     */
    equals(value: StreamNativeBalanceish): boolean;
    /**
     * Converts the NativeBalance instance to a JSON object.
     * @returns JSON object of the NativeBalance instance
     * @example `nativeBalanceTrigger.toJSON()`
     */
    toJSON(): StreamNativeBalanceJSON;
    /**
     * Converts the NativeBalance instance to a JSON object.
     * @returns JSON object of the NativeBalance instance
     * @example `nativeBalanceTrigger.format()`
     */
    format(): StreamNativeBalanceJSON;
    get address(): EvmAddress;
    get balance(): EvmNative;
}
//# sourceMappingURL=StreamNativeBalance.d.ts.map