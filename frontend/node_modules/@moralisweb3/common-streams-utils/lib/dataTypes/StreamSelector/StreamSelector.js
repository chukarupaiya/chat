"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StreamSelector = void 0;
var common_core_1 = require("@moralisweb3/common-core");
/**
 * The StreamSelector class is a representation of a stream selector
 *
 * Use this class any time you want to use a value in your stream trigger data that is not a static value
 *
 * @category DataType
 */
var StreamSelector = /** @class */ (function () {
    /**
     * Create a new instance of StreamSelector from any valid stream data field
     *
     * @example
     * ```
     * const receiverSelector = StreamSelector.create('$to')
     * const selector = StreamSelector.create('$contract')
     * ```
     */
    function StreamSelector(data) {
        this._value = StreamSelector.parse(data);
    }
    StreamSelector.isSelectorString = function (selector) {
        if (selector instanceof StreamSelector) {
            return true;
        }
        return selector.startsWith('$');
    };
    StreamSelector.create = function (streamSelector) {
        if (streamSelector instanceof StreamSelector) {
            return streamSelector;
        }
        return new StreamSelector(streamSelector);
    };
    StreamSelector.parse = function (streamSelector) {
        if (!StreamSelector.isSelectorString(streamSelector)) {
            throw new common_core_1.CoreError({
                code: common_core_1.CoreErrorCode.INVALID_ARGUMENT,
                message: 'Invalid selector string provided',
            });
        }
        return streamSelector;
    };
    /**
     * Compares two StreamSelector data. It checks a deep equality check of both values.
     * @param valueA - the first StreamSelectorish data to compare
     * @param valueB - the second StreamSelectorish data to compare
     * @returns true if the values are equal, false otherwise
     * @example
     * ```ts
     *  StreamSelector.equals(valueA, valueB);
     * ```
     */
    StreamSelector.equals = function (valueA, valueB) {
        var streamSelectorA = StreamSelector.create(valueA);
        var streamSelectorB = StreamSelector.create(valueB);
        return streamSelectorA.value === streamSelectorB.value;
    };
    /**
     * Compares an StreamSelectorish data to this StreamSelector instance.
     * @param streamSelector - the streamSelector to compare
     * @returns true if the streamSelector is equal to the current instance, false otherwise
     * @example
     * ```ts
     * streamSelector.equals(streamSelector);
     * ```
     */
    StreamSelector.prototype.equals = function (streamSelector) {
        return StreamSelector.equals(this, streamSelector);
    };
    /**
     * Converts the StreamSelector instance to a JSON object.
     * @returns JSON object of the StreamSelector instance
     * @example `streamSelector.format()`
     */
    StreamSelector.prototype.format = function () {
        return this.value;
    };
    Object.defineProperty(StreamSelector.prototype, "value", {
        /**
         * @returns the selector path
         * @example '$from'
         */
        get: function () {
            return this._value;
        },
        enumerable: false,
        configurable: true
    });
    return StreamSelector;
}());
exports.StreamSelector = StreamSelector;
//# sourceMappingURL=StreamSelector.js.map