import Core, { MoralisDataObject } from '@moralisweb3/common-core';
import { EvmAddress } from '@moralisweb3/common-evm-utils';
import { StreamSelector } from '../StreamSelector';
import { StreamTriggerData, StreamTriggerInput, StreamTriggerJSON } from './types';
export type StreamTriggerish = StreamTrigger | StreamTriggerInput | StreamTriggerData;
/**
 * The StreamTrigger class is a representation of a stream trigger that is used by the Moralis Stream API
 *
 * @category DataType
 */
export declare class StreamTrigger implements MoralisDataObject {
    private readonly _data;
    constructor(data: StreamTriggerInput, core: Core);
    static create(data: StreamTriggerish, core?: Core): StreamTrigger;
    private static parseSelectorOrAddress;
    private static parse;
    static equals(valueA: StreamTriggerish, valueB: StreamTriggerish): boolean;
    /**
     * Compares two StreamTrigger arrays. It checks a deep equality check of both values, meaning that all the values have to be on both arrays.
     * @param valueA - the first StreamTriggerish[] data to compare
     * @param valueB - the second StreamTriggerish[] data to compare
     * @returns true if all values are equal, false otherwise
     * @example
     * ```ts
     *  StreamTrigger.arrayEquals(valueA, valueB);
     * ```
     */
    static arrayEquals(valueA: StreamTriggerish[], valueB: StreamTriggerish[]): boolean;
    /**
     * Compares an StreamTrigger data to this StreamTrigger instance.
     * @param value - the value to compare
     * @returns true if the value is equal to the current instance, false otherwise
     * @example
     * ```ts
     * streamTrigger.equals(value);
     * ```
     */
    equals(value: StreamTriggerish): boolean;
    /**
     * Converts the StreamTrigger instance to a JSON object.
     * @returns JSON object of the StreamTrigger instance
     * @example `streamTrigger.toJSON()`
     */
    toJSON(): StreamTriggerJSON;
    /**
     * Converts the StreamTrigger instance to a JSON object.
     * @returns JSON object of the StreamTrigger instance
     * @example `streamTrigger.format()`
     */
    format(): StreamTriggerJSON;
    get type(): "tx" | "log" | "erc20transfer" | "erc20approval" | "nfttransfer";
    get contractAddress(): StreamSelector | EvmAddress;
    get functionAbi(): unknown;
    get inputs(): (string | string[])[] | undefined;
    get topic0(): string | undefined;
    get callFrom(): StreamSelector | EvmAddress | undefined;
}
//# sourceMappingURL=StreamTrigger.d.ts.map