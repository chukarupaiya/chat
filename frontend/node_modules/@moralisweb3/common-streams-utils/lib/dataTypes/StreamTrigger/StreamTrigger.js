"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StreamTrigger = void 0;
var common_core_1 = require("@moralisweb3/common-core");
var common_evm_utils_1 = require("@moralisweb3/common-evm-utils");
var StreamSelector_1 = require("../StreamSelector");
/**
 * The StreamTrigger class is a representation of a stream trigger that is used by the Moralis Stream API
 *
 * @category DataType
 */
var StreamTrigger = /** @class */ (function () {
    function StreamTrigger(data, core) {
        this._data = StreamTrigger.parse(data, core);
    }
    StreamTrigger.create = function (data, core) {
        if (data instanceof StreamTrigger) {
            return data;
        }
        var finalCore = core !== null && core !== void 0 ? core : common_core_1.CoreProvider.getDefault();
        return new StreamTrigger(data, finalCore);
    };
    StreamTrigger.parseSelectorOrAddress = function (input, core) {
        var result;
        // If it is not an EvmAddress, it can be a string, but only the ones that are selectors should be treated that way
        if (!(input instanceof common_evm_utils_1.EvmAddress) && StreamSelector_1.StreamSelector.isSelectorString(input)) {
            result = StreamSelector_1.StreamSelector.create(input);
        }
        else {
            result = common_evm_utils_1.EvmAddress.create(input, core);
        }
        return result;
    };
    // eslint-disable-next-line complexity
    StreamTrigger.equals = function (valueA, valueB) {
        var _a, _b;
        var streamTriggerA = StreamTrigger.create(valueA);
        var streamTriggerB = StreamTrigger.create(valueB);
        if (streamTriggerA.type !== streamTriggerB.type) {
            return false;
        }
        // contractAddress can be a StreamSelector or an EvmAddress. It is easier to compare them as strings
        if (streamTriggerA.contractAddress.format() !== streamTriggerB.contractAddress.format()) {
            return false;
        }
        if (streamTriggerA.functionAbi !== streamTriggerB.functionAbi) {
            return false;
        }
        if (((_a = streamTriggerA.inputs) === null || _a === void 0 ? void 0 : _a.length) !== ((_b = streamTriggerB.inputs) === null || _b === void 0 ? void 0 : _b.length)) {
            return false;
        }
        var triggerInputsA = streamTriggerA.inputs || [];
        var triggerInputsB = streamTriggerB.inputs || [];
        for (var i = 0; i < (triggerInputsA === null || triggerInputsA === void 0 ? void 0 : triggerInputsA.length); i++) {
            if (triggerInputsA[i] !== triggerInputsB[i]) {
                return false;
            }
        }
        if (streamTriggerA.topic0 !== streamTriggerB.topic0) {
            return false;
        }
        if (streamTriggerA.callFrom !== streamTriggerB.callFrom) {
            return false;
        }
        return true;
    };
    /**
     * Compares two StreamTrigger arrays. It checks a deep equality check of both values, meaning that all the values have to be on both arrays.
     * @param valueA - the first StreamTriggerish[] data to compare
     * @param valueB - the second StreamTriggerish[] data to compare
     * @returns true if all values are equal, false otherwise
     * @example
     * ```ts
     *  StreamTrigger.arrayEquals(valueA, valueB);
     * ```
     */
    StreamTrigger.arrayEquals = function (valueA, valueB) {
        if (valueA.length !== valueB.length) {
            return false;
        }
        var triggersA = valueA.map(function (trigger) { return StreamTrigger.create(trigger); });
        var triggersB = valueB.map(function (trigger) { return StreamTrigger.create(trigger); });
        var seenTriggersB = Array(triggersB.length).fill(false);
        var _loop_1 = function (i) {
            var indexB = triggersB.findIndex(function (triggerB) { return triggerB.equals(triggersA[i]); });
            if (indexB < 0) {
                return { value: false };
            }
            seenTriggersB[indexB] = true;
        };
        for (var i = 0; i < triggersA.length; i++) {
            var state_1 = _loop_1(i);
            if (typeof state_1 === "object")
                return state_1.value;
        }
        if (seenTriggersB.some(function (seen) { return !seen; })) {
            return false;
        }
        return true;
    };
    /**
     * Compares an StreamTrigger data to this StreamTrigger instance.
     * @param value - the value to compare
     * @returns true if the value is equal to the current instance, false otherwise
     * @example
     * ```ts
     * streamTrigger.equals(value);
     * ```
     */
    StreamTrigger.prototype.equals = function (value) {
        return StreamTrigger.equals(this, value);
    };
    /**
     * Converts the StreamTrigger instance to a JSON object.
     * @returns JSON object of the StreamTrigger instance
     * @example `streamTrigger.toJSON()`
     */
    StreamTrigger.prototype.toJSON = function () {
        var _a = this._data, contractAddress = _a.contractAddress, callFrom = _a.callFrom, data = __rest(_a, ["contractAddress", "callFrom"]);
        return __assign(__assign({}, data), { contractAddress: contractAddress.format(), callFrom: callFrom === null || callFrom === void 0 ? void 0 : callFrom.format() });
    };
    /**
     * Converts the StreamTrigger instance to a JSON object.
     * @returns JSON object of the StreamTrigger instance
     * @example `streamTrigger.format()`
     */
    StreamTrigger.prototype.format = function () {
        return this.toJSON();
    };
    Object.defineProperty(StreamTrigger.prototype, "type", {
        get: function () {
            return this._data.type;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StreamTrigger.prototype, "contractAddress", {
        get: function () {
            return this._data.contractAddress;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StreamTrigger.prototype, "functionAbi", {
        get: function () {
            return this._data.functionAbi;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StreamTrigger.prototype, "inputs", {
        get: function () {
            return this._data.inputs;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StreamTrigger.prototype, "topic0", {
        get: function () {
            return this._data.topic0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StreamTrigger.prototype, "callFrom", {
        get: function () {
            return this._data.callFrom;
        },
        enumerable: false,
        configurable: true
    });
    StreamTrigger.parse = function (data, core) {
        var contractAddressInput = data.contractAddress, callFromInput = data.callFrom, input = __rest(data, ["contractAddress", "callFrom"]);
        var contractAddress = StreamTrigger.parseSelectorOrAddress(contractAddressInput, core);
        var callFrom = (0, common_core_1.maybe)(callFromInput, function (value) { return StreamTrigger.parseSelectorOrAddress(value, core); });
        return __assign(__assign({}, input), { contractAddress: contractAddress, callFrom: callFrom });
    };
    return StreamTrigger;
}());
exports.StreamTrigger = StreamTrigger;
//# sourceMappingURL=StreamTrigger.js.map