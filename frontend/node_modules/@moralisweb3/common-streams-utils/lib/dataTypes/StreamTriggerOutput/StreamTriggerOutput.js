"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StreamTriggerOutput = void 0;
var common_core_1 = require("@moralisweb3/common-core");
/**
 * The StreamTrigger class is a representation of a stream trigger that is used by the Moralis Stream API
 *
 * @category DataType
 */
var StreamTriggerOutput = /** @class */ (function () {
    function StreamTriggerOutput(data, core) {
        this._data = StreamTriggerOutput.parse(data, core);
    }
    StreamTriggerOutput.create = function (data, core) {
        if (data instanceof StreamTriggerOutput) {
            return data;
        }
        var finalCore = core !== null && core !== void 0 ? core : common_core_1.CoreProvider.getDefault();
        return new StreamTriggerOutput(data, finalCore);
    };
    /**
     * Compares two StreamTriggerOutput data. It checks a deep equality check of both values.
     * @param valueA - the first StreamTriggerOutputish data to compare
     * @param valueB - the second StreamTriggerOutputish data to compare
     * @returns true if the values are equal, false otherwise
     * @example
     * ```ts
     *  StreamTriggerOutput.equals(valueA, valueB);
     * ```
     */
    StreamTriggerOutput.equals = function (valueA, valueB) {
        var streamTriggerOutputA = StreamTriggerOutput.create(valueA);
        var streamTriggerOutputB = StreamTriggerOutput.create(valueB);
        return (streamTriggerOutputA.name === streamTriggerOutputB.name &&
            streamTriggerOutputA.value === streamTriggerOutputB.value);
    };
    /**
     * Compares two StreamTriggerOutput arrays. It checks a deep equality check of both values, meaning that all the values have to be on both arrays.
     * @param valueA - the first StreamTriggerOutputish[] data to compare
     * @param valueB - the second StreamTriggerOutputish[] data to compare
     * @returns true if all values are equal, false otherwise
     * @example
     * ```ts
     *  StreamTriggerOutput.arrayEquals(valueA, valueB);
     * ```
     */
    StreamTriggerOutput.arrayEquals = function (valueA, valueB) {
        if (valueA.length !== valueB.length) {
            return false;
        }
        var triggerOutputsA = valueA.map(function (triggerOutput) { return StreamTriggerOutput.create(triggerOutput); });
        var triggerOutputsB = valueB.map(function (triggerOutput) { return StreamTriggerOutput.create(triggerOutput); });
        triggerOutputsA.sort(function (a, b) { return (b.name > a.name ? 1 : -1); });
        triggerOutputsB.sort(function (a, b) { return (b.name > a.name ? 1 : -1); });
        for (var i = 0; i < (triggerOutputsA === null || triggerOutputsA === void 0 ? void 0 : triggerOutputsA.length); i++) {
            if (!triggerOutputsA[i].equals(triggerOutputsB[i])) {
                return false;
            }
        }
        return true;
    };
    /**
     * Compares an StreamTriggerOutputish data to this StreamTriggerOutput instance.
     * @param value - the value to compare
     * @returns true if the value is equal to the current instance, false otherwise
     * @example
     * ```ts
     * streamTriggerOutput.equals(value);
     * ```
     */
    StreamTriggerOutput.prototype.equals = function (value) {
        return StreamTriggerOutput.equals(this, value);
    };
    /**
     * Converts the StreamTriggerOutput instance to a JSON object.
     * @returns JSON object of the StreamTriggerOutput instance
     * @example `streamTriggerOutput.toJSON()`
     */
    StreamTriggerOutput.prototype.toJSON = function () {
        var data = __rest(this._data, []);
        return __assign({}, data);
    };
    /**
     * Converts the StreamTriggerOutput instance to a JSON object.
     * @returns JSON object of the StreamTriggerOutput instance
     * @example `streamTriggerOutput.format()`
     */
    StreamTriggerOutput.prototype.format = function () {
        return this.toJSON();
    };
    Object.defineProperty(StreamTriggerOutput.prototype, "name", {
        get: function () {
            return this._data.name;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StreamTriggerOutput.prototype, "value", {
        get: function () {
            return this._data.value;
        },
        enumerable: false,
        configurable: true
    });
    StreamTriggerOutput.parse = function (data, _core) {
        return __assign({}, data);
    };
    return StreamTriggerOutput;
}());
exports.StreamTriggerOutput = StreamTriggerOutput;
//# sourceMappingURL=StreamTriggerOutput.js.map