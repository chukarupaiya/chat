import { Camelize, Operation, ResponseAdapter } from '@moralisweb3/common-core';
import { AptosNetworkish } from '@moralisweb3/common-aptos-utils';
import { AptosStream } from '../../dataTypes';
import { operations } from '../openapi';
type OperationId = 'aptosStreamsCreate';
type BodyParams = operations[OperationId]['requestBody']['content']['application/json'];
type RequestParams = BodyParams;
type SuccessResponse = operations[OperationId]['responses']['200']['content']['application/json'];
export interface CreateStreamAptosRequest extends Camelize<Omit<RequestParams, 'network'>> {
    network: AptosNetworkish[];
}
export type CreateStreamAptosJSONRequest = ReturnType<typeof serializeRequest>;
export type CreateStreamAptosJSONResponse = SuccessResponse;
export type CreateStreamAptosResponse = ReturnType<typeof deserializeResponse>;
export interface CreateStreamAptosResponseAdapter extends ResponseAdapter<CreateStreamAptosResponse, CreateStreamAptosJSONResponse> {
}
export declare const createStreamAptosOperation: Operation<CreateStreamAptosRequest, CreateStreamAptosJSONRequest, CreateStreamAptosResponse, CreateStreamAptosJSONResponse>;
declare function deserializeResponse(jsonResponse: CreateStreamAptosJSONResponse): AptosStream;
declare function serializeRequest(request: CreateStreamAptosRequest): {
    allAddresses: boolean | undefined;
    demo: boolean | undefined;
    description: string;
    includeChanges: boolean | undefined;
    includeEvents: boolean | undefined;
    includePayload: boolean | undefined;
    network: ("mainnet" | "testnet" | "devnet")[];
    events: string[] | undefined;
    functions: string[] | undefined;
    tag: string;
    webhookUrl: string;
};
export {};
//# sourceMappingURL=createStreamAptosOperation.d.ts.map