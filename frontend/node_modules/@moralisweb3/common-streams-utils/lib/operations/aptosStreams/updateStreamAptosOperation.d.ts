import { Camelize, Operation, ResponseAdapter } from '@moralisweb3/common-core';
import { AptosNetworkish } from '@moralisweb3/common-aptos-utils';
import { AptosStream } from '../../dataTypes';
import { operations } from '../openapi';
type OperationId = 'aptosStreamsUpdate';
type PathParams = operations[OperationId]['parameters']['path'];
type BodyParams = operations[OperationId]['requestBody']['content']['application/json'];
type RequestParams = PathParams & BodyParams;
type SuccessResponse = operations[OperationId]['responses']['200']['content']['application/json'];
export interface UpdateStreamAptosRequest extends Camelize<Omit<RequestParams, 'network'>> {
    network: AptosNetworkish[];
}
export type UpdateStreamAptosJSONRequest = ReturnType<typeof serializeRequest>;
export type UpdateStreamAptosJSONResponse = SuccessResponse;
export type UpdateStreamAptosResponse = ReturnType<typeof deserializeResponse>;
export interface UpdateStreamAptosResponseAdapter extends ResponseAdapter<UpdateStreamAptosResponse, UpdateStreamAptosJSONResponse> {
}
export declare const updateStreamAptosOperation: Operation<UpdateStreamAptosRequest, UpdateStreamAptosJSONRequest, UpdateStreamAptosResponse, UpdateStreamAptosJSONResponse>;
declare function deserializeResponse(jsonResponse: UpdateStreamAptosJSONResponse): AptosStream;
declare function serializeRequest(request: UpdateStreamAptosRequest): {
    id: string;
    allAddresses: boolean | undefined;
    demo: boolean | undefined;
    description: string | undefined;
    includeChanges: boolean | undefined;
    includeEvents: boolean | undefined;
    includePayload: boolean | undefined;
    network: ("mainnet" | "testnet" | "devnet")[];
    events: string[] | undefined;
    functions: string[] | undefined;
    tag: string | undefined;
    webhookUrl: string | undefined;
};
export {};
//# sourceMappingURL=updateStreamAptosOperation.d.ts.map