import { Camelize, Operation } from '@moralisweb3/common-core';
import { operations } from '../openapi';
type OperationId = 'ReplayHistory';
type PathParams = operations[OperationId]['parameters']['path'];
type RequestParams = PathParams;
type SuccessResponse = operations[OperationId]['responses']['200']['content']['application/json'];
export interface ReplayHistoryRequest extends Camelize<RequestParams> {
}
export type ReplayHistoryJSONRequest = ReturnType<typeof serializeRequest>;
export type ReplayHistoryJSONResponse = SuccessResponse;
export type ReplayHistoryResponse = ReturnType<typeof deserializeResponse>;
export declare const replayHistoryOperation: Operation<ReplayHistoryRequest, ReplayHistoryJSONRequest, ReplayHistoryResponse, ReplayHistoryJSONResponse>;
declare function deserializeResponse(jsonResponse: ReplayHistoryJSONResponse): {
    id: string;
    date: string;
    payload?: (Partial<{
        block: {
            number: string;
            hash: string;
            timestamp: string;
        };
        chainId: string;
        logs: {
            triggers?: {
                value: unknown;
                name: string;
            }[] | undefined;
            logIndex: string;
            transactionHash: string;
            address: string;
            data: string;
            topic0: string | null;
            topic1: string | null;
            topic2: string | null;
            topic3: string | null;
        }[];
        txs: {
            triggers?: {
                value: unknown;
                name: string;
            }[] | undefined;
            hash: string;
            gas: string | null;
            gasPrice: string | null;
            nonce: string | null;
            input: string | null;
            transactionIndex: string;
            fromAddress: string;
            toAddress: string | null;
            value: string | null;
            type: string | null;
            v: string | null;
            r: string | null;
            s: string | null;
            receiptCumulativeGasUsed: string | null;
            receiptGasUsed: string | null;
            receiptContractAddress: string | null;
            receiptRoot: string | null;
            receiptStatus: string | null;
        }[];
        txsInternal: {
            from: string | null;
            to: string | null;
            value: string | null;
            transactionHash: string;
            gas: string | null;
        }[];
        abi: {
            anonymous?: boolean | undefined;
            constant?: boolean | undefined;
            inputs?: {
                name: string;
                type: string;
                indexed?: boolean | undefined;
                components?: any[] | undefined;
                internalType?: string | undefined;
            }[] | undefined;
            name?: string | undefined;
            outputs?: {
                name: string;
                type: string;
                components?: any[] | undefined;
                internalType?: string | undefined;
            }[] | undefined;
            payable?: boolean | undefined;
            stateMutability?: string | undefined;
            type: string;
            gas?: number | undefined;
        }[];
        retries: number;
        confirmed: boolean;
        tag: string;
        streamId: string;
    }> & Partial<{
        block: {
            lastVersion: string;
            firstVersion: string;
            hash: string;
            timestamp: string;
            number: string;
        };
        changes: unknown[];
        coinDeposits: {
            sequenceNumber: string;
            valueWithDecimals: string;
            coin: {
                symbol: string;
                decimals: number;
                name: string;
            };
            address: string;
            value: string;
        }[];
        coinTransfers: {
            transaction: string;
            valueWithDecimals: number;
            from: string;
            value: string;
            to: string;
            coin: {
                symbol: string;
                decimals: number;
                name: string;
            };
        }[];
        coinWithdrawals: {
            sequenceNumber: string;
            valueWithDecimals: string;
            coin: {
                symbol: string;
                decimals: number;
                name: string;
            };
            address: string;
            value: string;
        }[];
        events: unknown[];
        network: "mainnet" | "testnet" | "devnet";
        payloads: unknown[];
        retries: number;
        streamId: string;
        tag: string;
        transactions: {
            gasUnitPrice: string;
            type: string;
            gasUsed: string;
            eventChangeHash: string;
            stateChangeHash: string;
            gasLimit: string;
            sender: string;
            success: boolean;
            hash: string;
        }[];
    }>) | undefined;
    tinyPayload: {
        chainId: string;
        confirmed: boolean;
        block: string;
        records: number;
        retries: number;
    };
    errorMessage: string;
    webhookUrl: string;
    streamId: string;
    tag: string;
};
declare function serializeRequest(request: ReplayHistoryRequest): {
    streamId: string;
    id: string;
};
export {};
//# sourceMappingURL=replayHistoryOperation.d.ts.map