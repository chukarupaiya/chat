"use strict";
// CAUTION: This file is automatically generated. Do not edit it manually!
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClientSolApi = void 0;
var common_sol_utils_1 = require("@moralisweb3/common-sol-utils");
var api_utils_1 = require("@moralisweb3/api-utils");
var common_core_1 = require("@moralisweb3/common-core");
var ClientSolApi = /** @class */ (function (_super) {
    __extends(ClientSolApi, _super);
    function ClientSolApi() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.account = {
            getBalance: function (request) {
                return new api_utils_1.OperationResolver(common_sol_utils_1.getBalanceOperation, _this.baseUrl, _this.core).fetch(request);
            },
            getNFTs: function (request) {
                return new api_utils_1.OperationResolver(common_sol_utils_1.getNFTsOperation, _this.baseUrl, _this.core).fetch(request);
            },
            getPortfolio: function (request) {
                return new api_utils_1.OperationResolver(common_sol_utils_1.getPortfolioOperation, _this.baseUrl, _this.core).fetch(request);
            },
            getSPL: function (request) {
                return new api_utils_1.OperationResolver(common_sol_utils_1.getSPLOperation, _this.baseUrl, _this.core).fetch(request);
            },
        };
        _this.nft = {
            getNFTMetadata: function (request) {
                return new api_utils_1.OperationResolver(common_sol_utils_1.getNFTMetadataOperation, _this.baseUrl, _this.core).fetch(request);
            },
        };
        _this.token = {
            getTokenPrice: function (request) {
                return new api_utils_1.OperationResolver(common_sol_utils_1.getTokenPriceOperation, _this.baseUrl, _this.core).fetch(request);
            },
        };
        return _this;
    }
    return ClientSolApi;
}(common_core_1.ApiModule));
exports.ClientSolApi = ClientSolApi;
//# sourceMappingURL=ClientSolApi.js.map