import { ApiModule, Core } from '@moralisweb3/common-core';
import { VerifySignatureOptions } from './methods/verifySignature';
import { IWebhook } from '@moralisweb3/streams-typings';
export declare class Streams extends ApiModule {
    static readonly moduleName = "streams";
    static create(core?: Core): Streams;
    private constructor();
    setup(): void;
    start(): void;
    readonly add: import("./methods/create").MakeCreateAptosStream & import("./methods/create").MakeCreateEvmStream;
    readonly update: import("./methods/update").MakeUpdateAptosStream & import("./methods/update").MakeUpdateEvmStream;
    readonly delete: import("./methods/delete").MakeDeleteAptosStream & import("./methods/delete").MakeDeleteEvmStream;
    readonly getAll: import("./methods/getAll").MakeGetAptosStream & import("./methods/getAll").MakeGetEvmStream;
    readonly getById: import("./methods/getById").MakeGetAptosStream & import("./methods/getById").MakeGetEvmStream;
    readonly updateStatus: import("./methods/updateStatus").MakeUpdateAptosStreamStatus & import("./methods/updateStatus").MakeUpdateEvmStreamStatus;
    readonly addAddress: import("./methods/addAddress").MakeAddAddressAptosStream & import("./methods/addAddress").MakeAddAddressEvmStream;
    readonly getAddresses: import("./methods/getAddresses").MakeGetAddressesAptos & import("./methods/getAddresses").MakeGetAddressesEvm;
    readonly deleteAddress: import("./methods/deleteAddress").MakeDeleteAddressAptosStream & import("./methods/deleteAddress").MakeDeleteAddressEvmStream;
    readonly getHistory: (request: import("@moralisweb3/common-streams-utils").GetHistoryRequest) => Promise<import("@moralisweb3/common-core").PaginatedResponseAdapter<{
        id: string;
        date: string;
        payload?: (Partial<{
            block: {
                number: string;
                hash: string;
                timestamp: string;
            };
            chainId: string;
            logs: {
                triggers?: {
                    value: unknown;
                    name: string;
                }[] | undefined;
                logIndex: string;
                transactionHash: string;
                address: string;
                data: string;
                topic0: string | null;
                topic1: string | null;
                topic2: string | null;
                topic3: string | null;
            }[];
            txs: {
                triggers?: {
                    value: unknown;
                    name: string;
                }[] | undefined;
                hash: string;
                gas: string | null;
                gasPrice: string | null;
                nonce: string | null;
                input: string | null;
                transactionIndex: string;
                fromAddress: string;
                toAddress: string | null;
                value: string | null;
                type: string | null;
                v: string | null;
                r: string | null;
                s: string | null;
                receiptCumulativeGasUsed: string | null;
                receiptGasUsed: string | null;
                receiptContractAddress: string | null;
                receiptRoot: string | null;
                receiptStatus: string | null;
            }[];
            txsInternal: {
                from: string | null;
                to: string | null;
                value: string | null;
                transactionHash: string;
                gas: string | null;
            }[];
            abi: {
                anonymous?: boolean | undefined;
                constant?: boolean | undefined;
                inputs?: {
                    name: string;
                    type: string;
                    indexed?: boolean | undefined;
                    components?: any[] | undefined;
                    internalType?: string | undefined;
                }[] | undefined;
                name?: string | undefined;
                outputs?: {
                    name: string;
                    type: string;
                    components?: any[] | undefined;
                    internalType?: string | undefined;
                }[] | undefined;
                payable?: boolean | undefined;
                stateMutability?: string | undefined;
                type: string;
                gas?: number | undefined;
            }[];
            retries: number;
            confirmed: boolean;
            tag: string;
            streamId: string;
        }> & Partial<{
            block: {
                lastVersion: string;
                firstVersion: string;
                hash: string;
                timestamp: string;
                number: string;
            };
            changes: unknown[];
            coinDeposits: {
                sequenceNumber: string;
                valueWithDecimals: string;
                coin: {
                    symbol: string;
                    decimals: number;
                    name: string;
                };
                address: string;
                value: string;
            }[];
            coinTransfers: {
                transaction: string;
                valueWithDecimals: number;
                from: string;
                value: string;
                to: string;
                coin: {
                    symbol: string;
                    decimals: number;
                    name: string;
                };
            }[];
            coinWithdrawals: {
                sequenceNumber: string;
                valueWithDecimals: string;
                coin: {
                    symbol: string;
                    decimals: number;
                    name: string;
                };
                address: string;
                value: string;
            }[];
            events: unknown[];
            network: "mainnet" | "testnet" | "devnet";
            payloads: unknown[];
            retries: number;
            streamId: string;
            tag: string;
            transactions: {
                gasUnitPrice: string;
                type: string;
                gasUsed: string;
                eventChangeHash: string;
                stateChangeHash: string;
                gasLimit: string;
                sender: string;
                success: boolean;
                hash: string;
            }[];
        }>) | undefined;
        tinyPayload: {
            chainId: string;
            confirmed: boolean;
            block: string;
            records: number;
            retries: number;
        };
        errorMessage: string;
        webhookUrl: string;
        streamId: string;
        tag: string;
    }[], {
        id: string;
        date: string;
        payload?: (Partial<{
            block: {
                number: string;
                hash: string;
                timestamp: string;
            };
            chainId: string;
            logs: {
                triggers?: {
                    value: unknown;
                    name: string;
                }[] | undefined;
                logIndex: string;
                transactionHash: string;
                address: string;
                data: string;
                topic0: string | null;
                topic1: string | null;
                topic2: string | null;
                topic3: string | null;
            }[];
            txs: {
                triggers?: {
                    value: unknown;
                    name: string;
                }[] | undefined;
                hash: string;
                gas: string | null;
                gasPrice: string | null;
                nonce: string | null;
                input: string | null;
                transactionIndex: string;
                fromAddress: string;
                toAddress: string | null;
                value: string | null;
                type: string | null;
                v: string | null;
                r: string | null;
                s: string | null;
                receiptCumulativeGasUsed: string | null;
                receiptGasUsed: string | null;
                receiptContractAddress: string | null;
                receiptRoot: string | null;
                receiptStatus: string | null;
            }[];
            txsInternal: {
                from: string | null;
                to: string | null;
                value: string | null;
                transactionHash: string;
                gas: string | null;
            }[];
            abi: {
                anonymous?: boolean | undefined;
                constant?: boolean | undefined;
                inputs?: {
                    name: string;
                    type: string;
                    indexed?: boolean | undefined;
                    components?: any[] | undefined;
                    internalType?: string | undefined;
                }[] | undefined;
                name?: string | undefined;
                outputs?: {
                    name: string;
                    type: string;
                    components?: any[] | undefined;
                    internalType?: string | undefined;
                }[] | undefined;
                payable?: boolean | undefined;
                stateMutability?: string | undefined;
                type: string;
                gas?: number | undefined;
            }[];
            retries: number;
            confirmed: boolean;
            tag: string;
            streamId: string;
        }> & Partial<{
            block: {
                lastVersion: string;
                firstVersion: string;
                hash: string;
                timestamp: string;
                number: string;
            };
            changes: unknown[];
            coinDeposits: {
                sequenceNumber: string;
                valueWithDecimals: string;
                coin: {
                    symbol: string;
                    decimals: number;
                    name: string;
                };
                address: string;
                value: string;
            }[];
            coinTransfers: {
                transaction: string;
                valueWithDecimals: number;
                from: string;
                value: string;
                to: string;
                coin: {
                    symbol: string;
                    decimals: number;
                    name: string;
                };
            }[];
            coinWithdrawals: {
                sequenceNumber: string;
                valueWithDecimals: string;
                coin: {
                    symbol: string;
                    decimals: number;
                    name: string;
                };
                address: string;
                value: string;
            }[];
            events: unknown[];
            network: "mainnet" | "testnet" | "devnet";
            payloads: unknown[];
            retries: number;
            streamId: string;
            tag: string;
            transactions: {
                gasUnitPrice: string;
                type: string;
                gasUsed: string;
                eventChangeHash: string;
                stateChangeHash: string;
                gasLimit: string;
                sender: string;
                success: boolean;
                hash: string;
            }[];
        }>) | undefined;
        tinyPayload: {
            chainId: string;
            confirmed: boolean;
            block: string;
            records: number;
            retries: number;
        };
        errorMessage: string;
        webhookUrl: string;
        streamId: string;
        tag: string;
    }[]>>;
    readonly retry: (request: import("@moralisweb3/common-streams-utils").ReplayHistoryRequest) => Promise<import("@moralisweb3/common-core").ResponseAdapter<{
        id: string;
        date: string;
        payload?: (Partial<{
            block: {
                number: string;
                hash: string;
                timestamp: string;
            };
            chainId: string;
            logs: {
                triggers?: {
                    value: unknown;
                    name: string;
                }[] | undefined;
                logIndex: string;
                transactionHash: string;
                address: string;
                data: string;
                topic0: string | null;
                topic1: string | null;
                topic2: string | null;
                topic3: string | null;
            }[];
            txs: {
                triggers?: {
                    value: unknown;
                    name: string;
                }[] | undefined;
                hash: string;
                gas: string | null;
                gasPrice: string | null;
                nonce: string | null;
                input: string | null;
                transactionIndex: string;
                fromAddress: string;
                toAddress: string | null;
                value: string | null;
                type: string | null;
                v: string | null;
                r: string | null;
                s: string | null;
                receiptCumulativeGasUsed: string | null;
                receiptGasUsed: string | null;
                receiptContractAddress: string | null;
                receiptRoot: string | null;
                receiptStatus: string | null;
            }[];
            txsInternal: {
                from: string | null;
                to: string | null;
                value: string | null;
                transactionHash: string;
                gas: string | null;
            }[];
            abi: {
                anonymous?: boolean | undefined;
                constant?: boolean | undefined;
                inputs?: {
                    name: string;
                    type: string;
                    indexed?: boolean | undefined;
                    components?: any[] | undefined;
                    internalType?: string | undefined;
                }[] | undefined;
                name?: string | undefined;
                outputs?: {
                    name: string;
                    type: string;
                    components?: any[] | undefined;
                    internalType?: string | undefined;
                }[] | undefined;
                payable?: boolean | undefined;
                stateMutability?: string | undefined;
                type: string;
                gas?: number | undefined;
            }[];
            retries: number;
            confirmed: boolean;
            tag: string;
            streamId: string;
        }> & Partial<{
            block: {
                lastVersion: string;
                firstVersion: string;
                hash: string;
                timestamp: string;
                number: string;
            };
            changes: unknown[];
            coinDeposits: {
                sequenceNumber: string;
                valueWithDecimals: string;
                coin: {
                    symbol: string;
                    decimals: number;
                    name: string;
                };
                address: string;
                value: string;
            }[];
            coinTransfers: {
                transaction: string;
                valueWithDecimals: number;
                from: string;
                value: string;
                to: string;
                coin: {
                    symbol: string;
                    decimals: number;
                    name: string;
                };
            }[];
            coinWithdrawals: {
                sequenceNumber: string;
                valueWithDecimals: string;
                coin: {
                    symbol: string;
                    decimals: number;
                    name: string;
                };
                address: string;
                value: string;
            }[];
            events: unknown[];
            network: "mainnet" | "testnet" | "devnet";
            payloads: unknown[];
            retries: number;
            streamId: string;
            tag: string;
            transactions: {
                gasUnitPrice: string;
                type: string;
                gasUsed: string;
                eventChangeHash: string;
                stateChangeHash: string;
                gasLimit: string;
                sender: string;
                success: boolean;
                hash: string;
            }[];
        }>) | undefined;
        tinyPayload: {
            chainId: string;
            confirmed: boolean;
            block: string;
            records: number;
            retries: number;
        };
        errorMessage: string;
        webhookUrl: string;
        streamId: string;
        tag: string;
    }, {
        id: string;
        date: string;
        payload?: (Partial<{
            block: {
                number: string;
                hash: string;
                timestamp: string;
            };
            chainId: string;
            logs: {
                triggers?: {
                    value: unknown;
                    name: string;
                }[] | undefined;
                logIndex: string;
                transactionHash: string;
                address: string;
                data: string;
                topic0: string | null;
                topic1: string | null;
                topic2: string | null;
                topic3: string | null;
            }[];
            txs: {
                triggers?: {
                    value: unknown;
                    name: string;
                }[] | undefined;
                hash: string;
                gas: string | null;
                gasPrice: string | null;
                nonce: string | null;
                input: string | null;
                transactionIndex: string;
                fromAddress: string;
                toAddress: string | null;
                value: string | null;
                type: string | null;
                v: string | null;
                r: string | null;
                s: string | null;
                receiptCumulativeGasUsed: string | null;
                receiptGasUsed: string | null;
                receiptContractAddress: string | null;
                receiptRoot: string | null;
                receiptStatus: string | null;
            }[];
            txsInternal: {
                from: string | null;
                to: string | null;
                value: string | null;
                transactionHash: string;
                gas: string | null;
            }[];
            abi: {
                anonymous?: boolean | undefined;
                constant?: boolean | undefined;
                inputs?: {
                    name: string;
                    type: string;
                    indexed?: boolean | undefined;
                    components?: any[] | undefined;
                    internalType?: string | undefined;
                }[] | undefined;
                name?: string | undefined;
                outputs?: {
                    name: string;
                    type: string;
                    components?: any[] | undefined;
                    internalType?: string | undefined;
                }[] | undefined;
                payable?: boolean | undefined;
                stateMutability?: string | undefined;
                type: string;
                gas?: number | undefined;
            }[];
            retries: number;
            confirmed: boolean;
            tag: string;
            streamId: string;
        }> & Partial<{
            block: {
                lastVersion: string;
                firstVersion: string;
                hash: string;
                timestamp: string;
                number: string;
            };
            changes: unknown[];
            coinDeposits: {
                sequenceNumber: string;
                valueWithDecimals: string;
                coin: {
                    symbol: string;
                    decimals: number;
                    name: string;
                };
                address: string;
                value: string;
            }[];
            coinTransfers: {
                transaction: string;
                valueWithDecimals: number;
                from: string;
                value: string;
                to: string;
                coin: {
                    symbol: string;
                    decimals: number;
                    name: string;
                };
            }[];
            coinWithdrawals: {
                sequenceNumber: string;
                valueWithDecimals: string;
                coin: {
                    symbol: string;
                    decimals: number;
                    name: string;
                };
                address: string;
                value: string;
            }[];
            events: unknown[];
            network: "mainnet" | "testnet" | "devnet";
            payloads: unknown[];
            retries: number;
            streamId: string;
            tag: string;
            transactions: {
                gasUnitPrice: string;
                type: string;
                gasUsed: string;
                eventChangeHash: string;
                stateChangeHash: string;
                gasLimit: string;
                sender: string;
                success: boolean;
                hash: string;
            }[];
        }>) | undefined;
        tinyPayload: {
            chainId: string;
            confirmed: boolean;
            block: string;
            records: number;
            retries: number;
        };
        errorMessage: string;
        webhookUrl: string;
        streamId: string;
        tag: string;
    }>>;
    private readonly _getStats;
    readonly getStats: () => Promise<import("@moralisweb3/common-core").ResponseAdapter<{
        totalWebhooksDelivered: number;
        totalWebhooksFailed: number;
        totalLogsProcessed: number;
        totalTxsProcessed: number;
        totalTxsInternalProcessed: number;
        streams?: {
            totalWebhooksDelivered: number;
            totalWebhooksFailed: number;
            totalLogsProcessed: number;
            totalTxsProcessed: number;
            totalTxsInternalProcessed: number;
            streamId: string;
        }[] | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
    }, {
        totalWebhooksDelivered: number;
        totalWebhooksFailed: number;
        totalLogsProcessed: number;
        totalTxsProcessed: number;
        totalTxsInternalProcessed: number;
        streams?: {
            totalWebhooksDelivered: number;
            totalWebhooksFailed: number;
            totalLogsProcessed: number;
            totalTxsProcessed: number;
            totalTxsInternalProcessed: number;
            streamId: string;
        }[] | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
    }>>;
    readonly getStatsById: (request: import("@moralisweb3/common-streams-utils").GetStatsByIdRequest) => Promise<import("@moralisweb3/common-core").ResponseAdapter<{
        totalWebhooksDelivered: number;
        totalWebhooksFailed: number;
        totalLogsProcessed: number;
        totalTxsProcessed: number;
        totalTxsInternalProcessed: number;
        streams?: {
            totalWebhooksDelivered: number;
            totalWebhooksFailed: number;
            totalLogsProcessed: number;
            totalTxsProcessed: number;
            totalTxsInternalProcessed: number;
            streamId: string;
        }[] | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
    }, {
        totalWebhooksDelivered: number;
        totalWebhooksFailed: number;
        totalLogsProcessed: number;
        totalTxsProcessed: number;
        totalTxsInternalProcessed: number;
        streams?: {
            totalWebhooksDelivered: number;
            totalWebhooksFailed: number;
            totalLogsProcessed: number;
            totalTxsProcessed: number;
            totalTxsInternalProcessed: number;
            streamId: string;
        }[] | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
    }>>;
    readonly setSettings: (request: import("@moralisweb3/common-streams-utils").SetSettingsRequest) => Promise<import("@moralisweb3/common-core").ResponseAdapter<{
        region?: "us-east-1" | "us-west-2" | "eu-central-1" | "ap-southeast-1" | undefined;
    }, {
        region?: "us-east-1" | "us-west-2" | "eu-central-1" | "ap-southeast-1" | undefined;
    }>>;
    private readonly _readSettings;
    readonly readSettings: () => Promise<import("@moralisweb3/common-core").ResponseAdapter<{
        region?: "us-east-1" | "us-west-2" | "eu-central-1" | "ap-southeast-1" | undefined;
    }, {
        region?: "us-east-1" | "us-west-2" | "eu-central-1" | "ap-southeast-1" | undefined;
    }>>;
    readonly verifySignature: (options: VerifySignatureOptions) => boolean;
    readonly parsedLogs: <Event_1>(webhookData: IWebhook) => Event_1[];
    private createFetcher;
    private createPaginatedFetcher;
}
//# sourceMappingURL=Streams.d.ts.map