"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeGetAddresses = void 0;
var api_utils_1 = require("@moralisweb3/api-utils");
var StreamNetwork_1 = require("../utils/StreamNetwork");
var IncorrectNetworkError_1 = require("../utils/IncorrectNetworkError");
var common_streams_utils_1 = require("@moralisweb3/common-streams-utils");
var makeGetAptosAddresses = function (core, baseUrl, _a) {
    var networkType = _a.networkType, options = __rest(_a, ["networkType"]);
    return new api_utils_1.PaginatedOperationResolver(common_streams_utils_1.getAddressesAptosOperation, baseUrl, core).fetch(options);
};
var makeGetEvmAddresses = function (core, baseUrl, _a) {
    var networkType = _a.networkType, options = __rest(_a, ["networkType"]);
    return new api_utils_1.PaginatedOperationResolver(common_streams_utils_1.getAddressesEvmOperation, baseUrl, core).fetch(options);
};
var makeGetAddresses = function (core, baseUrl) {
    return (function (getAddressesOptions) {
        switch (getAddressesOptions.networkType) {
            case StreamNetwork_1.StreamNetwork.APTOS:
                return makeGetAptosAddresses(core, baseUrl, getAddressesOptions);
            case StreamNetwork_1.StreamNetwork.EVM:
                return makeGetEvmAddresses(core, baseUrl, getAddressesOptions);
            default:
                if (getAddressesOptions.networkType === undefined) {
                    return makeGetEvmAddresses(core, baseUrl, getAddressesOptions);
                }
                throw new IncorrectNetworkError_1.IncorrectNetworkError(getAddressesOptions.networkType);
        }
    });
};
exports.makeGetAddresses = makeGetAddresses;
//# sourceMappingURL=getAddresses.js.map