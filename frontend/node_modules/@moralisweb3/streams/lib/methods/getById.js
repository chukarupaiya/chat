"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeGetStreamById = void 0;
var api_utils_1 = require("@moralisweb3/api-utils");
var StreamNetwork_1 = require("../utils/StreamNetwork");
var IncorrectNetworkError_1 = require("../utils/IncorrectNetworkError");
var common_streams_utils_1 = require("@moralisweb3/common-streams-utils");
var makeGetAptosStream = function (core, baseUrl, _a) {
    var networkType = _a.networkType, network = _a.network, options = __rest(_a, ["networkType", "network"]);
    return new api_utils_1.OperationResolver(common_streams_utils_1.getStreamAptosOperation, baseUrl, core).fetch(options);
};
var makeGetEvmStream = function (core, baseUrl, _a) {
    var networkType = _a.networkType, network = _a.network, options = __rest(_a, ["networkType", "network"]);
    return new api_utils_1.OperationResolver(common_streams_utils_1.getStreamEvmOperation, baseUrl, core).fetch(options);
};
var makeGetStreamById = function (core, baseUrl) {
    return (function (getStreamOptions) {
        // Backwards compatibility for the 'network' parameter
        if (!getStreamOptions.networkType && getStreamOptions.network) {
            getStreamOptions.networkType = getStreamOptions.network;
        }
        switch (getStreamOptions.networkType) {
            case StreamNetwork_1.StreamNetwork.APTOS:
                return makeGetAptosStream(core, baseUrl, getStreamOptions);
            case StreamNetwork_1.StreamNetwork.EVM:
                return makeGetEvmStream(core, baseUrl, getStreamOptions);
            default:
                if (getStreamOptions.networkType === undefined) {
                    return makeGetEvmStream(core, baseUrl, getStreamOptions);
                }
                throw new IncorrectNetworkError_1.IncorrectNetworkError(getStreamOptions.networkType);
        }
    });
};
exports.makeGetStreamById = makeGetStreamById;
//# sourceMappingURL=getById.js.map