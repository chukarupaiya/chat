(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.Moralis = factory());
})(this, (function () { 'use strict';

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function getAugmentedNamespace(n) {
	  if (n.__esModule) return n;
	  var f = n.default;
		if (typeof f == "function") {
			var a = function a () {
				if (this instanceof a) {
					var args = [null];
					args.push.apply(args, arguments);
					var Ctor = Function.bind.apply(f, args);
					return new Ctor();
				}
				return f.apply(this, arguments);
			};
			a.prototype = f.prototype;
	  } else a = {};
	  Object.defineProperty(a, '__esModule', {value: true});
		Object.keys(n).forEach(function (k) {
			var d = Object.getOwnPropertyDescriptor(n, k);
			Object.defineProperty(a, k, d.get ? d : {
				enumerable: true,
				get: function () {
					return n[k];
				}
			});
		});
		return a;
	}

	var lib$b = {};

	var Streams$1 = {};

	var lib$a = {};

	var config$5 = {};

	var ApiUtilsConfig = {};

	Object.defineProperty(ApiUtilsConfig, "__esModule", { value: true });
	ApiUtilsConfig.ApiUtilsConfig = void 0;
	ApiUtilsConfig.ApiUtilsConfig = {
	    apiKey: {
	        name: 'apiKey',
	        defaultValue: null,
	    },
	};

	var MoralisConfig$1 = {};

	Object.defineProperty(MoralisConfig$1, "__esModule", { value: true });

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(ApiUtilsConfig, exports);
		__exportStar(MoralisConfig$1, exports);
		
	} (config$5));

	var resolvers = {};

	var EndpointDescriptor = {};

	// TODO: we need to delete this file when this interface will be not used.
	Object.defineProperty(EndpointDescriptor, "__esModule", { value: true });

	var DescriptorConverter = {};

	Object.defineProperty(DescriptorConverter, "__esModule", { value: true });
	DescriptorConverter.convertOperationToDescriptor = void 0;
	// TODO: we need to delete this file when this function will be not used.
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	function convertOperationToDescriptor(operation) {
	    return {
	        name: operation.name,
	        method: operation.method.toLowerCase(),
	        bodyParamNames: operation.bodyParamNames || [],
	        urlPattern: operation.urlPathPattern,
	        urlPatternParamNames: operation.urlPathParamNames,
	    };
	}
	DescriptorConverter.convertOperationToDescriptor = convertOperationToDescriptor;

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(EndpointDescriptor, exports);
		__exportStar(DescriptorConverter, exports);
		
	} (resolvers));

	var resolvers2 = {};

	var OperationResolver$1 = {};

	var lib$9 = {};

	var Core$1 = {};

	var Modules$2 = {};

	var utils$r = {};

	var ModuleType = {};

	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.ModuleType = void 0;
		(function (ModuleType) {
		    ModuleType["API"] = "api";
		    ModuleType["DEFAULT"] = "default";
		})(exports.ModuleType || (exports.ModuleType = {}));
		
	} (ModuleType));

	Object.defineProperty(utils$r, "__esModule", { value: true });
	utils$r.isApiModule = void 0;
	var ModuleType_1$2 = ModuleType;
	/**
	 * Verify if the provided class is a api type.
	 * Should be used as a Typescript type-guard
	 *
	 * @example
	 * ```
	 * if(isApiModule(module)){
	 *  // module is types as ApiModule here
	 * }
	 * ```
	 */
	var isApiModule = function (moralisClass) {
	    if (moralisClass.type === ModuleType_1$2.ModuleType.API) {
	        return true;
	    }
	    return false;
	};
	utils$r.isApiModule = isApiModule;

	var _Error = {};

	var ErrorCode$1 = {};

	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.StreamErrorCode = exports.AuthErrorCode = exports.ApiErrorCode = exports.CoreErrorCode = void 0;
		(function (CoreErrorCode) {
		    // Generic Core error
		    CoreErrorCode["GENERIC_CORE_ERROR"] = "C0001";
		    // A module wants to register with a name that already is registered
		    CoreErrorCode["DUPLICATE_MODULE"] = "C0002";
		    // The module is not registered
		    CoreErrorCode["MODULE_NOT_FOUND"] = "C0003";
		    // Error in validation check
		    CoreErrorCode["VALIDATION_ERROR"] = "C0004";
		    CoreErrorCode["INVALID_ARGUMENT"] = "C0005";
		    CoreErrorCode["REQUEST_ERROR"] = "C0006";
		    CoreErrorCode["NO_DATA_FOUND"] = "C0007";
		    CoreErrorCode["NOT_INITIALIZED"] = "C0008";
		    CoreErrorCode["ALREADY_INITIALIZED"] = "C0009";
		    CoreErrorCode["METHOD_FAILED"] = "C0010";
		    CoreErrorCode["STATE_MACHINE_STARTED"] = "C0011";
		    CoreErrorCode["STATE_MACHINE_NOT_STARTED"] = "C0012";
		    CoreErrorCode["CONFIG_KEY_NOT_EXIST"] = "C0013";
		    CoreErrorCode["CONFIG_INVALID_VALUE"] = "C0014";
		    CoreErrorCode["CONFIG_KEY_ALREADY_EXIST"] = "C0015";
		    CoreErrorCode["INVALID_DATA"] = "C0016";
		    CoreErrorCode["BIG_NUMBER_ERROR"] = "C0500";
		    CoreErrorCode["NOT_IMPLEMENTED"] = "C9000";
		})(exports.CoreErrorCode || (exports.CoreErrorCode = {}));
		(function (ApiErrorCode) {
		    ApiErrorCode["GENERIC_API_ERROR"] = "A0001";
		    ApiErrorCode["PAGE_LIMIT_EXCEEDED"] = "A0002";
		    ApiErrorCode["API_KEY_NOT_SET"] = "A0003";
		    ApiErrorCode["INVALID_PARAMS"] = "A0004";
		    ApiErrorCode["NOT_FOUND"] = "A0404";
		    ApiErrorCode["NOT_IMPLEMENTED"] = "A9000";
		})(exports.ApiErrorCode || (exports.ApiErrorCode = {}));
		(function (AuthErrorCode) {
		    AuthErrorCode["GENERIC_AUTH_ERROR"] = "U0001";
		    AuthErrorCode["INCORRECT_NETWORK"] = "U0002";
		    AuthErrorCode["INCORRECT_PARAMETER"] = "U0003";
		    AuthErrorCode["NOT_IMPLEMENTED"] = "U9000";
		})(exports.AuthErrorCode || (exports.AuthErrorCode = {}));
		(function (StreamErrorCode) {
		    StreamErrorCode["GENERIC_STREAM_ERROR"] = "S0001";
		    StreamErrorCode["INCORRECT_NETWORK"] = "S0002";
		    StreamErrorCode["INCORRECT_PARAMETER"] = "S0003";
		    StreamErrorCode["INVALID_SIGNATURE"] = "S0004";
		    StreamErrorCode["NOT_IMPLEMENTED"] = "S9000";
		})(exports.StreamErrorCode || (exports.StreamErrorCode = {}));
		
	} (ErrorCode$1));

	var MoralisError$1 = {};

	var __extends$c = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(MoralisError$1, "__esModule", { value: true });
	MoralisError$1.MoralisStreamError = MoralisError$1.MoralisAuthError = MoralisError$1.MoralisApiError = MoralisError$1.CoreError = MoralisError$1.MoralisError = void 0;
	var MoralisError = /** @class */ (function (_super) {
	    __extends$c(MoralisError, _super);
	    function MoralisError(_a) {
	        var message = _a.message, code = _a.code, details = _a.details, cause = _a.cause;
	        var _this = 
	        // @ts-ignore Typescript does not recognise 'cause' ? OR we have wrong TS version
	        _super.call(this, MoralisError.makeMessage(message, code), { cause: cause }) || this;
	        _this.name = 'Moralis SDK Error';
	        _this.isMoralisError = true;
	        // Set prototype manually, as required since Typescript 2.2: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html#example
	        Object.setPrototypeOf(_this, MoralisError.prototype);
	        _this.code = code;
	        _this.details = details;
	        if (cause) {
	            _this.cause = cause;
	            if ('stack' in cause) {
	                _this.stack = "".concat(_this.stack, "\nCAUSE: ").concat(cause.stack);
	            }
	        }
	        if (Error.captureStackTrace) {
	            Error.captureStackTrace(_this, MoralisError);
	        }
	        return _this;
	    }
	    MoralisError.makeMessage = function (message, code) { return "[".concat(code, "] ").concat(message); };
	    return MoralisError;
	}(Error));
	MoralisError$1.MoralisError = MoralisError;
	var CoreError = /** @class */ (function (_super) {
	    __extends$c(CoreError, _super);
	    function CoreError(options) {
	        var _this = _super.call(this, options) || this;
	        _this.name = 'Moralis SDK Core Error';
	        if (Error.captureStackTrace) {
	            Error.captureStackTrace(_this, CoreError);
	        }
	        return _this;
	    }
	    return CoreError;
	}(MoralisError));
	MoralisError$1.CoreError = CoreError;
	var MoralisApiError = /** @class */ (function (_super) {
	    __extends$c(MoralisApiError, _super);
	    function MoralisApiError(options) {
	        var _this = _super.call(this, options) || this;
	        _this.name = 'Moralis SDK API Error';
	        if (Error.captureStackTrace) {
	            Error.captureStackTrace(_this, MoralisApiError);
	        }
	        return _this;
	    }
	    return MoralisApiError;
	}(MoralisError));
	MoralisError$1.MoralisApiError = MoralisApiError;
	var MoralisAuthError = /** @class */ (function (_super) {
	    __extends$c(MoralisAuthError, _super);
	    function MoralisAuthError(options) {
	        var _this = _super.call(this, options) || this;
	        _this.name = 'Moralis Auth Error';
	        if (Error.captureStackTrace) {
	            Error.captureStackTrace(_this, MoralisAuthError);
	        }
	        return _this;
	    }
	    return MoralisAuthError;
	}(MoralisError));
	MoralisError$1.MoralisAuthError = MoralisAuthError;
	var MoralisStreamError = /** @class */ (function (_super) {
	    __extends$c(MoralisStreamError, _super);
	    function MoralisStreamError(options) {
	        var _this = _super.call(this, options) || this;
	        _this.name = 'Moralis Stream Error';
	        if (Error.captureStackTrace) {
	            Error.captureStackTrace(_this, MoralisStreamError);
	        }
	        return _this;
	    }
	    return MoralisStreamError;
	}(MoralisError));
	MoralisError$1.MoralisStreamError = MoralisStreamError;

	var isMoralisError$1 = {};

	Object.defineProperty(isMoralisError$1, "__esModule", { value: true });
	isMoralisError$1.isMoralisError = void 0;
	var isMoralisError = function (error) {
	    if (!(error instanceof Error)) {
	        return false;
	    }
	    if (!error.isMoralisError) {
	        return false;
	    }
	    return true;
	};
	isMoralisError$1.isMoralisError = isMoralisError;

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(ErrorCode$1, exports);
		__exportStar(MoralisError$1, exports);
		__exportStar(isMoralisError$1, exports);
		
	} (_Error));

	Object.defineProperty(Modules$2, "__esModule", { value: true });
	Modules$2.Modules = void 0;
	var utils_1$2 = utils$r;
	var Error_1$8 = _Error;
	/**
	 * MoralisModues handles all registered modules.
	 * Any package that is used in Moralis, should register itself via this class.
	 * This allows cross-communication between modules and easy management of the modules
	 *
	 * This class is responsible for:
	 * - registering new modules
	 * - removing modules (in theory possible for exotic usecases, but might break the app if done after initialisation)
	 * - getting individual modules by name, type or everything
	 */
	var Modules$1 = /** @class */ (function () {
	    function Modules() {
	        this.modules = new Map();
	    }
	    /**
	     * Register and setup a new module by providing a module that is extended from BaseClass.
	     * This will throw an error if the name is not unique
	     * @param module the module that needs to be registered
	     */
	    Modules.prototype.register = function (module) {
	        if (this.modules.has(module.name)) {
	            throw new Error_1$8.CoreError({
	                code: Error_1$8.CoreErrorCode.DUPLICATE_MODULE,
	                message: "The module \"".concat(module.name, "\" has already been registered."),
	            });
	        }
	        this.modules.set(module.name, module);
	        module.setup();
	    };
	    /**
	     * Returns the module with the given name.
	     * This module should have been registered with `register`
	     * @param name the module name
	     * @returns a valid BaseModule
	     * @throws a CoreError if no module with the given name has been registered
	     */
	    Modules.prototype.get = function (name) {
	        var module = this.modules.get(name);
	        if (!module) {
	            throw new Error_1$8.CoreError({ code: Error_1$8.CoreErrorCode.MODULE_NOT_FOUND, message: "Module \"".concat(name, "\" does not exist.") });
	        }
	        return module;
	    };
	    /**
	     * Tries to return the module with the given name if exist. Otherwise returns null.
	     * @param name the module name
	     * @returns a valid BaseModule or null
	     */
	    Modules.prototype.tryGet = function (name) {
	        return this.modules.get(name) || null;
	    };
	    Modules.prototype.has = function (name) {
	        return this.modules.has(name);
	    };
	    /**
	     * Returns the network module with the provided name.
	     * @param name the module name
	     * @returns a valid ApiModule
	     * @throws a CoreError if no network module with the given name has been registered
	     */
	    Modules.prototype.getApi = function (name) {
	        var module = this.modules.get(name);
	        if (!module || !(0, utils_1$2.isApiModule)(module)) {
	            throw new Error_1$8.CoreError({
	                code: Error_1$8.CoreErrorCode.MODULE_NOT_FOUND,
	                message: "No ApiModule found with the name \"".concat(name, "\""),
	            });
	        }
	        return module;
	    };
	    /**
	     * Remove the module with the provided name, if it has been registered,
	     * @param name the module name
	     * @throws a CoreError if the module cannot be found.
	     */
	    Modules.prototype.remove = function (name) {
	        var isRemoved = this.modules.delete(name);
	        if (!isRemoved) {
	            throw new Error_1$8.CoreError({ code: Error_1$8.CoreErrorCode.MODULE_NOT_FOUND, message: "Module \"".concat(name, "\" does not exist.") });
	        }
	    };
	    /**
	     * List all the registered modules
	     * @returns an array of BaseModule that have been registered
	     */
	    Modules.prototype.list = function () {
	        return Array.from(this.modules.values());
	    };
	    /**
	     * Returns the names of all registered modules
	     */
	    Modules.prototype.listNames = function () {
	        return this.list().map(function (module) { return module.name; });
	    };
	    /**
	     * List all the registered api modules (eg. modules with the type CoreModuleType.API)
	     */
	    Modules.prototype.listApis = function () {
	        return this.list().filter(utils_1$2.isApiModule);
	    };
	    return Modules;
	}());
	Modules$2.Modules = Modules$1;

	var LoggerController$1 = {};

	var CoreConfig = {};

	Object.defineProperty(CoreConfig, "__esModule", { value: true });
	CoreConfig.CoreConfig = void 0;
	CoreConfig.CoreConfig = {
	    logLevel: {
	        name: 'logLevel',
	        defaultValue: 'info',
	    },
	    buidEnvironment: {
	        name: 'buidEnvironment',
	        defaultValue: 'browser',
	    },
	    defaultNetwork: {
	        name: 'defaultNetwork',
	        defaultValue: 'Evm',
	    },
	    product: {
	        name: 'product',
	        defaultValue: undefined,
	    },
	    /**
	     * @description Maximal number of request retries.
	     */
	    maxRetries: {
	        name: 'maxRetries',
	        defaultValue: 2,
	    },
	};

	Object.defineProperty(LoggerController$1, "__esModule", { value: true });
	LoggerController$1.LoggerController = void 0;
	/* eslint-disable no-console */
	var isMoralisError_1 = isMoralisError$1;
	var CoreConfig_1$1 = CoreConfig;
	var logLevelMap = {
	    verbose: 5,
	    debug: 4,
	    info: 3,
	    warning: 2,
	    error: 1,
	    off: 0,
	};
	/**
	 * LoggerController, responsible to create log messages for each module.
	 * It should be created with the name of the module like `new Logger('module-name')`
	 * It will then prefix any logs with that module-name for easy debugging
	 * It will show only logs up to the specified `logLevel` in the MoralisConfig
	 */
	var LoggerController = /** @class */ (function () {
	    function LoggerController(moduleName, config) {
	        this.moduleName = moduleName;
	        this.config = config;
	    }
	    LoggerController.create = function (moduleName, core) {
	        return new LoggerController(moduleName, core.config);
	    };
	    Object.defineProperty(LoggerController.prototype, "level", {
	        get: function () {
	            return this.config.get(CoreConfig_1$1.CoreConfig.logLevel);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    LoggerController.prototype._transport = function (level, message, details) {
	        var logMessage = this._makeLogMessage(message);
	        var args = [logMessage, details].filter(function (arg) { return arg != null; });
	        switch (level) {
	            case 'error':
	                console.error.apply(console, args);
	                break;
	            case 'warn':
	                console.warn.apply(console, args);
	                break;
	            case 'log':
	                console.log.apply(console, args);
	                break;
	        }
	    };
	    LoggerController.prototype._shouldLog = function (logLevel) {
	        var level = logLevelMap[logLevel];
	        var acceptedLevel = logLevelMap[this.level];
	        if (level > acceptedLevel) {
	            return false;
	        }
	        return true;
	    };
	    LoggerController.prototype._makeLogMessage = function (message) {
	        return "Moralis[".concat(this.moduleName, "]: ").concat(message);
	    };
	    LoggerController.prototype.error = function (error, details) {
	        if (!this._shouldLog('error')) {
	            return;
	        }
	        var message = '';
	        if (typeof error === 'string') {
	            message = error;
	        }
	        else if ((0, isMoralisError_1.isMoralisError)(error)) {
	            message = error.message;
	            if (error.details) {
	                if (details) {
	                    details._errorDetails = error.details;
	                }
	                else {
	                    details = {
	                        _errorDetails: error.details,
	                    };
	                }
	            }
	        }
	        else {
	            message = error.message;
	        }
	        this._transport('error', message, details);
	    };
	    LoggerController.prototype.warn = function (message, details) {
	        if (!this._shouldLog('warning')) {
	            return;
	        }
	        this._transport('warn', message, details);
	    };
	    LoggerController.prototype.info = function (message, details) {
	        if (!this._shouldLog('info')) {
	            return;
	        }
	        this._transport('log', message, details);
	    };
	    LoggerController.prototype.debug = function (message, details) {
	        if (!this._shouldLog('debug')) {
	            return;
	        }
	        this._transport('log', message, details);
	    };
	    LoggerController.prototype.verbose = function (message, details) {
	        if (!this._shouldLog('verbose')) {
	            return;
	        }
	        this._transport('log', message, details);
	    };
	    return LoggerController;
	}());
	LoggerController$1.LoggerController = LoggerController;

	var Config$2 = {};

	Object.defineProperty(Config$2, "__esModule", { value: true });
	Config$2.Config = void 0;
	var Error_1$7 = _Error;
	var Config$1 = /** @class */ (function () {
	    function Config() {
	        this.items = new Map();
	    }
	    Config.prototype.registerKey = function (key, validator) {
	        if (this.items.has(key.name)) {
	            throw new Error_1$7.CoreError({
	                code: Error_1$7.CoreErrorCode.CONFIG_KEY_ALREADY_EXIST,
	                message: "Key \"".concat(key.name, "\" is already registered"),
	            });
	        }
	        this.items.set(key.name, { key: key, value: key.defaultValue, validator: validator });
	    };
	    Config.prototype.getKeys = function () {
	        return Array.from(this.items.keys());
	    };
	    Config.prototype.hasKey = function (key) {
	        return this.items.has(key.name);
	    };
	    Config.prototype.get = function (keyOrName) {
	        return this.getItem(keyOrName).value;
	    };
	    Config.prototype.set = function (keyOrName, value) {
	        var item = this.getItem(keyOrName);
	        var error = item.validator ? item.validator(value) : null;
	        if (error) {
	            throw new Error_1$7.CoreError({
	                code: Error_1$7.CoreErrorCode.CONFIG_INVALID_VALUE,
	                message: "Cannot set this config. Invalid value for \"".concat(item.key.name, "\". ").concat(error),
	            });
	        }
	        item.value = value;
	    };
	    Config.prototype.merge = function (values) {
	        var _this = this;
	        Object.keys(values).forEach(function (keyName) {
	            _this.set(keyName, values[keyName]);
	        });
	    };
	    Config.prototype.reset = function () {
	        this.items.forEach(function (item) {
	            item.value = item.key.defaultValue;
	        });
	    };
	    Config.prototype.getItem = function (keyOrName) {
	        var keyName = typeof keyOrName === 'string' ? keyOrName : keyOrName.name;
	        var item = this.items.get(keyName);
	        if (!item) {
	            // This error occurs when a user tries to set a value for a specific key, but the key is not registered.
	            // That situation may occur, when a moralis module is not registered (all keys are registered in the module setup step).
	            // If you have this error, you should fix your code. Firstly, you should register all modules, later you can modify the configuration.
	            throw new Error_1$7.CoreError({
	                code: Error_1$7.CoreErrorCode.CONFIG_KEY_NOT_EXIST,
	                message: "Key \"".concat(keyName, "\" is unregistered. Have you registered all required modules?"),
	            });
	        }
	        return item;
	    };
	    return Config;
	}());
	Config$2.Config = Config$1;

	var CoreConfigSetup$1 = {};

	Object.defineProperty(CoreConfigSetup$1, "__esModule", { value: true });
	CoreConfigSetup$1.CoreConfigSetup = void 0;
	var CoreConfig_1 = CoreConfig;
	var CoreConfigSetup = /** @class */ (function () {
	    function CoreConfigSetup() {
	    }
	    CoreConfigSetup.register = function (config) {
	        config.registerKey(CoreConfig_1.CoreConfig.logLevel);
	        config.registerKey(CoreConfig_1.CoreConfig.buidEnvironment);
	        config.registerKey(CoreConfig_1.CoreConfig.defaultNetwork);
	        config.registerKey(CoreConfig_1.CoreConfig.product);
	        config.registerKey(CoreConfig_1.CoreConfig.maxRetries);
	    };
	    return CoreConfigSetup;
	}());
	CoreConfigSetup$1.CoreConfigSetup = CoreConfigSetup;

	var version$c = {};

	Object.defineProperty(version$c, "__esModule", { value: true });
	version$c.LIB_VERSION = void 0;
	version$c.LIB_VERSION = "2.14.1";

	var dataTypes$7 = {};

	var abstract = {};

	var MoralisData$1 = {};

	Object.defineProperty(MoralisData$1, "__esModule", { value: true });
	MoralisData$1.MoralisData = void 0;
	/**
	 * The MoralisData class represents the value of a native currency (like ETH, SOL, BNB etc.)
	 *
	 * @internal
	 * @category DataType
	 */
	var MoralisData = /** @class */ (function () {
	    function MoralisData() {
	    }
	    return MoralisData;
	}());
	MoralisData$1.MoralisData = MoralisData;

	var MoralisObjectData = {};

	var __extends$b = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(MoralisObjectData, "__esModule", { value: true });
	MoralisObjectData.MoralisDataObject = void 0;
	var MoralisData_1 = MoralisData$1;
	var MoralisDataObject = /** @class */ (function (_super) {
	    __extends$b(MoralisDataObject, _super);
	    function MoralisDataObject() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    return MoralisDataObject;
	}(MoralisData_1.MoralisData));
	MoralisObjectData.MoralisDataObject = MoralisDataObject;

	var types$w = {};

	Object.defineProperty(types$w, "__esModule", { value: true });

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(MoralisData$1, exports);
		__exportStar(MoralisObjectData, exports);
		__exportStar(types$w, exports);
		
	} (abstract));

	var BigNumber$3 = {};

	var BigNumber$2 = {};

	var BigNumberFormatter$1 = {};

	Object.defineProperty(BigNumberFormatter$1, "__esModule", { value: true });
	BigNumberFormatter$1.BigNumberFormatter = void 0;
	var Error_1$6 = _Error;
	var BigNumberFormatter = /** @class */ (function () {
	    function BigNumberFormatter() {
	    }
	    BigNumberFormatter.toDecimal = function (value, decimals) {
	        if (decimals < 0) {
	            throw new Error_1$6.CoreError({
	                code: Error_1$6.CoreErrorCode.BIG_NUMBER_ERROR,
	                message: 'Invalid decimals',
	            });
	        }
	        var result = value.toString();
	        if (decimals === 0) {
	            return result;
	        }
	        var isNegative = result.startsWith('-');
	        if (isNegative) {
	            result = result.substring(1);
	        }
	        result = result.padStart(decimals, '0');
	        var dot = result.length - decimals;
	        var whole = dot === 0 ? '0' : result.substring(0, dot);
	        var fraction = result.substring(dot);
	        result = "".concat(whole, ".").concat(fraction);
	        while (result[result.length - 1] === '0' && result[result.length - 2] !== '.') {
	            result = result.substring(0, result.length - 1);
	        }
	        if (isNegative) {
	            result = "-".concat(result);
	        }
	        return result;
	    };
	    BigNumberFormatter.toHex = function (value) {
	        var result = value.toString(16);
	        var isNegative = result.startsWith('-');
	        if (isNegative) {
	            result = result.substring(1);
	        }
	        if (result.length % 2 !== 0) {
	            result = "0".concat(result);
	        }
	        result = "0x".concat(result);
	        if (isNegative) {
	            result = "-".concat(result);
	        }
	        return result;
	    };
	    return BigNumberFormatter;
	}());
	BigNumberFormatter$1.BigNumberFormatter = BigNumberFormatter;

	var BigNumberParser$1 = {};

	Object.defineProperty(BigNumberParser$1, "__esModule", { value: true });
	BigNumberParser$1.BigNumberParser = void 0;
	var Error_1$5 = _Error;
	var BigNumberParser = /** @class */ (function () {
	    function BigNumberParser() {
	    }
	    BigNumberParser.parseInt = function (value) {
	        assertNotEmpty(value);
	        if (typeof value === 'string') {
	            if (value.length === 0) {
	                throw createError('Value is empty');
	            }
	            var isNegativeHex = value.startsWith('-0x');
	            if (isNegativeHex) {
	                value = value.substring(1);
	            }
	            var result = BigInt(value);
	            if (isNegativeHex) {
	                result *= BigInt(-1);
	            }
	            return result;
	        }
	        return BigInt(value);
	    };
	    // TODO: refactor to reduce complexity
	    // eslint-disable-next-line complexity
	    BigNumberParser.parseDecimal = function (value, decimals) {
	        assertNotEmpty(value);
	        var multiplier = getMultiplier$1(decimals);
	        if (typeof value === 'number') {
	            return BigInt(value) * multiplier;
	        }
	        if (typeof value === 'bigint') {
	            return value * multiplier;
	        }
	        var isNegative = value.startsWith('-');
	        if (isNegative) {
	            value = value.substring(1);
	        }
	        var fragments = value.split('.');
	        if (fragments.length > 2) {
	            throw createError('Value has more than one dot');
	        }
	        if (fragments.some(function (fragment) { return !fragment; })) {
	            throw createError('Value has empty fragments');
	        }
	        var result;
	        if (fragments.length === 1) {
	            result = BigInt(fragments[0]) * multiplier;
	        }
	        else {
	            var whole = fragments[0];
	            var fraction = fragments[1];
	            if (fraction.length > decimals) {
	                throw createError("Value has too long fractional part: ".concat(fraction.length, ", max: ").concat(decimals));
	            }
	            if (fraction.length < decimals) {
	                fraction = fraction.padEnd(decimals, '0');
	            }
	            result = BigInt(whole) * multiplier + BigInt(fraction);
	        }
	        if (isNegative) {
	            result *= BigInt(-1);
	        }
	        return result;
	    };
	    return BigNumberParser;
	}());
	BigNumberParser$1.BigNumberParser = BigNumberParser;
	function assertNotEmpty(value) {
	    if (value === null) {
	        throw createError('Value is null');
	    }
	    if (value === undefined) {
	        throw createError('Value is undefined');
	    }
	}
	function getMultiplier$1(decimals) {
	    if (decimals < 0) {
	        throw createError('Invalid decimals');
	    }
	    // decimals = 0, multiplier = 1
	    // decimals = 1, multiplier = 10
	    // decimals = 2, multiplier = 100
	    // ...
	    var ten = BigInt(10);
	    var multiplier = BigInt(1);
	    while (decimals-- > 0) {
	        multiplier *= ten;
	    }
	    return multiplier;
	}
	function createError(message) {
	    return new Error_1$5.CoreError({
	        code: Error_1$5.CoreErrorCode.BIG_NUMBER_ERROR,
	        message: message,
	    });
	}

	Object.defineProperty(BigNumber$2, "__esModule", { value: true });
	BigNumber$2.BigNumber = void 0;
	var BigNumberFormatter_1 = BigNumberFormatter$1;
	var BigNumberParser_1 = BigNumberParser$1;
	/**
	 * The BigNumber class is a MoralisData that references to a the value of a BigNumber
	 *
	 * @category DataType
	 */
	var BigNumber$1 = /** @class */ (function () {
	    function BigNumber(value) {
	        this.value = value;
	    }
	    /**
	     * Create a new instance of BigNumber from any valid address input.
	     *
	     * @param value - the BigNumberish type
	     * @example BigNumber.create(12);
	     * @example BigNumber.create("20");
	     * @returns a new BigNumber instance
	     */
	    BigNumber.create = function (value) {
	        if (value instanceof BigNumber) {
	            return value;
	        }
	        return new BigNumber(BigNumberParser_1.BigNumberParser.parseInt(value));
	    };
	    /**
	     * Creates a new BigNumber from given decimals.
	     * @param value
	     * @param decimals - This is optional and defaults to 0
	     * @example BigNumber.fromDecimal("1.23456789", 18);
	     */
	    BigNumber.fromDecimal = function (value, decimals) {
	        if (decimals === void 0) { decimals = 0; }
	        return new BigNumber(BigNumberParser_1.BigNumberParser.parseDecimal(value, decimals));
	    };
	    /**
	     * @returns the value of this BigNumber as a BigInt
	     * @example BigNumber.create(12).toBigInt();
	     */
	    BigNumber.prototype.toBigInt = function () {
	        return this.value;
	    };
	    /**
	     * Adds a BigNumber to current BigNumber instance.
	     * @param value - the BigNumberish to add
	     * @returns the result of the addition
	     * @example BigNumber.create(12).add(7);
	     * @example BigNumber.create(12).add("1000000000000000000");
	     */
	    BigNumber.prototype.add = function (value) {
	        return new BigNumber(this.value + asBigInt(value));
	    };
	    /**
	     * Subtracts a BigNumber from current BigNumber instance.
	     * @param value - the BigNumberish to subtract
	     * @returns the result of the subtraction
	     * @example BigNumber.create(12).sub(7);
	     * @example BigNumber.create("1000000000000000000").sub(20);
	     */
	    BigNumber.prototype.sub = function (value) {
	        return new BigNumber(this.value - asBigInt(value));
	    };
	    /**
	     * Multiplies a BigNumber with current BigNumber instance.
	     * @param value - the BigNumberish to multiply
	     * @returns the result of the multiplication
	     * @example BigNumber.create(12).mul(7);
	     * @example BigNumber.create(12).mul("1000000000000000000");
	     */
	    BigNumber.prototype.mul = function (value) {
	        return new BigNumber(this.value * asBigInt(value));
	    };
	    /**
	     * Divides a BigNumber with current BigNumber instance.
	     * @param value - the BigNumberish to divide
	     * @returns the result of the division
	     * @example BigNumber.create(12).div(7);
	     * @example BigNumber.create(1).div("1000000000000000000");
	     */
	    BigNumber.prototype.div = function (value) {
	        return new BigNumber(this.value / asBigInt(value));
	    };
	    /**
	     * Checks the equality of the current BigNumber with another BigNumber.
	     * @param value - the BigNumberish to compare
	     * @returns true if the BigNumbers are equal
	     * @example BigNumber.create(12).equals(BigNumber.create(12)); // true
	     */
	    BigNumber.prototype.equals = function (value) {
	        return this.value === value.toBigInt();
	    };
	    /**
	     * Converts BigNumber instance to value in given decimals.
	     * @param decimals - The decimals to convert to
	     * @example BigNumber.create(12).toDecimal(18);
	     */
	    BigNumber.prototype.toDecimal = function (decimals) {
	        return BigNumberFormatter_1.BigNumberFormatter.toDecimal(this.value, decimals);
	    };
	    /**
	     * Converts BigNumber instance to string.
	     * @example BigNumber.create(12).toString();
	     */
	    BigNumber.prototype.toString = function () {
	        return this.value.toString();
	    };
	    /**
	     * Converts BigNumber instance to hex string.
	     * @example BigNumber.create(12).toHex();
	     */
	    BigNumber.prototype.toHex = function () {
	        return BigNumberFormatter_1.BigNumberFormatter.toHex(this.value);
	    };
	    /**
	     * Converts BigNumber instance to hex string.
	     * @example BigNumber.create(12).toJSON();
	     */
	    BigNumber.prototype.toJSON = function () {
	        return this.toHex();
	    };
	    return BigNumber;
	}());
	BigNumber$2.BigNumber = BigNumber$1;
	function asBigInt(value) {
	    return BigNumber$1.create(value).toBigInt();
	}

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(BigNumber$2, exports);
		
	} (BigNumber$3));

	var date = {};

	Object.defineProperty(date, "__esModule", { value: true });
	date.dateInputToDate = void 0;
	var dateInputToDate = function (value) { return (typeof value === 'string' ? new Date(value) : value); };
	date.dateInputToDate = dateInputToDate;

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(abstract, exports);
		__exportStar(BigNumber$3, exports);
		__exportStar(date, exports);
		
	} (dataTypes$7));

	var __awaiter$5 = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator$5 = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (g && (g = 0, op[0] && (_ = 0)), _) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	Object.defineProperty(Core$1, "__esModule", { value: true });
	Core$1.Core = void 0;
	var Modules_1 = Modules$2;
	var LoggerController_1$1 = LoggerController$1;
	var Config_1$1 = Config$2;
	var CoreConfigSetup_1 = CoreConfigSetup$1;
	var version_1 = version$c;
	var Error_1$4 = _Error;
	var dataTypes_1$V = dataTypes$7;
	/**
	 * Core is used in all Moralis applications
	 * This class is **required** to be implemented in every app
	 *
	 * This class is responsible for:
	 * - registering, removing and accessing modules
	 * - accessing and changing the config
	 */
	var Core = /** @class */ (function () {
	    function Core(modules, config, logger) {
	        var _this = this;
	        this.modules = modules;
	        this.config = config;
	        this.logger = logger;
	        this.name = Core.moduleName;
	        this._isStarted = false;
	        /**
	         * Register all specified modules and configurations
	         * @params array of all modules (any module that is extended from BaseModule) that you want to include
	         */
	        this.registerModules = function (modules) {
	            modules.forEach(_this.registerModule);
	        };
	        /**
	         * Register a new module
	         */
	        this.registerModule = function (module) {
	            if ('create' in module) {
	                module = module.create(_this);
	            }
	            _this.modules.register(module);
	            _this.logger.verbose('Module registered', { module: module.name });
	        };
	        this.getModule = function (name) {
	            return _this.modules.get(name);
	        };
	        /**
	         * Start all modules, this function should be called before any interaction with a module,
	         * as it is responsible for initialising the modules.
	         *
	         * This will call `start()` on every registered module
	         */
	        this.start = function (providedConfig) { return __awaiter$5(_this, void 0, void 0, function () {
	            var allModules;
	            return __generator$5(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (this._isStarted) {
	                            throw new Error_1$4.MoralisError({
	                                message: 'Modules are started already. This method should be called only one time.',
	                                code: Error_1$4.CoreErrorCode.ALREADY_INITIALIZED,
	                            });
	                        }
	                        this._isStarted = true;
	                        allModules = this.modules.list();
	                        if (providedConfig) {
	                            this.config.merge(providedConfig);
	                        }
	                        this.logger.verbose('Starting all registered modules', {
	                            moduleNames: this.modules.listNames(),
	                        });
	                        return [4 /*yield*/, Promise.all(allModules.map(function (module) { return module.start(); }))];
	                    case 1:
	                        _a.sent();
	                        this.logger.verbose('Finished starting all registered modules', {
	                            moduleNames: this.modules.listNames(),
	                        });
	                        return [2 /*return*/];
	                }
	            });
	        }); };
	    }
	    Core.create = function () {
	        var modules = new Modules_1.Modules();
	        var config = new Config_1$1.Config();
	        var logger = new LoggerController_1$1.LoggerController(Core.moduleName, config);
	        var core = new Core(modules, config, logger);
	        CoreConfigSetup_1.CoreConfigSetup.register(config);
	        return core;
	    };
	    Object.defineProperty(Core.prototype, "isStarted", {
	        get: function () {
	            return this._isStarted;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Core.prototype, "BigNumber", {
	        get: function () {
	            return dataTypes_1$V.BigNumber;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Core.moduleName = 'core';
	    Core.libVersion = version_1.LIB_VERSION;
	    return Core;
	}());
	Core$1.Core = Core;

	var CoreProvider$1 = {};

	Object.defineProperty(CoreProvider$1, "__esModule", { value: true });
	CoreProvider$1.CoreProvider = void 0;
	var Error_1$3 = _Error;
	var CoreProvider = /** @class */ (function () {
	    function CoreProvider() {
	    }
	    CoreProvider.getDefault = function () {
	        if (!this.core) {
	            throw new Error_1$3.CoreError({
	                code: Error_1$3.CoreErrorCode.NOT_INITIALIZED,
	                message: 'Default instance of Core is not set',
	            });
	        }
	        return this.core;
	    };
	    CoreProvider.setDefault = function (core) {
	        if (this.core) {
	            throw new Error_1$3.CoreError({
	                code: Error_1$3.CoreErrorCode.ALREADY_INITIALIZED,
	                message: 'Default instance of Core is already set',
	            });
	        }
	        this.core = core;
	    };
	    return CoreProvider;
	}());
	CoreProvider$1.CoreProvider = CoreProvider;

	var Modules = {};

	var Module$1 = {};

	Object.defineProperty(Module$1, "__esModule", { value: true });
	Module$1.Module = void 0;
	var LoggerController_1 = LoggerController$1;
	var ModuleType_1$1 = ModuleType;
	/**
	 * The base class of every Moralis class that gets registered as a module via MoralisModules
	 * It should always be created with:
	 * - `name`: name of the module (should be unique)
	 * - `core`: the Core instance
	 * - `type`: (optional) CoreModuleType, defaults to CoreModuleType.DEFAULT
	 *
	 * When creating an api, or network module, you should use the ApiModule or NetworkModule
	 */
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	var Module = /** @class */ (function () {
	    function Module(name, core, type) {
	        if (type === void 0) { type = ModuleType_1$1.ModuleType.DEFAULT; }
	        this.name = name;
	        this.core = core;
	        this.type = type;
	        this.logger = LoggerController_1.LoggerController.create(this.name, this.core);
	    }
	    /**
	     * Any cleanup that needs to be done for removing this module.
	     * It also should remove the module via `this.core.modules.remove(this.name)`
	     */
	    Module.prototype.cleanUp = function () {
	        this.core.modules.remove(this.name);
	    };
	    return Module;
	}());
	Module$1.Module = Module;

	var ApiModule$1 = {};

	var __extends$a = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(ApiModule$1, "__esModule", { value: true });
	ApiModule$1.ApiModule = void 0;
	var ModuleType_1 = ModuleType;
	var Module_1 = Module$1;
	/**
	 * The base class of every Moralis Api class that gets registered as a module via MoralisModules
	 * It should always be created with:
	 * - `name`: name of the module (should be unique)
	 * - `core`: the Core instance
	 * - `baseUrl`: the base url where of the api
	 */
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	var ApiModule = /** @class */ (function (_super) {
	    __extends$a(ApiModule, _super);
	    function ApiModule(name, core, baseUrl) {
	        var _this = _super.call(this, name, core, ModuleType_1.ModuleType.API) || this;
	        _this.baseUrl = baseUrl;
	        return _this;
	    }
	    return ApiModule;
	}(Module_1.Module));
	ApiModule$1.ApiModule = ApiModule;

	var types$v = {};

	Object.defineProperty(types$v, "__esModule", { value: true });

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(Module$1, exports);
		__exportStar(ApiModule$1, exports);
		__exportStar(ModuleType, exports);
		__exportStar(Modules$2, exports);
		__exportStar(utils$r, exports);
		__exportStar(types$v, exports);
		
	} (Modules));

	var Config = {};

	var MoralisConfig = {};

	Object.defineProperty(MoralisConfig, "__esModule", { value: true });

	var interfaces = {};

	var SolNetworkish = {};

	/**
	 * Note this is just an interface, used in the core config.
	 * The implementations are located in the @moralisweb3/common-sol-utils package.
	 */
	Object.defineProperty(SolNetworkish, "__esModule", { value: true });
	SolNetworkish.solNetworkNames = void 0;
	SolNetworkish.solNetworkNames = ['mainnet', 'devnet'];

	var EvmChainish$1 = {};

	/**
	 * Note this is just an interface, used in the core config.
	 * The implementations are located in the @moralisweb3/common-evm-utils package.
	 */
	Object.defineProperty(EvmChainish$1, "__esModule", { value: true });

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(SolNetworkish, exports);
		__exportStar(EvmChainish$1, exports);
		
	} (interfaces));

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(Config$2, exports);
		__exportStar(CoreConfig, exports);
		__exportStar(MoralisConfig, exports);
		__exportStar(interfaces, exports);
		
	} (Config));

	var Assert = {};

	var assertUnreachable = {};

	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.assertUnreachable = exports.UnreachableError = void 0;
		var Error_1 = _Error;
		exports.UnreachableError = new Error_1.CoreError({
		    code: Error_1.CoreErrorCode.GENERIC_CORE_ERROR,
		    message: "Incorrect type provided, code should not reach here",
		});
		/**
		 * Typesafe check, to make sure that code never reaches a certain point.
		 * Can be used as an exhaustive check in swtich/if-else statements
		 *
		 * When used properly with Typescript, this code should never reach, as it is typed as 'never'
		 *
		 * If the code does reach this assertion an UnreachableError is thrown
		 */
		// eslint-disable-next-line @typescript-eslint/no-unused-vars
		var assertUnreachable = function (x) {
		    throw exports.UnreachableError;
		};
		exports.assertUnreachable = assertUnreachable;
		
	} (assertUnreachable));

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(assertUnreachable, exports);
		
	} (Assert));

	var controllers = {};

	var RequestController$2 = {};

	var RequestController$1 = {};

	var global$1 = (typeof global !== "undefined" ? global :
	            typeof self !== "undefined" ? self :
	            typeof window !== "undefined" ? window : {});

	// shim for using process in browser
	// based off https://github.com/defunctzombie/node-process/blob/master/browser.js

	function defaultSetTimout$1() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout$1 () {
	    throw new Error('clearTimeout has not been defined');
	}
	var cachedSetTimeout$1 = defaultSetTimout$1;
	var cachedClearTimeout$1 = defaultClearTimeout$1;
	if (typeof global$1.setTimeout === 'function') {
	    cachedSetTimeout$1 = setTimeout;
	}
	if (typeof global$1.clearTimeout === 'function') {
	    cachedClearTimeout$1 = clearTimeout;
	}

	function runTimeout$1(fun) {
	    if (cachedSetTimeout$1 === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout$1 === defaultSetTimout$1 || !cachedSetTimeout$1) && setTimeout) {
	        cachedSetTimeout$1 = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout$1(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout$1.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout$1.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout$1(marker) {
	    if (cachedClearTimeout$1 === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout$1 === defaultClearTimeout$1 || !cachedClearTimeout$1) && clearTimeout) {
	        cachedClearTimeout$1 = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout$1(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout$1.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout$1.call(this, marker);
	        }
	    }



	}
	var queue$1 = [];
	var draining$1 = false;
	var currentQueue$1;
	var queueIndex$1 = -1;

	function cleanUpNextTick$1() {
	    if (!draining$1 || !currentQueue$1) {
	        return;
	    }
	    draining$1 = false;
	    if (currentQueue$1.length) {
	        queue$1 = currentQueue$1.concat(queue$1);
	    } else {
	        queueIndex$1 = -1;
	    }
	    if (queue$1.length) {
	        drainQueue$1();
	    }
	}

	function drainQueue$1() {
	    if (draining$1) {
	        return;
	    }
	    var timeout = runTimeout$1(cleanUpNextTick$1);
	    draining$1 = true;

	    var len = queue$1.length;
	    while(len) {
	        currentQueue$1 = queue$1;
	        queue$1 = [];
	        while (++queueIndex$1 < len) {
	            if (currentQueue$1) {
	                currentQueue$1[queueIndex$1].run();
	            }
	        }
	        queueIndex$1 = -1;
	        len = queue$1.length;
	    }
	    currentQueue$1 = null;
	    draining$1 = false;
	    runClearTimeout$1(timeout);
	}
	function nextTick$1(fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue$1.push(new Item$1(fun, args));
	    if (queue$1.length === 1 && !draining$1) {
	        runTimeout$1(drainQueue$1);
	    }
	}
	// v8 likes predictible objects
	function Item$1(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item$1.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	var title$1 = 'browser';
	var platform$2 = 'browser';
	var browser$5 = true;
	var env$1 = {};
	var argv$1 = [];
	var version$b = ''; // empty string to avoid regexp issues
	var versions$1 = {};
	var release$1 = {};
	var config$4 = {};

	function noop$6() {}

	var on$1 = noop$6;
	var addListener$1 = noop$6;
	var once$3 = noop$6;
	var off$1 = noop$6;
	var removeListener$1 = noop$6;
	var removeAllListeners$1 = noop$6;
	var emit$1 = noop$6;

	function binding$1(name) {
	    throw new Error('process.binding is not supported');
	}

	function cwd$1 () { return '/' }
	function chdir$1 (dir) {
	    throw new Error('process.chdir is not supported');
	}function umask$1() { return 0; }

	// from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
	var performance$1 = global$1.performance || {};
	var performanceNow$1 =
	  performance$1.now        ||
	  performance$1.mozNow     ||
	  performance$1.msNow      ||
	  performance$1.oNow       ||
	  performance$1.webkitNow  ||
	  function(){ return (new Date()).getTime() };

	// generate timestamp or delta
	// see http://nodejs.org/api/process.html#process_process_hrtime
	function hrtime$1(previousTimestamp){
	  var clocktime = performanceNow$1.call(performance$1)*1e-3;
	  var seconds = Math.floor(clocktime);
	  var nanoseconds = Math.floor((clocktime%1)*1e9);
	  if (previousTimestamp) {
	    seconds = seconds - previousTimestamp[0];
	    nanoseconds = nanoseconds - previousTimestamp[1];
	    if (nanoseconds<0) {
	      seconds--;
	      nanoseconds += 1e9;
	    }
	  }
	  return [seconds,nanoseconds]
	}

	var startTime$1 = new Date();
	function uptime$1() {
	  var currentTime = new Date();
	  var dif = currentTime - startTime$1;
	  return dif / 1000;
	}

	var process$1 = {
	  nextTick: nextTick$1,
	  title: title$1,
	  browser: browser$5,
	  env: env$1,
	  argv: argv$1,
	  version: version$b,
	  versions: versions$1,
	  on: on$1,
	  addListener: addListener$1,
	  once: once$3,
	  off: off$1,
	  removeListener: removeListener$1,
	  removeAllListeners: removeAllListeners$1,
	  emit: emit$1,
	  binding: binding$1,
	  cwd: cwd$1,
	  chdir: chdir$1,
	  umask: umask$1,
	  hrtime: hrtime$1,
	  platform: platform$2,
	  release: release$1,
	  config: config$4,
	  uptime: uptime$1
	};

	var AxiosRetry$1 = {};

	function bind(fn, thisArg) {
	  return function wrap() {
	    return fn.apply(thisArg, arguments);
	  };
	}

	// utils is a library of generic helper functions non-specific to axios

	const {toString: toString$2} = Object.prototype;
	const {getPrototypeOf} = Object;

	const kindOf = (cache => thing => {
	    const str = toString$2.call(thing);
	    return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
	})(Object.create(null));

	const kindOfTest = (type) => {
	  type = type.toLowerCase();
	  return (thing) => kindOf(thing) === type
	};

	const typeOfTest = type => thing => typeof thing === type;

	/**
	 * Determine if a value is an Array
	 *
	 * @param {Object} val The value to test
	 *
	 * @returns {boolean} True if value is an Array, otherwise false
	 */
	const {isArray: isArray$3} = Array;

	/**
	 * Determine if a value is undefined
	 *
	 * @param {*} val The value to test
	 *
	 * @returns {boolean} True if the value is undefined, otherwise false
	 */
	const isUndefined$1 = typeOfTest('undefined');

	/**
	 * Determine if a value is a Buffer
	 *
	 * @param {*} val The value to test
	 *
	 * @returns {boolean} True if value is a Buffer, otherwise false
	 */
	function isBuffer$3(val) {
	  return val !== null && !isUndefined$1(val) && val.constructor !== null && !isUndefined$1(val.constructor)
	    && isFunction$1(val.constructor.isBuffer) && val.constructor.isBuffer(val);
	}

	/**
	 * Determine if a value is an ArrayBuffer
	 *
	 * @param {*} val The value to test
	 *
	 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
	 */
	const isArrayBuffer = kindOfTest('ArrayBuffer');


	/**
	 * Determine if a value is a view on an ArrayBuffer
	 *
	 * @param {*} val The value to test
	 *
	 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
	 */
	function isArrayBufferView(val) {
	  let result;
	  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
	    result = ArrayBuffer.isView(val);
	  } else {
	    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));
	  }
	  return result;
	}

	/**
	 * Determine if a value is a String
	 *
	 * @param {*} val The value to test
	 *
	 * @returns {boolean} True if value is a String, otherwise false
	 */
	const isString$1 = typeOfTest('string');

	/**
	 * Determine if a value is a Function
	 *
	 * @param {*} val The value to test
	 * @returns {boolean} True if value is a Function, otherwise false
	 */
	const isFunction$1 = typeOfTest('function');

	/**
	 * Determine if a value is a Number
	 *
	 * @param {*} val The value to test
	 *
	 * @returns {boolean} True if value is a Number, otherwise false
	 */
	const isNumber$1 = typeOfTest('number');

	/**
	 * Determine if a value is an Object
	 *
	 * @param {*} thing The value to test
	 *
	 * @returns {boolean} True if value is an Object, otherwise false
	 */
	const isObject$1 = (thing) => thing !== null && typeof thing === 'object';

	/**
	 * Determine if a value is a Boolean
	 *
	 * @param {*} thing The value to test
	 * @returns {boolean} True if value is a Boolean, otherwise false
	 */
	const isBoolean$1 = thing => thing === true || thing === false;

	/**
	 * Determine if a value is a plain Object
	 *
	 * @param {*} val The value to test
	 *
	 * @returns {boolean} True if value is a plain Object, otherwise false
	 */
	const isPlainObject = (val) => {
	  if (kindOf(val) !== 'object') {
	    return false;
	  }

	  const prototype = getPrototypeOf(val);
	  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
	};

	/**
	 * Determine if a value is a Date
	 *
	 * @param {*} val The value to test
	 *
	 * @returns {boolean} True if value is a Date, otherwise false
	 */
	const isDate$1 = kindOfTest('Date');

	/**
	 * Determine if a value is a File
	 *
	 * @param {*} val The value to test
	 *
	 * @returns {boolean} True if value is a File, otherwise false
	 */
	const isFile = kindOfTest('File');

	/**
	 * Determine if a value is a Blob
	 *
	 * @param {*} val The value to test
	 *
	 * @returns {boolean} True if value is a Blob, otherwise false
	 */
	const isBlob = kindOfTest('Blob');

	/**
	 * Determine if a value is a FileList
	 *
	 * @param {*} val The value to test
	 *
	 * @returns {boolean} True if value is a File, otherwise false
	 */
	const isFileList = kindOfTest('FileList');

	/**
	 * Determine if a value is a Stream
	 *
	 * @param {*} val The value to test
	 *
	 * @returns {boolean} True if value is a Stream, otherwise false
	 */
	const isStream = (val) => isObject$1(val) && isFunction$1(val.pipe);

	/**
	 * Determine if a value is a FormData
	 *
	 * @param {*} thing The value to test
	 *
	 * @returns {boolean} True if value is an FormData, otherwise false
	 */
	const isFormData = (thing) => {
	  const pattern = '[object FormData]';
	  return thing && (
	    (typeof FormData === 'function' && thing instanceof FormData) ||
	    toString$2.call(thing) === pattern ||
	    (isFunction$1(thing.toString) && thing.toString() === pattern)
	  );
	};

	/**
	 * Determine if a value is a URLSearchParams object
	 *
	 * @param {*} val The value to test
	 *
	 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
	 */
	const isURLSearchParams = kindOfTest('URLSearchParams');

	/**
	 * Trim excess whitespace off the beginning and end of a string
	 *
	 * @param {String} str The String to trim
	 *
	 * @returns {String} The String freed of excess whitespace
	 */
	const trim = (str) => str.trim ?
	  str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');

	/**
	 * Iterate over an Array or an Object invoking a function for each item.
	 *
	 * If `obj` is an Array callback will be called passing
	 * the value, index, and complete array for each item.
	 *
	 * If 'obj' is an Object callback will be called passing
	 * the value, key, and complete object for each property.
	 *
	 * @param {Object|Array} obj The object to iterate
	 * @param {Function} fn The callback to invoke for each item
	 *
	 * @param {Boolean} [allOwnKeys = false]
	 * @returns {any}
	 */
	function forEach$1(obj, fn, {allOwnKeys = false} = {}) {
	  // Don't bother if no value provided
	  if (obj === null || typeof obj === 'undefined') {
	    return;
	  }

	  let i;
	  let l;

	  // Force an array if not already something iterable
	  if (typeof obj !== 'object') {
	    /*eslint no-param-reassign:0*/
	    obj = [obj];
	  }

	  if (isArray$3(obj)) {
	    // Iterate over array values
	    for (i = 0, l = obj.length; i < l; i++) {
	      fn.call(null, obj[i], i, obj);
	    }
	  } else {
	    // Iterate over object keys
	    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
	    const len = keys.length;
	    let key;

	    for (i = 0; i < len; i++) {
	      key = keys[i];
	      fn.call(null, obj[key], key, obj);
	    }
	  }
	}

	function findKey(obj, key) {
	  key = key.toLowerCase();
	  const keys = Object.keys(obj);
	  let i = keys.length;
	  let _key;
	  while (i-- > 0) {
	    _key = keys[i];
	    if (key === _key.toLowerCase()) {
	      return _key;
	    }
	  }
	  return null;
	}

	const _global = typeof self === "undefined" ? typeof commonjsGlobal === "undefined" ? undefined : commonjsGlobal : self;

	const isContextDefined = (context) => !isUndefined$1(context) && context !== _global;

	/**
	 * Accepts varargs expecting each argument to be an object, then
	 * immutably merges the properties of each object and returns result.
	 *
	 * When multiple objects contain the same key the later object in
	 * the arguments list will take precedence.
	 *
	 * Example:
	 *
	 * ```js
	 * var result = merge({foo: 123}, {foo: 456});
	 * console.log(result.foo); // outputs 456
	 * ```
	 *
	 * @param {Object} obj1 Object to merge
	 *
	 * @returns {Object} Result of all merge properties
	 */
	function merge(/* obj1, obj2, obj3, ... */) {
	  const {caseless} = isContextDefined(this) && this || {};
	  const result = {};
	  const assignValue = (val, key) => {
	    const targetKey = caseless && findKey(result, key) || key;
	    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
	      result[targetKey] = merge(result[targetKey], val);
	    } else if (isPlainObject(val)) {
	      result[targetKey] = merge({}, val);
	    } else if (isArray$3(val)) {
	      result[targetKey] = val.slice();
	    } else {
	      result[targetKey] = val;
	    }
	  };

	  for (let i = 0, l = arguments.length; i < l; i++) {
	    arguments[i] && forEach$1(arguments[i], assignValue);
	  }
	  return result;
	}

	/**
	 * Extends object a by mutably adding to it the properties of object b.
	 *
	 * @param {Object} a The object to be extended
	 * @param {Object} b The object to copy properties from
	 * @param {Object} thisArg The object to bind function to
	 *
	 * @param {Boolean} [allOwnKeys]
	 * @returns {Object} The resulting value of object a
	 */
	const extend = (a, b, thisArg, {allOwnKeys}= {}) => {
	  forEach$1(b, (val, key) => {
	    if (thisArg && isFunction$1(val)) {
	      a[key] = bind(val, thisArg);
	    } else {
	      a[key] = val;
	    }
	  }, {allOwnKeys});
	  return a;
	};

	/**
	 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
	 *
	 * @param {string} content with BOM
	 *
	 * @returns {string} content value without BOM
	 */
	const stripBOM = (content) => {
	  if (content.charCodeAt(0) === 0xFEFF) {
	    content = content.slice(1);
	  }
	  return content;
	};

	/**
	 * Inherit the prototype methods from one constructor into another
	 * @param {function} constructor
	 * @param {function} superConstructor
	 * @param {object} [props]
	 * @param {object} [descriptors]
	 *
	 * @returns {void}
	 */
	const inherits$h = (constructor, superConstructor, props, descriptors) => {
	  constructor.prototype = Object.create(superConstructor.prototype, descriptors);
	  constructor.prototype.constructor = constructor;
	  Object.defineProperty(constructor, 'super', {
	    value: superConstructor.prototype
	  });
	  props && Object.assign(constructor.prototype, props);
	};

	/**
	 * Resolve object with deep prototype chain to a flat object
	 * @param {Object} sourceObj source object
	 * @param {Object} [destObj]
	 * @param {Function|Boolean} [filter]
	 * @param {Function} [propFilter]
	 *
	 * @returns {Object}
	 */
	const toFlatObject = (sourceObj, destObj, filter, propFilter) => {
	  let props;
	  let i;
	  let prop;
	  const merged = {};

	  destObj = destObj || {};
	  // eslint-disable-next-line no-eq-null,eqeqeq
	  if (sourceObj == null) return destObj;

	  do {
	    props = Object.getOwnPropertyNames(sourceObj);
	    i = props.length;
	    while (i-- > 0) {
	      prop = props[i];
	      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
	        destObj[prop] = sourceObj[prop];
	        merged[prop] = true;
	      }
	    }
	    sourceObj = filter !== false && getPrototypeOf(sourceObj);
	  } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);

	  return destObj;
	};

	/**
	 * Determines whether a string ends with the characters of a specified string
	 *
	 * @param {String} str
	 * @param {String} searchString
	 * @param {Number} [position= 0]
	 *
	 * @returns {boolean}
	 */
	const endsWith$1 = (str, searchString, position) => {
	  str = String(str);
	  if (position === undefined || position > str.length) {
	    position = str.length;
	  }
	  position -= searchString.length;
	  const lastIndex = str.indexOf(searchString, position);
	  return lastIndex !== -1 && lastIndex === position;
	};


	/**
	 * Returns new array from array like object or null if failed
	 *
	 * @param {*} [thing]
	 *
	 * @returns {?Array}
	 */
	const toArray$1 = (thing) => {
	  if (!thing) return null;
	  if (isArray$3(thing)) return thing;
	  let i = thing.length;
	  if (!isNumber$1(i)) return null;
	  const arr = new Array(i);
	  while (i-- > 0) {
	    arr[i] = thing[i];
	  }
	  return arr;
	};

	/**
	 * Checking if the Uint8Array exists and if it does, it returns a function that checks if the
	 * thing passed in is an instance of Uint8Array
	 *
	 * @param {TypedArray}
	 *
	 * @returns {Array}
	 */
	// eslint-disable-next-line func-names
	const isTypedArray = (TypedArray => {
	  // eslint-disable-next-line func-names
	  return thing => {
	    return TypedArray && thing instanceof TypedArray;
	  };
	})(typeof Uint8Array !== 'undefined' && getPrototypeOf(Uint8Array));

	/**
	 * For each entry in the object, call the function with the key and value.
	 *
	 * @param {Object<any, any>} obj - The object to iterate over.
	 * @param {Function} fn - The function to call for each entry.
	 *
	 * @returns {void}
	 */
	const forEachEntry = (obj, fn) => {
	  const generator = obj && obj[Symbol.iterator];

	  const iterator = generator.call(obj);

	  let result;

	  while ((result = iterator.next()) && !result.done) {
	    const pair = result.value;
	    fn.call(obj, pair[0], pair[1]);
	  }
	};

	/**
	 * It takes a regular expression and a string, and returns an array of all the matches
	 *
	 * @param {string} regExp - The regular expression to match against.
	 * @param {string} str - The string to search.
	 *
	 * @returns {Array<boolean>}
	 */
	const matchAll = (regExp, str) => {
	  let matches;
	  const arr = [];

	  while ((matches = regExp.exec(str)) !== null) {
	    arr.push(matches);
	  }

	  return arr;
	};

	/* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */
	const isHTMLForm = kindOfTest('HTMLFormElement');

	const toCamelCase$1 = str => {
	  return str.toLowerCase().replace(/[_-\s]([a-z\d])(\w*)/g,
	    function replacer(m, p1, p2) {
	      return p1.toUpperCase() + p2;
	    }
	  );
	};

	/* Creating a function that will check if an object has a property. */
	const hasOwnProperty$1 = (({hasOwnProperty}) => (obj, prop) => hasOwnProperty.call(obj, prop))(Object.prototype);

	/**
	 * Determine if a value is a RegExp object
	 *
	 * @param {*} val The value to test
	 *
	 * @returns {boolean} True if value is a RegExp object, otherwise false
	 */
	const isRegExp$1 = kindOfTest('RegExp');

	const reduceDescriptors = (obj, reducer) => {
	  const descriptors = Object.getOwnPropertyDescriptors(obj);
	  const reducedDescriptors = {};

	  forEach$1(descriptors, (descriptor, name) => {
	    if (reducer(descriptor, name, obj) !== false) {
	      reducedDescriptors[name] = descriptor;
	    }
	  });

	  Object.defineProperties(obj, reducedDescriptors);
	};

	/**
	 * Makes all methods read-only
	 * @param {Object} obj
	 */

	const freezeMethods = (obj) => {
	  reduceDescriptors(obj, (descriptor, name) => {
	    // skip restricted props in strict mode
	    if (isFunction$1(obj) && ['arguments', 'caller', 'callee'].indexOf(name) !== -1) {
	      return false;
	    }

	    const value = obj[name];

	    if (!isFunction$1(value)) return;

	    descriptor.enumerable = false;

	    if ('writable' in descriptor) {
	      descriptor.writable = false;
	      return;
	    }

	    if (!descriptor.set) {
	      descriptor.set = () => {
	        throw Error('Can not rewrite read-only method \'' + name + '\'');
	      };
	    }
	  });
	};

	const toObjectSet = (arrayOrString, delimiter) => {
	  const obj = {};

	  const define = (arr) => {
	    arr.forEach(value => {
	      obj[value] = true;
	    });
	  };

	  isArray$3(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));

	  return obj;
	};

	const noop$5 = () => {};

	const toFiniteNumber = (value, defaultValue) => {
	  value = +value;
	  return Number.isFinite(value) ? value : defaultValue;
	};

	const toJSONObject = (obj) => {
	  const stack = new Array(10);

	  const visit = (source, i) => {

	    if (isObject$1(source)) {
	      if (stack.indexOf(source) >= 0) {
	        return;
	      }

	      if(!('toJSON' in source)) {
	        stack[i] = source;
	        const target = isArray$3(source) ? [] : {};

	        forEach$1(source, (value, key) => {
	          const reducedValue = visit(value, i + 1);
	          !isUndefined$1(reducedValue) && (target[key] = reducedValue);
	        });

	        stack[i] = undefined;

	        return target;
	      }
	    }

	    return source;
	  };

	  return visit(obj, 0);
	};

	var utils$q = {
	  isArray: isArray$3,
	  isArrayBuffer,
	  isBuffer: isBuffer$3,
	  isFormData,
	  isArrayBufferView,
	  isString: isString$1,
	  isNumber: isNumber$1,
	  isBoolean: isBoolean$1,
	  isObject: isObject$1,
	  isPlainObject,
	  isUndefined: isUndefined$1,
	  isDate: isDate$1,
	  isFile,
	  isBlob,
	  isRegExp: isRegExp$1,
	  isFunction: isFunction$1,
	  isStream,
	  isURLSearchParams,
	  isTypedArray,
	  isFileList,
	  forEach: forEach$1,
	  merge,
	  extend,
	  trim,
	  stripBOM,
	  inherits: inherits$h,
	  toFlatObject,
	  kindOf,
	  kindOfTest,
	  endsWith: endsWith$1,
	  toArray: toArray$1,
	  forEachEntry,
	  matchAll,
	  isHTMLForm,
	  hasOwnProperty: hasOwnProperty$1,
	  hasOwnProp: hasOwnProperty$1, // an alias to avoid ESLint no-prototype-builtins detection
	  reduceDescriptors,
	  freezeMethods,
	  toObjectSet,
	  toCamelCase: toCamelCase$1,
	  noop: noop$5,
	  toFiniteNumber,
	  findKey,
	  global: _global,
	  isContextDefined,
	  toJSONObject
	};

	/**
	 * Create an Error with the specified message, config, error code, request and response.
	 *
	 * @param {string} message The error message.
	 * @param {string} [code] The error code (for example, 'ECONNABORTED').
	 * @param {Object} [config] The config.
	 * @param {Object} [request] The request.
	 * @param {Object} [response] The response.
	 *
	 * @returns {Error} The created error.
	 */
	function AxiosError(message, code, config, request, response) {
	  Error.call(this);

	  if (Error.captureStackTrace) {
	    Error.captureStackTrace(this, this.constructor);
	  } else {
	    this.stack = (new Error()).stack;
	  }

	  this.message = message;
	  this.name = 'AxiosError';
	  code && (this.code = code);
	  config && (this.config = config);
	  request && (this.request = request);
	  response && (this.response = response);
	}

	utils$q.inherits(AxiosError, Error, {
	  toJSON: function toJSON() {
	    return {
	      // Standard
	      message: this.message,
	      name: this.name,
	      // Microsoft
	      description: this.description,
	      number: this.number,
	      // Mozilla
	      fileName: this.fileName,
	      lineNumber: this.lineNumber,
	      columnNumber: this.columnNumber,
	      stack: this.stack,
	      // Axios
	      config: utils$q.toJSONObject(this.config),
	      code: this.code,
	      status: this.response && this.response.status ? this.response.status : null
	    };
	  }
	});

	const prototype$1 = AxiosError.prototype;
	const descriptors = {};

	[
	  'ERR_BAD_OPTION_VALUE',
	  'ERR_BAD_OPTION',
	  'ECONNABORTED',
	  'ETIMEDOUT',
	  'ERR_NETWORK',
	  'ERR_FR_TOO_MANY_REDIRECTS',
	  'ERR_DEPRECATED',
	  'ERR_BAD_RESPONSE',
	  'ERR_BAD_REQUEST',
	  'ERR_CANCELED',
	  'ERR_NOT_SUPPORT',
	  'ERR_INVALID_URL'
	// eslint-disable-next-line func-names
	].forEach(code => {
	  descriptors[code] = {value: code};
	});

	Object.defineProperties(AxiosError, descriptors);
	Object.defineProperty(prototype$1, 'isAxiosError', {value: true});

	// eslint-disable-next-line func-names
	AxiosError.from = (error, code, config, request, response, customProps) => {
	  const axiosError = Object.create(prototype$1);

	  utils$q.toFlatObject(error, axiosError, function filter(obj) {
	    return obj !== Error.prototype;
	  }, prop => {
	    return prop !== 'isAxiosError';
	  });

	  AxiosError.call(axiosError, error.message, code, config, request, response);

	  axiosError.cause = error;

	  axiosError.name = error.name;

	  customProps && Object.assign(axiosError, customProps);

	  return axiosError;
	};

	/* eslint-env browser */
	var browser$4 = typeof self == 'object' ? self.FormData : window.FormData;

	var FormData$2 = browser$4;

	/**
	 * Determines if the given thing is a array or js object.
	 *
	 * @param {string} thing - The object or array to be visited.
	 *
	 * @returns {boolean}
	 */
	function isVisitable(thing) {
	  return utils$q.isPlainObject(thing) || utils$q.isArray(thing);
	}

	/**
	 * It removes the brackets from the end of a string
	 *
	 * @param {string} key - The key of the parameter.
	 *
	 * @returns {string} the key without the brackets.
	 */
	function removeBrackets(key) {
	  return utils$q.endsWith(key, '[]') ? key.slice(0, -2) : key;
	}

	/**
	 * It takes a path, a key, and a boolean, and returns a string
	 *
	 * @param {string} path - The path to the current key.
	 * @param {string} key - The key of the current object being iterated over.
	 * @param {string} dots - If true, the key will be rendered with dots instead of brackets.
	 *
	 * @returns {string} The path to the current key.
	 */
	function renderKey(path, key, dots) {
	  if (!path) return key;
	  return path.concat(key).map(function each(token, i) {
	    // eslint-disable-next-line no-param-reassign
	    token = removeBrackets(token);
	    return !dots && i ? '[' + token + ']' : token;
	  }).join(dots ? '.' : '');
	}

	/**
	 * If the array is an array and none of its elements are visitable, then it's a flat array.
	 *
	 * @param {Array<any>} arr - The array to check
	 *
	 * @returns {boolean}
	 */
	function isFlatArray(arr) {
	  return utils$q.isArray(arr) && !arr.some(isVisitable);
	}

	const predicates = utils$q.toFlatObject(utils$q, {}, null, function filter(prop) {
	  return /^is[A-Z]/.test(prop);
	});

	/**
	 * If the thing is a FormData object, return true, otherwise return false.
	 *
	 * @param {unknown} thing - The thing to check.
	 *
	 * @returns {boolean}
	 */
	function isSpecCompliant(thing) {
	  return thing && utils$q.isFunction(thing.append) && thing[Symbol.toStringTag] === 'FormData' && thing[Symbol.iterator];
	}

	/**
	 * Convert a data object to FormData
	 *
	 * @param {Object} obj
	 * @param {?Object} [formData]
	 * @param {?Object} [options]
	 * @param {Function} [options.visitor]
	 * @param {Boolean} [options.metaTokens = true]
	 * @param {Boolean} [options.dots = false]
	 * @param {?Boolean} [options.indexes = false]
	 *
	 * @returns {Object}
	 **/

	/**
	 * It converts an object into a FormData object
	 *
	 * @param {Object<any, any>} obj - The object to convert to form data.
	 * @param {string} formData - The FormData object to append to.
	 * @param {Object<string, any>} options
	 *
	 * @returns
	 */
	function toFormData(obj, formData, options) {
	  if (!utils$q.isObject(obj)) {
	    throw new TypeError('target must be an object');
	  }

	  // eslint-disable-next-line no-param-reassign
	  formData = formData || new (FormData$2 || FormData)();

	  // eslint-disable-next-line no-param-reassign
	  options = utils$q.toFlatObject(options, {
	    metaTokens: true,
	    dots: false,
	    indexes: false
	  }, false, function defined(option, source) {
	    // eslint-disable-next-line no-eq-null,eqeqeq
	    return !utils$q.isUndefined(source[option]);
	  });

	  const metaTokens = options.metaTokens;
	  // eslint-disable-next-line no-use-before-define
	  const visitor = options.visitor || defaultVisitor;
	  const dots = options.dots;
	  const indexes = options.indexes;
	  const _Blob = options.Blob || typeof Blob !== 'undefined' && Blob;
	  const useBlob = _Blob && isSpecCompliant(formData);

	  if (!utils$q.isFunction(visitor)) {
	    throw new TypeError('visitor must be a function');
	  }

	  function convertValue(value) {
	    if (value === null) return '';

	    if (utils$q.isDate(value)) {
	      return value.toISOString();
	    }

	    if (!useBlob && utils$q.isBlob(value)) {
	      throw new AxiosError('Blob is not supported. Use a Buffer instead.');
	    }

	    if (utils$q.isArrayBuffer(value) || utils$q.isTypedArray(value)) {
	      return useBlob && typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);
	    }

	    return value;
	  }

	  /**
	   * Default visitor.
	   *
	   * @param {*} value
	   * @param {String|Number} key
	   * @param {Array<String|Number>} path
	   * @this {FormData}
	   *
	   * @returns {boolean} return true to visit the each prop of the value recursively
	   */
	  function defaultVisitor(value, key, path) {
	    let arr = value;

	    if (value && !path && typeof value === 'object') {
	      if (utils$q.endsWith(key, '{}')) {
	        // eslint-disable-next-line no-param-reassign
	        key = metaTokens ? key : key.slice(0, -2);
	        // eslint-disable-next-line no-param-reassign
	        value = JSON.stringify(value);
	      } else if (
	        (utils$q.isArray(value) && isFlatArray(value)) ||
	        (utils$q.isFileList(value) || utils$q.endsWith(key, '[]') && (arr = utils$q.toArray(value))
	        )) {
	        // eslint-disable-next-line no-param-reassign
	        key = removeBrackets(key);

	        arr.forEach(function each(el, index) {
	          !(utils$q.isUndefined(el) || el === null) && formData.append(
	            // eslint-disable-next-line no-nested-ternary
	            indexes === true ? renderKey([key], index, dots) : (indexes === null ? key : key + '[]'),
	            convertValue(el)
	          );
	        });
	        return false;
	      }
	    }

	    if (isVisitable(value)) {
	      return true;
	    }

	    formData.append(renderKey(path, key, dots), convertValue(value));

	    return false;
	  }

	  const stack = [];

	  const exposedHelpers = Object.assign(predicates, {
	    defaultVisitor,
	    convertValue,
	    isVisitable
	  });

	  function build(value, path) {
	    if (utils$q.isUndefined(value)) return;

	    if (stack.indexOf(value) !== -1) {
	      throw Error('Circular reference detected in ' + path.join('.'));
	    }

	    stack.push(value);

	    utils$q.forEach(value, function each(el, key) {
	      const result = !(utils$q.isUndefined(el) || el === null) && visitor.call(
	        formData, el, utils$q.isString(key) ? key.trim() : key, path, exposedHelpers
	      );

	      if (result === true) {
	        build(el, path ? path.concat(key) : [key]);
	      }
	    });

	    stack.pop();
	  }

	  if (!utils$q.isObject(obj)) {
	    throw new TypeError('data must be an object');
	  }

	  build(obj);

	  return formData;
	}

	/**
	 * It encodes a string by replacing all characters that are not in the unreserved set with
	 * their percent-encoded equivalents
	 *
	 * @param {string} str - The string to encode.
	 *
	 * @returns {string} The encoded string.
	 */
	function encode$1$1(str) {
	  const charMap = {
	    '!': '%21',
	    "'": '%27',
	    '(': '%28',
	    ')': '%29',
	    '~': '%7E',
	    '%20': '+',
	    '%00': '\x00'
	  };
	  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
	    return charMap[match];
	  });
	}

	/**
	 * It takes a params object and converts it to a FormData object
	 *
	 * @param {Object<string, any>} params - The parameters to be converted to a FormData object.
	 * @param {Object<string, any>} options - The options object passed to the Axios constructor.
	 *
	 * @returns {void}
	 */
	function AxiosURLSearchParams(params, options) {
	  this._pairs = [];

	  params && toFormData(params, this, options);
	}

	const prototype = AxiosURLSearchParams.prototype;

	prototype.append = function append(name, value) {
	  this._pairs.push([name, value]);
	};

	prototype.toString = function toString(encoder) {
	  const _encode = encoder ? function(value) {
	    return encoder.call(this, value, encode$1$1);
	  } : encode$1$1;

	  return this._pairs.map(function each(pair) {
	    return _encode(pair[0]) + '=' + _encode(pair[1]);
	  }, '').join('&');
	};

	/**
	 * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their
	 * URI encoded counterparts
	 *
	 * @param {string} val The value to be encoded.
	 *
	 * @returns {string} The encoded value.
	 */
	function encode$2(val) {
	  return encodeURIComponent(val).
	    replace(/%3A/gi, ':').
	    replace(/%24/g, '$').
	    replace(/%2C/gi, ',').
	    replace(/%20/g, '+').
	    replace(/%5B/gi, '[').
	    replace(/%5D/gi, ']');
	}

	/**
	 * Build a URL by appending params to the end
	 *
	 * @param {string} url The base of the url (e.g., http://www.google.com)
	 * @param {object} [params] The params to be appended
	 * @param {?object} options
	 *
	 * @returns {string} The formatted url
	 */
	function buildURL(url, params, options) {
	  /*eslint no-param-reassign:0*/
	  if (!params) {
	    return url;
	  }
	  
	  const _encode = options && options.encode || encode$2;

	  const serializeFn = options && options.serialize;

	  let serializedParams;

	  if (serializeFn) {
	    serializedParams = serializeFn(params, options);
	  } else {
	    serializedParams = utils$q.isURLSearchParams(params) ?
	      params.toString() :
	      new AxiosURLSearchParams(params, options).toString(_encode);
	  }

	  if (serializedParams) {
	    const hashmarkIndex = url.indexOf("#");

	    if (hashmarkIndex !== -1) {
	      url = url.slice(0, hashmarkIndex);
	    }
	    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
	  }

	  return url;
	}

	class InterceptorManager {
	  constructor() {
	    this.handlers = [];
	  }

	  /**
	   * Add a new interceptor to the stack
	   *
	   * @param {Function} fulfilled The function to handle `then` for a `Promise`
	   * @param {Function} rejected The function to handle `reject` for a `Promise`
	   *
	   * @return {Number} An ID used to remove interceptor later
	   */
	  use(fulfilled, rejected, options) {
	    this.handlers.push({
	      fulfilled,
	      rejected,
	      synchronous: options ? options.synchronous : false,
	      runWhen: options ? options.runWhen : null
	    });
	    return this.handlers.length - 1;
	  }

	  /**
	   * Remove an interceptor from the stack
	   *
	   * @param {Number} id The ID that was returned by `use`
	   *
	   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
	   */
	  eject(id) {
	    if (this.handlers[id]) {
	      this.handlers[id] = null;
	    }
	  }

	  /**
	   * Clear all interceptors from the stack
	   *
	   * @returns {void}
	   */
	  clear() {
	    if (this.handlers) {
	      this.handlers = [];
	    }
	  }

	  /**
	   * Iterate over all the registered interceptors
	   *
	   * This method is particularly useful for skipping over any
	   * interceptors that may have become `null` calling `eject`.
	   *
	   * @param {Function} fn The function to call for each interceptor
	   *
	   * @returns {void}
	   */
	  forEach(fn) {
	    utils$q.forEach(this.handlers, function forEachHandler(h) {
	      if (h !== null) {
	        fn(h);
	      }
	    });
	  }
	}

	var InterceptorManager$1 = InterceptorManager;

	var transitionalDefaults = {
	  silentJSONParsing: true,
	  forcedJSONParsing: true,
	  clarifyTimeoutError: false
	};

	var URLSearchParams$1 = typeof URLSearchParams !== 'undefined' ? URLSearchParams : AxiosURLSearchParams;

	var FormData$1 = FormData;

	/**
	 * Determine if we're running in a standard browser environment
	 *
	 * This allows axios to run in a web worker, and react-native.
	 * Both environments support XMLHttpRequest, but not fully standard globals.
	 *
	 * web workers:
	 *  typeof window -> undefined
	 *  typeof document -> undefined
	 *
	 * react-native:
	 *  navigator.product -> 'ReactNative'
	 * nativescript
	 *  navigator.product -> 'NativeScript' or 'NS'
	 *
	 * @returns {boolean}
	 */
	const isStandardBrowserEnv = (() => {
	  let product;
	  if (typeof navigator !== 'undefined' && (
	    (product = navigator.product) === 'ReactNative' ||
	    product === 'NativeScript' ||
	    product === 'NS')
	  ) {
	    return false;
	  }

	  return typeof window !== 'undefined' && typeof document !== 'undefined';
	})();

	/**
	 * Determine if we're running in a standard browser webWorker environment
	 *
	 * Although the `isStandardBrowserEnv` method indicates that
	 * `allows axios to run in a web worker`, the WebWorker will still be
	 * filtered out due to its judgment standard
	 * `typeof window !== 'undefined' && typeof document !== 'undefined'`.
	 * This leads to a problem when axios post `FormData` in webWorker
	 */
	 const isStandardBrowserWebWorkerEnv = (() => {
	  return (
	    typeof WorkerGlobalScope !== 'undefined' &&
	    self instanceof WorkerGlobalScope &&
	    typeof self.importScripts === 'function'
	  );
	})();


	var platform$1 = {
	  isBrowser: true,
	  classes: {
	    URLSearchParams: URLSearchParams$1,
	    FormData: FormData$1,
	    Blob
	  },
	  isStandardBrowserEnv,
	  isStandardBrowserWebWorkerEnv,
	  protocols: ['http', 'https', 'file', 'blob', 'url', 'data']
	};

	function toURLEncodedForm(data, options) {
	  return toFormData(data, new platform$1.classes.URLSearchParams(), Object.assign({
	    visitor: function(value, key, path, helpers) {
	      if (platform$1.isNode && utils$q.isBuffer(value)) {
	        this.append(key, value.toString('base64'));
	        return false;
	      }

	      return helpers.defaultVisitor.apply(this, arguments);
	    }
	  }, options));
	}

	/**
	 * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']
	 *
	 * @param {string} name - The name of the property to get.
	 *
	 * @returns An array of strings.
	 */
	function parsePropPath(name) {
	  // foo[x][y][z]
	  // foo.x.y.z
	  // foo-x-y-z
	  // foo x y z
	  return utils$q.matchAll(/\w+|\[(\w*)]/g, name).map(match => {
	    return match[0] === '[]' ? '' : match[1] || match[0];
	  });
	}

	/**
	 * Convert an array to an object.
	 *
	 * @param {Array<any>} arr - The array to convert to an object.
	 *
	 * @returns An object with the same keys and values as the array.
	 */
	function arrayToObject(arr) {
	  const obj = {};
	  const keys = Object.keys(arr);
	  let i;
	  const len = keys.length;
	  let key;
	  for (i = 0; i < len; i++) {
	    key = keys[i];
	    obj[key] = arr[key];
	  }
	  return obj;
	}

	/**
	 * It takes a FormData object and returns a JavaScript object
	 *
	 * @param {string} formData The FormData object to convert to JSON.
	 *
	 * @returns {Object<string, any> | null} The converted object.
	 */
	function formDataToJSON(formData) {
	  function buildPath(path, value, target, index) {
	    let name = path[index++];
	    const isNumericKey = Number.isFinite(+name);
	    const isLast = index >= path.length;
	    name = !name && utils$q.isArray(target) ? target.length : name;

	    if (isLast) {
	      if (utils$q.hasOwnProp(target, name)) {
	        target[name] = [target[name], value];
	      } else {
	        target[name] = value;
	      }

	      return !isNumericKey;
	    }

	    if (!target[name] || !utils$q.isObject(target[name])) {
	      target[name] = [];
	    }

	    const result = buildPath(path, value, target[name], index);

	    if (result && utils$q.isArray(target[name])) {
	      target[name] = arrayToObject(target[name]);
	    }

	    return !isNumericKey;
	  }

	  if (utils$q.isFormData(formData) && utils$q.isFunction(formData.entries)) {
	    const obj = {};

	    utils$q.forEachEntry(formData, (name, value) => {
	      buildPath(parsePropPath(name), value, obj, 0);
	    });

	    return obj;
	  }

	  return null;
	}

	const DEFAULT_CONTENT_TYPE = {
	  'Content-Type': undefined
	};

	/**
	 * It takes a string, tries to parse it, and if it fails, it returns the stringified version
	 * of the input
	 *
	 * @param {any} rawValue - The value to be stringified.
	 * @param {Function} parser - A function that parses a string into a JavaScript object.
	 * @param {Function} encoder - A function that takes a value and returns a string.
	 *
	 * @returns {string} A stringified version of the rawValue.
	 */
	function stringifySafely(rawValue, parser, encoder) {
	  if (utils$q.isString(rawValue)) {
	    try {
	      (parser || JSON.parse)(rawValue);
	      return utils$q.trim(rawValue);
	    } catch (e) {
	      if (e.name !== 'SyntaxError') {
	        throw e;
	      }
	    }
	  }

	  return (encoder || JSON.stringify)(rawValue);
	}

	const defaults = {

	  transitional: transitionalDefaults,

	  adapter: ['xhr', 'http'],

	  transformRequest: [function transformRequest(data, headers) {
	    const contentType = headers.getContentType() || '';
	    const hasJSONContentType = contentType.indexOf('application/json') > -1;
	    const isObjectPayload = utils$q.isObject(data);

	    if (isObjectPayload && utils$q.isHTMLForm(data)) {
	      data = new FormData(data);
	    }

	    const isFormData = utils$q.isFormData(data);

	    if (isFormData) {
	      if (!hasJSONContentType) {
	        return data;
	      }
	      return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;
	    }

	    if (utils$q.isArrayBuffer(data) ||
	      utils$q.isBuffer(data) ||
	      utils$q.isStream(data) ||
	      utils$q.isFile(data) ||
	      utils$q.isBlob(data)
	    ) {
	      return data;
	    }
	    if (utils$q.isArrayBufferView(data)) {
	      return data.buffer;
	    }
	    if (utils$q.isURLSearchParams(data)) {
	      headers.setContentType('application/x-www-form-urlencoded;charset=utf-8', false);
	      return data.toString();
	    }

	    let isFileList;

	    if (isObjectPayload) {
	      if (contentType.indexOf('application/x-www-form-urlencoded') > -1) {
	        return toURLEncodedForm(data, this.formSerializer).toString();
	      }

	      if ((isFileList = utils$q.isFileList(data)) || contentType.indexOf('multipart/form-data') > -1) {
	        const _FormData = this.env && this.env.FormData;

	        return toFormData(
	          isFileList ? {'files[]': data} : data,
	          _FormData && new _FormData(),
	          this.formSerializer
	        );
	      }
	    }

	    if (isObjectPayload || hasJSONContentType ) {
	      headers.setContentType('application/json', false);
	      return stringifySafely(data);
	    }

	    return data;
	  }],

	  transformResponse: [function transformResponse(data) {
	    const transitional = this.transitional || defaults.transitional;
	    const forcedJSONParsing = transitional && transitional.forcedJSONParsing;
	    const JSONRequested = this.responseType === 'json';

	    if (data && utils$q.isString(data) && ((forcedJSONParsing && !this.responseType) || JSONRequested)) {
	      const silentJSONParsing = transitional && transitional.silentJSONParsing;
	      const strictJSONParsing = !silentJSONParsing && JSONRequested;

	      try {
	        return JSON.parse(data);
	      } catch (e) {
	        if (strictJSONParsing) {
	          if (e.name === 'SyntaxError') {
	            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
	          }
	          throw e;
	        }
	      }
	    }

	    return data;
	  }],

	  /**
	   * A timeout in milliseconds to abort a request. If set to 0 (default) a
	   * timeout is not created.
	   */
	  timeout: 0,

	  xsrfCookieName: 'XSRF-TOKEN',
	  xsrfHeaderName: 'X-XSRF-TOKEN',

	  maxContentLength: -1,
	  maxBodyLength: -1,

	  env: {
	    FormData: platform$1.classes.FormData,
	    Blob: platform$1.classes.Blob
	  },

	  validateStatus: function validateStatus(status) {
	    return status >= 200 && status < 300;
	  },

	  headers: {
	    common: {
	      'Accept': 'application/json, text/plain, */*'
	    }
	  }
	};

	utils$q.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
	  defaults.headers[method] = {};
	});

	utils$q.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
	  defaults.headers[method] = utils$q.merge(DEFAULT_CONTENT_TYPE);
	});

	var defaults$1 = defaults;

	// RawAxiosHeaders whose duplicates are ignored by node
	// c.f. https://nodejs.org/api/http.html#http_message_headers
	const ignoreDuplicateOf = utils$q.toObjectSet([
	  'age', 'authorization', 'content-length', 'content-type', 'etag',
	  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
	  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
	  'referer', 'retry-after', 'user-agent'
	]);

	/**
	 * Parse headers into an object
	 *
	 * ```
	 * Date: Wed, 27 Aug 2014 08:58:49 GMT
	 * Content-Type: application/json
	 * Connection: keep-alive
	 * Transfer-Encoding: chunked
	 * ```
	 *
	 * @param {String} rawHeaders Headers needing to be parsed
	 *
	 * @returns {Object} Headers parsed into an object
	 */
	var parseHeaders = rawHeaders => {
	  const parsed = {};
	  let key;
	  let val;
	  let i;

	  rawHeaders && rawHeaders.split('\n').forEach(function parser(line) {
	    i = line.indexOf(':');
	    key = line.substring(0, i).trim().toLowerCase();
	    val = line.substring(i + 1).trim();

	    if (!key || (parsed[key] && ignoreDuplicateOf[key])) {
	      return;
	    }

	    if (key === 'set-cookie') {
	      if (parsed[key]) {
	        parsed[key].push(val);
	      } else {
	        parsed[key] = [val];
	      }
	    } else {
	      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
	    }
	  });

	  return parsed;
	};

	const $internals = Symbol('internals');

	function normalizeHeader(header) {
	  return header && String(header).trim().toLowerCase();
	}

	function normalizeValue(value) {
	  if (value === false || value == null) {
	    return value;
	  }

	  return utils$q.isArray(value) ? value.map(normalizeValue) : String(value);
	}

	function parseTokens(str) {
	  const tokens = Object.create(null);
	  const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
	  let match;

	  while ((match = tokensRE.exec(str))) {
	    tokens[match[1]] = match[2];
	  }

	  return tokens;
	}

	function isValidHeaderName(str) {
	  return /^[-_a-zA-Z]+$/.test(str.trim());
	}

	function matchHeaderValue(context, value, header, filter) {
	  if (utils$q.isFunction(filter)) {
	    return filter.call(this, value, header);
	  }

	  if (!utils$q.isString(value)) return;

	  if (utils$q.isString(filter)) {
	    return value.indexOf(filter) !== -1;
	  }

	  if (utils$q.isRegExp(filter)) {
	    return filter.test(value);
	  }
	}

	function formatHeader(header) {
	  return header.trim()
	    .toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
	      return char.toUpperCase() + str;
	    });
	}

	function buildAccessors(obj, header) {
	  const accessorName = utils$q.toCamelCase(' ' + header);

	  ['get', 'set', 'has'].forEach(methodName => {
	    Object.defineProperty(obj, methodName + accessorName, {
	      value: function(arg1, arg2, arg3) {
	        return this[methodName].call(this, header, arg1, arg2, arg3);
	      },
	      configurable: true
	    });
	  });
	}

	class AxiosHeaders {
	  constructor(headers) {
	    headers && this.set(headers);
	  }

	  set(header, valueOrRewrite, rewrite) {
	    const self = this;

	    function setHeader(_value, _header, _rewrite) {
	      const lHeader = normalizeHeader(_header);

	      if (!lHeader) {
	        throw new Error('header name must be a non-empty string');
	      }

	      const key = utils$q.findKey(self, lHeader);

	      if(!key || self[key] === undefined || _rewrite === true || (_rewrite === undefined && self[key] !== false)) {
	        self[key || _header] = normalizeValue(_value);
	      }
	    }

	    const setHeaders = (headers, _rewrite) =>
	      utils$q.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));

	    if (utils$q.isPlainObject(header) || header instanceof this.constructor) {
	      setHeaders(header, valueOrRewrite);
	    } else if(utils$q.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
	      setHeaders(parseHeaders(header), valueOrRewrite);
	    } else {
	      header != null && setHeader(valueOrRewrite, header, rewrite);
	    }

	    return this;
	  }

	  get(header, parser) {
	    header = normalizeHeader(header);

	    if (header) {
	      const key = utils$q.findKey(this, header);

	      if (key) {
	        const value = this[key];

	        if (!parser) {
	          return value;
	        }

	        if (parser === true) {
	          return parseTokens(value);
	        }

	        if (utils$q.isFunction(parser)) {
	          return parser.call(this, value, key);
	        }

	        if (utils$q.isRegExp(parser)) {
	          return parser.exec(value);
	        }

	        throw new TypeError('parser must be boolean|regexp|function');
	      }
	    }
	  }

	  has(header, matcher) {
	    header = normalizeHeader(header);

	    if (header) {
	      const key = utils$q.findKey(this, header);

	      return !!(key && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
	    }

	    return false;
	  }

	  delete(header, matcher) {
	    const self = this;
	    let deleted = false;

	    function deleteHeader(_header) {
	      _header = normalizeHeader(_header);

	      if (_header) {
	        const key = utils$q.findKey(self, _header);

	        if (key && (!matcher || matchHeaderValue(self, self[key], key, matcher))) {
	          delete self[key];

	          deleted = true;
	        }
	      }
	    }

	    if (utils$q.isArray(header)) {
	      header.forEach(deleteHeader);
	    } else {
	      deleteHeader(header);
	    }

	    return deleted;
	  }

	  clear() {
	    return Object.keys(this).forEach(this.delete.bind(this));
	  }

	  normalize(format) {
	    const self = this;
	    const headers = {};

	    utils$q.forEach(this, (value, header) => {
	      const key = utils$q.findKey(headers, header);

	      if (key) {
	        self[key] = normalizeValue(value);
	        delete self[header];
	        return;
	      }

	      const normalized = format ? formatHeader(header) : String(header).trim();

	      if (normalized !== header) {
	        delete self[header];
	      }

	      self[normalized] = normalizeValue(value);

	      headers[normalized] = true;
	    });

	    return this;
	  }

	  concat(...targets) {
	    return this.constructor.concat(this, ...targets);
	  }

	  toJSON(asStrings) {
	    const obj = Object.create(null);

	    utils$q.forEach(this, (value, header) => {
	      value != null && value !== false && (obj[header] = asStrings && utils$q.isArray(value) ? value.join(', ') : value);
	    });

	    return obj;
	  }

	  [Symbol.iterator]() {
	    return Object.entries(this.toJSON())[Symbol.iterator]();
	  }

	  toString() {
	    return Object.entries(this.toJSON()).map(([header, value]) => header + ': ' + value).join('\n');
	  }

	  get [Symbol.toStringTag]() {
	    return 'AxiosHeaders';
	  }

	  static from(thing) {
	    return thing instanceof this ? thing : new this(thing);
	  }

	  static concat(first, ...targets) {
	    const computed = new this(first);

	    targets.forEach((target) => computed.set(target));

	    return computed;
	  }

	  static accessor(header) {
	    const internals = this[$internals] = (this[$internals] = {
	      accessors: {}
	    });

	    const accessors = internals.accessors;
	    const prototype = this.prototype;

	    function defineAccessor(_header) {
	      const lHeader = normalizeHeader(_header);

	      if (!accessors[lHeader]) {
	        buildAccessors(prototype, _header);
	        accessors[lHeader] = true;
	      }
	    }

	    utils$q.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);

	    return this;
	  }
	}

	AxiosHeaders.accessor(['Content-Type', 'Content-Length', 'Accept', 'Accept-Encoding', 'User-Agent']);

	utils$q.freezeMethods(AxiosHeaders.prototype);
	utils$q.freezeMethods(AxiosHeaders);

	var AxiosHeaders$1 = AxiosHeaders;

	/**
	 * Transform the data for a request or a response
	 *
	 * @param {Array|Function} fns A single function or Array of functions
	 * @param {?Object} response The response object
	 *
	 * @returns {*} The resulting transformed data
	 */
	function transformData(fns, response) {
	  const config = this || defaults$1;
	  const context = response || config;
	  const headers = AxiosHeaders$1.from(context.headers);
	  let data = context.data;

	  utils$q.forEach(fns, function transform(fn) {
	    data = fn.call(config, data, headers.normalize(), response ? response.status : undefined);
	  });

	  headers.normalize();

	  return data;
	}

	function isCancel(value) {
	  return !!(value && value.__CANCEL__);
	}

	/**
	 * A `CanceledError` is an object that is thrown when an operation is canceled.
	 *
	 * @param {string=} message The message.
	 * @param {Object=} config The config.
	 * @param {Object=} request The request.
	 *
	 * @returns {CanceledError} The created error.
	 */
	function CanceledError(message, config, request) {
	  // eslint-disable-next-line no-eq-null,eqeqeq
	  AxiosError.call(this, message == null ? 'canceled' : message, AxiosError.ERR_CANCELED, config, request);
	  this.name = 'CanceledError';
	}

	utils$q.inherits(CanceledError, AxiosError, {
	  __CANCEL__: true
	});

	// eslint-disable-next-line strict
	var httpAdapter = null;

	/**
	 * Resolve or reject a Promise based on response status.
	 *
	 * @param {Function} resolve A function that resolves the promise.
	 * @param {Function} reject A function that rejects the promise.
	 * @param {object} response The response.
	 *
	 * @returns {object} The response.
	 */
	function settle(resolve, reject, response) {
	  const validateStatus = response.config.validateStatus;
	  if (!response.status || !validateStatus || validateStatus(response.status)) {
	    resolve(response);
	  } else {
	    reject(new AxiosError(
	      'Request failed with status code ' + response.status,
	      [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
	      response.config,
	      response.request,
	      response
	    ));
	  }
	}

	var cookies = platform$1.isStandardBrowserEnv ?

	// Standard browser envs support document.cookie
	  (function standardBrowserEnv() {
	    return {
	      write: function write(name, value, expires, path, domain, secure) {
	        const cookie = [];
	        cookie.push(name + '=' + encodeURIComponent(value));

	        if (utils$q.isNumber(expires)) {
	          cookie.push('expires=' + new Date(expires).toGMTString());
	        }

	        if (utils$q.isString(path)) {
	          cookie.push('path=' + path);
	        }

	        if (utils$q.isString(domain)) {
	          cookie.push('domain=' + domain);
	        }

	        if (secure === true) {
	          cookie.push('secure');
	        }

	        document.cookie = cookie.join('; ');
	      },

	      read: function read(name) {
	        const match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
	        return (match ? decodeURIComponent(match[3]) : null);
	      },

	      remove: function remove(name) {
	        this.write(name, '', Date.now() - 86400000);
	      }
	    };
	  })() :

	// Non standard browser env (web workers, react-native) lack needed support.
	  (function nonStandardBrowserEnv() {
	    return {
	      write: function write() {},
	      read: function read() { return null; },
	      remove: function remove() {}
	    };
	  })();

	/**
	 * Determines whether the specified URL is absolute
	 *
	 * @param {string} url The URL to test
	 *
	 * @returns {boolean} True if the specified URL is absolute, otherwise false
	 */
	function isAbsoluteURL(url) {
	  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
	  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
	  // by any combination of letters, digits, plus, period, or hyphen.
	  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
	}

	/**
	 * Creates a new URL by combining the specified URLs
	 *
	 * @param {string} baseURL The base URL
	 * @param {string} relativeURL The relative URL
	 *
	 * @returns {string} The combined URL
	 */
	function combineURLs(baseURL, relativeURL) {
	  return relativeURL
	    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
	    : baseURL;
	}

	/**
	 * Creates a new URL by combining the baseURL with the requestedURL,
	 * only when the requestedURL is not already an absolute URL.
	 * If the requestURL is absolute, this function returns the requestedURL untouched.
	 *
	 * @param {string} baseURL The base URL
	 * @param {string} requestedURL Absolute or relative URL to combine
	 *
	 * @returns {string} The combined full path
	 */
	function buildFullPath(baseURL, requestedURL) {
	  if (baseURL && !isAbsoluteURL(requestedURL)) {
	    return combineURLs(baseURL, requestedURL);
	  }
	  return requestedURL;
	}

	var isURLSameOrigin = platform$1.isStandardBrowserEnv ?

	// Standard browser envs have full support of the APIs needed to test
	// whether the request URL is of the same origin as current location.
	  (function standardBrowserEnv() {
	    const msie = /(msie|trident)/i.test(navigator.userAgent);
	    const urlParsingNode = document.createElement('a');
	    let originURL;

	    /**
	    * Parse a URL to discover it's components
	    *
	    * @param {String} url The URL to be parsed
	    * @returns {Object}
	    */
	    function resolveURL(url) {
	      let href = url;

	      if (msie) {
	        // IE needs attribute set twice to normalize properties
	        urlParsingNode.setAttribute('href', href);
	        href = urlParsingNode.href;
	      }

	      urlParsingNode.setAttribute('href', href);

	      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
	      return {
	        href: urlParsingNode.href,
	        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
	        host: urlParsingNode.host,
	        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
	        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
	        hostname: urlParsingNode.hostname,
	        port: urlParsingNode.port,
	        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
	          urlParsingNode.pathname :
	          '/' + urlParsingNode.pathname
	      };
	    }

	    originURL = resolveURL(window.location.href);

	    /**
	    * Determine if a URL shares the same origin as the current location
	    *
	    * @param {String} requestURL The URL to test
	    * @returns {boolean} True if URL shares the same origin, otherwise false
	    */
	    return function isURLSameOrigin(requestURL) {
	      const parsed = (utils$q.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
	      return (parsed.protocol === originURL.protocol &&
	          parsed.host === originURL.host);
	    };
	  })() :

	  // Non standard browser envs (web workers, react-native) lack needed support.
	  (function nonStandardBrowserEnv() {
	    return function isURLSameOrigin() {
	      return true;
	    };
	  })();

	function parseProtocol(url) {
	  const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
	  return match && match[1] || '';
	}

	/**
	 * Calculate data maxRate
	 * @param {Number} [samplesCount= 10]
	 * @param {Number} [min= 1000]
	 * @returns {Function}
	 */
	function speedometer(samplesCount, min) {
	  samplesCount = samplesCount || 10;
	  const bytes = new Array(samplesCount);
	  const timestamps = new Array(samplesCount);
	  let head = 0;
	  let tail = 0;
	  let firstSampleTS;

	  min = min !== undefined ? min : 1000;

	  return function push(chunkLength) {
	    const now = Date.now();

	    const startedAt = timestamps[tail];

	    if (!firstSampleTS) {
	      firstSampleTS = now;
	    }

	    bytes[head] = chunkLength;
	    timestamps[head] = now;

	    let i = tail;
	    let bytesCount = 0;

	    while (i !== head) {
	      bytesCount += bytes[i++];
	      i = i % samplesCount;
	    }

	    head = (head + 1) % samplesCount;

	    if (head === tail) {
	      tail = (tail + 1) % samplesCount;
	    }

	    if (now - firstSampleTS < min) {
	      return;
	    }

	    const passed = startedAt && now - startedAt;

	    return passed ? Math.round(bytesCount * 1000 / passed) : undefined;
	  };
	}

	function progressEventReducer(listener, isDownloadStream) {
	  let bytesNotified = 0;
	  const _speedometer = speedometer(50, 250);

	  return e => {
	    const loaded = e.loaded;
	    const total = e.lengthComputable ? e.total : undefined;
	    const progressBytes = loaded - bytesNotified;
	    const rate = _speedometer(progressBytes);
	    const inRange = loaded <= total;

	    bytesNotified = loaded;

	    const data = {
	      loaded,
	      total,
	      progress: total ? (loaded / total) : undefined,
	      bytes: progressBytes,
	      rate: rate ? rate : undefined,
	      estimated: rate && total && inRange ? (total - loaded) / rate : undefined,
	      event: e
	    };

	    data[isDownloadStream ? 'download' : 'upload'] = true;

	    listener(data);
	  };
	}

	const isXHRAdapterSupported = typeof XMLHttpRequest !== 'undefined';

	var xhrAdapter = isXHRAdapterSupported && function (config) {
	  return new Promise(function dispatchXhrRequest(resolve, reject) {
	    let requestData = config.data;
	    const requestHeaders = AxiosHeaders$1.from(config.headers).normalize();
	    const responseType = config.responseType;
	    let onCanceled;
	    function done() {
	      if (config.cancelToken) {
	        config.cancelToken.unsubscribe(onCanceled);
	      }

	      if (config.signal) {
	        config.signal.removeEventListener('abort', onCanceled);
	      }
	    }

	    if (utils$q.isFormData(requestData) && (platform$1.isStandardBrowserEnv || platform$1.isStandardBrowserWebWorkerEnv)) {
	      requestHeaders.setContentType(false); // Let the browser set it
	    }

	    let request = new XMLHttpRequest();

	    // HTTP basic authentication
	    if (config.auth) {
	      const username = config.auth.username || '';
	      const password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
	      requestHeaders.set('Authorization', 'Basic ' + btoa(username + ':' + password));
	    }

	    const fullPath = buildFullPath(config.baseURL, config.url);

	    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

	    // Set the request timeout in MS
	    request.timeout = config.timeout;

	    function onloadend() {
	      if (!request) {
	        return;
	      }
	      // Prepare the response
	      const responseHeaders = AxiosHeaders$1.from(
	        'getAllResponseHeaders' in request && request.getAllResponseHeaders()
	      );
	      const responseData = !responseType || responseType === 'text' || responseType === 'json' ?
	        request.responseText : request.response;
	      const response = {
	        data: responseData,
	        status: request.status,
	        statusText: request.statusText,
	        headers: responseHeaders,
	        config,
	        request
	      };

	      settle(function _resolve(value) {
	        resolve(value);
	        done();
	      }, function _reject(err) {
	        reject(err);
	        done();
	      }, response);

	      // Clean up request
	      request = null;
	    }

	    if ('onloadend' in request) {
	      // Use onloadend if available
	      request.onloadend = onloadend;
	    } else {
	      // Listen for ready state to emulate onloadend
	      request.onreadystatechange = function handleLoad() {
	        if (!request || request.readyState !== 4) {
	          return;
	        }

	        // The request errored out and we didn't get a response, this will be
	        // handled by onerror instead
	        // With one exception: request that using file: protocol, most browsers
	        // will return status as 0 even though it's a successful request
	        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
	          return;
	        }
	        // readystate handler is calling before onerror or ontimeout handlers,
	        // so we should call onloadend on the next 'tick'
	        setTimeout(onloadend);
	      };
	    }

	    // Handle browser request cancellation (as opposed to a manual cancellation)
	    request.onabort = function handleAbort() {
	      if (!request) {
	        return;
	      }

	      reject(new AxiosError('Request aborted', AxiosError.ECONNABORTED, config, request));

	      // Clean up request
	      request = null;
	    };

	    // Handle low level network errors
	    request.onerror = function handleError() {
	      // Real errors are hidden from us by the browser
	      // onerror should only fire if it's a network error
	      reject(new AxiosError('Network Error', AxiosError.ERR_NETWORK, config, request));

	      // Clean up request
	      request = null;
	    };

	    // Handle timeout
	    request.ontimeout = function handleTimeout() {
	      let timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';
	      const transitional = config.transitional || transitionalDefaults;
	      if (config.timeoutErrorMessage) {
	        timeoutErrorMessage = config.timeoutErrorMessage;
	      }
	      reject(new AxiosError(
	        timeoutErrorMessage,
	        transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,
	        config,
	        request));

	      // Clean up request
	      request = null;
	    };

	    // Add xsrf header
	    // This is only done if running in a standard browser environment.
	    // Specifically not if we're in a web worker, or react-native.
	    if (platform$1.isStandardBrowserEnv) {
	      // Add xsrf header
	      const xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath))
	        && config.xsrfCookieName && cookies.read(config.xsrfCookieName);

	      if (xsrfValue) {
	        requestHeaders.set(config.xsrfHeaderName, xsrfValue);
	      }
	    }

	    // Remove Content-Type if data is undefined
	    requestData === undefined && requestHeaders.setContentType(null);

	    // Add headers to the request
	    if ('setRequestHeader' in request) {
	      utils$q.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
	        request.setRequestHeader(key, val);
	      });
	    }

	    // Add withCredentials to request if needed
	    if (!utils$q.isUndefined(config.withCredentials)) {
	      request.withCredentials = !!config.withCredentials;
	    }

	    // Add responseType to request if needed
	    if (responseType && responseType !== 'json') {
	      request.responseType = config.responseType;
	    }

	    // Handle progress if needed
	    if (typeof config.onDownloadProgress === 'function') {
	      request.addEventListener('progress', progressEventReducer(config.onDownloadProgress, true));
	    }

	    // Not all browsers support upload events
	    if (typeof config.onUploadProgress === 'function' && request.upload) {
	      request.upload.addEventListener('progress', progressEventReducer(config.onUploadProgress));
	    }

	    if (config.cancelToken || config.signal) {
	      // Handle cancellation
	      // eslint-disable-next-line func-names
	      onCanceled = cancel => {
	        if (!request) {
	          return;
	        }
	        reject(!cancel || cancel.type ? new CanceledError(null, config, request) : cancel);
	        request.abort();
	        request = null;
	      };

	      config.cancelToken && config.cancelToken.subscribe(onCanceled);
	      if (config.signal) {
	        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
	      }
	    }

	    const protocol = parseProtocol(fullPath);

	    if (protocol && platform$1.protocols.indexOf(protocol) === -1) {
	      reject(new AxiosError('Unsupported protocol ' + protocol + ':', AxiosError.ERR_BAD_REQUEST, config));
	      return;
	    }


	    // Send the request
	    request.send(requestData || null);
	  });
	};

	const knownAdapters = {
	  http: httpAdapter,
	  xhr: xhrAdapter
	};

	utils$q.forEach(knownAdapters, (fn, value) => {
	  if(fn) {
	    try {
	      Object.defineProperty(fn, 'name', {value});
	    } catch (e) {
	      // eslint-disable-next-line no-empty
	    }
	    Object.defineProperty(fn, 'adapterName', {value});
	  }
	});

	var adapters = {
	  getAdapter: (adapters) => {
	    adapters = utils$q.isArray(adapters) ? adapters : [adapters];

	    const {length} = adapters;
	    let nameOrAdapter;
	    let adapter;

	    for (let i = 0; i < length; i++) {
	      nameOrAdapter = adapters[i];
	      if((adapter = utils$q.isString(nameOrAdapter) ? knownAdapters[nameOrAdapter.toLowerCase()] : nameOrAdapter)) {
	        break;
	      }
	    }

	    if (!adapter) {
	      if (adapter === false) {
	        throw new AxiosError(
	          `Adapter ${nameOrAdapter} is not supported by the environment`,
	          'ERR_NOT_SUPPORT'
	        );
	      }

	      throw new Error(
	        utils$q.hasOwnProp(knownAdapters, nameOrAdapter) ?
	          `Adapter '${nameOrAdapter}' is not available in the build` :
	          `Unknown adapter '${nameOrAdapter}'`
	      );
	    }

	    if (!utils$q.isFunction(adapter)) {
	      throw new TypeError('adapter is not a function');
	    }

	    return adapter;
	  },
	  adapters: knownAdapters
	};

	/**
	 * Throws a `CanceledError` if cancellation has been requested.
	 *
	 * @param {Object} config The config that is to be used for the request
	 *
	 * @returns {void}
	 */
	function throwIfCancellationRequested(config) {
	  if (config.cancelToken) {
	    config.cancelToken.throwIfRequested();
	  }

	  if (config.signal && config.signal.aborted) {
	    throw new CanceledError(null, config);
	  }
	}

	/**
	 * Dispatch a request to the server using the configured adapter.
	 *
	 * @param {object} config The config that is to be used for the request
	 *
	 * @returns {Promise} The Promise to be fulfilled
	 */
	function dispatchRequest(config) {
	  throwIfCancellationRequested(config);

	  config.headers = AxiosHeaders$1.from(config.headers);

	  // Transform request data
	  config.data = transformData.call(
	    config,
	    config.transformRequest
	  );

	  if (['post', 'put', 'patch'].indexOf(config.method) !== -1) {
	    config.headers.setContentType('application/x-www-form-urlencoded', false);
	  }

	  const adapter = adapters.getAdapter(config.adapter || defaults$1.adapter);

	  return adapter(config).then(function onAdapterResolution(response) {
	    throwIfCancellationRequested(config);

	    // Transform response data
	    response.data = transformData.call(
	      config,
	      config.transformResponse,
	      response
	    );

	    response.headers = AxiosHeaders$1.from(response.headers);

	    return response;
	  }, function onAdapterRejection(reason) {
	    if (!isCancel(reason)) {
	      throwIfCancellationRequested(config);

	      // Transform response data
	      if (reason && reason.response) {
	        reason.response.data = transformData.call(
	          config,
	          config.transformResponse,
	          reason.response
	        );
	        reason.response.headers = AxiosHeaders$1.from(reason.response.headers);
	      }
	    }

	    return Promise.reject(reason);
	  });
	}

	const headersToObject = (thing) => thing instanceof AxiosHeaders$1 ? thing.toJSON() : thing;

	/**
	 * Config-specific merge-function which creates a new config-object
	 * by merging two configuration objects together.
	 *
	 * @param {Object} config1
	 * @param {Object} config2
	 *
	 * @returns {Object} New object resulting from merging config2 to config1
	 */
	function mergeConfig(config1, config2) {
	  // eslint-disable-next-line no-param-reassign
	  config2 = config2 || {};
	  const config = {};

	  function getMergedValue(target, source, caseless) {
	    if (utils$q.isPlainObject(target) && utils$q.isPlainObject(source)) {
	      return utils$q.merge.call({caseless}, target, source);
	    } else if (utils$q.isPlainObject(source)) {
	      return utils$q.merge({}, source);
	    } else if (utils$q.isArray(source)) {
	      return source.slice();
	    }
	    return source;
	  }

	  // eslint-disable-next-line consistent-return
	  function mergeDeepProperties(a, b, caseless) {
	    if (!utils$q.isUndefined(b)) {
	      return getMergedValue(a, b, caseless);
	    } else if (!utils$q.isUndefined(a)) {
	      return getMergedValue(undefined, a, caseless);
	    }
	  }

	  // eslint-disable-next-line consistent-return
	  function valueFromConfig2(a, b) {
	    if (!utils$q.isUndefined(b)) {
	      return getMergedValue(undefined, b);
	    }
	  }

	  // eslint-disable-next-line consistent-return
	  function defaultToConfig2(a, b) {
	    if (!utils$q.isUndefined(b)) {
	      return getMergedValue(undefined, b);
	    } else if (!utils$q.isUndefined(a)) {
	      return getMergedValue(undefined, a);
	    }
	  }

	  // eslint-disable-next-line consistent-return
	  function mergeDirectKeys(a, b, prop) {
	    if (prop in config2) {
	      return getMergedValue(a, b);
	    } else if (prop in config1) {
	      return getMergedValue(undefined, a);
	    }
	  }

	  const mergeMap = {
	    url: valueFromConfig2,
	    method: valueFromConfig2,
	    data: valueFromConfig2,
	    baseURL: defaultToConfig2,
	    transformRequest: defaultToConfig2,
	    transformResponse: defaultToConfig2,
	    paramsSerializer: defaultToConfig2,
	    timeout: defaultToConfig2,
	    timeoutMessage: defaultToConfig2,
	    withCredentials: defaultToConfig2,
	    adapter: defaultToConfig2,
	    responseType: defaultToConfig2,
	    xsrfCookieName: defaultToConfig2,
	    xsrfHeaderName: defaultToConfig2,
	    onUploadProgress: defaultToConfig2,
	    onDownloadProgress: defaultToConfig2,
	    decompress: defaultToConfig2,
	    maxContentLength: defaultToConfig2,
	    maxBodyLength: defaultToConfig2,
	    beforeRedirect: defaultToConfig2,
	    transport: defaultToConfig2,
	    httpAgent: defaultToConfig2,
	    httpsAgent: defaultToConfig2,
	    cancelToken: defaultToConfig2,
	    socketPath: defaultToConfig2,
	    responseEncoding: defaultToConfig2,
	    validateStatus: mergeDirectKeys,
	    headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)
	  };

	  utils$q.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
	    const merge = mergeMap[prop] || mergeDeepProperties;
	    const configValue = merge(config1[prop], config2[prop], prop);
	    (utils$q.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);
	  });

	  return config;
	}

	const VERSION = "1.2.1";

	const validators$1 = {};

	// eslint-disable-next-line func-names
	['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach((type, i) => {
	  validators$1[type] = function validator(thing) {
	    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
	  };
	});

	const deprecatedWarnings = {};

	/**
	 * Transitional option validator
	 *
	 * @param {function|boolean?} validator - set to false if the transitional option has been removed
	 * @param {string?} version - deprecated version / removed since version
	 * @param {string?} message - some message with additional info
	 *
	 * @returns {function}
	 */
	validators$1.transitional = function transitional(validator, version, message) {
	  function formatMessage(opt, desc) {
	    return '[Axios v' + VERSION + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
	  }

	  // eslint-disable-next-line func-names
	  return (value, opt, opts) => {
	    if (validator === false) {
	      throw new AxiosError(
	        formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')),
	        AxiosError.ERR_DEPRECATED
	      );
	    }

	    if (version && !deprecatedWarnings[opt]) {
	      deprecatedWarnings[opt] = true;
	      // eslint-disable-next-line no-console
	      console.warn(
	        formatMessage(
	          opt,
	          ' has been deprecated since v' + version + ' and will be removed in the near future'
	        )
	      );
	    }

	    return validator ? validator(value, opt, opts) : true;
	  };
	};

	/**
	 * Assert object's properties type
	 *
	 * @param {object} options
	 * @param {object} schema
	 * @param {boolean?} allowUnknown
	 *
	 * @returns {object}
	 */

	function assertOptions(options, schema, allowUnknown) {
	  if (typeof options !== 'object') {
	    throw new AxiosError('options must be an object', AxiosError.ERR_BAD_OPTION_VALUE);
	  }
	  const keys = Object.keys(options);
	  let i = keys.length;
	  while (i-- > 0) {
	    const opt = keys[i];
	    const validator = schema[opt];
	    if (validator) {
	      const value = options[opt];
	      const result = value === undefined || validator(value, opt, options);
	      if (result !== true) {
	        throw new AxiosError('option ' + opt + ' must be ' + result, AxiosError.ERR_BAD_OPTION_VALUE);
	      }
	      continue;
	    }
	    if (allowUnknown !== true) {
	      throw new AxiosError('Unknown option ' + opt, AxiosError.ERR_BAD_OPTION);
	    }
	  }
	}

	var validator = {
	  assertOptions,
	  validators: validators$1
	};

	const validators = validator.validators;

	/**
	 * Create a new instance of Axios
	 *
	 * @param {Object} instanceConfig The default config for the instance
	 *
	 * @return {Axios} A new instance of Axios
	 */
	class Axios {
	  constructor(instanceConfig) {
	    this.defaults = instanceConfig;
	    this.interceptors = {
	      request: new InterceptorManager$1(),
	      response: new InterceptorManager$1()
	    };
	  }

	  /**
	   * Dispatch a request
	   *
	   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
	   * @param {?Object} config
	   *
	   * @returns {Promise} The Promise to be fulfilled
	   */
	  request(configOrUrl, config) {
	    /*eslint no-param-reassign:0*/
	    // Allow for axios('example/url'[, config]) a la fetch API
	    if (typeof configOrUrl === 'string') {
	      config = config || {};
	      config.url = configOrUrl;
	    } else {
	      config = configOrUrl || {};
	    }

	    config = mergeConfig(this.defaults, config);

	    const {transitional, paramsSerializer, headers} = config;

	    if (transitional !== undefined) {
	      validator.assertOptions(transitional, {
	        silentJSONParsing: validators.transitional(validators.boolean),
	        forcedJSONParsing: validators.transitional(validators.boolean),
	        clarifyTimeoutError: validators.transitional(validators.boolean)
	      }, false);
	    }

	    if (paramsSerializer !== undefined) {
	      validator.assertOptions(paramsSerializer, {
	        encode: validators.function,
	        serialize: validators.function
	      }, true);
	    }

	    // Set config.method
	    config.method = (config.method || this.defaults.method || 'get').toLowerCase();

	    let contextHeaders;

	    // Flatten headers
	    contextHeaders = headers && utils$q.merge(
	      headers.common,
	      headers[config.method]
	    );

	    contextHeaders && utils$q.forEach(
	      ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
	      (method) => {
	        delete headers[method];
	      }
	    );

	    config.headers = AxiosHeaders$1.concat(contextHeaders, headers);

	    // filter out skipped interceptors
	    const requestInterceptorChain = [];
	    let synchronousRequestInterceptors = true;
	    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
	      if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
	        return;
	      }

	      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

	      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
	    });

	    const responseInterceptorChain = [];
	    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
	      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
	    });

	    let promise;
	    let i = 0;
	    let len;

	    if (!synchronousRequestInterceptors) {
	      const chain = [dispatchRequest.bind(this), undefined];
	      chain.unshift.apply(chain, requestInterceptorChain);
	      chain.push.apply(chain, responseInterceptorChain);
	      len = chain.length;

	      promise = Promise.resolve(config);

	      while (i < len) {
	        promise = promise.then(chain[i++], chain[i++]);
	      }

	      return promise;
	    }

	    len = requestInterceptorChain.length;

	    let newConfig = config;

	    i = 0;

	    while (i < len) {
	      const onFulfilled = requestInterceptorChain[i++];
	      const onRejected = requestInterceptorChain[i++];
	      try {
	        newConfig = onFulfilled(newConfig);
	      } catch (error) {
	        onRejected.call(this, error);
	        break;
	      }
	    }

	    try {
	      promise = dispatchRequest.call(this, newConfig);
	    } catch (error) {
	      return Promise.reject(error);
	    }

	    i = 0;
	    len = responseInterceptorChain.length;

	    while (i < len) {
	      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
	    }

	    return promise;
	  }

	  getUri(config) {
	    config = mergeConfig(this.defaults, config);
	    const fullPath = buildFullPath(config.baseURL, config.url);
	    return buildURL(fullPath, config.params, config.paramsSerializer);
	  }
	}

	// Provide aliases for supported request methods
	utils$q.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
	  /*eslint func-names:0*/
	  Axios.prototype[method] = function(url, config) {
	    return this.request(mergeConfig(config || {}, {
	      method,
	      url,
	      data: (config || {}).data
	    }));
	  };
	});

	utils$q.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
	  /*eslint func-names:0*/

	  function generateHTTPMethod(isForm) {
	    return function httpMethod(url, data, config) {
	      return this.request(mergeConfig(config || {}, {
	        method,
	        headers: isForm ? {
	          'Content-Type': 'multipart/form-data'
	        } : {},
	        url,
	        data
	      }));
	    };
	  }

	  Axios.prototype[method] = generateHTTPMethod();

	  Axios.prototype[method + 'Form'] = generateHTTPMethod(true);
	});

	var Axios$1 = Axios;

	/**
	 * A `CancelToken` is an object that can be used to request cancellation of an operation.
	 *
	 * @param {Function} executor The executor function.
	 *
	 * @returns {CancelToken}
	 */
	class CancelToken {
	  constructor(executor) {
	    if (typeof executor !== 'function') {
	      throw new TypeError('executor must be a function.');
	    }

	    let resolvePromise;

	    this.promise = new Promise(function promiseExecutor(resolve) {
	      resolvePromise = resolve;
	    });

	    const token = this;

	    // eslint-disable-next-line func-names
	    this.promise.then(cancel => {
	      if (!token._listeners) return;

	      let i = token._listeners.length;

	      while (i-- > 0) {
	        token._listeners[i](cancel);
	      }
	      token._listeners = null;
	    });

	    // eslint-disable-next-line func-names
	    this.promise.then = onfulfilled => {
	      let _resolve;
	      // eslint-disable-next-line func-names
	      const promise = new Promise(resolve => {
	        token.subscribe(resolve);
	        _resolve = resolve;
	      }).then(onfulfilled);

	      promise.cancel = function reject() {
	        token.unsubscribe(_resolve);
	      };

	      return promise;
	    };

	    executor(function cancel(message, config, request) {
	      if (token.reason) {
	        // Cancellation has already been requested
	        return;
	      }

	      token.reason = new CanceledError(message, config, request);
	      resolvePromise(token.reason);
	    });
	  }

	  /**
	   * Throws a `CanceledError` if cancellation has been requested.
	   */
	  throwIfRequested() {
	    if (this.reason) {
	      throw this.reason;
	    }
	  }

	  /**
	   * Subscribe to the cancel signal
	   */

	  subscribe(listener) {
	    if (this.reason) {
	      listener(this.reason);
	      return;
	    }

	    if (this._listeners) {
	      this._listeners.push(listener);
	    } else {
	      this._listeners = [listener];
	    }
	  }

	  /**
	   * Unsubscribe from the cancel signal
	   */

	  unsubscribe(listener) {
	    if (!this._listeners) {
	      return;
	    }
	    const index = this._listeners.indexOf(listener);
	    if (index !== -1) {
	      this._listeners.splice(index, 1);
	    }
	  }

	  /**
	   * Returns an object that contains a new `CancelToken` and a function that, when called,
	   * cancels the `CancelToken`.
	   */
	  static source() {
	    let cancel;
	    const token = new CancelToken(function executor(c) {
	      cancel = c;
	    });
	    return {
	      token,
	      cancel
	    };
	  }
	}

	var CancelToken$1 = CancelToken;

	/**
	 * Syntactic sugar for invoking a function and expanding an array for arguments.
	 *
	 * Common use case would be to use `Function.prototype.apply`.
	 *
	 *  ```js
	 *  function f(x, y, z) {}
	 *  var args = [1, 2, 3];
	 *  f.apply(null, args);
	 *  ```
	 *
	 * With `spread` this example can be re-written.
	 *
	 *  ```js
	 *  spread(function(x, y, z) {})([1, 2, 3]);
	 *  ```
	 *
	 * @param {Function} callback
	 *
	 * @returns {Function}
	 */
	function spread(callback) {
	  return function wrap(arr) {
	    return callback.apply(null, arr);
	  };
	}

	/**
	 * Determines whether the payload is an error thrown by Axios
	 *
	 * @param {*} payload The value to test
	 *
	 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
	 */
	function isAxiosError(payload) {
	  return utils$q.isObject(payload) && (payload.isAxiosError === true);
	}

	/**
	 * Create an instance of Axios
	 *
	 * @param {Object} defaultConfig The default config for the instance
	 *
	 * @returns {Axios} A new instance of Axios
	 */
	function createInstance(defaultConfig) {
	  const context = new Axios$1(defaultConfig);
	  const instance = bind(Axios$1.prototype.request, context);

	  // Copy axios.prototype to instance
	  utils$q.extend(instance, Axios$1.prototype, context, {allOwnKeys: true});

	  // Copy context to instance
	  utils$q.extend(instance, context, null, {allOwnKeys: true});

	  // Factory for creating new instances
	  instance.create = function create(instanceConfig) {
	    return createInstance(mergeConfig(defaultConfig, instanceConfig));
	  };

	  return instance;
	}

	// Create the default instance to be exported
	const axios = createInstance(defaults$1);

	// Expose Axios class to allow class inheritance
	axios.Axios = Axios$1;

	// Expose Cancel & CancelToken
	axios.CanceledError = CanceledError;
	axios.CancelToken = CancelToken$1;
	axios.isCancel = isCancel;
	axios.VERSION = VERSION;
	axios.toFormData = toFormData;

	// Expose AxiosError class
	axios.AxiosError = AxiosError;

	// alias for CanceledError for backward compatibility
	axios.Cancel = axios.CanceledError;

	// Expose all/spread
	axios.all = function all(promises) {
	  return Promise.all(promises);
	};

	axios.spread = spread;

	// Expose isAxiosError
	axios.isAxiosError = isAxiosError;

	// Expose mergeConfig
	axios.mergeConfig = mergeConfig;

	axios.AxiosHeaders = AxiosHeaders$1;

	axios.formToJSON = thing => formDataToJSON(utils$q.isHTMLForm(thing) ? new FormData(thing) : thing);

	axios.default = axios;

	var axios_1$2 = axios;

	var isTest$1 = {};

	Object.defineProperty(isTest$1, "__esModule", { value: true });
	isTest$1.isTest = void 0;
	/**
	 * @returns true if the current process is running in a test environment.
	 */
	var isTest = function () {
	    var _a;
	    if (typeof process$1 !== 'undefined') {
	        return ((_a = process$1.env) === null || _a === void 0 ? void 0 : _a.NODE_ENV) === 'test';
	    }
	    return false;
	};
	isTest$1.isTest = isTest;

	var noop$4 = {};

	Object.defineProperty(noop$4, "__esModule", { value: true });
	noop$4.noop = void 0;
	/**
	 * Empty (no operation) function.
	 */
	// eslint-disable-next-line @typescript-eslint/no-empty-function
	var noop$3 = function () { };
	noop$4.noop = noop$3;

	var __awaiter$4 = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator$4 = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (g && (g = 0, op[0] && (_ = 0)), _) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	var __importDefault$5 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(AxiosRetry$1, "__esModule", { value: true });
	AxiosRetry$1.AxiosRetry = void 0;
	var axios_1$1 = __importDefault$5(axios_1$2);
	var isTest_1 = isTest$1;
	var noop_1 = noop$4;
	var AxiosRetry = /** @class */ (function () {
	    function AxiosRetry() {
	    }
	    // TODO: refactor to reduce complexity
	    // eslint-disable-next-line complexity
	    AxiosRetry.request = function (retryConfig, requestConfig) {
	        var _a;
	        return __awaiter$4(this, void 0, void 0, function () {
	            var attempt, response, e_1, axiosError;
	            return __generator$4(this, function (_b) {
	                switch (_b.label) {
	                    case 0:
	                        attempt = 1;
	                        _b.label = 1;
	                    case 1:
	                        _b.trys.push([1, 5, , 6]);
	                        if (!(0, isTest_1.isTest)()) return [3 /*break*/, 3];
	                        /**
	                         * Known issue where in Jest, axios.request() will leave open handlers.
	                         * See: https://stackoverflow.com/questions/69169492/async-external-function-leaves-open-handles-jest-supertest-express
	                         */
	                        // eslint-disable-next-line no-await-in-loop -- we have sequential and conditional async requests
	                        return [4 /*yield*/, nextTick$1(noop_1.noop)];
	                    case 2:
	                        /**
	                         * Known issue where in Jest, axios.request() will leave open handlers.
	                         * See: https://stackoverflow.com/questions/69169492/async-external-function-leaves-open-handles-jest-supertest-express
	                         */
	                        // eslint-disable-next-line no-await-in-loop -- we have sequential and conditional async requests
	                        _b.sent();
	                        _b.label = 3;
	                    case 3: return [4 /*yield*/, axios_1$1.default.request(requestConfig)];
	                    case 4:
	                        response = _b.sent();
	                        return [2 /*return*/, response];
	                    case 5:
	                        e_1 = _b.sent();
	                        if (attempt >= retryConfig.maxRetries) {
	                            throw e_1;
	                        }
	                        if (!requestConfig.method || !retryConfig.allowedMethods.includes(requestConfig.method.toUpperCase())) {
	                            throw e_1;
	                        }
	                        if (!axios_1$1.default.isAxiosError(e_1)) {
	                            throw e_1;
	                        }
	                        axiosError = e_1;
	                        if (!((_a = axiosError.response) === null || _a === void 0 ? void 0 : _a.status) || !retryConfig.allowedResponseStatuses.includes(axiosError.response.status)) {
	                            throw e_1;
	                        }
	                        if (retryConfig.beforeRetry) {
	                            retryConfig.beforeRetry(attempt, axiosError);
	                        }
	                        return [3 /*break*/, 6];
	                    case 6:
	                        attempt++;
	                        return [3 /*break*/, 1];
	                    case 7: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    return AxiosRetry;
	}());
	AxiosRetry$1.AxiosRetry = AxiosRetry;

	var ApiRequestError = {};

	Object.defineProperty(ApiRequestError, "__esModule", { value: true });
	ApiRequestError.getMessageFromApiRequestError = ApiRequestError.isApiRequestError = void 0;
	var axios_1 = axios_1$2;
	/**
	 * Verify if the error is an AxiosError that is caused by a HTTP API error.
	 */
	var isApiRequestError = function (error) {
	    // Check if the error is an axios error
	    if (!(error instanceof axios_1.AxiosError)) {
	        return false;
	    }
	    // Check if the error is a result of a 400 or 500 response
	    if (error.code !== axios_1.AxiosError.ERR_BAD_REQUEST && error.code !== axios_1.AxiosError.ERR_BAD_RESPONSE) {
	        return false;
	    }
	    return true;
	};
	ApiRequestError.isApiRequestError = isApiRequestError;
	/**
	 * Extract the message from a ApiRequestError. Note that this is implemented based on how the Moralis APIs return Errors.
	 * This can be in the form:
	 * - { message: 'some message' }
	 * - { message: ['some message', 'some other message'] }
	 * - { }
	 */
	var getMessageFromApiRequestError = function (error) {
	    var _a = error.response.data, message = _a.message, details = _a.details;
	    var result = 'Unknown error (no error info returned from API)';
	    if (Array.isArray(message)) {
	        result = message.join(', ');
	    }
	    else if (typeof message === 'string') {
	        result = message;
	    }
	    if (details) {
	        result += " ".concat(JSON.stringify(details));
	    }
	    return result;
	};
	ApiRequestError.getMessageFromApiRequestError = getMessageFromApiRequestError;

	var __assign$S = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$S = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$S.apply(this, arguments);
	};
	var __awaiter$3 = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator$3 = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (g && (g = 0, op[0] && (_ = 0)), _) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	Object.defineProperty(RequestController$1, "__esModule", { value: true });
	RequestController$1.RequestController = void 0;
	var Error_1$2 = _Error;
	var AxiosRetry_1 = AxiosRetry$1;
	var ApiRequestError_1 = ApiRequestError;
	var Config_1 = Config;
	/**
	 * A controller responsible to handle all requests in Moralis,
	 * compatible with browser, nodejJs and react-native
	 */
	var RequestController = /** @class */ (function () {
	    function RequestController(config, logger) {
	        this.config = config;
	        this.logger = logger;
	    }
	    RequestController.create = function (core) {
	        return new RequestController(core.config, core.logger);
	    };
	    RequestController.prototype.request = function (config) {
	        return __awaiter$3(this, void 0, void 0, function () {
	            var maxRetries, retryConfig, response, e_1, error;
	            var _this = this;
	            return __generator$3(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        this.logger.verbose('[RequestController] request started', {
	                            url: config.url,
	                            method: config.method,
	                            body: config.data,
	                        });
	                        maxRetries = this.config.get(Config_1.CoreConfig.maxRetries);
	                        retryConfig = {
	                            maxRetries: maxRetries,
	                            allowedMethods: ['GET', 'OPTIONS'],
	                            allowedResponseStatuses: [408, 413, 429, 500, 502, 503, 504],
	                            beforeRetry: function (attempt, error) {
	                                _this.logger.verbose('[RequestController] request retry', {
	                                    url: config.url,
	                                    method: config.method,
	                                    body: config.data,
	                                    error: error,
	                                    attempt: attempt,
	                                });
	                            },
	                        };
	                        _a.label = 1;
	                    case 1:
	                        _a.trys.push([1, 3, , 4]);
	                        return [4 /*yield*/, AxiosRetry_1.AxiosRetry.request(retryConfig, __assign$S(__assign$S({}, config), { timeout: 20000, maxContentLength: Infinity, maxBodyLength: Infinity }))];
	                    case 2:
	                        response = _a.sent();
	                        return [2 /*return*/, response.data];
	                    case 3:
	                        e_1 = _a.sent();
	                        error = this.makeError(e_1);
	                        this.logger.verbose('[RequestController] request error', {
	                            url: config.url,
	                            method: config.method,
	                            body: config.data,
	                            cause: error.cause,
	                            name: error.name,
	                            details: error.details,
	                        });
	                        throw error;
	                    case 4: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    RequestController.prototype.makeError = function (error) {
	        if ((0, ApiRequestError_1.isApiRequestError)(error)) {
	            var _a = error.response, status = _a.status, statusText = _a.statusText;
	            var apiMessage = (0, ApiRequestError_1.getMessageFromApiRequestError)(error);
	            return new Error_1$2.CoreError({
	                code: Error_1$2.CoreErrorCode.REQUEST_ERROR,
	                message: "Request failed, ".concat(statusText, "(").concat(status, "): ").concat(apiMessage),
	                cause: error,
	                details: {
	                    status: status,
	                    response: error.response,
	                },
	            });
	        }
	        var err = error instanceof Error ? error : new Error("".concat(error));
	        return new Error_1$2.CoreError({
	            code: Error_1$2.CoreErrorCode.REQUEST_ERROR,
	            message: "Request failed: ".concat(err.message),
	            cause: err,
	        });
	    };
	    RequestController.prototype.post = function (url, searchParams, body, options, abortSignal) {
	        return this.request({
	            url: url,
	            params: searchParams,
	            method: 'POST',
	            data: body,
	            headers: options === null || options === void 0 ? void 0 : options.headers,
	            signal: abortSignal,
	        });
	    };
	    RequestController.prototype.put = function (url, searchParams, body, options, abortSignal) {
	        return this.request({
	            url: url,
	            params: searchParams,
	            method: 'PUT',
	            data: body,
	            headers: options === null || options === void 0 ? void 0 : options.headers,
	            signal: abortSignal,
	        });
	    };
	    RequestController.prototype.get = function (url, searchParams, options, abortSignal) {
	        return __awaiter$3(this, void 0, void 0, function () {
	            return __generator$3(this, function (_a) {
	                return [2 /*return*/, this.request({
	                        url: url,
	                        params: searchParams,
	                        method: 'GET',
	                        headers: options === null || options === void 0 ? void 0 : options.headers,
	                        signal: abortSignal,
	                    })];
	            });
	        });
	    };
	    RequestController.prototype.delete = function (url, searchParams, body, options, abortSignal) {
	        return __awaiter$3(this, void 0, void 0, function () {
	            return __generator$3(this, function (_a) {
	                return [2 /*return*/, this.request({
	                        url: url,
	                        params: searchParams,
	                        method: 'DELETE',
	                        data: body,
	                        headers: options === null || options === void 0 ? void 0 : options.headers,
	                        signal: abortSignal,
	                    })];
	            });
	        });
	    };
	    return RequestController;
	}());
	RequestController$1.RequestController = RequestController;

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(RequestController$1, exports);
		
	} (RequestController$2));

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(RequestController$2, exports);
		__exportStar(LoggerController$1, exports);
		__exportStar(AxiosRetry$1, exports);
		
	} (controllers));

	var operations$7 = {};

	var Operation = {};

	Object.defineProperty(Operation, "__esModule", { value: true });

	var PaginatedOperation = {};

	Object.defineProperty(PaginatedOperation, "__esModule", { value: true });

	var OperationRequestValidator$1 = {};

	var __spreadArray$1 = (commonjsGlobal && commonjsGlobal.__spreadArray) || function (to, from, pack) {
	    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
	        if (ar || !(i in from)) {
	            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
	            ar[i] = from[i];
	        }
	    }
	    return to.concat(ar || Array.prototype.slice.call(from));
	};
	Object.defineProperty(OperationRequestValidator$1, "__esModule", { value: true });
	OperationRequestValidator$1.OperationRequestValidator = void 0;
	var Error_1$1 = _Error;
	var OperationRequestValidator = /** @class */ (function () {
	    function OperationRequestValidator(operation) {
	        this.allParamNames = __spreadArray$1(__spreadArray$1(__spreadArray$1([], (operation.urlPathParamNames || []), true), (operation.urlSearchParamNames || []), true), (operation.bodyParamNames || []), true);
	    }
	    OperationRequestValidator.prototype.validate = function (request) {
	        var requestParamNames = Object.keys(request);
	        for (var _i = 0, requestParamNames_1 = requestParamNames; _i < requestParamNames_1.length; _i++) {
	            var paramName = requestParamNames_1[_i];
	            if (!this.allParamNames.includes(paramName)) {
	                var allParamsNames = this.allParamNames.join(', ');
	                throw new Error_1$1.MoralisError({
	                    code: Error_1$1.CoreErrorCode.INVALID_ARGUMENT,
	                    message: "Request contains unknown parameter: ".concat(paramName, ". This operation supports the following parameters: ").concat(allParamsNames),
	                });
	            }
	        }
	    };
	    return OperationRequestValidator;
	}());
	OperationRequestValidator$1.OperationRequestValidator = OperationRequestValidator;

	var OperationType = {};

	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.determineOperationType = exports.OperationType = void 0;
		var OperationType;
		(function (OperationType) {
		    OperationType["NON_NULLABLE"] = "nonNullable";
		    OperationType["NULLABLE"] = "nullable";
		    OperationType["PAGINATED"] = "paginated";
		})(OperationType = exports.OperationType || (exports.OperationType = {}));
		function determineOperationType(operation) {
		    if (operation.firstPageIndex === 0 || operation.firstPageIndex === 1) {
		        return OperationType.PAGINATED;
		    }
		    if (operation.isNullable) {
		        return OperationType.NULLABLE;
		    }
		    return OperationType.NON_NULLABLE;
		}
		exports.determineOperationType = determineOperationType;
		
	} (OperationType));

	var request = {};

	var NextPaginatedRequestResolver$1 = {};

	var __assign$R = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$R = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$R.apply(this, arguments);
	};
	Object.defineProperty(NextPaginatedRequestResolver$1, "__esModule", { value: true });
	NextPaginatedRequestResolver$1.NextPaginatedRequestResolver = void 0;
	var NextPaginatedRequestResolver = /** @class */ (function () {
	    function NextPaginatedRequestResolver() {
	    }
	    NextPaginatedRequestResolver.resolve = function (firstPageIndex, request, pagination) {
	        if (pagination.cursor) {
	            return __assign$R(__assign$R({}, request), { cursor: pagination.cursor });
	        }
	        if (typeof pagination.total === 'number') {
	            var currentPage = firstPageIndex === 1 ? pagination.page : pagination.page + 1;
	            var hasNextPage = pagination.total > pagination.pageSize * currentPage;
	            if (hasNextPage) {
	                var offset = (pagination.page + 1) * (request.limit || 500);
	                return __assign$R(__assign$R({}, request), { offset: offset });
	            }
	        }
	        return null;
	    };
	    return NextPaginatedRequestResolver;
	}());
	NextPaginatedRequestResolver$1.NextPaginatedRequestResolver = NextPaginatedRequestResolver;

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(NextPaginatedRequestResolver$1, exports);
		
	} (request));

	var response = {};

	var Pagination = {};

	Object.defineProperty(Pagination, "__esModule", { value: true });

	var PaginationReader$1 = {};

	Object.defineProperty(PaginationReader$1, "__esModule", { value: true });
	PaginationReader$1.PaginationReader = void 0;
	var PaginationReader = /** @class */ (function () {
	    function PaginationReader() {
	    }
	    PaginationReader.read = function (jsonResponse) {
	        var _a, _b;
	        return {
	            page: (_a = jsonResponse.page) !== null && _a !== void 0 ? _a : 0,
	            pageSize: (_b = jsonResponse.page_size) !== null && _b !== void 0 ? _b : 0,
	            total: jsonResponse.total,
	            cursor: jsonResponse.cursor,
	        };
	    };
	    return PaginationReader;
	}());
	PaginationReader$1.PaginationReader = PaginationReader;

	var ResponseAdapter$1 = {};

	Object.defineProperty(ResponseAdapter$1, "__esModule", { value: true });
	ResponseAdapter$1.ResponseAdapter = void 0;
	var ResponseAdapter = /** @class */ (function () {
	    function ResponseAdapter(jsonResponse, getResponse) {
	        this.jsonResponse = jsonResponse;
	        this.getResponse = getResponse;
	    }
	    Object.defineProperty(ResponseAdapter.prototype, "result", {
	        get: function () {
	            return this.getResponse();
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(ResponseAdapter.prototype, "raw", {
	        get: function () {
	            return this.jsonResponse;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    ResponseAdapter.prototype.toJSON = function () {
	        return this.jsonResponse;
	    };
	    return ResponseAdapter;
	}());
	ResponseAdapter$1.ResponseAdapter = ResponseAdapter;

	var PaginatedResponseAdapter$1 = {};

	Object.defineProperty(PaginatedResponseAdapter$1, "__esModule", { value: true });
	PaginatedResponseAdapter$1.PaginatedResponseAdapter = void 0;
	var Error_1 = _Error;
	var PaginatedResponseAdapter = /** @class */ (function () {
	    function PaginatedResponseAdapter(pagination, jsonResponse, getResult, nextHandler) {
	        var _this = this;
	        this.pagination = pagination;
	        this.jsonResponse = jsonResponse;
	        this.getResult = getResult;
	        this.nextHandler = nextHandler;
	        this.hasNext = function () { return !!_this.nextHandler; };
	        this.next = function () {
	            if (!_this.nextHandler) {
	                throw new Error_1.MoralisError({
	                    code: Error_1.CoreErrorCode.NO_DATA_FOUND,
	                    message: 'Page limit exceeded! Before call this method check an existence of the next page by .hasNext() method.',
	                });
	            }
	            return _this.nextHandler();
	        };
	    }
	    Object.defineProperty(PaginatedResponseAdapter.prototype, "result", {
	        get: function () {
	            return this.getResult();
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(PaginatedResponseAdapter.prototype, "raw", {
	        get: function () {
	            return this.jsonResponse;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    PaginatedResponseAdapter.prototype.toJSON = function () {
	        return this.jsonResponse;
	    };
	    return PaginatedResponseAdapter;
	}());
	PaginatedResponseAdapter$1.PaginatedResponseAdapter = PaginatedResponseAdapter;

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(Pagination, exports);
		__exportStar(PaginationReader$1, exports);
		__exportStar(ResponseAdapter$1, exports);
		__exportStar(PaginatedResponseAdapter$1, exports);
		
	} (response));

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(Operation, exports);
		__exportStar(PaginatedOperation, exports);
		__exportStar(OperationRequestValidator$1, exports);
		__exportStar(OperationType, exports);
		__exportStar(request, exports);
		__exportStar(response, exports);
		
	} (operations$7));

	var utils$p = {};

	var toCamelCase = {};

	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.toCamelCase = exports.toCamel = void 0;
		var toCamel = function (value) {
		    return value.replace(/([-_][a-z])/gi, function ($1) {
		        return $1.toUpperCase().replace('-', '').replace('_', '');
		    });
		};
		exports.toCamel = toCamel;
		var isObject = function (o) {
		    return o === Object(o) && !Array.isArray(o) && typeof o !== 'function';
		};
		var toCamelCase = function (data) {
		    if (isObject(data)) {
		        var n_1 = {};
		        Object.keys(data).forEach(function (k) {
		            // @ts-ignore TODO: fix typing
		            n_1[(0, exports.toCamel)(k)] = (0, exports.toCamelCase)(data[k]);
		        });
		        return n_1;
		    }
		    if (Array.isArray(data)) {
		        // @ts-ignore TODO: difficult to type with recursive arrays
		        return data.map(function (i) {
		            return (0, exports.toCamelCase)(i);
		        });
		    }
		    return data;
		};
		exports.toCamelCase = toCamelCase;
		
	} (toCamelCase));

	var maybe$1 = {};

	Object.defineProperty(maybe$1, "__esModule", { value: true });
	maybe$1.maybe = void 0;
	function maybe(value, transform) {
	    if (value == null) {
	        return undefined;
	    }
	    if (transform) {
	        return transform(value);
	    }
	    return value;
	}
	maybe$1.maybe = maybe;

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(toCamelCase, exports);
		__exportStar(maybe$1, exports);
		
	} (utils$p));

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		var Core_1 = Core$1;
		__exportStar(Core$1, exports);
		__exportStar(CoreProvider$1, exports);
		__exportStar(Modules, exports);
		__exportStar(_Error, exports);
		__exportStar(Config, exports);
		__exportStar(Assert, exports);
		__exportStar(dataTypes$7, exports);
		__exportStar(controllers, exports);
		__exportStar(operations$7, exports);
		__exportStar(utils$p, exports);
		__exportStar(Assert, exports);
		exports.default = Core_1.Core;
		
	} (lib$9));

	var OperationRequestBuilder$1 = {};

	var getCommonHeaders$1 = {};

	var __importDefault$4 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(getCommonHeaders$1, "__esModule", { value: true });
	getCommonHeaders$1.getCommonHeaders = void 0;
	var common_core_1$1y = __importDefault$4(lib$9);
	var getCommonHeaders = function () { return ({
	    'x-moralis-platform': 'JS SDK',
	    'x-moralis-platform-version': common_core_1$1y.default.libVersion,
	    'x-moralis-build-target': 'node',
	}); };
	getCommonHeaders$1.getCommonHeaders = getCommonHeaders;

	Object.defineProperty(OperationRequestBuilder$1, "__esModule", { value: true });
	OperationRequestBuilder$1.OperationRequestBuilder = void 0;
	var common_core_1$1x = lib$9;
	var config_1$2 = config$5;
	var getCommonHeaders_1 = getCommonHeaders$1;
	var OperationRequestBuilder = /** @class */ (function () {
	    function OperationRequestBuilder(operation, core) {
	        this.operation = operation;
	        this.core = core;
	    }
	    OperationRequestBuilder.prototype.prepareUrl = function (baseUrl, request) {
	        var _this = this;
	        var _a;
	        var urlParams = this.operation.getRequestUrlParams(request, this.core);
	        var urlPath = this.operation.urlPathPattern;
	        for (var _i = 0, _b = (_a = this.operation.urlPathParamNames) !== null && _a !== void 0 ? _a : []; _i < _b.length; _i++) {
	            var paramName = _b[_i];
	            var paramValue = urlParams[paramName];
	            if (paramValue === undefined || paramValue === null) {
	                throw new Error("Param ".concat(paramName, " is required"));
	            }
	            urlPath = urlPath.replace("{".concat(paramName, "}"), paramValue);
	        }
	        var url = "".concat(baseUrl).concat(urlPath);
	        var urlSearchParams = {};
	        Object.keys(urlParams)
	            .filter(function (paramName) { var _a; return !((_a = _this.operation.urlPathParamNames) === null || _a === void 0 ? void 0 : _a.includes(paramName)); })
	            .forEach(function (paramName) {
	            var paramValue = urlParams[paramName];
	            if (paramValue !== undefined && paramValue !== null) {
	                urlSearchParams[paramName] = paramValue;
	            }
	        });
	        return { url: url, urlSearchParams: urlSearchParams };
	    };
	    OperationRequestBuilder.prototype.prepareBody = function (request) {
	        if (!this.operation.bodyType && !this.operation.getRequestBody) {
	            return undefined;
	        }
	        if (!this.operation.getRequestBody) {
	            throw new Error("getRequestBody is not implemented for operation ".concat(this.operation.name));
	        }
	        if (!this.operation.bodyParamNames) {
	            throw new Error("bodyParamNames are empty for operation ".concat(this.operation.name));
	        }
	        var body = this.operation.getRequestBody(request, this.core);
	        if (this.operation.bodyType === 'properties') {
	            return body;
	        }
	        if (this.operation.bodyType === 'raw') {
	            return body;
	        }
	        throw new Error("Not supported body type: ".concat(this.operation.bodyType));
	    };
	    OperationRequestBuilder.prototype.prepareHeaders = function () {
	        var apiKey = this.core.config.get(config_1$2.ApiUtilsConfig.apiKey);
	        var product = this.core.config.get(common_core_1$1x.CoreConfig.product);
	        if (!apiKey) {
	            throw new common_core_1$1x.MoralisApiError({
	                code: common_core_1$1x.ApiErrorCode.API_KEY_NOT_SET,
	                message: 'apiKey is not set',
	            });
	        }
	        var headers = (0, getCommonHeaders_1.getCommonHeaders)();
	        headers['x-api-key'] = apiKey;
	        if (product) {
	            headers['x-moralis-product'] = product;
	        }
	        return headers;
	    };
	    return OperationRequestBuilder;
	}());
	OperationRequestBuilder$1.OperationRequestBuilder = OperationRequestBuilder;

	var __awaiter$2 = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator$2 = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (g && (g = 0, op[0] && (_ = 0)), _) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	Object.defineProperty(OperationResolver$1, "__esModule", { value: true });
	OperationResolver$1.OperationResolver = void 0;
	var common_core_1$1w = lib$9;
	var OperationRequestBuilder_1$2 = OperationRequestBuilder$1;
	var OperationResolver = /** @class */ (function () {
	    function OperationResolver(operation, baseUrl, core) {
	        var _this = this;
	        this.operation = operation;
	        this.baseUrl = baseUrl;
	        this.core = core;
	        this.requestValidator = new common_core_1$1w.OperationRequestValidator(this.operation);
	        this.requestBuilder = new OperationRequestBuilder_1$2.OperationRequestBuilder(this.operation, this.core);
	        this.requestController = common_core_1$1w.RequestController.create(this.core);
	        this.fetch = function (request) { return __awaiter$2(_this, void 0, void 0, function () {
	            var _a, url, urlSearchParams, body, jsonResponse;
	            var _this = this;
	            return __generator$2(this, function (_b) {
	                switch (_b.label) {
	                    case 0:
	                        this.requestValidator.validate(request);
	                        _a = this.requestBuilder.prepareUrl(this.baseUrl, request), url = _a.url, urlSearchParams = _a.urlSearchParams;
	                        body = this.requestBuilder.prepareBody(request);
	                        return [4 /*yield*/, this.requestController.request({
	                                method: this.operation.method,
	                                url: url,
	                                params: urlSearchParams,
	                                headers: this.requestBuilder.prepareHeaders(),
	                                data: body,
	                            })];
	                    case 1:
	                        jsonResponse = _b.sent();
	                        return [2 /*return*/, new common_core_1$1w.ResponseAdapter(jsonResponse, function () {
	                                return _this.operation.deserializeResponse(jsonResponse, request, _this.core);
	                            })];
	                }
	            });
	        }); };
	        if (operation.isNullable) {
	            throw new Error("Operation ".concat(operation.name, " has invalid value for isNullable property"));
	        }
	    }
	    return OperationResolver;
	}());
	OperationResolver$1.OperationResolver = OperationResolver;

	var NullableOperationResolver$1 = {};

	var isNotFoundError$1 = {};

	Object.defineProperty(isNotFoundError$1, "__esModule", { value: true });
	isNotFoundError$1.isNotFoundError = void 0;
	var common_core_1$1v = lib$9;
	function isNotFoundError(e) {
	    var _a;
	    if ((0, common_core_1$1v.isMoralisError)(e)) {
	        if (((_a = e.details) === null || _a === void 0 ? void 0 : _a.status) === 404) {
	            return true;
	        }
	        if (e.code === common_core_1$1v.ApiErrorCode.NOT_FOUND) {
	            return true;
	        }
	    }
	    return false;
	}
	isNotFoundError$1.isNotFoundError = isNotFoundError;

	var __awaiter$1 = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator$1 = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (g && (g = 0, op[0] && (_ = 0)), _) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	Object.defineProperty(NullableOperationResolver$1, "__esModule", { value: true });
	NullableOperationResolver$1.NullableOperationResolver = void 0;
	var common_core_1$1u = lib$9;
	var isNotFoundError_1 = isNotFoundError$1;
	var OperationRequestBuilder_1$1 = OperationRequestBuilder$1;
	var NullableOperationResolver = /** @class */ (function () {
	    function NullableOperationResolver(operation, baseUrl, core) {
	        var _this = this;
	        this.operation = operation;
	        this.baseUrl = baseUrl;
	        this.core = core;
	        this.requestValidator = new common_core_1$1u.OperationRequestValidator(this.operation);
	        this.requestBuilder = new OperationRequestBuilder_1$1.OperationRequestBuilder(this.operation, this.core);
	        this.requestController = common_core_1$1u.RequestController.create(this.core);
	        this.fetch = function (request) { return __awaiter$1(_this, void 0, void 0, function () {
	            var result, e_1;
	            return __generator$1(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        this.requestValidator.validate(request);
	                        _a.label = 1;
	                    case 1:
	                        _a.trys.push([1, 3, , 4]);
	                        return [4 /*yield*/, this._fetch(request)];
	                    case 2:
	                        result = _a.sent();
	                        // TODO: this block should be deleted after the back-end adjustments.
	                        if (!result.raw || (typeof result.raw === 'object' && Object.keys(result.raw).length === 0)) {
	                            throw new common_core_1$1u.MoralisApiError({
	                                code: common_core_1$1u.ApiErrorCode.NOT_FOUND,
	                                message: 'The resource is not found',
	                            });
	                        }
	                        return [2 /*return*/, result];
	                    case 3:
	                        e_1 = _a.sent();
	                        if ((0, isNotFoundError_1.isNotFoundError)(e_1)) {
	                            return [2 /*return*/, null];
	                        }
	                        throw e_1;
	                    case 4: return [2 /*return*/];
	                }
	            });
	        }); };
	        if (!operation.isNullable) {
	            throw new Error("Operation ".concat(operation.name, " has invalid value for isNullable property"));
	        }
	    }
	    NullableOperationResolver.prototype._fetch = function (request) {
	        return __awaiter$1(this, void 0, void 0, function () {
	            var _a, url, urlSearchParams, body, jsonResponse;
	            var _this = this;
	            return __generator$1(this, function (_b) {
	                switch (_b.label) {
	                    case 0:
	                        _a = this.requestBuilder.prepareUrl(this.baseUrl, request), url = _a.url, urlSearchParams = _a.urlSearchParams;
	                        body = this.requestBuilder.prepareBody(request);
	                        return [4 /*yield*/, this.requestController.request({
	                                method: this.operation.method,
	                                url: url,
	                                params: urlSearchParams,
	                                headers: this.requestBuilder.prepareHeaders(),
	                                data: body,
	                            })];
	                    case 1:
	                        jsonResponse = _b.sent();
	                        return [2 /*return*/, new common_core_1$1u.ResponseAdapter(jsonResponse, function () {
	                                return _this.operation.deserializeResponse(jsonResponse, request, _this.core);
	                            })];
	                }
	            });
	        });
	    };
	    return NullableOperationResolver;
	}());
	NullableOperationResolver$1.NullableOperationResolver = NullableOperationResolver;

	var PaginatedOperationResolver$1 = {};

	var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (g && (g = 0, op[0] && (_ = 0)), _) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	Object.defineProperty(PaginatedOperationResolver$1, "__esModule", { value: true });
	PaginatedOperationResolver$1.PaginatedOperationResolver = void 0;
	var common_core_1$1t = lib$9;
	var OperationRequestBuilder_1 = OperationRequestBuilder$1;
	var PaginatedOperationResolver = /** @class */ (function () {
	    function PaginatedOperationResolver(operation, baseUrl, core) {
	        var _this = this;
	        this.operation = operation;
	        this.baseUrl = baseUrl;
	        this.core = core;
	        this.requestValidator = new common_core_1$1t.OperationRequestValidator(this.operation);
	        this.requestBuilder = new OperationRequestBuilder_1.OperationRequestBuilder(this.operation, this.core);
	        this.requestController = common_core_1$1t.RequestController.create(this.core);
	        this.fetch = function (request) { return __awaiter(_this, void 0, void 0, function () {
	            var _a, url, urlSearchParams, body, jsonResponse, pagination, nextRequest;
	            var _this = this;
	            return __generator(this, function (_b) {
	                switch (_b.label) {
	                    case 0:
	                        this.requestValidator.validate(request);
	                        _a = this.requestBuilder.prepareUrl(this.baseUrl, request), url = _a.url, urlSearchParams = _a.urlSearchParams;
	                        body = this.requestBuilder.prepareBody(request);
	                        return [4 /*yield*/, this.requestController.request({
	                                method: this.operation.method,
	                                url: url,
	                                params: urlSearchParams,
	                                headers: this.requestBuilder.prepareHeaders(),
	                                data: body,
	                            })];
	                    case 1:
	                        jsonResponse = _b.sent();
	                        pagination = common_core_1$1t.PaginationReader.read(jsonResponse);
	                        nextRequest = common_core_1$1t.NextPaginatedRequestResolver.resolve(this.operation.firstPageIndex, request, pagination);
	                        return [2 /*return*/, new common_core_1$1t.PaginatedResponseAdapter(pagination, jsonResponse, function () { return _this.operation.deserializeResponse(jsonResponse, request, _this.core); }, nextRequest ? function () { return _this.fetch(nextRequest); } : undefined)];
	                }
	            });
	        }); };
	        if (operation.firstPageIndex !== 0 && operation.firstPageIndex !== 1) {
	            throw new Error("Operation ".concat(operation.name, " has invalid value for firstPageIndex property"));
	        }
	    }
	    return PaginatedOperationResolver;
	}());
	PaginatedOperationResolver$1.PaginatedOperationResolver = PaginatedOperationResolver;

	var types$u = {};

	Object.defineProperty(types$u, "__esModule", { value: true });

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(OperationResolver$1, exports);
		__exportStar(NullableOperationResolver$1, exports);
		__exportStar(PaginatedOperationResolver$1, exports);
		__exportStar(NullableOperationResolver$1, exports);
		__exportStar(types$u, exports);
		
	} (resolvers2));

	var ApiUtils$1 = {};

	var ApiUtilsConfigSetup$1 = {};

	Object.defineProperty(ApiUtilsConfigSetup$1, "__esModule", { value: true });
	ApiUtilsConfigSetup$1.ApiUtilsConfigSetup = void 0;
	var ApiUtilsConfig_1 = ApiUtilsConfig;
	var ApiUtilsConfigSetup = /** @class */ (function () {
	    function ApiUtilsConfigSetup() {
	    }
	    ApiUtilsConfigSetup.register = function (config) {
	        if (!config.hasKey(ApiUtilsConfig_1.ApiUtilsConfig.apiKey)) {
	            config.registerKey(ApiUtilsConfig_1.ApiUtilsConfig.apiKey);
	        }
	    };
	    return ApiUtilsConfigSetup;
	}());
	ApiUtilsConfigSetup$1.ApiUtilsConfigSetup = ApiUtilsConfigSetup;

	var __extends$9 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(ApiUtils$1, "__esModule", { value: true });
	ApiUtils$1.ApiUtils = void 0;
	var common_core_1$1s = lib$9;
	var ApiUtilsConfigSetup_1 = ApiUtilsConfigSetup$1;
	var ApiUtils = /** @class */ (function (_super) {
	    __extends$9(ApiUtils, _super);
	    function ApiUtils(core) {
	        return _super.call(this, ApiUtils.moduleName, core) || this;
	    }
	    ApiUtils.create = function (core) {
	        return new ApiUtils(core !== null && core !== void 0 ? core : common_core_1$1s.CoreProvider.getDefault());
	    };
	    ApiUtils.prototype.setup = function () {
	        ApiUtilsConfigSetup_1.ApiUtilsConfigSetup.register(this.core.config);
	    };
	    ApiUtils.prototype.start = function () {
	        // Nothing...
	    };
	    ApiUtils.moduleName = 'api';
	    return ApiUtils;
	}(common_core_1$1s.Module));
	ApiUtils$1.ApiUtils = ApiUtils;

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(config$5, exports);
		__exportStar(resolvers, exports);
		__exportStar(resolvers2, exports);
		__exportStar(ApiUtils$1, exports);
		
	} (lib$a));

	var create = {};

	var lib$8 = {};

	var dataTypes$6 = {};

	var AptosStream$2 = {};

	var AptosStream$1 = {};

	var lib$7 = {};

	var config$3 = {};

	var CommonAptosUtilsConfigSetup$1 = {};

	var CommonAptosUtilsConfig = {};

	Object.defineProperty(CommonAptosUtilsConfig, "__esModule", { value: true });
	CommonAptosUtilsConfig.CommonAptosUtilsConfig = void 0;
	CommonAptosUtilsConfig.CommonAptosUtilsConfig = {
	    defaultAptosNetwork: {
	        name: 'defaultAptosNetwork',
	        defaultValue: 'mainnet',
	    },
	};

	Object.defineProperty(CommonAptosUtilsConfigSetup$1, "__esModule", { value: true });
	CommonAptosUtilsConfigSetup$1.CommonAptosUtilsConfigSetup = void 0;
	var CommonAptosUtilsConfig_1$1 = CommonAptosUtilsConfig;
	var CommonAptosUtilsConfigSetup = /** @class */ (function () {
	    function CommonAptosUtilsConfigSetup() {
	    }
	    CommonAptosUtilsConfigSetup.register = function (config) {
	        config.registerKey(CommonAptosUtilsConfig_1$1.CommonAptosUtilsConfig.defaultAptosNetwork);
	    };
	    return CommonAptosUtilsConfigSetup;
	}());
	CommonAptosUtilsConfigSetup$1.CommonAptosUtilsConfigSetup = CommonAptosUtilsConfigSetup;

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(CommonAptosUtilsConfigSetup$1, exports);
		__exportStar(CommonAptosUtilsConfig, exports);
		
	} (config$3));

	var dataTypes$5 = {};

	var AptosAddress$2 = {};

	var AptosAddress$1 = {};

	var AccountAddress$1 = {};

	var HexString$1 = {};

	var utils$o = {};

	var cryptoBrowser = {};

	Object.defineProperty(cryptoBrowser, "__esModule", { value: true });
	cryptoBrowser.crypto = void 0;
	cryptoBrowser.crypto = {
	    node: undefined,
	    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,
	};

	(function (exports) {
		/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.randomBytes = exports.wrapConstructorWithOpts = exports.wrapConstructor = exports.checkOpts = exports.Hash = exports.concatBytes = exports.toBytes = exports.utf8ToBytes = exports.asyncLoop = exports.nextTick = exports.hexToBytes = exports.bytesToHex = exports.isLE = exports.rotr = exports.createView = exports.u32 = exports.u8 = void 0;
		// The import here is via the package name. This is to ensure
		// that exports mapping/resolution does fall into place.
		const crypto_1 = cryptoBrowser;
		// Cast array to different type
		const u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);
		exports.u8 = u8;
		const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
		exports.u32 = u32;
		// Cast array to view
		const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
		exports.createView = createView;
		// The rotate right (circular right shift) operation for uint32
		const rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);
		exports.rotr = rotr;
		exports.isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;
		// There is almost no big endian hardware, but js typed arrays uses platform specific endianness.
		// So, just to be sure not to corrupt anything.
		if (!exports.isLE)
		    throw new Error('Non little-endian hardware is not supported');
		const hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));
		/**
		 * @example bytesToHex(Uint8Array.from([0xde, 0xad, 0xbe, 0xef]))
		 */
		function bytesToHex(uint8a) {
		    // pre-caching improves the speed 6x
		    if (!(uint8a instanceof Uint8Array))
		        throw new Error('Uint8Array expected');
		    let hex = '';
		    for (let i = 0; i < uint8a.length; i++) {
		        hex += hexes[uint8a[i]];
		    }
		    return hex;
		}
		exports.bytesToHex = bytesToHex;
		/**
		 * @example hexToBytes('deadbeef')
		 */
		function hexToBytes(hex) {
		    if (typeof hex !== 'string') {
		        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);
		    }
		    if (hex.length % 2)
		        throw new Error('hexToBytes: received invalid unpadded hex');
		    const array = new Uint8Array(hex.length / 2);
		    for (let i = 0; i < array.length; i++) {
		        const j = i * 2;
		        const hexByte = hex.slice(j, j + 2);
		        const byte = Number.parseInt(hexByte, 16);
		        if (Number.isNaN(byte) || byte < 0)
		            throw new Error('Invalid byte sequence');
		        array[i] = byte;
		    }
		    return array;
		}
		exports.hexToBytes = hexToBytes;
		// There is no setImmediate in browser and setTimeout is slow. However, call to async function will return Promise
		// which will be fullfiled only on next scheduler queue processing step and this is exactly what we need.
		const nextTick = async () => { };
		exports.nextTick = nextTick;
		// Returns control to thread each 'tick' ms to avoid blocking
		async function asyncLoop(iters, tick, cb) {
		    let ts = Date.now();
		    for (let i = 0; i < iters; i++) {
		        cb(i);
		        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too
		        const diff = Date.now() - ts;
		        if (diff >= 0 && diff < tick)
		            continue;
		        await (0, exports.nextTick)();
		        ts += diff;
		    }
		}
		exports.asyncLoop = asyncLoop;
		function utf8ToBytes(str) {
		    if (typeof str !== 'string') {
		        throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);
		    }
		    return new TextEncoder().encode(str);
		}
		exports.utf8ToBytes = utf8ToBytes;
		function toBytes(data) {
		    if (typeof data === 'string')
		        data = utf8ToBytes(data);
		    if (!(data instanceof Uint8Array))
		        throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);
		    return data;
		}
		exports.toBytes = toBytes;
		/**
		 * Concats Uint8Array-s into one; like `Buffer.concat([buf1, buf2])`
		 * @example concatBytes(buf1, buf2)
		 */
		function concatBytes(...arrays) {
		    if (!arrays.every((a) => a instanceof Uint8Array))
		        throw new Error('Uint8Array list expected');
		    if (arrays.length === 1)
		        return arrays[0];
		    const length = arrays.reduce((a, arr) => a + arr.length, 0);
		    const result = new Uint8Array(length);
		    for (let i = 0, pad = 0; i < arrays.length; i++) {
		        const arr = arrays[i];
		        result.set(arr, pad);
		        pad += arr.length;
		    }
		    return result;
		}
		exports.concatBytes = concatBytes;
		// For runtime check if class implements interface
		class Hash {
		    // Safe version that clones internal state
		    clone() {
		        return this._cloneInto();
		    }
		}
		exports.Hash = Hash;
		// Check if object doens't have custom constructor (like Uint8Array/Array)
		const isPlainObject = (obj) => Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;
		function checkOpts(defaults, opts) {
		    if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))
		        throw new TypeError('Options should be object or undefined');
		    const merged = Object.assign(defaults, opts);
		    return merged;
		}
		exports.checkOpts = checkOpts;
		function wrapConstructor(hashConstructor) {
		    const hashC = (message) => hashConstructor().update(toBytes(message)).digest();
		    const tmp = hashConstructor();
		    hashC.outputLen = tmp.outputLen;
		    hashC.blockLen = tmp.blockLen;
		    hashC.create = () => hashConstructor();
		    return hashC;
		}
		exports.wrapConstructor = wrapConstructor;
		function wrapConstructorWithOpts(hashCons) {
		    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
		    const tmp = hashCons({});
		    hashC.outputLen = tmp.outputLen;
		    hashC.blockLen = tmp.blockLen;
		    hashC.create = (opts) => hashCons(opts);
		    return hashC;
		}
		exports.wrapConstructorWithOpts = wrapConstructorWithOpts;
		/**
		 * Secure PRNG
		 */
		function randomBytes(bytesLength = 32) {
		    if (crypto_1.crypto.web) {
		        return crypto_1.crypto.web.getRandomValues(new Uint8Array(bytesLength));
		    }
		    else if (crypto_1.crypto.node) {
		        return new Uint8Array(crypto_1.crypto.node.randomBytes(bytesLength).buffer);
		    }
		    else {
		        throw new Error("The environment doesn't have randomBytes function");
		    }
		}
		exports.randomBytes = randomBytes;
		
	} (utils$o));

	/**
	 * Copied (and remove obsolete functionalities) from https://github.com/aptos-labs/aptos-core/blob/main/ecosystem/typescript/sdk/src/hex_string.ts because
	 * - We only care about address validation and conversion, this is a dependency for AccountAddress
	 * - Resolving this dependency in UMD gives dependency errors
	 */
	Object.defineProperty(HexString$1, "__esModule", { value: true });
	HexString$1.HexString = void 0;
	var utils_1$1 = utils$o;
	/**
	 * A util class for working with hex strings.
	 * Hex strings are strings that are prefixed with `0x`
	 */
	var HexString = /** @class */ (function () {
	    /**
	     * Creates new HexString instance from regular string. If specified string already starts with "0x" prefix,
	     * it will not add another one
	     * @param hexString String to convert
	     * @example
	     * ```
	     *  const string = "string";
	     *  new HexString(string); // "0xstring"
	     * ```
	     */
	    function HexString(hexString) {
	        if (hexString.startsWith('0x')) {
	            this.hexString = hexString;
	        }
	        else {
	            this.hexString = "0x".concat(hexString);
	        }
	    }
	    /**
	     * Creates new hex string from Buffer
	     * @param buffer A buffer to convert
	     * @returns New HexString
	     */
	    HexString.fromBuffer = function (buffer) {
	        return HexString.fromUint8Array(buffer);
	    };
	    /**
	     * Creates new hex string from Uint8Array
	     * @param arr Uint8Array to convert
	     * @returns New HexString
	     */
	    HexString.fromUint8Array = function (arr) {
	        return new HexString((0, utils_1$1.bytesToHex)(arr));
	    };
	    /**
	     * Ensures `hexString` is instance of `HexString` class
	     * @param hexString String to check
	     * @returns New HexString if `hexString` is regular string or `hexString` if it is HexString instance
	     * @example
	     * ```
	     *  const regularString = "string";
	     *  const hexString = new HexString("string"); // "0xstring"
	     *  HexString.ensure(regularString); // "0xstring"
	     *  HexString.ensure(hexString); // "0xstring"
	     * ```
	     */
	    HexString.ensure = function (hexString) {
	        if (typeof hexString === 'string') {
	            return new HexString(hexString);
	        }
	        return hexString;
	    };
	    /**
	     * Getter for inner hexString
	     * @returns Inner hex string
	     */
	    HexString.prototype.hex = function () {
	        return this.hexString;
	    };
	    /**
	     * Getter for inner hexString without prefix
	     * @returns Inner hex string without prefix
	     * @example
	     * ```
	     *  const hexString = new HexString("string"); // "0xstring"
	     *  hexString.noPrefix(); // "string"
	     * ```
	     */
	    HexString.prototype.noPrefix = function () {
	        return this.hexString.slice(2);
	    };
	    /**
	     * Overrides default `toString` method
	     * @returns Inner hex string
	     */
	    HexString.prototype.toString = function () {
	        return this.hex();
	    };
	    /**
	     * Trimmes extra zeroes in the begining of a string
	     * @returns Inner hexString without leading zeroes
	     * @example
	     * ```
	     *  new HexString("0x000000string").toShortString(); // result = "0xstring"
	     * ```
	     */
	    HexString.prototype.toShortString = function () {
	        var trimmed = this.hexString.replace(/^0x0*/, '');
	        return "0x".concat(trimmed);
	    };
	    /**
	     * Converts hex string to a Uint8Array
	     * @returns Uint8Array from inner hexString without prefix
	     */
	    HexString.prototype.toUint8Array = function () {
	        return Uint8Array.from((0, utils_1$1.hexToBytes)(this.noPrefix()));
	    };
	    return HexString;
	}());
	HexString$1.HexString = HexString;

	/**
	 * Copied (and remove obsolete functionalities) from https://github.com/aptos-labs/aptos-core/blob/main/ecosystem/typescript/sdk/src/aptos_types/account_address.ts because
	 * - We only care about address validation and conversion
	 * - Resolving this dependency in UMD gives dependency errors
	 */
	Object.defineProperty(AccountAddress$1, "__esModule", { value: true });
	AccountAddress$1.AccountAddress = void 0;
	var HexString_1 = HexString$1;
	var AccountAddress = /** @class */ (function () {
	    function AccountAddress(address) {
	        if (address.length !== AccountAddress.LENGTH) {
	            throw new Error('Expected address of length 32');
	        }
	        this.address = address;
	    }
	    /**
	     * Creates AccountAddress from a hex string.
	     * @param addr Hex string can be with a prefix or without a prefix,
	     *   e.g. '0x1aa' or '1aa'. Hex string will be left padded with 0s if too short.
	     */
	    AccountAddress.fromHex = function (addr) {
	        var address = HexString_1.HexString.ensure(addr);
	        // If an address hex has odd number of digits, padd the hex string with 0
	        // e.g. '1aa' would become '01aa'.
	        if (address.noPrefix().length % 2 !== 0) {
	            address = new HexString_1.HexString("0".concat(address.noPrefix()));
	        }
	        var addressBytes = address.toUint8Array();
	        if (addressBytes.length > AccountAddress.LENGTH) {
	            // eslint-disable-next-line quotes
	            throw new Error("Hex string is too long. Address's length is 32 bytes.");
	        }
	        else if (addressBytes.length === AccountAddress.LENGTH) {
	            return new AccountAddress(addressBytes);
	        }
	        var res = new Uint8Array(AccountAddress.LENGTH);
	        res.set(addressBytes, AccountAddress.LENGTH - addressBytes.length);
	        return new AccountAddress(res);
	    };
	    /**
	     * Checks if the string is a valid AccountAddress
	     * @param addr Hex string can be with a prefix or without a prefix,
	     *   e.g. '0x1aa' or '1aa'. Hex string will be left padded with 0s if too short.
	     */
	    AccountAddress.isValid = function (addr) {
	        // At least one zero is required
	        if (addr === '') {
	            return false;
	        }
	        var address = HexString_1.HexString.ensure(addr);
	        // If an address hex has odd number of digits, padd the hex string with 0
	        // e.g. '1aa' would become '01aa'.
	        if (address.noPrefix().length % 2 !== 0) {
	            address = new HexString_1.HexString("0".concat(address.noPrefix()));
	        }
	        var addressBytes = address.toUint8Array();
	        return addressBytes.length <= AccountAddress.LENGTH;
	    };
	    AccountAddress.LENGTH = 32;
	    AccountAddress.CORE_CODE_ADDRESS = AccountAddress.fromHex('0x1');
	    return AccountAddress;
	}());
	AccountAddress$1.AccountAddress = AccountAddress;

	Object.defineProperty(AptosAddress$1, "__esModule", { value: true });
	AptosAddress$1.AptosAddress = void 0;
	var common_core_1$1r = lib$9;
	var AccountAddress_1 = AccountAddress$1;
	/**
	 * A representation of an address on the Aptos network.
	 *
	 * Use this class any time you work with an address.
	 *
	 * @category DataType
	 */
	var AptosAddress = /** @class */ (function () {
	    function AptosAddress(address) {
	        this.address = address;
	    }
	    /**
	     * Create a new instance of AptosAddress from any valid address input.
	     *
	     * @example `const address = AptosAddress.create("0xcd30fbbda98b2aed026772c13e5ed90a7f056b589ef9e78cd96415e1af12451c")`
	     * @throws an error when a passed address is invalid.
	     */
	    AptosAddress.create = function (address) {
	        return address instanceof AptosAddress ? address : new AptosAddress(AptosAddress.parse(address));
	    };
	    AptosAddress.parse = function (address) {
	        try {
	            if (!AccountAddress_1.AccountAddress.isValid(address)) {
	                // Throw and catch locally to resolve the same way if it is invalid and if it cannot be parsed
	                throw new Error();
	            }
	            return address;
	        }
	        catch (e) {
	            throw new common_core_1$1r.CoreError({
	                code: common_core_1$1r.CoreErrorCode.INVALID_ARGUMENT,
	                message: "Invalid address provided: ".concat(address),
	                cause: e,
	            });
	        }
	    };
	    /**
	     * Formats the address to hex format.
	     * Currently returns a string representing the address.
	     * @example address.format(); // "0xcd30fbbda98b2aed026772c13e5ed90a7f056b589ef9e78cd96415e1af12451c"
	     */
	    AptosAddress.prototype.format = function () {
	        // TODO: add `format` argument
	        return this.address;
	    };
	    /**
	     * Check the equality between two Aptos addresses
	     * @example `AptosAddress.equals("0xcd30fbbda98b2aed026772c13e5ed90a7f056b589ef9e78cd96415e1af12451c", "0xcd30fbbda98b2aed026772c13e5ed90a7f056b589ef9e78cd96415e1af12451c")`
	     */
	    AptosAddress.equals = function (addressA, addressB) {
	        return AptosAddress.create(addressA).equals(addressB);
	    };
	    /**
	     * Checks the equality of the current address with another Aptos address.
	     * @example `address.equals("0xcd30fbbda98b2aed026772c13e5ed90a7f056b589ef9e78cd96415e1af12451c")`
	     * @example `address.equals(AptosAddress.create("0xcd30fbbda98b2aed026772c13e5ed90a7f056b589ef9e78cd96415e1af12451c"))`
	     */
	    AptosAddress.prototype.equals = function (address) {
	        return this.address === AptosAddress.create(address).address;
	    };
	    /**
	     * @returns a string representing the address.
	     * @example address.toString(); // "0xcd30fbbda98b2aed026772c13e5ed90a7f056b589ef9e78cd96415e1af12451c"
	     */
	    AptosAddress.prototype.toString = function () {
	        return this.address;
	    };
	    /**
	     * @returns a string representing the address.
	     * @example address.toJSON(); // "0xcd30fbbda98b2aed026772c13e5ed90a7f056b589ef9e78cd96415e1af12451c"
	     */
	    AptosAddress.prototype.toJSON = function () {
	        return this.address;
	    };
	    return AptosAddress;
	}());
	AptosAddress$1.AptosAddress = AptosAddress;

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(AptosAddress$1, exports);
		
	} (AptosAddress$2));

	var AptosNetwork$2 = {};

	var AptosNetwork$1 = {};

	Object.defineProperty(AptosNetwork$1, "__esModule", { value: true });
	AptosNetwork$1.AptosNetwork = void 0;
	var common_core_1$1q = lib$9;
	var aptosNetworkNames = ['mainnet', 'testnet', 'devnet'];
	var aptosChainIdToNetworkNames = {
	    '1': 'mainnet',
	    '2': 'testnet',
	};
	/**
	 * A representation of a Aptos network.
	 *
	 * @category DataType
	 */
	var AptosNetwork = /** @class */ (function () {
	    function AptosNetwork(network) {
	        this.network = network;
	    }
	    Object.defineProperty(AptosNetwork, "MAINNET", {
	        /**
	         * Returns MAINNET network
	         *
	         * @example AptosNetwork.MAINNET
	         */
	        get: function () {
	            return AptosNetwork.create('mainnet');
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(AptosNetwork, "TESTNET", {
	        /**
	         * Returns TESTNET network
	         *
	         * @example AptosNetwork.MAINNET
	         */
	        get: function () {
	            return AptosNetwork.create('testnet');
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(AptosNetwork, "DEVNET", {
	        /**
	         * Returns DEVNET network
	         *
	         * @example AptosNetwork.MAINNET
	         */
	        get: function () {
	            return AptosNetwork.create('devnet');
	        },
	        enumerable: false,
	        configurable: true
	    });
	    /**
	     * Create a new instance of AptosNetwork from any valid network input.
	     *
	     * @example `const network = AptosNetwork.create("mainnet")`
	     * @throws an error when a passed network is invalid.
	     */
	    AptosNetwork.create = function (network) {
	        return network instanceof AptosNetwork ? network : new AptosNetwork(AptosNetwork.parse(network));
	    };
	    AptosNetwork.parse = function (network) {
	        var _a;
	        if (typeof network !== 'string') {
	            throw new common_core_1$1q.CoreError({
	                code: common_core_1$1q.CoreErrorCode.INVALID_ARGUMENT,
	                message: "Aptos network is not supported: ".concat(network),
	            });
	        }
	        var networkName = (_a = aptosChainIdToNetworkNames[network]) !== null && _a !== void 0 ? _a : network;
	        if (!aptosNetworkNames.includes(networkName)) {
	            throw new common_core_1$1q.CoreError({
	                code: common_core_1$1q.CoreErrorCode.INVALID_ARGUMENT,
	                message: "Aptos network is not supported: ".concat(network),
	            });
	        }
	        return networkName;
	    };
	    /**
	     * Formats the network to a specific format.
	     * Currently returns a string representing the network.
	     * @example network.format(); // "mainnet"
	     */
	    AptosNetwork.prototype.format = function () {
	        // TODO: add `format` argument
	        return this.network;
	    };
	    /**
	     * Checks the equality of the current network with another Aptos network.
	     * @example `network.equals("mainnet")`
	     * @example `network.equals(AptosNetwork.create("mainnet"))`
	     */
	    AptosNetwork.prototype.equals = function (network) {
	        return this.network === AptosNetwork.create(network).network;
	    };
	    /**
	     * @returns a string representing the network.
	     * @example network.toJSON(); // "mainnet"
	     */
	    AptosNetwork.prototype.toJSON = function () {
	        return this.network;
	    };
	    /**
	     * @returns a string representing the network.
	     * @example network.toString(); // "mainnet"
	     */
	    AptosNetwork.prototype.toString = function () {
	        return this.network;
	    };
	    return AptosNetwork;
	}());
	AptosNetwork$1.AptosNetwork = AptosNetwork;

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(AptosNetwork$1, exports);
		
	} (AptosNetwork$2));

	var AptosNative$2 = {};

	var AptosNative$1 = {};

	Object.defineProperty(AptosNative$1, "__esModule", { value: true });
	AptosNative$1.AptosNative = void 0;
	var common_core_1$1p = lib$9;
	var unitToDecimals$2 = {
	    aptos: 8,
	    octas: 0,
	};
	/**
	 * The AptosNative class is a MoralisData that references to the value of Aptos native currency APT
	 *
	 * @category DataType
	 */
	var AptosNative = /** @class */ (function () {
	    function AptosNative(rawValue) {
	        this.rawValue = rawValue;
	    }
	    /**
	     * Create a new instance of AptosNative from any valid {@link AptosNativeish} value.
	     * @param value - the value to create the AptosNative from
	     * @param unit - the unit of the value (optional), defaults to `aptos`
	     * @returns a new instance of AptosNative
	     * @example
	     * ```ts
	     * const native = AptosNative.create(2, 'octas');
	     * const native = AptosNative.create(2);
	     *```
	     */
	    AptosNative.create = function (value, unit) {
	        if (value instanceof AptosNative) {
	            return value;
	        }
	        return new AptosNative(AptosNative.parse(value, unit));
	    };
	    AptosNative.parse = function (value, unit) {
	        if (unit === void 0) { unit = 'aptos'; }
	        var decimal;
	        if (typeof unit === 'number') {
	            decimal = unit;
	        }
	        else if (unitToDecimals$2[unit] !== undefined) {
	            decimal = unitToDecimals$2[unit];
	        }
	        else {
	            throw new common_core_1$1p.CoreError({
	                code: common_core_1$1p.CoreErrorCode.INVALID_ARGUMENT,
	                message: "Not supported Aptos unit: ".concat(unit),
	            });
	        }
	        return common_core_1$1p.BigNumber.fromDecimal(value.toString(), decimal);
	    };
	    /**
	     * Compares two AptosNativeish values.
	     * @param valueA - the first value to compare
	     * @param valueB - the second value to compare
	     * @returns true if the values are equal
	     * @example
	     * ```ts
	     * AptosNative.equals(AptosNative.create(1), AptosNative.create(1)); // true
	     * ```
	     */
	    AptosNative.equals = function (valueA, valueB) {
	        var aptosNativeA = AptosNative.create(valueA);
	        var aptosNativeB = AptosNative.create(valueB);
	        return aptosNativeA.octas === aptosNativeB.octas;
	    };
	    /**
	     * Compares AptosNative with current instance.
	     * @param value - the value to compare with
	     * @returns true if the values are equal
	     * @example
	     * ```ts
	     * const native = AptosNative.create(2, 'octas');
	     * native.equals(AptosNative.create(1)); // false
	     * ```
	     */
	    AptosNative.prototype.equals = function (value) {
	        return AptosNative.equals(this, value);
	    };
	    /**
	     * Converts the AptosNative to a string.
	     * @returns the value of the AptosNative as a string
	     * @example `native.format()`
	     */
	    AptosNative.prototype.format = function () {
	        // TODO: add `format` argument
	        return this.octas;
	    };
	    /**
	     * Converts the AptosNative to a string.
	     * @returns the value of the AptosNative as a string
	     * @example `native.toJSON()`
	     */
	    AptosNative.prototype.toJSON = function () {
	        return this.octas;
	    };
	    /**
	     * Converts the AptosNative to a string.
	     * @returns the value of the AptosNative as a string
	     * @example `native.toString()`
	     */
	    AptosNative.prototype.toString = function () {
	        return this.octas;
	    };
	    Object.defineProperty(AptosNative.prototype, "value", {
	        /**
	         * @returns the value of the AptosNative as a BigNumber
	         * @example `native.value`
	         */
	        get: function () {
	            return this.rawValue;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(AptosNative.prototype, "aptos", {
	        /**
	         * Converts the AptosNative to an aptos unit.
	         * @returns the value of the AptosNative as an aptos string
	         * @example `native.aptos`
	         */
	        get: function () {
	            return this.rawValue.toDecimal(unitToDecimals$2['aptos']);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(AptosNative.prototype, "octas", {
	        /**
	         * Converts the AptosNative to a string.
	         * @returns the value of the AptosNative as a string
	         * @example `native.lamports`
	         */
	        get: function () {
	            return this.rawValue.toString();
	        },
	        enumerable: false,
	        configurable: true
	    });
	    return AptosNative;
	}());
	AptosNative$1.AptosNative = AptosNative;

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(AptosNative$1, exports);
		
	} (AptosNative$2));

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(AptosAddress$2, exports);
		__exportStar(AptosNetwork$2, exports);
		__exportStar(AptosNative$2, exports);
		
	} (dataTypes$5));

	var AptosNetworkResolver$1 = {};

	Object.defineProperty(AptosNetworkResolver$1, "__esModule", { value: true });
	AptosNetworkResolver$1.AptosNetworkResolver = void 0;
	var CommonAptosUtilsConfig_1 = CommonAptosUtilsConfig;
	var dataTypes_1$U = dataTypes$5;
	var AptosNetworkResolver = /** @class */ (function () {
	    function AptosNetworkResolver() {
	    }
	    AptosNetworkResolver.resolve = function (network, core) {
	        if (!network) {
	            network = core.config.get(CommonAptosUtilsConfig_1.CommonAptosUtilsConfig.defaultAptosNetwork);
	        }
	        return dataTypes_1$U.AptosNetwork.create(network).network;
	    };
	    return AptosNetworkResolver;
	}());
	AptosNetworkResolver$1.AptosNetworkResolver = AptosNetworkResolver;

	var CommonAptosUtils$1 = {};

	var __extends$8 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __createBinding$3 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault$3 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar$3 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$3(result, mod, k);
	    __setModuleDefault$3(result, mod);
	    return result;
	};
	Object.defineProperty(CommonAptosUtils$1, "__esModule", { value: true });
	CommonAptosUtils$1.CommonAptosUtils = void 0;
	var common_core_1$1o = lib$9;
	var config_1$1 = config$3;
	var dataTypes$4 = __importStar$3(dataTypes$5);
	var CommonAptosUtils = /** @class */ (function (_super) {
	    __extends$8(CommonAptosUtils, _super);
	    function CommonAptosUtils(core) {
	        return _super.call(this, CommonAptosUtils.moduleName, core) || this;
	    }
	    CommonAptosUtils.create = function (core) {
	        return new CommonAptosUtils(core !== null && core !== void 0 ? core : common_core_1$1o.CoreProvider.getDefault());
	    };
	    CommonAptosUtils.prototype.setup = function () {
	        config_1$1.CommonAptosUtilsConfigSetup.register(this.core.config);
	    };
	    CommonAptosUtils.prototype.start = function () {
	        // Nothing
	    };
	    Object.defineProperty(CommonAptosUtils.prototype, "AptosAddress", {
	        get: function () {
	            return dataTypes$4.AptosAddress;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(CommonAptosUtils.prototype, "AptosNative", {
	        get: function () {
	            return dataTypes$4.AptosNative;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(CommonAptosUtils.prototype, "AptosNetwork", {
	        get: function () {
	            return dataTypes$4.AptosNetwork;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    CommonAptosUtils.moduleName = 'aptosUtils';
	    return CommonAptosUtils;
	}(common_core_1$1o.Module));
	CommonAptosUtils$1.CommonAptosUtils = CommonAptosUtils;

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(config$3, exports);
		__exportStar(dataTypes$5, exports);
		__exportStar(AptosNetworkResolver$1, exports);
		__exportStar(CommonAptosUtils$1, exports);
		
	} (lib$7));

	var __assign$Q = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$Q = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$Q.apply(this, arguments);
	};
	Object.defineProperty(AptosStream$1, "__esModule", { value: true });
	AptosStream$1.AptosStream = void 0;
	var common_aptos_utils_1$7 = lib$7;
	/**
	 * The AptosStream class is a representation of an Aptos Stream that is returned by the Moralis Stream API
	 *
	 * @category DataType
	 */
	var AptosStream = /** @class */ (function () {
	    function AptosStream(data) {
	        this._data = AptosStream.parse(data);
	    }
	    /**
	     * Create a new instance of AptosStream
	     *
	     * @param data - the AptosStreamish type
	     * @example
	     * ```ts
	     * const aptosStream = AptosStream.create(data);
	     * ```
	     * @returns an instance of AptosStream
	     */
	    AptosStream.create = function (data) {
	        if (data instanceof AptosStream) {
	            return data;
	        }
	        return new AptosStream(data);
	    };
	    /**
	     * Compares two AptosStream data. It checks a deep equality check of both values.
	     * @param valueA - the first AptosStreamish data to compare
	     * @param valueB - the second AptosStreamish data to compare
	     * @returns true if the values are equal, false otherwise
	     * @example
	     * ```ts
	     *  AptosStream.equals(valueA, valueB);
	     * ```
	     */
	    AptosStream.equals = function (valueA, valueB) {
	        var aptosStreamA = AptosStream.create(valueA);
	        var aptosStreamB = AptosStream.create(valueB);
	        if (aptosStreamA.id !== aptosStreamB.id) {
	            return false;
	        }
	        return true;
	    };
	    /**
	     * Compares an AptosStreamish data to this AptosStream instance.
	     * @param value - the value to compare
	     * @returns true if the value is equal to the current instance, false otherwise
	     * @example
	     * ```ts
	     * aptosStream.equals(value);
	     * ```
	     */
	    AptosStream.prototype.equals = function (value) {
	        return AptosStream.equals(this, value);
	    };
	    /**
	     * Converts the AptosStream instance to a JSON object.
	     * @returns JSON object of the AptosStream instance
	     * @example `aptosStream.toJSON()`
	     */
	    AptosStream.prototype.toJSON = function () {
	        return __assign$Q(__assign$Q({}, this._data), { network: this.network.map(function (network) { return network.toJSON(); }) });
	    };
	    /**
	     * Converts the AptosStream instance to a JSON object.
	     * @returns JSON object of the AptosStream instance
	     * @example `aptosStream.format()`
	     */
	    AptosStream.prototype.format = function () {
	        return this.toJSON();
	    };
	    Object.defineProperty(AptosStream.prototype, "network", {
	        get: function () {
	            return this._data.network;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(AptosStream.prototype, "webhookUrl", {
	        get: function () {
	            return this._data.webhookUrl;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(AptosStream.prototype, "description", {
	        get: function () {
	            return this._data.description;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(AptosStream.prototype, "tag", {
	        get: function () {
	            return this._data.tag;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(AptosStream.prototype, "allAddresses", {
	        get: function () {
	            return this._data.allAddresses;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(AptosStream.prototype, "id", {
	        get: function () {
	            return this._data.id;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(AptosStream.prototype, "status", {
	        get: function () {
	            return this._data.status;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(AptosStream.prototype, "statusMessage", {
	        get: function () {
	            return this._data.statusMessage;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(AptosStream.prototype, "demo", {
	        get: function () {
	            return this._data.demo;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(AptosStream.prototype, "includeChanges", {
	        get: function () {
	            return this._data.includeChanges;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(AptosStream.prototype, "includeEvents", {
	        get: function () {
	            return this._data.includeEvents;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(AptosStream.prototype, "includePayload", {
	        get: function () {
	            return this._data.includePayload;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(AptosStream.prototype, "isErrorSince", {
	        get: function () {
	            return this._data.isErrorSince;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(AptosStream.prototype, "events", {
	        get: function () {
	            return this._data.events;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(AptosStream.prototype, "functions", {
	        get: function () {
	            return this._data.functions;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(AptosStream.prototype, "amountOfAddresses", {
	        get: function () {
	            return this._data.amountOfAddresses;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    AptosStream.parse = function (data) {
	        return __assign$Q(__assign$Q({}, data), { network: data.network.map(function (network) { return common_aptos_utils_1$7.AptosNetwork.create(network); }) });
	    };
	    return AptosStream;
	}());
	AptosStream$1.AptosStream = AptosStream;

	var types$t = {};

	Object.defineProperty(types$t, "__esModule", { value: true });

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(AptosStream$1, exports);
		__exportStar(types$t, exports);
		
	} (AptosStream$2));

	var EvmStream$2 = {};

	var EvmStream$1 = {};

	var lib$6 = {};

	var dataTypes$3 = {};

	var Erc20$1 = {};

	var Erc20 = {};

	var EvmAddress$2 = {};

	var EvmAddress$1 = {};

	const version$a = "logger/5.7.0";

	let _permanentCensorErrors = false;
	let _censorErrors = false;
	const LogLevels = { debug: 1, "default": 2, info: 2, warning: 3, error: 4, off: 5 };
	let _logLevel = LogLevels["default"];
	let _globalLogger = null;
	function _checkNormalize() {
	    try {
	        const missing = [];
	        // Make sure all forms of normalization are supported
	        ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
	            try {
	                if ("test".normalize(form) !== "test") {
	                    throw new Error("bad normalize");
	                }
	                ;
	            }
	            catch (error) {
	                missing.push(form);
	            }
	        });
	        if (missing.length) {
	            throw new Error("missing " + missing.join(", "));
	        }
	        if (String.fromCharCode(0xe9).normalize("NFD") !== String.fromCharCode(0x65, 0x0301)) {
	            throw new Error("broken implementation");
	        }
	    }
	    catch (error) {
	        return error.message;
	    }
	    return null;
	}
	const _normalizeError = _checkNormalize();
	var LogLevel;
	(function (LogLevel) {
	    LogLevel["DEBUG"] = "DEBUG";
	    LogLevel["INFO"] = "INFO";
	    LogLevel["WARNING"] = "WARNING";
	    LogLevel["ERROR"] = "ERROR";
	    LogLevel["OFF"] = "OFF";
	})(LogLevel || (LogLevel = {}));
	var ErrorCode;
	(function (ErrorCode) {
	    ///////////////////
	    // Generic Errors
	    // Unknown Error
	    ErrorCode["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
	    // Not Implemented
	    ErrorCode["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
	    // Unsupported Operation
	    //   - operation
	    ErrorCode["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
	    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)
	    //   - event ("noNetwork" is not re-thrown in provider.ready; otherwise thrown)
	    ErrorCode["NETWORK_ERROR"] = "NETWORK_ERROR";
	    // Some sort of bad response from the server
	    ErrorCode["SERVER_ERROR"] = "SERVER_ERROR";
	    // Timeout
	    ErrorCode["TIMEOUT"] = "TIMEOUT";
	    ///////////////////
	    // Operational  Errors
	    // Buffer Overrun
	    ErrorCode["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
	    // Numeric Fault
	    //   - operation: the operation being executed
	    //   - fault: the reason this faulted
	    ErrorCode["NUMERIC_FAULT"] = "NUMERIC_FAULT";
	    ///////////////////
	    // Argument Errors
	    // Missing new operator to an object
	    //  - name: The name of the class
	    ErrorCode["MISSING_NEW"] = "MISSING_NEW";
	    // Invalid argument (e.g. value is incompatible with type) to a function:
	    //   - argument: The argument name that was invalid
	    //   - value: The value of the argument
	    ErrorCode["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
	    // Missing argument to a function:
	    //   - count: The number of arguments received
	    //   - expectedCount: The number of arguments expected
	    ErrorCode["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
	    // Too many arguments
	    //   - count: The number of arguments received
	    //   - expectedCount: The number of arguments expected
	    ErrorCode["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
	    ///////////////////
	    // Blockchain Errors
	    // Call exception
	    //  - transaction: the transaction
	    //  - address?: the contract address
	    //  - args?: The arguments passed into the function
	    //  - method?: The Solidity method signature
	    //  - errorSignature?: The EIP848 error signature
	    //  - errorArgs?: The EIP848 error parameters
	    //  - reason: The reason (only for EIP848 "Error(string)")
	    ErrorCode["CALL_EXCEPTION"] = "CALL_EXCEPTION";
	    // Insufficient funds (< value + gasLimit * gasPrice)
	    //   - transaction: the transaction attempted
	    ErrorCode["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
	    // Nonce has already been used
	    //   - transaction: the transaction attempted
	    ErrorCode["NONCE_EXPIRED"] = "NONCE_EXPIRED";
	    // The replacement fee for the transaction is too low
	    //   - transaction: the transaction attempted
	    ErrorCode["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
	    // The gas limit could not be estimated
	    //   - transaction: the transaction passed to estimateGas
	    ErrorCode["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
	    // The transaction was replaced by one with a higher gas price
	    //   - reason: "cancelled", "replaced" or "repriced"
	    //   - cancelled: true if reason == "cancelled" or reason == "replaced")
	    //   - hash: original transaction hash
	    //   - replacement: the full TransactionsResponse for the replacement
	    //   - receipt: the receipt of the replacement
	    ErrorCode["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
	    ///////////////////
	    // Interaction Errors
	    // The user rejected the action, such as signing a message or sending
	    // a transaction
	    ErrorCode["ACTION_REJECTED"] = "ACTION_REJECTED";
	})(ErrorCode || (ErrorCode = {}));
	const HEX = "0123456789abcdef";
	class Logger {
	    constructor(version) {
	        Object.defineProperty(this, "version", {
	            enumerable: true,
	            value: version,
	            writable: false
	        });
	    }
	    _log(logLevel, args) {
	        const level = logLevel.toLowerCase();
	        if (LogLevels[level] == null) {
	            this.throwArgumentError("invalid log level name", "logLevel", logLevel);
	        }
	        if (_logLevel > LogLevels[level]) {
	            return;
	        }
	        console.log.apply(console, args);
	    }
	    debug(...args) {
	        this._log(Logger.levels.DEBUG, args);
	    }
	    info(...args) {
	        this._log(Logger.levels.INFO, args);
	    }
	    warn(...args) {
	        this._log(Logger.levels.WARNING, args);
	    }
	    makeError(message, code, params) {
	        // Errors are being censored
	        if (_censorErrors) {
	            return this.makeError("censored error", code, {});
	        }
	        if (!code) {
	            code = Logger.errors.UNKNOWN_ERROR;
	        }
	        if (!params) {
	            params = {};
	        }
	        const messageDetails = [];
	        Object.keys(params).forEach((key) => {
	            const value = params[key];
	            try {
	                if (value instanceof Uint8Array) {
	                    let hex = "";
	                    for (let i = 0; i < value.length; i++) {
	                        hex += HEX[value[i] >> 4];
	                        hex += HEX[value[i] & 0x0f];
	                    }
	                    messageDetails.push(key + "=Uint8Array(0x" + hex + ")");
	                }
	                else {
	                    messageDetails.push(key + "=" + JSON.stringify(value));
	                }
	            }
	            catch (error) {
	                messageDetails.push(key + "=" + JSON.stringify(params[key].toString()));
	            }
	        });
	        messageDetails.push(`code=${code}`);
	        messageDetails.push(`version=${this.version}`);
	        const reason = message;
	        let url = "";
	        switch (code) {
	            case ErrorCode.NUMERIC_FAULT: {
	                url = "NUMERIC_FAULT";
	                const fault = message;
	                switch (fault) {
	                    case "overflow":
	                    case "underflow":
	                    case "division-by-zero":
	                        url += "-" + fault;
	                        break;
	                    case "negative-power":
	                    case "negative-width":
	                        url += "-unsupported";
	                        break;
	                    case "unbound-bitwise-result":
	                        url += "-unbound-result";
	                        break;
	                }
	                break;
	            }
	            case ErrorCode.CALL_EXCEPTION:
	            case ErrorCode.INSUFFICIENT_FUNDS:
	            case ErrorCode.MISSING_NEW:
	            case ErrorCode.NONCE_EXPIRED:
	            case ErrorCode.REPLACEMENT_UNDERPRICED:
	            case ErrorCode.TRANSACTION_REPLACED:
	            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:
	                url = code;
	                break;
	        }
	        if (url) {
	            message += " [ See: https:/\/links.ethers.org/v5-errors-" + url + " ]";
	        }
	        if (messageDetails.length) {
	            message += " (" + messageDetails.join(", ") + ")";
	        }
	        // @TODO: Any??
	        const error = new Error(message);
	        error.reason = reason;
	        error.code = code;
	        Object.keys(params).forEach(function (key) {
	            error[key] = params[key];
	        });
	        return error;
	    }
	    throwError(message, code, params) {
	        throw this.makeError(message, code, params);
	    }
	    throwArgumentError(message, name, value) {
	        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {
	            argument: name,
	            value: value
	        });
	    }
	    assert(condition, message, code, params) {
	        if (!!condition) {
	            return;
	        }
	        this.throwError(message, code, params);
	    }
	    assertArgument(condition, message, name, value) {
	        if (!!condition) {
	            return;
	        }
	        this.throwArgumentError(message, name, value);
	    }
	    checkNormalize(message) {
	        if (_normalizeError) {
	            this.throwError("platform missing String.prototype.normalize", Logger.errors.UNSUPPORTED_OPERATION, {
	                operation: "String.prototype.normalize", form: _normalizeError
	            });
	        }
	    }
	    checkSafeUint53(value, message) {
	        if (typeof (value) !== "number") {
	            return;
	        }
	        if (message == null) {
	            message = "value not safe";
	        }
	        if (value < 0 || value >= 0x1fffffffffffff) {
	            this.throwError(message, Logger.errors.NUMERIC_FAULT, {
	                operation: "checkSafeInteger",
	                fault: "out-of-safe-range",
	                value: value
	            });
	        }
	        if (value % 1) {
	            this.throwError(message, Logger.errors.NUMERIC_FAULT, {
	                operation: "checkSafeInteger",
	                fault: "non-integer",
	                value: value
	            });
	        }
	    }
	    checkArgumentCount(count, expectedCount, message) {
	        if (message) {
	            message = ": " + message;
	        }
	        else {
	            message = "";
	        }
	        if (count < expectedCount) {
	            this.throwError("missing argument" + message, Logger.errors.MISSING_ARGUMENT, {
	                count: count,
	                expectedCount: expectedCount
	            });
	        }
	        if (count > expectedCount) {
	            this.throwError("too many arguments" + message, Logger.errors.UNEXPECTED_ARGUMENT, {
	                count: count,
	                expectedCount: expectedCount
	            });
	        }
	    }
	    checkNew(target, kind) {
	        if (target === Object || target == null) {
	            this.throwError("missing new", Logger.errors.MISSING_NEW, { name: kind.name });
	        }
	    }
	    checkAbstract(target, kind) {
	        if (target === kind) {
	            this.throwError("cannot instantiate abstract class " + JSON.stringify(kind.name) + " directly; use a sub-class", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: "new" });
	        }
	        else if (target === Object || target == null) {
	            this.throwError("missing new", Logger.errors.MISSING_NEW, { name: kind.name });
	        }
	    }
	    static globalLogger() {
	        if (!_globalLogger) {
	            _globalLogger = new Logger(version$a);
	        }
	        return _globalLogger;
	    }
	    static setCensorship(censorship, permanent) {
	        if (!censorship && permanent) {
	            this.globalLogger().throwError("cannot permanently disable censorship", Logger.errors.UNSUPPORTED_OPERATION, {
	                operation: "setCensorship"
	            });
	        }
	        if (_permanentCensorErrors) {
	            if (!censorship) {
	                return;
	            }
	            this.globalLogger().throwError("error censorship permanent", Logger.errors.UNSUPPORTED_OPERATION, {
	                operation: "setCensorship"
	            });
	        }
	        _censorErrors = !!censorship;
	        _permanentCensorErrors = !!permanent;
	    }
	    static setLogLevel(logLevel) {
	        const level = LogLevels[logLevel.toLowerCase()];
	        if (level == null) {
	            Logger.globalLogger().warn("invalid log level - " + logLevel);
	            return;
	        }
	        _logLevel = level;
	    }
	    static from(version) {
	        return new Logger(version);
	    }
	}
	Logger.errors = ErrorCode;
	Logger.levels = LogLevel;

	const version$9 = "bytes/5.7.0";

	const logger$c = new Logger(version$9);
	///////////////////////////////
	function isHexable(value) {
	    return !!(value.toHexString);
	}
	function addSlice(array) {
	    if (array.slice) {
	        return array;
	    }
	    array.slice = function () {
	        const args = Array.prototype.slice.call(arguments);
	        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));
	    };
	    return array;
	}
	function isBytesLike(value) {
	    return ((isHexString$1(value) && !(value.length % 2)) || isBytes(value));
	}
	function isInteger(value) {
	    return (typeof (value) === "number" && value == value && (value % 1) === 0);
	}
	function isBytes(value) {
	    if (value == null) {
	        return false;
	    }
	    if (value.constructor === Uint8Array) {
	        return true;
	    }
	    if (typeof (value) === "string") {
	        return false;
	    }
	    if (!isInteger(value.length) || value.length < 0) {
	        return false;
	    }
	    for (let i = 0; i < value.length; i++) {
	        const v = value[i];
	        if (!isInteger(v) || v < 0 || v >= 256) {
	            return false;
	        }
	    }
	    return true;
	}
	function arrayify(value, options) {
	    if (!options) {
	        options = {};
	    }
	    if (typeof (value) === "number") {
	        logger$c.checkSafeUint53(value, "invalid arrayify value");
	        const result = [];
	        while (value) {
	            result.unshift(value & 0xff);
	            value = parseInt(String(value / 256));
	        }
	        if (result.length === 0) {
	            result.push(0);
	        }
	        return addSlice(new Uint8Array(result));
	    }
	    if (options.allowMissingPrefix && typeof (value) === "string" && value.substring(0, 2) !== "0x") {
	        value = "0x" + value;
	    }
	    if (isHexable(value)) {
	        value = value.toHexString();
	    }
	    if (isHexString$1(value)) {
	        let hex = value.substring(2);
	        if (hex.length % 2) {
	            if (options.hexPad === "left") {
	                hex = "0" + hex;
	            }
	            else if (options.hexPad === "right") {
	                hex += "0";
	            }
	            else {
	                logger$c.throwArgumentError("hex data is odd-length", "value", value);
	            }
	        }
	        const result = [];
	        for (let i = 0; i < hex.length; i += 2) {
	            result.push(parseInt(hex.substring(i, i + 2), 16));
	        }
	        return addSlice(new Uint8Array(result));
	    }
	    if (isBytes(value)) {
	        return addSlice(new Uint8Array(value));
	    }
	    return logger$c.throwArgumentError("invalid arrayify value", "value", value);
	}
	function concat(items) {
	    const objects = items.map(item => arrayify(item));
	    const length = objects.reduce((accum, item) => (accum + item.length), 0);
	    const result = new Uint8Array(length);
	    objects.reduce((offset, object) => {
	        result.set(object, offset);
	        return offset + object.length;
	    }, 0);
	    return addSlice(result);
	}
	function stripZeros(value) {
	    let result = arrayify(value);
	    if (result.length === 0) {
	        return result;
	    }
	    // Find the first non-zero entry
	    let start = 0;
	    while (start < result.length && result[start] === 0) {
	        start++;
	    }
	    // If we started with zeros, strip them
	    if (start) {
	        result = result.slice(start);
	    }
	    return result;
	}
	function zeroPad(value, length) {
	    value = arrayify(value);
	    if (value.length > length) {
	        logger$c.throwArgumentError("value out of range", "value", arguments[0]);
	    }
	    const result = new Uint8Array(length);
	    result.set(value, length - value.length);
	    return addSlice(result);
	}
	function isHexString$1(value, length) {
	    if (typeof (value) !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
	        return false;
	    }
	    if (length && value.length !== 2 + 2 * length) {
	        return false;
	    }
	    return true;
	}
	const HexCharacters = "0123456789abcdef";
	function hexlify(value, options) {
	    if (!options) {
	        options = {};
	    }
	    if (typeof (value) === "number") {
	        logger$c.checkSafeUint53(value, "invalid hexlify value");
	        let hex = "";
	        while (value) {
	            hex = HexCharacters[value & 0xf] + hex;
	            value = Math.floor(value / 16);
	        }
	        if (hex.length) {
	            if (hex.length % 2) {
	                hex = "0" + hex;
	            }
	            return "0x" + hex;
	        }
	        return "0x00";
	    }
	    if (typeof (value) === "bigint") {
	        value = value.toString(16);
	        if (value.length % 2) {
	            return ("0x0" + value);
	        }
	        return "0x" + value;
	    }
	    if (options.allowMissingPrefix && typeof (value) === "string" && value.substring(0, 2) !== "0x") {
	        value = "0x" + value;
	    }
	    if (isHexable(value)) {
	        return value.toHexString();
	    }
	    if (isHexString$1(value)) {
	        if (value.length % 2) {
	            if (options.hexPad === "left") {
	                value = "0x0" + value.substring(2);
	            }
	            else if (options.hexPad === "right") {
	                value += "0";
	            }
	            else {
	                logger$c.throwArgumentError("hex data is odd-length", "value", value);
	            }
	        }
	        return value.toLowerCase();
	    }
	    if (isBytes(value)) {
	        let result = "0x";
	        for (let i = 0; i < value.length; i++) {
	            let v = value[i];
	            result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];
	        }
	        return result;
	    }
	    return logger$c.throwArgumentError("invalid hexlify value", "value", value);
	}
	/*
	function unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {
	    if (typeof(value) === "string" && value.length % 2 && value.substring(0, 2) === "0x") {
	        return "0x0" + value.substring(2);
	    }
	    return value;
	}
	*/
	function hexDataLength(data) {
	    if (typeof (data) !== "string") {
	        data = hexlify(data);
	    }
	    else if (!isHexString$1(data) || (data.length % 2)) {
	        return null;
	    }
	    return (data.length - 2) / 2;
	}
	function hexDataSlice(data, offset, endOffset) {
	    if (typeof (data) !== "string") {
	        data = hexlify(data);
	    }
	    else if (!isHexString$1(data) || (data.length % 2)) {
	        logger$c.throwArgumentError("invalid hexData", "value", data);
	    }
	    offset = 2 + 2 * offset;
	    if (endOffset != null) {
	        return "0x" + data.substring(offset, 2 + 2 * endOffset);
	    }
	    return "0x" + data.substring(offset);
	}
	function hexConcat(items) {
	    let result = "0x";
	    items.forEach((item) => {
	        result += hexlify(item).substring(2);
	    });
	    return result;
	}
	function hexValue(value) {
	    const trimmed = hexStripZeros(hexlify(value, { hexPad: "left" }));
	    if (trimmed === "0x") {
	        return "0x0";
	    }
	    return trimmed;
	}
	function hexStripZeros(value) {
	    if (typeof (value) !== "string") {
	        value = hexlify(value);
	    }
	    if (!isHexString$1(value)) {
	        logger$c.throwArgumentError("invalid hex string", "value", value);
	    }
	    value = value.substring(2);
	    let offset = 0;
	    while (offset < value.length && value[offset] === "0") {
	        offset++;
	    }
	    return "0x" + value.substring(offset);
	}
	function hexZeroPad(value, length) {
	    if (typeof (value) !== "string") {
	        value = hexlify(value);
	    }
	    else if (!isHexString$1(value)) {
	        logger$c.throwArgumentError("invalid hex string", "value", value);
	    }
	    if (value.length > 2 * length + 2) {
	        logger$c.throwArgumentError("value out of range", "value", arguments[1]);
	    }
	    while (value.length < 2 * length + 2) {
	        value = "0x0" + value.substring(2);
	    }
	    return value;
	}
	function splitSignature(signature) {
	    const result = {
	        r: "0x",
	        s: "0x",
	        _vs: "0x",
	        recoveryParam: 0,
	        v: 0,
	        yParityAndS: "0x",
	        compact: "0x"
	    };
	    if (isBytesLike(signature)) {
	        let bytes = arrayify(signature);
	        // Get the r, s and v
	        if (bytes.length === 64) {
	            // EIP-2098; pull the v from the top bit of s and clear it
	            result.v = 27 + (bytes[32] >> 7);
	            bytes[32] &= 0x7f;
	            result.r = hexlify(bytes.slice(0, 32));
	            result.s = hexlify(bytes.slice(32, 64));
	        }
	        else if (bytes.length === 65) {
	            result.r = hexlify(bytes.slice(0, 32));
	            result.s = hexlify(bytes.slice(32, 64));
	            result.v = bytes[64];
	        }
	        else {
	            logger$c.throwArgumentError("invalid signature string", "signature", signature);
	        }
	        // Allow a recid to be used as the v
	        if (result.v < 27) {
	            if (result.v === 0 || result.v === 1) {
	                result.v += 27;
	            }
	            else {
	                logger$c.throwArgumentError("signature invalid v byte", "signature", signature);
	            }
	        }
	        // Compute recoveryParam from v
	        result.recoveryParam = 1 - (result.v % 2);
	        // Compute _vs from recoveryParam and s
	        if (result.recoveryParam) {
	            bytes[32] |= 0x80;
	        }
	        result._vs = hexlify(bytes.slice(32, 64));
	    }
	    else {
	        result.r = signature.r;
	        result.s = signature.s;
	        result.v = signature.v;
	        result.recoveryParam = signature.recoveryParam;
	        result._vs = signature._vs;
	        // If the _vs is available, use it to populate missing s, v and recoveryParam
	        // and verify non-missing s, v and recoveryParam
	        if (result._vs != null) {
	            const vs = zeroPad(arrayify(result._vs), 32);
	            result._vs = hexlify(vs);
	            // Set or check the recid
	            const recoveryParam = ((vs[0] >= 128) ? 1 : 0);
	            if (result.recoveryParam == null) {
	                result.recoveryParam = recoveryParam;
	            }
	            else if (result.recoveryParam !== recoveryParam) {
	                logger$c.throwArgumentError("signature recoveryParam mismatch _vs", "signature", signature);
	            }
	            // Set or check the s
	            vs[0] &= 0x7f;
	            const s = hexlify(vs);
	            if (result.s == null) {
	                result.s = s;
	            }
	            else if (result.s !== s) {
	                logger$c.throwArgumentError("signature v mismatch _vs", "signature", signature);
	            }
	        }
	        // Use recid and v to populate each other
	        if (result.recoveryParam == null) {
	            if (result.v == null) {
	                logger$c.throwArgumentError("signature missing v and recoveryParam", "signature", signature);
	            }
	            else if (result.v === 0 || result.v === 1) {
	                result.recoveryParam = result.v;
	            }
	            else {
	                result.recoveryParam = 1 - (result.v % 2);
	            }
	        }
	        else {
	            if (result.v == null) {
	                result.v = 27 + result.recoveryParam;
	            }
	            else {
	                const recId = (result.v === 0 || result.v === 1) ? result.v : (1 - (result.v % 2));
	                if (result.recoveryParam !== recId) {
	                    logger$c.throwArgumentError("signature recoveryParam mismatch v", "signature", signature);
	                }
	            }
	        }
	        if (result.r == null || !isHexString$1(result.r)) {
	            logger$c.throwArgumentError("signature missing or invalid r", "signature", signature);
	        }
	        else {
	            result.r = hexZeroPad(result.r, 32);
	        }
	        if (result.s == null || !isHexString$1(result.s)) {
	            logger$c.throwArgumentError("signature missing or invalid s", "signature", signature);
	        }
	        else {
	            result.s = hexZeroPad(result.s, 32);
	        }
	        const vs = arrayify(result.s);
	        if (vs[0] >= 128) {
	            logger$c.throwArgumentError("signature s out of range", "signature", signature);
	        }
	        if (result.recoveryParam) {
	            vs[0] |= 0x80;
	        }
	        const _vs = hexlify(vs);
	        if (result._vs) {
	            if (!isHexString$1(result._vs)) {
	                logger$c.throwArgumentError("signature invalid _vs", "signature", signature);
	            }
	            result._vs = hexZeroPad(result._vs, 32);
	        }
	        // Set or check the _vs
	        if (result._vs == null) {
	            result._vs = _vs;
	        }
	        else if (result._vs !== _vs) {
	            logger$c.throwArgumentError("signature _vs mismatch v and s", "signature", signature);
	        }
	    }
	    result.yParityAndS = result._vs;
	    result.compact = result.r + result.yParityAndS.substring(2);
	    return result;
	}
	function joinSignature(signature) {
	    signature = splitSignature(signature);
	    return hexlify(concat([
	        signature.r,
	        signature.s,
	        (signature.recoveryParam ? "0x1c" : "0x1b")
	    ]));
	}

	var lib_esm$5 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		arrayify: arrayify,
		concat: concat,
		hexConcat: hexConcat,
		hexDataLength: hexDataLength,
		hexDataSlice: hexDataSlice,
		hexStripZeros: hexStripZeros,
		hexValue: hexValue,
		hexZeroPad: hexZeroPad,
		hexlify: hexlify,
		isBytes: isBytes,
		isBytesLike: isBytesLike,
		isHexString: isHexString$1,
		joinSignature: joinSignature,
		splitSignature: splitSignature,
		stripZeros: stripZeros,
		zeroPad: zeroPad
	});

	var bnExports$1 = {};
	var bn$1 = {
	  get exports(){ return bnExports$1; },
	  set exports(v){ bnExports$1 = v; },
	};

	var lookup$1 = [];
	var revLookup$1 = [];
	var Arr$1 = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
	var inited$1 = false;
	function init$1 () {
	  inited$1 = true;
	  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
	  for (var i = 0, len = code.length; i < len; ++i) {
	    lookup$1[i] = code[i];
	    revLookup$1[code.charCodeAt(i)] = i;
	  }

	  revLookup$1['-'.charCodeAt(0)] = 62;
	  revLookup$1['_'.charCodeAt(0)] = 63;
	}

	function toByteArray$1 (b64) {
	  if (!inited$1) {
	    init$1();
	  }
	  var i, j, l, tmp, placeHolders, arr;
	  var len = b64.length;

	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4')
	  }

	  // the number of equal signs (place holders)
	  // if there are two placeholders, than the two characters before it
	  // represent one byte
	  // if there is only one, then the three characters before it represent 2 bytes
	  // this is just a cheap hack to not do indexOf twice
	  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

	  // base64 is 4/3 + up to two characters of the original data
	  arr = new Arr$1(len * 3 / 4 - placeHolders);

	  // if there are placeholders, only get up to the last complete 4 chars
	  l = placeHolders > 0 ? len - 4 : len;

	  var L = 0;

	  for (i = 0, j = 0; i < l; i += 4, j += 3) {
	    tmp = (revLookup$1[b64.charCodeAt(i)] << 18) | (revLookup$1[b64.charCodeAt(i + 1)] << 12) | (revLookup$1[b64.charCodeAt(i + 2)] << 6) | revLookup$1[b64.charCodeAt(i + 3)];
	    arr[L++] = (tmp >> 16) & 0xFF;
	    arr[L++] = (tmp >> 8) & 0xFF;
	    arr[L++] = tmp & 0xFF;
	  }

	  if (placeHolders === 2) {
	    tmp = (revLookup$1[b64.charCodeAt(i)] << 2) | (revLookup$1[b64.charCodeAt(i + 1)] >> 4);
	    arr[L++] = tmp & 0xFF;
	  } else if (placeHolders === 1) {
	    tmp = (revLookup$1[b64.charCodeAt(i)] << 10) | (revLookup$1[b64.charCodeAt(i + 1)] << 4) | (revLookup$1[b64.charCodeAt(i + 2)] >> 2);
	    arr[L++] = (tmp >> 8) & 0xFF;
	    arr[L++] = tmp & 0xFF;
	  }

	  return arr
	}

	function tripletToBase64$1 (num) {
	  return lookup$1[num >> 18 & 0x3F] + lookup$1[num >> 12 & 0x3F] + lookup$1[num >> 6 & 0x3F] + lookup$1[num & 0x3F]
	}

	function encodeChunk$1 (uint8, start, end) {
	  var tmp;
	  var output = [];
	  for (var i = start; i < end; i += 3) {
	    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
	    output.push(tripletToBase64$1(tmp));
	  }
	  return output.join('')
	}

	function fromByteArray$1 (uint8) {
	  if (!inited$1) {
	    init$1();
	  }
	  var tmp;
	  var len = uint8.length;
	  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
	  var output = '';
	  var parts = [];
	  var maxChunkLength = 16383; // must be multiple of 3

	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk$1(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
	  }

	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1];
	    output += lookup$1[tmp >> 2];
	    output += lookup$1[(tmp << 4) & 0x3F];
	    output += '==';
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);
	    output += lookup$1[tmp >> 10];
	    output += lookup$1[(tmp >> 4) & 0x3F];
	    output += lookup$1[(tmp << 2) & 0x3F];
	    output += '=';
	  }

	  parts.push(output);

	  return parts.join('')
	}

	function read$1 (buffer, offset, isLE, mLen, nBytes) {
	  var e, m;
	  var eLen = nBytes * 8 - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var nBits = -7;
	  var i = isLE ? (nBytes - 1) : 0;
	  var d = isLE ? -1 : 1;
	  var s = buffer[offset + i];

	  i += d;

	  e = s & ((1 << (-nBits)) - 1);
	  s >>= (-nBits);
	  nBits += eLen;
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1);
	  e >>= (-nBits);
	  nBits += mLen;
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias;
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen);
	    e = e - eBias;
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}

	function write$1 (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c;
	  var eLen = nBytes * 8 - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
	  var i = isLE ? 0 : (nBytes - 1);
	  var d = isLE ? 1 : -1;
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

	  value = Math.abs(value);

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0;
	    e = eMax;
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2);
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--;
	      c *= 2;
	    }
	    if (e + eBias >= 1) {
	      value += rt / c;
	    } else {
	      value += rt * Math.pow(2, 1 - eBias);
	    }
	    if (value * c >= 2) {
	      e++;
	      c /= 2;
	    }

	    if (e + eBias >= eMax) {
	      m = 0;
	      e = eMax;
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen);
	      e = e + eBias;
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
	      e = 0;
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m;
	  eLen += mLen;
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128;
	}

	var toString$1 = {}.toString;

	var isArray$2 = Array.isArray || function (arr) {
	  return toString$1.call(arr) == '[object Array]';
	};

	/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */

	var INSPECT_MAX_BYTES$1 = 50;

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.

	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer$e.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined
	  ? global$1.TYPED_ARRAY_SUPPORT
	  : true;

	/*
	 * Export kMaxLength after typed array support is determined.
	 */
	var _kMaxLength = kMaxLength$1();

	function kMaxLength$1 () {
	  return Buffer$e.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}

	function createBuffer$1 (that, length) {
	  if (kMaxLength$1() < length) {
	    throw new RangeError('Invalid typed array length')
	  }
	  if (Buffer$e.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = new Uint8Array(length);
	    that.__proto__ = Buffer$e.prototype;
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    if (that === null) {
	      that = new Buffer$e(length);
	    }
	    that.length = length;
	  }

	  return that
	}

	/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */

	function Buffer$e (arg, encodingOrOffset, length) {
	  if (!Buffer$e.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer$e)) {
	    return new Buffer$e(arg, encodingOrOffset, length)
	  }

	  // Common case.
	  if (typeof arg === 'number') {
	    if (typeof encodingOrOffset === 'string') {
	      throw new Error(
	        'If encoding is specified then the first argument must be a string'
	      )
	    }
	    return allocUnsafe$1(this, arg)
	  }
	  return from$1(this, arg, encodingOrOffset, length)
	}

	Buffer$e.poolSize = 8192; // not used by this implementation

	// TODO: Legacy, not needed anymore. Remove in next major version.
	Buffer$e._augment = function (arr) {
	  arr.__proto__ = Buffer$e.prototype;
	  return arr
	};

	function from$1 (that, value, encodingOrOffset, length) {
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number')
	  }

	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    return fromArrayBuffer$1(that, value, encodingOrOffset, length)
	  }

	  if (typeof value === 'string') {
	    return fromString$1(that, value, encodingOrOffset)
	  }

	  return fromObject$1(that, value)
	}

	/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/
	Buffer$e.from = function (value, encodingOrOffset, length) {
	  return from$1(null, value, encodingOrOffset, length)
	};

	if (Buffer$e.TYPED_ARRAY_SUPPORT) {
	  Buffer$e.prototype.__proto__ = Uint8Array.prototype;
	  Buffer$e.__proto__ = Uint8Array;
	}

	function assertSize$1 (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be a number')
	  } else if (size < 0) {
	    throw new RangeError('"size" argument must not be negative')
	  }
	}

	function alloc$1 (that, size, fill, encoding) {
	  assertSize$1(size);
	  if (size <= 0) {
	    return createBuffer$1(that, size)
	  }
	  if (fill !== undefined) {
	    // Only pay attention to encoding if it's a string. This
	    // prevents accidentally sending in a number that would
	    // be interpretted as a start offset.
	    return typeof encoding === 'string'
	      ? createBuffer$1(that, size).fill(fill, encoding)
	      : createBuffer$1(that, size).fill(fill)
	  }
	  return createBuffer$1(that, size)
	}

	/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/
	Buffer$e.alloc = function (size, fill, encoding) {
	  return alloc$1(null, size, fill, encoding)
	};

	function allocUnsafe$1 (that, size) {
	  assertSize$1(size);
	  that = createBuffer$1(that, size < 0 ? 0 : checked$1(size) | 0);
	  if (!Buffer$e.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < size; ++i) {
	      that[i] = 0;
	    }
	  }
	  return that
	}

	/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */
	Buffer$e.allocUnsafe = function (size) {
	  return allocUnsafe$1(null, size)
	};
	/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */
	Buffer$e.allocUnsafeSlow = function (size) {
	  return allocUnsafe$1(null, size)
	};

	function fromString$1 (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
	    encoding = 'utf8';
	  }

	  if (!Buffer$e.isEncoding(encoding)) {
	    throw new TypeError('"encoding" must be a valid string encoding')
	  }

	  var length = byteLength$1(string, encoding) | 0;
	  that = createBuffer$1(that, length);

	  var actual = that.write(string, encoding);

	  if (actual !== length) {
	    // Writing a hex string, for example, that contains invalid characters will
	    // cause everything after the first invalid character to be ignored. (e.g.
	    // 'abxxcd' will be treated as 'ab')
	    that = that.slice(0, actual);
	  }

	  return that
	}

	function fromArrayLike$1 (that, array) {
	  var length = array.length < 0 ? 0 : checked$1(array.length) | 0;
	  that = createBuffer$1(that, length);
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255;
	  }
	  return that
	}

	function fromArrayBuffer$1 (that, array, byteOffset, length) {
	  array.byteLength; // this throws if `array` is not a valid ArrayBuffer

	  if (byteOffset < 0 || array.byteLength < byteOffset) {
	    throw new RangeError('\'offset\' is out of bounds')
	  }

	  if (array.byteLength < byteOffset + (length || 0)) {
	    throw new RangeError('\'length\' is out of bounds')
	  }

	  if (byteOffset === undefined && length === undefined) {
	    array = new Uint8Array(array);
	  } else if (length === undefined) {
	    array = new Uint8Array(array, byteOffset);
	  } else {
	    array = new Uint8Array(array, byteOffset, length);
	  }

	  if (Buffer$e.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = array;
	    that.__proto__ = Buffer$e.prototype;
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromArrayLike$1(that, array);
	  }
	  return that
	}

	function fromObject$1 (that, obj) {
	  if (internalIsBuffer$1(obj)) {
	    var len = checked$1(obj.length) | 0;
	    that = createBuffer$1(that, len);

	    if (that.length === 0) {
	      return that
	    }

	    obj.copy(that, 0, 0, len);
	    return that
	  }

	  if (obj) {
	    if ((typeof ArrayBuffer !== 'undefined' &&
	        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
	      if (typeof obj.length !== 'number' || isnan$1(obj.length)) {
	        return createBuffer$1(that, 0)
	      }
	      return fromArrayLike$1(that, obj)
	    }

	    if (obj.type === 'Buffer' && isArray$2(obj.data)) {
	      return fromArrayLike$1(that, obj.data)
	    }
	  }

	  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
	}

	function checked$1 (length) {
	  // Note: cannot use `length < kMaxLength()` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength$1()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength$1().toString(16) + ' bytes')
	  }
	  return length | 0
	}

	function SlowBuffer (length) {
	  if (+length != length) { // eslint-disable-line eqeqeq
	    length = 0;
	  }
	  return Buffer$e.alloc(+length)
	}
	Buffer$e.isBuffer = isBuffer$2;
	function internalIsBuffer$1 (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer$e.compare = function compare (a, b) {
	  if (!internalIsBuffer$1(a) || !internalIsBuffer$1(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }

	  if (a === b) return 0

	  var x = a.length;
	  var y = b.length;

	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i];
	      y = b[i];
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	};

	Buffer$e.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'latin1':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	};

	Buffer$e.concat = function concat (list, length) {
	  if (!isArray$2(list)) {
	    throw new TypeError('"list" argument must be an Array of Buffers')
	  }

	  if (list.length === 0) {
	    return Buffer$e.alloc(0)
	  }

	  var i;
	  if (length === undefined) {
	    length = 0;
	    for (i = 0; i < list.length; ++i) {
	      length += list[i].length;
	    }
	  }

	  var buffer = Buffer$e.allocUnsafe(length);
	  var pos = 0;
	  for (i = 0; i < list.length; ++i) {
	    var buf = list[i];
	    if (!internalIsBuffer$1(buf)) {
	      throw new TypeError('"list" argument must be an Array of Buffers')
	    }
	    buf.copy(buffer, pos);
	    pos += buf.length;
	  }
	  return buffer
	};

	function byteLength$1 (string, encoding) {
	  if (internalIsBuffer$1(string)) {
	    return string.length
	  }
	  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
	      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
	    return string.byteLength
	  }
	  if (typeof string !== 'string') {
	    string = '' + string;
	  }

	  var len = string.length;
	  if (len === 0) return 0

	  // Use a for loop to avoid recursion
	  var loweredCase = false;
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return len
	      case 'utf8':
	      case 'utf-8':
	      case undefined:
	        return utf8ToBytes$1(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes$1(string).length
	      default:
	        if (loweredCase) return utf8ToBytes$1(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase();
	        loweredCase = true;
	    }
	  }
	}
	Buffer$e.byteLength = byteLength$1;

	function slowToString$1 (encoding, start, end) {
	  var loweredCase = false;

	  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
	  // property of a typed array.

	  // This behaves neither like String nor Uint8Array in that we set start/end
	  // to their upper/lower bounds if the value passed is out of range.
	  // undefined is handled specially as per ECMA-262 6th Edition,
	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
	  if (start === undefined || start < 0) {
	    start = 0;
	  }
	  // Return early if start > this.length. Done here to prevent potential uint32
	  // coercion fail below.
	  if (start > this.length) {
	    return ''
	  }

	  if (end === undefined || end > this.length) {
	    end = this.length;
	  }

	  if (end <= 0) {
	    return ''
	  }

	  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
	  end >>>= 0;
	  start >>>= 0;

	  if (end <= start) {
	    return ''
	  }

	  if (!encoding) encoding = 'utf8';

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice$1(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice$1(this, start, end)

	      case 'ascii':
	        return asciiSlice$1(this, start, end)

	      case 'latin1':
	      case 'binary':
	        return latin1Slice$1(this, start, end)

	      case 'base64':
	        return base64Slice$1(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice$1(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase();
	        loweredCase = true;
	    }
	  }
	}

	// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
	// Buffer instances.
	Buffer$e.prototype._isBuffer = true;

	function swap$1 (b, n, m) {
	  var i = b[n];
	  b[n] = b[m];
	  b[m] = i;
	}

	Buffer$e.prototype.swap16 = function swap16 () {
	  var len = this.length;
	  if (len % 2 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 16-bits')
	  }
	  for (var i = 0; i < len; i += 2) {
	    swap$1(this, i, i + 1);
	  }
	  return this
	};

	Buffer$e.prototype.swap32 = function swap32 () {
	  var len = this.length;
	  if (len % 4 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 32-bits')
	  }
	  for (var i = 0; i < len; i += 4) {
	    swap$1(this, i, i + 3);
	    swap$1(this, i + 1, i + 2);
	  }
	  return this
	};

	Buffer$e.prototype.swap64 = function swap64 () {
	  var len = this.length;
	  if (len % 8 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 64-bits')
	  }
	  for (var i = 0; i < len; i += 8) {
	    swap$1(this, i, i + 7);
	    swap$1(this, i + 1, i + 6);
	    swap$1(this, i + 2, i + 5);
	    swap$1(this, i + 3, i + 4);
	  }
	  return this
	};

	Buffer$e.prototype.toString = function toString () {
	  var length = this.length | 0;
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice$1(this, 0, length)
	  return slowToString$1.apply(this, arguments)
	};

	Buffer$e.prototype.equals = function equals (b) {
	  if (!internalIsBuffer$1(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer$e.compare(this, b) === 0
	};

	Buffer$e.prototype.inspect = function inspect () {
	  var str = '';
	  var max = INSPECT_MAX_BYTES$1;
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
	    if (this.length > max) str += ' ... ';
	  }
	  return '<Buffer ' + str + '>'
	};

	Buffer$e.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
	  if (!internalIsBuffer$1(target)) {
	    throw new TypeError('Argument must be a Buffer')
	  }

	  if (start === undefined) {
	    start = 0;
	  }
	  if (end === undefined) {
	    end = target ? target.length : 0;
	  }
	  if (thisStart === undefined) {
	    thisStart = 0;
	  }
	  if (thisEnd === undefined) {
	    thisEnd = this.length;
	  }

	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	    throw new RangeError('out of range index')
	  }

	  if (thisStart >= thisEnd && start >= end) {
	    return 0
	  }
	  if (thisStart >= thisEnd) {
	    return -1
	  }
	  if (start >= end) {
	    return 1
	  }

	  start >>>= 0;
	  end >>>= 0;
	  thisStart >>>= 0;
	  thisEnd >>>= 0;

	  if (this === target) return 0

	  var x = thisEnd - thisStart;
	  var y = end - start;
	  var len = Math.min(x, y);

	  var thisCopy = this.slice(thisStart, thisEnd);
	  var targetCopy = target.slice(start, end);

	  for (var i = 0; i < len; ++i) {
	    if (thisCopy[i] !== targetCopy[i]) {
	      x = thisCopy[i];
	      y = targetCopy[i];
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	};

	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf
	function bidirectionalIndexOf$1 (buffer, val, byteOffset, encoding, dir) {
	  // Empty buffer means no match
	  if (buffer.length === 0) return -1

	  // Normalize byteOffset
	  if (typeof byteOffset === 'string') {
	    encoding = byteOffset;
	    byteOffset = 0;
	  } else if (byteOffset > 0x7fffffff) {
	    byteOffset = 0x7fffffff;
	  } else if (byteOffset < -0x80000000) {
	    byteOffset = -0x80000000;
	  }
	  byteOffset = +byteOffset;  // Coerce to Number.
	  if (isNaN(byteOffset)) {
	    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
	    byteOffset = dir ? 0 : (buffer.length - 1);
	  }

	  // Normalize byteOffset: negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
	  if (byteOffset >= buffer.length) {
	    if (dir) return -1
	    else byteOffset = buffer.length - 1;
	  } else if (byteOffset < 0) {
	    if (dir) byteOffset = 0;
	    else return -1
	  }

	  // Normalize val
	  if (typeof val === 'string') {
	    val = Buffer$e.from(val, encoding);
	  }

	  // Finally, search either indexOf (if dir is true) or lastIndexOf
	  if (internalIsBuffer$1(val)) {
	    // Special case: looking for empty string/buffer always fails
	    if (val.length === 0) {
	      return -1
	    }
	    return arrayIndexOf$1(buffer, val, byteOffset, encoding, dir)
	  } else if (typeof val === 'number') {
	    val = val & 0xFF; // Search for a byte value [0-255]
	    if (Buffer$e.TYPED_ARRAY_SUPPORT &&
	        typeof Uint8Array.prototype.indexOf === 'function') {
	      if (dir) {
	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
	      } else {
	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
	      }
	    }
	    return arrayIndexOf$1(buffer, [ val ], byteOffset, encoding, dir)
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	function arrayIndexOf$1 (arr, val, byteOffset, encoding, dir) {
	  var indexSize = 1;
	  var arrLength = arr.length;
	  var valLength = val.length;

	  if (encoding !== undefined) {
	    encoding = String(encoding).toLowerCase();
	    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
	        encoding === 'utf16le' || encoding === 'utf-16le') {
	      if (arr.length < 2 || val.length < 2) {
	        return -1
	      }
	      indexSize = 2;
	      arrLength /= 2;
	      valLength /= 2;
	      byteOffset /= 2;
	    }
	  }

	  function read (buf, i) {
	    if (indexSize === 1) {
	      return buf[i]
	    } else {
	      return buf.readUInt16BE(i * indexSize)
	    }
	  }

	  var i;
	  if (dir) {
	    var foundIndex = -1;
	    for (i = byteOffset; i < arrLength; i++) {
	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	        if (foundIndex === -1) foundIndex = i;
	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
	      } else {
	        if (foundIndex !== -1) i -= i - foundIndex;
	        foundIndex = -1;
	      }
	    }
	  } else {
	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
	    for (i = byteOffset; i >= 0; i--) {
	      var found = true;
	      for (var j = 0; j < valLength; j++) {
	        if (read(arr, i + j) !== read(val, j)) {
	          found = false;
	          break
	        }
	      }
	      if (found) return i
	    }
	  }

	  return -1
	}

	Buffer$e.prototype.includes = function includes (val, byteOffset, encoding) {
	  return this.indexOf(val, byteOffset, encoding) !== -1
	};

	Buffer$e.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf$1(this, val, byteOffset, encoding, true)
	};

	Buffer$e.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf$1(this, val, byteOffset, encoding, false)
	};

	function hexWrite$1 (buf, string, offset, length) {
	  offset = Number(offset) || 0;
	  var remaining = buf.length - offset;
	  if (!length) {
	    length = remaining;
	  } else {
	    length = Number(length);
	    if (length > remaining) {
	      length = remaining;
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length;
	  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2;
	  }
	  for (var i = 0; i < length; ++i) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16);
	    if (isNaN(parsed)) return i
	    buf[offset + i] = parsed;
	  }
	  return i
	}

	function utf8Write$1 (buf, string, offset, length) {
	  return blitBuffer$1(utf8ToBytes$1(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite$1 (buf, string, offset, length) {
	  return blitBuffer$1(asciiToBytes$1(string), buf, offset, length)
	}

	function latin1Write$1 (buf, string, offset, length) {
	  return asciiWrite$1(buf, string, offset, length)
	}

	function base64Write$1 (buf, string, offset, length) {
	  return blitBuffer$1(base64ToBytes$1(string), buf, offset, length)
	}

	function ucs2Write$1 (buf, string, offset, length) {
	  return blitBuffer$1(utf16leToBytes$1(string, buf.length - offset), buf, offset, length)
	}

	Buffer$e.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8';
	    length = this.length;
	    offset = 0;
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset;
	    length = this.length;
	    offset = 0;
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0;
	    if (isFinite(length)) {
	      length = length | 0;
	      if (encoding === undefined) encoding = 'utf8';
	    } else {
	      encoding = length;
	      length = undefined;
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    throw new Error(
	      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
	    )
	  }

	  var remaining = this.length - offset;
	  if (length === undefined || length > remaining) length = remaining;

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('Attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8';

	  var loweredCase = false;
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite$1(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write$1(this, string, offset, length)

	      case 'ascii':
	        return asciiWrite$1(this, string, offset, length)

	      case 'latin1':
	      case 'binary':
	        return latin1Write$1(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write$1(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write$1(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase();
	        loweredCase = true;
	    }
	  }
	};

	Buffer$e.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	};

	function base64Slice$1 (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return fromByteArray$1(buf)
	  } else {
	    return fromByteArray$1(buf.slice(start, end))
	  }
	}

	function utf8Slice$1 (buf, start, end) {
	  end = Math.min(buf.length, end);
	  var res = [];

	  var i = start;
	  while (i < end) {
	    var firstByte = buf[i];
	    var codePoint = null;
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1;

	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint;

	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte;
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1];
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint;
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1];
	          thirdByte = buf[i + 2];
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint;
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1];
	          thirdByte = buf[i + 2];
	          fourthByte = buf[i + 3];
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint;
	            }
	          }
	      }
	    }

	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD;
	      bytesPerSequence = 1;
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000;
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
	      codePoint = 0xDC00 | codePoint & 0x3FF;
	    }

	    res.push(codePoint);
	    i += bytesPerSequence;
	  }

	  return decodeCodePointsArray$1(res)
	}

	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH$1 = 0x1000;

	function decodeCodePointsArray$1 (codePoints) {
	  var len = codePoints.length;
	  if (len <= MAX_ARGUMENTS_LENGTH$1) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }

	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = '';
	  var i = 0;
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH$1)
	    );
	  }
	  return res
	}

	function asciiSlice$1 (buf, start, end) {
	  var ret = '';
	  end = Math.min(buf.length, end);

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i] & 0x7F);
	  }
	  return ret
	}

	function latin1Slice$1 (buf, start, end) {
	  var ret = '';
	  end = Math.min(buf.length, end);

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i]);
	  }
	  return ret
	}

	function hexSlice$1 (buf, start, end) {
	  var len = buf.length;

	  if (!start || start < 0) start = 0;
	  if (!end || end < 0 || end > len) end = len;

	  var out = '';
	  for (var i = start; i < end; ++i) {
	    out += toHex$3(buf[i]);
	  }
	  return out
	}

	function utf16leSlice$1 (buf, start, end) {
	  var bytes = buf.slice(start, end);
	  var res = '';
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
	  }
	  return res
	}

	Buffer$e.prototype.slice = function slice (start, end) {
	  var len = this.length;
	  start = ~~start;
	  end = end === undefined ? len : ~~end;

	  if (start < 0) {
	    start += len;
	    if (start < 0) start = 0;
	  } else if (start > len) {
	    start = len;
	  }

	  if (end < 0) {
	    end += len;
	    if (end < 0) end = 0;
	  } else if (end > len) {
	    end = len;
	  }

	  if (end < start) end = start;

	  var newBuf;
	  if (Buffer$e.TYPED_ARRAY_SUPPORT) {
	    newBuf = this.subarray(start, end);
	    newBuf.__proto__ = Buffer$e.prototype;
	  } else {
	    var sliceLen = end - start;
	    newBuf = new Buffer$e(sliceLen, undefined);
	    for (var i = 0; i < sliceLen; ++i) {
	      newBuf[i] = this[i + start];
	    }
	  }

	  return newBuf
	};

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset$1 (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer$e.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) checkOffset$1(offset, byteLength, this.length);

	  var val = this[offset];
	  var mul = 1;
	  var i = 0;
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul;
	  }

	  return val
	};

	Buffer$e.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) {
	    checkOffset$1(offset, byteLength, this.length);
	  }

	  var val = this[offset + --byteLength];
	  var mul = 1;
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul;
	  }

	  return val
	};

	Buffer$e.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset$1(offset, 1, this.length);
	  return this[offset]
	};

	Buffer$e.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset$1(offset, 2, this.length);
	  return this[offset] | (this[offset + 1] << 8)
	};

	Buffer$e.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset$1(offset, 2, this.length);
	  return (this[offset] << 8) | this[offset + 1]
	};

	Buffer$e.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset$1(offset, 4, this.length);

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	};

	Buffer$e.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset$1(offset, 4, this.length);

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	};

	Buffer$e.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) checkOffset$1(offset, byteLength, this.length);

	  var val = this[offset];
	  var mul = 1;
	  var i = 0;
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul;
	  }
	  mul *= 0x80;

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

	  return val
	};

	Buffer$e.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) checkOffset$1(offset, byteLength, this.length);

	  var i = byteLength;
	  var mul = 1;
	  var val = this[offset + --i];
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul;
	  }
	  mul *= 0x80;

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

	  return val
	};

	Buffer$e.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset$1(offset, 1, this.length);
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	};

	Buffer$e.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset$1(offset, 2, this.length);
	  var val = this[offset] | (this[offset + 1] << 8);
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	};

	Buffer$e.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset$1(offset, 2, this.length);
	  var val = this[offset + 1] | (this[offset] << 8);
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	};

	Buffer$e.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset$1(offset, 4, this.length);

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	};

	Buffer$e.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset$1(offset, 4, this.length);

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	};

	Buffer$e.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset$1(offset, 4, this.length);
	  return read$1(this, offset, true, 23, 4)
	};

	Buffer$e.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset$1(offset, 4, this.length);
	  return read$1(this, offset, false, 23, 4)
	};

	Buffer$e.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset$1(offset, 8, this.length);
	  return read$1(this, offset, true, 52, 8)
	};

	Buffer$e.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset$1(offset, 8, this.length);
	  return read$1(this, offset, false, 52, 8)
	};

	function checkInt$1 (buf, value, offset, ext, max, min) {
	  if (!internalIsBuffer$1(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	}

	Buffer$e.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
	    checkInt$1(this, value, offset, byteLength, maxBytes, 0);
	  }

	  var mul = 1;
	  var i = 0;
	  this[offset] = value & 0xFF;
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer$e.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
	    checkInt$1(this, value, offset, byteLength, maxBytes, 0);
	  }

	  var i = byteLength - 1;
	  var mul = 1;
	  this[offset + i] = value & 0xFF;
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer$e.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt$1(this, value, offset, 1, 0xff, 0);
	  if (!Buffer$e.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
	  this[offset] = (value & 0xff);
	  return offset + 1
	};

	function objectWriteUInt16$1 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1;
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8;
	  }
	}

	Buffer$e.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt$1(this, value, offset, 2, 0xffff, 0);
	  if (Buffer$e.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff);
	    this[offset + 1] = (value >>> 8);
	  } else {
	    objectWriteUInt16$1(this, value, offset, true);
	  }
	  return offset + 2
	};

	Buffer$e.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt$1(this, value, offset, 2, 0xffff, 0);
	  if (Buffer$e.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8);
	    this[offset + 1] = (value & 0xff);
	  } else {
	    objectWriteUInt16$1(this, value, offset, false);
	  }
	  return offset + 2
	};

	function objectWriteUInt32$1 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1;
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;
	  }
	}

	Buffer$e.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt$1(this, value, offset, 4, 0xffffffff, 0);
	  if (Buffer$e.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24);
	    this[offset + 2] = (value >>> 16);
	    this[offset + 1] = (value >>> 8);
	    this[offset] = (value & 0xff);
	  } else {
	    objectWriteUInt32$1(this, value, offset, true);
	  }
	  return offset + 4
	};

	Buffer$e.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt$1(this, value, offset, 4, 0xffffffff, 0);
	  if (Buffer$e.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24);
	    this[offset + 1] = (value >>> 16);
	    this[offset + 2] = (value >>> 8);
	    this[offset + 3] = (value & 0xff);
	  } else {
	    objectWriteUInt32$1(this, value, offset, false);
	  }
	  return offset + 4
	};

	Buffer$e.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1);

	    checkInt$1(this, value, offset, byteLength, limit - 1, -limit);
	  }

	  var i = 0;
	  var mul = 1;
	  var sub = 0;
	  this[offset] = value & 0xFF;
	  while (++i < byteLength && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	      sub = 1;
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer$e.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1);

	    checkInt$1(this, value, offset, byteLength, limit - 1, -limit);
	  }

	  var i = byteLength - 1;
	  var mul = 1;
	  var sub = 0;
	  this[offset + i] = value & 0xFF;
	  while (--i >= 0 && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	      sub = 1;
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer$e.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt$1(this, value, offset, 1, 0x7f, -0x80);
	  if (!Buffer$e.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
	  if (value < 0) value = 0xff + value + 1;
	  this[offset] = (value & 0xff);
	  return offset + 1
	};

	Buffer$e.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt$1(this, value, offset, 2, 0x7fff, -0x8000);
	  if (Buffer$e.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff);
	    this[offset + 1] = (value >>> 8);
	  } else {
	    objectWriteUInt16$1(this, value, offset, true);
	  }
	  return offset + 2
	};

	Buffer$e.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt$1(this, value, offset, 2, 0x7fff, -0x8000);
	  if (Buffer$e.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8);
	    this[offset + 1] = (value & 0xff);
	  } else {
	    objectWriteUInt16$1(this, value, offset, false);
	  }
	  return offset + 2
	};

	Buffer$e.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt$1(this, value, offset, 4, 0x7fffffff, -0x80000000);
	  if (Buffer$e.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff);
	    this[offset + 1] = (value >>> 8);
	    this[offset + 2] = (value >>> 16);
	    this[offset + 3] = (value >>> 24);
	  } else {
	    objectWriteUInt32$1(this, value, offset, true);
	  }
	  return offset + 4
	};

	Buffer$e.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt$1(this, value, offset, 4, 0x7fffffff, -0x80000000);
	  if (value < 0) value = 0xffffffff + value + 1;
	  if (Buffer$e.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24);
	    this[offset + 1] = (value >>> 16);
	    this[offset + 2] = (value >>> 8);
	    this[offset + 3] = (value & 0xff);
	  } else {
	    objectWriteUInt32$1(this, value, offset, false);
	  }
	  return offset + 4
	};

	function checkIEEE754$1 (buf, value, offset, ext, max, min) {
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	  if (offset < 0) throw new RangeError('Index out of range')
	}

	function writeFloat$1 (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754$1(buf, value, offset, 4);
	  }
	  write$1(buf, value, offset, littleEndian, 23, 4);
	  return offset + 4
	}

	Buffer$e.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat$1(this, value, offset, true, noAssert)
	};

	Buffer$e.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat$1(this, value, offset, false, noAssert)
	};

	function writeDouble$1 (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754$1(buf, value, offset, 8);
	  }
	  write$1(buf, value, offset, littleEndian, 52, 8);
	  return offset + 8
	}

	Buffer$e.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble$1(this, value, offset, true, noAssert)
	};

	Buffer$e.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble$1(this, value, offset, false, noAssert)
	};

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer$e.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0;
	  if (!end && end !== 0) end = this.length;
	  if (targetStart >= target.length) targetStart = target.length;
	  if (!targetStart) targetStart = 0;
	  if (end > 0 && end < start) end = start;

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length;
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start;
	  }

	  var len = end - start;
	  var i;

	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; --i) {
	      target[i + targetStart] = this[i + start];
	    }
	  } else if (len < 1000 || !Buffer$e.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; ++i) {
	      target[i + targetStart] = this[i + start];
	    }
	  } else {
	    Uint8Array.prototype.set.call(
	      target,
	      this.subarray(start, start + len),
	      targetStart
	    );
	  }

	  return len
	};

	// Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])
	Buffer$e.prototype.fill = function fill (val, start, end, encoding) {
	  // Handle string cases:
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      encoding = start;
	      start = 0;
	      end = this.length;
	    } else if (typeof end === 'string') {
	      encoding = end;
	      end = this.length;
	    }
	    if (val.length === 1) {
	      var code = val.charCodeAt(0);
	      if (code < 256) {
	        val = code;
	      }
	    }
	    if (encoding !== undefined && typeof encoding !== 'string') {
	      throw new TypeError('encoding must be a string')
	    }
	    if (typeof encoding === 'string' && !Buffer$e.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding)
	    }
	  } else if (typeof val === 'number') {
	    val = val & 255;
	  }

	  // Invalid ranges are not set to a default, so can range check early.
	  if (start < 0 || this.length < start || this.length < end) {
	    throw new RangeError('Out of range index')
	  }

	  if (end <= start) {
	    return this
	  }

	  start = start >>> 0;
	  end = end === undefined ? this.length : end >>> 0;

	  if (!val) val = 0;

	  var i;
	  if (typeof val === 'number') {
	    for (i = start; i < end; ++i) {
	      this[i] = val;
	    }
	  } else {
	    var bytes = internalIsBuffer$1(val)
	      ? val
	      : utf8ToBytes$1(new Buffer$e(val, encoding).toString());
	    var len = bytes.length;
	    for (i = 0; i < end - start; ++i) {
	      this[i + start] = bytes[i % len];
	    }
	  }

	  return this
	};

	// HELPER FUNCTIONS
	// ================

	var INVALID_BASE64_RE$1 = /[^+\/0-9A-Za-z-_]/g;

	function base64clean$1 (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim$1(str).replace(INVALID_BASE64_RE$1, '');
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '=';
	  }
	  return str
	}

	function stringtrim$1 (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function toHex$3 (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes$1 (string, units) {
	  units = units || Infinity;
	  var codePoint;
	  var length = string.length;
	  var leadSurrogate = null;
	  var bytes = [];

	  for (var i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i);

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	          continue
	        }

	        // valid lead
	        leadSurrogate = codePoint;

	        continue
	      }

	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	        leadSurrogate = codePoint;
	        continue
	      }

	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	    }

	    leadSurrogate = null;

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint);
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      );
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      );
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      );
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes$1 (str) {
	  var byteArray = [];
	  for (var i = 0; i < str.length; ++i) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF);
	  }
	  return byteArray
	}

	function utf16leToBytes$1 (str, units) {
	  var c, hi, lo;
	  var byteArray = [];
	  for (var i = 0; i < str.length; ++i) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i);
	    hi = c >> 8;
	    lo = c % 256;
	    byteArray.push(lo);
	    byteArray.push(hi);
	  }

	  return byteArray
	}


	function base64ToBytes$1 (str) {
	  return toByteArray$1(base64clean$1(str))
	}

	function blitBuffer$1 (src, dst, offset, length) {
	  for (var i = 0; i < length; ++i) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i];
	  }
	  return i
	}

	function isnan$1 (val) {
	  return val !== val // eslint-disable-line no-self-compare
	}


	// the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
	// The _isBuffer check is for Safari 5-7 support, because it's missing
	// Object.prototype.constructor. Remove this eventually
	function isBuffer$2(obj) {
	  return obj != null && (!!obj._isBuffer || isFastBuffer$1(obj) || isSlowBuffer$1(obj))
	}

	function isFastBuffer$1 (obj) {
	  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
	}

	// For Node v0.10 support. Remove this eventually.
	function isSlowBuffer$1 (obj) {
	  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer$1(obj.slice(0, 0))
	}

	var bufferEs6 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		Buffer: Buffer$e,
		INSPECT_MAX_BYTES: INSPECT_MAX_BYTES$1,
		SlowBuffer: SlowBuffer,
		isBuffer: isBuffer$2,
		kMaxLength: _kMaxLength
	});

	var require$$2$1 = /*@__PURE__*/getAugmentedNamespace(bufferEs6);

	(function (module) {
		(function (module, exports) {

		  // Utils
		  function assert (val, msg) {
		    if (!val) throw new Error(msg || 'Assertion failed');
		  }

		  // Could use `inherits` module, but don't want to move from single file
		  // architecture yet.
		  function inherits (ctor, superCtor) {
		    ctor.super_ = superCtor;
		    var TempCtor = function () {};
		    TempCtor.prototype = superCtor.prototype;
		    ctor.prototype = new TempCtor();
		    ctor.prototype.constructor = ctor;
		  }

		  // BN

		  function BN (number, base, endian) {
		    if (BN.isBN(number)) {
		      return number;
		    }

		    this.negative = 0;
		    this.words = null;
		    this.length = 0;

		    // Reduction context
		    this.red = null;

		    if (number !== null) {
		      if (base === 'le' || base === 'be') {
		        endian = base;
		        base = 10;
		      }

		      this._init(number || 0, base || 10, endian || 'be');
		    }
		  }
		  if (typeof module === 'object') {
		    module.exports = BN;
		  } else {
		    exports.BN = BN;
		  }

		  BN.BN = BN;
		  BN.wordSize = 26;

		  var Buffer;
		  try {
		    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
		      Buffer = window.Buffer;
		    } else {
		      Buffer = require$$2$1.Buffer;
		    }
		  } catch (e) {
		  }

		  BN.isBN = function isBN (num) {
		    if (num instanceof BN) {
		      return true;
		    }

		    return num !== null && typeof num === 'object' &&
		      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
		  };

		  BN.max = function max (left, right) {
		    if (left.cmp(right) > 0) return left;
		    return right;
		  };

		  BN.min = function min (left, right) {
		    if (left.cmp(right) < 0) return left;
		    return right;
		  };

		  BN.prototype._init = function init (number, base, endian) {
		    if (typeof number === 'number') {
		      return this._initNumber(number, base, endian);
		    }

		    if (typeof number === 'object') {
		      return this._initArray(number, base, endian);
		    }

		    if (base === 'hex') {
		      base = 16;
		    }
		    assert(base === (base | 0) && base >= 2 && base <= 36);

		    number = number.toString().replace(/\s+/g, '');
		    var start = 0;
		    if (number[0] === '-') {
		      start++;
		      this.negative = 1;
		    }

		    if (start < number.length) {
		      if (base === 16) {
		        this._parseHex(number, start, endian);
		      } else {
		        this._parseBase(number, base, start);
		        if (endian === 'le') {
		          this._initArray(this.toArray(), base, endian);
		        }
		      }
		    }
		  };

		  BN.prototype._initNumber = function _initNumber (number, base, endian) {
		    if (number < 0) {
		      this.negative = 1;
		      number = -number;
		    }
		    if (number < 0x4000000) {
		      this.words = [number & 0x3ffffff];
		      this.length = 1;
		    } else if (number < 0x10000000000000) {
		      this.words = [
		        number & 0x3ffffff,
		        (number / 0x4000000) & 0x3ffffff
		      ];
		      this.length = 2;
		    } else {
		      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
		      this.words = [
		        number & 0x3ffffff,
		        (number / 0x4000000) & 0x3ffffff,
		        1
		      ];
		      this.length = 3;
		    }

		    if (endian !== 'le') return;

		    // Reverse the bytes
		    this._initArray(this.toArray(), base, endian);
		  };

		  BN.prototype._initArray = function _initArray (number, base, endian) {
		    // Perhaps a Uint8Array
		    assert(typeof number.length === 'number');
		    if (number.length <= 0) {
		      this.words = [0];
		      this.length = 1;
		      return this;
		    }

		    this.length = Math.ceil(number.length / 3);
		    this.words = new Array(this.length);
		    for (var i = 0; i < this.length; i++) {
		      this.words[i] = 0;
		    }

		    var j, w;
		    var off = 0;
		    if (endian === 'be') {
		      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
		        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
		        this.words[j] |= (w << off) & 0x3ffffff;
		        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
		        off += 24;
		        if (off >= 26) {
		          off -= 26;
		          j++;
		        }
		      }
		    } else if (endian === 'le') {
		      for (i = 0, j = 0; i < number.length; i += 3) {
		        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
		        this.words[j] |= (w << off) & 0x3ffffff;
		        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
		        off += 24;
		        if (off >= 26) {
		          off -= 26;
		          j++;
		        }
		      }
		    }
		    return this._strip();
		  };

		  function parseHex4Bits (string, index) {
		    var c = string.charCodeAt(index);
		    // '0' - '9'
		    if (c >= 48 && c <= 57) {
		      return c - 48;
		    // 'A' - 'F'
		    } else if (c >= 65 && c <= 70) {
		      return c - 55;
		    // 'a' - 'f'
		    } else if (c >= 97 && c <= 102) {
		      return c - 87;
		    } else {
		      assert(false, 'Invalid character in ' + string);
		    }
		  }

		  function parseHexByte (string, lowerBound, index) {
		    var r = parseHex4Bits(string, index);
		    if (index - 1 >= lowerBound) {
		      r |= parseHex4Bits(string, index - 1) << 4;
		    }
		    return r;
		  }

		  BN.prototype._parseHex = function _parseHex (number, start, endian) {
		    // Create possibly bigger array to ensure that it fits the number
		    this.length = Math.ceil((number.length - start) / 6);
		    this.words = new Array(this.length);
		    for (var i = 0; i < this.length; i++) {
		      this.words[i] = 0;
		    }

		    // 24-bits chunks
		    var off = 0;
		    var j = 0;

		    var w;
		    if (endian === 'be') {
		      for (i = number.length - 1; i >= start; i -= 2) {
		        w = parseHexByte(number, start, i) << off;
		        this.words[j] |= w & 0x3ffffff;
		        if (off >= 18) {
		          off -= 18;
		          j += 1;
		          this.words[j] |= w >>> 26;
		        } else {
		          off += 8;
		        }
		      }
		    } else {
		      var parseLength = number.length - start;
		      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
		        w = parseHexByte(number, start, i) << off;
		        this.words[j] |= w & 0x3ffffff;
		        if (off >= 18) {
		          off -= 18;
		          j += 1;
		          this.words[j] |= w >>> 26;
		        } else {
		          off += 8;
		        }
		      }
		    }

		    this._strip();
		  };

		  function parseBase (str, start, end, mul) {
		    var r = 0;
		    var b = 0;
		    var len = Math.min(str.length, end);
		    for (var i = start; i < len; i++) {
		      var c = str.charCodeAt(i) - 48;

		      r *= mul;

		      // 'a'
		      if (c >= 49) {
		        b = c - 49 + 0xa;

		      // 'A'
		      } else if (c >= 17) {
		        b = c - 17 + 0xa;

		      // '0' - '9'
		      } else {
		        b = c;
		      }
		      assert(c >= 0 && b < mul, 'Invalid character');
		      r += b;
		    }
		    return r;
		  }

		  BN.prototype._parseBase = function _parseBase (number, base, start) {
		    // Initialize as zero
		    this.words = [0];
		    this.length = 1;

		    // Find length of limb in base
		    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
		      limbLen++;
		    }
		    limbLen--;
		    limbPow = (limbPow / base) | 0;

		    var total = number.length - start;
		    var mod = total % limbLen;
		    var end = Math.min(total, total - mod) + start;

		    var word = 0;
		    for (var i = start; i < end; i += limbLen) {
		      word = parseBase(number, i, i + limbLen, base);

		      this.imuln(limbPow);
		      if (this.words[0] + word < 0x4000000) {
		        this.words[0] += word;
		      } else {
		        this._iaddn(word);
		      }
		    }

		    if (mod !== 0) {
		      var pow = 1;
		      word = parseBase(number, i, number.length, base);

		      for (i = 0; i < mod; i++) {
		        pow *= base;
		      }

		      this.imuln(pow);
		      if (this.words[0] + word < 0x4000000) {
		        this.words[0] += word;
		      } else {
		        this._iaddn(word);
		      }
		    }

		    this._strip();
		  };

		  BN.prototype.copy = function copy (dest) {
		    dest.words = new Array(this.length);
		    for (var i = 0; i < this.length; i++) {
		      dest.words[i] = this.words[i];
		    }
		    dest.length = this.length;
		    dest.negative = this.negative;
		    dest.red = this.red;
		  };

		  function move (dest, src) {
		    dest.words = src.words;
		    dest.length = src.length;
		    dest.negative = src.negative;
		    dest.red = src.red;
		  }

		  BN.prototype._move = function _move (dest) {
		    move(dest, this);
		  };

		  BN.prototype.clone = function clone () {
		    var r = new BN(null);
		    this.copy(r);
		    return r;
		  };

		  BN.prototype._expand = function _expand (size) {
		    while (this.length < size) {
		      this.words[this.length++] = 0;
		    }
		    return this;
		  };

		  // Remove leading `0` from `this`
		  BN.prototype._strip = function strip () {
		    while (this.length > 1 && this.words[this.length - 1] === 0) {
		      this.length--;
		    }
		    return this._normSign();
		  };

		  BN.prototype._normSign = function _normSign () {
		    // -0 = 0
		    if (this.length === 1 && this.words[0] === 0) {
		      this.negative = 0;
		    }
		    return this;
		  };

		  // Check Symbol.for because not everywhere where Symbol defined
		  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
		  if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {
		    try {
		      BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
		    } catch (e) {
		      BN.prototype.inspect = inspect;
		    }
		  } else {
		    BN.prototype.inspect = inspect;
		  }

		  function inspect () {
		    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
		  }

		  /*

		  var zeros = [];
		  var groupSizes = [];
		  var groupBases = [];

		  var s = '';
		  var i = -1;
		  while (++i < BN.wordSize) {
		    zeros[i] = s;
		    s += '0';
		  }
		  groupSizes[0] = 0;
		  groupSizes[1] = 0;
		  groupBases[0] = 0;
		  groupBases[1] = 0;
		  var base = 2 - 1;
		  while (++base < 36 + 1) {
		    var groupSize = 0;
		    var groupBase = 1;
		    while (groupBase < (1 << BN.wordSize) / base) {
		      groupBase *= base;
		      groupSize += 1;
		    }
		    groupSizes[base] = groupSize;
		    groupBases[base] = groupBase;
		  }

		  */

		  var zeros = [
		    '',
		    '0',
		    '00',
		    '000',
		    '0000',
		    '00000',
		    '000000',
		    '0000000',
		    '00000000',
		    '000000000',
		    '0000000000',
		    '00000000000',
		    '000000000000',
		    '0000000000000',
		    '00000000000000',
		    '000000000000000',
		    '0000000000000000',
		    '00000000000000000',
		    '000000000000000000',
		    '0000000000000000000',
		    '00000000000000000000',
		    '000000000000000000000',
		    '0000000000000000000000',
		    '00000000000000000000000',
		    '000000000000000000000000',
		    '0000000000000000000000000'
		  ];

		  var groupSizes = [
		    0, 0,
		    25, 16, 12, 11, 10, 9, 8,
		    8, 7, 7, 7, 7, 6, 6,
		    6, 6, 6, 6, 6, 5, 5,
		    5, 5, 5, 5, 5, 5, 5,
		    5, 5, 5, 5, 5, 5, 5
		  ];

		  var groupBases = [
		    0, 0,
		    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
		    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
		    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
		    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
		    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
		  ];

		  BN.prototype.toString = function toString (base, padding) {
		    base = base || 10;
		    padding = padding | 0 || 1;

		    var out;
		    if (base === 16 || base === 'hex') {
		      out = '';
		      var off = 0;
		      var carry = 0;
		      for (var i = 0; i < this.length; i++) {
		        var w = this.words[i];
		        var word = (((w << off) | carry) & 0xffffff).toString(16);
		        carry = (w >>> (24 - off)) & 0xffffff;
		        off += 2;
		        if (off >= 26) {
		          off -= 26;
		          i--;
		        }
		        if (carry !== 0 || i !== this.length - 1) {
		          out = zeros[6 - word.length] + word + out;
		        } else {
		          out = word + out;
		        }
		      }
		      if (carry !== 0) {
		        out = carry.toString(16) + out;
		      }
		      while (out.length % padding !== 0) {
		        out = '0' + out;
		      }
		      if (this.negative !== 0) {
		        out = '-' + out;
		      }
		      return out;
		    }

		    if (base === (base | 0) && base >= 2 && base <= 36) {
		      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
		      var groupSize = groupSizes[base];
		      // var groupBase = Math.pow(base, groupSize);
		      var groupBase = groupBases[base];
		      out = '';
		      var c = this.clone();
		      c.negative = 0;
		      while (!c.isZero()) {
		        var r = c.modrn(groupBase).toString(base);
		        c = c.idivn(groupBase);

		        if (!c.isZero()) {
		          out = zeros[groupSize - r.length] + r + out;
		        } else {
		          out = r + out;
		        }
		      }
		      if (this.isZero()) {
		        out = '0' + out;
		      }
		      while (out.length % padding !== 0) {
		        out = '0' + out;
		      }
		      if (this.negative !== 0) {
		        out = '-' + out;
		      }
		      return out;
		    }

		    assert(false, 'Base should be between 2 and 36');
		  };

		  BN.prototype.toNumber = function toNumber () {
		    var ret = this.words[0];
		    if (this.length === 2) {
		      ret += this.words[1] * 0x4000000;
		    } else if (this.length === 3 && this.words[2] === 0x01) {
		      // NOTE: at this stage it is known that the top bit is set
		      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
		    } else if (this.length > 2) {
		      assert(false, 'Number can only safely store up to 53 bits');
		    }
		    return (this.negative !== 0) ? -ret : ret;
		  };

		  BN.prototype.toJSON = function toJSON () {
		    return this.toString(16, 2);
		  };

		  if (Buffer) {
		    BN.prototype.toBuffer = function toBuffer (endian, length) {
		      return this.toArrayLike(Buffer, endian, length);
		    };
		  }

		  BN.prototype.toArray = function toArray (endian, length) {
		    return this.toArrayLike(Array, endian, length);
		  };

		  var allocate = function allocate (ArrayType, size) {
		    if (ArrayType.allocUnsafe) {
		      return ArrayType.allocUnsafe(size);
		    }
		    return new ArrayType(size);
		  };

		  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
		    this._strip();

		    var byteLength = this.byteLength();
		    var reqLength = length || Math.max(1, byteLength);
		    assert(byteLength <= reqLength, 'byte array longer than desired length');
		    assert(reqLength > 0, 'Requested array length <= 0');

		    var res = allocate(ArrayType, reqLength);
		    var postfix = endian === 'le' ? 'LE' : 'BE';
		    this['_toArrayLike' + postfix](res, byteLength);
		    return res;
		  };

		  BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {
		    var position = 0;
		    var carry = 0;

		    for (var i = 0, shift = 0; i < this.length; i++) {
		      var word = (this.words[i] << shift) | carry;

		      res[position++] = word & 0xff;
		      if (position < res.length) {
		        res[position++] = (word >> 8) & 0xff;
		      }
		      if (position < res.length) {
		        res[position++] = (word >> 16) & 0xff;
		      }

		      if (shift === 6) {
		        if (position < res.length) {
		          res[position++] = (word >> 24) & 0xff;
		        }
		        carry = 0;
		        shift = 0;
		      } else {
		        carry = word >>> 24;
		        shift += 2;
		      }
		    }

		    if (position < res.length) {
		      res[position++] = carry;

		      while (position < res.length) {
		        res[position++] = 0;
		      }
		    }
		  };

		  BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {
		    var position = res.length - 1;
		    var carry = 0;

		    for (var i = 0, shift = 0; i < this.length; i++) {
		      var word = (this.words[i] << shift) | carry;

		      res[position--] = word & 0xff;
		      if (position >= 0) {
		        res[position--] = (word >> 8) & 0xff;
		      }
		      if (position >= 0) {
		        res[position--] = (word >> 16) & 0xff;
		      }

		      if (shift === 6) {
		        if (position >= 0) {
		          res[position--] = (word >> 24) & 0xff;
		        }
		        carry = 0;
		        shift = 0;
		      } else {
		        carry = word >>> 24;
		        shift += 2;
		      }
		    }

		    if (position >= 0) {
		      res[position--] = carry;

		      while (position >= 0) {
		        res[position--] = 0;
		      }
		    }
		  };

		  if (Math.clz32) {
		    BN.prototype._countBits = function _countBits (w) {
		      return 32 - Math.clz32(w);
		    };
		  } else {
		    BN.prototype._countBits = function _countBits (w) {
		      var t = w;
		      var r = 0;
		      if (t >= 0x1000) {
		        r += 13;
		        t >>>= 13;
		      }
		      if (t >= 0x40) {
		        r += 7;
		        t >>>= 7;
		      }
		      if (t >= 0x8) {
		        r += 4;
		        t >>>= 4;
		      }
		      if (t >= 0x02) {
		        r += 2;
		        t >>>= 2;
		      }
		      return r + t;
		    };
		  }

		  BN.prototype._zeroBits = function _zeroBits (w) {
		    // Short-cut
		    if (w === 0) return 26;

		    var t = w;
		    var r = 0;
		    if ((t & 0x1fff) === 0) {
		      r += 13;
		      t >>>= 13;
		    }
		    if ((t & 0x7f) === 0) {
		      r += 7;
		      t >>>= 7;
		    }
		    if ((t & 0xf) === 0) {
		      r += 4;
		      t >>>= 4;
		    }
		    if ((t & 0x3) === 0) {
		      r += 2;
		      t >>>= 2;
		    }
		    if ((t & 0x1) === 0) {
		      r++;
		    }
		    return r;
		  };

		  // Return number of used bits in a BN
		  BN.prototype.bitLength = function bitLength () {
		    var w = this.words[this.length - 1];
		    var hi = this._countBits(w);
		    return (this.length - 1) * 26 + hi;
		  };

		  function toBitArray (num) {
		    var w = new Array(num.bitLength());

		    for (var bit = 0; bit < w.length; bit++) {
		      var off = (bit / 26) | 0;
		      var wbit = bit % 26;

		      w[bit] = (num.words[off] >>> wbit) & 0x01;
		    }

		    return w;
		  }

		  // Number of trailing zero bits
		  BN.prototype.zeroBits = function zeroBits () {
		    if (this.isZero()) return 0;

		    var r = 0;
		    for (var i = 0; i < this.length; i++) {
		      var b = this._zeroBits(this.words[i]);
		      r += b;
		      if (b !== 26) break;
		    }
		    return r;
		  };

		  BN.prototype.byteLength = function byteLength () {
		    return Math.ceil(this.bitLength() / 8);
		  };

		  BN.prototype.toTwos = function toTwos (width) {
		    if (this.negative !== 0) {
		      return this.abs().inotn(width).iaddn(1);
		    }
		    return this.clone();
		  };

		  BN.prototype.fromTwos = function fromTwos (width) {
		    if (this.testn(width - 1)) {
		      return this.notn(width).iaddn(1).ineg();
		    }
		    return this.clone();
		  };

		  BN.prototype.isNeg = function isNeg () {
		    return this.negative !== 0;
		  };

		  // Return negative clone of `this`
		  BN.prototype.neg = function neg () {
		    return this.clone().ineg();
		  };

		  BN.prototype.ineg = function ineg () {
		    if (!this.isZero()) {
		      this.negative ^= 1;
		    }

		    return this;
		  };

		  // Or `num` with `this` in-place
		  BN.prototype.iuor = function iuor (num) {
		    while (this.length < num.length) {
		      this.words[this.length++] = 0;
		    }

		    for (var i = 0; i < num.length; i++) {
		      this.words[i] = this.words[i] | num.words[i];
		    }

		    return this._strip();
		  };

		  BN.prototype.ior = function ior (num) {
		    assert((this.negative | num.negative) === 0);
		    return this.iuor(num);
		  };

		  // Or `num` with `this`
		  BN.prototype.or = function or (num) {
		    if (this.length > num.length) return this.clone().ior(num);
		    return num.clone().ior(this);
		  };

		  BN.prototype.uor = function uor (num) {
		    if (this.length > num.length) return this.clone().iuor(num);
		    return num.clone().iuor(this);
		  };

		  // And `num` with `this` in-place
		  BN.prototype.iuand = function iuand (num) {
		    // b = min-length(num, this)
		    var b;
		    if (this.length > num.length) {
		      b = num;
		    } else {
		      b = this;
		    }

		    for (var i = 0; i < b.length; i++) {
		      this.words[i] = this.words[i] & num.words[i];
		    }

		    this.length = b.length;

		    return this._strip();
		  };

		  BN.prototype.iand = function iand (num) {
		    assert((this.negative | num.negative) === 0);
		    return this.iuand(num);
		  };

		  // And `num` with `this`
		  BN.prototype.and = function and (num) {
		    if (this.length > num.length) return this.clone().iand(num);
		    return num.clone().iand(this);
		  };

		  BN.prototype.uand = function uand (num) {
		    if (this.length > num.length) return this.clone().iuand(num);
		    return num.clone().iuand(this);
		  };

		  // Xor `num` with `this` in-place
		  BN.prototype.iuxor = function iuxor (num) {
		    // a.length > b.length
		    var a;
		    var b;
		    if (this.length > num.length) {
		      a = this;
		      b = num;
		    } else {
		      a = num;
		      b = this;
		    }

		    for (var i = 0; i < b.length; i++) {
		      this.words[i] = a.words[i] ^ b.words[i];
		    }

		    if (this !== a) {
		      for (; i < a.length; i++) {
		        this.words[i] = a.words[i];
		      }
		    }

		    this.length = a.length;

		    return this._strip();
		  };

		  BN.prototype.ixor = function ixor (num) {
		    assert((this.negative | num.negative) === 0);
		    return this.iuxor(num);
		  };

		  // Xor `num` with `this`
		  BN.prototype.xor = function xor (num) {
		    if (this.length > num.length) return this.clone().ixor(num);
		    return num.clone().ixor(this);
		  };

		  BN.prototype.uxor = function uxor (num) {
		    if (this.length > num.length) return this.clone().iuxor(num);
		    return num.clone().iuxor(this);
		  };

		  // Not ``this`` with ``width`` bitwidth
		  BN.prototype.inotn = function inotn (width) {
		    assert(typeof width === 'number' && width >= 0);

		    var bytesNeeded = Math.ceil(width / 26) | 0;
		    var bitsLeft = width % 26;

		    // Extend the buffer with leading zeroes
		    this._expand(bytesNeeded);

		    if (bitsLeft > 0) {
		      bytesNeeded--;
		    }

		    // Handle complete words
		    for (var i = 0; i < bytesNeeded; i++) {
		      this.words[i] = ~this.words[i] & 0x3ffffff;
		    }

		    // Handle the residue
		    if (bitsLeft > 0) {
		      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
		    }

		    // And remove leading zeroes
		    return this._strip();
		  };

		  BN.prototype.notn = function notn (width) {
		    return this.clone().inotn(width);
		  };

		  // Set `bit` of `this`
		  BN.prototype.setn = function setn (bit, val) {
		    assert(typeof bit === 'number' && bit >= 0);

		    var off = (bit / 26) | 0;
		    var wbit = bit % 26;

		    this._expand(off + 1);

		    if (val) {
		      this.words[off] = this.words[off] | (1 << wbit);
		    } else {
		      this.words[off] = this.words[off] & ~(1 << wbit);
		    }

		    return this._strip();
		  };

		  // Add `num` to `this` in-place
		  BN.prototype.iadd = function iadd (num) {
		    var r;

		    // negative + positive
		    if (this.negative !== 0 && num.negative === 0) {
		      this.negative = 0;
		      r = this.isub(num);
		      this.negative ^= 1;
		      return this._normSign();

		    // positive + negative
		    } else if (this.negative === 0 && num.negative !== 0) {
		      num.negative = 0;
		      r = this.isub(num);
		      num.negative = 1;
		      return r._normSign();
		    }

		    // a.length > b.length
		    var a, b;
		    if (this.length > num.length) {
		      a = this;
		      b = num;
		    } else {
		      a = num;
		      b = this;
		    }

		    var carry = 0;
		    for (var i = 0; i < b.length; i++) {
		      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
		      this.words[i] = r & 0x3ffffff;
		      carry = r >>> 26;
		    }
		    for (; carry !== 0 && i < a.length; i++) {
		      r = (a.words[i] | 0) + carry;
		      this.words[i] = r & 0x3ffffff;
		      carry = r >>> 26;
		    }

		    this.length = a.length;
		    if (carry !== 0) {
		      this.words[this.length] = carry;
		      this.length++;
		    // Copy the rest of the words
		    } else if (a !== this) {
		      for (; i < a.length; i++) {
		        this.words[i] = a.words[i];
		      }
		    }

		    return this;
		  };

		  // Add `num` to `this`
		  BN.prototype.add = function add (num) {
		    var res;
		    if (num.negative !== 0 && this.negative === 0) {
		      num.negative = 0;
		      res = this.sub(num);
		      num.negative ^= 1;
		      return res;
		    } else if (num.negative === 0 && this.negative !== 0) {
		      this.negative = 0;
		      res = num.sub(this);
		      this.negative = 1;
		      return res;
		    }

		    if (this.length > num.length) return this.clone().iadd(num);

		    return num.clone().iadd(this);
		  };

		  // Subtract `num` from `this` in-place
		  BN.prototype.isub = function isub (num) {
		    // this - (-num) = this + num
		    if (num.negative !== 0) {
		      num.negative = 0;
		      var r = this.iadd(num);
		      num.negative = 1;
		      return r._normSign();

		    // -this - num = -(this + num)
		    } else if (this.negative !== 0) {
		      this.negative = 0;
		      this.iadd(num);
		      this.negative = 1;
		      return this._normSign();
		    }

		    // At this point both numbers are positive
		    var cmp = this.cmp(num);

		    // Optimization - zeroify
		    if (cmp === 0) {
		      this.negative = 0;
		      this.length = 1;
		      this.words[0] = 0;
		      return this;
		    }

		    // a > b
		    var a, b;
		    if (cmp > 0) {
		      a = this;
		      b = num;
		    } else {
		      a = num;
		      b = this;
		    }

		    var carry = 0;
		    for (var i = 0; i < b.length; i++) {
		      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
		      carry = r >> 26;
		      this.words[i] = r & 0x3ffffff;
		    }
		    for (; carry !== 0 && i < a.length; i++) {
		      r = (a.words[i] | 0) + carry;
		      carry = r >> 26;
		      this.words[i] = r & 0x3ffffff;
		    }

		    // Copy rest of the words
		    if (carry === 0 && i < a.length && a !== this) {
		      for (; i < a.length; i++) {
		        this.words[i] = a.words[i];
		      }
		    }

		    this.length = Math.max(this.length, i);

		    if (a !== this) {
		      this.negative = 1;
		    }

		    return this._strip();
		  };

		  // Subtract `num` from `this`
		  BN.prototype.sub = function sub (num) {
		    return this.clone().isub(num);
		  };

		  function smallMulTo (self, num, out) {
		    out.negative = num.negative ^ self.negative;
		    var len = (self.length + num.length) | 0;
		    out.length = len;
		    len = (len - 1) | 0;

		    // Peel one iteration (compiler can't do it, because of code complexity)
		    var a = self.words[0] | 0;
		    var b = num.words[0] | 0;
		    var r = a * b;

		    var lo = r & 0x3ffffff;
		    var carry = (r / 0x4000000) | 0;
		    out.words[0] = lo;

		    for (var k = 1; k < len; k++) {
		      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
		      // note that ncarry could be >= 0x3ffffff
		      var ncarry = carry >>> 26;
		      var rword = carry & 0x3ffffff;
		      var maxJ = Math.min(k, num.length - 1);
		      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
		        var i = (k - j) | 0;
		        a = self.words[i] | 0;
		        b = num.words[j] | 0;
		        r = a * b + rword;
		        ncarry += (r / 0x4000000) | 0;
		        rword = r & 0x3ffffff;
		      }
		      out.words[k] = rword | 0;
		      carry = ncarry | 0;
		    }
		    if (carry !== 0) {
		      out.words[k] = carry | 0;
		    } else {
		      out.length--;
		    }

		    return out._strip();
		  }

		  // TODO(indutny): it may be reasonable to omit it for users who don't need
		  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
		  // multiplication (like elliptic secp256k1).
		  var comb10MulTo = function comb10MulTo (self, num, out) {
		    var a = self.words;
		    var b = num.words;
		    var o = out.words;
		    var c = 0;
		    var lo;
		    var mid;
		    var hi;
		    var a0 = a[0] | 0;
		    var al0 = a0 & 0x1fff;
		    var ah0 = a0 >>> 13;
		    var a1 = a[1] | 0;
		    var al1 = a1 & 0x1fff;
		    var ah1 = a1 >>> 13;
		    var a2 = a[2] | 0;
		    var al2 = a2 & 0x1fff;
		    var ah2 = a2 >>> 13;
		    var a3 = a[3] | 0;
		    var al3 = a3 & 0x1fff;
		    var ah3 = a3 >>> 13;
		    var a4 = a[4] | 0;
		    var al4 = a4 & 0x1fff;
		    var ah4 = a4 >>> 13;
		    var a5 = a[5] | 0;
		    var al5 = a5 & 0x1fff;
		    var ah5 = a5 >>> 13;
		    var a6 = a[6] | 0;
		    var al6 = a6 & 0x1fff;
		    var ah6 = a6 >>> 13;
		    var a7 = a[7] | 0;
		    var al7 = a7 & 0x1fff;
		    var ah7 = a7 >>> 13;
		    var a8 = a[8] | 0;
		    var al8 = a8 & 0x1fff;
		    var ah8 = a8 >>> 13;
		    var a9 = a[9] | 0;
		    var al9 = a9 & 0x1fff;
		    var ah9 = a9 >>> 13;
		    var b0 = b[0] | 0;
		    var bl0 = b0 & 0x1fff;
		    var bh0 = b0 >>> 13;
		    var b1 = b[1] | 0;
		    var bl1 = b1 & 0x1fff;
		    var bh1 = b1 >>> 13;
		    var b2 = b[2] | 0;
		    var bl2 = b2 & 0x1fff;
		    var bh2 = b2 >>> 13;
		    var b3 = b[3] | 0;
		    var bl3 = b3 & 0x1fff;
		    var bh3 = b3 >>> 13;
		    var b4 = b[4] | 0;
		    var bl4 = b4 & 0x1fff;
		    var bh4 = b4 >>> 13;
		    var b5 = b[5] | 0;
		    var bl5 = b5 & 0x1fff;
		    var bh5 = b5 >>> 13;
		    var b6 = b[6] | 0;
		    var bl6 = b6 & 0x1fff;
		    var bh6 = b6 >>> 13;
		    var b7 = b[7] | 0;
		    var bl7 = b7 & 0x1fff;
		    var bh7 = b7 >>> 13;
		    var b8 = b[8] | 0;
		    var bl8 = b8 & 0x1fff;
		    var bh8 = b8 >>> 13;
		    var b9 = b[9] | 0;
		    var bl9 = b9 & 0x1fff;
		    var bh9 = b9 >>> 13;

		    out.negative = self.negative ^ num.negative;
		    out.length = 19;
		    /* k = 0 */
		    lo = Math.imul(al0, bl0);
		    mid = Math.imul(al0, bh0);
		    mid = (mid + Math.imul(ah0, bl0)) | 0;
		    hi = Math.imul(ah0, bh0);
		    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
		    w0 &= 0x3ffffff;
		    /* k = 1 */
		    lo = Math.imul(al1, bl0);
		    mid = Math.imul(al1, bh0);
		    mid = (mid + Math.imul(ah1, bl0)) | 0;
		    hi = Math.imul(ah1, bh0);
		    lo = (lo + Math.imul(al0, bl1)) | 0;
		    mid = (mid + Math.imul(al0, bh1)) | 0;
		    mid = (mid + Math.imul(ah0, bl1)) | 0;
		    hi = (hi + Math.imul(ah0, bh1)) | 0;
		    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
		    w1 &= 0x3ffffff;
		    /* k = 2 */
		    lo = Math.imul(al2, bl0);
		    mid = Math.imul(al2, bh0);
		    mid = (mid + Math.imul(ah2, bl0)) | 0;
		    hi = Math.imul(ah2, bh0);
		    lo = (lo + Math.imul(al1, bl1)) | 0;
		    mid = (mid + Math.imul(al1, bh1)) | 0;
		    mid = (mid + Math.imul(ah1, bl1)) | 0;
		    hi = (hi + Math.imul(ah1, bh1)) | 0;
		    lo = (lo + Math.imul(al0, bl2)) | 0;
		    mid = (mid + Math.imul(al0, bh2)) | 0;
		    mid = (mid + Math.imul(ah0, bl2)) | 0;
		    hi = (hi + Math.imul(ah0, bh2)) | 0;
		    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
		    w2 &= 0x3ffffff;
		    /* k = 3 */
		    lo = Math.imul(al3, bl0);
		    mid = Math.imul(al3, bh0);
		    mid = (mid + Math.imul(ah3, bl0)) | 0;
		    hi = Math.imul(ah3, bh0);
		    lo = (lo + Math.imul(al2, bl1)) | 0;
		    mid = (mid + Math.imul(al2, bh1)) | 0;
		    mid = (mid + Math.imul(ah2, bl1)) | 0;
		    hi = (hi + Math.imul(ah2, bh1)) | 0;
		    lo = (lo + Math.imul(al1, bl2)) | 0;
		    mid = (mid + Math.imul(al1, bh2)) | 0;
		    mid = (mid + Math.imul(ah1, bl2)) | 0;
		    hi = (hi + Math.imul(ah1, bh2)) | 0;
		    lo = (lo + Math.imul(al0, bl3)) | 0;
		    mid = (mid + Math.imul(al0, bh3)) | 0;
		    mid = (mid + Math.imul(ah0, bl3)) | 0;
		    hi = (hi + Math.imul(ah0, bh3)) | 0;
		    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
		    w3 &= 0x3ffffff;
		    /* k = 4 */
		    lo = Math.imul(al4, bl0);
		    mid = Math.imul(al4, bh0);
		    mid = (mid + Math.imul(ah4, bl0)) | 0;
		    hi = Math.imul(ah4, bh0);
		    lo = (lo + Math.imul(al3, bl1)) | 0;
		    mid = (mid + Math.imul(al3, bh1)) | 0;
		    mid = (mid + Math.imul(ah3, bl1)) | 0;
		    hi = (hi + Math.imul(ah3, bh1)) | 0;
		    lo = (lo + Math.imul(al2, bl2)) | 0;
		    mid = (mid + Math.imul(al2, bh2)) | 0;
		    mid = (mid + Math.imul(ah2, bl2)) | 0;
		    hi = (hi + Math.imul(ah2, bh2)) | 0;
		    lo = (lo + Math.imul(al1, bl3)) | 0;
		    mid = (mid + Math.imul(al1, bh3)) | 0;
		    mid = (mid + Math.imul(ah1, bl3)) | 0;
		    hi = (hi + Math.imul(ah1, bh3)) | 0;
		    lo = (lo + Math.imul(al0, bl4)) | 0;
		    mid = (mid + Math.imul(al0, bh4)) | 0;
		    mid = (mid + Math.imul(ah0, bl4)) | 0;
		    hi = (hi + Math.imul(ah0, bh4)) | 0;
		    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
		    w4 &= 0x3ffffff;
		    /* k = 5 */
		    lo = Math.imul(al5, bl0);
		    mid = Math.imul(al5, bh0);
		    mid = (mid + Math.imul(ah5, bl0)) | 0;
		    hi = Math.imul(ah5, bh0);
		    lo = (lo + Math.imul(al4, bl1)) | 0;
		    mid = (mid + Math.imul(al4, bh1)) | 0;
		    mid = (mid + Math.imul(ah4, bl1)) | 0;
		    hi = (hi + Math.imul(ah4, bh1)) | 0;
		    lo = (lo + Math.imul(al3, bl2)) | 0;
		    mid = (mid + Math.imul(al3, bh2)) | 0;
		    mid = (mid + Math.imul(ah3, bl2)) | 0;
		    hi = (hi + Math.imul(ah3, bh2)) | 0;
		    lo = (lo + Math.imul(al2, bl3)) | 0;
		    mid = (mid + Math.imul(al2, bh3)) | 0;
		    mid = (mid + Math.imul(ah2, bl3)) | 0;
		    hi = (hi + Math.imul(ah2, bh3)) | 0;
		    lo = (lo + Math.imul(al1, bl4)) | 0;
		    mid = (mid + Math.imul(al1, bh4)) | 0;
		    mid = (mid + Math.imul(ah1, bl4)) | 0;
		    hi = (hi + Math.imul(ah1, bh4)) | 0;
		    lo = (lo + Math.imul(al0, bl5)) | 0;
		    mid = (mid + Math.imul(al0, bh5)) | 0;
		    mid = (mid + Math.imul(ah0, bl5)) | 0;
		    hi = (hi + Math.imul(ah0, bh5)) | 0;
		    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
		    w5 &= 0x3ffffff;
		    /* k = 6 */
		    lo = Math.imul(al6, bl0);
		    mid = Math.imul(al6, bh0);
		    mid = (mid + Math.imul(ah6, bl0)) | 0;
		    hi = Math.imul(ah6, bh0);
		    lo = (lo + Math.imul(al5, bl1)) | 0;
		    mid = (mid + Math.imul(al5, bh1)) | 0;
		    mid = (mid + Math.imul(ah5, bl1)) | 0;
		    hi = (hi + Math.imul(ah5, bh1)) | 0;
		    lo = (lo + Math.imul(al4, bl2)) | 0;
		    mid = (mid + Math.imul(al4, bh2)) | 0;
		    mid = (mid + Math.imul(ah4, bl2)) | 0;
		    hi = (hi + Math.imul(ah4, bh2)) | 0;
		    lo = (lo + Math.imul(al3, bl3)) | 0;
		    mid = (mid + Math.imul(al3, bh3)) | 0;
		    mid = (mid + Math.imul(ah3, bl3)) | 0;
		    hi = (hi + Math.imul(ah3, bh3)) | 0;
		    lo = (lo + Math.imul(al2, bl4)) | 0;
		    mid = (mid + Math.imul(al2, bh4)) | 0;
		    mid = (mid + Math.imul(ah2, bl4)) | 0;
		    hi = (hi + Math.imul(ah2, bh4)) | 0;
		    lo = (lo + Math.imul(al1, bl5)) | 0;
		    mid = (mid + Math.imul(al1, bh5)) | 0;
		    mid = (mid + Math.imul(ah1, bl5)) | 0;
		    hi = (hi + Math.imul(ah1, bh5)) | 0;
		    lo = (lo + Math.imul(al0, bl6)) | 0;
		    mid = (mid + Math.imul(al0, bh6)) | 0;
		    mid = (mid + Math.imul(ah0, bl6)) | 0;
		    hi = (hi + Math.imul(ah0, bh6)) | 0;
		    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
		    w6 &= 0x3ffffff;
		    /* k = 7 */
		    lo = Math.imul(al7, bl0);
		    mid = Math.imul(al7, bh0);
		    mid = (mid + Math.imul(ah7, bl0)) | 0;
		    hi = Math.imul(ah7, bh0);
		    lo = (lo + Math.imul(al6, bl1)) | 0;
		    mid = (mid + Math.imul(al6, bh1)) | 0;
		    mid = (mid + Math.imul(ah6, bl1)) | 0;
		    hi = (hi + Math.imul(ah6, bh1)) | 0;
		    lo = (lo + Math.imul(al5, bl2)) | 0;
		    mid = (mid + Math.imul(al5, bh2)) | 0;
		    mid = (mid + Math.imul(ah5, bl2)) | 0;
		    hi = (hi + Math.imul(ah5, bh2)) | 0;
		    lo = (lo + Math.imul(al4, bl3)) | 0;
		    mid = (mid + Math.imul(al4, bh3)) | 0;
		    mid = (mid + Math.imul(ah4, bl3)) | 0;
		    hi = (hi + Math.imul(ah4, bh3)) | 0;
		    lo = (lo + Math.imul(al3, bl4)) | 0;
		    mid = (mid + Math.imul(al3, bh4)) | 0;
		    mid = (mid + Math.imul(ah3, bl4)) | 0;
		    hi = (hi + Math.imul(ah3, bh4)) | 0;
		    lo = (lo + Math.imul(al2, bl5)) | 0;
		    mid = (mid + Math.imul(al2, bh5)) | 0;
		    mid = (mid + Math.imul(ah2, bl5)) | 0;
		    hi = (hi + Math.imul(ah2, bh5)) | 0;
		    lo = (lo + Math.imul(al1, bl6)) | 0;
		    mid = (mid + Math.imul(al1, bh6)) | 0;
		    mid = (mid + Math.imul(ah1, bl6)) | 0;
		    hi = (hi + Math.imul(ah1, bh6)) | 0;
		    lo = (lo + Math.imul(al0, bl7)) | 0;
		    mid = (mid + Math.imul(al0, bh7)) | 0;
		    mid = (mid + Math.imul(ah0, bl7)) | 0;
		    hi = (hi + Math.imul(ah0, bh7)) | 0;
		    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
		    w7 &= 0x3ffffff;
		    /* k = 8 */
		    lo = Math.imul(al8, bl0);
		    mid = Math.imul(al8, bh0);
		    mid = (mid + Math.imul(ah8, bl0)) | 0;
		    hi = Math.imul(ah8, bh0);
		    lo = (lo + Math.imul(al7, bl1)) | 0;
		    mid = (mid + Math.imul(al7, bh1)) | 0;
		    mid = (mid + Math.imul(ah7, bl1)) | 0;
		    hi = (hi + Math.imul(ah7, bh1)) | 0;
		    lo = (lo + Math.imul(al6, bl2)) | 0;
		    mid = (mid + Math.imul(al6, bh2)) | 0;
		    mid = (mid + Math.imul(ah6, bl2)) | 0;
		    hi = (hi + Math.imul(ah6, bh2)) | 0;
		    lo = (lo + Math.imul(al5, bl3)) | 0;
		    mid = (mid + Math.imul(al5, bh3)) | 0;
		    mid = (mid + Math.imul(ah5, bl3)) | 0;
		    hi = (hi + Math.imul(ah5, bh3)) | 0;
		    lo = (lo + Math.imul(al4, bl4)) | 0;
		    mid = (mid + Math.imul(al4, bh4)) | 0;
		    mid = (mid + Math.imul(ah4, bl4)) | 0;
		    hi = (hi + Math.imul(ah4, bh4)) | 0;
		    lo = (lo + Math.imul(al3, bl5)) | 0;
		    mid = (mid + Math.imul(al3, bh5)) | 0;
		    mid = (mid + Math.imul(ah3, bl5)) | 0;
		    hi = (hi + Math.imul(ah3, bh5)) | 0;
		    lo = (lo + Math.imul(al2, bl6)) | 0;
		    mid = (mid + Math.imul(al2, bh6)) | 0;
		    mid = (mid + Math.imul(ah2, bl6)) | 0;
		    hi = (hi + Math.imul(ah2, bh6)) | 0;
		    lo = (lo + Math.imul(al1, bl7)) | 0;
		    mid = (mid + Math.imul(al1, bh7)) | 0;
		    mid = (mid + Math.imul(ah1, bl7)) | 0;
		    hi = (hi + Math.imul(ah1, bh7)) | 0;
		    lo = (lo + Math.imul(al0, bl8)) | 0;
		    mid = (mid + Math.imul(al0, bh8)) | 0;
		    mid = (mid + Math.imul(ah0, bl8)) | 0;
		    hi = (hi + Math.imul(ah0, bh8)) | 0;
		    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
		    w8 &= 0x3ffffff;
		    /* k = 9 */
		    lo = Math.imul(al9, bl0);
		    mid = Math.imul(al9, bh0);
		    mid = (mid + Math.imul(ah9, bl0)) | 0;
		    hi = Math.imul(ah9, bh0);
		    lo = (lo + Math.imul(al8, bl1)) | 0;
		    mid = (mid + Math.imul(al8, bh1)) | 0;
		    mid = (mid + Math.imul(ah8, bl1)) | 0;
		    hi = (hi + Math.imul(ah8, bh1)) | 0;
		    lo = (lo + Math.imul(al7, bl2)) | 0;
		    mid = (mid + Math.imul(al7, bh2)) | 0;
		    mid = (mid + Math.imul(ah7, bl2)) | 0;
		    hi = (hi + Math.imul(ah7, bh2)) | 0;
		    lo = (lo + Math.imul(al6, bl3)) | 0;
		    mid = (mid + Math.imul(al6, bh3)) | 0;
		    mid = (mid + Math.imul(ah6, bl3)) | 0;
		    hi = (hi + Math.imul(ah6, bh3)) | 0;
		    lo = (lo + Math.imul(al5, bl4)) | 0;
		    mid = (mid + Math.imul(al5, bh4)) | 0;
		    mid = (mid + Math.imul(ah5, bl4)) | 0;
		    hi = (hi + Math.imul(ah5, bh4)) | 0;
		    lo = (lo + Math.imul(al4, bl5)) | 0;
		    mid = (mid + Math.imul(al4, bh5)) | 0;
		    mid = (mid + Math.imul(ah4, bl5)) | 0;
		    hi = (hi + Math.imul(ah4, bh5)) | 0;
		    lo = (lo + Math.imul(al3, bl6)) | 0;
		    mid = (mid + Math.imul(al3, bh6)) | 0;
		    mid = (mid + Math.imul(ah3, bl6)) | 0;
		    hi = (hi + Math.imul(ah3, bh6)) | 0;
		    lo = (lo + Math.imul(al2, bl7)) | 0;
		    mid = (mid + Math.imul(al2, bh7)) | 0;
		    mid = (mid + Math.imul(ah2, bl7)) | 0;
		    hi = (hi + Math.imul(ah2, bh7)) | 0;
		    lo = (lo + Math.imul(al1, bl8)) | 0;
		    mid = (mid + Math.imul(al1, bh8)) | 0;
		    mid = (mid + Math.imul(ah1, bl8)) | 0;
		    hi = (hi + Math.imul(ah1, bh8)) | 0;
		    lo = (lo + Math.imul(al0, bl9)) | 0;
		    mid = (mid + Math.imul(al0, bh9)) | 0;
		    mid = (mid + Math.imul(ah0, bl9)) | 0;
		    hi = (hi + Math.imul(ah0, bh9)) | 0;
		    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
		    w9 &= 0x3ffffff;
		    /* k = 10 */
		    lo = Math.imul(al9, bl1);
		    mid = Math.imul(al9, bh1);
		    mid = (mid + Math.imul(ah9, bl1)) | 0;
		    hi = Math.imul(ah9, bh1);
		    lo = (lo + Math.imul(al8, bl2)) | 0;
		    mid = (mid + Math.imul(al8, bh2)) | 0;
		    mid = (mid + Math.imul(ah8, bl2)) | 0;
		    hi = (hi + Math.imul(ah8, bh2)) | 0;
		    lo = (lo + Math.imul(al7, bl3)) | 0;
		    mid = (mid + Math.imul(al7, bh3)) | 0;
		    mid = (mid + Math.imul(ah7, bl3)) | 0;
		    hi = (hi + Math.imul(ah7, bh3)) | 0;
		    lo = (lo + Math.imul(al6, bl4)) | 0;
		    mid = (mid + Math.imul(al6, bh4)) | 0;
		    mid = (mid + Math.imul(ah6, bl4)) | 0;
		    hi = (hi + Math.imul(ah6, bh4)) | 0;
		    lo = (lo + Math.imul(al5, bl5)) | 0;
		    mid = (mid + Math.imul(al5, bh5)) | 0;
		    mid = (mid + Math.imul(ah5, bl5)) | 0;
		    hi = (hi + Math.imul(ah5, bh5)) | 0;
		    lo = (lo + Math.imul(al4, bl6)) | 0;
		    mid = (mid + Math.imul(al4, bh6)) | 0;
		    mid = (mid + Math.imul(ah4, bl6)) | 0;
		    hi = (hi + Math.imul(ah4, bh6)) | 0;
		    lo = (lo + Math.imul(al3, bl7)) | 0;
		    mid = (mid + Math.imul(al3, bh7)) | 0;
		    mid = (mid + Math.imul(ah3, bl7)) | 0;
		    hi = (hi + Math.imul(ah3, bh7)) | 0;
		    lo = (lo + Math.imul(al2, bl8)) | 0;
		    mid = (mid + Math.imul(al2, bh8)) | 0;
		    mid = (mid + Math.imul(ah2, bl8)) | 0;
		    hi = (hi + Math.imul(ah2, bh8)) | 0;
		    lo = (lo + Math.imul(al1, bl9)) | 0;
		    mid = (mid + Math.imul(al1, bh9)) | 0;
		    mid = (mid + Math.imul(ah1, bl9)) | 0;
		    hi = (hi + Math.imul(ah1, bh9)) | 0;
		    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
		    w10 &= 0x3ffffff;
		    /* k = 11 */
		    lo = Math.imul(al9, bl2);
		    mid = Math.imul(al9, bh2);
		    mid = (mid + Math.imul(ah9, bl2)) | 0;
		    hi = Math.imul(ah9, bh2);
		    lo = (lo + Math.imul(al8, bl3)) | 0;
		    mid = (mid + Math.imul(al8, bh3)) | 0;
		    mid = (mid + Math.imul(ah8, bl3)) | 0;
		    hi = (hi + Math.imul(ah8, bh3)) | 0;
		    lo = (lo + Math.imul(al7, bl4)) | 0;
		    mid = (mid + Math.imul(al7, bh4)) | 0;
		    mid = (mid + Math.imul(ah7, bl4)) | 0;
		    hi = (hi + Math.imul(ah7, bh4)) | 0;
		    lo = (lo + Math.imul(al6, bl5)) | 0;
		    mid = (mid + Math.imul(al6, bh5)) | 0;
		    mid = (mid + Math.imul(ah6, bl5)) | 0;
		    hi = (hi + Math.imul(ah6, bh5)) | 0;
		    lo = (lo + Math.imul(al5, bl6)) | 0;
		    mid = (mid + Math.imul(al5, bh6)) | 0;
		    mid = (mid + Math.imul(ah5, bl6)) | 0;
		    hi = (hi + Math.imul(ah5, bh6)) | 0;
		    lo = (lo + Math.imul(al4, bl7)) | 0;
		    mid = (mid + Math.imul(al4, bh7)) | 0;
		    mid = (mid + Math.imul(ah4, bl7)) | 0;
		    hi = (hi + Math.imul(ah4, bh7)) | 0;
		    lo = (lo + Math.imul(al3, bl8)) | 0;
		    mid = (mid + Math.imul(al3, bh8)) | 0;
		    mid = (mid + Math.imul(ah3, bl8)) | 0;
		    hi = (hi + Math.imul(ah3, bh8)) | 0;
		    lo = (lo + Math.imul(al2, bl9)) | 0;
		    mid = (mid + Math.imul(al2, bh9)) | 0;
		    mid = (mid + Math.imul(ah2, bl9)) | 0;
		    hi = (hi + Math.imul(ah2, bh9)) | 0;
		    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
		    w11 &= 0x3ffffff;
		    /* k = 12 */
		    lo = Math.imul(al9, bl3);
		    mid = Math.imul(al9, bh3);
		    mid = (mid + Math.imul(ah9, bl3)) | 0;
		    hi = Math.imul(ah9, bh3);
		    lo = (lo + Math.imul(al8, bl4)) | 0;
		    mid = (mid + Math.imul(al8, bh4)) | 0;
		    mid = (mid + Math.imul(ah8, bl4)) | 0;
		    hi = (hi + Math.imul(ah8, bh4)) | 0;
		    lo = (lo + Math.imul(al7, bl5)) | 0;
		    mid = (mid + Math.imul(al7, bh5)) | 0;
		    mid = (mid + Math.imul(ah7, bl5)) | 0;
		    hi = (hi + Math.imul(ah7, bh5)) | 0;
		    lo = (lo + Math.imul(al6, bl6)) | 0;
		    mid = (mid + Math.imul(al6, bh6)) | 0;
		    mid = (mid + Math.imul(ah6, bl6)) | 0;
		    hi = (hi + Math.imul(ah6, bh6)) | 0;
		    lo = (lo + Math.imul(al5, bl7)) | 0;
		    mid = (mid + Math.imul(al5, bh7)) | 0;
		    mid = (mid + Math.imul(ah5, bl7)) | 0;
		    hi = (hi + Math.imul(ah5, bh7)) | 0;
		    lo = (lo + Math.imul(al4, bl8)) | 0;
		    mid = (mid + Math.imul(al4, bh8)) | 0;
		    mid = (mid + Math.imul(ah4, bl8)) | 0;
		    hi = (hi + Math.imul(ah4, bh8)) | 0;
		    lo = (lo + Math.imul(al3, bl9)) | 0;
		    mid = (mid + Math.imul(al3, bh9)) | 0;
		    mid = (mid + Math.imul(ah3, bl9)) | 0;
		    hi = (hi + Math.imul(ah3, bh9)) | 0;
		    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
		    w12 &= 0x3ffffff;
		    /* k = 13 */
		    lo = Math.imul(al9, bl4);
		    mid = Math.imul(al9, bh4);
		    mid = (mid + Math.imul(ah9, bl4)) | 0;
		    hi = Math.imul(ah9, bh4);
		    lo = (lo + Math.imul(al8, bl5)) | 0;
		    mid = (mid + Math.imul(al8, bh5)) | 0;
		    mid = (mid + Math.imul(ah8, bl5)) | 0;
		    hi = (hi + Math.imul(ah8, bh5)) | 0;
		    lo = (lo + Math.imul(al7, bl6)) | 0;
		    mid = (mid + Math.imul(al7, bh6)) | 0;
		    mid = (mid + Math.imul(ah7, bl6)) | 0;
		    hi = (hi + Math.imul(ah7, bh6)) | 0;
		    lo = (lo + Math.imul(al6, bl7)) | 0;
		    mid = (mid + Math.imul(al6, bh7)) | 0;
		    mid = (mid + Math.imul(ah6, bl7)) | 0;
		    hi = (hi + Math.imul(ah6, bh7)) | 0;
		    lo = (lo + Math.imul(al5, bl8)) | 0;
		    mid = (mid + Math.imul(al5, bh8)) | 0;
		    mid = (mid + Math.imul(ah5, bl8)) | 0;
		    hi = (hi + Math.imul(ah5, bh8)) | 0;
		    lo = (lo + Math.imul(al4, bl9)) | 0;
		    mid = (mid + Math.imul(al4, bh9)) | 0;
		    mid = (mid + Math.imul(ah4, bl9)) | 0;
		    hi = (hi + Math.imul(ah4, bh9)) | 0;
		    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
		    w13 &= 0x3ffffff;
		    /* k = 14 */
		    lo = Math.imul(al9, bl5);
		    mid = Math.imul(al9, bh5);
		    mid = (mid + Math.imul(ah9, bl5)) | 0;
		    hi = Math.imul(ah9, bh5);
		    lo = (lo + Math.imul(al8, bl6)) | 0;
		    mid = (mid + Math.imul(al8, bh6)) | 0;
		    mid = (mid + Math.imul(ah8, bl6)) | 0;
		    hi = (hi + Math.imul(ah8, bh6)) | 0;
		    lo = (lo + Math.imul(al7, bl7)) | 0;
		    mid = (mid + Math.imul(al7, bh7)) | 0;
		    mid = (mid + Math.imul(ah7, bl7)) | 0;
		    hi = (hi + Math.imul(ah7, bh7)) | 0;
		    lo = (lo + Math.imul(al6, bl8)) | 0;
		    mid = (mid + Math.imul(al6, bh8)) | 0;
		    mid = (mid + Math.imul(ah6, bl8)) | 0;
		    hi = (hi + Math.imul(ah6, bh8)) | 0;
		    lo = (lo + Math.imul(al5, bl9)) | 0;
		    mid = (mid + Math.imul(al5, bh9)) | 0;
		    mid = (mid + Math.imul(ah5, bl9)) | 0;
		    hi = (hi + Math.imul(ah5, bh9)) | 0;
		    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
		    w14 &= 0x3ffffff;
		    /* k = 15 */
		    lo = Math.imul(al9, bl6);
		    mid = Math.imul(al9, bh6);
		    mid = (mid + Math.imul(ah9, bl6)) | 0;
		    hi = Math.imul(ah9, bh6);
		    lo = (lo + Math.imul(al8, bl7)) | 0;
		    mid = (mid + Math.imul(al8, bh7)) | 0;
		    mid = (mid + Math.imul(ah8, bl7)) | 0;
		    hi = (hi + Math.imul(ah8, bh7)) | 0;
		    lo = (lo + Math.imul(al7, bl8)) | 0;
		    mid = (mid + Math.imul(al7, bh8)) | 0;
		    mid = (mid + Math.imul(ah7, bl8)) | 0;
		    hi = (hi + Math.imul(ah7, bh8)) | 0;
		    lo = (lo + Math.imul(al6, bl9)) | 0;
		    mid = (mid + Math.imul(al6, bh9)) | 0;
		    mid = (mid + Math.imul(ah6, bl9)) | 0;
		    hi = (hi + Math.imul(ah6, bh9)) | 0;
		    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
		    w15 &= 0x3ffffff;
		    /* k = 16 */
		    lo = Math.imul(al9, bl7);
		    mid = Math.imul(al9, bh7);
		    mid = (mid + Math.imul(ah9, bl7)) | 0;
		    hi = Math.imul(ah9, bh7);
		    lo = (lo + Math.imul(al8, bl8)) | 0;
		    mid = (mid + Math.imul(al8, bh8)) | 0;
		    mid = (mid + Math.imul(ah8, bl8)) | 0;
		    hi = (hi + Math.imul(ah8, bh8)) | 0;
		    lo = (lo + Math.imul(al7, bl9)) | 0;
		    mid = (mid + Math.imul(al7, bh9)) | 0;
		    mid = (mid + Math.imul(ah7, bl9)) | 0;
		    hi = (hi + Math.imul(ah7, bh9)) | 0;
		    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
		    w16 &= 0x3ffffff;
		    /* k = 17 */
		    lo = Math.imul(al9, bl8);
		    mid = Math.imul(al9, bh8);
		    mid = (mid + Math.imul(ah9, bl8)) | 0;
		    hi = Math.imul(ah9, bh8);
		    lo = (lo + Math.imul(al8, bl9)) | 0;
		    mid = (mid + Math.imul(al8, bh9)) | 0;
		    mid = (mid + Math.imul(ah8, bl9)) | 0;
		    hi = (hi + Math.imul(ah8, bh9)) | 0;
		    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
		    w17 &= 0x3ffffff;
		    /* k = 18 */
		    lo = Math.imul(al9, bl9);
		    mid = Math.imul(al9, bh9);
		    mid = (mid + Math.imul(ah9, bl9)) | 0;
		    hi = Math.imul(ah9, bh9);
		    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
		    w18 &= 0x3ffffff;
		    o[0] = w0;
		    o[1] = w1;
		    o[2] = w2;
		    o[3] = w3;
		    o[4] = w4;
		    o[5] = w5;
		    o[6] = w6;
		    o[7] = w7;
		    o[8] = w8;
		    o[9] = w9;
		    o[10] = w10;
		    o[11] = w11;
		    o[12] = w12;
		    o[13] = w13;
		    o[14] = w14;
		    o[15] = w15;
		    o[16] = w16;
		    o[17] = w17;
		    o[18] = w18;
		    if (c !== 0) {
		      o[19] = c;
		      out.length++;
		    }
		    return out;
		  };

		  // Polyfill comb
		  if (!Math.imul) {
		    comb10MulTo = smallMulTo;
		  }

		  function bigMulTo (self, num, out) {
		    out.negative = num.negative ^ self.negative;
		    out.length = self.length + num.length;

		    var carry = 0;
		    var hncarry = 0;
		    for (var k = 0; k < out.length - 1; k++) {
		      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
		      // note that ncarry could be >= 0x3ffffff
		      var ncarry = hncarry;
		      hncarry = 0;
		      var rword = carry & 0x3ffffff;
		      var maxJ = Math.min(k, num.length - 1);
		      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
		        var i = k - j;
		        var a = self.words[i] | 0;
		        var b = num.words[j] | 0;
		        var r = a * b;

		        var lo = r & 0x3ffffff;
		        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
		        lo = (lo + rword) | 0;
		        rword = lo & 0x3ffffff;
		        ncarry = (ncarry + (lo >>> 26)) | 0;

		        hncarry += ncarry >>> 26;
		        ncarry &= 0x3ffffff;
		      }
		      out.words[k] = rword;
		      carry = ncarry;
		      ncarry = hncarry;
		    }
		    if (carry !== 0) {
		      out.words[k] = carry;
		    } else {
		      out.length--;
		    }

		    return out._strip();
		  }

		  function jumboMulTo (self, num, out) {
		    // Temporary disable, see https://github.com/indutny/bn.js/issues/211
		    // var fftm = new FFTM();
		    // return fftm.mulp(self, num, out);
		    return bigMulTo(self, num, out);
		  }

		  BN.prototype.mulTo = function mulTo (num, out) {
		    var res;
		    var len = this.length + num.length;
		    if (this.length === 10 && num.length === 10) {
		      res = comb10MulTo(this, num, out);
		    } else if (len < 63) {
		      res = smallMulTo(this, num, out);
		    } else if (len < 1024) {
		      res = bigMulTo(this, num, out);
		    } else {
		      res = jumboMulTo(this, num, out);
		    }

		    return res;
		  };

		  // Multiply `this` by `num`
		  BN.prototype.mul = function mul (num) {
		    var out = new BN(null);
		    out.words = new Array(this.length + num.length);
		    return this.mulTo(num, out);
		  };

		  // Multiply employing FFT
		  BN.prototype.mulf = function mulf (num) {
		    var out = new BN(null);
		    out.words = new Array(this.length + num.length);
		    return jumboMulTo(this, num, out);
		  };

		  // In-place Multiplication
		  BN.prototype.imul = function imul (num) {
		    return this.clone().mulTo(num, this);
		  };

		  BN.prototype.imuln = function imuln (num) {
		    var isNegNum = num < 0;
		    if (isNegNum) num = -num;

		    assert(typeof num === 'number');
		    assert(num < 0x4000000);

		    // Carry
		    var carry = 0;
		    for (var i = 0; i < this.length; i++) {
		      var w = (this.words[i] | 0) * num;
		      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
		      carry >>= 26;
		      carry += (w / 0x4000000) | 0;
		      // NOTE: lo is 27bit maximum
		      carry += lo >>> 26;
		      this.words[i] = lo & 0x3ffffff;
		    }

		    if (carry !== 0) {
		      this.words[i] = carry;
		      this.length++;
		    }

		    return isNegNum ? this.ineg() : this;
		  };

		  BN.prototype.muln = function muln (num) {
		    return this.clone().imuln(num);
		  };

		  // `this` * `this`
		  BN.prototype.sqr = function sqr () {
		    return this.mul(this);
		  };

		  // `this` * `this` in-place
		  BN.prototype.isqr = function isqr () {
		    return this.imul(this.clone());
		  };

		  // Math.pow(`this`, `num`)
		  BN.prototype.pow = function pow (num) {
		    var w = toBitArray(num);
		    if (w.length === 0) return new BN(1);

		    // Skip leading zeroes
		    var res = this;
		    for (var i = 0; i < w.length; i++, res = res.sqr()) {
		      if (w[i] !== 0) break;
		    }

		    if (++i < w.length) {
		      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
		        if (w[i] === 0) continue;

		        res = res.mul(q);
		      }
		    }

		    return res;
		  };

		  // Shift-left in-place
		  BN.prototype.iushln = function iushln (bits) {
		    assert(typeof bits === 'number' && bits >= 0);
		    var r = bits % 26;
		    var s = (bits - r) / 26;
		    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
		    var i;

		    if (r !== 0) {
		      var carry = 0;

		      for (i = 0; i < this.length; i++) {
		        var newCarry = this.words[i] & carryMask;
		        var c = ((this.words[i] | 0) - newCarry) << r;
		        this.words[i] = c | carry;
		        carry = newCarry >>> (26 - r);
		      }

		      if (carry) {
		        this.words[i] = carry;
		        this.length++;
		      }
		    }

		    if (s !== 0) {
		      for (i = this.length - 1; i >= 0; i--) {
		        this.words[i + s] = this.words[i];
		      }

		      for (i = 0; i < s; i++) {
		        this.words[i] = 0;
		      }

		      this.length += s;
		    }

		    return this._strip();
		  };

		  BN.prototype.ishln = function ishln (bits) {
		    // TODO(indutny): implement me
		    assert(this.negative === 0);
		    return this.iushln(bits);
		  };

		  // Shift-right in-place
		  // NOTE: `hint` is a lowest bit before trailing zeroes
		  // NOTE: if `extended` is present - it will be filled with destroyed bits
		  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
		    assert(typeof bits === 'number' && bits >= 0);
		    var h;
		    if (hint) {
		      h = (hint - (hint % 26)) / 26;
		    } else {
		      h = 0;
		    }

		    var r = bits % 26;
		    var s = Math.min((bits - r) / 26, this.length);
		    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
		    var maskedWords = extended;

		    h -= s;
		    h = Math.max(0, h);

		    // Extended mode, copy masked part
		    if (maskedWords) {
		      for (var i = 0; i < s; i++) {
		        maskedWords.words[i] = this.words[i];
		      }
		      maskedWords.length = s;
		    }

		    if (s === 0) ; else if (this.length > s) {
		      this.length -= s;
		      for (i = 0; i < this.length; i++) {
		        this.words[i] = this.words[i + s];
		      }
		    } else {
		      this.words[0] = 0;
		      this.length = 1;
		    }

		    var carry = 0;
		    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
		      var word = this.words[i] | 0;
		      this.words[i] = (carry << (26 - r)) | (word >>> r);
		      carry = word & mask;
		    }

		    // Push carried bits as a mask
		    if (maskedWords && carry !== 0) {
		      maskedWords.words[maskedWords.length++] = carry;
		    }

		    if (this.length === 0) {
		      this.words[0] = 0;
		      this.length = 1;
		    }

		    return this._strip();
		  };

		  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
		    // TODO(indutny): implement me
		    assert(this.negative === 0);
		    return this.iushrn(bits, hint, extended);
		  };

		  // Shift-left
		  BN.prototype.shln = function shln (bits) {
		    return this.clone().ishln(bits);
		  };

		  BN.prototype.ushln = function ushln (bits) {
		    return this.clone().iushln(bits);
		  };

		  // Shift-right
		  BN.prototype.shrn = function shrn (bits) {
		    return this.clone().ishrn(bits);
		  };

		  BN.prototype.ushrn = function ushrn (bits) {
		    return this.clone().iushrn(bits);
		  };

		  // Test if n bit is set
		  BN.prototype.testn = function testn (bit) {
		    assert(typeof bit === 'number' && bit >= 0);
		    var r = bit % 26;
		    var s = (bit - r) / 26;
		    var q = 1 << r;

		    // Fast case: bit is much higher than all existing words
		    if (this.length <= s) return false;

		    // Check bit and return
		    var w = this.words[s];

		    return !!(w & q);
		  };

		  // Return only lowers bits of number (in-place)
		  BN.prototype.imaskn = function imaskn (bits) {
		    assert(typeof bits === 'number' && bits >= 0);
		    var r = bits % 26;
		    var s = (bits - r) / 26;

		    assert(this.negative === 0, 'imaskn works only with positive numbers');

		    if (this.length <= s) {
		      return this;
		    }

		    if (r !== 0) {
		      s++;
		    }
		    this.length = Math.min(s, this.length);

		    if (r !== 0) {
		      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
		      this.words[this.length - 1] &= mask;
		    }

		    return this._strip();
		  };

		  // Return only lowers bits of number
		  BN.prototype.maskn = function maskn (bits) {
		    return this.clone().imaskn(bits);
		  };

		  // Add plain number `num` to `this`
		  BN.prototype.iaddn = function iaddn (num) {
		    assert(typeof num === 'number');
		    assert(num < 0x4000000);
		    if (num < 0) return this.isubn(-num);

		    // Possible sign change
		    if (this.negative !== 0) {
		      if (this.length === 1 && (this.words[0] | 0) <= num) {
		        this.words[0] = num - (this.words[0] | 0);
		        this.negative = 0;
		        return this;
		      }

		      this.negative = 0;
		      this.isubn(num);
		      this.negative = 1;
		      return this;
		    }

		    // Add without checks
		    return this._iaddn(num);
		  };

		  BN.prototype._iaddn = function _iaddn (num) {
		    this.words[0] += num;

		    // Carry
		    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
		      this.words[i] -= 0x4000000;
		      if (i === this.length - 1) {
		        this.words[i + 1] = 1;
		      } else {
		        this.words[i + 1]++;
		      }
		    }
		    this.length = Math.max(this.length, i + 1);

		    return this;
		  };

		  // Subtract plain number `num` from `this`
		  BN.prototype.isubn = function isubn (num) {
		    assert(typeof num === 'number');
		    assert(num < 0x4000000);
		    if (num < 0) return this.iaddn(-num);

		    if (this.negative !== 0) {
		      this.negative = 0;
		      this.iaddn(num);
		      this.negative = 1;
		      return this;
		    }

		    this.words[0] -= num;

		    if (this.length === 1 && this.words[0] < 0) {
		      this.words[0] = -this.words[0];
		      this.negative = 1;
		    } else {
		      // Carry
		      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
		        this.words[i] += 0x4000000;
		        this.words[i + 1] -= 1;
		      }
		    }

		    return this._strip();
		  };

		  BN.prototype.addn = function addn (num) {
		    return this.clone().iaddn(num);
		  };

		  BN.prototype.subn = function subn (num) {
		    return this.clone().isubn(num);
		  };

		  BN.prototype.iabs = function iabs () {
		    this.negative = 0;

		    return this;
		  };

		  BN.prototype.abs = function abs () {
		    return this.clone().iabs();
		  };

		  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
		    var len = num.length + shift;
		    var i;

		    this._expand(len);

		    var w;
		    var carry = 0;
		    for (i = 0; i < num.length; i++) {
		      w = (this.words[i + shift] | 0) + carry;
		      var right = (num.words[i] | 0) * mul;
		      w -= right & 0x3ffffff;
		      carry = (w >> 26) - ((right / 0x4000000) | 0);
		      this.words[i + shift] = w & 0x3ffffff;
		    }
		    for (; i < this.length - shift; i++) {
		      w = (this.words[i + shift] | 0) + carry;
		      carry = w >> 26;
		      this.words[i + shift] = w & 0x3ffffff;
		    }

		    if (carry === 0) return this._strip();

		    // Subtraction overflow
		    assert(carry === -1);
		    carry = 0;
		    for (i = 0; i < this.length; i++) {
		      w = -(this.words[i] | 0) + carry;
		      carry = w >> 26;
		      this.words[i] = w & 0x3ffffff;
		    }
		    this.negative = 1;

		    return this._strip();
		  };

		  BN.prototype._wordDiv = function _wordDiv (num, mode) {
		    var shift = this.length - num.length;

		    var a = this.clone();
		    var b = num;

		    // Normalize
		    var bhi = b.words[b.length - 1] | 0;
		    var bhiBits = this._countBits(bhi);
		    shift = 26 - bhiBits;
		    if (shift !== 0) {
		      b = b.ushln(shift);
		      a.iushln(shift);
		      bhi = b.words[b.length - 1] | 0;
		    }

		    // Initialize quotient
		    var m = a.length - b.length;
		    var q;

		    if (mode !== 'mod') {
		      q = new BN(null);
		      q.length = m + 1;
		      q.words = new Array(q.length);
		      for (var i = 0; i < q.length; i++) {
		        q.words[i] = 0;
		      }
		    }

		    var diff = a.clone()._ishlnsubmul(b, 1, m);
		    if (diff.negative === 0) {
		      a = diff;
		      if (q) {
		        q.words[m] = 1;
		      }
		    }

		    for (var j = m - 1; j >= 0; j--) {
		      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
		        (a.words[b.length + j - 1] | 0);

		      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
		      // (0x7ffffff)
		      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

		      a._ishlnsubmul(b, qj, j);
		      while (a.negative !== 0) {
		        qj--;
		        a.negative = 0;
		        a._ishlnsubmul(b, 1, j);
		        if (!a.isZero()) {
		          a.negative ^= 1;
		        }
		      }
		      if (q) {
		        q.words[j] = qj;
		      }
		    }
		    if (q) {
		      q._strip();
		    }
		    a._strip();

		    // Denormalize
		    if (mode !== 'div' && shift !== 0) {
		      a.iushrn(shift);
		    }

		    return {
		      div: q || null,
		      mod: a
		    };
		  };

		  // NOTE: 1) `mode` can be set to `mod` to request mod only,
		  //       to `div` to request div only, or be absent to
		  //       request both div & mod
		  //       2) `positive` is true if unsigned mod is requested
		  BN.prototype.divmod = function divmod (num, mode, positive) {
		    assert(!num.isZero());

		    if (this.isZero()) {
		      return {
		        div: new BN(0),
		        mod: new BN(0)
		      };
		    }

		    var div, mod, res;
		    if (this.negative !== 0 && num.negative === 0) {
		      res = this.neg().divmod(num, mode);

		      if (mode !== 'mod') {
		        div = res.div.neg();
		      }

		      if (mode !== 'div') {
		        mod = res.mod.neg();
		        if (positive && mod.negative !== 0) {
		          mod.iadd(num);
		        }
		      }

		      return {
		        div: div,
		        mod: mod
		      };
		    }

		    if (this.negative === 0 && num.negative !== 0) {
		      res = this.divmod(num.neg(), mode);

		      if (mode !== 'mod') {
		        div = res.div.neg();
		      }

		      return {
		        div: div,
		        mod: res.mod
		      };
		    }

		    if ((this.negative & num.negative) !== 0) {
		      res = this.neg().divmod(num.neg(), mode);

		      if (mode !== 'div') {
		        mod = res.mod.neg();
		        if (positive && mod.negative !== 0) {
		          mod.isub(num);
		        }
		      }

		      return {
		        div: res.div,
		        mod: mod
		      };
		    }

		    // Both numbers are positive at this point

		    // Strip both numbers to approximate shift value
		    if (num.length > this.length || this.cmp(num) < 0) {
		      return {
		        div: new BN(0),
		        mod: this
		      };
		    }

		    // Very short reduction
		    if (num.length === 1) {
		      if (mode === 'div') {
		        return {
		          div: this.divn(num.words[0]),
		          mod: null
		        };
		      }

		      if (mode === 'mod') {
		        return {
		          div: null,
		          mod: new BN(this.modrn(num.words[0]))
		        };
		      }

		      return {
		        div: this.divn(num.words[0]),
		        mod: new BN(this.modrn(num.words[0]))
		      };
		    }

		    return this._wordDiv(num, mode);
		  };

		  // Find `this` / `num`
		  BN.prototype.div = function div (num) {
		    return this.divmod(num, 'div', false).div;
		  };

		  // Find `this` % `num`
		  BN.prototype.mod = function mod (num) {
		    return this.divmod(num, 'mod', false).mod;
		  };

		  BN.prototype.umod = function umod (num) {
		    return this.divmod(num, 'mod', true).mod;
		  };

		  // Find Round(`this` / `num`)
		  BN.prototype.divRound = function divRound (num) {
		    var dm = this.divmod(num);

		    // Fast case - exact division
		    if (dm.mod.isZero()) return dm.div;

		    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

		    var half = num.ushrn(1);
		    var r2 = num.andln(1);
		    var cmp = mod.cmp(half);

		    // Round down
		    if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;

		    // Round up
		    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
		  };

		  BN.prototype.modrn = function modrn (num) {
		    var isNegNum = num < 0;
		    if (isNegNum) num = -num;

		    assert(num <= 0x3ffffff);
		    var p = (1 << 26) % num;

		    var acc = 0;
		    for (var i = this.length - 1; i >= 0; i--) {
		      acc = (p * acc + (this.words[i] | 0)) % num;
		    }

		    return isNegNum ? -acc : acc;
		  };

		  // WARNING: DEPRECATED
		  BN.prototype.modn = function modn (num) {
		    return this.modrn(num);
		  };

		  // In-place division by number
		  BN.prototype.idivn = function idivn (num) {
		    var isNegNum = num < 0;
		    if (isNegNum) num = -num;

		    assert(num <= 0x3ffffff);

		    var carry = 0;
		    for (var i = this.length - 1; i >= 0; i--) {
		      var w = (this.words[i] | 0) + carry * 0x4000000;
		      this.words[i] = (w / num) | 0;
		      carry = w % num;
		    }

		    this._strip();
		    return isNegNum ? this.ineg() : this;
		  };

		  BN.prototype.divn = function divn (num) {
		    return this.clone().idivn(num);
		  };

		  BN.prototype.egcd = function egcd (p) {
		    assert(p.negative === 0);
		    assert(!p.isZero());

		    var x = this;
		    var y = p.clone();

		    if (x.negative !== 0) {
		      x = x.umod(p);
		    } else {
		      x = x.clone();
		    }

		    // A * x + B * y = x
		    var A = new BN(1);
		    var B = new BN(0);

		    // C * x + D * y = y
		    var C = new BN(0);
		    var D = new BN(1);

		    var g = 0;

		    while (x.isEven() && y.isEven()) {
		      x.iushrn(1);
		      y.iushrn(1);
		      ++g;
		    }

		    var yp = y.clone();
		    var xp = x.clone();

		    while (!x.isZero()) {
		      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
		      if (i > 0) {
		        x.iushrn(i);
		        while (i-- > 0) {
		          if (A.isOdd() || B.isOdd()) {
		            A.iadd(yp);
		            B.isub(xp);
		          }

		          A.iushrn(1);
		          B.iushrn(1);
		        }
		      }

		      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
		      if (j > 0) {
		        y.iushrn(j);
		        while (j-- > 0) {
		          if (C.isOdd() || D.isOdd()) {
		            C.iadd(yp);
		            D.isub(xp);
		          }

		          C.iushrn(1);
		          D.iushrn(1);
		        }
		      }

		      if (x.cmp(y) >= 0) {
		        x.isub(y);
		        A.isub(C);
		        B.isub(D);
		      } else {
		        y.isub(x);
		        C.isub(A);
		        D.isub(B);
		      }
		    }

		    return {
		      a: C,
		      b: D,
		      gcd: y.iushln(g)
		    };
		  };

		  // This is reduced incarnation of the binary EEA
		  // above, designated to invert members of the
		  // _prime_ fields F(p) at a maximal speed
		  BN.prototype._invmp = function _invmp (p) {
		    assert(p.negative === 0);
		    assert(!p.isZero());

		    var a = this;
		    var b = p.clone();

		    if (a.negative !== 0) {
		      a = a.umod(p);
		    } else {
		      a = a.clone();
		    }

		    var x1 = new BN(1);
		    var x2 = new BN(0);

		    var delta = b.clone();

		    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
		      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
		      if (i > 0) {
		        a.iushrn(i);
		        while (i-- > 0) {
		          if (x1.isOdd()) {
		            x1.iadd(delta);
		          }

		          x1.iushrn(1);
		        }
		      }

		      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
		      if (j > 0) {
		        b.iushrn(j);
		        while (j-- > 0) {
		          if (x2.isOdd()) {
		            x2.iadd(delta);
		          }

		          x2.iushrn(1);
		        }
		      }

		      if (a.cmp(b) >= 0) {
		        a.isub(b);
		        x1.isub(x2);
		      } else {
		        b.isub(a);
		        x2.isub(x1);
		      }
		    }

		    var res;
		    if (a.cmpn(1) === 0) {
		      res = x1;
		    } else {
		      res = x2;
		    }

		    if (res.cmpn(0) < 0) {
		      res.iadd(p);
		    }

		    return res;
		  };

		  BN.prototype.gcd = function gcd (num) {
		    if (this.isZero()) return num.abs();
		    if (num.isZero()) return this.abs();

		    var a = this.clone();
		    var b = num.clone();
		    a.negative = 0;
		    b.negative = 0;

		    // Remove common factor of two
		    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
		      a.iushrn(1);
		      b.iushrn(1);
		    }

		    do {
		      while (a.isEven()) {
		        a.iushrn(1);
		      }
		      while (b.isEven()) {
		        b.iushrn(1);
		      }

		      var r = a.cmp(b);
		      if (r < 0) {
		        // Swap `a` and `b` to make `a` always bigger than `b`
		        var t = a;
		        a = b;
		        b = t;
		      } else if (r === 0 || b.cmpn(1) === 0) {
		        break;
		      }

		      a.isub(b);
		    } while (true);

		    return b.iushln(shift);
		  };

		  // Invert number in the field F(num)
		  BN.prototype.invm = function invm (num) {
		    return this.egcd(num).a.umod(num);
		  };

		  BN.prototype.isEven = function isEven () {
		    return (this.words[0] & 1) === 0;
		  };

		  BN.prototype.isOdd = function isOdd () {
		    return (this.words[0] & 1) === 1;
		  };

		  // And first word and num
		  BN.prototype.andln = function andln (num) {
		    return this.words[0] & num;
		  };

		  // Increment at the bit position in-line
		  BN.prototype.bincn = function bincn (bit) {
		    assert(typeof bit === 'number');
		    var r = bit % 26;
		    var s = (bit - r) / 26;
		    var q = 1 << r;

		    // Fast case: bit is much higher than all existing words
		    if (this.length <= s) {
		      this._expand(s + 1);
		      this.words[s] |= q;
		      return this;
		    }

		    // Add bit and propagate, if needed
		    var carry = q;
		    for (var i = s; carry !== 0 && i < this.length; i++) {
		      var w = this.words[i] | 0;
		      w += carry;
		      carry = w >>> 26;
		      w &= 0x3ffffff;
		      this.words[i] = w;
		    }
		    if (carry !== 0) {
		      this.words[i] = carry;
		      this.length++;
		    }
		    return this;
		  };

		  BN.prototype.isZero = function isZero () {
		    return this.length === 1 && this.words[0] === 0;
		  };

		  BN.prototype.cmpn = function cmpn (num) {
		    var negative = num < 0;

		    if (this.negative !== 0 && !negative) return -1;
		    if (this.negative === 0 && negative) return 1;

		    this._strip();

		    var res;
		    if (this.length > 1) {
		      res = 1;
		    } else {
		      if (negative) {
		        num = -num;
		      }

		      assert(num <= 0x3ffffff, 'Number is too big');

		      var w = this.words[0] | 0;
		      res = w === num ? 0 : w < num ? -1 : 1;
		    }
		    if (this.negative !== 0) return -res | 0;
		    return res;
		  };

		  // Compare two numbers and return:
		  // 1 - if `this` > `num`
		  // 0 - if `this` == `num`
		  // -1 - if `this` < `num`
		  BN.prototype.cmp = function cmp (num) {
		    if (this.negative !== 0 && num.negative === 0) return -1;
		    if (this.negative === 0 && num.negative !== 0) return 1;

		    var res = this.ucmp(num);
		    if (this.negative !== 0) return -res | 0;
		    return res;
		  };

		  // Unsigned comparison
		  BN.prototype.ucmp = function ucmp (num) {
		    // At this point both numbers have the same sign
		    if (this.length > num.length) return 1;
		    if (this.length < num.length) return -1;

		    var res = 0;
		    for (var i = this.length - 1; i >= 0; i--) {
		      var a = this.words[i] | 0;
		      var b = num.words[i] | 0;

		      if (a === b) continue;
		      if (a < b) {
		        res = -1;
		      } else if (a > b) {
		        res = 1;
		      }
		      break;
		    }
		    return res;
		  };

		  BN.prototype.gtn = function gtn (num) {
		    return this.cmpn(num) === 1;
		  };

		  BN.prototype.gt = function gt (num) {
		    return this.cmp(num) === 1;
		  };

		  BN.prototype.gten = function gten (num) {
		    return this.cmpn(num) >= 0;
		  };

		  BN.prototype.gte = function gte (num) {
		    return this.cmp(num) >= 0;
		  };

		  BN.prototype.ltn = function ltn (num) {
		    return this.cmpn(num) === -1;
		  };

		  BN.prototype.lt = function lt (num) {
		    return this.cmp(num) === -1;
		  };

		  BN.prototype.lten = function lten (num) {
		    return this.cmpn(num) <= 0;
		  };

		  BN.prototype.lte = function lte (num) {
		    return this.cmp(num) <= 0;
		  };

		  BN.prototype.eqn = function eqn (num) {
		    return this.cmpn(num) === 0;
		  };

		  BN.prototype.eq = function eq (num) {
		    return this.cmp(num) === 0;
		  };

		  //
		  // A reduce context, could be using montgomery or something better, depending
		  // on the `m` itself.
		  //
		  BN.red = function red (num) {
		    return new Red(num);
		  };

		  BN.prototype.toRed = function toRed (ctx) {
		    assert(!this.red, 'Already a number in reduction context');
		    assert(this.negative === 0, 'red works only with positives');
		    return ctx.convertTo(this)._forceRed(ctx);
		  };

		  BN.prototype.fromRed = function fromRed () {
		    assert(this.red, 'fromRed works only with numbers in reduction context');
		    return this.red.convertFrom(this);
		  };

		  BN.prototype._forceRed = function _forceRed (ctx) {
		    this.red = ctx;
		    return this;
		  };

		  BN.prototype.forceRed = function forceRed (ctx) {
		    assert(!this.red, 'Already a number in reduction context');
		    return this._forceRed(ctx);
		  };

		  BN.prototype.redAdd = function redAdd (num) {
		    assert(this.red, 'redAdd works only with red numbers');
		    return this.red.add(this, num);
		  };

		  BN.prototype.redIAdd = function redIAdd (num) {
		    assert(this.red, 'redIAdd works only with red numbers');
		    return this.red.iadd(this, num);
		  };

		  BN.prototype.redSub = function redSub (num) {
		    assert(this.red, 'redSub works only with red numbers');
		    return this.red.sub(this, num);
		  };

		  BN.prototype.redISub = function redISub (num) {
		    assert(this.red, 'redISub works only with red numbers');
		    return this.red.isub(this, num);
		  };

		  BN.prototype.redShl = function redShl (num) {
		    assert(this.red, 'redShl works only with red numbers');
		    return this.red.shl(this, num);
		  };

		  BN.prototype.redMul = function redMul (num) {
		    assert(this.red, 'redMul works only with red numbers');
		    this.red._verify2(this, num);
		    return this.red.mul(this, num);
		  };

		  BN.prototype.redIMul = function redIMul (num) {
		    assert(this.red, 'redMul works only with red numbers');
		    this.red._verify2(this, num);
		    return this.red.imul(this, num);
		  };

		  BN.prototype.redSqr = function redSqr () {
		    assert(this.red, 'redSqr works only with red numbers');
		    this.red._verify1(this);
		    return this.red.sqr(this);
		  };

		  BN.prototype.redISqr = function redISqr () {
		    assert(this.red, 'redISqr works only with red numbers');
		    this.red._verify1(this);
		    return this.red.isqr(this);
		  };

		  // Square root over p
		  BN.prototype.redSqrt = function redSqrt () {
		    assert(this.red, 'redSqrt works only with red numbers');
		    this.red._verify1(this);
		    return this.red.sqrt(this);
		  };

		  BN.prototype.redInvm = function redInvm () {
		    assert(this.red, 'redInvm works only with red numbers');
		    this.red._verify1(this);
		    return this.red.invm(this);
		  };

		  // Return negative clone of `this` % `red modulo`
		  BN.prototype.redNeg = function redNeg () {
		    assert(this.red, 'redNeg works only with red numbers');
		    this.red._verify1(this);
		    return this.red.neg(this);
		  };

		  BN.prototype.redPow = function redPow (num) {
		    assert(this.red && !num.red, 'redPow(normalNum)');
		    this.red._verify1(this);
		    return this.red.pow(this, num);
		  };

		  // Prime numbers with efficient reduction
		  var primes = {
		    k256: null,
		    p224: null,
		    p192: null,
		    p25519: null
		  };

		  // Pseudo-Mersenne prime
		  function MPrime (name, p) {
		    // P = 2 ^ N - K
		    this.name = name;
		    this.p = new BN(p, 16);
		    this.n = this.p.bitLength();
		    this.k = new BN(1).iushln(this.n).isub(this.p);

		    this.tmp = this._tmp();
		  }

		  MPrime.prototype._tmp = function _tmp () {
		    var tmp = new BN(null);
		    tmp.words = new Array(Math.ceil(this.n / 13));
		    return tmp;
		  };

		  MPrime.prototype.ireduce = function ireduce (num) {
		    // Assumes that `num` is less than `P^2`
		    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
		    var r = num;
		    var rlen;

		    do {
		      this.split(r, this.tmp);
		      r = this.imulK(r);
		      r = r.iadd(this.tmp);
		      rlen = r.bitLength();
		    } while (rlen > this.n);

		    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
		    if (cmp === 0) {
		      r.words[0] = 0;
		      r.length = 1;
		    } else if (cmp > 0) {
		      r.isub(this.p);
		    } else {
		      if (r.strip !== undefined) {
		        // r is a BN v4 instance
		        r.strip();
		      } else {
		        // r is a BN v5 instance
		        r._strip();
		      }
		    }

		    return r;
		  };

		  MPrime.prototype.split = function split (input, out) {
		    input.iushrn(this.n, 0, out);
		  };

		  MPrime.prototype.imulK = function imulK (num) {
		    return num.imul(this.k);
		  };

		  function K256 () {
		    MPrime.call(
		      this,
		      'k256',
		      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
		  }
		  inherits(K256, MPrime);

		  K256.prototype.split = function split (input, output) {
		    // 256 = 9 * 26 + 22
		    var mask = 0x3fffff;

		    var outLen = Math.min(input.length, 9);
		    for (var i = 0; i < outLen; i++) {
		      output.words[i] = input.words[i];
		    }
		    output.length = outLen;

		    if (input.length <= 9) {
		      input.words[0] = 0;
		      input.length = 1;
		      return;
		    }

		    // Shift by 9 limbs
		    var prev = input.words[9];
		    output.words[output.length++] = prev & mask;

		    for (i = 10; i < input.length; i++) {
		      var next = input.words[i] | 0;
		      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
		      prev = next;
		    }
		    prev >>>= 22;
		    input.words[i - 10] = prev;
		    if (prev === 0 && input.length > 10) {
		      input.length -= 10;
		    } else {
		      input.length -= 9;
		    }
		  };

		  K256.prototype.imulK = function imulK (num) {
		    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
		    num.words[num.length] = 0;
		    num.words[num.length + 1] = 0;
		    num.length += 2;

		    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
		    var lo = 0;
		    for (var i = 0; i < num.length; i++) {
		      var w = num.words[i] | 0;
		      lo += w * 0x3d1;
		      num.words[i] = lo & 0x3ffffff;
		      lo = w * 0x40 + ((lo / 0x4000000) | 0);
		    }

		    // Fast length reduction
		    if (num.words[num.length - 1] === 0) {
		      num.length--;
		      if (num.words[num.length - 1] === 0) {
		        num.length--;
		      }
		    }
		    return num;
		  };

		  function P224 () {
		    MPrime.call(
		      this,
		      'p224',
		      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
		  }
		  inherits(P224, MPrime);

		  function P192 () {
		    MPrime.call(
		      this,
		      'p192',
		      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
		  }
		  inherits(P192, MPrime);

		  function P25519 () {
		    // 2 ^ 255 - 19
		    MPrime.call(
		      this,
		      '25519',
		      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
		  }
		  inherits(P25519, MPrime);

		  P25519.prototype.imulK = function imulK (num) {
		    // K = 0x13
		    var carry = 0;
		    for (var i = 0; i < num.length; i++) {
		      var hi = (num.words[i] | 0) * 0x13 + carry;
		      var lo = hi & 0x3ffffff;
		      hi >>>= 26;

		      num.words[i] = lo;
		      carry = hi;
		    }
		    if (carry !== 0) {
		      num.words[num.length++] = carry;
		    }
		    return num;
		  };

		  // Exported mostly for testing purposes, use plain name instead
		  BN._prime = function prime (name) {
		    // Cached version of prime
		    if (primes[name]) return primes[name];

		    var prime;
		    if (name === 'k256') {
		      prime = new K256();
		    } else if (name === 'p224') {
		      prime = new P224();
		    } else if (name === 'p192') {
		      prime = new P192();
		    } else if (name === 'p25519') {
		      prime = new P25519();
		    } else {
		      throw new Error('Unknown prime ' + name);
		    }
		    primes[name] = prime;

		    return prime;
		  };

		  //
		  // Base reduction engine
		  //
		  function Red (m) {
		    if (typeof m === 'string') {
		      var prime = BN._prime(m);
		      this.m = prime.p;
		      this.prime = prime;
		    } else {
		      assert(m.gtn(1), 'modulus must be greater than 1');
		      this.m = m;
		      this.prime = null;
		    }
		  }

		  Red.prototype._verify1 = function _verify1 (a) {
		    assert(a.negative === 0, 'red works only with positives');
		    assert(a.red, 'red works only with red numbers');
		  };

		  Red.prototype._verify2 = function _verify2 (a, b) {
		    assert((a.negative | b.negative) === 0, 'red works only with positives');
		    assert(a.red && a.red === b.red,
		      'red works only with red numbers');
		  };

		  Red.prototype.imod = function imod (a) {
		    if (this.prime) return this.prime.ireduce(a)._forceRed(this);

		    move(a, a.umod(this.m)._forceRed(this));
		    return a;
		  };

		  Red.prototype.neg = function neg (a) {
		    if (a.isZero()) {
		      return a.clone();
		    }

		    return this.m.sub(a)._forceRed(this);
		  };

		  Red.prototype.add = function add (a, b) {
		    this._verify2(a, b);

		    var res = a.add(b);
		    if (res.cmp(this.m) >= 0) {
		      res.isub(this.m);
		    }
		    return res._forceRed(this);
		  };

		  Red.prototype.iadd = function iadd (a, b) {
		    this._verify2(a, b);

		    var res = a.iadd(b);
		    if (res.cmp(this.m) >= 0) {
		      res.isub(this.m);
		    }
		    return res;
		  };

		  Red.prototype.sub = function sub (a, b) {
		    this._verify2(a, b);

		    var res = a.sub(b);
		    if (res.cmpn(0) < 0) {
		      res.iadd(this.m);
		    }
		    return res._forceRed(this);
		  };

		  Red.prototype.isub = function isub (a, b) {
		    this._verify2(a, b);

		    var res = a.isub(b);
		    if (res.cmpn(0) < 0) {
		      res.iadd(this.m);
		    }
		    return res;
		  };

		  Red.prototype.shl = function shl (a, num) {
		    this._verify1(a);
		    return this.imod(a.ushln(num));
		  };

		  Red.prototype.imul = function imul (a, b) {
		    this._verify2(a, b);
		    return this.imod(a.imul(b));
		  };

		  Red.prototype.mul = function mul (a, b) {
		    this._verify2(a, b);
		    return this.imod(a.mul(b));
		  };

		  Red.prototype.isqr = function isqr (a) {
		    return this.imul(a, a.clone());
		  };

		  Red.prototype.sqr = function sqr (a) {
		    return this.mul(a, a);
		  };

		  Red.prototype.sqrt = function sqrt (a) {
		    if (a.isZero()) return a.clone();

		    var mod3 = this.m.andln(3);
		    assert(mod3 % 2 === 1);

		    // Fast case
		    if (mod3 === 3) {
		      var pow = this.m.add(new BN(1)).iushrn(2);
		      return this.pow(a, pow);
		    }

		    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
		    //
		    // Find Q and S, that Q * 2 ^ S = (P - 1)
		    var q = this.m.subn(1);
		    var s = 0;
		    while (!q.isZero() && q.andln(1) === 0) {
		      s++;
		      q.iushrn(1);
		    }
		    assert(!q.isZero());

		    var one = new BN(1).toRed(this);
		    var nOne = one.redNeg();

		    // Find quadratic non-residue
		    // NOTE: Max is such because of generalized Riemann hypothesis.
		    var lpow = this.m.subn(1).iushrn(1);
		    var z = this.m.bitLength();
		    z = new BN(2 * z * z).toRed(this);

		    while (this.pow(z, lpow).cmp(nOne) !== 0) {
		      z.redIAdd(nOne);
		    }

		    var c = this.pow(z, q);
		    var r = this.pow(a, q.addn(1).iushrn(1));
		    var t = this.pow(a, q);
		    var m = s;
		    while (t.cmp(one) !== 0) {
		      var tmp = t;
		      for (var i = 0; tmp.cmp(one) !== 0; i++) {
		        tmp = tmp.redSqr();
		      }
		      assert(i < m);
		      var b = this.pow(c, new BN(1).iushln(m - i - 1));

		      r = r.redMul(b);
		      c = b.redSqr();
		      t = t.redMul(c);
		      m = i;
		    }

		    return r;
		  };

		  Red.prototype.invm = function invm (a) {
		    var inv = a._invmp(this.m);
		    if (inv.negative !== 0) {
		      inv.negative = 0;
		      return this.imod(inv).redNeg();
		    } else {
		      return this.imod(inv);
		    }
		  };

		  Red.prototype.pow = function pow (a, num) {
		    if (num.isZero()) return new BN(1).toRed(this);
		    if (num.cmpn(1) === 0) return a.clone();

		    var windowSize = 4;
		    var wnd = new Array(1 << windowSize);
		    wnd[0] = new BN(1).toRed(this);
		    wnd[1] = a;
		    for (var i = 2; i < wnd.length; i++) {
		      wnd[i] = this.mul(wnd[i - 1], a);
		    }

		    var res = wnd[0];
		    var current = 0;
		    var currentLen = 0;
		    var start = num.bitLength() % 26;
		    if (start === 0) {
		      start = 26;
		    }

		    for (i = num.length - 1; i >= 0; i--) {
		      var word = num.words[i];
		      for (var j = start - 1; j >= 0; j--) {
		        var bit = (word >> j) & 1;
		        if (res !== wnd[0]) {
		          res = this.sqr(res);
		        }

		        if (bit === 0 && current === 0) {
		          currentLen = 0;
		          continue;
		        }

		        current <<= 1;
		        current |= bit;
		        currentLen++;
		        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

		        res = this.mul(res, wnd[current]);
		        currentLen = 0;
		        current = 0;
		      }
		      start = 26;
		    }

		    return res;
		  };

		  Red.prototype.convertTo = function convertTo (num) {
		    var r = num.umod(this.m);

		    return r === num ? r.clone() : r;
		  };

		  Red.prototype.convertFrom = function convertFrom (num) {
		    var res = num.clone();
		    res.red = null;
		    return res;
		  };

		  //
		  // Montgomery method engine
		  //

		  BN.mont = function mont (num) {
		    return new Mont(num);
		  };

		  function Mont (m) {
		    Red.call(this, m);

		    this.shift = this.m.bitLength();
		    if (this.shift % 26 !== 0) {
		      this.shift += 26 - (this.shift % 26);
		    }

		    this.r = new BN(1).iushln(this.shift);
		    this.r2 = this.imod(this.r.sqr());
		    this.rinv = this.r._invmp(this.m);

		    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
		    this.minv = this.minv.umod(this.r);
		    this.minv = this.r.sub(this.minv);
		  }
		  inherits(Mont, Red);

		  Mont.prototype.convertTo = function convertTo (num) {
		    return this.imod(num.ushln(this.shift));
		  };

		  Mont.prototype.convertFrom = function convertFrom (num) {
		    var r = this.imod(num.mul(this.rinv));
		    r.red = null;
		    return r;
		  };

		  Mont.prototype.imul = function imul (a, b) {
		    if (a.isZero() || b.isZero()) {
		      a.words[0] = 0;
		      a.length = 1;
		      return a;
		    }

		    var t = a.imul(b);
		    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
		    var u = t.isub(c).iushrn(this.shift);
		    var res = u;

		    if (u.cmp(this.m) >= 0) {
		      res = u.isub(this.m);
		    } else if (u.cmpn(0) < 0) {
		      res = u.iadd(this.m);
		    }

		    return res._forceRed(this);
		  };

		  Mont.prototype.mul = function mul (a, b) {
		    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

		    var t = a.mul(b);
		    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
		    var u = t.isub(c).iushrn(this.shift);
		    var res = u;
		    if (u.cmp(this.m) >= 0) {
		      res = u.isub(this.m);
		    } else if (u.cmpn(0) < 0) {
		      res = u.iadd(this.m);
		    }

		    return res._forceRed(this);
		  };

		  Mont.prototype.invm = function invm (a) {
		    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
		    var res = this.imod(a._invmp(this.m).mul(this.r2));
		    return res._forceRed(this);
		  };
		})(module, commonjsGlobal);
	} (bn$1));

	var _BN = bnExports$1;

	const version$8 = "bignumber/5.7.0";

	var BN$9 = _BN.BN;
	const logger$b = new Logger(version$8);
	const _constructorGuard$2 = {};
	const MAX_SAFE = 0x1fffffffffffff;
	function isBigNumberish(value) {
	    return (value != null) && (BigNumber.isBigNumber(value) ||
	        (typeof (value) === "number" && (value % 1) === 0) ||
	        (typeof (value) === "string" && !!value.match(/^-?[0-9]+$/)) ||
	        isHexString$1(value) ||
	        (typeof (value) === "bigint") ||
	        isBytes(value));
	}
	// Only warn about passing 10 into radix once
	let _warnedToStringRadix = false;
	class BigNumber {
	    constructor(constructorGuard, hex) {
	        if (constructorGuard !== _constructorGuard$2) {
	            logger$b.throwError("cannot call constructor directly; use BigNumber.from", Logger.errors.UNSUPPORTED_OPERATION, {
	                operation: "new (BigNumber)"
	            });
	        }
	        this._hex = hex;
	        this._isBigNumber = true;
	        Object.freeze(this);
	    }
	    fromTwos(value) {
	        return toBigNumber(toBN(this).fromTwos(value));
	    }
	    toTwos(value) {
	        return toBigNumber(toBN(this).toTwos(value));
	    }
	    abs() {
	        if (this._hex[0] === "-") {
	            return BigNumber.from(this._hex.substring(1));
	        }
	        return this;
	    }
	    add(other) {
	        return toBigNumber(toBN(this).add(toBN(other)));
	    }
	    sub(other) {
	        return toBigNumber(toBN(this).sub(toBN(other)));
	    }
	    div(other) {
	        const o = BigNumber.from(other);
	        if (o.isZero()) {
	            throwFault$1("division-by-zero", "div");
	        }
	        return toBigNumber(toBN(this).div(toBN(other)));
	    }
	    mul(other) {
	        return toBigNumber(toBN(this).mul(toBN(other)));
	    }
	    mod(other) {
	        const value = toBN(other);
	        if (value.isNeg()) {
	            throwFault$1("division-by-zero", "mod");
	        }
	        return toBigNumber(toBN(this).umod(value));
	    }
	    pow(other) {
	        const value = toBN(other);
	        if (value.isNeg()) {
	            throwFault$1("negative-power", "pow");
	        }
	        return toBigNumber(toBN(this).pow(value));
	    }
	    and(other) {
	        const value = toBN(other);
	        if (this.isNegative() || value.isNeg()) {
	            throwFault$1("unbound-bitwise-result", "and");
	        }
	        return toBigNumber(toBN(this).and(value));
	    }
	    or(other) {
	        const value = toBN(other);
	        if (this.isNegative() || value.isNeg()) {
	            throwFault$1("unbound-bitwise-result", "or");
	        }
	        return toBigNumber(toBN(this).or(value));
	    }
	    xor(other) {
	        const value = toBN(other);
	        if (this.isNegative() || value.isNeg()) {
	            throwFault$1("unbound-bitwise-result", "xor");
	        }
	        return toBigNumber(toBN(this).xor(value));
	    }
	    mask(value) {
	        if (this.isNegative() || value < 0) {
	            throwFault$1("negative-width", "mask");
	        }
	        return toBigNumber(toBN(this).maskn(value));
	    }
	    shl(value) {
	        if (this.isNegative() || value < 0) {
	            throwFault$1("negative-width", "shl");
	        }
	        return toBigNumber(toBN(this).shln(value));
	    }
	    shr(value) {
	        if (this.isNegative() || value < 0) {
	            throwFault$1("negative-width", "shr");
	        }
	        return toBigNumber(toBN(this).shrn(value));
	    }
	    eq(other) {
	        return toBN(this).eq(toBN(other));
	    }
	    lt(other) {
	        return toBN(this).lt(toBN(other));
	    }
	    lte(other) {
	        return toBN(this).lte(toBN(other));
	    }
	    gt(other) {
	        return toBN(this).gt(toBN(other));
	    }
	    gte(other) {
	        return toBN(this).gte(toBN(other));
	    }
	    isNegative() {
	        return (this._hex[0] === "-");
	    }
	    isZero() {
	        return toBN(this).isZero();
	    }
	    toNumber() {
	        try {
	            return toBN(this).toNumber();
	        }
	        catch (error) {
	            throwFault$1("overflow", "toNumber", this.toString());
	        }
	        return null;
	    }
	    toBigInt() {
	        try {
	            return BigInt(this.toString());
	        }
	        catch (e) { }
	        return logger$b.throwError("this platform does not support BigInt", Logger.errors.UNSUPPORTED_OPERATION, {
	            value: this.toString()
	        });
	    }
	    toString() {
	        // Lots of people expect this, which we do not support, so check (See: #889)
	        if (arguments.length > 0) {
	            if (arguments[0] === 10) {
	                if (!_warnedToStringRadix) {
	                    _warnedToStringRadix = true;
	                    logger$b.warn("BigNumber.toString does not accept any parameters; base-10 is assumed");
	                }
	            }
	            else if (arguments[0] === 16) {
	                logger$b.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()", Logger.errors.UNEXPECTED_ARGUMENT, {});
	            }
	            else {
	                logger$b.throwError("BigNumber.toString does not accept parameters", Logger.errors.UNEXPECTED_ARGUMENT, {});
	            }
	        }
	        return toBN(this).toString(10);
	    }
	    toHexString() {
	        return this._hex;
	    }
	    toJSON(key) {
	        return { type: "BigNumber", hex: this.toHexString() };
	    }
	    static from(value) {
	        if (value instanceof BigNumber) {
	            return value;
	        }
	        if (typeof (value) === "string") {
	            if (value.match(/^-?0x[0-9a-f]+$/i)) {
	                return new BigNumber(_constructorGuard$2, toHex$2(value));
	            }
	            if (value.match(/^-?[0-9]+$/)) {
	                return new BigNumber(_constructorGuard$2, toHex$2(new BN$9(value)));
	            }
	            return logger$b.throwArgumentError("invalid BigNumber string", "value", value);
	        }
	        if (typeof (value) === "number") {
	            if (value % 1) {
	                throwFault$1("underflow", "BigNumber.from", value);
	            }
	            if (value >= MAX_SAFE || value <= -MAX_SAFE) {
	                throwFault$1("overflow", "BigNumber.from", value);
	            }
	            return BigNumber.from(String(value));
	        }
	        const anyValue = value;
	        if (typeof (anyValue) === "bigint") {
	            return BigNumber.from(anyValue.toString());
	        }
	        if (isBytes(anyValue)) {
	            return BigNumber.from(hexlify(anyValue));
	        }
	        if (anyValue) {
	            // Hexable interface (takes priority)
	            if (anyValue.toHexString) {
	                const hex = anyValue.toHexString();
	                if (typeof (hex) === "string") {
	                    return BigNumber.from(hex);
	                }
	            }
	            else {
	                // For now, handle legacy JSON-ified values (goes away in v6)
	                let hex = anyValue._hex;
	                // New-form JSON
	                if (hex == null && anyValue.type === "BigNumber") {
	                    hex = anyValue.hex;
	                }
	                if (typeof (hex) === "string") {
	                    if (isHexString$1(hex) || (hex[0] === "-" && isHexString$1(hex.substring(1)))) {
	                        return BigNumber.from(hex);
	                    }
	                }
	            }
	        }
	        return logger$b.throwArgumentError("invalid BigNumber value", "value", value);
	    }
	    static isBigNumber(value) {
	        return !!(value && value._isBigNumber);
	    }
	}
	// Normalize the hex string
	function toHex$2(value) {
	    // For BN, call on the hex string
	    if (typeof (value) !== "string") {
	        return toHex$2(value.toString(16));
	    }
	    // If negative, prepend the negative sign to the normalized positive value
	    if (value[0] === "-") {
	        // Strip off the negative sign
	        value = value.substring(1);
	        // Cannot have multiple negative signs (e.g. "--0x04")
	        if (value[0] === "-") {
	            logger$b.throwArgumentError("invalid hex", "value", value);
	        }
	        // Call toHex on the positive component
	        value = toHex$2(value);
	        // Do not allow "-0x00"
	        if (value === "0x00") {
	            return value;
	        }
	        // Negate the value
	        return "-" + value;
	    }
	    // Add a "0x" prefix if missing
	    if (value.substring(0, 2) !== "0x") {
	        value = "0x" + value;
	    }
	    // Normalize zero
	    if (value === "0x") {
	        return "0x00";
	    }
	    // Make the string even length
	    if (value.length % 2) {
	        value = "0x0" + value.substring(2);
	    }
	    // Trim to smallest even-length string
	    while (value.length > 4 && value.substring(0, 4) === "0x00") {
	        value = "0x" + value.substring(4);
	    }
	    return value;
	}
	function toBigNumber(value) {
	    return BigNumber.from(toHex$2(value));
	}
	function toBN(value) {
	    const hex = BigNumber.from(value).toHexString();
	    if (hex[0] === "-") {
	        return (new BN$9("-" + hex.substring(3), 16));
	    }
	    return new BN$9(hex.substring(2), 16);
	}
	function throwFault$1(fault, operation, value) {
	    const params = { fault: fault, operation: operation };
	    if (value != null) {
	        params.value = value;
	    }
	    return logger$b.throwError(fault, Logger.errors.NUMERIC_FAULT, params);
	}
	// value should have no prefix
	function _base36To16(value) {
	    return (new BN$9(value, 36)).toString(16);
	}
	// value should have no prefix
	function _base16To36(value) {
	    return (new BN$9(value, 16)).toString(36);
	}

	const logger$a = new Logger(version$8);
	const _constructorGuard$1 = {};
	const Zero$1 = BigNumber.from(0);
	const NegativeOne$1 = BigNumber.from(-1);
	function throwFault(message, fault, operation, value) {
	    const params = { fault: fault, operation: operation };
	    if (value !== undefined) {
	        params.value = value;
	    }
	    return logger$a.throwError(message, Logger.errors.NUMERIC_FAULT, params);
	}
	// Constant to pull zeros from for multipliers
	let zeros = "0";
	while (zeros.length < 256) {
	    zeros += zeros;
	}
	// Returns a string "1" followed by decimal "0"s
	function getMultiplier(decimals) {
	    if (typeof (decimals) !== "number") {
	        try {
	            decimals = BigNumber.from(decimals).toNumber();
	        }
	        catch (e) { }
	    }
	    if (typeof (decimals) === "number" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {
	        return ("1" + zeros.substring(0, decimals));
	    }
	    return logger$a.throwArgumentError("invalid decimal size", "decimals", decimals);
	}
	function formatFixed(value, decimals) {
	    if (decimals == null) {
	        decimals = 0;
	    }
	    const multiplier = getMultiplier(decimals);
	    // Make sure wei is a big number (convert as necessary)
	    value = BigNumber.from(value);
	    const negative = value.lt(Zero$1);
	    if (negative) {
	        value = value.mul(NegativeOne$1);
	    }
	    let fraction = value.mod(multiplier).toString();
	    while (fraction.length < multiplier.length - 1) {
	        fraction = "0" + fraction;
	    }
	    // Strip training 0
	    fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
	    const whole = value.div(multiplier).toString();
	    if (multiplier.length === 1) {
	        value = whole;
	    }
	    else {
	        value = whole + "." + fraction;
	    }
	    if (negative) {
	        value = "-" + value;
	    }
	    return value;
	}
	function parseFixed(value, decimals) {
	    if (decimals == null) {
	        decimals = 0;
	    }
	    const multiplier = getMultiplier(decimals);
	    if (typeof (value) !== "string" || !value.match(/^-?[0-9.]+$/)) {
	        logger$a.throwArgumentError("invalid decimal value", "value", value);
	    }
	    // Is it negative?
	    const negative = (value.substring(0, 1) === "-");
	    if (negative) {
	        value = value.substring(1);
	    }
	    if (value === ".") {
	        logger$a.throwArgumentError("missing value", "value", value);
	    }
	    // Split it into a whole and fractional part
	    const comps = value.split(".");
	    if (comps.length > 2) {
	        logger$a.throwArgumentError("too many decimal points", "value", value);
	    }
	    let whole = comps[0], fraction = comps[1];
	    if (!whole) {
	        whole = "0";
	    }
	    if (!fraction) {
	        fraction = "0";
	    }
	    // Trim trailing zeros
	    while (fraction[fraction.length - 1] === "0") {
	        fraction = fraction.substring(0, fraction.length - 1);
	    }
	    // Check the fraction doesn't exceed our decimals size
	    if (fraction.length > multiplier.length - 1) {
	        throwFault("fractional component exceeds decimals", "underflow", "parseFixed");
	    }
	    // If decimals is 0, we have an empty string for fraction
	    if (fraction === "") {
	        fraction = "0";
	    }
	    // Fully pad the string with zeros to get to wei
	    while (fraction.length < multiplier.length - 1) {
	        fraction += "0";
	    }
	    const wholeValue = BigNumber.from(whole);
	    const fractionValue = BigNumber.from(fraction);
	    let wei = (wholeValue.mul(multiplier)).add(fractionValue);
	    if (negative) {
	        wei = wei.mul(NegativeOne$1);
	    }
	    return wei;
	}
	class FixedFormat {
	    constructor(constructorGuard, signed, width, decimals) {
	        if (constructorGuard !== _constructorGuard$1) {
	            logger$a.throwError("cannot use FixedFormat constructor; use FixedFormat.from", Logger.errors.UNSUPPORTED_OPERATION, {
	                operation: "new FixedFormat"
	            });
	        }
	        this.signed = signed;
	        this.width = width;
	        this.decimals = decimals;
	        this.name = (signed ? "" : "u") + "fixed" + String(width) + "x" + String(decimals);
	        this._multiplier = getMultiplier(decimals);
	        Object.freeze(this);
	    }
	    static from(value) {
	        if (value instanceof FixedFormat) {
	            return value;
	        }
	        if (typeof (value) === "number") {
	            value = `fixed128x${value}`;
	        }
	        let signed = true;
	        let width = 128;
	        let decimals = 18;
	        if (typeof (value) === "string") {
	            if (value === "fixed") ;
	            else if (value === "ufixed") {
	                signed = false;
	            }
	            else {
	                const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
	                if (!match) {
	                    logger$a.throwArgumentError("invalid fixed format", "format", value);
	                }
	                signed = (match[1] !== "u");
	                width = parseInt(match[2]);
	                decimals = parseInt(match[3]);
	            }
	        }
	        else if (value) {
	            const check = (key, type, defaultValue) => {
	                if (value[key] == null) {
	                    return defaultValue;
	                }
	                if (typeof (value[key]) !== type) {
	                    logger$a.throwArgumentError("invalid fixed format (" + key + " not " + type + ")", "format." + key, value[key]);
	                }
	                return value[key];
	            };
	            signed = check("signed", "boolean", signed);
	            width = check("width", "number", width);
	            decimals = check("decimals", "number", decimals);
	        }
	        if (width % 8) {
	            logger$a.throwArgumentError("invalid fixed format width (not byte aligned)", "format.width", width);
	        }
	        if (decimals > 80) {
	            logger$a.throwArgumentError("invalid fixed format (decimals too large)", "format.decimals", decimals);
	        }
	        return new FixedFormat(_constructorGuard$1, signed, width, decimals);
	    }
	}
	class FixedNumber {
	    constructor(constructorGuard, hex, value, format) {
	        if (constructorGuard !== _constructorGuard$1) {
	            logger$a.throwError("cannot use FixedNumber constructor; use FixedNumber.from", Logger.errors.UNSUPPORTED_OPERATION, {
	                operation: "new FixedFormat"
	            });
	        }
	        this.format = format;
	        this._hex = hex;
	        this._value = value;
	        this._isFixedNumber = true;
	        Object.freeze(this);
	    }
	    _checkFormat(other) {
	        if (this.format.name !== other.format.name) {
	            logger$a.throwArgumentError("incompatible format; use fixedNumber.toFormat", "other", other);
	        }
	    }
	    addUnsafe(other) {
	        this._checkFormat(other);
	        const a = parseFixed(this._value, this.format.decimals);
	        const b = parseFixed(other._value, other.format.decimals);
	        return FixedNumber.fromValue(a.add(b), this.format.decimals, this.format);
	    }
	    subUnsafe(other) {
	        this._checkFormat(other);
	        const a = parseFixed(this._value, this.format.decimals);
	        const b = parseFixed(other._value, other.format.decimals);
	        return FixedNumber.fromValue(a.sub(b), this.format.decimals, this.format);
	    }
	    mulUnsafe(other) {
	        this._checkFormat(other);
	        const a = parseFixed(this._value, this.format.decimals);
	        const b = parseFixed(other._value, other.format.decimals);
	        return FixedNumber.fromValue(a.mul(b).div(this.format._multiplier), this.format.decimals, this.format);
	    }
	    divUnsafe(other) {
	        this._checkFormat(other);
	        const a = parseFixed(this._value, this.format.decimals);
	        const b = parseFixed(other._value, other.format.decimals);
	        return FixedNumber.fromValue(a.mul(this.format._multiplier).div(b), this.format.decimals, this.format);
	    }
	    floor() {
	        const comps = this.toString().split(".");
	        if (comps.length === 1) {
	            comps.push("0");
	        }
	        let result = FixedNumber.from(comps[0], this.format);
	        const hasFraction = !comps[1].match(/^(0*)$/);
	        if (this.isNegative() && hasFraction) {
	            result = result.subUnsafe(ONE.toFormat(result.format));
	        }
	        return result;
	    }
	    ceiling() {
	        const comps = this.toString().split(".");
	        if (comps.length === 1) {
	            comps.push("0");
	        }
	        let result = FixedNumber.from(comps[0], this.format);
	        const hasFraction = !comps[1].match(/^(0*)$/);
	        if (!this.isNegative() && hasFraction) {
	            result = result.addUnsafe(ONE.toFormat(result.format));
	        }
	        return result;
	    }
	    // @TODO: Support other rounding algorithms
	    round(decimals) {
	        if (decimals == null) {
	            decimals = 0;
	        }
	        // If we are already in range, we're done
	        const comps = this.toString().split(".");
	        if (comps.length === 1) {
	            comps.push("0");
	        }
	        if (decimals < 0 || decimals > 80 || (decimals % 1)) {
	            logger$a.throwArgumentError("invalid decimal count", "decimals", decimals);
	        }
	        if (comps[1].length <= decimals) {
	            return this;
	        }
	        const factor = FixedNumber.from("1" + zeros.substring(0, decimals), this.format);
	        const bump = BUMP.toFormat(this.format);
	        return this.mulUnsafe(factor).addUnsafe(bump).floor().divUnsafe(factor);
	    }
	    isZero() {
	        return (this._value === "0.0" || this._value === "0");
	    }
	    isNegative() {
	        return (this._value[0] === "-");
	    }
	    toString() { return this._value; }
	    toHexString(width) {
	        if (width == null) {
	            return this._hex;
	        }
	        if (width % 8) {
	            logger$a.throwArgumentError("invalid byte width", "width", width);
	        }
	        const hex = BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();
	        return hexZeroPad(hex, width / 8);
	    }
	    toUnsafeFloat() { return parseFloat(this.toString()); }
	    toFormat(format) {
	        return FixedNumber.fromString(this._value, format);
	    }
	    static fromValue(value, decimals, format) {
	        // If decimals looks more like a format, and there is no format, shift the parameters
	        if (format == null && decimals != null && !isBigNumberish(decimals)) {
	            format = decimals;
	            decimals = null;
	        }
	        if (decimals == null) {
	            decimals = 0;
	        }
	        if (format == null) {
	            format = "fixed";
	        }
	        return FixedNumber.fromString(formatFixed(value, decimals), FixedFormat.from(format));
	    }
	    static fromString(value, format) {
	        if (format == null) {
	            format = "fixed";
	        }
	        const fixedFormat = FixedFormat.from(format);
	        const numeric = parseFixed(value, fixedFormat.decimals);
	        if (!fixedFormat.signed && numeric.lt(Zero$1)) {
	            throwFault("unsigned value cannot be negative", "overflow", "value", value);
	        }
	        let hex = null;
	        if (fixedFormat.signed) {
	            hex = numeric.toTwos(fixedFormat.width).toHexString();
	        }
	        else {
	            hex = numeric.toHexString();
	            hex = hexZeroPad(hex, fixedFormat.width / 8);
	        }
	        const decimal = formatFixed(numeric, fixedFormat.decimals);
	        return new FixedNumber(_constructorGuard$1, hex, decimal, fixedFormat);
	    }
	    static fromBytes(value, format) {
	        if (format == null) {
	            format = "fixed";
	        }
	        const fixedFormat = FixedFormat.from(format);
	        if (arrayify(value).length > fixedFormat.width / 8) {
	            throw new Error("overflow");
	        }
	        let numeric = BigNumber.from(value);
	        if (fixedFormat.signed) {
	            numeric = numeric.fromTwos(fixedFormat.width);
	        }
	        const hex = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();
	        const decimal = formatFixed(numeric, fixedFormat.decimals);
	        return new FixedNumber(_constructorGuard$1, hex, decimal, fixedFormat);
	    }
	    static from(value, format) {
	        if (typeof (value) === "string") {
	            return FixedNumber.fromString(value, format);
	        }
	        if (isBytes(value)) {
	            return FixedNumber.fromBytes(value, format);
	        }
	        try {
	            return FixedNumber.fromValue(value, 0, format);
	        }
	        catch (error) {
	            // Allow NUMERIC_FAULT to bubble up
	            if (error.code !== Logger.errors.INVALID_ARGUMENT) {
	                throw error;
	            }
	        }
	        return logger$a.throwArgumentError("invalid FixedNumber value", "value", value);
	    }
	    static isFixedNumber(value) {
	        return !!(value && value._isFixedNumber);
	    }
	}
	const ONE = FixedNumber.from(1);
	const BUMP = FixedNumber.from("0.5");

	var lib_esm$4 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		BigNumber: BigNumber,
		FixedFormat: FixedFormat,
		FixedNumber: FixedNumber,
		_base16To36: _base16To36,
		_base36To16: _base36To16,
		formatFixed: formatFixed,
		parseFixed: parseFixed
	});

	var sha3Exports = {};
	var sha3$3 = {
	  get exports(){ return sha3Exports; },
	  set exports(v){ sha3Exports = v; },
	};

	(function (module) {
		/*jslint bitwise: true */
		(function () {

		  var INPUT_ERROR = 'input is invalid type';
		  var FINALIZE_ERROR = 'finalize already called';
		  var WINDOW = typeof window === 'object';
		  var root = WINDOW ? window : {};
		  if (root.JS_SHA3_NO_WINDOW) {
		    WINDOW = false;
		  }
		  var WEB_WORKER = !WINDOW && typeof self === 'object';
		  var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process$1 === 'object' && process$1.versions && process$1.versions.node;
		  if (NODE_JS) {
		    root = commonjsGlobal;
		  } else if (WEB_WORKER) {
		    root = self;
		  }
		  var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && 'object' === 'object' && module.exports;
		  var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';
		  var HEX_CHARS = '0123456789abcdef'.split('');
		  var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
		  var CSHAKE_PADDING = [4, 1024, 262144, 67108864];
		  var KECCAK_PADDING = [1, 256, 65536, 16777216];
		  var PADDING = [6, 1536, 393216, 100663296];
		  var SHIFT = [0, 8, 16, 24];
		  var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,
		    0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,
		    2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,
		    2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,
		    2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
		  var BITS = [224, 256, 384, 512];
		  var SHAKE_BITS = [128, 256];
		  var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array', 'digest'];
		  var CSHAKE_BYTEPAD = {
		    '128': 168,
		    '256': 136
		  };

		  if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {
		    Array.isArray = function (obj) {
		      return Object.prototype.toString.call(obj) === '[object Array]';
		    };
		  }

		  if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
		    ArrayBuffer.isView = function (obj) {
		      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;
		    };
		  }

		  var createOutputMethod = function (bits, padding, outputType) {
		    return function (message) {
		      return new Keccak(bits, padding, bits).update(message)[outputType]();
		    };
		  };

		  var createShakeOutputMethod = function (bits, padding, outputType) {
		    return function (message, outputBits) {
		      return new Keccak(bits, padding, outputBits).update(message)[outputType]();
		    };
		  };

		  var createCshakeOutputMethod = function (bits, padding, outputType) {
		    return function (message, outputBits, n, s) {
		      return methods['cshake' + bits].update(message, outputBits, n, s)[outputType]();
		    };
		  };

		  var createKmacOutputMethod = function (bits, padding, outputType) {
		    return function (key, message, outputBits, s) {
		      return methods['kmac' + bits].update(key, message, outputBits, s)[outputType]();
		    };
		  };

		  var createOutputMethods = function (method, createMethod, bits, padding) {
		    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
		      var type = OUTPUT_TYPES[i];
		      method[type] = createMethod(bits, padding, type);
		    }
		    return method;
		  };

		  var createMethod = function (bits, padding) {
		    var method = createOutputMethod(bits, padding, 'hex');
		    method.create = function () {
		      return new Keccak(bits, padding, bits);
		    };
		    method.update = function (message) {
		      return method.create().update(message);
		    };
		    return createOutputMethods(method, createOutputMethod, bits, padding);
		  };

		  var createShakeMethod = function (bits, padding) {
		    var method = createShakeOutputMethod(bits, padding, 'hex');
		    method.create = function (outputBits) {
		      return new Keccak(bits, padding, outputBits);
		    };
		    method.update = function (message, outputBits) {
		      return method.create(outputBits).update(message);
		    };
		    return createOutputMethods(method, createShakeOutputMethod, bits, padding);
		  };

		  var createCshakeMethod = function (bits, padding) {
		    var w = CSHAKE_BYTEPAD[bits];
		    var method = createCshakeOutputMethod(bits, padding, 'hex');
		    method.create = function (outputBits, n, s) {
		      if (!n && !s) {
		        return methods['shake' + bits].create(outputBits);
		      } else {
		        return new Keccak(bits, padding, outputBits).bytepad([n, s], w);
		      }
		    };
		    method.update = function (message, outputBits, n, s) {
		      return method.create(outputBits, n, s).update(message);
		    };
		    return createOutputMethods(method, createCshakeOutputMethod, bits, padding);
		  };

		  var createKmacMethod = function (bits, padding) {
		    var w = CSHAKE_BYTEPAD[bits];
		    var method = createKmacOutputMethod(bits, padding, 'hex');
		    method.create = function (key, outputBits, s) {
		      return new Kmac(bits, padding, outputBits).bytepad(['KMAC', s], w).bytepad([key], w);
		    };
		    method.update = function (key, message, outputBits, s) {
		      return method.create(key, outputBits, s).update(message);
		    };
		    return createOutputMethods(method, createKmacOutputMethod, bits, padding);
		  };

		  var algorithms = [
		    { name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod },
		    { name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod },
		    { name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },
		    { name: 'cshake', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },
		    { name: 'kmac', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }
		  ];

		  var methods = {}, methodNames = [];

		  for (var i = 0; i < algorithms.length; ++i) {
		    var algorithm = algorithms[i];
		    var bits = algorithm.bits;
		    for (var j = 0; j < bits.length; ++j) {
		      var methodName = algorithm.name + '_' + bits[j];
		      methodNames.push(methodName);
		      methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
		      if (algorithm.name !== 'sha3') {
		        var newMethodName = algorithm.name + bits[j];
		        methodNames.push(newMethodName);
		        methods[newMethodName] = methods[methodName];
		      }
		    }
		  }

		  function Keccak(bits, padding, outputBits) {
		    this.blocks = [];
		    this.s = [];
		    this.padding = padding;
		    this.outputBits = outputBits;
		    this.reset = true;
		    this.finalized = false;
		    this.block = 0;
		    this.start = 0;
		    this.blockCount = (1600 - (bits << 1)) >> 5;
		    this.byteCount = this.blockCount << 2;
		    this.outputBlocks = outputBits >> 5;
		    this.extraBytes = (outputBits & 31) >> 3;

		    for (var i = 0; i < 50; ++i) {
		      this.s[i] = 0;
		    }
		  }

		  Keccak.prototype.update = function (message) {
		    if (this.finalized) {
		      throw new Error(FINALIZE_ERROR);
		    }
		    var notString, type = typeof message;
		    if (type !== 'string') {
		      if (type === 'object') {
		        if (message === null) {
		          throw new Error(INPUT_ERROR);
		        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
		          message = new Uint8Array(message);
		        } else if (!Array.isArray(message)) {
		          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
		            throw new Error(INPUT_ERROR);
		          }
		        }
		      } else {
		        throw new Error(INPUT_ERROR);
		      }
		      notString = true;
		    }
		    var blocks = this.blocks, byteCount = this.byteCount, length = message.length,
		      blockCount = this.blockCount, index = 0, s = this.s, i, code;

		    while (index < length) {
		      if (this.reset) {
		        this.reset = false;
		        blocks[0] = this.block;
		        for (i = 1; i < blockCount + 1; ++i) {
		          blocks[i] = 0;
		        }
		      }
		      if (notString) {
		        for (i = this.start; index < length && i < byteCount; ++index) {
		          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
		        }
		      } else {
		        for (i = this.start; index < length && i < byteCount; ++index) {
		          code = message.charCodeAt(index);
		          if (code < 0x80) {
		            blocks[i >> 2] |= code << SHIFT[i++ & 3];
		          } else if (code < 0x800) {
		            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
		            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
		          } else if (code < 0xd800 || code >= 0xe000) {
		            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
		            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
		            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
		          } else {
		            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
		            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
		            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
		            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
		            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
		          }
		        }
		      }
		      this.lastByteIndex = i;
		      if (i >= byteCount) {
		        this.start = i - byteCount;
		        this.block = blocks[blockCount];
		        for (i = 0; i < blockCount; ++i) {
		          s[i] ^= blocks[i];
		        }
		        f(s);
		        this.reset = true;
		      } else {
		        this.start = i;
		      }
		    }
		    return this;
		  };

		  Keccak.prototype.encode = function (x, right) {
		    var o = x & 255, n = 1;
		    var bytes = [o];
		    x = x >> 8;
		    o = x & 255;
		    while (o > 0) {
		      bytes.unshift(o);
		      x = x >> 8;
		      o = x & 255;
		      ++n;
		    }
		    if (right) {
		      bytes.push(n);
		    } else {
		      bytes.unshift(n);
		    }
		    this.update(bytes);
		    return bytes.length;
		  };

		  Keccak.prototype.encodeString = function (str) {
		    var notString, type = typeof str;
		    if (type !== 'string') {
		      if (type === 'object') {
		        if (str === null) {
		          throw new Error(INPUT_ERROR);
		        } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {
		          str = new Uint8Array(str);
		        } else if (!Array.isArray(str)) {
		          if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {
		            throw new Error(INPUT_ERROR);
		          }
		        }
		      } else {
		        throw new Error(INPUT_ERROR);
		      }
		      notString = true;
		    }
		    var bytes = 0, length = str.length;
		    if (notString) {
		      bytes = length;
		    } else {
		      for (var i = 0; i < str.length; ++i) {
		        var code = str.charCodeAt(i);
		        if (code < 0x80) {
		          bytes += 1;
		        } else if (code < 0x800) {
		          bytes += 2;
		        } else if (code < 0xd800 || code >= 0xe000) {
		          bytes += 3;
		        } else {
		          code = 0x10000 + (((code & 0x3ff) << 10) | (str.charCodeAt(++i) & 0x3ff));
		          bytes += 4;
		        }
		      }
		    }
		    bytes += this.encode(bytes * 8);
		    this.update(str);
		    return bytes;
		  };

		  Keccak.prototype.bytepad = function (strs, w) {
		    var bytes = this.encode(w);
		    for (var i = 0; i < strs.length; ++i) {
		      bytes += this.encodeString(strs[i]);
		    }
		    var paddingBytes = w - bytes % w;
		    var zeros = [];
		    zeros.length = paddingBytes;
		    this.update(zeros);
		    return this;
		  };

		  Keccak.prototype.finalize = function () {
		    if (this.finalized) {
		      return;
		    }
		    this.finalized = true;
		    var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
		    blocks[i >> 2] |= this.padding[i & 3];
		    if (this.lastByteIndex === this.byteCount) {
		      blocks[0] = blocks[blockCount];
		      for (i = 1; i < blockCount + 1; ++i) {
		        blocks[i] = 0;
		      }
		    }
		    blocks[blockCount - 1] |= 0x80000000;
		    for (i = 0; i < blockCount; ++i) {
		      s[i] ^= blocks[i];
		    }
		    f(s);
		  };

		  Keccak.prototype.toString = Keccak.prototype.hex = function () {
		    this.finalize();

		    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
		      extraBytes = this.extraBytes, i = 0, j = 0;
		    var hex = '', block;
		    while (j < outputBlocks) {
		      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
		        block = s[i];
		        hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +
		          HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +
		          HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +
		          HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];
		      }
		      if (j % blockCount === 0) {
		        f(s);
		        i = 0;
		      }
		    }
		    if (extraBytes) {
		      block = s[i];
		      hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];
		      if (extraBytes > 1) {
		        hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];
		      }
		      if (extraBytes > 2) {
		        hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];
		      }
		    }
		    return hex;
		  };

		  Keccak.prototype.arrayBuffer = function () {
		    this.finalize();

		    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
		      extraBytes = this.extraBytes, i = 0, j = 0;
		    var bytes = this.outputBits >> 3;
		    var buffer;
		    if (extraBytes) {
		      buffer = new ArrayBuffer((outputBlocks + 1) << 2);
		    } else {
		      buffer = new ArrayBuffer(bytes);
		    }
		    var array = new Uint32Array(buffer);
		    while (j < outputBlocks) {
		      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
		        array[j] = s[i];
		      }
		      if (j % blockCount === 0) {
		        f(s);
		      }
		    }
		    if (extraBytes) {
		      array[i] = s[i];
		      buffer = buffer.slice(0, bytes);
		    }
		    return buffer;
		  };

		  Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;

		  Keccak.prototype.digest = Keccak.prototype.array = function () {
		    this.finalize();

		    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
		      extraBytes = this.extraBytes, i = 0, j = 0;
		    var array = [], offset, block;
		    while (j < outputBlocks) {
		      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
		        offset = j << 2;
		        block = s[i];
		        array[offset] = block & 0xFF;
		        array[offset + 1] = (block >> 8) & 0xFF;
		        array[offset + 2] = (block >> 16) & 0xFF;
		        array[offset + 3] = (block >> 24) & 0xFF;
		      }
		      if (j % blockCount === 0) {
		        f(s);
		      }
		    }
		    if (extraBytes) {
		      offset = j << 2;
		      block = s[i];
		      array[offset] = block & 0xFF;
		      if (extraBytes > 1) {
		        array[offset + 1] = (block >> 8) & 0xFF;
		      }
		      if (extraBytes > 2) {
		        array[offset + 2] = (block >> 16) & 0xFF;
		      }
		    }
		    return array;
		  };

		  function Kmac(bits, padding, outputBits) {
		    Keccak.call(this, bits, padding, outputBits);
		  }

		  Kmac.prototype = new Keccak();

		  Kmac.prototype.finalize = function () {
		    this.encode(this.outputBits, true);
		    return Keccak.prototype.finalize.call(this);
		  };

		  var f = function (s) {
		    var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,
		      b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,
		      b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,
		      b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
		    for (n = 0; n < 48; n += 2) {
		      c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
		      c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
		      c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
		      c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
		      c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
		      c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
		      c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
		      c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
		      c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
		      c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

		      h = c8 ^ ((c2 << 1) | (c3 >>> 31));
		      l = c9 ^ ((c3 << 1) | (c2 >>> 31));
		      s[0] ^= h;
		      s[1] ^= l;
		      s[10] ^= h;
		      s[11] ^= l;
		      s[20] ^= h;
		      s[21] ^= l;
		      s[30] ^= h;
		      s[31] ^= l;
		      s[40] ^= h;
		      s[41] ^= l;
		      h = c0 ^ ((c4 << 1) | (c5 >>> 31));
		      l = c1 ^ ((c5 << 1) | (c4 >>> 31));
		      s[2] ^= h;
		      s[3] ^= l;
		      s[12] ^= h;
		      s[13] ^= l;
		      s[22] ^= h;
		      s[23] ^= l;
		      s[32] ^= h;
		      s[33] ^= l;
		      s[42] ^= h;
		      s[43] ^= l;
		      h = c2 ^ ((c6 << 1) | (c7 >>> 31));
		      l = c3 ^ ((c7 << 1) | (c6 >>> 31));
		      s[4] ^= h;
		      s[5] ^= l;
		      s[14] ^= h;
		      s[15] ^= l;
		      s[24] ^= h;
		      s[25] ^= l;
		      s[34] ^= h;
		      s[35] ^= l;
		      s[44] ^= h;
		      s[45] ^= l;
		      h = c4 ^ ((c8 << 1) | (c9 >>> 31));
		      l = c5 ^ ((c9 << 1) | (c8 >>> 31));
		      s[6] ^= h;
		      s[7] ^= l;
		      s[16] ^= h;
		      s[17] ^= l;
		      s[26] ^= h;
		      s[27] ^= l;
		      s[36] ^= h;
		      s[37] ^= l;
		      s[46] ^= h;
		      s[47] ^= l;
		      h = c6 ^ ((c0 << 1) | (c1 >>> 31));
		      l = c7 ^ ((c1 << 1) | (c0 >>> 31));
		      s[8] ^= h;
		      s[9] ^= l;
		      s[18] ^= h;
		      s[19] ^= l;
		      s[28] ^= h;
		      s[29] ^= l;
		      s[38] ^= h;
		      s[39] ^= l;
		      s[48] ^= h;
		      s[49] ^= l;

		      b0 = s[0];
		      b1 = s[1];
		      b32 = (s[11] << 4) | (s[10] >>> 28);
		      b33 = (s[10] << 4) | (s[11] >>> 28);
		      b14 = (s[20] << 3) | (s[21] >>> 29);
		      b15 = (s[21] << 3) | (s[20] >>> 29);
		      b46 = (s[31] << 9) | (s[30] >>> 23);
		      b47 = (s[30] << 9) | (s[31] >>> 23);
		      b28 = (s[40] << 18) | (s[41] >>> 14);
		      b29 = (s[41] << 18) | (s[40] >>> 14);
		      b20 = (s[2] << 1) | (s[3] >>> 31);
		      b21 = (s[3] << 1) | (s[2] >>> 31);
		      b2 = (s[13] << 12) | (s[12] >>> 20);
		      b3 = (s[12] << 12) | (s[13] >>> 20);
		      b34 = (s[22] << 10) | (s[23] >>> 22);
		      b35 = (s[23] << 10) | (s[22] >>> 22);
		      b16 = (s[33] << 13) | (s[32] >>> 19);
		      b17 = (s[32] << 13) | (s[33] >>> 19);
		      b48 = (s[42] << 2) | (s[43] >>> 30);
		      b49 = (s[43] << 2) | (s[42] >>> 30);
		      b40 = (s[5] << 30) | (s[4] >>> 2);
		      b41 = (s[4] << 30) | (s[5] >>> 2);
		      b22 = (s[14] << 6) | (s[15] >>> 26);
		      b23 = (s[15] << 6) | (s[14] >>> 26);
		      b4 = (s[25] << 11) | (s[24] >>> 21);
		      b5 = (s[24] << 11) | (s[25] >>> 21);
		      b36 = (s[34] << 15) | (s[35] >>> 17);
		      b37 = (s[35] << 15) | (s[34] >>> 17);
		      b18 = (s[45] << 29) | (s[44] >>> 3);
		      b19 = (s[44] << 29) | (s[45] >>> 3);
		      b10 = (s[6] << 28) | (s[7] >>> 4);
		      b11 = (s[7] << 28) | (s[6] >>> 4);
		      b42 = (s[17] << 23) | (s[16] >>> 9);
		      b43 = (s[16] << 23) | (s[17] >>> 9);
		      b24 = (s[26] << 25) | (s[27] >>> 7);
		      b25 = (s[27] << 25) | (s[26] >>> 7);
		      b6 = (s[36] << 21) | (s[37] >>> 11);
		      b7 = (s[37] << 21) | (s[36] >>> 11);
		      b38 = (s[47] << 24) | (s[46] >>> 8);
		      b39 = (s[46] << 24) | (s[47] >>> 8);
		      b30 = (s[8] << 27) | (s[9] >>> 5);
		      b31 = (s[9] << 27) | (s[8] >>> 5);
		      b12 = (s[18] << 20) | (s[19] >>> 12);
		      b13 = (s[19] << 20) | (s[18] >>> 12);
		      b44 = (s[29] << 7) | (s[28] >>> 25);
		      b45 = (s[28] << 7) | (s[29] >>> 25);
		      b26 = (s[38] << 8) | (s[39] >>> 24);
		      b27 = (s[39] << 8) | (s[38] >>> 24);
		      b8 = (s[48] << 14) | (s[49] >>> 18);
		      b9 = (s[49] << 14) | (s[48] >>> 18);

		      s[0] = b0 ^ (~b2 & b4);
		      s[1] = b1 ^ (~b3 & b5);
		      s[10] = b10 ^ (~b12 & b14);
		      s[11] = b11 ^ (~b13 & b15);
		      s[20] = b20 ^ (~b22 & b24);
		      s[21] = b21 ^ (~b23 & b25);
		      s[30] = b30 ^ (~b32 & b34);
		      s[31] = b31 ^ (~b33 & b35);
		      s[40] = b40 ^ (~b42 & b44);
		      s[41] = b41 ^ (~b43 & b45);
		      s[2] = b2 ^ (~b4 & b6);
		      s[3] = b3 ^ (~b5 & b7);
		      s[12] = b12 ^ (~b14 & b16);
		      s[13] = b13 ^ (~b15 & b17);
		      s[22] = b22 ^ (~b24 & b26);
		      s[23] = b23 ^ (~b25 & b27);
		      s[32] = b32 ^ (~b34 & b36);
		      s[33] = b33 ^ (~b35 & b37);
		      s[42] = b42 ^ (~b44 & b46);
		      s[43] = b43 ^ (~b45 & b47);
		      s[4] = b4 ^ (~b6 & b8);
		      s[5] = b5 ^ (~b7 & b9);
		      s[14] = b14 ^ (~b16 & b18);
		      s[15] = b15 ^ (~b17 & b19);
		      s[24] = b24 ^ (~b26 & b28);
		      s[25] = b25 ^ (~b27 & b29);
		      s[34] = b34 ^ (~b36 & b38);
		      s[35] = b35 ^ (~b37 & b39);
		      s[44] = b44 ^ (~b46 & b48);
		      s[45] = b45 ^ (~b47 & b49);
		      s[6] = b6 ^ (~b8 & b0);
		      s[7] = b7 ^ (~b9 & b1);
		      s[16] = b16 ^ (~b18 & b10);
		      s[17] = b17 ^ (~b19 & b11);
		      s[26] = b26 ^ (~b28 & b20);
		      s[27] = b27 ^ (~b29 & b21);
		      s[36] = b36 ^ (~b38 & b30);
		      s[37] = b37 ^ (~b39 & b31);
		      s[46] = b46 ^ (~b48 & b40);
		      s[47] = b47 ^ (~b49 & b41);
		      s[8] = b8 ^ (~b0 & b2);
		      s[9] = b9 ^ (~b1 & b3);
		      s[18] = b18 ^ (~b10 & b12);
		      s[19] = b19 ^ (~b11 & b13);
		      s[28] = b28 ^ (~b20 & b22);
		      s[29] = b29 ^ (~b21 & b23);
		      s[38] = b38 ^ (~b30 & b32);
		      s[39] = b39 ^ (~b31 & b33);
		      s[48] = b48 ^ (~b40 & b42);
		      s[49] = b49 ^ (~b41 & b43);

		      s[0] ^= RC[n];
		      s[1] ^= RC[n + 1];
		    }
		  };

		  if (COMMON_JS) {
		    module.exports = methods;
		  } else {
		    for (i = 0; i < methodNames.length; ++i) {
		      root[methodNames[i]] = methods[methodNames[i]];
		    }
		  }
		})();
	} (sha3$3));

	var sha3$2 = sha3Exports;

	function keccak256(data) {
	    return '0x' + sha3$2.keccak_256(arrayify(data));
	}

	const version$7 = "rlp/5.7.0";

	const logger$9 = new Logger(version$7);
	function arrayifyInteger(value) {
	    const result = [];
	    while (value) {
	        result.unshift(value & 0xff);
	        value >>= 8;
	    }
	    return result;
	}
	function _encode(object) {
	    if (Array.isArray(object)) {
	        let payload = [];
	        object.forEach(function (child) {
	            payload = payload.concat(_encode(child));
	        });
	        if (payload.length <= 55) {
	            payload.unshift(0xc0 + payload.length);
	            return payload;
	        }
	        const length = arrayifyInteger(payload.length);
	        length.unshift(0xf7 + length.length);
	        return length.concat(payload);
	    }
	    if (!isBytesLike(object)) {
	        logger$9.throwArgumentError("RLP object must be BytesLike", "object", object);
	    }
	    const data = Array.prototype.slice.call(arrayify(object));
	    if (data.length === 1 && data[0] <= 0x7f) {
	        return data;
	    }
	    else if (data.length <= 55) {
	        data.unshift(0x80 + data.length);
	        return data;
	    }
	    const length = arrayifyInteger(data.length);
	    length.unshift(0xb7 + length.length);
	    return length.concat(data);
	}
	function encode$1(object) {
	    return hexlify(_encode(object));
	}

	const version$6 = "address/5.7.0";

	const logger$8 = new Logger(version$6);
	function getChecksumAddress(address) {
	    if (!isHexString$1(address, 20)) {
	        logger$8.throwArgumentError("invalid address", "address", address);
	    }
	    address = address.toLowerCase();
	    const chars = address.substring(2).split("");
	    const expanded = new Uint8Array(40);
	    for (let i = 0; i < 40; i++) {
	        expanded[i] = chars[i].charCodeAt(0);
	    }
	    const hashed = arrayify(keccak256(expanded));
	    for (let i = 0; i < 40; i += 2) {
	        if ((hashed[i >> 1] >> 4) >= 8) {
	            chars[i] = chars[i].toUpperCase();
	        }
	        if ((hashed[i >> 1] & 0x0f) >= 8) {
	            chars[i + 1] = chars[i + 1].toUpperCase();
	        }
	    }
	    return "0x" + chars.join("");
	}
	// Shims for environments that are missing some required constants and functions
	const MAX_SAFE_INTEGER = 0x1fffffffffffff;
	function log10(x) {
	    if (Math.log10) {
	        return Math.log10(x);
	    }
	    return Math.log(x) / Math.LN10;
	}
	// See: https://en.wikipedia.org/wiki/International_Bank_Account_Number
	// Create lookup table
	const ibanLookup = {};
	for (let i = 0; i < 10; i++) {
	    ibanLookup[String(i)] = String(i);
	}
	for (let i = 0; i < 26; i++) {
	    ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);
	}
	// How many decimal digits can we process? (for 64-bit float, this is 15)
	const safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));
	function ibanChecksum(address) {
	    address = address.toUpperCase();
	    address = address.substring(4) + address.substring(0, 2) + "00";
	    let expanded = address.split("").map((c) => { return ibanLookup[c]; }).join("");
	    // Javascript can handle integers safely up to 15 (decimal) digits
	    while (expanded.length >= safeDigits) {
	        let block = expanded.substring(0, safeDigits);
	        expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
	    }
	    let checksum = String(98 - (parseInt(expanded, 10) % 97));
	    while (checksum.length < 2) {
	        checksum = "0" + checksum;
	    }
	    return checksum;
	}
	function getAddress(address) {
	    let result = null;
	    if (typeof (address) !== "string") {
	        logger$8.throwArgumentError("invalid address", "address", address);
	    }
	    if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
	        // Missing the 0x prefix
	        if (address.substring(0, 2) !== "0x") {
	            address = "0x" + address;
	        }
	        result = getChecksumAddress(address);
	        // It is a checksummed address with a bad checksum
	        if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {
	            logger$8.throwArgumentError("bad address checksum", "address", address);
	        }
	        // Maybe ICAP? (we only support direct mode)
	    }
	    else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
	        // It is an ICAP address with a bad checksum
	        if (address.substring(2, 4) !== ibanChecksum(address)) {
	            logger$8.throwArgumentError("bad icap checksum", "address", address);
	        }
	        result = _base36To16(address.substring(4));
	        while (result.length < 40) {
	            result = "0" + result;
	        }
	        result = getChecksumAddress("0x" + result);
	    }
	    else {
	        logger$8.throwArgumentError("invalid address", "address", address);
	    }
	    return result;
	}
	function isAddress(address) {
	    try {
	        getAddress(address);
	        return true;
	    }
	    catch (error) { }
	    return false;
	}
	function getIcapAddress(address) {
	    let base36 = _base16To36(getAddress(address).substring(2)).toUpperCase();
	    while (base36.length < 30) {
	        base36 = "0" + base36;
	    }
	    return "XE" + ibanChecksum("XE00" + base36) + base36;
	}
	// http://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed
	function getContractAddress(transaction) {
	    let from = null;
	    try {
	        from = getAddress(transaction.from);
	    }
	    catch (error) {
	        logger$8.throwArgumentError("missing from address", "transaction", transaction);
	    }
	    const nonce = stripZeros(arrayify(BigNumber.from(transaction.nonce).toHexString()));
	    return getAddress(hexDataSlice(keccak256(encode$1([from, nonce])), 12));
	}
	function getCreate2Address(from, salt, initCodeHash) {
	    if (hexDataLength(salt) !== 32) {
	        logger$8.throwArgumentError("salt must be 32 bytes", "salt", salt);
	    }
	    if (hexDataLength(initCodeHash) !== 32) {
	        logger$8.throwArgumentError("initCodeHash must be 32 bytes", "initCodeHash", initCodeHash);
	    }
	    return getAddress(hexDataSlice(keccak256(concat(["0xff", getAddress(from), salt, initCodeHash])), 12));
	}

	var lib_esm$3 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		getAddress: getAddress,
		getContractAddress: getContractAddress,
		getCreate2Address: getCreate2Address,
		getIcapAddress: getIcapAddress,
		isAddress: isAddress
	});

	var require$$1$3 = /*@__PURE__*/getAugmentedNamespace(lib_esm$3);

	var CommonEvmUtilsConfig = {};

	Object.defineProperty(CommonEvmUtilsConfig, "__esModule", { value: true });
	CommonEvmUtilsConfig.CommonEvmUtilsConfig = void 0;
	CommonEvmUtilsConfig.CommonEvmUtilsConfig = {
	    formatEvmChainId: {
	        name: 'formatEvmChainId',
	        defaultValue: 'hex',
	    },
	    formatEvmAddress: {
	        name: 'formatEvmAddress',
	        defaultValue: 'lowercase',
	    },
	    defaultEvmApiChain: {
	        name: 'defaultEvmApiChain',
	        defaultValue: '0x1',
	    },
	};

	Object.defineProperty(EvmAddress$1, "__esModule", { value: true });
	EvmAddress$1.EvmAddress = void 0;
	var common_core_1$1n = lib$9;
	var address_1 = require$$1$3;
	var CommonEvmUtilsConfig_1$3 = CommonEvmUtilsConfig;
	/**
	 * A representation of an address on the EVM network.
	 *
	 * Use this class any time you work with an address, as it will provide utilities to validate the address,
	 * and format it to lowercase and checksum format.
	 *
	 * @category DataType
	 */
	var EvmAddress = /** @class */ (function () {
	    function EvmAddress(address, config) {
	        this.config = config;
	        this._value = EvmAddress.parse(address);
	    }
	    Object.defineProperty(EvmAddress, "ZERO_ADDRESS", {
	        /**
	         * @returns EvmAddress instance of the zero address: "0x0000000000000000000000000000000000000000"
	         * @example `EvmAddress.ZERO_ADDRESS`
	         */
	        get: function () {
	            return EvmAddress.create('0x0000000000000000000000000000000000000000');
	        },
	        enumerable: false,
	        configurable: true
	    });
	    /**
	     * Create a new instance of EvmAddress from any valid address input
	     *
	     * @example
	     * ```
	     * const address = EvmAddress.create("0xfb6916095ca1df60bb79ce92ce3ea74c37c5d359")
	     * const address = EvmAddress.create("0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359")
	     * const address = EvmAddress.ZERO_ADDRESS
	     * ```
	     */
	    EvmAddress.create = function (address, core) {
	        if (address instanceof EvmAddress) {
	            return address;
	        }
	        var finalCore = core || common_core_1$1n.CoreProvider.getDefault();
	        return new EvmAddress(address, finalCore.config);
	    };
	    EvmAddress.parse = function (address) {
	        if (!(0, address_1.isAddress)(address)) {
	            throw new common_core_1$1n.CoreError({
	                code: common_core_1$1n.CoreErrorCode.INVALID_ARGUMENT,
	                message: 'Invalid address provided',
	            });
	        }
	        return (0, address_1.getAddress)(address);
	    };
	    /**
	     * Check the equality between two Evm addresses
	     * @example `EvmAddress.equals("0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359", "0xfb6916095ca1df60bb79ce92ce3ea74c37c5d359")`
	     */
	    EvmAddress.equals = function (addressA, addressB) {
	        return EvmAddress.create(addressA)._value === EvmAddress.create(addressB)._value;
	    };
	    /**
	     * Checks the equality of the current address with another evm address
	     * @example `address.equals("0xfb6916095ca1df60bb79ce92ce3ea74c37c5d359")`
	     */
	    EvmAddress.prototype.equals = function (address) {
	        return EvmAddress.equals(this, address);
	    };
	    /**
	     * Formats the address to a specific format.
	     * If no formatStyle is provided as argument, it will use the `formatEvmAddress` set in the config.
	     * @example `address.format() // "0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359"`
	     */
	    EvmAddress.prototype.format = function (style) {
	        var formatStyle = style !== null && style !== void 0 ? style : this.config.get(CommonEvmUtilsConfig_1$3.CommonEvmUtilsConfig.formatEvmAddress);
	        if (formatStyle === 'checksum') {
	            return this.checksum;
	        }
	        if (formatStyle === 'lowercase') {
	            return this.lowercase;
	        }
	        throw new common_core_1$1n.CoreError({
	            code: common_core_1$1n.CoreErrorCode.INVALID_ARGUMENT,
	            message: 'Cannot format address, invalid config.formatAddress',
	        });
	    };
	    Object.defineProperty(EvmAddress.prototype, "checksum", {
	        /**
	         * @returns the address value in checksum (EIP-55) format (see https://eips.ethereum.org/EIPS/eip-55)
	         * @example `address.checksum // "0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359"`
	         */
	        get: function () {
	            return this._value;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmAddress.prototype, "lowercase", {
	        /**
	         * @returns the address value in lowercase format
	         * @example `address.lowercase // "0xfb6916095ca1df60bb79ce92ce3ea74c37c5d359"`
	         */
	        get: function () {
	            return this._value.toLowerCase();
	        },
	        enumerable: false,
	        configurable: true
	    });
	    return EvmAddress;
	}());
	EvmAddress$1.EvmAddress = EvmAddress;

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(EvmAddress$1, exports);
		
	} (EvmAddress$2));

	var EvmChain$2 = {};

	var EvmChain$1 = {};

	var chaindata = {};

	/* eslint-disable no-template-curly-in-string */
	Object.defineProperty(chaindata, "__esModule", { value: true });
	chaindata.chainList = void 0;
	// Sourced from https://chainid.network/chains.json
	chaindata.chainList = [
	    {
	        name: 'Ethereum Mainnet',
	        chain: 'ETH',
	        icon: 'ethereum',
	        rpc: [
	            'https://mainnet.infura.io/v3/${INFURA_API_KEY}',
	            'wss://mainnet.infura.io/ws/v3/${INFURA_API_KEY}',
	            'https://api.mycryptoapi.com/eth',
	            'https://cloudflare-eth.com',
	        ],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Ether',
	            symbol: 'ETH',
	            decimals: 18,
	        },
	        infoURL: 'https://ethereum.org',
	        shortName: 'eth',
	        chainId: 1,
	        networkId: 1,
	        slip44: 60,
	        ens: {
	            registry: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',
	        },
	        explorers: [
	            {
	                name: 'etherscan',
	                url: 'https://etherscan.io',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Expanse Network',
	        chain: 'EXP',
	        rpc: ['https://node.expanse.tech'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Expanse Network Ether',
	            symbol: 'EXP',
	            decimals: 18,
	        },
	        infoURL: 'https://expanse.tech',
	        shortName: 'exp',
	        chainId: 2,
	        networkId: 1,
	        slip44: 40,
	    },
	    {
	        name: 'Ropsten',
	        title: 'Ethereum Testnet Ropsten',
	        chain: 'ETH',
	        network: 'testnet',
	        rpc: ['https://ropsten.infura.io/v3/${INFURA_API_KEY}', 'wss://ropsten.infura.io/ws/v3/${INFURA_API_KEY}'],
	        faucets: ['http://fauceth.komputing.org?chain=3&address=${ADDRESS}', 'https://faucet.ropsten.be?${ADDRESS}'],
	        nativeCurrency: {
	            name: 'Ropsten Ether',
	            symbol: 'ETH',
	            decimals: 18,
	        },
	        infoURL: 'https://github.com/ethereum/ropsten',
	        shortName: 'rop',
	        chainId: 3,
	        networkId: 3,
	        ens: {
	            registry: '0x112234455c3a32fd11230c42e7bccd4a84e02010',
	        },
	        explorers: [
	            {
	                name: 'etherscan',
	                url: 'https://ropsten.etherscan.io',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Rinkeby',
	        title: 'Ethereum Testnet Rinkeby',
	        chain: 'ETH',
	        network: 'testnet',
	        rpc: ['https://rinkeby.infura.io/v3/${INFURA_API_KEY}', 'wss://rinkeby.infura.io/ws/v3/${INFURA_API_KEY}'],
	        faucets: ['http://fauceth.komputing.org?chain=4&address=${ADDRESS}', 'https://faucet.rinkeby.io'],
	        nativeCurrency: {
	            name: 'Rinkeby Ether',
	            symbol: 'ETH',
	            decimals: 18,
	        },
	        infoURL: 'https://www.rinkeby.io',
	        shortName: 'rin',
	        chainId: 4,
	        networkId: 4,
	        ens: {
	            registry: '0xe7410170f87102df0055eb195163a03b7f2bff4a',
	        },
	        explorers: [
	            {
	                name: 'etherscan-rinkeby',
	                url: 'https://rinkeby.etherscan.io',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Görli',
	        title: 'Ethereum Testnet Görli',
	        chain: 'ETH',
	        network: 'testnet',
	        rpc: [
	            'https://goerli.infura.io/v3/${INFURA_API_KEY}',
	            'wss://goerli.infura.io/v3/${INFURA_API_KEY}',
	            'https://rpc.goerli.mudit.blog/',
	        ],
	        faucets: [
	            'http://fauceth.komputing.org?chain=5&address=${ADDRESS}',
	            'https://goerli-faucet.slock.it?address=${ADDRESS}',
	            'https://faucet.goerli.mudit.blog',
	        ],
	        nativeCurrency: {
	            name: 'Görli Ether',
	            symbol: 'ETH',
	            decimals: 18,
	        },
	        infoURL: 'https://goerli.net/#about',
	        shortName: 'gor',
	        chainId: 5,
	        networkId: 5,
	        ens: {
	            registry: '0x112234455c3a32fd11230c42e7bccd4a84e02010',
	        },
	        explorers: [
	            {
	                name: 'etherscan-goerli',
	                url: 'https://goerli.etherscan.io',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Ethereum Classic Testnet Kotti',
	        chain: 'ETC',
	        rpc: ['https://www.ethercluster.com/kotti'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Kotti Ether',
	            symbol: 'KOT',
	            decimals: 18,
	        },
	        infoURL: 'https://explorer.jade.builders/?network=kotti',
	        shortName: 'kot',
	        chainId: 6,
	        networkId: 6,
	    },
	    {
	        name: 'ThaiChain',
	        chain: 'TCH',
	        rpc: ['https://rpc.dome.cloud'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'ThaiChain Ether',
	            symbol: 'TCH',
	            decimals: 18,
	        },
	        infoURL: 'https://thaichain.io',
	        shortName: 'tch',
	        chainId: 7,
	        networkId: 7,
	    },
	    {
	        name: 'Ubiq',
	        chain: 'UBQ',
	        rpc: ['https://rpc.octano.dev', 'https://pyrus2.ubiqscan.io'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Ubiq Ether',
	            symbol: 'UBQ',
	            decimals: 18,
	        },
	        infoURL: 'https://ubiqsmart.com',
	        shortName: 'ubq',
	        chainId: 8,
	        networkId: 8,
	        slip44: 108,
	        explorers: [
	            {
	                name: 'ubiqscan',
	                url: 'https://ubiqscan.io',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Ubiq Network Testnet',
	        chain: 'UBQ',
	        rpc: [],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Ubiq Testnet Ether',
	            symbol: 'TUBQ',
	            decimals: 18,
	        },
	        infoURL: 'https://ethersocial.org',
	        shortName: 'tubq',
	        chainId: 9,
	        networkId: 2,
	    },
	    {
	        name: 'Optimism',
	        chain: 'ETH',
	        rpc: ['https://mainnet.optimism.io/'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Ether',
	            symbol: 'ETH',
	            decimals: 18,
	        },
	        infoURL: 'https://optimism.io',
	        shortName: 'oeth',
	        chainId: 10,
	        networkId: 10,
	        explorers: [
	            {
	                name: 'etherscan',
	                url: 'https://optimistic.etherscan.io',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Metadium Mainnet',
	        chain: 'META',
	        rpc: ['https://api.metadium.com/prod'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Metadium Mainnet Ether',
	            symbol: 'META',
	            decimals: 18,
	        },
	        infoURL: 'https://metadium.com',
	        shortName: 'meta',
	        chainId: 11,
	        networkId: 11,
	        slip44: 916,
	    },
	    {
	        name: 'Metadium Testnet',
	        chain: 'META',
	        rpc: ['https://api.metadium.com/dev'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Metadium Testnet Ether',
	            symbol: 'KAL',
	            decimals: 18,
	        },
	        infoURL: 'https://metadium.com',
	        shortName: 'kal',
	        chainId: 12,
	        networkId: 12,
	    },
	    {
	        name: 'Diode Testnet Staging',
	        chain: 'DIODE',
	        rpc: ['https://staging.diode.io:8443/', 'wss://staging.diode.io:8443/ws'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Staging Diodes',
	            symbol: 'sDIODE',
	            decimals: 18,
	        },
	        infoURL: 'https://diode.io/staging',
	        shortName: 'dstg',
	        chainId: 13,
	        networkId: 13,
	    },
	    {
	        name: 'Flare Mainnet',
	        chain: 'FLR',
	        icon: 'flare',
	        rpc: [],
	        faucets: [],
	        nativeCurrency: {
	            name: 'FLR',
	            symbol: 'FLR',
	            decimals: 18,
	        },
	        infoURL: 'https://flare.xyz',
	        shortName: 'flr',
	        chainId: 14,
	        networkId: 14,
	        explorers: [
	            {
	                name: 'blockscout',
	                url: 'https://flare-explorer.flare.network',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Diode Prenet',
	        chain: 'DIODE',
	        rpc: ['https://prenet.diode.io:8443/', 'wss://prenet.diode.io:8443/ws'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Diodes',
	            symbol: 'DIODE',
	            decimals: 18,
	        },
	        infoURL: 'https://diode.io/prenet',
	        shortName: 'diode',
	        chainId: 15,
	        networkId: 15,
	    },
	    {
	        name: 'Flare Testnet Coston',
	        chain: 'FLR',
	        rpc: ['https://coston-api.flare.network/ext/bc/C/rpc'],
	        faucets: ['https://faucet.towolabs.com', 'https://fauceth.komputing.org?chain=16&address=${ADDRESS}'],
	        nativeCurrency: {
	            name: 'Coston Spark',
	            symbol: 'CFLR',
	            decimals: 18,
	        },
	        infoURL: 'https://flare.xyz',
	        shortName: 'cflr',
	        chainId: 16,
	        networkId: 16,
	        explorers: [
	            {
	                name: 'blockscout',
	                url: 'https://coston-explorer.flare.network',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'ThaiChain 2.0 ThaiFi',
	        chain: 'TCH',
	        rpc: ['https://rpc.thaifi.com'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Thaifi Ether',
	            symbol: 'TFI',
	            decimals: 18,
	        },
	        infoURL: 'https://exp.thaifi.com',
	        shortName: 'tfi',
	        chainId: 17,
	        networkId: 17,
	    },
	    {
	        name: 'ThunderCore Testnet',
	        chain: 'TST',
	        rpc: ['https://testnet-rpc.thundercore.com'],
	        faucets: ['https://faucet-testnet.thundercore.com'],
	        nativeCurrency: {
	            name: 'ThunderCore Testnet Token',
	            symbol: 'TST',
	            decimals: 18,
	        },
	        infoURL: 'https://thundercore.com',
	        shortName: 'TST',
	        chainId: 18,
	        networkId: 18,
	        explorers: [
	            {
	                name: 'thundercore-blockscout-testnet',
	                url: 'https://explorer-testnet.thundercore.com',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Songbird Canary-Network',
	        chain: 'SGB',
	        icon: 'songbird',
	        rpc: [
	            'https://songbird.towolabs.com/rpc',
	            'https://sgb.ftso.com.au/ext/bc/C/rpc',
	            'https://sgb.lightft.so/rpc',
	            'https://sgb-rpc.ftso.eu',
	        ],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Songbird',
	            symbol: 'SGB',
	            decimals: 18,
	        },
	        infoURL: 'https://flare.xyz',
	        shortName: 'sgb',
	        chainId: 19,
	        networkId: 19,
	        explorers: [
	            {
	                name: 'blockscout',
	                url: 'https://songbird-explorer.flare.network',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Elastos Smart Chain',
	        chain: 'ETH',
	        rpc: ['https://api.elastos.io/eth'],
	        faucets: ['https://faucet.elastos.org/'],
	        nativeCurrency: {
	            name: 'Elastos',
	            symbol: 'ELA',
	            decimals: 18,
	        },
	        infoURL: 'https://www.elastos.org/',
	        shortName: 'elaeth',
	        chainId: 20,
	        networkId: 20,
	        explorers: [
	            {
	                name: 'elastos eth explorer',
	                url: 'https://eth.elastos.io',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'ELA-ETH-Sidechain Testnet',
	        chain: 'ETH',
	        rpc: ['https://rpc.elaeth.io'],
	        faucets: ['https://faucet.elaeth.io/'],
	        nativeCurrency: {
	            name: 'Elastos',
	            symbol: 'tELA',
	            decimals: 18,
	        },
	        infoURL: 'https://elaeth.io/',
	        shortName: 'elaetht',
	        chainId: 21,
	        networkId: 21,
	    },
	    {
	        name: 'ELA-DID-Sidechain Mainnet',
	        chain: 'ETH',
	        rpc: [],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Elastos',
	            symbol: 'ELA',
	            decimals: 18,
	        },
	        infoURL: 'https://www.elastos.org/',
	        shortName: 'eladid',
	        chainId: 22,
	        networkId: 22,
	    },
	    {
	        name: 'ELA-DID-Sidechain Testnet',
	        chain: 'ETH',
	        rpc: [],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Elastos',
	            symbol: 'tELA',
	            decimals: 18,
	        },
	        infoURL: 'https://elaeth.io/',
	        shortName: 'eladidt',
	        chainId: 23,
	        networkId: 23,
	    },
	    {
	        name: 'Dithereum Mainnet',
	        chain: 'DTH',
	        icon: 'dithereum',
	        rpc: ['https://node-mainnet.dithereum.io'],
	        faucets: ['https://faucet.dithereum.org'],
	        nativeCurrency: {
	            name: 'Dither',
	            symbol: 'DTH',
	            decimals: 18,
	        },
	        infoURL: 'https://dithereum.org',
	        shortName: 'dthmainnet',
	        chainId: 24,
	        networkId: 24,
	    },
	    {
	        name: 'Cronos Mainnet Beta',
	        chain: 'CRO',
	        rpc: ['https://evm.cronos.org'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Cronos',
	            symbol: 'CRO',
	            decimals: 18,
	        },
	        infoURL: 'https://cronos.org/',
	        shortName: 'cro',
	        chainId: 25,
	        networkId: 25,
	        explorers: [
	            {
	                name: 'Cronos Explorer',
	                url: 'https://cronos.org/explorer',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'Genesis L1 testnet',
	        chain: 'genesis',
	        rpc: ['https://testrpc.genesisl1.org'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'L1 testcoin',
	            symbol: 'L1test',
	            decimals: 18,
	        },
	        infoURL: 'https://www.genesisl1.com',
	        shortName: 'L1test',
	        chainId: 26,
	        networkId: 26,
	        explorers: [
	            {
	                name: 'Genesis L1 testnet explorer',
	                url: 'https://testnet.genesisl1.org',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'ShibaChain',
	        chain: 'SHIB',
	        rpc: ['https://rpc.shibachain.net'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'SHIBA INU COIN',
	            symbol: 'SHIB',
	            decimals: 18,
	        },
	        infoURL: 'https://www.shibachain.net',
	        shortName: 'shib',
	        chainId: 27,
	        networkId: 27,
	        explorers: [
	            {
	                name: 'Shiba Explorer',
	                url: 'https://exp.shibachain.net',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'Boba Network Rinkeby Testnet',
	        chain: 'ETH',
	        rpc: ['https://rinkeby.boba.network/'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Ether',
	            symbol: 'ETH',
	            decimals: 18,
	        },
	        infoURL: 'https://boba.network',
	        shortName: 'Boba Rinkeby',
	        chainId: 28,
	        networkId: 28,
	        explorers: [
	            {
	                name: 'Blockscout',
	                url: 'https://blockexplorer.rinkeby.boba.network',
	                standard: 'none',
	            },
	        ],
	        parent: {
	            type: 'L2',
	            chain: 'eip155-4',
	            bridges: [
	                {
	                    url: 'https://gateway.rinkeby.boba.network',
	                },
	            ],
	        },
	    },
	    {
	        name: 'Genesis L1',
	        chain: 'genesis',
	        rpc: ['https://rpc.genesisl1.org'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'L1 coin',
	            symbol: 'L1',
	            decimals: 18,
	        },
	        infoURL: 'https://www.genesisl1.com',
	        shortName: 'L1',
	        chainId: 29,
	        networkId: 29,
	        explorers: [
	            {
	                name: 'Genesis L1 blockchain explorer',
	                url: 'https://explorer.genesisl1.org',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'RSK Mainnet',
	        chain: 'RSK',
	        rpc: ['https://public-node.rsk.co', 'https://mycrypto.rsk.co'],
	        faucets: ['https://free-online-app.com/faucet-for-eth-evm-chains/'],
	        nativeCurrency: {
	            name: 'RSK Mainnet Ether',
	            symbol: 'RBTC',
	            decimals: 18,
	        },
	        infoURL: 'https://rsk.co',
	        shortName: 'rsk',
	        chainId: 30,
	        networkId: 30,
	        slip44: 137,
	        explorers: [
	            {
	                name: 'blockscout',
	                url: 'https://explorer.rsk.co',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'RSK Testnet',
	        chain: 'RSK',
	        rpc: ['https://public-node.testnet.rsk.co', 'https://mycrypto.testnet.rsk.co'],
	        faucets: ['https://faucet.testnet.rsk.co'],
	        nativeCurrency: {
	            name: 'RSK Testnet Ether',
	            symbol: 'tRBTC',
	            decimals: 18,
	        },
	        infoURL: 'https://rsk.co',
	        shortName: 'trsk',
	        chainId: 31,
	        networkId: 31,
	    },
	    {
	        name: 'GoodData Testnet',
	        chain: 'GooD',
	        rpc: ['https://test2.goodata.io'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'GoodData Testnet Ether',
	            symbol: 'GooD',
	            decimals: 18,
	        },
	        infoURL: 'https://www.goodata.org',
	        shortName: 'GooDT',
	        chainId: 32,
	        networkId: 32,
	    },
	    {
	        name: 'GoodData Mainnet',
	        chain: 'GooD',
	        rpc: ['https://rpc.goodata.io'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'GoodData Mainnet Ether',
	            symbol: 'GooD',
	            decimals: 18,
	        },
	        infoURL: 'https://www.goodata.org',
	        shortName: 'GooD',
	        chainId: 33,
	        networkId: 33,
	    },
	    {
	        name: 'Dithereum Testnet',
	        chain: 'DTH',
	        icon: 'dithereum',
	        rpc: ['https://node-testnet.dithereum.io'],
	        faucets: ['https://faucet.dithereum.org'],
	        nativeCurrency: {
	            name: 'Dither',
	            symbol: 'DTH',
	            decimals: 18,
	        },
	        infoURL: 'https://dithereum.org',
	        shortName: 'dth',
	        chainId: 34,
	        networkId: 34,
	    },
	    {
	        name: 'TBWG Chain',
	        chain: 'TBWG',
	        rpc: ['https://rpc.tbwg.io'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'TBWG Ether',
	            symbol: 'TBG',
	            decimals: 18,
	        },
	        infoURL: 'https://tbwg.io',
	        shortName: 'tbwg',
	        chainId: 35,
	        networkId: 35,
	    },
	    {
	        name: 'Dxchain Mainnet',
	        chain: 'Dxchain',
	        rpc: ['https://mainnet.dxchain.com'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Dxchain',
	            symbol: 'DX',
	            decimals: 18,
	        },
	        infoURL: 'https://www.dxchain.com/',
	        shortName: 'dx',
	        chainId: 36,
	        networkId: 36,
	    },
	    {
	        name: 'Valorbit',
	        chain: 'VAL',
	        rpc: ['https://rpc.valorbit.com/v2'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Valorbit',
	            symbol: 'VAL',
	            decimals: 18,
	        },
	        infoURL: 'https://valorbit.com',
	        shortName: 'val',
	        chainId: 38,
	        networkId: 38,
	        slip44: 538,
	    },
	    {
	        name: 'Telos EVM Mainnet',
	        chain: 'TLOS',
	        rpc: ['https://mainnet.telos.net/evm'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Telos',
	            symbol: 'TLOS',
	            decimals: 18,
	        },
	        infoURL: 'https://telos.net',
	        shortName: 'Telos EVM',
	        chainId: 40,
	        networkId: 40,
	        explorers: [
	            {
	                name: 'teloscan',
	                url: 'https://teloscan.io',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Telos EVM Testnet',
	        chain: 'TLOS',
	        rpc: ['https://testnet.telos.net/evm'],
	        faucets: ['https://app.telos.net/testnet/developers'],
	        nativeCurrency: {
	            name: 'Telos',
	            symbol: 'TLOS',
	            decimals: 18,
	        },
	        infoURL: 'https://telos.net',
	        shortName: 'Telos EVM Testnet',
	        chainId: 41,
	        networkId: 41,
	    },
	    {
	        name: 'Kovan',
	        title: 'Ethereum Testnet Kovan',
	        chain: 'ETH',
	        network: 'testnet',
	        rpc: [
	            'https://kovan.poa.network',
	            'http://kovan.poa.network:8545',
	            'https://kovan.infura.io/v3/${INFURA_API_KEY}',
	            'wss://kovan.infura.io/ws/v3/${INFURA_API_KEY}',
	            'ws://kovan.poa.network:8546',
	        ],
	        faucets: [
	            'http://fauceth.komputing.org?chain=42&address=${ADDRESS}',
	            'https://faucet.kovan.network',
	            'https://gitter.im/kovan-testnet/faucet',
	        ],
	        nativeCurrency: {
	            name: 'Kovan Ether',
	            symbol: 'ETH',
	            decimals: 18,
	        },
	        explorers: [
	            {
	                name: 'etherscan',
	                url: 'https://kovan.etherscan.io',
	                standard: 'EIP3091',
	            },
	        ],
	        infoURL: 'https://kovan-testnet.github.io/website',
	        shortName: 'kov',
	        chainId: 42,
	        networkId: 42,
	    },
	    {
	        name: 'Darwinia Pangolin Testnet',
	        chain: 'pangolin',
	        rpc: ['https://pangolin-rpc.darwinia.network'],
	        faucets: ['https://docs.crab.network/dvm/wallets/dvm-metamask#apply-for-the-test-token'],
	        nativeCurrency: {
	            name: 'Pangolin Network Native Token”',
	            symbol: 'PRING',
	            decimals: 18,
	        },
	        infoURL: 'https://darwinia.network/',
	        shortName: 'pangolin',
	        chainId: 43,
	        networkId: 43,
	        explorers: [
	            {
	                name: 'subscan',
	                url: 'https://pangolin.subscan.io',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'Darwinia Crab Network',
	        chain: 'crab',
	        rpc: ['https://crab-rpc.darwinia.network'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Crab Network Native Token',
	            symbol: 'CRAB',
	            decimals: 18,
	        },
	        infoURL: 'https://crab.network/',
	        shortName: 'crab',
	        chainId: 44,
	        networkId: 44,
	        explorers: [
	            {
	                name: 'subscan',
	                url: 'https://crab.subscan.io',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'Darwinia Pangoro Testnet',
	        chain: 'pangoro',
	        rpc: ['http://pangoro-rpc.darwinia.network'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Pangoro Network Native Token”',
	            symbol: 'ORING',
	            decimals: 18,
	        },
	        infoURL: 'https://darwinia.network/',
	        shortName: 'pangoro',
	        chainId: 45,
	        networkId: 45,
	        explorers: [
	            {
	                name: 'subscan',
	                url: 'https://pangoro.subscan.io',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'Darwinia Network',
	        chain: 'darwinia',
	        network: 'darwinia network',
	        rpc: ['https://darwinia-rpc.darwinia.network'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Darwinia Network Native Token',
	            symbol: 'RING',
	            decimals: 18,
	        },
	        infoURL: 'https://darwinia.network/',
	        shortName: 'darwinia',
	        chainId: 46,
	        networkId: 46,
	        explorers: [
	            {
	                name: 'subscan',
	                url: 'https://darwinia.subscan.io',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'XinFin Network Mainnet',
	        chain: 'XDC',
	        rpc: ['https://rpc.xinfin.network'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'XinFin',
	            symbol: 'XDC',
	            decimals: 18,
	        },
	        infoURL: 'https://xinfin.org',
	        shortName: 'xdc',
	        chainId: 50,
	        networkId: 50,
	    },
	    {
	        name: 'XinFin Apothem Testnet',
	        chain: 'TXDC',
	        rpc: ['https://rpc.apothem.network'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'XinFinTest',
	            symbol: 'TXDC',
	            decimals: 18,
	        },
	        infoURL: 'https://xinfin.org',
	        shortName: 'TXDC',
	        chainId: 51,
	        networkId: 51,
	    },
	    {
	        name: 'CoinEx Smart Chain Mainnet',
	        chain: 'CSC',
	        rpc: ['https://rpc.coinex.net'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'CoinEx Chain Native Token',
	            symbol: 'cet',
	            decimals: 18,
	        },
	        infoURL: 'https://www.coinex.org/',
	        shortName: 'cet',
	        chainId: 52,
	        networkId: 52,
	        explorers: [
	            {
	                name: 'coinexscan',
	                url: 'https://www.coinex.net',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'CoinEx Smart Chain Testnet',
	        chain: 'CSC',
	        rpc: ['https://testnet-rpc.coinex.net/'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'CoinEx Chain Test Native Token',
	            symbol: 'cett',
	            decimals: 18,
	        },
	        infoURL: 'https://www.coinex.org/',
	        shortName: 'tcet',
	        chainId: 53,
	        networkId: 53,
	        explorers: [
	            {
	                name: 'coinexscan',
	                url: 'https://testnet.coinex.net',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'Openpiece Mainnet',
	        chain: 'OPENPIECE',
	        icon: 'openpiece',
	        network: 'mainnet',
	        rpc: ['https://mainnet.openpiece.io'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Belly',
	            symbol: 'BELLY',
	            decimals: 18,
	        },
	        infoURL: 'https://cryptopiece.online',
	        shortName: 'OP',
	        chainId: 54,
	        networkId: 54,
	        explorers: [
	            {
	                name: 'Belly Scan',
	                url: 'https://bellyscan.com',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'Zyx Mainnet',
	        chain: 'ZYX',
	        rpc: [
	            'https://rpc-1.zyx.network/',
	            'https://rpc-2.zyx.network/',
	            'https://rpc-3.zyx.network/',
	            'https://rpc-4.zyx.network/',
	            'https://rpc-5.zyx.network/',
	            'https://rpc-6.zyx.network/',
	        ],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Zyx',
	            symbol: 'ZYX',
	            decimals: 18,
	        },
	        infoURL: 'https://zyx.network/',
	        shortName: 'ZYX',
	        chainId: 55,
	        networkId: 55,
	        explorers: [
	            {
	                name: 'zyxscan',
	                url: 'https://zyxscan.com',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'Binance Smart Chain Mainnet',
	        chain: 'BSC',
	        rpc: [
	            'https://bsc-dataseed1.binance.org',
	            'https://bsc-dataseed2.binance.org',
	            'https://bsc-dataseed3.binance.org',
	            'https://bsc-dataseed4.binance.org',
	            'https://bsc-dataseed1.defibit.io',
	            'https://bsc-dataseed2.defibit.io',
	            'https://bsc-dataseed3.defibit.io',
	            'https://bsc-dataseed4.defibit.io',
	            'https://bsc-dataseed1.ninicoin.io',
	            'https://bsc-dataseed2.ninicoin.io',
	            'https://bsc-dataseed3.ninicoin.io',
	            'https://bsc-dataseed4.ninicoin.io',
	            'wss://bsc-ws-node.nariox.org',
	        ],
	        faucets: ['https://free-online-app.com/faucet-for-eth-evm-chains/'],
	        nativeCurrency: {
	            name: 'Binance Chain Native Token',
	            symbol: 'BNB',
	            decimals: 18,
	        },
	        infoURL: 'https://www.binance.org',
	        shortName: 'bnb',
	        chainId: 56,
	        networkId: 56,
	        slip44: 714,
	        explorers: [
	            {
	                name: 'bscscan',
	                url: 'https://bscscan.com',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Syscoin Mainnet',
	        chain: 'SYS',
	        rpc: ['https://rpc.syscoin.org', 'wss://rpc.syscoin.org/wss'],
	        faucets: ['https://faucet.syscoin.org'],
	        nativeCurrency: {
	            name: 'Syscoin',
	            symbol: 'SYS',
	            decimals: 18,
	        },
	        infoURL: 'https://www.syscoin.org',
	        shortName: 'sys',
	        chainId: 57,
	        networkId: 57,
	        explorers: [
	            {
	                name: 'Syscoin Block Explorer',
	                url: 'https://explorer.syscoin.org',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Ontology Mainnet',
	        chain: 'Ontology',
	        rpc: [
	            'http://dappnode1.ont.io:20339',
	            'http://dappnode2.ont.io:20339',
	            'http://dappnode3.ont.io:20339',
	            'http://dappnode4.ont.io:20339',
	            'https://dappnode1.ont.io:10339',
	            'https://dappnode2.ont.io:10339',
	            'https://dappnode3.ont.io:10339',
	            'https://dappnode4.ont.io:10339',
	        ],
	        faucets: [],
	        nativeCurrency: {
	            name: 'ONG',
	            symbol: 'ONG',
	            decimals: 18,
	        },
	        infoURL: 'https://ont.io/',
	        shortName: 'Ontology Mainnet',
	        chainId: 58,
	        networkId: 58,
	        explorers: [
	            {
	                name: 'explorer',
	                url: 'https://explorer.ont.io',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'EOS Mainnet',
	        chain: 'EOS',
	        rpc: ['https://api.eosargentina.io'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'EOS',
	            symbol: 'EOS',
	            decimals: 18,
	        },
	        infoURL: 'https://eoscommunity.org/',
	        shortName: 'EOS Mainnet',
	        chainId: 59,
	        networkId: 59,
	        explorers: [
	            {
	                name: 'bloks',
	                url: 'https://bloks.eosargentina.io',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'GoChain',
	        chain: 'GO',
	        rpc: ['https://rpc.gochain.io'],
	        faucets: ['https://free-online-app.com/faucet-for-eth-evm-chains/'],
	        nativeCurrency: {
	            name: 'GoChain Ether',
	            symbol: 'GO',
	            decimals: 18,
	        },
	        infoURL: 'https://gochain.io',
	        shortName: 'go',
	        chainId: 60,
	        networkId: 60,
	        slip44: 6060,
	        explorers: [
	            {
	                name: 'GoChain Explorer',
	                url: 'https://explorer.gochain.io',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Ethereum Classic Mainnet',
	        chain: 'ETC',
	        rpc: ['https://www.ethercluster.com/etc'],
	        faucets: ['https://free-online-app.com/faucet-for-eth-evm-chains/?'],
	        nativeCurrency: {
	            name: 'Ethereum Classic Ether',
	            symbol: 'ETC',
	            decimals: 18,
	        },
	        infoURL: 'https://ethereumclassic.org',
	        shortName: 'etc',
	        chainId: 61,
	        networkId: 1,
	        slip44: 61,
	        explorers: [
	            {
	                name: 'blockscout',
	                url: 'https://blockscout.com/etc/mainnet',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'Ethereum Classic Testnet Morden',
	        chain: 'ETC',
	        rpc: [],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Ethereum Classic Testnet Ether',
	            symbol: 'TETC',
	            decimals: 18,
	        },
	        infoURL: 'https://ethereumclassic.org',
	        shortName: 'tetc',
	        chainId: 62,
	        networkId: 2,
	    },
	    {
	        name: 'Ethereum Classic Testnet Mordor',
	        chain: 'ETC',
	        rpc: ['https://www.ethercluster.com/mordor'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Mordor Classic Testnet Ether',
	            symbol: 'METC',
	            decimals: 18,
	        },
	        infoURL: 'https://github.com/eth-classic/mordor/',
	        shortName: 'metc',
	        chainId: 63,
	        networkId: 7,
	    },
	    {
	        name: 'Ellaism',
	        chain: 'ELLA',
	        rpc: ['https://jsonrpc.ellaism.org'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Ellaism Ether',
	            symbol: 'ELLA',
	            decimals: 18,
	        },
	        infoURL: 'https://ellaism.org',
	        shortName: 'ellaism',
	        chainId: 64,
	        networkId: 64,
	        slip44: 163,
	    },
	    {
	        name: 'OKExChain Testnet',
	        chain: 'okexchain',
	        rpc: ['https://exchaintestrpc.okex.org'],
	        faucets: ['https://www.okex.com/drawdex'],
	        nativeCurrency: {
	            name: 'OKExChain Global Utility Token in testnet',
	            symbol: 'OKT',
	            decimals: 18,
	        },
	        infoURL: 'https://www.okex.com/okexchain',
	        shortName: 'tokt',
	        chainId: 65,
	        networkId: 65,
	        explorers: [
	            {
	                name: 'OKLink',
	                url: 'https://www.oklink.com/okexchain-test',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'OKXChain Mainnet',
	        chain: 'okxchain',
	        rpc: ['https://exchainrpc.okex.org', 'https://okc-mainnet.gateway.pokt.network/v1/lb/6275309bea1b320039c893ff'],
	        faucets: ['https://free-online-app.com/faucet-for-eth-evm-chains/?'],
	        nativeCurrency: {
	            name: 'OKXChain Global Utility Token',
	            symbol: 'OKT',
	            decimals: 18,
	        },
	        infoURL: 'https://www.okex.com/okc',
	        shortName: 'okt',
	        chainId: 66,
	        networkId: 66,
	        explorers: [
	            {
	                name: 'OKLink',
	                url: 'https://www.oklink.com/en/okc',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'DBChain Testnet',
	        chain: 'DBM',
	        rpc: ['http://test-rpc.dbmbp.com'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'DBChain Testnet',
	            symbol: 'DBM',
	            decimals: 18,
	        },
	        infoURL: 'http://test.dbmbp.com',
	        shortName: 'dbm',
	        chainId: 67,
	        networkId: 67,
	    },
	    {
	        name: 'SoterOne Mainnet',
	        chain: 'SOTER',
	        rpc: ['https://rpc.soter.one'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'SoterOne Mainnet Ether',
	            symbol: 'SOTER',
	            decimals: 18,
	        },
	        infoURL: 'https://www.soterone.com',
	        shortName: 'SO1',
	        chainId: 68,
	        networkId: 68,
	    },
	    {
	        name: 'Optimism Kovan',
	        title: 'Optimism Testnet Kovan',
	        chain: 'ETH',
	        rpc: ['https://kovan.optimism.io/'],
	        faucets: ['http://fauceth.komputing.org?chain=69&address=${ADDRESS}'],
	        nativeCurrency: {
	            name: 'Kovan Ether',
	            symbol: 'ETH',
	            decimals: 18,
	        },
	        explorers: [
	            {
	                name: 'etherscan',
	                url: 'https://kovan-optimistic.etherscan.io',
	                standard: 'EIP3091',
	            },
	        ],
	        infoURL: 'https://optimism.io',
	        shortName: 'okov',
	        chainId: 69,
	        networkId: 69,
	    },
	    {
	        name: 'Hoo Smart Chain',
	        chain: 'HSC',
	        rpc: [
	            'https://http-mainnet.hoosmartchain.com',
	            'https://http-mainnet2.hoosmartchain.com',
	            'wss://ws-mainnet.hoosmartchain.com',
	            'wss://ws-mainnet2.hoosmartchain.com',
	        ],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Hoo Smart Chain Native Token',
	            symbol: 'HOO',
	            decimals: 18,
	        },
	        infoURL: 'https://www.hoosmartchain.com',
	        shortName: 'hsc',
	        chainId: 70,
	        networkId: 70,
	        slip44: 1170,
	        explorers: [
	            {
	                name: 'hooscan',
	                url: 'https://www.hooscan.com',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Conflux eSpace (Testnet)',
	        chain: 'Conflux',
	        network: 'testnet',
	        rpc: ['https://evmtestnet.confluxrpc.com'],
	        faucets: ['https://faucet.confluxnetwork.org'],
	        nativeCurrency: {
	            name: 'CFX',
	            symbol: 'CFX',
	            decimals: 18,
	        },
	        infoURL: 'https://confluxnetwork.org',
	        shortName: 'cfxtest',
	        chainId: 71,
	        networkId: 71,
	        icon: 'conflux',
	        explorers: [
	            {
	                name: 'Conflux Scan',
	                url: 'https://evmtestnet.confluxscan.net',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'DxChain Testnet',
	        chain: 'DxChain',
	        rpc: ['https://testnet-http.dxchain.com'],
	        faucets: ['https://faucet.dxscan.io'],
	        nativeCurrency: {
	            name: 'DxChain Testnet',
	            symbol: 'DX',
	            decimals: 18,
	        },
	        infoURL: 'https://testnet.dxscan.io/',
	        shortName: 'dxc',
	        chainId: 72,
	        networkId: 72,
	    },
	    {
	        name: 'IDChain Mainnet',
	        chain: 'IDChain',
	        network: 'mainnet',
	        rpc: ['https://idchain.one/rpc/', 'wss://idchain.one/ws/'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'EIDI',
	            symbol: 'EIDI',
	            decimals: 18,
	        },
	        infoURL: 'https://idchain.one/begin/',
	        shortName: 'idchain',
	        chainId: 74,
	        networkId: 74,
	        icon: 'idchain',
	        explorers: [
	            {
	                name: 'explorer',
	                url: 'https://explorer.idchain.one',
	                icon: 'etherscan',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Mix',
	        chain: 'MIX',
	        rpc: ['https://rpc2.mix-blockchain.org:8647'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Mix Ether',
	            symbol: 'MIX',
	            decimals: 18,
	        },
	        infoURL: 'https://mix-blockchain.org',
	        shortName: 'mix',
	        chainId: 76,
	        networkId: 76,
	        slip44: 76,
	    },
	    {
	        name: 'POA Network Sokol',
	        chain: 'POA',
	        rpc: ['https://sokol.poa.network', 'wss://sokol.poa.network/wss', 'ws://sokol.poa.network:8546'],
	        faucets: ['https://faucet.poa.network'],
	        nativeCurrency: {
	            name: 'POA Sokol Ether',
	            symbol: 'SPOA',
	            decimals: 18,
	        },
	        infoURL: 'https://poa.network',
	        shortName: 'spoa',
	        chainId: 77,
	        networkId: 77,
	        explorers: [
	            {
	                name: 'blockscout',
	                url: 'https://blockscout.com/poa/sokol',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'PrimusChain mainnet',
	        chain: 'PC',
	        rpc: ['https://ethnode.primusmoney.com/mainnet'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Primus Ether',
	            symbol: 'PETH',
	            decimals: 18,
	        },
	        infoURL: 'https://primusmoney.com',
	        shortName: 'primuschain',
	        chainId: 78,
	        networkId: 78,
	    },
	    {
	        name: 'Zenith Mainnet',
	        chain: 'Zenith',
	        rpc: [
	            'https://dataserver-us-1.zenithchain.co/',
	            'https://dataserver-asia-3.zenithchain.co/',
	            'https://dataserver-asia-4.zenithchain.co/',
	            'https://dataserver-asia-2.zenithchain.co/',
	            'https://dataserver-asia-5.zenithchain.co/',
	            'https://dataserver-asia-6.zenithchain.co/',
	            'https://dataserver-asia-7.zenithchain.co/',
	        ],
	        faucets: [],
	        nativeCurrency: {
	            name: 'ZENITH',
	            symbol: 'ZENITH',
	            decimals: 18,
	        },
	        infoURL: 'https://www.zenithchain.co/',
	        chainId: 79,
	        networkId: 79,
	        shortName: 'zenith',
	        explorers: [
	            {
	                name: 'zenith scan',
	                url: 'https://scan.zenithchain.co',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'GeneChain',
	        chain: 'GeneChain',
	        rpc: ['https://rpc.genechain.io'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'RNA',
	            symbol: 'RNA',
	            decimals: 18,
	        },
	        infoURL: 'https://scan.genechain.io/',
	        shortName: 'GeneChain',
	        chainId: 80,
	        networkId: 80,
	        explorers: [
	            {
	                name: 'GeneChain Scan',
	                url: 'https://scan.genechain.io',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Zenith Testnet (Vilnius)',
	        chain: 'Zenith',
	        rpc: ['https://vilnius.zenithchain.co/http'],
	        faucets: ['https://faucet.zenithchain.co/'],
	        nativeCurrency: {
	            name: 'Vilnius',
	            symbol: 'VIL',
	            decimals: 18,
	        },
	        infoURL: 'https://www.zenithchain.co/',
	        chainId: 81,
	        networkId: 81,
	        shortName: 'VIL',
	        explorers: [
	            {
	                name: 'vilnius scan',
	                url: 'https://vilnius.scan.zenithchain.co',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Meter Mainnet',
	        chain: 'METER',
	        rpc: ['https://rpc.meter.io'],
	        faucets: ['https://faucet.meter.io'],
	        nativeCurrency: {
	            name: 'Meter',
	            symbol: 'MTR',
	            decimals: 18,
	        },
	        infoURL: 'https://www.meter.io',
	        shortName: 'Meter',
	        chainId: 82,
	        networkId: 82,
	        explorers: [
	            {
	                name: 'Meter Mainnet Scan',
	                url: 'https://scan.meter.io',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Meter Testnet',
	        chain: 'METER Testnet',
	        rpc: ['https://rpctest.meter.io'],
	        faucets: ['https://faucet-warringstakes.meter.io'],
	        nativeCurrency: {
	            name: 'Meter',
	            symbol: 'MTR',
	            decimals: 18,
	        },
	        infoURL: 'https://www.meter.io',
	        shortName: 'MeterTest',
	        chainId: 83,
	        networkId: 83,
	        explorers: [
	            {
	                name: 'Meter Testnet Scan',
	                url: 'https://scan-warringstakes.meter.io',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'GateChain Testnet',
	        chainId: 85,
	        shortName: 'gttest',
	        chain: 'GTTEST',
	        networkId: 85,
	        nativeCurrency: {
	            name: 'GateToken',
	            symbol: 'GT',
	            decimals: 18,
	        },
	        rpc: ['https://testnet.gatenode.cc'],
	        faucets: ['https://www.gatescan.org/testnet/faucet'],
	        explorers: [
	            {
	                name: 'GateScan',
	                url: 'https://www.gatescan.org/testnet',
	                standard: 'EIP3091',
	            },
	        ],
	        infoURL: 'https://www.gatechain.io',
	    },
	    {
	        name: 'GateChain Mainnet',
	        chainId: 86,
	        shortName: 'gt',
	        chain: 'GT',
	        networkId: 86,
	        nativeCurrency: {
	            name: 'GateToken',
	            symbol: 'GT',
	            decimals: 18,
	        },
	        rpc: ['https://evm.gatenode.cc'],
	        faucets: ['https://www.gatescan.org/faucet'],
	        explorers: [
	            {
	                name: 'GateScan',
	                url: 'https://www.gatescan.org',
	                standard: 'EIP3091',
	            },
	        ],
	        infoURL: 'https://www.gatechain.io',
	    },
	    {
	        name: 'Nova Network',
	        chain: 'NNW',
	        icon: 'novanetwork',
	        rpc: ['https://connect.novanetwork.io', 'https://0x57.redjackstudio.com', 'https://rpc.novanetwork.io:9070'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Supernova',
	            symbol: 'SNT',
	            decimals: 18,
	        },
	        infoURL: 'https://novanetwork.io',
	        shortName: 'nnw',
	        chainId: 87,
	        networkId: 87,
	        explorers: [
	            {
	                name: 'novanetwork',
	                url: 'https://explorer.novanetwork.io',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'TomoChain',
	        chain: 'TOMO',
	        rpc: ['https://rpc.tomochain.com'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'TomoChain',
	            symbol: 'TOMO',
	            decimals: 18,
	        },
	        infoURL: 'https://tomochain.com',
	        shortName: 'tomo',
	        chainId: 88,
	        networkId: 88,
	        slip44: 889,
	    },
	    {
	        name: 'TomoChain Testnet',
	        chain: 'TOMO',
	        rpc: ['https://rpc.testnet.tomochain.com'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'TomoChain',
	            symbol: 'TOMO',
	            decimals: 18,
	        },
	        infoURL: 'https://tomochain.com',
	        shortName: 'tomot',
	        chainId: 89,
	        networkId: 89,
	        slip44: 889,
	    },
	    {
	        name: 'Garizon Stage0',
	        chain: 'GAR',
	        network: 'mainnet',
	        icon: 'garizon',
	        rpc: ['https://s0.garizon.net/rpc'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Garizon',
	            symbol: 'GAR',
	            decimals: 18,
	        },
	        infoURL: 'https://garizon.com',
	        shortName: 'gar-s0',
	        chainId: 90,
	        networkId: 90,
	        explorers: [
	            {
	                name: 'explorer',
	                url: 'https://explorer.garizon.com',
	                icon: 'garizon',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Garizon Stage1',
	        chain: 'GAR',
	        network: 'mainnet',
	        icon: 'garizon',
	        rpc: ['https://s1.garizon.net/rpc'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Garizon',
	            symbol: 'GAR',
	            decimals: 18,
	        },
	        infoURL: 'https://garizon.com',
	        shortName: 'gar-s1',
	        chainId: 91,
	        networkId: 91,
	        explorers: [
	            {
	                name: 'explorer',
	                url: 'https://explorer.garizon.com',
	                icon: 'garizon',
	                standard: 'EIP3091',
	            },
	        ],
	        parent: {
	            chain: 'eip155-90',
	            type: 'shard',
	        },
	    },
	    {
	        name: 'Garizon Stage2',
	        chain: 'GAR',
	        network: 'mainnet',
	        icon: 'garizon',
	        rpc: ['https://s2.garizon.net/rpc'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Garizon',
	            symbol: 'GAR',
	            decimals: 18,
	        },
	        infoURL: 'https://garizon.com',
	        shortName: 'gar-s2',
	        chainId: 92,
	        networkId: 92,
	        explorers: [
	            {
	                name: 'explorer',
	                url: 'https://explorer.garizon.com',
	                icon: 'garizon',
	                standard: 'EIP3091',
	            },
	        ],
	        parent: {
	            chain: 'eip155-90',
	            type: 'shard',
	        },
	    },
	    {
	        name: 'Garizon Stage3',
	        chain: 'GAR',
	        network: 'mainnet',
	        icon: 'garizon',
	        rpc: ['https://s3.garizon.net/rpc'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Garizon',
	            symbol: 'GAR',
	            decimals: 18,
	        },
	        infoURL: 'https://garizon.com',
	        shortName: 'gar-s3',
	        chainId: 93,
	        networkId: 93,
	        explorers: [
	            {
	                name: 'explorer',
	                url: 'https://explorer.garizon.com',
	                icon: 'garizon',
	                standard: 'EIP3091',
	            },
	        ],
	        parent: {
	            chain: 'eip155-90',
	            type: 'shard',
	        },
	    },
	    {
	        name: 'CryptoKylin Testnet',
	        chain: 'EOS',
	        rpc: ['https://kylin.eosargentina.io'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'EOS',
	            symbol: 'EOS',
	            decimals: 18,
	        },
	        infoURL: 'https://www.cryptokylin.io/',
	        shortName: 'Kylin Testnet',
	        chainId: 95,
	        networkId: 95,
	        explorers: [
	            {
	                name: 'eosq',
	                url: 'https://kylin.eosargentina.io',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'NEXT Smart Chain',
	        chain: 'NSC',
	        rpc: ['https://rpc.nextsmartchain.com'],
	        faucets: ['https://faucet.nextsmartchain.com'],
	        nativeCurrency: {
	            name: 'NEXT',
	            symbol: 'NEXT',
	            decimals: 18,
	        },
	        infoURL: 'https://www.nextsmartchain.com/',
	        shortName: 'nsc',
	        chainId: 96,
	        networkId: 96,
	        explorers: [
	            {
	                name: 'Next Smart Chain Explorer',
	                url: 'https://explorer.nextsmartchain.com',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'Binance Smart Chain Testnet',
	        chain: 'BSC',
	        rpc: [
	            'https://data-seed-prebsc-1-s1.binance.org:8545',
	            'https://data-seed-prebsc-2-s1.binance.org:8545',
	            'https://data-seed-prebsc-1-s2.binance.org:8545',
	            'https://data-seed-prebsc-2-s2.binance.org:8545',
	            'https://data-seed-prebsc-1-s3.binance.org:8545',
	            'https://data-seed-prebsc-2-s3.binance.org:8545',
	        ],
	        faucets: ['https://testnet.binance.org/faucet-smart'],
	        nativeCurrency: {
	            name: 'Binance Chain Native Token',
	            symbol: 'tBNB',
	            decimals: 18,
	        },
	        infoURL: 'https://testnet.binance.org/',
	        shortName: 'bnbt',
	        chainId: 97,
	        networkId: 97,
	        explorers: [
	            {
	                name: 'bscscan-testnet',
	                url: 'https://testnet.bscscan.com',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'POA Network Core',
	        chain: 'POA',
	        rpc: [
	            'https://core.poanetwork.dev',
	            'http://core.poanetwork.dev:8545',
	            'https://core.poa.network',
	            'ws://core.poanetwork.dev:8546',
	        ],
	        faucets: [],
	        nativeCurrency: {
	            name: 'POA Network Core Ether',
	            symbol: 'POA',
	            decimals: 18,
	        },
	        infoURL: 'https://poa.network',
	        shortName: 'poa',
	        chainId: 99,
	        networkId: 99,
	        slip44: 178,
	        explorers: [
	            {
	                name: 'blockscout',
	                url: 'https://blockscout.com/poa/core',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'Gnosis Chain',
	        chain: 'GNO',
	        icon: 'gnosis',
	        rpc: [
	            'https://rpc.gnosischain.com',
	            'https://rpc.ankr.com/gnosis',
	            'https://gnosischain-rpc.gateway.pokt.network',
	            'https://gnosis-mainnet.public.blastapi.io',
	            'wss://rpc.gnosischain.com/wss',
	        ],
	        faucets: [
	            'https://faucet.gimlu.com/gnosis',
	            'https://stakely.io/faucet/gnosis-chain-xdai',
	            'https://faucet.prussia.dev/xdai',
	        ],
	        nativeCurrency: {
	            name: 'xDAI',
	            symbol: 'xDAI',
	            decimals: 18,
	        },
	        infoURL: 'https://developers.gnosischain.com',
	        shortName: 'gno',
	        chainId: 100,
	        networkId: 100,
	        slip44: 700,
	        explorers: [
	            {
	                name: 'blockscout',
	                url: 'https://blockscout.com/xdai/mainnet',
	                icon: 'blockscout',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'EtherInc',
	        chain: 'ETI',
	        rpc: ['https://api.einc.io/jsonrpc/mainnet'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'EtherInc Ether',
	            symbol: 'ETI',
	            decimals: 18,
	        },
	        infoURL: 'https://einc.io',
	        shortName: 'eti',
	        chainId: 101,
	        networkId: 1,
	        slip44: 464,
	    },
	    {
	        name: 'Web3Games Testnet',
	        chain: 'Web3Games',
	        icon: 'web3games',
	        rpc: ['https://testnet.web3games.org/evm'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Web3Games',
	            symbol: 'W3G',
	            decimals: 18,
	        },
	        infoURL: 'https://web3games.org/',
	        shortName: 'tw3g',
	        chainId: 102,
	        networkId: 102,
	    },
	    {
	        name: 'Kaiba Lightning Chain Testnet',
	        chain: 'tKLC',
	        network: 'testnet',
	        rpc: ['https://klc.live/'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Kaiba Testnet Token',
	            symbol: 'tKAIBA',
	            decimals: 18,
	        },
	        infoURL: 'https://kaibadefi.com',
	        shortName: 'tklc',
	        chainId: 104,
	        networkId: 104,
	        icon: 'kaiba',
	        explorers: [
	            {
	                name: 'kaibascan',
	                url: 'https://kaibascan.io',
	                icon: 'kaibascan',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Web3Games Devnet',
	        chain: 'Web3Games',
	        icon: 'web3games',
	        rpc: ['https://devnet.web3games.org/evm'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Web3Games',
	            symbol: 'W3G',
	            decimals: 18,
	        },
	        infoURL: 'https://web3games.org/',
	        shortName: 'dw3g',
	        chainId: 105,
	        networkId: 105,
	        explorers: [
	            {
	                name: 'Web3Games Explorer',
	                url: 'https://explorer-devnet.web3games.org',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'Velas EVM Mainnet',
	        chain: 'Velas',
	        icon: 'velas',
	        rpc: ['https://evmexplorer.velas.com/rpc', 'https://explorer.velas.com/rpc'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Velas',
	            symbol: 'VLX',
	            decimals: 18,
	        },
	        infoURL: 'https://velas.com',
	        shortName: 'vlx',
	        chainId: 106,
	        networkId: 106,
	        explorers: [
	            {
	                name: 'Velas Explorer',
	                url: 'https://evmexplorer.velas.com',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Nebula Testnet',
	        chain: 'NTN',
	        icon: 'nebulatestnet',
	        rpc: ['https://testnet.rpc.novanetwork.io:9070'],
	        faucets: ['https://faucet.novanetwork.io'],
	        nativeCurrency: {
	            name: 'Nebula X',
	            symbol: 'NBX',
	            decimals: 18,
	        },
	        infoURL: 'https://novanetwork.io',
	        shortName: 'ntn',
	        chainId: 107,
	        networkId: 107,
	        explorers: [
	            {
	                name: 'nebulatestnet',
	                url: 'https://explorer.novanetwork.io',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'ThunderCore Mainnet',
	        chain: 'TT',
	        rpc: [
	            'https://mainnet-rpc.thundercore.com',
	            'https://mainnet-rpc.thundertoken.net',
	            'https://mainnet-rpc.thundercore.io',
	        ],
	        faucets: ['https://faucet.thundercore.com'],
	        nativeCurrency: {
	            name: 'ThunderCore Token',
	            symbol: 'TT',
	            decimals: 18,
	        },
	        infoURL: 'https://thundercore.com',
	        shortName: 'TT',
	        chainId: 108,
	        networkId: 108,
	        slip44: 1001,
	        explorers: [
	            {
	                name: 'thundercore-viewblock',
	                url: 'https://viewblock.io/thundercore',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Proton Testnet',
	        chain: 'XPR',
	        rpc: ['https://protontestnet.greymass.com/'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Proton',
	            symbol: 'XPR',
	            decimals: 4,
	        },
	        infoURL: 'https://protonchain.com',
	        shortName: 'xpr',
	        chainId: 110,
	        networkId: 110,
	    },
	    {
	        name: 'EtherLite Chain',
	        chain: 'ETL',
	        rpc: ['https://rpc.etherlite.org'],
	        faucets: ['https://etherlite.org/faucets'],
	        nativeCurrency: {
	            name: 'EtherLite',
	            symbol: 'ETL',
	            decimals: 18,
	        },
	        infoURL: 'https://etherlite.org',
	        shortName: 'ETL',
	        chainId: 111,
	        networkId: 111,
	        icon: 'etherlite',
	    },
	    {
	        name: 'Fuse Mainnet',
	        chain: 'FUSE',
	        rpc: ['https://rpc.fuse.io'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Fuse',
	            symbol: 'FUSE',
	            decimals: 18,
	        },
	        infoURL: 'https://fuse.io/',
	        shortName: 'fuse',
	        chainId: 122,
	        networkId: 122,
	    },
	    {
	        name: 'Fuse Sparknet',
	        chain: 'fuse',
	        rpc: ['https://rpc.fusespark.io'],
	        faucets: ['https://get.fusespark.io'],
	        nativeCurrency: {
	            name: 'Spark',
	            symbol: 'SPARK',
	            decimals: 18,
	        },
	        infoURL: 'https://docs.fuse.io/general/fuse-network-blockchain/fuse-testnet',
	        shortName: 'spark',
	        chainId: 123,
	        networkId: 123,
	    },
	    {
	        name: 'Decentralized Web Mainnet',
	        shortName: 'dwu',
	        chain: 'DWU',
	        chainId: 124,
	        networkId: 124,
	        rpc: ['https://decentralized-web.tech/dw_rpc.php'],
	        faucets: [],
	        infoURL: 'https://decentralized-web.tech/dw_chain.php',
	        nativeCurrency: {
	            name: 'Decentralized Web Utility',
	            symbol: 'DWU',
	            decimals: 18,
	        },
	    },
	    {
	        name: 'OYchain Testnet',
	        chain: 'OYchain',
	        rpc: ['https://rpc.testnet.oychain.io'],
	        faucets: ['https://faucet.oychain.io'],
	        nativeCurrency: {
	            name: 'OYchain Token',
	            symbol: 'OY',
	            decimals: 18,
	        },
	        infoURL: 'https://www.oychain.io',
	        shortName: 'oychain testnet',
	        chainId: 125,
	        networkId: 125,
	        slip44: 125,
	        explorers: [
	            {
	                name: 'OYchain Testnet Explorer',
	                url: 'https://explorer.testnet.oychain.io',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'OYchain Mainnet',
	        chain: 'OYchain',
	        icon: 'oychain',
	        rpc: ['https://rpc.mainnet.oychain.io'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'OYchain Token',
	            symbol: 'OY',
	            decimals: 18,
	        },
	        infoURL: 'https://www.oychain.io',
	        shortName: 'oychain mainnet',
	        chainId: 126,
	        networkId: 126,
	        slip44: 126,
	        explorers: [
	            {
	                name: 'OYchain Mainnet Explorer',
	                url: 'https://explorer.oychain.io',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'Factory 127 Mainnet',
	        chain: 'FETH',
	        rpc: [],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Factory 127 Token',
	            symbol: 'FETH',
	            decimals: 18,
	        },
	        infoURL: 'https://www.factory127.com',
	        shortName: 'feth',
	        chainId: 127,
	        networkId: 127,
	        slip44: 127,
	    },
	    {
	        name: 'Huobi ECO Chain Mainnet',
	        chain: 'Heco',
	        rpc: ['https://http-mainnet.hecochain.com', 'wss://ws-mainnet.hecochain.com'],
	        faucets: ['https://free-online-app.com/faucet-for-eth-evm-chains/'],
	        nativeCurrency: {
	            name: 'Huobi ECO Chain Native Token',
	            symbol: 'HT',
	            decimals: 18,
	        },
	        infoURL: 'https://www.hecochain.com',
	        shortName: 'heco',
	        chainId: 128,
	        networkId: 128,
	        slip44: 1010,
	        explorers: [
	            {
	                name: 'hecoinfo',
	                url: 'https://hecoinfo.com',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Polygon Mainnet',
	        chain: 'Polygon',
	        rpc: [
	            'https://polygon-rpc.com/',
	            'https://rpc-mainnet.matic.network',
	            'https://matic-mainnet.chainstacklabs.com',
	            'https://rpc-mainnet.maticvigil.com',
	            'https://rpc-mainnet.matic.quiknode.pro',
	            'https://matic-mainnet-full-rpc.bwarelabs.com',
	        ],
	        faucets: [],
	        nativeCurrency: {
	            name: 'MATIC',
	            symbol: 'MATIC',
	            decimals: 18,
	        },
	        infoURL: 'https://polygon.technology/',
	        shortName: 'MATIC',
	        chainId: 137,
	        networkId: 137,
	        slip44: 966,
	        explorers: [
	            {
	                name: 'polygonscan',
	                url: 'https://polygonscan.com',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Openpiece Testnet',
	        chain: 'OPENPIECE',
	        icon: 'openpiece',
	        network: 'testnet',
	        rpc: ['https://testnet.openpiece.io'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Belly',
	            symbol: 'BELLY',
	            decimals: 18,
	        },
	        infoURL: 'https://cryptopiece.online',
	        shortName: 'OPtest',
	        chainId: 141,
	        networkId: 141,
	        explorers: [
	            {
	                name: 'Belly Scan',
	                url: 'https://testnet.bellyscan.com',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'DAX CHAIN',
	        chain: 'DAX',
	        rpc: ['https://rpc.prodax.io'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Prodax',
	            symbol: 'DAX',
	            decimals: 18,
	        },
	        infoURL: 'https://prodax.io/',
	        shortName: 'dax',
	        chainId: 142,
	        networkId: 142,
	    },
	    {
	        name: 'Lightstreams Testnet',
	        chain: 'PHT',
	        rpc: ['https://node.sirius.lightstreams.io'],
	        faucets: ['https://discuss.lightstreams.network/t/request-test-tokens'],
	        nativeCurrency: {
	            name: 'Lightstreams PHT',
	            symbol: 'PHT',
	            decimals: 18,
	        },
	        infoURL: 'https://explorer.sirius.lightstreams.io',
	        shortName: 'tpht',
	        chainId: 162,
	        networkId: 162,
	    },
	    {
	        name: 'Lightstreams Mainnet',
	        chain: 'PHT',
	        rpc: ['https://node.mainnet.lightstreams.io'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Lightstreams PHT',
	            symbol: 'PHT',
	            decimals: 18,
	        },
	        infoURL: 'https://explorer.lightstreams.io',
	        shortName: 'pht',
	        chainId: 163,
	        networkId: 163,
	    },
	    {
	        name: 'AIOZ Network',
	        chain: 'AIOZ',
	        network: 'mainnet',
	        icon: 'aioz',
	        rpc: ['https://eth-dataseed.aioz.network'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'AIOZ',
	            symbol: 'AIOZ',
	            decimals: 18,
	        },
	        infoURL: 'https://aioz.network',
	        shortName: 'aioz',
	        chainId: 168,
	        networkId: 168,
	        slip44: 60,
	        explorers: [
	            {
	                name: 'AIOZ Network Explorer',
	                url: 'https://explorer.aioz.network',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'HOO Smart Chain Testnet',
	        chain: 'ETH',
	        rpc: ['https://http-testnet.hoosmartchain.com'],
	        faucets: ['https://faucet-testnet.hscscan.com/'],
	        nativeCurrency: {
	            name: 'HOO',
	            symbol: 'HOO',
	            decimals: 18,
	        },
	        infoURL: 'https://www.hoosmartchain.com',
	        shortName: 'hoosmartchain',
	        chainId: 170,
	        networkId: 170,
	    },
	    {
	        name: 'Latam-Blockchain Resil Testnet',
	        chain: 'Resil',
	        rpc: ['https://rpc.latam-blockchain.com', 'wss://ws.latam-blockchain.com'],
	        faucets: ['https://faucet.latam-blockchain.com'],
	        nativeCurrency: {
	            name: 'Latam-Blockchain Resil Test Native Token',
	            symbol: 'usd',
	            decimals: 18,
	        },
	        infoURL: 'https://latam-blockchain.com',
	        shortName: 'resil',
	        chainId: 172,
	        networkId: 172,
	    },
	    {
	        name: 'AME Chain Mainnet',
	        chain: 'AME',
	        rpc: ['https://node1.amechain.io/'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'AME',
	            symbol: 'AME',
	            decimals: 18,
	        },
	        infoURL: 'https://amechain.io/',
	        shortName: 'ame',
	        chainId: 180,
	        networkId: 180,
	        explorers: [
	            {
	                name: 'AME Scan',
	                url: 'https://amescan.io',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Seele Mainnet',
	        chain: 'Seele',
	        rpc: ['https://rpc.seelen.pro/'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Seele',
	            symbol: 'Seele',
	            decimals: 18,
	        },
	        infoURL: 'https://seelen.pro/',
	        shortName: 'Seele',
	        chainId: 186,
	        networkId: 186,
	        explorers: [
	            {
	                name: 'seeleview',
	                url: 'https://seeleview.net',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'BMC Mainnet',
	        chain: 'BMC',
	        rpc: ['https://mainnet.bmcchain.com/'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'BTM',
	            symbol: 'BTM',
	            decimals: 18,
	        },
	        infoURL: 'https://bmc.bytom.io/',
	        shortName: 'BMC',
	        chainId: 188,
	        networkId: 188,
	        explorers: [
	            {
	                name: 'Blockmeta',
	                url: 'https://bmc.blockmeta.com',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'BMC Testnet',
	        chain: 'BMC',
	        rpc: ['https://testnet.bmcchain.com'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'BTM',
	            symbol: 'BTM',
	            decimals: 18,
	        },
	        infoURL: 'https://bmc.bytom.io/',
	        shortName: 'BMCT',
	        chainId: 189,
	        networkId: 189,
	        explorers: [
	            {
	                name: 'Blockmeta',
	                url: 'https://bmctestnet.blockmeta.com',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'Crypto Emergency',
	        chain: 'CEM',
	        rpc: ['https://cemchain.com'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Crypto Emergency',
	            symbol: 'CEM',
	            decimals: 18,
	        },
	        infoURL: 'https://cemblockchain.com/',
	        shortName: 'cem',
	        chainId: 193,
	        networkId: 193,
	        explorers: [
	            {
	                name: 'cemscan',
	                url: 'https://cemscan.com',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'BitTorrent Chain Mainnet',
	        chain: 'BTTC',
	        rpc: ['https://rpc.bittorrentchain.io/'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'BitTorrent',
	            symbol: 'BTT',
	            decimals: 18,
	        },
	        infoURL: 'https://bittorrentchain.io/',
	        shortName: 'BTT',
	        chainId: 199,
	        networkId: 199,
	        explorers: [
	            {
	                name: 'bttcscan',
	                url: 'https://scan.bittorrentchain.io',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'Arbitrum on xDai',
	        chain: 'AOX',
	        rpc: ['https://arbitrum.xdaichain.com/'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'xDAI',
	            symbol: 'xDAI',
	            decimals: 18,
	        },
	        infoURL: 'https://xdaichain.com',
	        shortName: 'aox',
	        chainId: 200,
	        networkId: 200,
	        explorers: [
	            {
	                name: 'blockscout',
	                url: 'https://blockscout.com/xdai/arbitrum',
	                standard: 'EIP3091',
	            },
	        ],
	        parent: {
	            chain: 'eip155-100',
	            type: 'L2',
	        },
	    },
	    {
	        name: 'Freight Trust Network',
	        chain: 'EDI',
	        rpc: ['http://13.57.207.168:3435', 'https://app.freighttrust.net/ftn/${API_KEY}'],
	        faucets: ['http://faucet.freight.sh'],
	        nativeCurrency: {
	            name: 'Freight Trust Native',
	            symbol: '0xF',
	            decimals: 18,
	        },
	        infoURL: 'https://freighttrust.com',
	        shortName: 'EDI',
	        chainId: 211,
	        networkId: 0,
	    },
	    {
	        name: 'SoterOne Mainnet old',
	        chain: 'SOTER',
	        rpc: ['https://rpc.soter.one'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'SoterOne Mainnet Ether',
	            symbol: 'SOTER',
	            decimals: 18,
	        },
	        infoURL: 'https://www.soterone.com',
	        shortName: 'SO1-old',
	        chainId: 218,
	        networkId: 218,
	        status: 'deprecated',
	    },
	    {
	        name: 'Permission',
	        chain: 'ASK',
	        rpc: ['https://blockchain-api-mainnet.permission.io/rpc'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'ASK',
	            symbol: 'ASK',
	            decimals: 18,
	        },
	        infoURL: 'https://permission.io/',
	        shortName: 'ASK',
	        chainId: 222,
	        networkId: 2221,
	        slip44: 2221,
	    },
	    {
	        name: 'LACHAIN Mainnet',
	        chain: 'LA',
	        icon: 'lachain',
	        rpc: ['https://rpc-mainnet.lachain.io'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'LA',
	            symbol: 'LA',
	            decimals: 18,
	        },
	        infoURL: 'https://lachain.io',
	        shortName: 'LA',
	        chainId: 225,
	        networkId: 225,
	        explorers: [
	            {
	                name: 'blockscout',
	                url: 'https://scan.lachain.io',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'LACHAIN Testnet',
	        chain: 'TLA',
	        icon: 'lachain',
	        rpc: ['https://rpc-testnet.lachain.io'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'TLA',
	            symbol: 'TLA',
	            decimals: 18,
	        },
	        infoURL: 'https://lachain.io',
	        shortName: 'TLA',
	        chainId: 226,
	        networkId: 226,
	        explorers: [
	            {
	                name: 'blockscout',
	                url: 'https://scan-test.lachain.io',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Energy Web Chain',
	        chain: 'Energy Web Chain',
	        rpc: ['https://rpc.energyweb.org', 'wss://rpc.energyweb.org/ws'],
	        faucets: ['https://faucet.carbonswap.exchange', 'https://free-online-app.com/faucet-for-eth-evm-chains/'],
	        nativeCurrency: {
	            name: 'Energy Web Token',
	            symbol: 'EWT',
	            decimals: 18,
	        },
	        infoURL: 'https://energyweb.org',
	        shortName: 'ewt',
	        chainId: 246,
	        networkId: 246,
	        slip44: 246,
	        explorers: [
	            {
	                name: 'blockscout',
	                url: 'https://explorer.energyweb.org',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'Fantom Opera',
	        chain: 'FTM',
	        rpc: ['https://rpc.ftm.tools'],
	        faucets: ['https://free-online-app.com/faucet-for-eth-evm-chains/'],
	        nativeCurrency: {
	            name: 'Fantom',
	            symbol: 'FTM',
	            decimals: 18,
	        },
	        infoURL: 'https://fantom.foundation',
	        shortName: 'ftm',
	        chainId: 250,
	        networkId: 250,
	        icon: 'fantom',
	        explorers: [
	            {
	                name: 'ftmscan',
	                url: 'https://ftmscan.com',
	                icon: 'ftmscan',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Huobi ECO Chain Testnet',
	        chain: 'Heco',
	        rpc: ['https://http-testnet.hecochain.com', 'wss://ws-testnet.hecochain.com'],
	        faucets: ['https://scan-testnet.hecochain.com/faucet'],
	        nativeCurrency: {
	            name: 'Huobi ECO Chain Test Native Token',
	            symbol: 'htt',
	            decimals: 18,
	        },
	        infoURL: 'https://testnet.hecoinfo.com',
	        shortName: 'hecot',
	        chainId: 256,
	        networkId: 256,
	    },
	    {
	        name: 'Setheum',
	        chain: 'Setheum',
	        rpc: [],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Setheum',
	            symbol: 'SETM',
	            decimals: 18,
	        },
	        infoURL: 'https://setheum.xyz',
	        shortName: 'setm',
	        chainId: 258,
	        networkId: 258,
	    },
	    {
	        name: 'SUR Blockchain Network',
	        chain: 'SUR',
	        rpc: ['https://sur.nilin.org'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Suren',
	            symbol: 'SRN',
	            decimals: 18,
	        },
	        infoURL: 'https://surnet.org',
	        shortName: 'SUR',
	        chainId: 262,
	        networkId: 1,
	        icon: 'SUR',
	        explorers: [
	            {
	                name: 'Surnet Explorer',
	                url: 'https://explorer.surnet.org',
	                icon: 'SUR',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'High Performance Blockchain',
	        chain: 'HPB',
	        rpc: ['https://hpbnode.com', 'wss://ws.hpbnode.com'],
	        faucets: ['https://myhpbwallet.com/'],
	        nativeCurrency: {
	            name: 'High Performance Blockchain Ether',
	            symbol: 'HPB',
	            decimals: 18,
	        },
	        infoURL: 'https://hpb.io',
	        shortName: 'hpb',
	        chainId: 269,
	        networkId: 269,
	        slip44: 269,
	        explorers: [
	            {
	                name: 'hscan',
	                url: 'https://hscan.org',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'zkSync alpha testnet',
	        chain: 'ETH',
	        rpc: ['https://zksync2-testnet.zksync.dev'],
	        faucets: ['https://portal.zksync.io/faucet'],
	        nativeCurrency: {
	            name: 'Ether',
	            symbol: 'ETH',
	            decimals: 18,
	        },
	        infoURL: 'https://v2-docs.zksync.io/',
	        shortName: 'zksync-goerli',
	        chainId: 280,
	        networkId: 280,
	        icon: 'ethereum',
	        explorers: [
	            {
	                name: 'blockscout',
	                url: 'https://zksync2-testnet.zkscan.io',
	                icon: 'blockscout',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Boba Network',
	        chain: 'ETH',
	        rpc: ['https://mainnet.boba.network/'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Ether',
	            symbol: 'ETH',
	            decimals: 18,
	        },
	        infoURL: 'https://boba.network',
	        shortName: 'Boba',
	        chainId: 288,
	        networkId: 288,
	        explorers: [
	            {
	                name: 'Blockscout',
	                url: 'https://blockexplorer.boba.network',
	                standard: 'none',
	            },
	        ],
	        parent: {
	            type: 'L2',
	            chain: 'eip155-1',
	            bridges: [
	                {
	                    url: 'https://gateway.boba.network',
	                },
	            ],
	        },
	    },
	    {
	        name: 'Optimism on Gnosis Chain',
	        chain: 'OGC',
	        rpc: ['https://optimism.gnosischain.com', 'wss://optimism.gnosischain.com/wss'],
	        faucets: ['https://faucet.gimlu.com/gnosis'],
	        nativeCurrency: {
	            name: 'xDAI',
	            symbol: 'xDAI',
	            decimals: 18,
	        },
	        infoURL: 'https://www.xdaichain.com/for-developers/optimism-optimistic-rollups-on-gc',
	        shortName: 'ogc',
	        chainId: 300,
	        networkId: 300,
	        explorers: [
	            {
	                name: 'blockscout',
	                url: 'https://blockscout.com/xdai/optimism',
	                icon: 'blockscout',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'KCC Mainnet',
	        chain: 'KCC',
	        rpc: ['https://rpc-mainnet.kcc.network', 'wss://rpc-ws-mainnet.kcc.network'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'KuCoin Token',
	            symbol: 'KCS',
	            decimals: 18,
	        },
	        infoURL: 'https://kcc.io',
	        shortName: 'kcs',
	        chainId: 321,
	        networkId: 1,
	        explorers: [
	            {
	                name: 'KCC Explorer',
	                url: 'https://explorer.kcc.io/en',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'KCC Testnet',
	        chain: 'KCC',
	        rpc: ['https://rpc-testnet.kcc.network', 'wss://rpc-ws-testnet.kcc.network'],
	        faucets: ['https://faucet-testnet.kcc.network'],
	        nativeCurrency: {
	            name: 'KuCoin Testnet Token',
	            symbol: 'tKCS',
	            decimals: 18,
	        },
	        infoURL: 'https://scan-testnet.kcc.network',
	        shortName: 'kcst',
	        chainId: 322,
	        networkId: 322,
	        explorers: [
	            {
	                name: 'kcc-scan',
	                url: 'https://scan-testnet.kcc.network',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Web3Q Mainnet',
	        chain: 'Web3Q',
	        rpc: ['https://mainnet.web3q.io:8545'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Web3Q',
	            symbol: 'W3Q',
	            decimals: 18,
	        },
	        infoURL: 'https://web3q.io/home.w3q/',
	        shortName: 'w3q',
	        chainId: 333,
	        networkId: 333,
	        explorers: [
	            {
	                name: 'w3q-mainnet',
	                url: 'https://explorer.mainnet.web3q.io',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'DFK Chain Test',
	        chain: 'DFK',
	        icon: 'dfk',
	        network: 'testnet',
	        rpc: ['https://subnets.avax.network/defi-kingdoms/dfk-chain-testnet/rpc'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Jewel',
	            symbol: 'JEWEL',
	            decimals: 18,
	        },
	        infoURL: 'https://defikingdoms.com',
	        shortName: 'DFKTEST',
	        chainId: 335,
	        networkId: 335,
	        explorers: [
	            {
	                name: 'ethernal',
	                url: 'https://explorer-test.dfkchain.com',
	                icon: 'ethereum',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'Shiden',
	        chain: 'SDN',
	        rpc: ['https://rpc.shiden.astar.network:8545', 'wss://shiden.api.onfinality.io/public-ws'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Shiden',
	            symbol: 'SDN',
	            decimals: 18,
	        },
	        infoURL: 'https://shiden.astar.network/',
	        shortName: 'sdn',
	        chainId: 336,
	        networkId: 336,
	        icon: 'shiden',
	        explorers: [
	            {
	                name: 'subscan',
	                url: 'https://shiden.subscan.io',
	                standard: 'none',
	                icon: 'subscan',
	            },
	        ],
	    },
	    {
	        name: 'Cronos Testnet',
	        chain: 'CRO',
	        rpc: ['https://cronos-testnet-3.crypto.org:8545', 'wss://cronos-testnet-3.crypto.org:8546'],
	        faucets: ['https://cronos.crypto.org/faucet'],
	        nativeCurrency: {
	            name: 'Crypto.org Test Coin',
	            symbol: 'TCRO',
	            decimals: 18,
	        },
	        infoURL: 'https://cronos.crypto.org',
	        shortName: 'tcro',
	        chainId: 338,
	        networkId: 338,
	        explorers: [
	            {
	                name: 'Cronos Testnet Explorer',
	                url: 'https://cronos.crypto.org/explorer/testnet3',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'Theta Mainnet',
	        chain: 'Theta',
	        rpc: ['https://eth-rpc-api.thetatoken.org/rpc'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Theta Fuel',
	            symbol: 'TFUEL',
	            decimals: 18,
	        },
	        infoURL: 'https://www.thetatoken.org/',
	        shortName: 'theta-mainnet',
	        chainId: 361,
	        networkId: 361,
	        explorers: [
	            {
	                name: 'Theta Mainnet Explorer',
	                url: 'https://explorer.thetatoken.org',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Theta Sapphire Testnet',
	        chain: 'Theta',
	        rpc: ['https://eth-rpc-api-sapphire.thetatoken.org/rpc'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Theta Fuel',
	            symbol: 'TFUEL',
	            decimals: 18,
	        },
	        infoURL: 'https://www.thetatoken.org/',
	        shortName: 'theta-sapphire',
	        chainId: 363,
	        networkId: 363,
	        explorers: [
	            {
	                name: 'Theta Sapphire Testnet Explorer',
	                url: 'https://guardian-testnet-sapphire-explorer.thetatoken.org',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Theta Amber Testnet',
	        chain: 'Theta',
	        rpc: ['https://eth-rpc-api-amber.thetatoken.org/rpc'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Theta Fuel',
	            symbol: 'TFUEL',
	            decimals: 18,
	        },
	        infoURL: 'https://www.thetatoken.org/',
	        shortName: 'theta-amber',
	        chainId: 364,
	        networkId: 364,
	        explorers: [
	            {
	                name: 'Theta Amber Testnet Explorer',
	                url: 'https://guardian-testnet-amber-explorer.thetatoken.org',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Theta Testnet',
	        chain: 'Theta',
	        rpc: ['https://eth-rpc-api-testnet.thetatoken.org/rpc'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Theta Fuel',
	            symbol: 'TFUEL',
	            decimals: 18,
	        },
	        infoURL: 'https://www.thetatoken.org/',
	        shortName: 'theta-testnet',
	        chainId: 365,
	        networkId: 365,
	        explorers: [
	            {
	                name: 'Theta Testnet Explorer',
	                url: 'https://testnet-explorer.thetatoken.org',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'PulseChain Mainnet',
	        shortName: 'pls',
	        chain: 'PLS',
	        chainId: 369,
	        networkId: 369,
	        infoURL: 'https://pulsechain.com/',
	        rpc: ['https://rpc.mainnet.pulsechain.com/', 'wss://rpc.mainnet.pulsechain.com/'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Pulse',
	            symbol: 'PLS',
	            decimals: 18,
	        },
	    },
	    {
	        name: 'Lisinski',
	        chain: 'CRO',
	        rpc: ['https://rpc-bitfalls1.lisinski.online'],
	        faucets: ['https://pipa.lisinski.online'],
	        nativeCurrency: {
	            name: 'Lisinski Ether',
	            symbol: 'LISINS',
	            decimals: 18,
	        },
	        infoURL: 'https://lisinski.online',
	        shortName: 'lisinski',
	        chainId: 385,
	        networkId: 385,
	    },
	    {
	        name: 'SX Network Mainnet',
	        chain: 'SX',
	        icon: 'SX',
	        network: 'mainnet',
	        rpc: ['https://rpc.sx.technology'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'SX Network',
	            symbol: 'SX',
	            decimals: 18,
	        },
	        infoURL: 'https://www.sx.technology',
	        shortName: 'SX',
	        chainId: 416,
	        networkId: 416,
	        explorers: [
	            {
	                name: 'SX Network Explorer',
	                url: 'https://explorer.sx.technology',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Optimism Goerli Testnet',
	        chain: 'ETH',
	        rpc: ['https://goerli.optimism.io/'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Görli Ether',
	            symbol: 'ETH',
	            decimals: 18,
	        },
	        infoURL: 'https://optimism.io',
	        shortName: 'ogor',
	        chainId: 420,
	        networkId: 420,
	    },
	    {
	        name: 'Rupaya',
	        chain: 'RUPX',
	        rpc: [],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Rupaya',
	            symbol: 'RUPX',
	            decimals: 18,
	        },
	        infoURL: 'https://www.rupx.io',
	        shortName: 'rupx',
	        chainId: 499,
	        networkId: 499,
	        slip44: 499,
	    },
	    {
	        name: 'Double-A Chain Mainnet',
	        chain: 'AAC',
	        rpc: ['https://rpc.acuteangle.com'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Acuteangle Native Token',
	            symbol: 'AAC',
	            decimals: 18,
	        },
	        infoURL: 'https://www.acuteangle.com/',
	        shortName: 'aac',
	        chainId: 512,
	        networkId: 512,
	        slip44: 1512,
	        explorers: [
	            {
	                name: 'aacscan',
	                url: 'https://scan.acuteangle.com',
	                standard: 'EIP3091',
	            },
	        ],
	        icon: 'aac',
	    },
	    {
	        name: 'Double-A Chain Testnet',
	        chain: 'AAC',
	        icon: 'aac',
	        rpc: ['https://rpc-testnet.acuteangle.com'],
	        faucets: ['https://scan-testnet.acuteangle.com/faucet'],
	        nativeCurrency: {
	            name: 'Acuteangle Native Token',
	            symbol: 'AAC',
	            decimals: 18,
	        },
	        infoURL: 'https://www.acuteangle.com/',
	        shortName: 'aact',
	        chainId: 513,
	        networkId: 513,
	        explorers: [
	            {
	                name: 'aacscan-testnet',
	                url: 'https://scan-testnet.acuteangle.com',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'XT Smart Chain Mainnet',
	        chain: 'XSC',
	        icon: 'xsc',
	        rpc: ['https://datarpc1.xsc.pub', 'https://datarpc2.xsc.pub', 'https://datarpc3.xsc.pub'],
	        faucets: ['https://xsc.pub/faucet'],
	        nativeCurrency: {
	            name: 'XT Smart Chain Native Token',
	            symbol: 'XT',
	            decimals: 18,
	        },
	        infoURL: 'https://xsc.pub/',
	        shortName: 'xt',
	        chainId: 520,
	        networkId: 1024,
	        explorers: [
	            {
	                name: 'xscscan',
	                url: 'https://xscscan.pub',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'F(x)Core Mainnet Network',
	        chain: 'Fxcore',
	        network: 'mainnet',
	        rpc: ['https://fx-json-web3.functionx.io:8545'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Function X',
	            symbol: 'FX',
	            decimals: 18,
	        },
	        infoURL: 'https://functionx.io/',
	        shortName: 'f(x)Core',
	        chainId: 530,
	        networkId: 530,
	        icon: 'fxcore',
	        explorers: [
	            {
	                name: 'FunctionX Explorer',
	                url: 'https://fx-evm.functionx.io',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Candle',
	        chain: 'Candle',
	        rpc: ['https://candle-rpc.com/', 'https://rpc.cndlchain.com'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'CANDLE',
	            symbol: 'CNDL',
	            decimals: 18,
	        },
	        infoURL: 'https://candlelabs.org/',
	        shortName: 'CNDL',
	        chainId: 534,
	        networkId: 534,
	        slip44: 674,
	        explorers: [
	            {
	                name: 'candleexplorer',
	                url: 'https://candleexplorer.com',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Vela1 Chain Mainnet',
	        chain: 'VELA1',
	        rpc: ['https://rpc.velaverse.io'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'CLASS COIN',
	            symbol: 'CLASS',
	            decimals: 18,
	        },
	        infoURL: 'https://velaverse.io',
	        shortName: 'CLASS',
	        chainId: 555,
	        networkId: 555,
	        explorers: [
	            {
	                name: 'Vela1 Chain Mainnet Explorer',
	                url: 'https://exp.velaverse.io',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Tao Network',
	        chain: 'TAO',
	        rpc: [
	            'https://rpc.testnet.tao.network',
	            'http://rpc.testnet.tao.network:8545',
	            'https://rpc.tao.network',
	            'wss://rpc.tao.network',
	        ],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Tao',
	            symbol: 'TAO',
	            decimals: 18,
	        },
	        infoURL: 'https://tao.network',
	        shortName: 'tao',
	        chainId: 558,
	        networkId: 558,
	    },
	    {
	        name: 'Metis Stardust Testnet',
	        chain: 'ETH',
	        rpc: ['https://stardust.metis.io/?owner=588'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'tMetis',
	            symbol: 'METIS',
	            decimals: 18,
	        },
	        infoURL: 'https://www.metis.io',
	        shortName: 'metis-stardust',
	        chainId: 588,
	        networkId: 588,
	        explorers: [
	            {
	                name: 'blockscout',
	                url: 'https://stardust-explorer.metis.io',
	                standard: 'EIP3091',
	            },
	        ],
	        parent: {
	            type: 'L2',
	            chain: 'eip155-4',
	            bridges: [
	                {
	                    url: 'https://bridge.metis.io',
	                },
	            ],
	        },
	    },
	    {
	        name: 'Astar',
	        chain: 'ASTR',
	        rpc: ['https://rpc.astar.network:8545'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Astar',
	            symbol: 'ASTR',
	            decimals: 18,
	        },
	        infoURL: 'https://astar.network/',
	        shortName: 'astr',
	        chainId: 592,
	        networkId: 592,
	        icon: 'astar',
	        explorers: [
	            {
	                name: 'subscan',
	                url: 'https://astar.subscan.io',
	                standard: 'none',
	                icon: 'subscan',
	            },
	        ],
	    },
	    {
	        name: 'Acala Mandala Testnet',
	        chain: 'mACA',
	        rpc: [],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Acala Mandala Token',
	            symbol: 'mACA',
	            decimals: 18,
	        },
	        infoURL: 'https://acala.network',
	        shortName: 'maca',
	        chainId: 595,
	        networkId: 595,
	    },
	    {
	        name: 'Karura Network Testnet',
	        chain: 'KAR',
	        rpc: [],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Karura Token',
	            symbol: 'KAR',
	            decimals: 18,
	        },
	        infoURL: 'https://karura.network',
	        shortName: 'tkar',
	        chainId: 596,
	        networkId: 596,
	        slip44: 596,
	    },
	    {
	        name: 'Acala Network Testnet',
	        chain: 'ACA',
	        rpc: [],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Acala Token',
	            symbol: 'ACA',
	            decimals: 18,
	        },
	        infoURL: 'https://acala.network',
	        shortName: 'taca',
	        chainId: 597,
	        networkId: 597,
	        slip44: 597,
	    },
	    {
	        name: 'Meshnyan testnet',
	        chain: 'MeshTestChain',
	        rpc: [],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Meshnyan Testnet Native Token',
	            symbol: 'MESHT',
	            decimals: 18,
	        },
	        infoURL: '',
	        shortName: 'mesh-chain-testnet',
	        chainId: 600,
	        networkId: 600,
	    },
	    {
	        name: 'SX Network Testnet',
	        chain: 'SX',
	        icon: 'SX',
	        network: 'testnet',
	        rpc: ['https://rpc.toronto.sx.technology'],
	        faucets: ['https://faucet.toronto.sx.technology'],
	        nativeCurrency: {
	            name: 'SX Network',
	            symbol: 'SX',
	            decimals: 18,
	        },
	        infoURL: 'https://www.sx.technology',
	        shortName: 'SX-Testnet',
	        chainId: 647,
	        networkId: 647,
	        explorers: [
	            {
	                name: 'SX Network Toronto Explorer',
	                url: 'https://explorer.toronto.sx.technology',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Pixie Chain Testnet',
	        chain: 'PixieChain',
	        rpc: ['https://http-testnet.chain.pixie.xyz', 'wss://ws-testnet.chain.pixie.xyz'],
	        faucets: ['https://chain.pixie.xyz/faucet'],
	        nativeCurrency: {
	            name: 'Pixie Chain Testnet Native Token',
	            symbol: 'PCTT',
	            decimals: 18,
	        },
	        infoURL: 'https://scan-testnet.chain.pixie.xyz',
	        shortName: 'pixie-chain-testnet',
	        chainId: 666,
	        networkId: 666,
	    },
	    {
	        name: 'Karura Network',
	        chain: 'KAR',
	        rpc: [],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Karura Token',
	            symbol: 'KAR',
	            decimals: 18,
	        },
	        infoURL: 'https://karura.network',
	        shortName: 'kar',
	        chainId: 686,
	        networkId: 686,
	        slip44: 686,
	    },
	    {
	        name: 'Star Social Testnet',
	        chain: 'SNS',
	        rpc: ['https://avastar.cc/ext/bc/C/rpc'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Social',
	            symbol: 'SNS',
	            decimals: 18,
	        },
	        infoURL: 'https://info.avastar.cc',
	        shortName: 'SNS',
	        chainId: 700,
	        networkId: 700,
	        explorers: [
	            {
	                name: 'starscan',
	                url: 'https://avastar.info',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'BlockChain Station Mainnet',
	        chain: 'BCS',
	        rpc: ['https://rpc-mainnet.bcsdev.io', 'wss://rpc-ws-mainnet.bcsdev.io'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'BCS Token',
	            symbol: 'BCS',
	            decimals: 18,
	        },
	        infoURL: 'https://blockchainstation.io',
	        shortName: 'bcs',
	        chainId: 707,
	        networkId: 707,
	        explorers: [
	            {
	                name: 'BlockChain Station Explorer',
	                url: 'https://explorer.bcsdev.io',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'BlockChain Station Testnet',
	        chain: 'BCS',
	        rpc: ['https://rpc-testnet.bcsdev.io', 'wss://rpc-ws-testnet.bcsdev.io'],
	        faucets: ['https://faucet.bcsdev.io'],
	        nativeCurrency: {
	            name: 'BCS Testnet Token',
	            symbol: 'tBCS',
	            decimals: 18,
	        },
	        infoURL: 'https://blockchainstation.io',
	        shortName: 'tbcs',
	        chainId: 708,
	        networkId: 708,
	        explorers: [
	            {
	                name: 'BlockChain Station Explorer',
	                url: 'https://testnet.bcsdev.io',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Factory 127 Testnet',
	        chain: 'FETH',
	        rpc: [],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Factory 127 Token',
	            symbol: 'FETH',
	            decimals: 18,
	        },
	        infoURL: 'https://www.factory127.com',
	        shortName: 'tfeth',
	        chainId: 721,
	        networkId: 721,
	        slip44: 721,
	    },
	    {
	        name: 'OpenChain Testnet',
	        chain: 'OpenChain Testnet',
	        rpc: ['http://mainnet.openchain.info:8545', 'https://mainnet1.openchain.info'],
	        faucets: ['https://faucet.openchain.info/'],
	        nativeCurrency: {
	            name: 'Openchain Testnet',
	            symbol: 'TOPC',
	            decimals: 18,
	        },
	        infoURL: 'https://testnet.openchain.info/',
	        shortName: 'opc',
	        chainId: 776,
	        networkId: 776,
	        explorers: [
	            {
	                name: 'OPEN CHAIN TESTNET',
	                url: 'https://testnet.openchain.info',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'cheapETH',
	        chain: 'cheapETH',
	        rpc: ['https://node.cheapeth.org/rpc'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'cTH',
	            symbol: 'cTH',
	            decimals: 18,
	        },
	        infoURL: 'https://cheapeth.org/',
	        shortName: 'cth',
	        chainId: 777,
	        networkId: 777,
	    },
	    {
	        name: 'Acala Network',
	        chain: 'ACA',
	        rpc: [],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Acala Token',
	            symbol: 'ACA',
	            decimals: 18,
	        },
	        infoURL: 'https://acala.network',
	        shortName: 'aca',
	        chainId: 787,
	        networkId: 787,
	        slip44: 787,
	    },
	    {
	        name: 'Aerochain Testnet',
	        chain: 'Aerochain',
	        network: 'testnet',
	        rpc: ['https://testnet-rpc.aerochain.id/'],
	        faucets: ['https://faucet.aerochain.id/'],
	        nativeCurrency: {
	            name: 'Aerochain Testnet',
	            symbol: 'TAero',
	            decimals: 18,
	        },
	        infoURL: 'https://aerochaincoin.org/',
	        shortName: 'taero',
	        chainId: 788,
	        networkId: 788,
	        explorers: [
	            {
	                name: 'aeroscan',
	                url: 'https://testnet.aeroscan.id',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Haic',
	        chain: 'Haic',
	        rpc: ['https://orig.haichain.io/'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Haicoin',
	            symbol: 'HAIC',
	            decimals: 18,
	        },
	        infoURL: 'https://www.haichain.io/',
	        shortName: 'haic',
	        chainId: 803,
	        networkId: 803,
	    },
	    {
	        name: 'Portal Fantasy Chain Test',
	        chain: 'PF',
	        icon: 'pf',
	        network: 'testnet',
	        rpc: ['https://subnets.avax.network/portal-fantasy/testnet/rpc'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Portal Fantasy Token',
	            symbol: 'PFT',
	            decimals: 18,
	        },
	        infoURL: 'https://portalfantasy.io',
	        shortName: 'PFTEST',
	        chainId: 808,
	        networkId: 808,
	        explorers: [],
	    },
	    {
	        name: 'Callisto Mainnet',
	        chain: 'CLO',
	        rpc: ['https://clo-geth.0xinfra.com'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Callisto Mainnet Ether',
	            symbol: 'CLO',
	            decimals: 18,
	        },
	        infoURL: 'https://callisto.network',
	        shortName: 'clo',
	        chainId: 820,
	        networkId: 1,
	        slip44: 820,
	    },
	    {
	        name: 'Callisto Testnet',
	        chain: 'CLO',
	        rpc: [],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Callisto Testnet Ether',
	            symbol: 'TCLO',
	            decimals: 18,
	        },
	        infoURL: 'https://callisto.network',
	        shortName: 'tclo',
	        chainId: 821,
	        networkId: 2,
	    },
	    {
	        name: 'Ambros Chain Mainnet',
	        chain: 'ambroschain',
	        rpc: ['https://api.ambros.network'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'AMBROS',
	            symbol: 'AMBROS',
	            decimals: 18,
	        },
	        infoURL: 'https://ambros.network',
	        shortName: 'ambros',
	        chainId: 880,
	        networkId: 880,
	        explorers: [
	            {
	                name: 'Ambros Chain Explorer',
	                url: 'https://ambrosscan.com',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'Wanchain',
	        chain: 'WAN',
	        rpc: ['https://gwan-ssl.wandevs.org:56891/'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Wancoin',
	            symbol: 'WAN',
	            decimals: 18,
	        },
	        infoURL: 'https://www.wanscan.org',
	        shortName: 'wan',
	        chainId: 888,
	        networkId: 888,
	        slip44: 5718350,
	    },
	    {
	        name: 'Garizon Testnet Stage0',
	        chain: 'GAR',
	        network: 'testnet',
	        icon: 'garizon',
	        rpc: ['https://s0-testnet.garizon.net/rpc'],
	        faucets: ['https://faucet-testnet.garizon.com'],
	        nativeCurrency: {
	            name: 'Garizon',
	            symbol: 'GAR',
	            decimals: 18,
	        },
	        infoURL: 'https://garizon.com',
	        shortName: 'gar-test-s0',
	        chainId: 900,
	        networkId: 900,
	        explorers: [
	            {
	                name: 'explorer',
	                url: 'https://explorer-testnet.garizon.com',
	                icon: 'garizon',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Garizon Testnet Stage1',
	        chain: 'GAR',
	        network: 'testnet',
	        icon: 'garizon',
	        rpc: ['https://s1-testnet.garizon.net/rpc'],
	        faucets: ['https://faucet-testnet.garizon.com'],
	        nativeCurrency: {
	            name: 'Garizon',
	            symbol: 'GAR',
	            decimals: 18,
	        },
	        infoURL: 'https://garizon.com',
	        shortName: 'gar-test-s1',
	        chainId: 901,
	        networkId: 901,
	        explorers: [
	            {
	                name: 'explorer',
	                url: 'https://explorer-testnet.garizon.com',
	                icon: 'garizon',
	                standard: 'EIP3091',
	            },
	        ],
	        parent: {
	            chain: 'eip155-900',
	            type: 'shard',
	        },
	    },
	    {
	        name: 'Garizon Testnet Stage2',
	        chain: 'GAR',
	        network: 'testnet',
	        icon: 'garizon',
	        rpc: ['https://s2-testnet.garizon.net/rpc'],
	        faucets: ['https://faucet-testnet.garizon.com'],
	        nativeCurrency: {
	            name: 'Garizon',
	            symbol: 'GAR',
	            decimals: 18,
	        },
	        infoURL: 'https://garizon.com',
	        shortName: 'gar-test-s2',
	        chainId: 902,
	        networkId: 902,
	        explorers: [
	            {
	                name: 'explorer',
	                url: 'https://explorer-testnet.garizon.com',
	                icon: 'garizon',
	                standard: 'EIP3091',
	            },
	        ],
	        parent: {
	            chain: 'eip155-900',
	            type: 'shard',
	        },
	    },
	    {
	        name: 'Garizon Testnet Stage3',
	        chain: 'GAR',
	        network: 'testnet',
	        icon: 'garizon',
	        rpc: ['https://s3-testnet.garizon.net/rpc'],
	        faucets: ['https://faucet-testnet.garizon.com'],
	        nativeCurrency: {
	            name: 'Garizon',
	            symbol: 'GAR',
	            decimals: 18,
	        },
	        infoURL: 'https://garizon.com',
	        shortName: 'gar-test-s3',
	        chainId: 903,
	        networkId: 903,
	        explorers: [
	            {
	                name: 'explorer',
	                url: 'https://explorer-testnet.garizon.com',
	                icon: 'garizon',
	                standard: 'EIP3091',
	            },
	        ],
	        parent: {
	            chain: 'eip155-900',
	            type: 'shard',
	        },
	    },
	    {
	        name: 'Portal Fantasy Chain',
	        chain: 'PF',
	        icon: 'pf',
	        network: 'mainnet',
	        rpc: [],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Portal Fantasy Token',
	            symbol: 'PFT',
	            decimals: 18,
	        },
	        infoURL: 'https://portalfantasy.io',
	        shortName: 'PF',
	        chainId: 909,
	        networkId: 909,
	        explorers: [],
	        status: 'incubating',
	    },
	    {
	        name: 'PulseChain Testnet',
	        shortName: 'tpls',
	        chain: 'tPLS',
	        chainId: 940,
	        networkId: 940,
	        infoURL: 'https://pulsechain.com/',
	        rpc: ['https://rpc.v2.testnet.pulsechain.com/', 'wss://rpc.v2.testnet.pulsechain.com/'],
	        faucets: ['https://faucet.v2.testnet.pulsechain.com/'],
	        nativeCurrency: {
	            name: 'Test Pulse',
	            symbol: 'tPLS',
	            decimals: 18,
	        },
	    },
	    {
	        name: 'PulseChain Testnet v2b',
	        shortName: 't2bpls',
	        chain: 't2bPLS',
	        network: 'testnet-2b',
	        chainId: 941,
	        networkId: 941,
	        infoURL: 'https://pulsechain.com/',
	        rpc: ['https://rpc.v2b.testnet.pulsechain.com/', 'wss://rpc.v2b.testnet.pulsechain.com/'],
	        faucets: ['https://faucet.v2b.testnet.pulsechain.com/'],
	        nativeCurrency: {
	            name: 'Test Pulse',
	            symbol: 'tPLS',
	            decimals: 18,
	        },
	    },
	    {
	        name: 'PulseChain Testnet v3',
	        shortName: 't3pls',
	        chain: 't3PLS',
	        network: 'testnet-3',
	        chainId: 942,
	        networkId: 942,
	        infoURL: 'https://pulsechain.com/',
	        rpc: ['https://rpc.v3.testnet.pulsechain.com/', 'wss://rpc.v3.testnet.pulsechain.com/'],
	        faucets: ['https://faucet.v3.testnet.pulsechain.com/'],
	        nativeCurrency: {
	            name: 'Test Pulse',
	            symbol: 'tPLS',
	            decimals: 18,
	        },
	    },
	    {
	        name: 'Nepal Blockchain Network',
	        chain: 'YETI',
	        rpc: ['https://api.nepalblockchain.dev', 'https://api.nepalblockchain.network'],
	        faucets: ['https://faucet.nepalblockchain.network'],
	        nativeCurrency: {
	            name: 'Nepal Blockchain Network Ether',
	            symbol: 'YETI',
	            decimals: 18,
	        },
	        infoURL: 'https://nepalblockchain.network',
	        shortName: 'yeti',
	        chainId: 977,
	        networkId: 977,
	    },
	    {
	        name: 'TOP Mainnet EVM',
	        chain: 'TOP',
	        icon: 'top',
	        rpc: ['ethapi.topnetwork.org'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Ether',
	            symbol: 'ETH',
	            decimals: 18,
	        },
	        infoURL: 'https://www.topnetwork.org/',
	        shortName: 'top_evm',
	        chainId: 980,
	        networkId: 0,
	        explorers: [
	            {
	                name: 'topscan.dev',
	                url: 'https://www.topscan.io',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'TOP Mainnet',
	        chain: 'TOP',
	        icon: 'top',
	        rpc: ['topapi.topnetwork.org'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'TOP',
	            symbol: 'TOP',
	            decimals: 6,
	        },
	        infoURL: 'https://www.topnetwork.org/',
	        shortName: 'top',
	        chainId: 989,
	        networkId: 0,
	        explorers: [
	            {
	                name: 'topscan.dev',
	                url: 'https://www.topscan.io',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'Lucky Network',
	        chain: 'LN',
	        rpc: ['https://rpc.luckynetwork.org', 'wss://ws.lnscan.org', 'https://rpc.lnscan.org'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Lucky',
	            symbol: 'L99',
	            decimals: 18,
	        },
	        infoURL: 'https://luckynetwork.org',
	        shortName: 'ln',
	        chainId: 998,
	        networkId: 998,
	        icon: 'lucky',
	        explorers: [
	            {
	                name: 'blockscout',
	                url: 'https://explorer.luckynetwork.org',
	                standard: 'none',
	            },
	            {
	                name: 'expedition',
	                url: 'https://lnscan.org',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'Wanchain Testnet',
	        chain: 'WAN',
	        rpc: ['https://gwan-ssl.wandevs.org:46891/'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Wancoin',
	            symbol: 'WAN',
	            decimals: 18,
	        },
	        infoURL: 'https://testnet.wanscan.org',
	        shortName: 'twan',
	        chainId: 999,
	        networkId: 999,
	    },
	    {
	        name: 'GTON Mainnet',
	        chain: 'GTON',
	        rpc: ['https://rpc.gton.network/'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'GCD',
	            symbol: 'GCD',
	            decimals: 18,
	        },
	        infoURL: 'https://gton.capital',
	        shortName: 'gton',
	        chainId: 1000,
	        networkId: 1000,
	        explorers: [
	            {
	                name: 'GTON Network Explorer',
	                url: 'https://explorer.gton.network',
	                standard: 'EIP3091',
	            },
	        ],
	        parent: {
	            type: 'L2',
	            chain: 'eip155-1',
	        },
	    },
	    {
	        name: 'Klaytn Testnet Baobab',
	        chain: 'KLAY',
	        rpc: ['https://api.baobab.klaytn.net:8651'],
	        faucets: ['https://baobab.wallet.klaytn.com/access?next=faucet'],
	        nativeCurrency: {
	            name: 'KLAY',
	            symbol: 'KLAY',
	            decimals: 18,
	        },
	        infoURL: 'https://www.klaytn.com/',
	        shortName: 'Baobab',
	        chainId: 1001,
	        networkId: 1001,
	    },
	    {
	        name: 'Newton Testnet',
	        chain: 'NEW',
	        rpc: ['https://rpc1.newchain.newtonproject.org'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Newton',
	            symbol: 'NEW',
	            decimals: 18,
	        },
	        infoURL: 'https://www.newtonproject.org/',
	        shortName: 'tnew',
	        chainId: 1007,
	        networkId: 1007,
	    },
	    {
	        name: 'Eurus Mainnet',
	        chain: 'EUN',
	        network: 'eurus',
	        rpc: ['https://mainnet.eurus.network/'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Eurus',
	            symbol: 'EUN',
	            decimals: 18,
	        },
	        infoURL: 'https://eurus.network',
	        shortName: 'eun',
	        chainId: 1008,
	        networkId: 1008,
	        icon: 'eurus',
	        explorers: [
	            {
	                name: 'eurusexplorer',
	                url: 'https://explorer.eurus.network',
	                icon: 'eurus',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'Evrice Network',
	        chain: 'EVC',
	        rpc: ['https://meta.evrice.com'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Evrice',
	            symbol: 'EVC',
	            decimals: 18,
	        },
	        infoURL: 'https://evrice.com',
	        shortName: 'EVC',
	        chainId: 1010,
	        networkId: 1010,
	        slip44: 1020,
	    },
	    {
	        name: 'Newton',
	        chain: 'NEW',
	        rpc: ['https://global.rpc.mainnet.newtonproject.org'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Newton',
	            symbol: 'NEW',
	            decimals: 18,
	        },
	        infoURL: 'https://www.newtonproject.org/',
	        shortName: 'new',
	        chainId: 1012,
	        networkId: 1012,
	    },
	    {
	        name: 'Sakura',
	        chain: 'Sakura',
	        rpc: [],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Sakura',
	            symbol: 'SKU',
	            decimals: 18,
	        },
	        infoURL: 'https://clover.finance/sakura',
	        shortName: 'sku',
	        chainId: 1022,
	        networkId: 1022,
	    },
	    {
	        name: 'Clover Testnet',
	        chain: 'Clover',
	        rpc: [],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Clover',
	            symbol: 'CLV',
	            decimals: 18,
	        },
	        infoURL: 'https://clover.finance',
	        shortName: 'tclv',
	        chainId: 1023,
	        networkId: 1023,
	    },
	    {
	        name: 'CLV Parachain',
	        chain: 'CLV',
	        rpc: ['https://api-para.clover.finance'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'CLV',
	            symbol: 'CLV',
	            decimals: 18,
	        },
	        infoURL: 'https://clv.org',
	        shortName: 'clv',
	        chainId: 1024,
	        networkId: 1024,
	    },
	    {
	        name: 'BitTorrent Chain Testnet',
	        chain: 'BTTC',
	        rpc: ['https://testrpc.bittorrentchain.io/'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'BitTorrent',
	            symbol: 'BTT',
	            decimals: 18,
	        },
	        infoURL: 'https://bittorrentchain.io/',
	        shortName: 'tbtt',
	        chainId: 1028,
	        networkId: 1028,
	        explorers: [
	            {
	                name: 'testbttcscan',
	                url: 'https://testscan.bittorrentchain.io',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'Conflux eSpace',
	        chain: 'Conflux',
	        network: 'mainnet',
	        rpc: ['https://evm.confluxrpc.com'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'CFX',
	            symbol: 'CFX',
	            decimals: 18,
	        },
	        infoURL: 'https://confluxnetwork.org',
	        shortName: 'cfx',
	        chainId: 1030,
	        networkId: 1030,
	        icon: 'conflux',
	        explorers: [
	            {
	                name: 'Conflux Scan',
	                url: 'https://evm.confluxscan.net',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'Metis Andromeda Mainnet',
	        chain: 'ETH',
	        rpc: ['https://andromeda.metis.io/?owner=1088'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Metis',
	            symbol: 'METIS',
	            decimals: 18,
	        },
	        infoURL: 'https://www.metis.io',
	        shortName: 'metis-andromeda',
	        chainId: 1088,
	        networkId: 1088,
	        explorers: [
	            {
	                name: 'blockscout',
	                url: 'https://andromeda-explorer.metis.io',
	                standard: 'EIP3091',
	            },
	        ],
	        parent: {
	            type: 'L2',
	            chain: 'eip155-1',
	            bridges: [
	                {
	                    url: 'https://bridge.metis.io',
	                },
	            ],
	        },
	    },
	    {
	        name: 'MathChain',
	        chain: 'MATH',
	        rpc: ['https://mathchain-asia.maiziqianbao.net/rpc', 'https://mathchain-us.maiziqianbao.net/rpc'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'MathChain',
	            symbol: 'MATH',
	            decimals: 18,
	        },
	        infoURL: 'https://mathchain.org',
	        shortName: 'MATH',
	        chainId: 1139,
	        networkId: 1139,
	    },
	    {
	        name: 'MathChain Testnet',
	        chain: 'MATH',
	        rpc: ['https://galois-hk.maiziqianbao.net/rpc'],
	        faucets: ['https://scan.boka.network/#/Galois/faucet'],
	        nativeCurrency: {
	            name: 'MathChain',
	            symbol: 'MATH',
	            decimals: 18,
	        },
	        infoURL: 'https://mathchain.org',
	        shortName: 'tMATH',
	        chainId: 1140,
	        networkId: 1140,
	    },
	    {
	        name: 'Iora Chain',
	        chain: 'IORA',
	        network: 'iorachain',
	        icon: 'iorachain',
	        rpc: ['https://dataseed.iorachain.com'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Iora',
	            symbol: 'IORA',
	            decimals: 18,
	        },
	        infoURL: 'https://iorachain.com',
	        shortName: 'iora',
	        chainId: 1197,
	        networkId: 1197,
	        explorers: [
	            {
	                name: 'ioraexplorer',
	                url: 'https://explorer.iorachain.com',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Evanesco Testnet',
	        chain: 'Evanesco Testnet',
	        network: 'avis',
	        rpc: ['https://seed5.evanesco.org:8547'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'AVIS',
	            symbol: 'AVIS',
	            decimals: 18,
	        },
	        infoURL: 'https://evanesco.org/',
	        shortName: 'avis',
	        chainId: 1201,
	        networkId: 1201,
	    },
	    {
	        name: 'World Trade Technical Chain Mainnet',
	        chain: 'WTT',
	        rpc: ['https://rpc.cadaut.com', 'wss://rpc.cadaut.com/ws'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'World Trade Token',
	            symbol: 'WTT',
	            decimals: 18,
	        },
	        infoURL: 'http://www.cadaut.com',
	        shortName: 'wtt',
	        chainId: 1202,
	        networkId: 2048,
	        explorers: [
	            {
	                name: 'WTTScout',
	                url: 'https://explorer.cadaut.com',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Popcateum Mainnet',
	        chain: 'POPCATEUM',
	        rpc: ['https://dataseed.popcateum.org'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Popcat',
	            symbol: 'POP',
	            decimals: 18,
	        },
	        infoURL: 'https://popcateum.org',
	        shortName: 'popcat',
	        chainId: 1213,
	        networkId: 1213,
	        explorers: [
	            {
	                name: 'popcateum explorer',
	                url: 'https://explorer.popcateum.org',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'EnterChain Mainnet',
	        chain: 'ENTER',
	        network: 'mainnet',
	        rpc: ['https://tapi.entercoin.net/'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'EnterCoin',
	            symbol: 'ENTER',
	            decimals: 18,
	        },
	        infoURL: 'https://entercoin.net',
	        shortName: 'enter',
	        chainId: 1214,
	        networkId: 1214,
	        icon: 'enter',
	        explorers: [
	            {
	                name: 'Enter Explorer - Expenter',
	                url: 'https://explorer.entercoin.net',
	                icon: 'enter',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'OM Platform Mainnet',
	        chain: 'omplatform',
	        network: 'mainnet',
	        rpc: ['https://rpc-cnx.omplatform.com/'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'OMCOIN',
	            symbol: 'OM',
	            decimals: 18,
	        },
	        infoURL: 'https://omplatform.com/',
	        shortName: 'om',
	        chainId: 1246,
	        networkId: 1246,
	        explorers: [
	            {
	                name: 'OMSCAN - Expenter',
	                url: 'https://omscan.omplatform.com',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'HALO Mainnet',
	        chain: 'HALO',
	        rpc: ['https://nodes.halo.land'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'HALO',
	            symbol: 'HO',
	            decimals: 18,
	        },
	        infoURL: 'https://halo.land/#/',
	        shortName: 'HO',
	        chainId: 1280,
	        networkId: 1280,
	        explorers: [
	            {
	                name: 'HALOexplorer',
	                url: 'https://browser.halo.land',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'Moonbeam',
	        chain: 'MOON',
	        rpc: ['https://rpc.api.moonbeam.network', 'wss://wss.api.moonbeam.network'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Glimmer',
	            symbol: 'GLMR',
	            decimals: 18,
	        },
	        infoURL: 'https://moonbeam.network/networks/moonbeam/',
	        shortName: 'mbeam',
	        chainId: 1284,
	        networkId: 1284,
	        explorers: [
	            {
	                name: 'moonscan',
	                url: 'https://moonbeam.moonscan.io',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'Moonriver',
	        chain: 'MOON',
	        rpc: ['https://rpc.api.moonriver.moonbeam.network', 'wss://wss.api.moonriver.moonbeam.network'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Moonriver',
	            symbol: 'MOVR',
	            decimals: 18,
	        },
	        infoURL: 'https://moonbeam.network/networks/moonriver/',
	        shortName: 'mriver',
	        chainId: 1285,
	        networkId: 1285,
	        explorers: [
	            {
	                name: 'moonscan',
	                url: 'https://moonriver.moonscan.io',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'Moonrock old',
	        chain: 'MOON',
	        rpc: [],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Rocs',
	            symbol: 'ROC',
	            decimals: 18,
	        },
	        infoURL: '',
	        shortName: 'mrock-old',
	        chainId: 1286,
	        networkId: 1286,
	        status: 'deprecated',
	    },
	    {
	        name: 'Moonbase Alpha',
	        chain: 'MOON',
	        rpc: ['https://rpc.api.moonbase.moonbeam.network', 'wss://wss.api.moonbase.moonbeam.network'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Dev',
	            symbol: 'DEV',
	            decimals: 18,
	        },
	        infoURL: 'https://docs.moonbeam.network/networks/testnet/',
	        shortName: 'mbase',
	        chainId: 1287,
	        networkId: 1287,
	        explorers: [
	            {
	                name: 'moonscan',
	                url: 'https://moonbase.moonscan.io',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'Moonrock',
	        chain: 'MOON',
	        rpc: ['https://rpc.api.moonrock.moonbeam.network', 'wss://wss.api.moonrock.moonbeam.network'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Rocs',
	            symbol: 'ROC',
	            decimals: 18,
	        },
	        infoURL: 'https://docs.moonbeam.network/learn/platform/networks/overview/',
	        shortName: 'mrock',
	        chainId: 1288,
	        networkId: 1288,
	    },
	    {
	        name: 'Boba Network Bobabase',
	        chain: 'Bobabase',
	        rpc: [
	            'https://bobabase.boba.network',
	            'wss://wss.bobabase.boba.network',
	            'https://replica.bobabase.boba.network',
	            'wss://replica-wss.bobabase.boba.network',
	        ],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Boba Token',
	            symbol: 'BOBA',
	            decimals: 18,
	        },
	        infoURL: 'https://boba.network',
	        shortName: 'Bobabase',
	        chainId: 1297,
	        networkId: 1297,
	        explorers: [
	            {
	                name: 'Blockscout',
	                url: 'https://blockexplorer.bobabase.boba.network',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'Aitd Mainnet',
	        chain: 'AITD',
	        icon: 'aitd',
	        rpc: ['http://walletrpc.aitd.io', 'http://node.aitd.io'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'AITD Mainnet',
	            symbol: 'AITD',
	            decimals: 18,
	        },
	        infoURL: 'https://www.aitd.io/',
	        shortName: 'aitd',
	        chainId: 1319,
	        networkId: 1319,
	        explorers: [
	            {
	                name: 'AITD Chain Explorer Mainnet',
	                url: 'https://aitd-explorer-new.aitd.io',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Aitd Testnet',
	        chain: 'AITD',
	        icon: 'aitd',
	        rpc: ['http://http-testnet.aitd.io'],
	        faucets: ['https://aitd-faucet-pre.aitdcoin.com/'],
	        nativeCurrency: {
	            name: 'AITD Testnet',
	            symbol: 'AITD',
	            decimals: 18,
	        },
	        infoURL: 'https://www.aitd.io/',
	        shortName: 'aitdtestnet',
	        chainId: 1320,
	        networkId: 1320,
	        explorers: [
	            {
	                name: 'AITD Chain Explorer Testnet',
	                url: 'https://block-explorer-testnet.aitd.io',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'CENNZnet old',
	        chain: 'CENNZnet',
	        rpc: [],
	        faucets: [],
	        nativeCurrency: {
	            name: 'CPAY',
	            symbol: 'CPAY',
	            decimals: 18,
	        },
	        infoURL: 'https://cennz.net',
	        shortName: 'cennz-old',
	        chainId: 1337,
	        networkId: 1337,
	        status: 'deprecated',
	    },
	    {
	        name: 'Sherpax Mainnet',
	        chain: 'Sherpax Mainnet',
	        rpc: ['https://mainnet.sherpax.io/rpc'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'KSX',
	            symbol: 'KSX',
	            decimals: 18,
	        },
	        infoURL: 'https://sherpax.io/',
	        shortName: 'Sherpax',
	        chainId: 1506,
	        networkId: 1506,
	        explorers: [
	            {
	                name: 'Sherpax Mainnet Explorer',
	                url: 'https://evm.sherpax.io',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'Sherpax Testnet',
	        chain: 'Sherpax Testnet',
	        rpc: ['https://sherpax-testnet.chainx.org/rpc'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'KSX',
	            symbol: 'KSX',
	            decimals: 18,
	        },
	        infoURL: 'https://sherpax.io/',
	        shortName: 'Sherpax Testnet',
	        chainId: 1507,
	        networkId: 1507,
	        explorers: [
	            {
	                name: 'Sherpax Testnet Explorer',
	                url: 'https://evm-pre.sherpax.io',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'Catecoin Chain Mainnet',
	        chain: 'Catechain',
	        rpc: ['https://send.catechain.com'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Catecoin',
	            symbol: 'CATE',
	            decimals: 18,
	        },
	        infoURL: 'https://catechain.com',
	        shortName: 'cate',
	        chainId: 1618,
	        networkId: 1618,
	    },
	    {
	        name: 'Atheios',
	        chain: 'ATH',
	        rpc: ['https://wallet.atheios.com:8797'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Atheios Ether',
	            symbol: 'ATH',
	            decimals: 18,
	        },
	        infoURL: 'https://atheios.com',
	        shortName: 'ath',
	        chainId: 1620,
	        networkId: 11235813,
	        slip44: 1620,
	    },
	    {
	        name: 'Btachain',
	        chain: 'btachain',
	        rpc: ['https://dataseed1.btachain.com/'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Bitcoin Asset',
	            symbol: 'BTA',
	            decimals: 18,
	        },
	        infoURL: 'https://bitcoinasset.io/',
	        shortName: 'bta',
	        chainId: 1657,
	        networkId: 1657,
	    },
	    {
	        name: 'LUDAN Mainnet',
	        chain: 'LUDAN',
	        rpc: ['https://rpc.ludan.org/'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'LUDAN',
	            symbol: 'LUDAN',
	            decimals: 18,
	        },
	        infoURL: 'https://www.ludan.org/',
	        shortName: 'LUDAN',
	        icon: 'ludan',
	        chainId: 1688,
	        networkId: 1688,
	    },
	    {
	        name: 'Cube Chain Mainnet',
	        chain: 'Cube',
	        icon: 'cube',
	        rpc: [
	            'https://http-mainnet.cube.network',
	            'wss://ws-mainnet.cube.network',
	            'https://http-mainnet-sg.cube.network',
	            'wss://ws-mainnet-sg.cube.network',
	            'https://http-mainnet-us.cube.network',
	            'wss://ws-mainnet-us.cube.network',
	        ],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Cube Chain Native Token',
	            symbol: 'CUBE',
	            decimals: 18,
	        },
	        infoURL: 'https://www.cube.network',
	        shortName: 'cube',
	        chainId: 1818,
	        networkId: 1818,
	        slip44: 1818,
	        explorers: [
	            {
	                name: 'cube-scan',
	                url: 'https://cubescan.network',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Cube Chain Testnet',
	        chain: 'Cube',
	        icon: 'cube',
	        rpc: [
	            'https://http-testnet.cube.network',
	            'wss://ws-testnet.cube.network',
	            'https://http-testnet-sg.cube.network',
	            'wss://ws-testnet-sg.cube.network',
	            'https://http-testnet-jp.cube.network',
	            'wss://ws-testnet-jp.cube.network',
	            'https://http-testnet-us.cube.network',
	            'wss://ws-testnet-us.cube.network',
	        ],
	        faucets: ['https://faucet.cube.network'],
	        nativeCurrency: {
	            name: 'Cube Chain Test Native Token',
	            symbol: 'CUBET',
	            decimals: 18,
	        },
	        infoURL: 'https://www.cube.network',
	        shortName: 'cubet',
	        chainId: 1819,
	        networkId: 1819,
	        slip44: 1819,
	        explorers: [
	            {
	                name: 'cubetest-scan',
	                url: 'https://testnet.cubescan.network',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Teslafunds',
	        chain: 'TSF',
	        rpc: ['https://tsfapi.europool.me'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Teslafunds Ether',
	            symbol: 'TSF',
	            decimals: 18,
	        },
	        infoURL: 'https://teslafunds.io',
	        shortName: 'tsf',
	        chainId: 1856,
	        networkId: 1,
	    },
	    {
	        name: 'BON Network',
	        chain: 'BON',
	        network: 'testnet',
	        rpc: ['http://rpc.boyanet.org:8545', 'ws://rpc.boyanet.org:8546'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'BOYACoin',
	            symbol: 'BOY',
	            decimals: 18,
	        },
	        infoURL: 'https://boyanet.org',
	        shortName: 'boya',
	        chainId: 1898,
	        networkId: 1,
	        explorers: [
	            {
	                name: 'explorer',
	                url: 'https://explorer.boyanet.org:4001',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Eurus Testnet',
	        chain: 'EUN',
	        network: 'eurus-testnet',
	        rpc: ['https://testnet.eurus.network'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Eurus',
	            symbol: 'EUN',
	            decimals: 18,
	        },
	        infoURL: 'https://eurus.network',
	        shortName: 'euntest',
	        chainId: 1984,
	        networkId: 1984,
	        icon: 'eurus',
	        explorers: [
	            {
	                name: 'testnetexplorer',
	                url: 'https://testnetexplorer.eurus.network',
	                icon: 'eurus',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'EtherGem',
	        chain: 'EGEM',
	        rpc: ['https://jsonrpc.egem.io/custom'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'EtherGem Ether',
	            symbol: 'EGEM',
	            decimals: 18,
	        },
	        infoURL: 'https://egem.io',
	        shortName: 'egem',
	        chainId: 1987,
	        networkId: 1987,
	        slip44: 1987,
	    },
	    {
	        name: 'Milkomeda C1 Mainnet',
	        chain: 'milkAda',
	        icon: 'milkomeda',
	        network: 'mainnet',
	        rpc: ['https://rpc-mainnet-cardano-evm.c1.milkomeda.com', 'wss://rpc-mainnet-cardano-evm.c1.milkomeda.com'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'milkAda',
	            symbol: 'mADA',
	            decimals: 18,
	        },
	        infoURL: 'https://milkomeda.com',
	        shortName: 'milkAda',
	        chainId: 2001,
	        networkId: 2001,
	        explorers: [
	            {
	                name: 'Blockscout',
	                url: 'https://explorer-mainnet-cardano-evm.c1.milkomeda.com',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'CloudWalk Testnet',
	        chain: 'CloudWalk Testnet',
	        rpc: [],
	        faucets: [],
	        nativeCurrency: {
	            name: 'CloudWalk Native Token',
	            symbol: 'CWN',
	            decimals: 18,
	        },
	        infoURL: 'https://cloudwalk.io',
	        shortName: 'cloudwalk_testnet',
	        chainId: 2008,
	        networkId: 2008,
	        explorers: [
	            {
	                name: 'CloudWalk Testnet Explorer',
	                url: 'https://explorer.testnet.cloudwalk.io',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'CloudWalk Mainnet',
	        chain: 'CloudWalk Mainnet',
	        rpc: [],
	        faucets: [],
	        nativeCurrency: {
	            name: 'CloudWalk Native Token',
	            symbol: 'CWN',
	            decimals: 18,
	        },
	        infoURL: 'https://cloudwalk.io',
	        shortName: 'cloudwalk_mainnet',
	        chainId: 2009,
	        networkId: 2009,
	        explorers: [
	            {
	                name: 'CloudWalk Mainnet Explorer',
	                url: 'https://explorer.mainnet.cloudwalk.io',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: '420coin',
	        chain: '420',
	        rpc: [],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Fourtwenty',
	            symbol: '420',
	            decimals: 18,
	        },
	        infoURL: 'https://420integrated.com',
	        shortName: '420',
	        chainId: 2020,
	        networkId: 2020,
	    },
	    {
	        name: 'Edgeware Mainnet',
	        chain: 'EDG',
	        rpc: ['https://mainnet1.edgewa.re'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Edge',
	            symbol: 'EDG',
	            decimals: 18,
	        },
	        infoURL: 'http://edgewa.re',
	        shortName: 'edg',
	        chainId: 2021,
	        networkId: 2021,
	    },
	    {
	        name: 'Beresheet Testnet',
	        chain: 'EDG',
	        rpc: ['https://beresheet1.edgewa.re'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Testnet Edge',
	            symbol: 'tEDG',
	            decimals: 18,
	        },
	        infoURL: 'http://edgewa.re',
	        shortName: 'edgt',
	        chainId: 2022,
	        networkId: 2022,
	    },
	    {
	        name: 'Taycan Testnet',
	        chain: 'Taycan',
	        rpc: ['https://test-taycan.hupayx.io'],
	        faucets: ['https://ttaycan-faucet.hupayx.io/'],
	        nativeCurrency: {
	            name: 'test-Shuffle',
	            symbol: 'tSFL',
	            decimals: 18,
	        },
	        infoURL: 'https://hupayx.io',
	        shortName: 'taycan-testnet',
	        chainId: 2023,
	        networkId: 2023,
	        explorers: [
	            {
	                name: 'Taycan Explorer(Blockscout)',
	                url: 'https://evmscan-test.hupayx.io',
	                standard: 'none',
	            },
	            {
	                name: 'Taycan Cosmos Explorer',
	                url: 'https://cosmoscan-test.hupayx.io',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'Rangers Protocol Mainnet',
	        chain: 'Rangers',
	        icon: 'rangers',
	        rpc: ['https://mainnet.rangersprotocol.com/api/jsonrpc'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Rangers Protocol Gas',
	            symbol: 'RPG',
	            decimals: 18,
	        },
	        infoURL: 'https://rangersprotocol.com',
	        shortName: 'rpg',
	        chainId: 2025,
	        networkId: 2025,
	        slip44: 1008,
	        explorers: [
	            {
	                name: 'rangersscan',
	                url: 'https://scan.rangersprotocol.com',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'Ecoball Mainnet',
	        chain: 'ECO',
	        rpc: ['https://api.ecoball.org/ecoball/'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Ecoball Coin',
	            symbol: 'ECO',
	            decimals: 18,
	        },
	        infoURL: 'https://ecoball.org',
	        shortName: 'eco',
	        chainId: 2100,
	        networkId: 2100,
	        explorers: [
	            {
	                name: 'Ecoball Explorer',
	                url: 'https://scan.ecoball.org',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Ecoball Testnet Espuma',
	        chain: 'ECO',
	        rpc: ['https://api.ecoball.org/espuma/'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Espuma Coin',
	            symbol: 'ECO',
	            decimals: 18,
	        },
	        infoURL: 'https://ecoball.org',
	        shortName: 'esp',
	        chainId: 2101,
	        networkId: 2101,
	        explorers: [
	            {
	                name: 'Ecoball Testnet Explorer',
	                url: 'https://espuma-scan.ecoball.org',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Findora Mainnet',
	        chain: 'Findora',
	        network: 'mainnet',
	        rpc: ['https://prod-mainnet.prod.findora.org:8545'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'FRA',
	            symbol: 'FRA',
	            decimals: 18,
	        },
	        infoURL: 'https://findora.org/',
	        shortName: 'fra',
	        chainId: 2152,
	        networkId: 2152,
	        explorers: [
	            {
	                name: 'findorascan',
	                url: 'https://evm.findorascan.io',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Findora Testnet',
	        chain: 'Testnet-anvil',
	        network: 'testnet',
	        rpc: ['https://prod-testnet.prod.findora.org:8545/'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'FRA',
	            symbol: 'FRA',
	            decimals: 18,
	        },
	        infoURL: 'https://findora.org/',
	        shortName: 'findora-testnet',
	        chainId: 2153,
	        networkId: 2153,
	        explorers: [
	            {
	                name: 'findorascan',
	                url: 'https://testnet-anvil.evm.findorascan.io',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Evanesco Mainnet',
	        chain: 'EVA',
	        network: 'mainnet',
	        rpc: ['https://seed4.evanesco.org:8546'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'EVA',
	            symbol: 'EVA',
	            decimals: 18,
	        },
	        infoURL: 'https://evanesco.org/',
	        shortName: 'evanesco',
	        chainId: 2213,
	        networkId: 2213,
	        icon: 'evanesco',
	        explorers: [
	            {
	                name: 'Evanesco Explorer',
	                url: 'https://explorer.evanesco.org',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'Kava EVM Testnet',
	        chain: 'KAVA',
	        network: 'testnet',
	        rpc: ['https://evm.testnet.kava.io', 'wss://wevm.testnet.kava.io'],
	        faucets: ['https://faucet.kava.io'],
	        nativeCurrency: {
	            name: 'TKava',
	            symbol: 'TKAVA',
	            decimals: 18,
	        },
	        infoURL: 'https://www.kava.io',
	        shortName: 'tkava',
	        chainId: 2221,
	        networkId: 2221,
	        icon: 'kava',
	        explorers: [
	            {
	                name: 'Kava Testnet Explorer',
	                url: 'https://explorer.testnet.kava.io',
	                standard: 'EIP3091',
	                icon: 'kava',
	            },
	        ],
	    },
	    {
	        name: 'Kava EVM',
	        chain: 'KAVA',
	        network: 'mainnet',
	        rpc: ['https://evm.kava.io', 'https://evm2.kava.io', 'wss://wevm.kava.io', 'wss://wevm2.kava.io'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Kava',
	            symbol: 'KAVA',
	            decimals: 18,
	        },
	        infoURL: 'https://www.kava.io',
	        shortName: 'kava',
	        chainId: 2222,
	        networkId: 2222,
	        icon: 'kava',
	        explorers: [
	            {
	                name: 'Kava EVM Explorer',
	                url: 'https://explorer.kava.io',
	                standard: 'EIP3091',
	                icon: 'kava',
	            },
	        ],
	    },
	    {
	        name: 'VChain Mainnet',
	        chain: 'VChain',
	        rpc: ['https://bc.vcex.xyz'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'VNDT',
	            symbol: 'VNDT',
	            decimals: 18,
	        },
	        infoURL: 'https://bo.vcex.xyz/',
	        shortName: 'VChain',
	        chainId: 2223,
	        networkId: 2223,
	        explorers: [
	            {
	                name: 'VChain Scan',
	                url: 'https://scan.vcex.xyz',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Kortho Mainnet',
	        chain: 'Kortho Chain',
	        rpc: ['https://www.kortho-chain.com'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'KorthoChain',
	            symbol: 'KTO',
	            decimals: 11,
	        },
	        infoURL: 'https://www.kortho.io/',
	        shortName: 'ktoc',
	        chainId: 2559,
	        networkId: 2559,
	    },
	    {
	        name: 'TechPay Mainnet',
	        chain: 'TPC',
	        network: 'mainnet',
	        rpc: ['https://api.techpay.io/'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'TechPay',
	            symbol: 'TPC',
	            decimals: 18,
	        },
	        infoURL: 'https://techpay.io/',
	        shortName: 'tpc',
	        chainId: 2569,
	        networkId: 2569,
	        icon: 'techpay',
	        explorers: [
	            {
	                name: 'tpcscan',
	                url: 'https://tpcscan.com',
	                icon: 'techpay',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'EZChain C-Chain Mainnet',
	        chain: 'EZC',
	        rpc: ['https://api.ezchain.com/ext/bc/C/rpc'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'EZChain',
	            symbol: 'EZC',
	            decimals: 18,
	        },
	        infoURL: 'https://ezchain.com',
	        shortName: 'EZChain',
	        chainId: 2612,
	        networkId: 2612,
	        icon: 'ezchain',
	        explorers: [
	            {
	                name: 'ezchain',
	                url: 'https://cchain-explorer.ezchain.com',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'EZChain C-Chain Testnet',
	        chain: 'EZC',
	        rpc: ['https://testnet-api.ezchain.com/ext/bc/C/rpc'],
	        faucets: ['https://testnet-faucet.ezchain.com'],
	        nativeCurrency: {
	            name: 'EZChain',
	            symbol: 'EZC',
	            decimals: 18,
	        },
	        infoURL: 'https://ezchain.com',
	        shortName: 'Fuji-EZChain',
	        chainId: 2613,
	        networkId: 2613,
	        icon: 'ezchain',
	        explorers: [
	            {
	                name: 'ezchain',
	                url: 'https://testnet-cchain-explorer.ezchain.com',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'CENNZnet Rata',
	        chain: 'CENNZnet',
	        network: 'rata',
	        rpc: ['https://rata.centrality.me/public'],
	        faucets: ['https://app-faucet.centrality.me'],
	        nativeCurrency: {
	            name: 'CPAY',
	            symbol: 'CPAY',
	            decimals: 18,
	        },
	        infoURL: 'https://cennz.net',
	        shortName: 'cennz-r',
	        chainId: 3000,
	        networkId: 3000,
	        icon: 'cennz',
	    },
	    {
	        name: 'CENNZnet Nikau',
	        chain: 'CENNZnet',
	        network: 'nikau',
	        rpc: ['https://nikau.centrality.me/public'],
	        faucets: ['https://app-faucet.centrality.me'],
	        nativeCurrency: {
	            name: 'CPAY',
	            symbol: 'CPAY',
	            decimals: 18,
	        },
	        infoURL: 'https://cennz.net',
	        shortName: 'cennz-n',
	        chainId: 3001,
	        networkId: 3001,
	        icon: 'cennz',
	        explorers: [
	            {
	                name: 'UNcover',
	                url: 'https://www.uncoverexplorer.com/?network=Nikau',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'ZCore Testnet',
	        chain: 'Beach',
	        icon: 'zcore',
	        rpc: ['https://rpc-testnet.zcore.cash'],
	        faucets: ['https://faucet.zcore.cash'],
	        nativeCurrency: {
	            name: 'ZCore',
	            symbol: 'ZCR',
	            decimals: 18,
	        },
	        infoURL: 'https://zcore.cash',
	        shortName: 'zcrbeach',
	        chainId: 3331,
	        networkId: 3331,
	    },
	    {
	        name: 'Web3Q Testnet',
	        chain: 'Web3Q',
	        rpc: ['https://testnet.web3q.io:8545'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Web3Q',
	            symbol: 'W3Q',
	            decimals: 18,
	        },
	        infoURL: 'https://testnet.web3q.io/home.w3q/',
	        shortName: 'w3q-t',
	        chainId: 3333,
	        networkId: 3333,
	        explorers: [
	            {
	                name: 'w3q-testnet',
	                url: 'https://explorer.testnet.web3q.io',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Web3Q Galileo',
	        chain: 'Web3Q',
	        rpc: ['https://galileo.web3q.io:8545'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Web3Q',
	            symbol: 'W3Q',
	            decimals: 18,
	        },
	        infoURL: 'https://galileo.web3q.io/home.w3q/',
	        shortName: 'w3q-g',
	        chainId: 3334,
	        networkId: 3334,
	        explorers: [
	            {
	                name: 'w3q-galileo',
	                url: 'https://explorer.galileo.web3q.io',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Paribu Net Mainnet',
	        chain: 'PRB',
	        network: 'Paribu Net',
	        rpc: ['https://rpc.paribu.network'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'PRB',
	            symbol: 'PRB',
	            decimals: 18,
	        },
	        infoURL: 'https://net.paribu.com',
	        shortName: 'prb',
	        chainId: 3400,
	        networkId: 3400,
	        icon: 'prb',
	        explorers: [
	            {
	                name: 'Paribu Net Explorer',
	                url: 'https://explorer.paribu.network',
	                icon: 'explorer',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Paribu Net Testnet',
	        chain: 'PRB',
	        network: 'Paribu Net',
	        rpc: ['https://rpc.testnet.paribuscan.com'],
	        faucets: ['https://faucet.paribuscan.com'],
	        nativeCurrency: {
	            name: 'PRB',
	            symbol: 'PRB',
	            decimals: 18,
	        },
	        infoURL: 'https://net.paribu.com',
	        shortName: 'prbtestnet',
	        chainId: 3500,
	        networkId: 3500,
	        icon: 'prb',
	        explorers: [
	            {
	                name: 'Paribu Net Testnet Explorer',
	                url: 'https://testnet.paribuscan.com',
	                icon: 'explorer',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'JFIN Chain',
	        chain: 'JFIN',
	        rpc: ['https://rpc.jfinchain.com'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'JFIN Coin',
	            symbol: 'jfin',
	            decimals: 18,
	        },
	        infoURL: 'https://jfinchain.com',
	        shortName: 'jfin',
	        chainId: 3501,
	        networkId: 3501,
	        explorers: [
	            {
	                name: 'JFIN Chain Explorer',
	                url: 'https://exp.jfinchain.com',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Bittex Mainnet',
	        chain: 'BTX',
	        rpc: ['https://rpc1.bittexscan.info', 'https://rpc2.bittexscan.info'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Bittex',
	            symbol: 'BTX',
	            decimals: 18,
	        },
	        infoURL: 'https://bittexscan.com',
	        shortName: 'btx',
	        chainId: 3690,
	        networkId: 3690,
	        icon: 'ethereum',
	        explorers: [
	            {
	                name: 'bittexscan',
	                url: 'https://bittexscan.com',
	                icon: 'etherscan',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Crossbell',
	        chain: 'Crossbell',
	        network: 'mainnet',
	        rpc: ['https://rpc.crossbell.io'],
	        faucets: ['https://faucet.crossbell.io'],
	        nativeCurrency: {
	            name: 'Crossbell Token',
	            symbol: 'CSB',
	            decimals: 18,
	        },
	        infoURL: 'https://crossbell.io',
	        shortName: 'csb',
	        chainId: 3737,
	        networkId: 3737,
	        icon: 'crossbell',
	        explorers: [
	            {
	                name: 'Crossbell Explorer',
	                url: 'https://scan.crossbell.io',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'DYNO Mainnet',
	        chain: 'DYNO',
	        rpc: ['https://api.dynoprotocol.com'],
	        faucets: ['https://faucet.dynoscan.io'],
	        nativeCurrency: {
	            name: 'DYNO Token',
	            symbol: 'DYNO',
	            decimals: 18,
	        },
	        infoURL: 'https://dynoprotocol.com',
	        shortName: 'dyno',
	        chainId: 3966,
	        networkId: 3966,
	        explorers: [
	            {
	                name: 'DYNO Explorer',
	                url: 'https://dynoscan.io',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'DYNO Testnet',
	        chain: 'DYNO',
	        rpc: ['https://tapi.dynoprotocol.com'],
	        faucets: ['https://faucet.dynoscan.io'],
	        nativeCurrency: {
	            name: 'DYNO Token',
	            symbol: 'tDYNO',
	            decimals: 18,
	        },
	        infoURL: 'https://dynoprotocol.com',
	        shortName: 'tdyno',
	        chainId: 3967,
	        networkId: 3967,
	        explorers: [
	            {
	                name: 'DYNO Explorer',
	                url: 'https://testnet.dynoscan.io',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'YuanChain Mainnet',
	        chain: 'YCC',
	        network: 'mainnet',
	        rpc: ['https://mainnet.yuan.org/eth'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'YCC',
	            symbol: 'YCC',
	            decimals: 18,
	        },
	        infoURL: 'https://www.yuan.org',
	        shortName: 'ycc',
	        chainId: 3999,
	        networkId: 3999,
	        icon: 'ycc',
	        explorers: [
	            {
	                name: 'YuanChain Explorer',
	                url: 'https://mainnet.yuan.org',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'Fantom Testnet',
	        chain: 'FTM',
	        rpc: ['https://rpc.testnet.fantom.network'],
	        faucets: ['https://faucet.fantom.network'],
	        nativeCurrency: {
	            name: 'Fantom',
	            symbol: 'FTM',
	            decimals: 18,
	        },
	        infoURL: 'https://docs.fantom.foundation/quick-start/short-guide#fantom-testnet',
	        shortName: 'tftm',
	        chainId: 4002,
	        networkId: 4002,
	        icon: 'fantom',
	        explorers: [
	            {
	                name: 'ftmscan',
	                url: 'https://testnet.ftmscan.com',
	                icon: 'ftmscan',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Boba Network Bobaopera Testnet',
	        chain: 'Bobaopera Testnet',
	        rpc: [
	            'https://testnet.bobaopera.boba.network',
	            'wss://wss.testnet.bobaopera.boba.network',
	            'https://replica.testnet.bobaopera.boba.network',
	            'wss://replica-wss.testnet.bobaopera.boba.network',
	        ],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Boba Token',
	            symbol: 'BOBA',
	            decimals: 18,
	        },
	        infoURL: 'https://boba.network',
	        shortName: 'Bobaopera Testnet',
	        chainId: 4051,
	        networkId: 4051,
	        explorers: [
	            {
	                name: 'Blockscout',
	                url: 'https://blockexplorer.testnet.bobaopera.boba.network',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'AIOZ Network Testnet',
	        chain: 'AIOZ',
	        network: 'testnet',
	        icon: 'aioz',
	        rpc: ['https://eth-ds.testnet.aioz.network'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'testAIOZ',
	            symbol: 'AIOZ',
	            decimals: 18,
	        },
	        infoURL: 'https://aioz.network',
	        shortName: 'aioz-testnet',
	        chainId: 4102,
	        networkId: 4102,
	        slip44: 60,
	        explorers: [
	            {
	                name: 'AIOZ Network Testnet Explorer',
	                url: 'https://testnet.explorer.aioz.network',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'PHI Network',
	        chain: 'PHI',
	        network: 'mainnet',
	        rpc: ['https://rpc1.phi.network', 'https://rpc2.phi.network'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'PHI',
	            symbol: 'Φ',
	            decimals: 18,
	        },
	        infoURL: 'https://phi.network',
	        shortName: 'PHI',
	        chainId: 4181,
	        networkId: 4181,
	        icon: 'phi',
	        explorers: [
	            {
	                name: 'PHI Explorer',
	                url: 'https://explorer.phi.network',
	                icon: 'phi',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'IoTeX Network Mainnet',
	        chain: 'iotex.io',
	        rpc: ['https://babel-api.mainnet.iotex.io'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'IoTeX',
	            symbol: 'IOTX',
	            decimals: 18,
	        },
	        infoURL: 'https://iotex.io',
	        shortName: 'iotex-mainnet',
	        chainId: 4689,
	        networkId: 4689,
	        explorers: [
	            {
	                name: 'iotexscan',
	                url: 'https://iotexscan.io',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'IoTeX Network Testnet',
	        chain: 'iotex.io',
	        rpc: ['https://babel-api.testnet.iotex.io'],
	        faucets: ['https://faucet.iotex.io/'],
	        nativeCurrency: {
	            name: 'IoTeX',
	            symbol: 'IOTX',
	            decimals: 18,
	        },
	        infoURL: 'https://iotex.io',
	        shortName: 'iotex-testnet',
	        chainId: 4690,
	        networkId: 4690,
	        explorers: [
	            {
	                name: 'testnet iotexscan',
	                url: 'https://testnet.iotexscan.io',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Venidium Testnet',
	        chain: 'XVM',
	        rpc: ['https://rpc-evm-testnet.venidium.io'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Venidium',
	            symbol: 'XVM',
	            decimals: 18,
	        },
	        infoURL: 'https://venidium.io',
	        shortName: 'txvm',
	        chainId: 4918,
	        networkId: 4918,
	        explorers: [
	            {
	                name: 'Venidium EVM Testnet Explorer',
	                url: 'https://evm-testnet.venidiumexplorer.com',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Venidium Mainnet',
	        chain: 'XVM',
	        icon: 'venidium',
	        rpc: ['https://rpc.venidium.io'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Venidium',
	            symbol: 'XVM',
	            decimals: 18,
	        },
	        infoURL: 'https://venidium.io',
	        shortName: 'xvm',
	        chainId: 4919,
	        networkId: 4919,
	        explorers: [
	            {
	                name: 'Venidium Explorer',
	                url: 'https://evm.venidiumexplorer.com',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'TLChain Network Mainnet',
	        chain: 'TLC',
	        icon: 'tlc',
	        rpc: ['https://mainnet-rpc.tlxscan.com/'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'TLChain Network',
	            symbol: 'TLC',
	            decimals: 18,
	        },
	        infoURL: 'https://tlchain.network/',
	        shortName: 'tlc',
	        chainId: 5177,
	        networkId: 5177,
	        explorers: [
	            {
	                name: 'TLChain Explorer',
	                url: 'https://explorer.tlchain.network',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'EraSwap Mainnet',
	        chain: 'ESN',
	        icon: 'eraswap',
	        rpc: ['https://mainnet.eraswap.network', 'https://rpc-mumbai.mainnet.eraswap.network'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'EraSwap',
	            symbol: 'ES',
	            decimals: 18,
	        },
	        infoURL: 'https://eraswap.info/',
	        shortName: 'es',
	        chainId: 5197,
	        networkId: 5197,
	    },
	    {
	        name: 'Uzmi Network Mainnet',
	        chain: 'UZMI',
	        rpc: ['https://network.uzmigames.com.br/'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'UZMI',
	            symbol: 'UZMI',
	            decimals: 18,
	        },
	        infoURL: 'https://uzmigames.com.br/',
	        shortName: 'UZMI',
	        chainId: 5315,
	        networkId: 5315,
	    },
	    {
	        name: 'Nahmii Mainnet',
	        chain: 'Nahmii',
	        network: 'mainnet',
	        rpc: ['https://l2.nahmii.io'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Ether',
	            symbol: 'ETH',
	            decimals: 18,
	        },
	        infoURL: 'https://nahmii.io',
	        shortName: 'Nahmii',
	        chainId: 5551,
	        networkId: 5551,
	        icon: 'nahmii',
	        explorers: [
	            {
	                name: 'Nahmii mainnet explorer',
	                url: 'https://explorer.nahmii.io',
	                icon: 'nahmii',
	                standard: 'EIP3091',
	            },
	        ],
	        parent: {
	            type: 'L2',
	            chain: 'eip155-1',
	            bridges: [
	                {
	                    url: 'https://bridge.nahmii.io',
	                },
	            ],
	        },
	    },
	    {
	        name: 'Nahmii Testnet',
	        chain: 'Nahmii',
	        network: 'testnet',
	        rpc: ['https://l2.testnet.nahmii.io'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Ether',
	            symbol: 'ETH',
	            decimals: 18,
	        },
	        infoURL: 'https://nahmii.io',
	        shortName: 'Nahmii testnet',
	        chainId: 5553,
	        networkId: 5553,
	        icon: 'nahmii',
	        explorers: [
	            {
	                name: 'blockscout',
	                url: 'https://explorer.testnet.nahmii.io',
	                icon: 'nahmii',
	                standard: 'EIP3091',
	            },
	        ],
	        parent: {
	            type: 'L2',
	            chain: 'eip155-3',
	            bridges: [
	                {
	                    url: 'https://bridge.nahmii.io',
	                },
	            ],
	        },
	    },
	    {
	        name: 'Syscoin Tanenbaum Testnet',
	        chain: 'SYS',
	        rpc: ['https://rpc.tanenbaum.io', 'wss://rpc.tanenbaum.io/wss'],
	        faucets: ['https://faucet.tanenbaum.io'],
	        nativeCurrency: {
	            name: 'Testnet Syscoin',
	            symbol: 'tSYS',
	            decimals: 18,
	        },
	        infoURL: 'https://syscoin.org',
	        shortName: 'tsys',
	        chainId: 5700,
	        networkId: 5700,
	        explorers: [
	            {
	                name: 'Syscoin Testnet Block Explorer',
	                url: 'https://tanenbaum.io',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Digest Swarm Chain',
	        chain: 'DSC',
	        icon: 'swarmchain',
	        rpc: ['https://rpc.digestgroup.ltd'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'DigestCoin',
	            symbol: 'DGCC',
	            decimals: 18,
	        },
	        infoURL: 'https://digestgroup.ltd',
	        shortName: 'dgcc',
	        chainId: 5777,
	        networkId: 5777,
	        explorers: [
	            {
	                name: 'swarmexplorer',
	                url: 'https://explorer.digestgroup.ltd',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Ontology Testnet',
	        chain: 'Ontology',
	        rpc: [
	            'http://polaris1.ont.io:20339',
	            'http://polaris2.ont.io:20339',
	            'http://polaris3.ont.io:20339',
	            'http://polaris4.ont.io:20339',
	            'https://polaris1.ont.io:10339',
	            'https://polaris2.ont.io:10339',
	            'https://polaris3.ont.io:10339',
	            'https://polaris4.ont.io:10339',
	        ],
	        faucets: ['https://developer.ont.io/'],
	        nativeCurrency: {
	            name: 'ONG',
	            symbol: 'ONG',
	            decimals: 18,
	        },
	        infoURL: 'https://ont.io/',
	        shortName: 'Ontology Testnet',
	        chainId: 5851,
	        networkId: 5851,
	        explorers: [
	            {
	                name: 'explorer',
	                url: 'https://explorer.ont.io/testnet',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Wegochain Rubidium Mainnet',
	        chain: 'RBD',
	        rpc: ['https://proxy.wegochain.io', 'http://wallet.wegochain.io:7764'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Rubid',
	            symbol: 'RBD',
	            decimals: 18,
	        },
	        infoURL: 'https://www.wegochain.io',
	        shortName: 'rbd',
	        chainId: 5869,
	        networkId: 5869,
	        explorers: [
	            {
	                name: 'wegoscan2',
	                url: 'https://scan2.wegochain.io',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Pixie Chain Mainnet',
	        chain: 'PixieChain',
	        rpc: ['https://http-mainnet.chain.pixie.xyz', 'wss://ws-mainnet.chain.pixie.xyz'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Pixie Chain Native Token',
	            symbol: 'PIX',
	            decimals: 18,
	        },
	        infoURL: 'https://chain.pixie.xyz',
	        shortName: 'pixie-chain',
	        chainId: 6626,
	        networkId: 6626,
	        explorers: [
	            {
	                name: 'blockscout',
	                url: 'https://scan.chain.pixie.xyz',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'Tomb Chain Mainnet',
	        chain: 'Tomb Chain',
	        rpc: ['https://rpc.tombchain.com/'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Tomb',
	            symbol: 'TOMB',
	            decimals: 18,
	        },
	        infoURL: 'https://tombchain.com/',
	        shortName: 'tombchain',
	        chainId: 6969,
	        networkId: 6969,
	        explorers: [
	            {
	                name: 'tombscout',
	                url: 'https://tombscout.com',
	                standard: 'none',
	            },
	        ],
	        parent: {
	            type: 'L2',
	            chain: 'eip155-250',
	            bridges: [
	                {
	                    url: 'https://beta-bridge.lif3.com/',
	                },
	            ],
	        },
	    },
	    {
	        name: 'Ella the heart',
	        chain: 'ella',
	        icon: 'ella',
	        rpc: ['https://rpc.ella.network'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Ella',
	            symbol: 'ELLA',
	            decimals: 18,
	        },
	        infoURL: 'https://ella.network',
	        shortName: 'ELLA',
	        chainId: 7027,
	        networkId: 7027,
	        explorers: [
	            {
	                name: 'Ella',
	                url: 'https://ella.network',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Shyft Mainnet',
	        chain: 'SHYFT',
	        icon: 'shyft',
	        rpc: ['https://rpc.shyft.network/'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Shyft',
	            symbol: 'SHYFT',
	            decimals: 18,
	        },
	        infoURL: 'https://shyft.network',
	        shortName: 'shyft',
	        chainId: 7341,
	        networkId: 7341,
	        slip44: 2147490989,
	        explorers: [
	            {
	                name: 'Shyft BX',
	                url: 'https://bx.shyft.network',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Rise of the Warbots Testnet',
	        chain: 'nmactest',
	        rpc: [
	            'https://testnet1.riseofthewarbots.com',
	            'https://testnet2.riseofthewarbots.com',
	            'https://testnet3.riseofthewarbots.com',
	            'https://testnet4.riseofthewarbots.com',
	            'https://testnet5.riseofthewarbots.com',
	        ],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Nano Machines',
	            symbol: 'NMAC',
	            decimals: 18,
	        },
	        infoURL: 'https://riseofthewarbots.com/',
	        shortName: 'Rise of the Warbots Testnet',
	        chainId: 7777,
	        networkId: 7777,
	        explorers: [
	            {
	                name: 'avascan',
	                url: 'https://testnet.avascan.info/blockchain/2mZ9doojfwHzXN3VXDQELKnKyZYxv7833U8Yq5eTfFx3hxJtiy',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'Hazlor Testnet',
	        chain: 'SCAS',
	        rpc: ['https://hatlas.rpc.hazlor.com:8545', 'wss://hatlas.rpc.hazlor.com:8546'],
	        faucets: ['https://faucet.hazlor.com'],
	        nativeCurrency: {
	            name: 'Hazlor Test Coin',
	            symbol: 'TSCAS',
	            decimals: 18,
	        },
	        infoURL: 'https://hazlor.com',
	        shortName: 'tscas',
	        chainId: 7878,
	        networkId: 7878,
	        explorers: [
	            {
	                name: 'Hazlor Testnet Explorer',
	                url: 'https://explorer.hazlor.com',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'Teleport',
	        chain: 'Teleport',
	        rpc: ['https://evm-rpc.teleport.network'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Tele',
	            symbol: 'TELE',
	            decimals: 18,
	        },
	        infoURL: 'https://teleport.network',
	        shortName: 'teleport',
	        chainId: 8000,
	        networkId: 8000,
	        icon: 'teleport',
	        explorers: [
	            {
	                name: 'Teleport EVM Explorer (Blockscout)',
	                url: 'https://evm-explorer.teleport.network',
	                standard: 'none',
	                icon: 'teleport',
	            },
	            {
	                name: 'Teleport Cosmos Explorer (Big Dipper)',
	                url: 'https://explorer.teleport.network',
	                standard: 'none',
	                icon: 'teleport',
	            },
	        ],
	    },
	    {
	        name: 'Teleport Testnet',
	        chain: 'Teleport',
	        rpc: ['https://evm-rpc.testnet.teleport.network'],
	        faucets: ['https://chain-docs.teleport.network/testnet/faucet.html'],
	        nativeCurrency: {
	            name: 'Tele',
	            symbol: 'TELE',
	            decimals: 18,
	        },
	        infoURL: 'https://teleport.network',
	        shortName: 'teleport-testnet',
	        chainId: 8001,
	        networkId: 8001,
	        icon: 'teleport',
	        explorers: [
	            {
	                name: 'Teleport EVM Explorer (Blockscout)',
	                url: 'https://evm-explorer.testnet.teleport.network',
	                standard: 'none',
	                icon: 'teleport',
	            },
	            {
	                name: 'Teleport Cosmos Explorer (Big Dipper)',
	                url: 'https://explorer.testnet.teleport.network',
	                standard: 'none',
	                icon: 'teleport',
	            },
	        ],
	    },
	    {
	        name: 'MDGL Testnet',
	        chain: 'MDGL',
	        rpc: ['https://testnet.mdgl.io'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'MDGL Token',
	            symbol: 'MDGLT',
	            decimals: 18,
	        },
	        infoURL: 'https://mdgl.io',
	        shortName: 'mdgl',
	        chainId: 8029,
	        networkId: 8029,
	    },
	    {
	        name: 'GeneChain Adenine Testnet',
	        chain: 'GeneChain',
	        rpc: ['https://rpc-testnet.genechain.io'],
	        faucets: ['https://faucet.genechain.io'],
	        nativeCurrency: {
	            name: 'Testnet RNA',
	            symbol: 'tRNA',
	            decimals: 18,
	        },
	        infoURL: 'https://scan-testnet.genechain.io/',
	        shortName: 'GeneChainAdn',
	        chainId: 8080,
	        networkId: 8080,
	        explorers: [
	            {
	                name: 'GeneChain Adenine Testnet Scan',
	                url: 'https://scan-testnet.genechain.io',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Klaytn Mainnet Cypress',
	        chain: 'KLAY',
	        rpc: ['https://public-node-api.klaytnapi.com/v1/cypress'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'KLAY',
	            symbol: 'KLAY',
	            decimals: 18,
	        },
	        infoURL: 'https://www.klaytn.com/',
	        shortName: 'Cypress',
	        chainId: 8217,
	        networkId: 8217,
	        slip44: 8217,
	        explorers: [
	            {
	                name: 'Klaytnscope',
	                url: 'https://scope.klaytn.com',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'KorthoTest',
	        chain: 'Kortho',
	        rpc: ['https://www.krotho-test.net'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Kortho Test',
	            symbol: 'KTO',
	            decimals: 11,
	        },
	        infoURL: 'https://www.kortho.io/',
	        shortName: 'Kortho',
	        chainId: 8285,
	        networkId: 8285,
	    },
	    {
	        name: 'TOOL Global Mainnet',
	        chain: 'OLO',
	        rpc: ['https://mainnet-web3.wolot.io'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'TOOL Global',
	            symbol: 'OLO',
	            decimals: 18,
	        },
	        infoURL: 'https://ibdt.io',
	        shortName: 'olo',
	        chainId: 8723,
	        networkId: 8723,
	        slip44: 479,
	        explorers: [
	            {
	                name: 'OLO Block Explorer',
	                url: 'https://www.olo.network',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'TOOL Global Testnet',
	        chain: 'OLO',
	        rpc: ['https://testnet-web3.wolot.io'],
	        faucets: ['https://testnet-explorer.wolot.io'],
	        nativeCurrency: {
	            name: 'TOOL Global',
	            symbol: 'OLO',
	            decimals: 18,
	        },
	        infoURL: 'https://testnet-explorer.wolot.io',
	        shortName: 'tolo',
	        chainId: 8724,
	        networkId: 8724,
	        slip44: 479,
	    },
	    {
	        name: 'Ambros Chain Testnet',
	        chain: 'ambroschain',
	        rpc: ['https://api.testnet.ambros.network'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'AMBROS',
	            symbol: 'AMBROS',
	            decimals: 18,
	        },
	        infoURL: 'https://test.ambros.network',
	        shortName: 'ambrostestnet',
	        chainId: 8888,
	        networkId: 8888,
	        explorers: [
	            {
	                name: 'Ambros Chain Explorer',
	                url: 'https://testnet.ambrosscan.com',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'Mammoth Mainnet',
	        title: 'Mammoth Chain',
	        chain: 'MMT',
	        rpc: ['https://dataseed.mmtscan.io', 'https://dataseed1.mmtscan.io', 'https://dataseed2.mmtscan.io'],
	        faucets: ['https://faucet.mmtscan.io/'],
	        nativeCurrency: {
	            name: 'Mammoth Token',
	            symbol: 'MMT',
	            decimals: 18,
	        },
	        infoURL: 'https://mmtchain.io/',
	        shortName: 'mmt',
	        chainId: 8898,
	        networkId: 8898,
	        icon: 'mmt',
	        explorers: [
	            {
	                name: 'mmtscan',
	                url: 'https://mmtscan.io',
	                standard: 'EIP3091',
	                icon: 'mmt',
	            },
	        ],
	    },
	    {
	        name: 'bloxberg',
	        chain: 'bloxberg',
	        rpc: ['https://core.bloxberg.org'],
	        faucets: ['https://faucet.bloxberg.org/'],
	        nativeCurrency: {
	            name: 'BERG',
	            symbol: 'U+25B3',
	            decimals: 18,
	        },
	        infoURL: 'https://bloxberg.org',
	        shortName: 'berg',
	        chainId: 8995,
	        networkId: 8995,
	    },
	    {
	        name: 'Evmos Testnet',
	        chain: 'Evmos',
	        rpc: ['https://eth.bd.evmos.dev:8545'],
	        faucets: ['https://faucet.evmos.dev'],
	        nativeCurrency: {
	            name: 'test-Evmos',
	            symbol: 'tEVMOS',
	            decimals: 18,
	        },
	        infoURL: 'https://evmos.org',
	        shortName: 'evmos-testnet',
	        chainId: 9000,
	        networkId: 9000,
	        icon: 'evmos',
	        explorers: [
	            {
	                name: 'Evmos EVM Explorer',
	                url: 'https://evm.evmos.dev',
	                standard: 'EIP3091',
	                icon: 'evmos',
	            },
	            {
	                name: 'Evmos Cosmos Explorer',
	                url: 'https://explorer.evmos.dev',
	                standard: 'none',
	                icon: 'evmos',
	            },
	        ],
	    },
	    {
	        name: 'Evmos',
	        chain: 'Evmos',
	        rpc: ['https://eth.bd.evmos.org:8545'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Evmos',
	            symbol: 'EVMOS',
	            decimals: 18,
	        },
	        infoURL: 'https://evmos.org',
	        shortName: 'evmos',
	        chainId: 9001,
	        networkId: 9001,
	        icon: 'evmos',
	        explorers: [
	            {
	                name: 'Evmos EVM Explorer (Blockscout)',
	                url: 'https://evm.evmos.org',
	                standard: 'none',
	                icon: 'evmos',
	            },
	            {
	                name: 'Evmos Cosmos Explorer (Mintscan)',
	                url: 'https://www.mintscan.io/evmos',
	                standard: 'none',
	                icon: 'evmos',
	            },
	        ],
	    },
	    {
	        name: 'BerylBit Mainnet',
	        chain: 'BRB',
	        rpc: ['https://mainnet.berylbit.io'],
	        faucets: ['https://t.me/BerylBit'],
	        nativeCurrency: {
	            name: 'BerylBit Chain Native Token',
	            symbol: 'BRB',
	            decimals: 18,
	        },
	        infoURL: 'https://www.beryl-bit.com',
	        shortName: 'brb',
	        chainId: 9012,
	        networkId: 9012,
	        icon: 'berylbit',
	        explorers: [
	            {
	                name: 'berylbit-explorer',
	                url: 'https://explorer.berylbit.io',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Genesis Coin',
	        chain: 'Genesis',
	        rpc: ['https://genesis-gn.com', 'wss://genesis-gn.com'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'GN Coin',
	            symbol: 'GNC',
	            decimals: 18,
	        },
	        infoURL: 'https://genesis-gn.com',
	        shortName: 'GENEC',
	        chainId: 9100,
	        networkId: 9100,
	    },
	    {
	        name: 'Rangers Protocol Testnet Robin',
	        chain: 'Rangers',
	        icon: 'rangers',
	        rpc: ['https://robin.rangersprotocol.com/api/jsonrpc'],
	        faucets: ['https://robin-faucet.rangersprotocol.com'],
	        nativeCurrency: {
	            name: 'Rangers Protocol Gas',
	            symbol: 'tRPG',
	            decimals: 18,
	        },
	        infoURL: 'https://rangersprotocol.com',
	        shortName: 'trpg',
	        chainId: 9527,
	        networkId: 9527,
	        explorers: [
	            {
	                name: 'rangersscan-robin',
	                url: 'https://robin-rangersscan.rangersprotocol.com',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'myOwn Testnet',
	        chain: 'myOwn',
	        rpc: ['https://geth.dev.bccloud.net'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'MYN',
	            symbol: 'MYN',
	            decimals: 18,
	        },
	        infoURL: 'https://docs.bccloud.net/',
	        shortName: 'myn',
	        chainId: 9999,
	        networkId: 9999,
	    },
	    {
	        name: 'Smart Bitcoin Cash',
	        chain: 'smartBCH',
	        rpc: [
	            'https://smartbch.greyh.at',
	            'https://rpc-mainnet.smartbch.org',
	            'https://smartbch.fountainhead.cash/mainnet',
	            'https://smartbch.devops.cash/mainnet',
	        ],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Bitcoin Cash',
	            symbol: 'BCH',
	            decimals: 18,
	        },
	        infoURL: 'https://smartbch.org/',
	        shortName: 'smartbch',
	        chainId: 10000,
	        networkId: 10000,
	    },
	    {
	        name: 'Smart Bitcoin Cash Testnet',
	        chain: 'smartBCHTest',
	        rpc: ['https://rpc-testnet.smartbch.org', 'https://smartbch.devops.cash/testnet'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Bitcoin Cash Test Token',
	            symbol: 'BCHT',
	            decimals: 18,
	        },
	        infoURL: 'http://smartbch.org/',
	        shortName: 'smartbchtest',
	        chainId: 10001,
	        networkId: 10001,
	    },
	    {
	        name: 'Blockchain Genesis Mainnet',
	        chain: 'GEN',
	        rpc: ['https://eu.mainnet.xixoio.com', 'https://us.mainnet.xixoio.com', 'https://asia.mainnet.xixoio.com'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'GEN',
	            symbol: 'GEN',
	            decimals: 18,
	        },
	        infoURL: 'https://www.xixoio.com/',
	        shortName: 'GEN',
	        chainId: 10101,
	        networkId: 10101,
	    },
	    {
	        name: 'CryptoCoinPay',
	        chain: 'CCP',
	        rpc: ['http://node106.cryptocoinpay.info:8545', 'ws://node106.cryptocoinpay.info:8546'],
	        faucets: [],
	        icon: 'ccp',
	        nativeCurrency: {
	            name: 'CryptoCoinPay',
	            symbol: 'CCP',
	            decimals: 18,
	        },
	        infoURL: 'https://www.cryptocoinpay.co',
	        shortName: 'CCP',
	        chainId: 10823,
	        networkId: 10823,
	        explorers: [
	            {
	                name: 'CCP Explorer',
	                url: 'https://cryptocoinpay.info',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Quadrans Blockchain',
	        chain: 'QDC',
	        network: 'mainnet',
	        icon: 'quadrans',
	        rpc: ['https://rpc.quadrans.io', 'https://rpcna.quadrans.io', 'https://rpceu.quadrans.io'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Quadrans Coin',
	            symbol: 'QDC',
	            decimals: 18,
	        },
	        infoURL: 'https://quadrans.io',
	        shortName: 'quadrans',
	        chainId: 10946,
	        networkId: 10946,
	        explorers: [
	            {
	                name: 'explorer',
	                url: 'https://explorer.quadrans.io',
	                icon: 'quadrans',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Quadrans Blockchain Testnet',
	        chain: 'tQDC',
	        network: 'testnet',
	        icon: 'quadrans',
	        rpc: ['https://rpctest.quadrans.io', 'https://rpctest2.quadrans.io'],
	        faucets: ['https://faucetpage.quadrans.io'],
	        nativeCurrency: {
	            name: 'Quadrans Testnet Coin',
	            symbol: 'tQDC',
	            decimals: 18,
	        },
	        infoURL: 'https://quadrans.io',
	        shortName: 'quadranstestnet',
	        chainId: 10947,
	        networkId: 10947,
	        explorers: [
	            {
	                name: 'explorer',
	                url: 'https://explorer.testnet.quadrans.io',
	                icon: 'quadrans',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'WAGMI',
	        chain: 'WAGMI',
	        icon: 'wagmi',
	        rpc: ['https://subnets.avax.network/wagmi/wagmi-chain-testnet/rpc'],
	        faucets: ['https://faucet.trywagmi.xyz'],
	        nativeCurrency: {
	            name: 'WAGMI',
	            symbol: 'WGM',
	            decimals: 18,
	        },
	        infoURL: 'https://trywagmi.xyz',
	        shortName: 'WAGMI',
	        chainId: 11111,
	        networkId: 11111,
	        explorers: [
	            {
	                name: 'WAGMI Explorer',
	                url: 'https://subnets.avax.network/wagmi/wagmi-chain-testnet/explorer',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Shyft Testnet',
	        chain: 'SHYFTT',
	        icon: 'shyft',
	        rpc: ['https://rpc.testnet.shyft.network/'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Shyft Test Token',
	            symbol: 'SHYFTT',
	            decimals: 18,
	        },
	        infoURL: 'https://shyft.network',
	        shortName: 'shyftt',
	        chainId: 11437,
	        networkId: 11437,
	        explorers: [
	            {
	                name: 'Shyft Testnet BX',
	                url: 'https://bx.testnet.shyft.network',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Singularity ZERO Testnet',
	        chain: 'ZERO',
	        rpc: ['https://betaenv.singularity.gold:18545'],
	        faucets: ['https://nft.singularity.gold'],
	        nativeCurrency: {
	            name: 'ZERO',
	            symbol: 'tZERO',
	            decimals: 18,
	        },
	        infoURL: 'https://www.singularity.gold',
	        shortName: 'tZERO',
	        chainId: 12051,
	        networkId: 12051,
	        explorers: [
	            {
	                name: 'zeroscan',
	                url: 'https://betaenv.singularity.gold:18002',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Singularity ZERO Mainnet',
	        chain: 'ZERO',
	        rpc: ['https://zerorpc.singularity.gold'],
	        faucets: ['https://zeroscan.singularity.gold'],
	        nativeCurrency: {
	            name: 'ZERO',
	            symbol: 'ZERO',
	            decimals: 18,
	        },
	        infoURL: 'https://www.singularity.gold',
	        shortName: 'ZERO',
	        chainId: 12052,
	        networkId: 12052,
	        slip44: 621,
	        explorers: [
	            {
	                name: 'zeroscan',
	                url: 'https://zeroscan.singularity.gold',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Phoenix Mainnet',
	        chain: 'Phoenix',
	        network: 'mainnet',
	        rpc: ['https://rpc.phoenixplorer.com/'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Phoenix',
	            symbol: 'PHX',
	            decimals: 18,
	        },
	        infoURL: 'https://cryptophoenix.org/phoenix',
	        shortName: 'Phoenix',
	        chainId: 13381,
	        networkId: 13381,
	        icon: 'phoenix',
	        explorers: [
	            {
	                name: 'phoenixplorer',
	                url: 'https://phoenixplorer.com',
	                icon: 'phoenixplorer',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'MetaDot Mainnet',
	        chain: 'MTT',
	        rpc: ['https://mainnet.metadot.network'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'MetaDot Token',
	            symbol: 'MTT',
	            decimals: 18,
	        },
	        infoURL: 'https://metadot.network',
	        shortName: 'mtt',
	        chainId: 16000,
	        networkId: 16000,
	    },
	    {
	        name: 'MetaDot Testnet',
	        chain: 'MTTTest',
	        rpc: ['https://testnet.metadot.network'],
	        faucets: ['https://faucet.metadot.network/'],
	        nativeCurrency: {
	            name: 'MetaDot Token TestNet',
	            symbol: 'MTTest',
	            decimals: 18,
	        },
	        infoURL: 'https://metadot.network',
	        shortName: 'mtttest',
	        chainId: 16001,
	        networkId: 16001,
	    },
	    {
	        name: 'IVAR Chain Testnet',
	        chain: 'IVAR',
	        icon: 'ivar',
	        rpc: ['https://testnet-rpc.ivarex.com'],
	        faucets: ['https://tfaucet.ivarex.com/'],
	        nativeCurrency: {
	            name: 'tIvar',
	            symbol: 'tIVAR',
	            decimals: 18,
	        },
	        infoURL: 'https://ivarex.com',
	        shortName: 'tivar',
	        chainId: 16888,
	        networkId: 16888,
	        explorers: [
	            {
	                name: 'ivarscan',
	                url: 'https://testnet.ivarscan.com',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'BTCIX Network',
	        chain: 'BTCIX',
	        rpc: ['https://seed.btcix.org/rpc'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'BTCIX Network',
	            symbol: 'BTCIX',
	            decimals: 18,
	        },
	        infoURL: 'https://bitcolojix.org',
	        shortName: 'btcix',
	        chainId: 19845,
	        networkId: 19845,
	        explorers: [
	            {
	                name: 'BTCIXScan',
	                url: 'https://btcixscan.com',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'CENNZnet Azalea',
	        chain: 'CENNZnet',
	        network: 'azalea',
	        rpc: ['https://cennznet.unfrastructure.io/public'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'CPAY',
	            symbol: 'CPAY',
	            decimals: 18,
	        },
	        infoURL: 'https://cennz.net',
	        shortName: 'cennz-a',
	        chainId: 21337,
	        networkId: 21337,
	        icon: 'cennz',
	        explorers: [
	            {
	                name: 'UNcover',
	                url: 'https://uncoverexplorer.com',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'omChain Mainnet',
	        chain: 'OML',
	        icon: 'omlira',
	        rpc: ['https://seed.omchain.io'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'omChain',
	            symbol: 'OMC',
	            decimals: 18,
	        },
	        infoURL: 'https://omchain.io',
	        shortName: 'omc',
	        chainId: 21816,
	        networkId: 21816,
	        explorers: [
	            {
	                name: 'omChain Explorer',
	                url: 'https://explorer.omchain.io',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Taycan',
	        chain: 'Taycan',
	        network: 'mainnet',
	        rpc: ['https://taycan-rpc.hupayx.io:8545'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'shuffle',
	            symbol: 'SFL',
	            decimals: 18,
	        },
	        infoURL: 'https://hupayx.io',
	        shortName: 'SFL',
	        chainId: 22023,
	        networkId: 22023,
	        explorers: [
	            {
	                name: 'Taycan Explorer(Blockscout)',
	                url: 'https://taycan-evmscan.hupayx.io',
	                standard: 'none',
	            },
	            {
	                name: 'Taycan Cosmos Explorer(BigDipper)',
	                url: 'https://taycan-cosmoscan.hupayx.io',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'Webchain',
	        chain: 'WEB',
	        rpc: ['https://node1.webchain.network'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Webchain Ether',
	            symbol: 'WEB',
	            decimals: 18,
	        },
	        infoURL: 'https://webchain.network',
	        shortName: 'web',
	        chainId: 24484,
	        networkId: 37129,
	        slip44: 227,
	    },
	    {
	        name: 'MintMe.com Coin',
	        chain: 'MINTME',
	        rpc: ['https://node1.mintme.com'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'MintMe.com Coin',
	            symbol: 'MINTME',
	            decimals: 18,
	        },
	        infoURL: 'https://www.mintme.com',
	        shortName: 'mintme',
	        chainId: 24734,
	        networkId: 37480,
	    },
	    {
	        name: 'OasisChain Mainnet',
	        chain: 'OasisChain',
	        rpc: ['https://rpc1.oasischain.io', 'https://rpc2.oasischain.io', 'https://rpc3.oasischain.io'],
	        faucets: ['http://faucet.oasischain.io'],
	        nativeCurrency: {
	            name: 'OAC',
	            symbol: 'OAC',
	            decimals: 18,
	        },
	        infoURL: 'https://scan.oasischain.io',
	        shortName: 'OAC',
	        chainId: 26863,
	        networkId: 26863,
	        explorers: [
	            {
	                name: 'OasisChain Explorer',
	                url: 'https://scan.oasischain.io',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Piece testnet',
	        chain: 'PieceNetwork',
	        icon: 'piecechain',
	        rpc: ['https://testnet-rpc0.piecenetwork.com'],
	        faucets: ['https://piecenetwork.com/faucet'],
	        nativeCurrency: {
	            name: 'ECE',
	            symbol: 'ECE',
	            decimals: 18,
	        },
	        infoURL: 'https://piecenetwork.com',
	        shortName: 'Piece',
	        chainId: 30067,
	        networkId: 30067,
	        explorers: [
	            {
	                name: 'Piece Scan',
	                url: 'https://testnet-scan.piecenetwork.com',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Ethersocial Network',
	        chain: 'ESN',
	        rpc: ['https://api.esn.gonspool.com'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Ethersocial Network Ether',
	            symbol: 'ESN',
	            decimals: 18,
	        },
	        infoURL: 'https://ethersocial.org',
	        shortName: 'esn',
	        chainId: 31102,
	        networkId: 1,
	        slip44: 31102,
	    },
	    {
	        name: 'GoChain Testnet',
	        chain: 'GO',
	        rpc: ['https://testnet-rpc.gochain.io'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'GoChain Coin',
	            symbol: 'GO',
	            decimals: 18,
	        },
	        infoURL: 'https://gochain.io',
	        shortName: 'got',
	        chainId: 31337,
	        networkId: 31337,
	        slip44: 6060,
	        explorers: [
	            {
	                name: 'GoChain Testnet Explorer',
	                url: 'https://testnet-explorer.gochain.io',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Bitgert Mainnet',
	        chain: 'Brise',
	        rpc: [
	            'https://rpc.icecreamswap.com',
	            'https://mainnet-rpc.brisescan.com',
	            'https://chainrpc.com',
	            'https://serverrpc.com',
	        ],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Bitrise Token',
	            symbol: 'Brise',
	            decimals: 18,
	        },
	        infoURL: 'https://bitgert.com/',
	        shortName: 'Brise',
	        chainId: 32520,
	        networkId: 32520,
	        icon: 'brise',
	        explorers: [
	            {
	                name: 'Brise Scan',
	                url: 'https://brisescan.com',
	                icon: 'brise',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Fusion Mainnet',
	        chain: 'FSN',
	        rpc: ['https://mainnet.anyswap.exchange', 'https://fsn.dev/api'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Fusion',
	            symbol: 'FSN',
	            decimals: 18,
	        },
	        infoURL: 'https://www.fusion.org/',
	        shortName: 'fsn',
	        chainId: 32659,
	        networkId: 32659,
	    },
	    {
	        name: 'Q Mainnet',
	        chain: 'Q',
	        network: 'mainnet',
	        rpc: ['https://rpc.q.org'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Q token',
	            symbol: 'Q',
	            decimals: 18,
	        },
	        infoURL: 'https://q.org',
	        shortName: 'q',
	        chainId: 35441,
	        networkId: 35441,
	        icon: 'q',
	        explorers: [
	            {
	                name: 'Q explorer',
	                url: 'https://explorer.q.org',
	                icon: 'q',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Q Testnet',
	        chain: 'Q',
	        network: 'testnet',
	        rpc: ['https://rpc.qtestnet.org'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Q token',
	            symbol: 'Q',
	            decimals: 18,
	        },
	        infoURL: 'https://q.org/',
	        shortName: 'q-testnet',
	        chainId: 35443,
	        networkId: 35443,
	        icon: 'q',
	        explorers: [
	            {
	                name: 'Q explorer',
	                url: 'https://explorer.qtestnet.org',
	                icon: 'q',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Energi Mainnet',
	        chain: 'NRG',
	        rpc: ['https://nodeapi.energi.network'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Energi',
	            symbol: 'NRG',
	            decimals: 18,
	        },
	        infoURL: 'https://www.energi.world/',
	        shortName: 'nrg',
	        chainId: 39797,
	        networkId: 39797,
	        slip44: 39797,
	    },
	    {
	        name: 'pegglecoin',
	        chain: '42069',
	        rpc: [],
	        faucets: [],
	        nativeCurrency: {
	            name: 'pegglecoin',
	            symbol: 'peggle',
	            decimals: 18,
	        },
	        infoURL: 'https://teampeggle.com',
	        shortName: 'PC',
	        chainId: 42069,
	        networkId: 42069,
	    },
	    {
	        name: 'Arbitrum One',
	        chainId: 42161,
	        shortName: 'arb1',
	        chain: 'ETH',
	        networkId: 42161,
	        nativeCurrency: {
	            name: 'Ether',
	            symbol: 'ETH',
	            decimals: 18,
	        },
	        rpc: [
	            'https://arbitrum-mainnet.infura.io/v3/${INFURA_API_KEY}',
	            'https://arb-mainnet.g.alchemy.com/v2/${ALCHEMY_API_KEY}',
	            'https://arb1.arbitrum.io/rpc',
	        ],
	        faucets: [],
	        explorers: [
	            {
	                name: 'Arbiscan',
	                url: 'https://arbiscan.io',
	                standard: 'EIP3091',
	            },
	            {
	                name: 'Arbitrum Explorer',
	                url: 'https://explorer.arbitrum.io',
	                standard: 'EIP3091',
	            },
	        ],
	        infoURL: 'https://arbitrum.io',
	        parent: {
	            type: 'L2',
	            chain: 'eip155-1',
	            bridges: [
	                {
	                    url: 'https://bridge.arbitrum.io',
	                },
	            ],
	        },
	    },
	    {
	        name: 'Arbitrum Nova',
	        chainId: 42170,
	        shortName: 'arb-nova',
	        chain: 'ETH',
	        networkId: 42170,
	        nativeCurrency: {
	            name: 'Ether',
	            symbol: 'ETH',
	            decimals: 18,
	        },
	        rpc: ['https://nova.arbitrum.io/rpc'],
	        faucets: [],
	        explorers: [
	            {
	                name: 'Arbitrum Nova Chain Explorer',
	                url: 'https://nova-explorer.arbitrum.io',
	                icon: 'blockscout',
	                standard: 'EIP3091',
	            },
	        ],
	        infoURL: 'https://arbitrum.io',
	        parent: {
	            type: 'L2',
	            chain: 'eip155-1',
	            bridges: [
	                {
	                    url: 'https://bridge.arbitrum.io',
	                },
	            ],
	        },
	    },
	    {
	        name: 'Celo Mainnet',
	        chainId: 42220,
	        shortName: 'CELO',
	        chain: 'CELO',
	        networkId: 42220,
	        nativeCurrency: {
	            name: 'CELO',
	            symbol: 'CELO',
	            decimals: 18,
	        },
	        rpc: ['https://forno.celo.org', 'wss://forno.celo.org/ws'],
	        faucets: ['https://free-online-app.com/faucet-for-eth-evm-chains/'],
	        infoURL: 'https://docs.celo.org/',
	        explorers: [
	            {
	                name: 'blockscout',
	                url: 'https://explorer.celo.org',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'Emerald Paratime Testnet',
	        chain: 'Emerald',
	        icon: 'oasis',
	        rpc: ['https://testnet.emerald.oasis.dev/', 'wss://testnet.emerald.oasis.dev/ws'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Emerald Rose',
	            symbol: 'ROSE',
	            decimals: 18,
	        },
	        infoURL: 'https://docs.oasis.dev/general/developer-resources/overview',
	        shortName: 'emerald',
	        chainId: 42261,
	        networkId: 42261,
	        explorers: [
	            {
	                name: 'Emerald Paratime Testnet Explorer',
	                url: 'https://testnet.explorer.emerald.oasis.dev',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Emerald Paratime Mainnet',
	        chain: 'Emerald',
	        icon: 'oasis',
	        rpc: ['https://emerald.oasis.dev', 'wss://emerald.oasis.dev/ws'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Emerald Rose',
	            symbol: 'ROSE',
	            decimals: 18,
	        },
	        infoURL: 'https://docs.oasis.dev/general/developer-resources/overview',
	        shortName: 'oasis',
	        chainId: 42262,
	        networkId: 42262,
	        explorers: [
	            {
	                name: 'Emerald Paratime Mainnet Explorer',
	                url: 'https://explorer.emerald.oasis.dev',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Athereum',
	        chain: 'ATH',
	        rpc: ['https://ava.network:21015/ext/evm/rpc'],
	        faucets: ['http://athfaucet.ava.network//?address=${ADDRESS}'],
	        nativeCurrency: {
	            name: 'Athereum Ether',
	            symbol: 'ATH',
	            decimals: 18,
	        },
	        infoURL: 'https://athereum.ava.network',
	        shortName: 'avaeth',
	        chainId: 43110,
	        networkId: 43110,
	    },
	    {
	        name: 'Avalanche Fuji Testnet',
	        chain: 'AVAX',
	        rpc: ['https://api.avax-test.network/ext/bc/C/rpc'],
	        faucets: ['https://faucet.avax-test.network/'],
	        nativeCurrency: {
	            name: 'Avalanche',
	            symbol: 'AVAX',
	            decimals: 18,
	        },
	        infoURL: 'https://cchain.explorer.avax-test.network',
	        shortName: 'Fuji',
	        chainId: 43113,
	        networkId: 1,
	        explorers: [
	            {
	                name: 'snowtrace',
	                url: 'https://testnet.snowtrace.io',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Avalanche C-Chain',
	        chain: 'AVAX',
	        rpc: ['https://api.avax.network/ext/bc/C/rpc'],
	        faucets: ['https://free-online-app.com/faucet-for-eth-evm-chains/'],
	        nativeCurrency: {
	            name: 'Avalanche',
	            symbol: 'AVAX',
	            decimals: 18,
	        },
	        infoURL: 'https://www.avax.network/',
	        shortName: 'avax',
	        chainId: 43114,
	        networkId: 43114,
	        slip44: 9005,
	        explorers: [
	            {
	                name: 'snowtrace',
	                url: 'https://snowtrace.io',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Celo Alfajores Testnet',
	        chainId: 44787,
	        shortName: 'ALFA',
	        chain: 'CELO',
	        networkId: 44787,
	        nativeCurrency: {
	            name: 'CELO',
	            symbol: 'CELO',
	            decimals: 18,
	        },
	        rpc: ['https://alfajores-forno.celo-testnet.org', 'wss://alfajores-forno.celo-testnet.org/ws'],
	        faucets: ['https://celo.org/developers/faucet', 'https://cauldron.pretoriaresearchlab.io/alfajores-faucet'],
	        infoURL: 'https://docs.celo.org/',
	    },
	    {
	        name: 'Autobahn Network',
	        chain: 'TXL',
	        network: 'mainnet',
	        rpc: ['https://rpc.autobahn.network'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'TXL',
	            symbol: 'TXL',
	            decimals: 18,
	        },
	        infoURL: 'https://autobahn.network',
	        shortName: 'Autobahn Network',
	        chainId: 45000,
	        networkId: 45000,
	        icon: 'autobahn',
	        explorers: [
	            {
	                name: 'autobahn explorer',
	                url: 'https://explorer.autobahn.network',
	                icon: 'autobahn',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'REI Network',
	        chain: 'REI',
	        rpc: ['https://rpc.rei.network', 'wss://rpc.rei.network'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'REI',
	            symbol: 'REI',
	            decimals: 18,
	        },
	        infoURL: 'https://rei.network/',
	        shortName: 'REI',
	        chainId: 47805,
	        networkId: 47805,
	        explorers: [
	            {
	                name: 'rei-scan',
	                url: 'https://scan.rei.network',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'Energi Testnet',
	        chain: 'NRG',
	        rpc: ['https://nodeapi.test.energi.network'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Energi',
	            symbol: 'NRG',
	            decimals: 18,
	        },
	        infoURL: 'https://www.energi.world/',
	        shortName: 'tnrg',
	        chainId: 49797,
	        networkId: 49797,
	        slip44: 49797,
	    },
	    {
	        name: 'GTON Testnet',
	        chain: 'GTON Testnet',
	        rpc: ['https://testnet.gton.network/'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'GCD',
	            symbol: 'GCD',
	            decimals: 18,
	        },
	        infoURL: 'https://gton.capital',
	        shortName: 'tgton',
	        chainId: 50021,
	        networkId: 50021,
	        explorers: [
	            {
	                name: 'GTON Testnet Network Explorer',
	                url: 'https://explorer.testnet.gton.network',
	                standard: 'EIP3091',
	            },
	        ],
	        parent: {
	            type: 'L2',
	            chain: 'eip155-3',
	        },
	    },
	    {
	        name: 'DFK Chain',
	        chain: 'DFK',
	        icon: 'dfk',
	        network: 'mainnet',
	        rpc: ['https://subnets.avax.network/defi-kingdoms/dfk-chain/rpc'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Jewel',
	            symbol: 'JEWEL',
	            decimals: 18,
	        },
	        infoURL: 'https://defikingdoms.com',
	        shortName: 'DFK',
	        chainId: 53935,
	        networkId: 53935,
	        explorers: [
	            {
	                name: 'ethernal',
	                url: 'https://explorer.dfkchain.com',
	                icon: 'ethereum',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'REI Chain Mainnet',
	        chain: 'REI',
	        icon: 'reichain',
	        rpc: ['https://rei-rpc.moonrhythm.io'],
	        faucets: ['http://kururu.finance/faucet?chainId=55555'],
	        nativeCurrency: {
	            name: 'Rei',
	            symbol: 'REI',
	            decimals: 18,
	        },
	        infoURL: 'https://reichain.io',
	        shortName: 'reichain',
	        chainId: 55555,
	        networkId: 55555,
	        explorers: [
	            {
	                name: 'reiscan',
	                url: 'https://reiscan.com',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'REI Chain Testnet',
	        chain: 'REI',
	        icon: 'reichain',
	        rpc: ['https://rei-testnet-rpc.moonrhythm.io'],
	        faucets: ['http://kururu.finance/faucet?chainId=55556'],
	        nativeCurrency: {
	            name: 'tRei',
	            symbol: 'tREI',
	            decimals: 18,
	        },
	        infoURL: 'https://reichain.io',
	        shortName: 'trei',
	        chainId: 55556,
	        networkId: 55556,
	        explorers: [
	            {
	                name: 'reiscan',
	                url: 'https://testnet.reiscan.com',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Thinkium Testnet Chain 0',
	        chain: 'Thinkium',
	        rpc: ['https://test.thinkiumrpc.net/'],
	        faucets: ['https://www.thinkiumdev.net/faucet'],
	        nativeCurrency: {
	            name: 'TKM',
	            symbol: 'TKM',
	            decimals: 18,
	        },
	        infoURL: 'https://thinkium.net/',
	        shortName: 'TKM-test0',
	        chainId: 60000,
	        networkId: 60000,
	        explorers: [
	            {
	                name: 'thinkiumscan',
	                url: 'https://test0.thinkiumscan.net',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Thinkium Testnet Chain 1',
	        chain: 'Thinkium',
	        rpc: ['https://test1.thinkiumrpc.net/'],
	        faucets: ['https://www.thinkiumdev.net/faucet'],
	        nativeCurrency: {
	            name: 'TKM',
	            symbol: 'TKM',
	            decimals: 18,
	        },
	        infoURL: 'https://thinkium.net/',
	        shortName: 'TKM-test1',
	        chainId: 60001,
	        networkId: 60001,
	        explorers: [
	            {
	                name: 'thinkiumscan',
	                url: 'https://test1.thinkiumscan.net',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Thinkium Testnet Chain 2',
	        chain: 'Thinkium',
	        rpc: ['https://test2.thinkiumrpc.net/'],
	        faucets: ['https://www.thinkiumdev.net/faucet'],
	        nativeCurrency: {
	            name: 'TKM',
	            symbol: 'TKM',
	            decimals: 18,
	        },
	        infoURL: 'https://thinkium.net/',
	        shortName: 'TKM-test2',
	        chainId: 60002,
	        networkId: 60002,
	        explorers: [
	            {
	                name: 'thinkiumscan',
	                url: 'https://test2.thinkiumscan.net',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Thinkium Testnet Chain 103',
	        chain: 'Thinkium',
	        rpc: ['https://test103.thinkiumrpc.net/'],
	        faucets: ['https://www.thinkiumdev.net/faucet'],
	        nativeCurrency: {
	            name: 'TKM',
	            symbol: 'TKM',
	            decimals: 18,
	        },
	        infoURL: 'https://thinkium.net/',
	        shortName: 'TKM-test103',
	        chainId: 60103,
	        networkId: 60103,
	        explorers: [
	            {
	                name: 'thinkiumscan',
	                url: 'https://test103.thinkiumscan.net',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Celo Baklava Testnet',
	        chainId: 62320,
	        shortName: 'BKLV',
	        chain: 'CELO',
	        networkId: 62320,
	        nativeCurrency: {
	            name: 'CELO',
	            symbol: 'CELO',
	            decimals: 18,
	        },
	        rpc: ['https://baklava-forno.celo-testnet.org'],
	        faucets: [
	            'https://docs.google.com/forms/d/e/1FAIpQLSdfr1BwUTYepVmmvfVUDRCwALejZ-TUva2YujNpvrEmPAX2pg/viewform',
	            'https://cauldron.pretoriaresearchlab.io/baklava-faucet',
	        ],
	        infoURL: 'https://docs.celo.org/',
	    },
	    {
	        name: 'MultiVAC Mainnet',
	        chain: 'MultiVAC',
	        icon: 'multivac',
	        rpc: ['https://rpc.mtv.ac', 'https://rpc-eu.mtv.ac'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'MultiVAC',
	            symbol: 'MTV',
	            decimals: 18,
	        },
	        infoURL: 'https://mtv.ac',
	        shortName: 'mtv',
	        chainId: 62621,
	        networkId: 62621,
	        explorers: [
	            {
	                name: 'MultiVAC Explorer',
	                url: 'https://e.mtv.ac',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'eCredits Mainnet',
	        chain: 'ECS',
	        network: 'mainnet',
	        rpc: ['https://rpc.ecredits.com'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'eCredits',
	            symbol: 'ECS',
	            decimals: 18,
	        },
	        infoURL: 'https://ecredits.com',
	        shortName: 'ecs',
	        chainId: 63000,
	        networkId: 63000,
	        icon: 'ecredits',
	        explorers: [
	            {
	                name: 'eCredits MainNet Explorer',
	                url: 'https://explorer.ecredits.com',
	                icon: 'ecredits',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'eCredits Testnet',
	        chain: 'ECS',
	        network: 'testnet',
	        rpc: ['https://rpc.tst.ecredits.com'],
	        faucets: ['https://faucet.tst.ecredits.com'],
	        nativeCurrency: {
	            name: 'eCredits',
	            symbol: 'ECS',
	            decimals: 18,
	        },
	        infoURL: 'https://ecredits.com',
	        shortName: 'ecs-testnet',
	        chainId: 63001,
	        networkId: 63001,
	        icon: 'ecredits',
	        explorers: [
	            {
	                name: 'eCredits TestNet Explorer',
	                url: 'https://explorer.tst.ecredits.com',
	                icon: 'ecredits',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Condrieu',
	        title: 'Ethereum Verkle Testnet Condrieu',
	        chain: 'ETH',
	        rpc: ['https://rpc.condrieu.ethdevops.io:8545'],
	        faucets: ['https://faucet.condrieu.ethdevops.io'],
	        nativeCurrency: {
	            name: 'Condrieu Testnet Ether',
	            symbol: 'CTE',
	            decimals: 18,
	        },
	        infoURL: 'https://condrieu.ethdevops.io',
	        shortName: 'cndr',
	        chainId: 69420,
	        networkId: 69420,
	        explorers: [
	            {
	                name: 'Condrieu explorer',
	                url: 'https://explorer.condrieu.ethdevops.io',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'Thinkium Mainnet Chain 0',
	        chain: 'Thinkium',
	        rpc: ['https://proxy.thinkiumrpc.net/'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'TKM',
	            symbol: 'TKM',
	            decimals: 18,
	        },
	        infoURL: 'https://thinkium.net/',
	        shortName: 'TKM0',
	        chainId: 70000,
	        networkId: 70000,
	        explorers: [
	            {
	                name: 'thinkiumscan',
	                url: 'https://chain0.thinkiumscan.net',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Thinkium Mainnet Chain 1',
	        chain: 'Thinkium',
	        rpc: ['https://proxy1.thinkiumrpc.net/'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'TKM',
	            symbol: 'TKM',
	            decimals: 18,
	        },
	        infoURL: 'https://thinkium.net/',
	        shortName: 'TKM1',
	        chainId: 70001,
	        networkId: 70001,
	        explorers: [
	            {
	                name: 'thinkiumscan',
	                url: 'https://chain1.thinkiumscan.net',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Thinkium Mainnet Chain 2',
	        chain: 'Thinkium',
	        rpc: ['https://proxy2.thinkiumrpc.net/'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'TKM',
	            symbol: 'TKM',
	            decimals: 18,
	        },
	        infoURL: 'https://thinkium.net/',
	        shortName: 'TKM2',
	        chainId: 70002,
	        networkId: 70002,
	        explorers: [
	            {
	                name: 'thinkiumscan',
	                url: 'https://chain2.thinkiumscan.net',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Thinkium Mainnet Chain 103',
	        chain: 'Thinkium',
	        rpc: ['https://proxy103.thinkiumrpc.net/'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'TKM',
	            symbol: 'TKM',
	            decimals: 18,
	        },
	        infoURL: 'https://thinkium.net/',
	        shortName: 'TKM103',
	        chainId: 70103,
	        networkId: 70103,
	        explorers: [
	            {
	                name: 'thinkiumscan',
	                url: 'https://chain103.thinkiumscan.net',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Polyjuice Testnet',
	        chain: 'CKB',
	        icon: 'polyjuice',
	        rpc: ['https://godwoken-testnet-web3-rpc.ckbapp.dev', 'ws://godwoken-testnet-web3-rpc.ckbapp.dev/ws'],
	        faucets: ['https://faucet.nervos.org/'],
	        nativeCurrency: {
	            name: 'CKB',
	            symbol: 'CKB',
	            decimals: 8,
	        },
	        infoURL: 'https://github.com/nervosnetwork/godwoken',
	        shortName: 'ckb',
	        chainId: 71393,
	        networkId: 1,
	    },
	    {
	        name: 'Godwoken Testnet (V1.1)',
	        chain: 'GWT',
	        rpc: ['https://godwoken-testnet-v1.ckbapp.dev'],
	        faucets: ['https://testnet.bridge.godwoken.io'],
	        nativeCurrency: {
	            name: 'pCKB',
	            symbol: 'pCKB',
	            decimals: 18,
	        },
	        infoURL: 'https://www.nervos.org',
	        shortName: 'gw-testnet-v1',
	        chainId: 71401,
	        networkId: 71401,
	        explorers: [
	            {
	                name: 'GWScout Explorer',
	                url: 'https://gw-testnet-explorer.nervosdao.community',
	                standard: 'none',
	            },
	            {
	                name: 'GWScan Block Explorer',
	                url: 'https://v1.testnet.gwscan.com',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'Godwoken Mainnet',
	        chain: 'GWT',
	        rpc: ['https://v1.mainnet.godwoken.io/rpc'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'pCKB',
	            symbol: 'pCKB',
	            decimals: 18,
	        },
	        infoURL: 'https://www.nervos.org',
	        shortName: 'gw-mainnet-v1',
	        chainId: 71402,
	        networkId: 71402,
	        explorers: [
	            {
	                name: 'GWScout Explorer',
	                url: 'https://gw-mainnet-explorer.nervosdao.community',
	                standard: 'none',
	            },
	            {
	                name: 'GWScan Block Explorer',
	                url: 'https://v1.gwscan.com',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'Energy Web Volta Testnet',
	        chain: 'Volta',
	        rpc: ['https://volta-rpc.energyweb.org', 'wss://volta-rpc.energyweb.org/ws'],
	        faucets: ['https://voltafaucet.energyweb.org'],
	        nativeCurrency: {
	            name: 'Volta Token',
	            symbol: 'VT',
	            decimals: 18,
	        },
	        infoURL: 'https://energyweb.org',
	        shortName: 'vt',
	        chainId: 73799,
	        networkId: 73799,
	    },
	    {
	        name: 'Mixin Virtual Machine',
	        chain: 'MVM',
	        network: 'mainnet',
	        rpc: ['https://geth.mvm.dev'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Ether',
	            symbol: 'ETH',
	            decimals: 18,
	        },
	        infoURL: 'https://mvm.dev',
	        shortName: 'mvm',
	        chainId: 73927,
	        networkId: 73927,
	        icon: 'mvm',
	        explorers: [
	            {
	                name: 'mvmscan',
	                url: 'https://scan.mvm.dev',
	                icon: 'mvm',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'ResinCoin Mainnet',
	        chain: 'RESIN',
	        rpc: ['https://mainnet.resincoin.ml'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Ether',
	            symbol: 'RESIN',
	            decimals: 18,
	        },
	        infoURL: 'https://resincoin.ml',
	        shortName: 'resin',
	        chainId: 75000,
	        networkId: 75000,
	        explorers: [
	            {
	                name: 'ResinScan',
	                url: 'https://explorer.resincoin.ml',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'Firenze test network',
	        chain: 'ETH',
	        rpc: ['https://ethnode.primusmoney.com/firenze'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Firenze Ether',
	            symbol: 'FIN',
	            decimals: 18,
	        },
	        infoURL: 'https://primusmoney.com',
	        shortName: 'firenze',
	        chainId: 78110,
	        networkId: 78110,
	    },
	    {
	        name: 'Mumbai',
	        title: 'Polygon Testnet Mumbai',
	        chain: 'Polygon',
	        rpc: [
	            'https://matic-mumbai.chainstacklabs.com',
	            'https://rpc-mumbai.maticvigil.com',
	            'https://matic-testnet-archive-rpc.bwarelabs.com',
	        ],
	        faucets: ['https://faucet.polygon.technology/'],
	        nativeCurrency: {
	            name: 'MATIC',
	            symbol: 'MATIC',
	            decimals: 18,
	        },
	        infoURL: 'https://polygon.technology/',
	        shortName: 'maticmum',
	        chainId: 80001,
	        networkId: 80001,
	        explorers: [
	            {
	                name: 'polygonscan',
	                url: 'https://mumbai.polygonscan.com',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'IVAR Chain Mainnet',
	        chain: 'IVAR',
	        icon: 'ivar',
	        rpc: ['https://mainnet-rpc.ivarex.com'],
	        faucets: ['https://faucet.ivarex.com/'],
	        nativeCurrency: {
	            name: 'Ivar',
	            symbol: 'IVAR',
	            decimals: 18,
	        },
	        infoURL: 'https://ivarex.com',
	        shortName: 'ivar',
	        chainId: 88888,
	        networkId: 88888,
	        explorers: [
	            {
	                name: 'ivarscan',
	                url: 'https://ivarscan.com',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'UB Smart Chain(testnet)',
	        chain: 'USC',
	        network: 'testnet',
	        rpc: ['https://testnet.rpc.uschain.network'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'UBC',
	            symbol: 'UBC',
	            decimals: 18,
	        },
	        infoURL: 'https://www.ubchain.site',
	        shortName: 'usctest',
	        chainId: 99998,
	        networkId: 99998,
	    },
	    {
	        name: 'UB Smart Chain',
	        chain: 'USC',
	        network: 'mainnet',
	        rpc: ['https://rpc.uschain.network'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'UBC',
	            symbol: 'UBC',
	            decimals: 18,
	        },
	        infoURL: 'https://www.ubchain.site/',
	        shortName: 'usc',
	        chainId: 99999,
	        networkId: 99999,
	    },
	    {
	        name: 'QuarkChain Mainnet Root',
	        chain: 'QuarkChain',
	        rpc: ['http://jrpc.mainnet.quarkchain.io:38391'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'QKC',
	            symbol: 'QKC',
	            decimals: 18,
	        },
	        infoURL: 'https://www.quarkchain.io',
	        shortName: 'qkc-r',
	        chainId: 100000,
	        networkId: 100000,
	    },
	    {
	        name: 'QuarkChain Mainnet Shard 0',
	        chain: 'QuarkChain',
	        rpc: ['https://mainnet-s0-ethapi.quarkchain.io', 'http://eth-jrpc.mainnet.quarkchain.io:39000'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'QKC',
	            symbol: 'QKC',
	            decimals: 18,
	        },
	        infoURL: 'https://www.quarkchain.io',
	        shortName: 'qkc-s0',
	        chainId: 100001,
	        networkId: 100001,
	        parent: {
	            chain: 'eip155-100000',
	            type: 'shard',
	        },
	        explorers: [
	            {
	                name: 'quarkchain-mainnet',
	                url: 'https://mainnet.quarkchain.io/0',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'QuarkChain Mainnet Shard 1',
	        chain: 'QuarkChain',
	        rpc: ['https://mainnet-s1-ethapi.quarkchain.io', 'http://eth-jrpc.mainnet.quarkchain.io:39001'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'QKC',
	            symbol: 'QKC',
	            decimals: 18,
	        },
	        infoURL: 'https://www.quarkchain.io',
	        shortName: 'qkc-s1',
	        chainId: 100002,
	        networkId: 100002,
	        parent: {
	            chain: 'eip155-100000',
	            type: 'shard',
	        },
	        explorers: [
	            {
	                name: 'quarkchain-mainnet',
	                url: 'https://mainnet.quarkchain.io/1',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'QuarkChain Mainnet Shard 2',
	        chain: 'QuarkChain',
	        rpc: ['https://mainnet-s2-ethapi.quarkchain.io', 'http://eth-jrpc.mainnet.quarkchain.io:39002'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'QKC',
	            symbol: 'QKC',
	            decimals: 18,
	        },
	        infoURL: 'https://www.quarkchain.io',
	        shortName: 'qkc-s2',
	        chainId: 100003,
	        networkId: 100003,
	        parent: {
	            chain: 'eip155-100000',
	            type: 'shard',
	        },
	        explorers: [
	            {
	                name: 'quarkchain-mainnet',
	                url: 'https://mainnet.quarkchain.io/2',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'QuarkChain Mainnet Shard 3',
	        chain: 'QuarkChain',
	        rpc: ['https://mainnet-s3-ethapi.quarkchain.io', 'http://eth-jrpc.mainnet.quarkchain.io:39003'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'QKC',
	            symbol: 'QKC',
	            decimals: 18,
	        },
	        infoURL: 'https://www.quarkchain.io',
	        shortName: 'qkc-s3',
	        chainId: 100004,
	        networkId: 100004,
	        parent: {
	            chain: 'eip155-100000',
	            type: 'shard',
	        },
	        explorers: [
	            {
	                name: 'quarkchain-mainnet',
	                url: 'https://mainnet.quarkchain.io/3',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'QuarkChain Mainnet Shard 4',
	        chain: 'QuarkChain',
	        rpc: ['https://mainnet-s4-ethapi.quarkchain.io', 'http://eth-jrpc.mainnet.quarkchain.io:39004'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'QKC',
	            symbol: 'QKC',
	            decimals: 18,
	        },
	        infoURL: 'https://www.quarkchain.io',
	        shortName: 'qkc-s4',
	        chainId: 100005,
	        networkId: 100005,
	        parent: {
	            chain: 'eip155-100000',
	            type: 'shard',
	        },
	        explorers: [
	            {
	                name: 'quarkchain-mainnet',
	                url: 'https://mainnet.quarkchain.io/4',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'QuarkChain Mainnet Shard 5',
	        chain: 'QuarkChain',
	        rpc: ['https://mainnet-s5-ethapi.quarkchain.io', 'http://eth-jrpc.mainnet.quarkchain.io:39005'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'QKC',
	            symbol: 'QKC',
	            decimals: 18,
	        },
	        infoURL: 'https://www.quarkchain.io',
	        shortName: 'qkc-s5',
	        chainId: 100006,
	        networkId: 100006,
	        parent: {
	            chain: 'eip155-100000',
	            type: 'shard',
	        },
	        explorers: [
	            {
	                name: 'quarkchain-mainnet',
	                url: 'https://mainnet.quarkchain.io/5',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'QuarkChain Mainnet Shard 6',
	        chain: 'QuarkChain',
	        rpc: ['https://mainnet-s6-ethapi.quarkchain.io', 'http://eth-jrpc.mainnet.quarkchain.io:39006'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'QKC',
	            symbol: 'QKC',
	            decimals: 18,
	        },
	        infoURL: 'https://www.quarkchain.io',
	        shortName: 'qkc-s6',
	        chainId: 100007,
	        networkId: 100007,
	        parent: {
	            chain: 'eip155-100000',
	            type: 'shard',
	        },
	        explorers: [
	            {
	                name: 'quarkchain-mainnet',
	                url: 'https://mainnet.quarkchain.io/6',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'QuarkChain Mainnet Shard 7',
	        chain: 'QuarkChain',
	        rpc: ['https://mainnet-s7-ethapi.quarkchain.io', 'http://eth-jrpc.mainnet.quarkchain.io:39007'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'QKC',
	            symbol: 'QKC',
	            decimals: 18,
	        },
	        infoURL: 'https://www.quarkchain.io',
	        shortName: 'qkc-s7',
	        chainId: 100008,
	        networkId: 100008,
	        parent: {
	            chain: 'eip155-100000',
	            type: 'shard',
	        },
	        explorers: [
	            {
	                name: 'quarkchain-mainnet',
	                url: 'https://mainnet.quarkchain.io/7',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Crystaleum',
	        chain: 'crystal',
	        network: 'mainnet',
	        rpc: ['https://evm.cryptocurrencydevs.org', 'https://rpc.crystaleum.org'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'CRFI',
	            symbol: '◈',
	            decimals: 18,
	        },
	        infoURL: 'https://crystaleum.org',
	        shortName: 'CRFI',
	        chainId: 103090,
	        networkId: 1,
	        icon: 'crystal',
	        explorers: [
	            {
	                name: 'blockscout',
	                url: 'https://scan.crystaleum.org',
	                icon: 'crystal',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'BROChain Mainnet',
	        chain: 'BRO',
	        network: 'mainnet',
	        rpc: [
	            'https://rpc.brochain.org',
	            'http://rpc.brochain.org',
	            'https://rpc.brochain.org/mainnet',
	            'http://rpc.brochain.org/mainnet',
	        ],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Brother',
	            symbol: 'BRO',
	            decimals: 18,
	        },
	        infoURL: 'https://brochain.org',
	        shortName: 'bro',
	        chainId: 108801,
	        networkId: 108801,
	        explorers: [
	            {
	                name: 'BROChain Explorer',
	                url: 'https://explorer.brochain.org',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'QuarkChain Devnet Root',
	        chain: 'QuarkChain',
	        rpc: ['http://jrpc.devnet.quarkchain.io:38391'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'QKC',
	            symbol: 'QKC',
	            decimals: 18,
	        },
	        infoURL: 'https://www.quarkchain.io',
	        shortName: 'qkc-d-r',
	        chainId: 110000,
	        networkId: 110000,
	    },
	    {
	        name: 'QuarkChain Devnet Shard 0',
	        chain: 'QuarkChain',
	        rpc: ['https://devnet-s0-ethapi.quarkchain.io', 'http://eth-jrpc.devnet.quarkchain.io:39900'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'QKC',
	            symbol: 'QKC',
	            decimals: 18,
	        },
	        infoURL: 'https://www.quarkchain.io',
	        shortName: 'qkc-d-s0',
	        chainId: 110001,
	        networkId: 110001,
	        parent: {
	            chain: 'eip155-110000',
	            type: 'shard',
	        },
	        explorers: [
	            {
	                name: 'quarkchain-devnet',
	                url: 'https://devnet.quarkchain.io/0',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'QuarkChain Devnet Shard 1',
	        chain: 'QuarkChain',
	        rpc: ['https://devnet-s1-ethapi.quarkchain.io', 'http://eth-jrpc.devnet.quarkchain.io:39901'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'QKC',
	            symbol: 'QKC',
	            decimals: 18,
	        },
	        infoURL: 'https://www.quarkchain.io',
	        shortName: 'qkc-d-s1',
	        chainId: 110002,
	        networkId: 110002,
	        parent: {
	            chain: 'eip155-110000',
	            type: 'shard',
	        },
	        explorers: [
	            {
	                name: 'quarkchain-devnet',
	                url: 'https://devnet.quarkchain.io/1',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'QuarkChain Devnet Shard 2',
	        chain: 'QuarkChain',
	        rpc: ['https://devnet-s2-ethapi.quarkchain.io', 'http://eth-jrpc.devnet.quarkchain.io:39902'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'QKC',
	            symbol: 'QKC',
	            decimals: 18,
	        },
	        infoURL: 'https://www.quarkchain.io',
	        shortName: 'qkc-d-s2',
	        chainId: 110003,
	        networkId: 110003,
	        parent: {
	            chain: 'eip155-110000',
	            type: 'shard',
	        },
	        explorers: [
	            {
	                name: 'quarkchain-devnet',
	                url: 'https://devnet.quarkchain.io/2',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'QuarkChain Devnet Shard 3',
	        chain: 'QuarkChain',
	        rpc: ['https://devnet-s3-ethapi.quarkchain.io', 'http://eth-jrpc.devnet.quarkchain.io:39903'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'QKC',
	            symbol: 'QKC',
	            decimals: 18,
	        },
	        infoURL: 'https://www.quarkchain.io',
	        shortName: 'qkc-d-s3',
	        chainId: 110004,
	        networkId: 110004,
	        parent: {
	            chain: 'eip155-110000',
	            type: 'shard',
	        },
	        explorers: [
	            {
	                name: 'quarkchain-devnet',
	                url: 'https://devnet.quarkchain.io/3',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'QuarkChain Devnet Shard 4',
	        chain: 'QuarkChain',
	        rpc: ['https://devnet-s4-ethapi.quarkchain.io', 'http://eth-jrpc.devnet.quarkchain.io:39904'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'QKC',
	            symbol: 'QKC',
	            decimals: 18,
	        },
	        infoURL: 'https://www.quarkchain.io',
	        shortName: 'qkc-d-s4',
	        chainId: 110005,
	        networkId: 110005,
	        parent: {
	            chain: 'eip155-110000',
	            type: 'shard',
	        },
	        explorers: [
	            {
	                name: 'quarkchain-devnet',
	                url: 'https://devnet.quarkchain.io/4',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'QuarkChain Devnet Shard 5',
	        chain: 'QuarkChain',
	        rpc: ['https://devnet-s5-ethapi.quarkchain.io', 'http://eth-jrpc.devnet.quarkchain.io:39905'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'QKC',
	            symbol: 'QKC',
	            decimals: 18,
	        },
	        infoURL: 'https://www.quarkchain.io',
	        shortName: 'qkc-d-s5',
	        chainId: 110006,
	        networkId: 110006,
	        parent: {
	            chain: 'eip155-110000',
	            type: 'shard',
	        },
	        explorers: [
	            {
	                name: 'quarkchain-devnet',
	                url: 'https://devnet.quarkchain.io/5',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'QuarkChain Devnet Shard 6',
	        chain: 'QuarkChain',
	        rpc: ['https://devnet-s6-ethapi.quarkchain.io', 'http://eth-jrpc.devnet.quarkchain.io:39906'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'QKC',
	            symbol: 'QKC',
	            decimals: 18,
	        },
	        infoURL: 'https://www.quarkchain.io',
	        shortName: 'qkc-d-s6',
	        chainId: 110007,
	        networkId: 110007,
	        parent: {
	            chain: 'eip155-110000',
	            type: 'shard',
	        },
	        explorers: [
	            {
	                name: 'quarkchain-devnet',
	                url: 'https://devnet.quarkchain.io/6',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'QuarkChain Devnet Shard 7',
	        chain: 'QuarkChain',
	        rpc: ['https://devnet-s7-ethapi.quarkchain.io', 'http://eth-jrpc.devnet.quarkchain.io:39907'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'QKC',
	            symbol: 'QKC',
	            decimals: 18,
	        },
	        infoURL: 'https://www.quarkchain.io',
	        shortName: 'qkc-d-s7',
	        chainId: 110008,
	        networkId: 110008,
	        parent: {
	            chain: 'eip155-110000',
	            type: 'shard',
	        },
	        explorers: [
	            {
	                name: 'quarkchain-devnet',
	                url: 'https://devnet.quarkchain.io/7',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'ETND Chain Mainnets',
	        chain: 'ETND',
	        network: 'mainnet',
	        rpc: ['https://rpc.node1.etnd.pro/'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'ETND',
	            symbol: 'ETND',
	            decimals: 18,
	        },
	        infoURL: 'https://www.etnd.pro',
	        shortName: 'ETND',
	        chainId: 131419,
	        networkId: 131419,
	        icon: 'ETND',
	        explorers: [
	            {
	                name: 'etndscan',
	                url: 'https://scan.etnd.pro',
	                icon: 'ETND',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'Milkomeda C1 Testnet',
	        chain: 'milkTAda',
	        icon: 'milkomeda',
	        network: 'testnet',
	        rpc: ['https://rpc-devnet-cardano-evm.c1.milkomeda.com', 'wss://rpc-devnet-cardano-evm.c1.milkomeda.com'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'milkTAda',
	            symbol: 'mTAda',
	            decimals: 18,
	        },
	        infoURL: 'https://milkomeda.com',
	        shortName: 'milkTAda',
	        chainId: 200101,
	        networkId: 200101,
	        explorers: [
	            {
	                name: 'Blockscout',
	                url: 'https://explorer-devnet-cardano-evm.c1.milkomeda.com',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'Akroma',
	        chain: 'AKA',
	        rpc: ['https://remote.akroma.io'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Akroma Ether',
	            symbol: 'AKA',
	            decimals: 18,
	        },
	        infoURL: 'https://akroma.io',
	        shortName: 'aka',
	        chainId: 200625,
	        networkId: 200625,
	        slip44: 200625,
	    },
	    {
	        name: 'Alaya Mainnet',
	        chain: 'Alaya',
	        rpc: ['https://openapi.alaya.network/rpc', 'wss://openapi.alaya.network/ws'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'ATP',
	            symbol: 'atp',
	            decimals: 18,
	        },
	        infoURL: 'https://www.alaya.network/',
	        shortName: 'alaya',
	        chainId: 201018,
	        networkId: 1,
	        icon: 'alaya',
	        explorers: [
	            {
	                name: 'alaya explorer',
	                url: 'https://scan.alaya.network',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'Alaya Dev Testnet',
	        chain: 'Alaya',
	        rpc: ['https://devnetopenapi.alaya.network/rpc', 'wss://devnetopenapi.alaya.network/ws'],
	        faucets: ['https://faucet.alaya.network/faucet/?id=f93426c0887f11eb83b900163e06151c'],
	        nativeCurrency: {
	            name: 'ATP',
	            symbol: 'atp',
	            decimals: 18,
	        },
	        infoURL: 'https://www.alaya.network/',
	        shortName: 'alayadev',
	        chainId: 201030,
	        networkId: 1,
	        icon: 'alaya',
	        explorers: [
	            {
	                name: 'alaya explorer',
	                url: 'https://devnetscan.alaya.network',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'PlatON Mainnet',
	        chain: 'PlatON',
	        network: 'mainnet',
	        rpc: ['https://openapi2.platon.network/rpc', 'wss://openapi2.platon.network/ws'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'LAT',
	            symbol: 'lat',
	            decimals: 18,
	        },
	        infoURL: 'https://www.platon.network',
	        shortName: 'platon',
	        chainId: 210425,
	        networkId: 1,
	        icon: 'platon',
	        explorers: [
	            {
	                name: 'PlatON explorer',
	                url: 'https://scan.platon.network',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'Haymo Testnet',
	        chain: 'tHYM',
	        network: 'testnet',
	        rpc: ['https://testnet1.haymo.network'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'HAYMO',
	            symbol: 'HYM',
	            decimals: 18,
	        },
	        infoURL: 'https://haymoswap.web.app/',
	        shortName: 'hym',
	        chainId: 234666,
	        networkId: 234666,
	    },
	    {
	        name: 'ARTIS sigma1',
	        chain: 'ARTIS',
	        rpc: ['https://rpc.sigma1.artis.network'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'ARTIS sigma1 Ether',
	            symbol: 'ATS',
	            decimals: 18,
	        },
	        infoURL: 'https://artis.eco',
	        shortName: 'ats',
	        chainId: 246529,
	        networkId: 246529,
	        slip44: 246529,
	    },
	    {
	        name: 'ARTIS Testnet tau1',
	        chain: 'ARTIS',
	        rpc: ['https://rpc.tau1.artis.network'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'ARTIS tau1 Ether',
	            symbol: 'tATS',
	            decimals: 18,
	        },
	        infoURL: 'https://artis.network',
	        shortName: 'atstau',
	        chainId: 246785,
	        networkId: 246785,
	    },
	    {
	        name: 'Social Smart Chain Mainnet',
	        chain: 'SoChain',
	        rpc: ['https://socialsmartchain.digitalnext.business'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'SoChain',
	            symbol: '$OC',
	            decimals: 18,
	        },
	        infoURL: 'https://digitalnext.business/SocialSmartChain',
	        shortName: 'SoChain',
	        chainId: 281121,
	        networkId: 281121,
	        explorers: [],
	    },
	    {
	        name: 'Polis Testnet',
	        chain: 'Sparta',
	        icon: 'polis',
	        rpc: ['https://sparta-rpc.polis.tech'],
	        faucets: ['https://faucet.polis.tech'],
	        nativeCurrency: {
	            name: 'tPolis',
	            symbol: 'tPOLIS',
	            decimals: 18,
	        },
	        infoURL: 'https://polis.tech',
	        shortName: 'sparta',
	        chainId: 333888,
	        networkId: 333888,
	    },
	    {
	        name: 'Polis Mainnet',
	        chain: 'Olympus',
	        icon: 'polis',
	        rpc: ['https://rpc.polis.tech'],
	        faucets: ['https://faucet.polis.tech'],
	        nativeCurrency: {
	            name: 'Polis',
	            symbol: 'POLIS',
	            decimals: 18,
	        },
	        infoURL: 'https://polis.tech',
	        shortName: 'olympus',
	        chainId: 333999,
	        networkId: 333999,
	    },
	    {
	        name: 'Arbitrum Rinkeby',
	        title: 'Arbitrum Testnet Rinkeby',
	        chainId: 421611,
	        shortName: 'arb-rinkeby',
	        chain: 'ETH',
	        networkId: 421611,
	        nativeCurrency: {
	            name: 'Arbitrum Rinkeby Ether',
	            symbol: 'ETH',
	            decimals: 18,
	        },
	        rpc: ['https://rinkeby.arbitrum.io/rpc'],
	        faucets: ['http://fauceth.komputing.org?chain=421611&address=${ADDRESS}'],
	        infoURL: 'https://arbitrum.io',
	        explorers: [
	            {
	                name: 'arbiscan-testnet',
	                url: 'https://testnet.arbiscan.io',
	                standard: 'EIP3091',
	            },
	            {
	                name: 'arbitrum-rinkeby',
	                url: 'https://rinkeby-explorer.arbitrum.io',
	                standard: 'EIP3091',
	            },
	        ],
	        parent: {
	            type: 'L2',
	            chain: 'eip155-4',
	            bridges: [
	                {
	                    url: 'https://bridge.arbitrum.io',
	                },
	            ],
	        },
	    },
	    {
	        name: 'Arbitrum Görli',
	        title: 'Arbitrum Görli Rollup Testnet',
	        chainId: 421613,
	        shortName: 'arb-goerli',
	        chain: 'ETH',
	        networkId: 421613,
	        nativeCurrency: {
	            name: 'Arbitrum Görli Ether',
	            symbol: 'AGOR',
	            decimals: 18,
	        },
	        rpc: ['https://goerli-rollup.arbitrum.io/rpc/'],
	        faucets: [],
	        infoURL: 'https://arbitrum.io/',
	        explorers: [
	            {
	                name: 'Arbitrum Görli Rollup Explorer',
	                url: 'https://goerli-rollup-explorer.arbitrum.io',
	                standard: 'EIP3091',
	            },
	        ],
	        parent: {
	            type: 'L2',
	            chain: 'eip155-5',
	            bridges: [
	                {
	                    url: 'https://bridge.arbitrum.io/',
	                },
	            ],
	        },
	    },
	    {
	        name: 'Dexalot Testnet',
	        chain: 'DEXALOT',
	        network: 'testnet',
	        rpc: ['https://subnets.avax.network/dexalot/testnet/rpc'],
	        faucets: ['https://sfaucet.dexalot-test.com'],
	        nativeCurrency: {
	            name: 'Dexalot',
	            symbol: 'ALOT',
	            decimals: 18,
	        },
	        infoURL: 'https://dexalot.com',
	        shortName: 'Dexalot',
	        chainId: 432201,
	        networkId: 432201,
	        explorers: [
	            {
	                name: 'Avalanche Subnet Explorer',
	                url: 'https://subnets.avax.network/dexalot/testnet/explorer',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Weelink Testnet',
	        chain: 'WLK',
	        rpc: ['https://weelinknode1c.gw002.oneitfarm.com'],
	        faucets: ['https://faucet.weelink.gw002.oneitfarm.com'],
	        nativeCurrency: {
	            name: 'Weelink Chain Token',
	            symbol: 'tWLK',
	            decimals: 18,
	        },
	        infoURL: 'https://weelink.cloud',
	        shortName: 'wlkt',
	        chainId: 444900,
	        networkId: 444900,
	        explorers: [
	            {
	                name: 'weelink-testnet',
	                url: 'https://weelink.cloud/#/blockView/overview',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'OpenChain Mainnet',
	        chain: 'OpenChain',
	        rpc: ['https://baas-rpc.luniverse.io:18545?lChainId=1641349324562974539'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'OpenCoin',
	            symbol: 'OPC',
	            decimals: 10,
	        },
	        infoURL: 'https://www.openchain.live',
	        shortName: 'oc',
	        chainId: 474142,
	        networkId: 474142,
	        explorers: [
	            {
	                name: 'SIDE SCAN',
	                url: 'https://sidescan.luniverse.io/1641349324562974539',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'CMP-Testnet',
	        chain: 'CMP',
	        network: 'testnet',
	        rpc: ['https://galaxy.block.caduceus.foundation', 'wss://galaxy.block.caduceus.foundation'],
	        faucets: ['https://dev.caduceus.foundation/testNetwork'],
	        nativeCurrency: {
	            name: 'Caduceus Testnet Token',
	            symbol: 'CMP',
	            decimals: 18,
	        },
	        infoURL: 'https://caduceus.foundation/',
	        shortName: 'cmp',
	        chainId: 512512,
	        networkId: 512512,
	        explorers: [
	            {
	                name: 'Galaxy Scan',
	                url: 'https://galaxy.scan.caduceus.foundation',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'Vision - Vpioneer Test Chain',
	        chain: 'Vision-Vpioneer',
	        rpc: ['https://vpioneer.infragrid.v.network/ethereum/compatible'],
	        faucets: ['https://vpioneerfaucet.visionscan.org'],
	        nativeCurrency: {
	            name: 'VS',
	            symbol: 'VS',
	            decimals: 18,
	        },
	        infoURL: 'https://visionscan.org',
	        shortName: 'vpioneer',
	        chainId: 666666,
	        networkId: 666666,
	        slip44: 60,
	    },
	    {
	        name: '4GoodNetwork',
	        chain: '4GN',
	        rpc: ['https://chain.deptofgood.com'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'APTA',
	            symbol: 'APTA',
	            decimals: 18,
	        },
	        infoURL: 'https://bloqs4good.com',
	        shortName: 'bloqs4good',
	        chainId: 846000,
	        networkId: 846000,
	    },
	    {
	        name: 'Vision - Mainnet',
	        chain: 'Vision',
	        rpc: ['https://infragrid.v.network/ethereum/compatible'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'VS',
	            symbol: 'VS',
	            decimals: 18,
	        },
	        infoURL: 'https://www.v.network',
	        explorers: [
	            {
	                name: 'Visionscan',
	                url: 'https://www.visionscan.org',
	                standard: 'EIP3091',
	            },
	        ],
	        shortName: 'vision',
	        chainId: 888888,
	        networkId: 888888,
	        slip44: 60,
	    },
	    {
	        name: 'Eluvio Content Fabric',
	        chain: 'Eluvio',
	        rpc: [
	            'https://host-76-74-28-226.contentfabric.io/eth/',
	            'https://host-76-74-28-232.contentfabric.io/eth/',
	            'https://host-76-74-29-2.contentfabric.io/eth/',
	            'https://host-76-74-29-8.contentfabric.io/eth/',
	            'https://host-76-74-29-34.contentfabric.io/eth/',
	            'https://host-76-74-29-35.contentfabric.io/eth/',
	            'https://host-154-14-211-98.contentfabric.io/eth/',
	            'https://host-154-14-192-66.contentfabric.io/eth/',
	            'https://host-60-240-133-202.contentfabric.io/eth/',
	            'https://host-64-235-250-98.contentfabric.io/eth/',
	        ],
	        faucets: [],
	        nativeCurrency: {
	            name: 'ELV',
	            symbol: 'ELV',
	            decimals: 18,
	        },
	        infoURL: 'https://eluv.io',
	        shortName: 'elv',
	        chainId: 955305,
	        networkId: 955305,
	        slip44: 1011,
	        explorers: [
	            {
	                name: 'blockscout',
	                url: 'https://explorer.eluv.io',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Etho Protocol',
	        chain: 'ETHO',
	        rpc: ['https://rpc.ethoprotocol.com'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Etho Protocol',
	            symbol: 'ETHO',
	            decimals: 18,
	        },
	        infoURL: 'https://ethoprotocol.com',
	        shortName: 'etho',
	        chainId: 1313114,
	        networkId: 1313114,
	        slip44: 1313114,
	        explorers: [
	            {
	                name: 'blockscout',
	                url: 'https://explorer.ethoprotocol.com',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'Xerom',
	        chain: 'XERO',
	        rpc: ['https://rpc.xerom.org'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Xerom Ether',
	            symbol: 'XERO',
	            decimals: 18,
	        },
	        infoURL: 'https://xerom.org',
	        shortName: 'xero',
	        chainId: 1313500,
	        networkId: 1313500,
	    },
	    {
	        name: 'Kintsugi',
	        title: 'Kintsugi merge testnet',
	        chain: 'ETH',
	        rpc: ['https://rpc.kintsugi.themerge.dev'],
	        faucets: ['http://fauceth.komputing.org?chain=1337702&address=${ADDRESS}', 'https://faucet.kintsugi.themerge.dev'],
	        nativeCurrency: {
	            name: 'kintsugi Ethere',
	            symbol: 'kiETH',
	            decimals: 18,
	        },
	        infoURL: 'https://kintsugi.themerge.dev/',
	        shortName: 'kintsugi',
	        chainId: 1337702,
	        networkId: 1337702,
	        explorers: [
	            {
	                name: 'kintsugi explorer',
	                url: 'https://explorer.kintsugi.themerge.dev',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Kiln',
	        chain: 'ETH',
	        network: 'testnet',
	        rpc: ['https://rpc.kiln.themerge.dev'],
	        faucets: ['https://faucet.kiln.themerge.dev', 'https://kiln-faucet.pk910.de', 'https://kilnfaucet.com'],
	        nativeCurrency: {
	            name: 'Testnet ETH',
	            symbol: 'ETH',
	            decimals: 18,
	        },
	        infoURL: 'https://kiln.themerge.dev/',
	        shortName: 'kiln',
	        chainId: 1337802,
	        networkId: 1337802,
	        icon: 'ethereum',
	        explorers: [
	            {
	                name: 'Kiln Explorer',
	                url: 'https://explorer.kiln.themerge.dev',
	                icon: 'ethereum',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'PlatON Dev Testnet',
	        chain: 'PlatON',
	        rpc: ['https://devnetopenapi2.platon.network/rpc', 'wss://devnetopenapi2.platon.network/ws'],
	        faucets: ['https://faucet.platon.network/faucet/?id=e5d32df10aee11ec911142010a667c03'],
	        nativeCurrency: {
	            name: 'LAT',
	            symbol: 'lat',
	            decimals: 18,
	        },
	        infoURL: 'https://www.platon.network',
	        shortName: 'platondev',
	        chainId: 2203181,
	        networkId: 1,
	        icon: 'platon',
	        explorers: [
	            {
	                name: 'PlatON explorer',
	                url: 'https://devnetscan.platon.network',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'PlatON Dev Testnet2',
	        chain: 'PlatON',
	        rpc: ['https://devnet2openapi.platon.network/rpc', 'wss://devnet2openapi.platon.network/ws'],
	        faucets: ['https://devnet2faucet.platon.network/faucet'],
	        nativeCurrency: {
	            name: 'LAT',
	            symbol: 'lat',
	            decimals: 18,
	        },
	        infoURL: 'https://www.platon.network',
	        shortName: 'platondev2',
	        chainId: 2206132,
	        networkId: 1,
	        icon: 'platon',
	        explorers: [
	            {
	                name: 'PlatON explorer',
	                url: 'https://devnet2scan.platon.network',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'Musicoin',
	        chain: 'MUSIC',
	        rpc: ['https://mewapi.musicoin.tw'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Musicoin',
	            symbol: 'MUSIC',
	            decimals: 18,
	        },
	        infoURL: 'https://musicoin.tw',
	        shortName: 'music',
	        chainId: 7762959,
	        networkId: 7762959,
	        slip44: 184,
	    },
	    {
	        name: 'Sepolia',
	        title: 'Ethereum Testnet Sepolia',
	        chain: 'ETH',
	        network: 'testnet',
	        rpc: [
	            'https://rpc.sepolia.dev',
	            'https://rpc.sepolia.online',
	            'https://www.sepoliarpc.space',
	            'https://rpc.sepolia.org',
	            'https://rpc-sepolia.rockx.com',
	        ],
	        faucets: ['http://fauceth.komputing.org?chain=11155111&address=${ADDRESS}'],
	        nativeCurrency: {
	            name: 'Sepolia Ether',
	            symbol: 'SEP',
	            decimals: 18,
	        },
	        infoURL: 'https://sepolia.otterscan.io',
	        shortName: 'sep',
	        chainId: 11155111,
	        networkId: 11155111,
	        explorers: [
	            {
	                name: 'otterscan-sepolia',
	                url: 'https://sepolia.otterscan.io',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'PepChain Churchill',
	        chain: 'PEP',
	        rpc: ['https://churchill-rpc.pepchain.io'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'PepChain Churchill Ether',
	            symbol: 'TPEP',
	            decimals: 18,
	        },
	        infoURL: 'https://pepchain.io',
	        shortName: 'tpep',
	        chainId: 13371337,
	        networkId: 13371337,
	    },
	    {
	        name: 'IOLite',
	        chain: 'ILT',
	        rpc: ['https://net.iolite.io'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'IOLite Ether',
	            symbol: 'ILT',
	            decimals: 18,
	        },
	        infoURL: 'https://iolite.io',
	        shortName: 'ilt',
	        chainId: 18289463,
	        networkId: 18289463,
	    },
	    {
	        name: 'SmartMesh Mainnet',
	        chain: 'Spectrum',
	        rpc: ['https://jsonapi1.smartmesh.cn'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'SmartMesh Native Token',
	            symbol: 'SMT',
	            decimals: 18,
	        },
	        infoURL: 'https://smartmesh.io',
	        shortName: 'spectrum',
	        chainId: 20180430,
	        networkId: 1,
	        explorers: [
	            {
	                name: 'spectrum',
	                url: 'https://spectrum.pub',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'quarkblockchain',
	        chain: 'QKI',
	        rpc: ['https://hz.rpc.qkiscan.cn', 'https://jp.rpc.qkiscan.io'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'quarkblockchain Native Token',
	            symbol: 'QKI',
	            decimals: 18,
	        },
	        infoURL: 'https://quarkblockchain.org/',
	        shortName: 'qki',
	        chainId: 20181205,
	        networkId: 20181205,
	    },
	    {
	        name: 'Auxilium Network Mainnet',
	        chain: 'AUX',
	        rpc: ['https://rpc.auxilium.global'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Auxilium coin',
	            symbol: 'AUX',
	            decimals: 18,
	        },
	        infoURL: 'https://auxilium.global',
	        shortName: 'auxi',
	        chainId: 28945486,
	        networkId: 28945486,
	        slip44: 344,
	    },
	    {
	        name: 'Joys Digital Mainnet',
	        chain: 'JOYS',
	        rpc: ['https://node.joys.digital'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'JOYS',
	            symbol: 'JOYS',
	            decimals: 18,
	        },
	        infoURL: 'https://joys.digital',
	        shortName: 'JOYS',
	        chainId: 35855456,
	        networkId: 35855456,
	    },
	    {
	        name: 'Aquachain',
	        chain: 'AQUA',
	        rpc: ['https://c.onical.org', 'https://tx.aquacha.in/api'],
	        faucets: ['https://aquacha.in/faucet'],
	        nativeCurrency: {
	            name: 'Aquachain Ether',
	            symbol: 'AQUA',
	            decimals: 18,
	        },
	        infoURL: 'https://aquachain.github.io',
	        shortName: 'aqua',
	        chainId: 61717561,
	        networkId: 61717561,
	        slip44: 61717561,
	    },
	    {
	        name: 'Joys Digital TestNet',
	        chain: 'TOYS',
	        rpc: ['https://toys.joys.cash/'],
	        faucets: ['https://faucet.joys.digital/'],
	        nativeCurrency: {
	            name: 'TOYS',
	            symbol: 'TOYS',
	            decimals: 18,
	        },
	        infoURL: 'https://joys.digital',
	        shortName: 'TOYS',
	        chainId: 99415706,
	        networkId: 99415706,
	    },
	    {
	        name: 'Gather Mainnet Network',
	        chain: 'GTH',
	        rpc: ['https://mainnet.gather.network'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Gather',
	            symbol: 'GTH',
	            decimals: 18,
	        },
	        infoURL: 'https://gather.network',
	        shortName: 'GTH',
	        chainId: 192837465,
	        networkId: 192837465,
	        explorers: [
	            {
	                name: 'Blockscout',
	                url: 'https://explorer.gather.network',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'Neon EVM DevNet',
	        chain: 'Solana',
	        rpc: ['https://devnet.neonevm.org'],
	        faucets: ['https://neonfaucet.org'],
	        icon: 'neon',
	        nativeCurrency: {
	            name: 'Neon',
	            symbol: 'NEON',
	            decimals: 18,
	        },
	        infoURL: 'https://neon-labs.org',
	        shortName: 'neonevm-devnet',
	        chainId: 245022926,
	        networkId: 245022926,
	        explorers: [
	            {
	                name: 'native',
	                url: 'https://devnet.explorer.neon-labs.org',
	                standard: 'EIP3091',
	            },
	            {
	                name: 'neonscan',
	                url: 'https://devnet.neonscan.org',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Neon EVM MainNet',
	        chain: 'Solana',
	        rpc: ['https://mainnet.neonevm.org'],
	        faucets: [],
	        icon: 'neon',
	        nativeCurrency: {
	            name: 'Neon',
	            symbol: 'NEON',
	            decimals: 18,
	        },
	        infoURL: 'https://neon-labs.org',
	        shortName: 'neonevm-mainnet',
	        chainId: 245022934,
	        networkId: 245022934,
	        explorers: [
	            {
	                name: 'native',
	                url: 'https://mainnet.explorer.neon-labs.org',
	                standard: 'EIP3091',
	            },
	            {
	                name: 'neonscan',
	                url: 'https://mainnet.neonscan.org',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Neon EVM TestNet',
	        chain: 'Solana',
	        rpc: ['https://testnet.neonevm.org'],
	        faucets: [],
	        icon: 'neon',
	        nativeCurrency: {
	            name: 'Neon',
	            symbol: 'NEON',
	            decimals: 18,
	        },
	        infoURL: 'https://neon-labs.org',
	        shortName: 'neonevm-testnet',
	        chainId: 245022940,
	        networkId: 245022940,
	        explorers: [
	            {
	                name: 'native',
	                url: 'https://testnet.explorer.neon-labs.org',
	                standard: 'EIP3091',
	            },
	            {
	                name: 'neonscan',
	                url: 'https://testnet.neonscan.org',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'OneLedger Mainnet',
	        chain: 'OLT',
	        icon: 'oneledger',
	        rpc: ['https://mainnet-rpc.oneledger.network'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'OLT',
	            symbol: 'OLT',
	            decimals: 18,
	        },
	        infoURL: 'https://oneledger.io',
	        shortName: 'oneledger',
	        chainId: 311752642,
	        networkId: 311752642,
	        explorers: [
	            {
	                name: 'OneLedger Block Explorer',
	                url: 'https://mainnet-explorer.oneledger.network',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Gather Testnet Network',
	        chain: 'GTH',
	        rpc: ['https://testnet.gather.network'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Gather',
	            symbol: 'GTH',
	            decimals: 18,
	        },
	        infoURL: 'https://gather.network',
	        shortName: 'tGTH',
	        chainId: 356256156,
	        networkId: 356256156,
	        explorers: [
	            {
	                name: 'Blockscout',
	                url: 'https://testnet-explorer.gather.network',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'Gather Devnet Network',
	        chain: 'GTH',
	        rpc: ['https://devnet.gather.network'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Gather',
	            symbol: 'GTH',
	            decimals: 18,
	        },
	        infoURL: 'https://gather.network',
	        shortName: 'dGTH',
	        chainId: 486217935,
	        networkId: 486217935,
	        explorers: [
	            {
	                name: 'Blockscout',
	                url: 'https://devnet-explorer.gather.network',
	                standard: 'none',
	            },
	        ],
	    },
	    {
	        name: 'IPOS Network',
	        chain: 'IPOS',
	        rpc: ['https://rpc.iposlab.com', 'https://rpc2.iposlab.com'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'IPOS Network Ether',
	            symbol: 'IPOS',
	            decimals: 18,
	        },
	        infoURL: 'https://iposlab.com',
	        shortName: 'ipos',
	        chainId: 1122334455,
	        networkId: 1122334455,
	    },
	    {
	        name: 'Aurora Mainnet',
	        chain: 'NEAR',
	        rpc: ['https://mainnet.aurora.dev'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Ether',
	            symbol: 'ETH',
	            decimals: 18,
	        },
	        infoURL: 'https://aurora.dev',
	        shortName: 'aurora',
	        chainId: 1313161554,
	        networkId: 1313161554,
	        explorers: [
	            {
	                name: 'aurorascan.dev',
	                url: 'https://aurorascan.dev',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Aurora Testnet',
	        chain: 'NEAR',
	        rpc: ['https://testnet.aurora.dev/'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Ether',
	            symbol: 'ETH',
	            decimals: 18,
	        },
	        infoURL: 'https://aurora.dev',
	        shortName: 'aurora-testnet',
	        chainId: 1313161555,
	        networkId: 1313161555,
	        explorers: [
	            {
	                name: 'aurorascan.dev',
	                url: 'https://testnet.aurorascan.dev',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Aurora Betanet',
	        chain: 'NEAR',
	        rpc: ['https://betanet.aurora.dev/'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Ether',
	            symbol: 'ETH',
	            decimals: 18,
	        },
	        infoURL: 'https://aurora.dev',
	        shortName: 'aurora-betanet',
	        chainId: 1313161556,
	        networkId: 1313161556,
	    },
	    {
	        name: 'Harmony Mainnet Shard 0',
	        chain: 'Harmony',
	        rpc: ['https://api.harmony.one', 'https://api.s0.t.hmny.io'],
	        faucets: ['https://free-online-app.com/faucet-for-eth-evm-chains/'],
	        nativeCurrency: {
	            name: 'ONE',
	            symbol: 'ONE',
	            decimals: 18,
	        },
	        infoURL: 'https://www.harmony.one/',
	        shortName: 'hmy-s0',
	        chainId: 1666600000,
	        networkId: 1666600000,
	        explorers: [
	            {
	                name: 'Harmony Block Explorer',
	                url: 'https://explorer.harmony.one',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Harmony Mainnet Shard 1',
	        chain: 'Harmony',
	        rpc: ['https://api.s1.t.hmny.io'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'ONE',
	            symbol: 'ONE',
	            decimals: 18,
	        },
	        infoURL: 'https://www.harmony.one/',
	        shortName: 'hmy-s1',
	        chainId: 1666600001,
	        networkId: 1666600001,
	    },
	    {
	        name: 'Harmony Mainnet Shard 2',
	        chain: 'Harmony',
	        rpc: ['https://api.s2.t.hmny.io'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'ONE',
	            symbol: 'ONE',
	            decimals: 18,
	        },
	        infoURL: 'https://www.harmony.one/',
	        shortName: 'hmy-s2',
	        chainId: 1666600002,
	        networkId: 1666600002,
	    },
	    {
	        name: 'Harmony Mainnet Shard 3',
	        chain: 'Harmony',
	        rpc: ['https://api.s3.t.hmny.io'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'ONE',
	            symbol: 'ONE',
	            decimals: 18,
	        },
	        infoURL: 'https://www.harmony.one/',
	        shortName: 'hmy-s3',
	        chainId: 1666600003,
	        networkId: 1666600003,
	    },
	    {
	        name: 'Harmony Testnet Shard 0',
	        chain: 'Harmony',
	        rpc: ['https://api.s0.b.hmny.io'],
	        faucets: ['https://faucet.pops.one'],
	        nativeCurrency: {
	            name: 'ONE',
	            symbol: 'ONE',
	            decimals: 18,
	        },
	        infoURL: 'https://www.harmony.one/',
	        shortName: 'hmy-b-s0',
	        chainId: 1666700000,
	        networkId: 1666700000,
	        explorers: [
	            {
	                name: 'Harmony Testnet Block Explorer',
	                url: 'https://explorer.pops.one',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Harmony Testnet Shard 1',
	        chain: 'Harmony',
	        rpc: ['https://api.s1.b.hmny.io'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'ONE',
	            symbol: 'ONE',
	            decimals: 18,
	        },
	        infoURL: 'https://www.harmony.one/',
	        shortName: 'hmy-b-s1',
	        chainId: 1666700001,
	        networkId: 1666700001,
	    },
	    {
	        name: 'Harmony Testnet Shard 2',
	        chain: 'Harmony',
	        rpc: ['https://api.s2.b.hmny.io'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'ONE',
	            symbol: 'ONE',
	            decimals: 18,
	        },
	        infoURL: 'https://www.harmony.one/',
	        shortName: 'hmy-b-s2',
	        chainId: 1666700002,
	        networkId: 1666700002,
	    },
	    {
	        name: 'Harmony Testnet Shard 3',
	        chain: 'Harmony',
	        rpc: ['https://api.s3.b.hmny.io'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'ONE',
	            symbol: 'ONE',
	            decimals: 18,
	        },
	        infoURL: 'https://www.harmony.one/',
	        shortName: 'hmy-b-s3',
	        chainId: 1666700003,
	        networkId: 1666700003,
	    },
	    {
	        name: 'DataHopper',
	        chain: 'HOP',
	        rpc: ['https://23.92.21.121:8545'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'DataHoppers',
	            symbol: 'HOP',
	            decimals: 18,
	        },
	        infoURL: 'https://www.DataHopper.com',
	        shortName: 'hop',
	        chainId: 2021121117,
	        networkId: 2021121117,
	    },
	    {
	        name: 'Pirl',
	        chain: 'PIRL',
	        rpc: ['https://wallrpc.pirl.io'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Pirl Ether',
	            symbol: 'PIRL',
	            decimals: 18,
	        },
	        infoURL: 'https://pirl.io',
	        shortName: 'pirl',
	        chainId: 3125659152,
	        networkId: 3125659152,
	        slip44: 164,
	    },
	    {
	        name: 'OneLedger Testnet Frankenstein',
	        chain: 'OLT',
	        icon: 'oneledger',
	        rpc: ['https://frankenstein-rpc.oneledger.network'],
	        faucets: ['https://frankenstein-faucet.oneledger.network'],
	        nativeCurrency: {
	            name: 'OLT',
	            symbol: 'OLT',
	            decimals: 18,
	        },
	        infoURL: 'https://oneledger.io',
	        shortName: 'frankenstein',
	        chainId: 4216137055,
	        networkId: 4216137055,
	        explorers: [
	            {
	                name: 'OneLedger Block Explorer',
	                url: 'https://frankenstein-explorer.oneledger.network',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Palm Testnet',
	        chain: 'Palm',
	        icon: 'palm',
	        rpc: ['https://palm-testnet.infura.io/v3/${INFURA_API_KEY}'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'PALM',
	            symbol: 'PALM',
	            decimals: 18,
	        },
	        infoURL: 'https://palm.io',
	        shortName: 'tpalm',
	        chainId: 11297108099,
	        networkId: 11297108099,
	        explorers: [
	            {
	                name: 'Palm Testnet Explorer',
	                url: 'https://explorer.palm-uat.xyz',
	                standard: 'EIP3091',
	                icon: 'palm',
	            },
	        ],
	    },
	    {
	        name: 'Palm',
	        chain: 'Palm',
	        icon: 'palm',
	        rpc: ['https://palm-mainnet.infura.io/v3/${INFURA_API_KEY}'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'PALM',
	            symbol: 'PALM',
	            decimals: 18,
	        },
	        infoURL: 'https://palm.io',
	        shortName: 'palm',
	        chainId: 11297108109,
	        networkId: 11297108109,
	        explorers: [
	            {
	                name: 'Palm Explorer',
	                url: 'https://explorer.palm.io',
	                standard: 'EIP3091',
	                icon: 'palm',
	            },
	        ],
	    },
	    {
	        name: 'Ntity Mainnet',
	        chain: 'Ntity',
	        rpc: ['https://rpc.ntity.io'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Ntity',
	            symbol: 'NTT',
	            decimals: 18,
	        },
	        infoURL: 'https://ntity.io',
	        shortName: 'ntt',
	        chainId: 197710212030,
	        networkId: 197710212030,
	        icon: 'ntity',
	        explorers: [
	            {
	                name: 'Ntity Blockscout',
	                url: 'https://blockscout.ntity.io',
	                icon: 'ntity',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Haradev Testnet',
	        chain: 'Ntity',
	        rpc: ['https://blockchain.haradev.com'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Ntity Haradev',
	            symbol: 'NTTH',
	            decimals: 18,
	        },
	        infoURL: 'https://ntity.io',
	        shortName: 'ntt-haradev',
	        chainId: 197710212031,
	        networkId: 197710212031,
	        icon: 'ntity',
	        explorers: [
	            {
	                name: 'Ntity Haradev Blockscout',
	                url: 'https://blockscout.haradev.com',
	                icon: 'ntity',
	                standard: 'EIP3091',
	            },
	        ],
	    },
	    {
	        name: 'Molereum Network',
	        chain: 'ETH',
	        rpc: ['https://molereum.jdubedition.com'],
	        faucets: [],
	        nativeCurrency: {
	            name: 'Molereum Ether',
	            symbol: 'MOLE',
	            decimals: 18,
	        },
	        infoURL: 'https://github.com/Jdubedition/molereum',
	        shortName: 'mole',
	        chainId: 6022140761023,
	        networkId: 6022140761023,
	    },
	    {
	        name: 'Godwoken Testnet (V1)',
	        chain: 'GWT',
	        rpc: ['https://godwoken-testnet-web3-v1-rpc.ckbapp.dev'],
	        faucets: ['https://homura.github.io/light-godwoken'],
	        nativeCurrency: {
	            name: 'CKB',
	            symbol: 'CKB',
	            decimals: 8,
	        },
	        infoURL: 'https://www.nervos.org',
	        shortName: 'gw-testnet-v1-deprecated',
	        chainId: 868455272153094,
	        networkId: 868455272153094,
	        status: 'deprecated',
	        explorers: [
	            {
	                name: 'GWScan Block Explorer',
	                url: 'https://v1.aggron.gwscan.com',
	                standard: 'none',
	            },
	        ],
	    },
	];

	var EvmChainParser$1 = {};

	Object.defineProperty(EvmChainParser$1, "__esModule", { value: true });
	EvmChainParser$1.EvmChainParser = void 0;
	var common_core_1$1m = lib$9;
	var INVALID_VALUES = ['0x', '0x0', '0', 0];
	var EvmChainParser = /** @class */ (function () {
	    function EvmChainParser() {
	    }
	    EvmChainParser.parse = function (chain) {
	        if (INVALID_VALUES.includes(chain)) {
	            throw new common_core_1$1m.CoreError({
	                code: common_core_1$1m.CoreErrorCode.INVALID_ARGUMENT,
	                message: "Invalid provided chain, value must be a positive number, or a hex-string starting with '0x'",
	            });
	        }
	        if (typeof chain === 'string') {
	            if (chain.startsWith('0x')) {
	                return chain;
	            }
	            try {
	                var parsed = parseInt(chain, 10);
	                if (Number.isNaN(parsed)) {
	                    throw new Error('Cannot parse the provided string value to a valid chain number');
	                }
	                return "0x".concat(parsed.toString(16));
	            }
	            catch (error) {
	                throw new common_core_1$1m.CoreError({
	                    code: common_core_1$1m.CoreErrorCode.INVALID_ARGUMENT,
	                    message: "Invalid provided chain, value must be a positive number, or a hex-string starting with '0x'",
	                });
	            }
	        }
	        if (chain <= 0) {
	            throw new common_core_1$1m.CoreError({
	                code: common_core_1$1m.CoreErrorCode.INVALID_ARGUMENT,
	                message: "Invalid provided chain, value must be a positive number, or a hex-string starting with '0x'",
	            });
	        }
	        return "0x".concat(chain.toString(16));
	    };
	    return EvmChainParser;
	}());
	EvmChainParser$1.EvmChainParser = EvmChainParser;

	Object.defineProperty(EvmChain$1, "__esModule", { value: true });
	EvmChain$1.EvmChain = void 0;
	var chaindata_1 = chaindata;
	var EvmChainParser_1 = EvmChainParser$1;
	var common_core_1$1l = lib$9;
	var CommonEvmUtilsConfig_1$2 = CommonEvmUtilsConfig;
	/**
	 * The EvmChain class is a MoralisData that references to a EVM chain
	 * @category DataType
	 */
	var EvmChain = /** @class */ (function () {
	    function EvmChain(value, config) {
	        var _this = this;
	        var _a;
	        this.config = config;
	        this._value = EvmChainParser_1.EvmChainParser.parse(value);
	        this._chainlistData = (_a = chaindata_1.chainList.find(function (chainData) { return chainData.chainId === _this.decimal; })) !== null && _a !== void 0 ? _a : null;
	    }
	    Object.defineProperty(EvmChain, "ETHEREUM", {
	        /**
	         * Returns ETHEREUM chain
	         *
	         * @example EvmChain.ETHEREUM
	         */
	        get: function () {
	            return EvmChain.create(1);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmChain, "GOERLI", {
	        /**
	         * Returns GOERLI chain
	         *
	         * @example EvmChain.GOERLI
	         */
	        get: function () {
	            return EvmChain.create(5);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmChain, "SEPOLIA", {
	        /**
	         * Returns SEPOLIA chain
	         *
	         * @example EvmChain.SEPOLIA
	         */
	        get: function () {
	            return EvmChain.create(11155111);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmChain, "POLYGON", {
	        /**
	         * Returns POLYGON chain
	         *
	         * @example EvmChain.POLYGON
	         */
	        get: function () {
	            return EvmChain.create(137);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmChain, "MUMBAI", {
	        /**
	         * Returns MUMBAI chain
	         *
	         * @example EvmChain.MUMBAI
	         */
	        get: function () {
	            return EvmChain.create(80001);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmChain, "BSC", {
	        /**
	         * Returns BSC chain
	         *
	         * @example EvmChain.BSC
	         */
	        get: function () {
	            return EvmChain.create(56);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmChain, "BSC_TESTNET", {
	        /**
	         * Returns BSC_TESTNET chain
	         *
	         * @example EvmChain.BSC_TESTNET
	         */
	        get: function () {
	            return EvmChain.create(97);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmChain, "AVALANCHE", {
	        /**
	         * Returns AVALANCHE chain
	         *
	         * @example EvmChain.AVALANCHE
	         */
	        get: function () {
	            return EvmChain.create(43114);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmChain, "FUJI", {
	        /**
	         * Returns FUJI chain
	         *
	         * @example EvmChain.FUJI
	         */
	        get: function () {
	            return EvmChain.create(43113);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmChain, "FANTOM", {
	        /**
	         * Returns FANTOM chain
	         *
	         * @example EvmChain.FANTOM
	         */
	        get: function () {
	            return EvmChain.create(250);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmChain, "CRONOS", {
	        /**
	         * Returns CRONOS chain
	         *
	         * @example EvmChain.CRONOS
	         */
	        get: function () {
	            return EvmChain.create(25);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmChain, "CRONOS_TESTNET", {
	        /**
	         * Returns CRONOS_TESTNET chain
	         *
	         * @example EvmChain.CRONOS_TESTNET
	         */
	        get: function () {
	            return EvmChain.create(338);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmChain, "PALM", {
	        /**
	         * Returns PALM chain
	         *
	         * @example EvmChain.PALM
	         */
	        get: function () {
	            return EvmChain.create(11297108109);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmChain, "ARBITRUM", {
	        /**
	         * Returns ARBITRUM chain
	         *
	         * @example EvmChain.ARBITRUM
	         */
	        get: function () {
	            return EvmChain.create(42161);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    /**
	     * Create a new instance of EvmChain from any valid address input.
	     *
	     * @example
	     * ```ts
	     * const chain = EvmChain.create(1)
	     * const chain = EvmChain.create("0x3")
	     * ```
	     */
	    EvmChain.create = function (chain, core) {
	        if (chain instanceof EvmChain) {
	            return chain;
	        }
	        var c = core || common_core_1$1l.CoreProvider.getDefault();
	        return new EvmChain(chain, c.config);
	    };
	    // Getter to return _chainlistData and throws an error if it is not defined
	    EvmChain.prototype._getChainlistData = function () {
	        if (!this._chainlistData) {
	            return null;
	        }
	        return this._chainlistData;
	    };
	    /**
	     * Compares if 2 chains are equal, based on the chainId
	     *
	     * @param chainA - The first chain to compare
	     * @param chainB - The second chain to compare
	     *
	     * @returns true if the chains are equal, false otherwise
	     * @example
	     * ```ts
	     * EvmChain.equals("1", "0x1")
	     * ```
	     */
	    EvmChain.equals = function (chainA, chainB) {
	        return EvmChain.create(chainA)._value === EvmChain.create(chainB)._value;
	    };
	    /**
	     * Compares if the current chain is equal to the provided chain, based on the chainId
	     * @param chain - The chain to compare to
	     * @returns true if the chains are equal, false otherwise
	     * @example
	     * ```ts
	     * chain.equals(EvmChain.ETHEREUM)
	     * ```
	     */
	    EvmChain.prototype.equals = function (chain) {
	        return EvmChain.equals(this, chain);
	    };
	    /**
	     * Formats the chain to the given output; in decimal value or as hex-string.
	     * The default formatting can be set in MoralisConfig
	     * @param _formatStyle - The output format to use
	     * @example chain.format() // 1
	     * @example chain.format('hex') // "0x1"
	     * @example chain.format('decimal') // 1
	     *
	     * @returns The formatted chain
	     */
	    EvmChain.prototype.format = function (_formatStyle) {
	        var formatStyle = _formatStyle !== null && _formatStyle !== void 0 ? _formatStyle : this.config.get(CommonEvmUtilsConfig_1$2.CommonEvmUtilsConfig.formatEvmChainId);
	        if (formatStyle === 'decimal') {
	            return this.decimal;
	        }
	        if (formatStyle === 'hex') {
	            return this.hex;
	        }
	        return (0, common_core_1$1l.assertUnreachable)(formatStyle);
	    };
	    /**
	     * Displays the chain hex-string representation of the chain and also the chain name if not null
	     *
	     * @example chain.display() // "Ethereum (0x1)" | "0x1"
	     */
	    EvmChain.prototype.display = function () {
	        return this.name ? "".concat(this.name, " (").concat(this.hex, ")") : this.hex;
	    };
	    /**
	     * This function returns the explorer url of a block, transaction, account or token.
	     *
	     * @param value - An object containing the `block`, `transaction`, `account` or `erc20` to get the explorer url for.
	     *
	     * @example chain.getExplorerUrl({ block: 'block_here' }) // "https://etherscan.io/block/block_here"
	     * @example chain.getExplorerUrl({ transaction: 'some_transaction' }) // "https://etherscan.io/tx/some_transaction"
	     * @example chain.getExplorerUrl({ account: 'accoun_here' }) // "https://etherscan.io/address/accoun_here"
	     * @example chain.getExplorerUrl({ erc20: 'token_here' }) // "https://etherscan.io/token/token_here"
	     */
	    EvmChain.prototype.getExplorerPath = function (value) {
	        var explorer = this.explorer;
	        if (!explorer || explorer.standard !== 'EIP3091') {
	            return null;
	        }
	        var url = explorer.url;
	        // See https://eips.ethereum.org/EIPS/eip-3091 for paths
	        if ('block' in value) {
	            return "".concat(url, "/block/").concat(value.block);
	        }
	        if ('transaction' in value) {
	            return "".concat(url, "/tx/").concat(value.transaction);
	        }
	        if ('account' in value) {
	            return "".concat(url, "/address/").concat(value.account);
	        }
	        if ('erc20' in value) {
	            return "".concat(url, "/token/").concat(value.erc20);
	        }
	        return null;
	    };
	    Object.defineProperty(EvmChain.prototype, "decimal", {
	        /**
	         * Returns the decimal representation of the chain
	         * @example chain.decimal // 1
	         */
	        get: function () {
	            return parseInt(this._value, 16);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmChain.prototype, "hex", {
	        /**
	         * Returns the hex-string representation of the chain
	         * @example chain.hex // "0x1"
	         */
	        get: function () {
	            return this._value;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmChain.prototype, "apiHex", {
	        /**
	         * Validate and cast to api compatible hex
	         *
	         * @example chain.apiHex // "0x1"
	         */
	        get: function () {
	            return this._value;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmChain.prototype, "name", {
	        /**
	         * Returns the name of the chain
	         * @example chain.name // "Ethereum"
	         */
	        get: function () {
	            var _a;
	            return (_a = this._getChainlistData()) === null || _a === void 0 ? void 0 : _a.name;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmChain.prototype, "currency", {
	        /**
	         * Returns the currency of the chain
	         * @returns The cuurrency of the chain or undefined if not found
	         *
	         * @example chain.currency // EvmNativeCurrency
	         */
	        get: function () {
	            var _a;
	            return (_a = this._getChainlistData()) === null || _a === void 0 ? void 0 : _a.nativeCurrency;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmChain.prototype, "rpcUrls", {
	        /**
	         * Returns the rpc Urls of the chain
	         *
	         * @example chain.rpcUrls // ["https://mainnet.infura.io/v3/<infura-key>"]
	         */
	        get: function () {
	            var _a;
	            return (_a = this._getChainlistData()) === null || _a === void 0 ? void 0 : _a.rpc;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmChain.prototype, "explorer", {
	        /**
	         * Returns the explorer Urls of the chain
	         *
	         * @example chain.explorerUrls // ["https://etherscan.io/"]
	         */
	        get: function () {
	            var _a;
	            var explorers = (_a = this._getChainlistData()) === null || _a === void 0 ? void 0 : _a.explorers;
	            if (!explorers || explorers.length === 0) {
	                return null;
	            }
	            return explorers[0];
	        },
	        enumerable: false,
	        configurable: true
	    });
	    return EvmChain;
	}());
	EvmChain$1.EvmChain = EvmChain;

	var EvmChainish = {};

	Object.defineProperty(EvmChainish, "__esModule", { value: true });

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(EvmChain$1, exports);
		__exportStar(EvmChainish, exports);
		__exportStar(EvmChainParser$1, exports);
		
	} (EvmChain$2));

	var __assign$P = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$P = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$P.apply(this, arguments);
	};
	Object.defineProperty(Erc20, "__esModule", { value: true });
	Erc20.Erc20Token = void 0;
	var common_core_1$1k = lib$9;
	var EvmAddress_1$a = EvmAddress$2;
	var EvmChain_1$b = EvmChain$2;
	/**
	 * The Erc20Token class is a MoralisData that references to a Erc20 Token
	 * It holds data about the data and metadata of an Erc20 token
	 *
	 * @category DataType
	 */
	var Erc20Token = /** @class */ (function () {
	    function Erc20Token(value, core) {
	        this._value = Erc20Token.parse(value, core);
	    }
	    /**
	     *  Create a new instance of Erc20Token from any valid Erc20Token input
	     *
	     * @param value - the Erc20Tokenish type
	     * @param core - The MoralisCore instance
	     * @example
	     * ```ts
	     * const token = Erc20Token.create(value);
	     * ```
	     */
	    Erc20Token.create = function (value, core) {
	        if (value instanceof Erc20Token) {
	            return value;
	        }
	        var finalCore = core !== null && core !== void 0 ? core : common_core_1$1k.CoreProvider.getDefault();
	        return new Erc20Token(value, finalCore);
	    };
	    /**
	     * Compares two Erc20Token instances. This checks if the chain and contractAddress of both tokens are equal.
	     *
	     * @param valueA - the first Erc20Token to compare
	     * @param valueB - the second Erc20Token to compare
	     * @returns true if the two Erc20Tokens are equal
	     * @example
	     * ```ts
	     * Erc20Token.equals(valueA, valueB);
	     * ```
	     */
	    Erc20Token.equals = function (valueA, valueB) {
	        var erc20A = Erc20Token.create(valueA);
	        var erc20B = Erc20Token.create(valueB);
	        if (!erc20A._value.chain.equals(erc20B._value.chain)) {
	            return false;
	        }
	        if (!erc20A._value.contractAddress.equals(erc20B._value.contractAddress)) {
	            return false;
	        }
	        return true;
	    };
	    /**
	     * Compares Erc20Token instance to current instance
	     *
	     * @param value - the Erc20Tokenish to compare
	     * @returns true if the Erc20Token is equals given token
	     * @example
	     * ```ts
	     * token.equals(value);
	     * ```
	     */
	    Erc20Token.prototype.equals = function (value) {
	        return Erc20Token.equals(this, value);
	    };
	    /**
	     * Returns the token as JSON
	     *
	     * @returns the Erc20Token as a JSON object
	     * @example
	     * ```ts
	     * token.toJSON();
	     * ```
	     */
	    Erc20Token.prototype.toJSON = function () {
	        var value = this._value;
	        return __assign$P(__assign$P({}, value), { contractAddress: value.contractAddress.format(), chain: value.chain.format() });
	    };
	    /**
	     * Returns the token as JSON
	     *
	     * @returns the Erc20Token as a JSON object
	     * @example
	     * ```ts
	     * token.format();
	     * ```
	     */
	    Erc20Token.prototype.format = function () {
	        return this.toJSON();
	    };
	    Object.defineProperty(Erc20Token.prototype, "result", {
	        /**
	         * Returns the processed Erc20Token.
	         *
	         * @returns the Erc20Token value
	         * @example
	         * ```ts
	         * token.result;
	         *  ```
	         */
	        get: function () {
	            return this._value;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Erc20Token.prototype, "decimals", {
	        /**
	         * @returns the decimals of the token.
	         *
	         * @example
	         * ```ts
	         * token.decimals;
	         * ```
	         */
	        get: function () {
	            return this._value.decimals;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Erc20Token.prototype, "name", {
	        /**
	         * @returns The name of the token.
	         *
	         * @example
	         * ```ts
	         * token.name;
	         * ```
	         */
	        get: function () {
	            return this._value.name;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Erc20Token.prototype, "symbol", {
	        /**
	         * @returns The symbol of the token.
	         *
	         * @example
	         * ```ts
	         * token.symbol;
	         * ```
	         */
	        get: function () {
	            return this._value.symbol;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Erc20Token.prototype, "contractAddress", {
	        /**
	         * @returns The contract address of the token.
	         *
	         * @example
	         * ```ts
	         * token.contractAddress;
	         * ```
	         */
	        get: function () {
	            return this._value.contractAddress;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Erc20Token.prototype, "chain", {
	        /**
	         * @returns The chain of the token.
	         *
	         * @example
	         * ```ts
	         * token.chain;
	         * ```
	         */
	        get: function () {
	            return this._value.chain;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Erc20Token.prototype, "logo", {
	        /**
	         * @returns The logo of the token.
	         *
	         * @example
	         * ```ts
	         * token.logo;
	         * ```
	         */
	        get: function () {
	            return this._value.logo;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Erc20Token.prototype, "logoHash", {
	        /**
	         * @returns The logo hash of the token.
	         *
	         * @example
	         * ```ts
	         * token.logoHash;
	         * ```
	         */
	        get: function () {
	            return this._value.logoHash;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Erc20Token.prototype, "thumbnail", {
	        /**
	         * @returns The thumbnail of the token.
	         *
	         * @example
	         * ```ts
	         * token.thumbnail;
	         * ```
	         */
	        get: function () {
	            return this._value.thumbnail;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Erc20Token.parse = function (value, core) { return ({
	        decimals: +value.decimals,
	        name: value.name,
	        symbol: value.symbol,
	        contractAddress: EvmAddress_1$a.EvmAddress.create(value.contractAddress, core),
	        logo: (0, common_core_1$1k.maybe)(value.logo),
	        logoHash: (0, common_core_1$1k.maybe)(value.logoHash),
	        thumbnail: (0, common_core_1$1k.maybe)(value.thumbnail),
	        chain: EvmChain_1$b.EvmChain.create(value.chain, core),
	    }); };
	    return Erc20Token;
	}());
	Erc20.Erc20Token = Erc20Token;

	var types$s = {};

	Object.defineProperty(types$s, "__esModule", { value: true });

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(Erc20, exports);
		__exportStar(types$s, exports);
		
	} (Erc20$1));

	var Erc20Transfer$2 = {};

	var Erc20Transfer$1 = {};

	var __assign$O = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$O = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$O.apply(this, arguments);
	};
	Object.defineProperty(Erc20Transfer$1, "__esModule", { value: true });
	Erc20Transfer$1.Erc20Transfer = void 0;
	var common_core_1$1j = lib$9;
	var EvmAddress_1$9 = EvmAddress$2;
	var EvmChain_1$a = EvmChain$2;
	/**
	 * The Erc20Transfer is a representation of an Erc20 token transfer.
	 *
	 * @category DataType
	 */
	var Erc20Transfer = /** @class */ (function () {
	    function Erc20Transfer(data) {
	        this._data = Erc20Transfer.parse(data);
	    }
	    /**
	     * Create a new instance of Erc20Transfer from any valid input
	     * @param data - the Erc20Transferish type
	     * @example
	     * ```
	     * const transfer = Erc20Transfer.create(data);
	     *```
	     */
	    Erc20Transfer.create = function (data) {
	        if (data instanceof Erc20Transfer) {
	            return data;
	        }
	        return new Erc20Transfer(data);
	    };
	    /**
	     * Check the equality between two Erc20 transfers
	     * @param dataA - The first transfer to compare
	     * @param dataB - The second transfer to compare
	     * @example Erc20Transfer.equals(dataA, dataB)
	     * @returns true if the transfers are equal, false otherwise
	     */
	    Erc20Transfer.equals = function (dataA, dataB) {
	        var tokenA = Erc20Transfer.create(dataA);
	        var tokenB = Erc20Transfer.create(dataB);
	        return JSON.stringify(tokenA.toJSON()) === JSON.stringify(tokenB.toJSON());
	    };
	    /**
	     * Checks the equality of the current trnasfer with another erc20 trnasfer
	     * @param data - the transfer to compare with
	     * @example transfer.equals(data)
	     * @returns true if the transfers are equal, false otherwise
	     */
	    Erc20Transfer.prototype.equals = function (data) {
	        return Erc20Transfer.equals(this, data);
	    };
	    /**
	     * @returns a JSON represention of the transfer.
	     * @example transfer.toJSON()
	     */
	    Erc20Transfer.prototype.toJSON = function () {
	        var data = this._data;
	        return __assign$O(__assign$O({}, data), { chain: data.chain.format(), address: data.address.format(), blockNumber: data.blockNumber.toString(), toAddress: data.toAddress.format(), fromAddress: data.fromAddress.format(), value: data.value.toString() });
	    };
	    /**
	     * @returns a JSON represention of the transfer.
	     * @example transfer.format()
	     */
	    Erc20Transfer.prototype.format = function () {
	        return this.toJSON();
	    };
	    Object.defineProperty(Erc20Transfer.prototype, "result", {
	        /**
	         * @returns all the data without casting it to JSON.
	         * @example transfer.result
	         */
	        get: function () {
	            return this._data;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Erc20Transfer.prototype, "address", {
	        /**
	         * @returns the address of the tranfer
	         * @example transfer.address // EvmAddress
	         */
	        get: function () {
	            return this._data.address;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Erc20Transfer.prototype, "blockHash", {
	        /**
	         * @returns the block hash of the tranfer
	         * @example transfer.blockHash // "0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86"
	         */
	        get: function () {
	            return this._data.blockHash;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Erc20Transfer.prototype, "blockNumber", {
	        /**
	         * @returns the block number of the tranfer
	         * @example transfer.blockNumber // BigNumber
	         */
	        get: function () {
	            return this._data.blockNumber;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Erc20Transfer.prototype, "blockTimestamp", {
	        /**
	         * @returns the block timestamp of the tranfer
	         * @example transfer.blockTimestamp // Date
	         */
	        get: function () {
	            return this._data.blockTimestamp;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Erc20Transfer.prototype, "chain", {
	        /**
	         * @returns the chain of the tranfer
	         * @example transfer.chain // EvmChain
	         */
	        get: function () {
	            return this._data.chain;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Erc20Transfer.prototype, "fromAddress", {
	        /**
	         * @returns the from address of the tranfer
	         * @example transfer.fromAddress // EvmAddress
	         */
	        get: function () {
	            return this._data.fromAddress;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Erc20Transfer.prototype, "toAddress", {
	        /**
	         * @returns the to address of the tranfer
	         * @example transfer.toAddress // EvmAddress
	         */
	        get: function () {
	            return this._data.toAddress;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Erc20Transfer.prototype, "transactionHash", {
	        /**
	         * @returns the transaction hash of the tranfer
	         * @example transfer.transactionHash // "0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86"
	         */
	        get: function () {
	            return this._data.transactionHash;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Erc20Transfer.prototype, "value", {
	        /**
	         * @returns the value of the tranfer
	         * @example transfer.value // BigNumber
	         */
	        get: function () {
	            return this._data.value;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Erc20Transfer.prototype, "transactionIndex", {
	        /**
	         * @returns the transactionIndex of the tranfer
	         * @example transfer.transactionIndex // 3
	         */
	        get: function () {
	            return this._data.transactionIndex;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Erc20Transfer.prototype, "logIndex", {
	        /**
	         * @returns the logIndex of the tranfer
	         * @example transfer.logIndex // 2
	         */
	        get: function () {
	            return this._data.logIndex;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Erc20Transfer.parse = function (data) { return (__assign$O(__assign$O({}, data), { chain: EvmChain_1$a.EvmChain.create(data.chain), address: EvmAddress_1$9.EvmAddress.create(data.address), blockTimestamp: (0, common_core_1$1j.dateInputToDate)(data.blockTimestamp), blockNumber: common_core_1$1j.BigNumber.create(data.blockNumber), toAddress: EvmAddress_1$9.EvmAddress.create(data.toAddress), fromAddress: EvmAddress_1$9.EvmAddress.create(data.fromAddress), value: common_core_1$1j.BigNumber.create(data.value) })); };
	    return Erc20Transfer;
	}());
	Erc20Transfer$1.Erc20Transfer = Erc20Transfer;

	var types$r = {};

	Object.defineProperty(types$r, "__esModule", { value: true });

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(Erc20Transfer$1, exports);
		__exportStar(types$r, exports);
		
	} (Erc20Transfer$2));

	var Erc20Value$2 = {};

	var Erc20Value$1 = {};

	Object.defineProperty(Erc20Value$1, "__esModule", { value: true });
	Erc20Value$1.Erc20Value = void 0;
	var common_core_1$1i = lib$9;
	var Erc20_1 = Erc20;
	var EVM_ERC20_DEFAULT_DECIMALS = 18;
	/**
	 * The Erc20Value class is a MoralisData that references to a the value of an Erc20Token
	 * It holds data about the data about the amount of tokens and the number of decimals.
	 *
	 * @category DataType
	 */
	var Erc20Value = /** @class */ (function () {
	    function Erc20Value(amount, options, core) {
	        var _this = this;
	        var _a, _b, _c;
	        /**
	         * Displays the token in text format
	         * @returns the value and also the token symbol if available
	         * @example value.display();
	         */
	        this.display = function () {
	            if (!_this._token) {
	                return "".concat(_this.value);
	            }
	            return "".concat(_this.value, " ").concat(_this._token.symbol);
	        };
	        this._value = Erc20Value.parse({
	            amount: amount,
	            decimals: (_c = (_a = options === null || options === void 0 ? void 0 : options.decimals) !== null && _a !== void 0 ? _a : (_b = options === null || options === void 0 ? void 0 : options.token) === null || _b === void 0 ? void 0 : _b.decimals) !== null && _c !== void 0 ? _c : EVM_ERC20_DEFAULT_DECIMALS,
	            token: options === null || options === void 0 ? void 0 : options.token,
	        });
	        if (options === null || options === void 0 ? void 0 : options.token) {
	            this._token = Erc20_1.Erc20Token.create(options.token, core);
	        }
	    }
	    /**
	     * Create a new instance of Erc20Value from any valid input
	     * @param value - The value to create
	     * @param options - The options for the token
	     * @param core - The MoralisCore instance
	     * @example Erc20Value.create(1000, { decimals: 3 });
	     * @returns The created value
	     * @throws CoreError if the value is invalid
	     */
	    Erc20Value.create = function (value, options, core) {
	        if (value instanceof Erc20Value) {
	            return value;
	        }
	        return new Erc20Value(value, options, core);
	    };
	    /**
	     * Compares two Erc20Valueish instances.
	     * @param valueA - The first value to compare
	     * @param valueB - The second value to compare
	     * @returns True if the values are equal
	     * @example
	     * ```ts
	     * const valueA = Erc20Value.create(1000, { decimals: 3 });
	     * const valueB = Erc20Value.create(10000, { decimals: 4 });
	     * Erc20Value.equals(valueA, valueB); // true
	     * ```
	     */
	    Erc20Value.equals = function (valueA, valueB) {
	        var erc20ValueA = Erc20Value.create(valueA);
	        var erc20ValueB = Erc20Value.create(valueB);
	        return erc20ValueA.value === erc20ValueB.value;
	    };
	    /**
	     * Compares Erc20Value with current instance.
	     * @param value - The value to compare
	     * @returns True if the values are equal
	     * @example value.equals(valueA);
	     */
	    Erc20Value.prototype.equals = function (value) {
	        return Erc20Value.equals(this, value);
	    };
	    /**
	     * Convert the value to a number
	     * @returns the value in number format
	     * @example value.toNumber();
	     */
	    Erc20Value.prototype.toNumber = function () {
	        return +this.value;
	    };
	    /**
	     * Convert the value to a string
	     * @returns the value in string format
	     * @example value.toString();
	     */
	    Erc20Value.prototype.toString = function () {
	        return this.value;
	    };
	    /**
	     * Convert the value to a string
	     * @returns the value in string format
	     * @example value.format();
	     */
	    Erc20Value.prototype.format = function () {
	        return this.toString();
	    };
	    /**
	     * Displays the token in JSON format
	     * @returns the value and also the token if available
	     * @example value.toJSON();
	     */
	    Erc20Value.prototype.toJSON = function () {
	        if (this.token) {
	            return { value: this.value, token: this.token.toJSON() };
	        }
	        return { value: this.value };
	    };
	    Object.defineProperty(Erc20Value.prototype, "decimals", {
	        /**
	         * @returns the token decimals
	         * @example value.decimals; // 15
	         */
	        get: function () {
	            return this._value.decimals;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Erc20Value.prototype, "amount", {
	        /**
	         * @returns the token amount
	         * @example value.amount; // BigNumber
	         */
	        get: function () {
	            return this._value.amount;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Erc20Value.prototype, "value", {
	        /**
	         * @returns the token value
	         * @example value.value; // "1000"
	         */
	        get: function () {
	            return this._value.amount.toDecimal(this.decimals);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Erc20Value.prototype, "token", {
	        /**
	         * @returns the token
	         * @example value.token; // Erc20Token
	         */
	        get: function () {
	            var _a;
	            return (_a = this._token) !== null && _a !== void 0 ? _a : null;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Erc20Value.parse = function (_a) {
	        var amount = _a.amount, decimals = _a.decimals, token = _a.token;
	        if (token && token.decimals && +token.decimals !== +decimals) {
	            throw new common_core_1$1i.CoreError({
	                code: common_core_1$1i.CoreErrorCode.INVALID_DATA,
	                message: 'Decimals do not match',
	            });
	        }
	        return {
	            amount: common_core_1$1i.BigNumber.create(amount),
	            decimals: +decimals,
	        };
	    };
	    return Erc20Value;
	}());
	Erc20Value$1.Erc20Value = Erc20Value;

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(Erc20Value$1, exports);
		
	} (Erc20Value$2));

	var EvmBlock$2 = {};

	var EvmBlock$1 = {};

	var EvmTransaction$2 = {};

	var types$q = {};

	Object.defineProperty(types$q, "__esModule", { value: true });

	var EvmTransaction$1 = {};

	var EvmNative$2 = {};

	var EvmNative$1 = {};

	Object.defineProperty(EvmNative$1, "__esModule", { value: true });
	EvmNative$1.EvmNative = void 0;
	var common_core_1$1h = lib$9;
	var unitToDecimals$1 = {
	    ether: 18,
	    finney: 15,
	    szabo: 12,
	    gwei: 9,
	    mwei: 6,
	    kwei: 3,
	    wei: 0,
	};
	/**
	 * The EvmNative class is a MoralisData that references to the value of an EVM native currency (like ETH, BNB etc.)
	 *
	 * @category DataType
	 */
	var EvmNative = /** @class */ (function () {
	    function EvmNative(native, unit) {
	        if (unit === void 0) { unit = 'ether'; }
	        this.rawValue = EvmNative.parse(native, unit);
	    }
	    Object.defineProperty(EvmNative, "ONE_ETH", {
	        /**
	         * Returns value of one ether.
	         *
	         * @example EvmNative.ONE_ETH
	         */
	        get: function () {
	            return EvmNative.create(1, 'ether');
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNative, "ONE_GWEI", {
	        /**
	         * Returns value of one gwei.
	         *
	         * @example EvmNative.ONE_GWEI
	         */
	        get: function () {
	            return EvmNative.create(1, 'gwei');
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNative, "ONE_WEI", {
	        /**
	         * Returns value of one wei.
	         *
	         * @example EvmNative.ONE_WEI
	         */
	        get: function () {
	            return EvmNative.create(1, 'wei');
	        },
	        enumerable: false,
	        configurable: true
	    });
	    /**
	     * Create a new instance of EvmNative from any valid {@link EvmNativeish} value.
	     * @param native - the value to create the EvmNative from
	     * @param unit - the unit of the value (optional), defaults to `ether`
	     * @returns a new instance of EvmNative
	     * @example
	     * ```ts
	     * const native = EvmNative.create(2, 'gwei');
	     * const native = EvmNative.create(2);
	     * const native = EvmNative.create(2, 'wei');
	     *```
	     */
	    EvmNative.create = function (native, unit) {
	        if (native instanceof EvmNative) {
	            return native;
	        }
	        return new EvmNative(native, unit);
	    };
	    EvmNative.parse = function (native, unit) {
	        var decimals;
	        if (typeof unit === 'number') {
	            decimals = unit;
	        }
	        else {
	            if (unitToDecimals$1[unit] == null) {
	                throw new common_core_1$1h.CoreError({
	                    code: common_core_1$1h.CoreErrorCode.INVALID_ARGUMENT,
	                    message: 'Unit should be a decimal number or valid EvmNativeUnit string',
	                });
	            }
	            decimals = unitToDecimals$1[unit];
	        }
	        return common_core_1$1h.BigNumber.fromDecimal(native.toString(), decimals);
	    };
	    /**
	     * Compares two EvmNative values.
	     * @param valueA - the first value to compare
	     * @param valueB - the second value to compare
	     * @returns true if the values are equal
	     * @example
	     * ```ts
	     * EvmNative.equals(EvmNative.create(1, 'ether'), EvmNative.create(1, 'ether')); // true
	     * ```
	     */
	    EvmNative.equals = function (valueA, valueB) {
	        var evmNativeA = EvmNative.create(valueA);
	        var evmNativeB = EvmNative.create(valueB);
	        return evmNativeA.rawValue.equals(evmNativeB.rawValue);
	    };
	    /**
	     * Compares EvmNative with current instance.
	     * @param value - the value to compare with
	     * @returns true if the values are equal
	     * @example
	     * ```ts
	     * const native = EvmNative.create(1, 'gwei');
	     * native.equals(EvmNative.create(1, 'ether')); // false
	     * ```
	     */
	    EvmNative.prototype.equals = function (value) {
	        return EvmNative.equals(this, value);
	    };
	    /**
	     * Converts the EvmNative to a string.
	     * @returns the value of the EvmNative as a string
	     * @example `native.toString()`
	     */
	    EvmNative.prototype.toString = function () {
	        return this.wei;
	    };
	    /**
	     * Converts the EvmNative to a string.
	     * @returns the value of the EvmNative as a string
	     * @example `native.format()`
	     */
	    EvmNative.prototype.format = function () {
	        return this.toString();
	    };
	    Object.defineProperty(EvmNative.prototype, "value", {
	        /**
	         * @returns the value of the EvmNative as a BigNumber
	         * @example `native.value`
	         */
	        get: function () {
	            return this.rawValue;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNative.prototype, "wei", {
	        /**
	         * Converts the EvmNative to a string representation of the value in wei.
	         * @returns the value of the EvmNative as a string
	         * @example `native.wei`
	         */
	        get: function () {
	            return this.value.toString();
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNative.prototype, "gwei", {
	        /**
	         * Converts the EvmNative to a string representation of the value in gwei.
	         * @returns the value of the EvmNative as a string
	         * @example `native.gwei`
	         */
	        get: function () {
	            return this.rawValue.toDecimal(unitToDecimals$1['gwei']);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNative.prototype, "ether", {
	        /**
	         * Converts the EvmNative to a string representation of the value in ether.
	         * @returns the value of the EvmNative as a string
	         * @example `native.ether`
	         */
	        get: function () {
	            return this.rawValue.toDecimal(unitToDecimals$1['ether']);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    return EvmNative;
	}());
	EvmNative$1.EvmNative = EvmNative;

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(EvmNative$1, exports);
		
	} (EvmNative$2));

	var EvmTransactionLog$2 = {};

	var EvmTransactionLog$1 = {};

	var __assign$N = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$N = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$N.apply(this, arguments);
	};
	Object.defineProperty(EvmTransactionLog$1, "__esModule", { value: true });
	EvmTransactionLog$1.EvmTransactionLog = void 0;
	var common_core_1$1g = lib$9;
	var EvmAddress_1$8 = EvmAddress$2;
	var EvmChain_1$9 = EvmChain$2;
	/**
	 * The EvmTransactionLog class is a MoralisData that references an EVM transaction log.
	 *
	 * @category DataType
	 */
	var EvmTransactionLog = /** @class */ (function () {
	    function EvmTransactionLog(value, core) {
	        this._value = EvmTransactionLog.parse(value, core);
	    }
	    /**
	     * Create a new instance of EvmTransactionLog from any valid address input
	     *
	     * @example
	     * ```
	     * const log = EvmTransactionLog.create(value, core);
	     * ```
	     * @param value - A valid EvmTransactionLogish
	     * @param core - The Core instance
	     */
	    EvmTransactionLog.create = function (value, core) {
	        if (value instanceof EvmTransactionLog) {
	            return value;
	        }
	        var finalCore = core !== null && core !== void 0 ? core : common_core_1$1g.CoreProvider.getDefault();
	        return new EvmTransactionLog(value, finalCore);
	    };
	    EvmTransactionLog.parse = function (value, core) {
	        return {
	            chain: EvmChain_1$9.EvmChain.create(value.chain, core),
	            logIndex: (0, common_core_1$1g.maybe)(value.logIndex, function (index) { return +index; }),
	            transactionHash: value.transactionHash,
	            transactionIndex: (0, common_core_1$1g.maybe)(value.transactionIndex),
	            data: value.data,
	            topics: value.topics,
	            blockHash: value.blockHash,
	            blockNumber: value.blockNumber,
	            blockTimestamp: value.blockTimestamp,
	            address: EvmAddress_1$8.EvmAddress.create(value.address, core),
	        };
	    };
	    /**
	     * Compares the log to another log for equality.
	     *
	     * @param value - The value to compare with
	     * @returns true if the logs are equal, otherwise false
	     * @example
	     * ```ts
	     * log.equals(log);
	     * ```
	     */
	    EvmTransactionLog.prototype.equals = function (value) {
	        return (value._value.transactionHash === this._value.transactionHash &&
	            value._value.address.equals(this._value.address) &&
	            value._value.logIndex === this._value.logIndex &&
	            value._value.chain.equals(this._value.chain));
	    };
	    /**
	     * Converts the log to a JSON object.
	     *
	     * @returns the EvmTransactionLog as a JSON object
	     * @example
	     * ```ts
	     * log.toJSON();
	     * ```
	     */
	    EvmTransactionLog.prototype.toJSON = function () {
	        var value = this._value;
	        return __assign$N(__assign$N({}, value), { address: value.address.format(), chain: value.chain.format() });
	    };
	    /**
	     * Converts the log to a JSON object.
	     *
	     * @returns the EvmTransactionLog as a JSON object
	     * @example
	     * ```ts
	     * log.format();
	     * ```
	     */
	    EvmTransactionLog.prototype.format = function () {
	        return this.toJSON();
	    };
	    Object.defineProperty(EvmTransactionLog.prototype, "result", {
	        /**
	         * Returns the processed Erc20Token.
	         *
	         * @returns the EvmTransactionLog value
	         * @example
	         * ```ts
	         * log.result;
	         *  ```
	         */
	        get: function () {
	            return this._value;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmTransactionLog.prototype, "transactionHash", {
	        /**
	         * @returns the transaction hash of the log.
	         *
	         * @example
	         * ```ts
	         * log.transactionHash; // "0xdd9006489e46670e0e85d1fb88823099e7f596b08aeaac023e9da0851f26fdd5"
	         * ```
	         */
	        get: function () {
	            return this._value.transactionHash;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmTransactionLog.prototype, "address", {
	        /**
	         * Returns the address of the log.
	         *
	         * @example
	         * ```ts
	         * log.address; // EvmAddress
	         * ```
	         */
	        get: function () {
	            return this._value.address;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmTransactionLog.prototype, "chain", {
	        /**
	         * Returns the chain of the log.
	         *
	         * @example
	         * ```ts
	         * log.chain; // EvmChain
	         * ```
	         */
	        get: function () {
	            return this._value.chain;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmTransactionLog.prototype, "logIndex", {
	        /**
	         * @returns the log index of the log.
	         *
	         * @example
	         * ```ts
	         * log.logIndex; // 273
	         * ```
	         */
	        get: function () {
	            return this._value.logIndex;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmTransactionLog.prototype, "data", {
	        /**
	         * @returns the data of the log.
	         *
	         * @example
	         * ```ts
	         * log.data; // "0x00000000000000000000000000000000000000000000000de05239bccd4d537400000000000000000000000000024dbc80a9f80e3d5fc0a0ee30e2693781a443"
	         * ```
	         */
	        get: function () {
	            return this._value.data;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmTransactionLog.prototype, "topics", {
	        /**
	         * @returns the topics of the log.
	         *
	         * @example
	         * ```ts
	         * log.topic0; // ["0x0000000000000000000000000000000000000000000000000000000000000001", "0x0000000000000000000000000000000000000000000000000000000000000002"]
	         * ```
	         */
	        get: function () {
	            return this._value.topics;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmTransactionLog.prototype, "blockHash", {
	        /**
	         * @returns the block hash of the log.
	         *
	         * @example
	         * ```ts
	         * log.blockHash; // "0x9b559aef7ea858608c2e554246fe4a24287e7aeeb976848df2b9a2531f4b9171"
	         * ```
	         */
	        get: function () {
	            return this._value.blockHash;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmTransactionLog.prototype, "blockNumber", {
	        /**
	         * @returns the block number of the log.
	         *
	         * @example
	         * ```ts
	         * log.blockNumber; // 12386788
	         * ```
	         */
	        get: function () {
	            return this._value.blockNumber;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmTransactionLog.prototype, "blockTimestamp", {
	        /**
	         * @returns the block timestamp of the log.
	         *
	         * @example
	         * ```ts
	         * log.blockTimestamp; // "2021-05-07T11:08:35.000Z"
	         * ```
	         */
	        get: function () {
	            return this._value.blockTimestamp;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    return EvmTransactionLog;
	}());
	EvmTransactionLog$1.EvmTransactionLog = EvmTransactionLog;

	var types$p = {};

	Object.defineProperty(types$p, "__esModule", { value: true });

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(EvmTransactionLog$1, exports);
		__exportStar(types$p, exports);
		
	} (EvmTransactionLog$2));

	var EvmSignature$2 = {};

	var require$$1$2 = /*@__PURE__*/getAugmentedNamespace(lib_esm$5);

	Object.defineProperty(EvmSignature$2, "__esModule", { value: true });
	EvmSignature$2.EvmSignature = void 0;
	var common_core_1$1f = lib$9;
	var bytes_1$3 = require$$1$2;
	/**
	 * Represents of a signed EVM signature
	 * Can be created with a valid r,s,v signature or a hex string
	 */
	var EvmSignature$1 = /** @class */ (function () {
	    function EvmSignature(data) {
	        this._data = EvmSignature.parse(data);
	    }
	    EvmSignature.create = function (data) {
	        if (data instanceof EvmSignature) {
	            return data;
	        }
	        return new EvmSignature(data);
	    };
	    EvmSignature.equals = function (dataA, dataB) {
	        var signatureA = EvmSignature.create(dataA);
	        var signatureB = EvmSignature.create(dataB);
	        return signatureA.serialized === signatureB.serialized;
	    };
	    /**
	     * Checks the equality of the current transfer instance with another nft transfer
	     * @param data - the transfer to compare with
	     * @example transaction.equals(data)
	     * @returns true if the transfers are equal, false otherwise
	     */
	    EvmSignature.prototype.equals = function (data) {
	        return EvmSignature.equals(this, data);
	    };
	    Object.defineProperty(EvmSignature.prototype, "r", {
	        get: function () {
	            return this._data.r;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmSignature.prototype, "s", {
	        get: function () {
	            return this._data.s;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmSignature.prototype, "v", {
	        get: function () {
	            return this._data.v;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmSignature.prototype, "serialized", {
	        get: function () {
	            return (0, bytes_1$3.joinSignature)(this._data);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    EvmSignature.prototype.toJSON = function () {
	        return {
	            r: this.r,
	            s: this.s,
	            v: this.v.toString(),
	        };
	    };
	    EvmSignature.prototype.format = function () {
	        return this.serialized;
	    };
	    EvmSignature.parse = function (data) {
	        if (typeof data === 'string') {
	            return (0, bytes_1$3.splitSignature)(data);
	        }
	        return (0, bytes_1$3.splitSignature)({
	            r: (0, bytes_1$3.hexlify)(common_core_1$1f.BigNumber.create(data.r).toBigInt()),
	            s: (0, bytes_1$3.hexlify)(common_core_1$1f.BigNumber.create(data.s).toBigInt()),
	            v: +data.v,
	        });
	    };
	    return EvmSignature;
	}());
	EvmSignature$2.EvmSignature = EvmSignature$1;

	var __assign$M = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$M = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$M.apply(this, arguments);
	};
	Object.defineProperty(EvmTransaction$1, "__esModule", { value: true });
	EvmTransaction$1.EvmTransaction = void 0;
	var common_core_1$1e = lib$9;
	var EvmAddress_1$7 = EvmAddress$2;
	var EvmChain_1$8 = EvmChain$2;
	var EvmNative_1$3 = EvmNative$2;
	var EvmTransactionLog_1 = EvmTransactionLog$2;
	var EvmSignature_1 = EvmSignature$2;
	/**
	 * The EvmTranaction is a representation of a published transaction.
	 *
	 * Use this class any time you work with a transaction.
	 *
	 * @category DataType
	 */
	var EvmTransaction = /** @class */ (function () {
	    function EvmTransaction(data, core) {
	        this._data = EvmTransaction.parse(data, core);
	    }
	    /**
	     * Create a new instance of EvmTransaction from any valid transaction input
	     * @param data - the EvmTransactionish type
	     * @example
	     * ```
	     * const transaction = EvmTransaction.create(data);
	     *```
	     */
	    EvmTransaction.create = function (data, core) {
	        if (data instanceof EvmTransaction) {
	            return data;
	        }
	        var finalCore = core !== null && core !== void 0 ? core : common_core_1$1e.CoreProvider.getDefault();
	        return new EvmTransaction(data, finalCore);
	    };
	    /**
	     * Check the equality between two Evm transactions
	     * @param dataA - The first transaction
	     * @param dataB - The second transaction
	     * @example
	     * ```ts
	     * EvmTransaction.equals(dataA, dataB)
	     * ```
	     */
	    EvmTransaction.equals = function (dataA, dataB) {
	        var transactionA = EvmTransaction.create(dataA);
	        var transactionB = EvmTransaction.create(dataB);
	        if (!transactionA._data.chain.equals(transactionB._data.chain)) {
	            return false;
	        }
	        if (transactionA._data.hash !== transactionB._data.hash) {
	            return false;
	        }
	        return true;
	    };
	    /**
	     * Checks the equality of the current transaction with another evm transaction
	     * @param data - the transaction to compare with
	     * @example
	     * ```ts
	     * transaction.equals(data)
	     * ```
	     */
	    EvmTransaction.prototype.equals = function (data) {
	        return EvmTransaction.equals(this, data);
	    };
	    EvmTransaction.prototype.toJSON = function () {
	        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
	        var data = this._data;
	        return __assign$M(__assign$M({}, data), { to: (_a = data.to) === null || _a === void 0 ? void 0 : _a.format(), from: (_b = data.from) === null || _b === void 0 ? void 0 : _b.format(), nonce: (_c = data.nonce) === null || _c === void 0 ? void 0 : _c.toString(), gas: (_d = data.gas) === null || _d === void 0 ? void 0 : _d.toString(), gasPrice: (_e = data.gasPrice) === null || _e === void 0 ? void 0 : _e.toString(), gasUsed: (_f = data.gasUsed) === null || _f === void 0 ? void 0 : _f.toString(), cumulativeGasUsed: (_g = data.cumulativeGasUsed) === null || _g === void 0 ? void 0 : _g.toString(), value: (_h = data.value) === null || _h === void 0 ? void 0 : _h.toString(), chain: (_j = data.chain) === null || _j === void 0 ? void 0 : _j.format(), contractAddress: (_k = data.contractAddress) === null || _k === void 0 ? void 0 : _k.format(), logs: data.logs.map(function (log) { return log.toJSON(); }), signature: (_l = data.signature) === null || _l === void 0 ? void 0 : _l.toJSON(), blockNumber: (_m = data.blockNumber) === null || _m === void 0 ? void 0 : _m.toString(), blockTimestamp: data.blockTimestamp.toString() });
	    };
	    /**
	     * @returns a JSON represention of the transaction.
	     * @example
	     * ```
	     * transaction.format()
	     * ```
	     */
	    EvmTransaction.prototype.format = function () {
	        return this.toJSON();
	    };
	    Object.defineProperty(EvmTransaction.prototype, "result", {
	        /**
	         * @returns the transaction
	         * @example
	         * ```
	         * transaction.result
	         * ```
	         */
	        get: function () {
	            return this._data;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmTransaction.prototype, "to", {
	        /**
	         * @returns the transaction to address
	         * @example
	         * ```
	         * transaction.to // EvmAddress
	         * ```
	         */
	        get: function () {
	            return this._data.to;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmTransaction.prototype, "from", {
	        /**
	         * @returns the transaction from address
	         * @example
	         * ```
	         * transaction.address // EvmAddress
	         * ```
	         */
	        get: function () {
	            return this._data.from;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmTransaction.prototype, "nonce", {
	        /**
	         * @returns the transaction nonce
	         * @example
	         * ```
	         * transaction.nonce // 326595425
	         * ```
	         */
	        get: function () {
	            return this._data.nonce;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmTransaction.prototype, "gas", {
	        /**
	         * @returns the transaction gas
	         * @example
	         * ```
	         * transaction.gas // 6721975
	         * ```
	         */
	        get: function () {
	            return this._data.gas;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmTransaction.prototype, "gasPrice", {
	        /**
	         * @returns the transaction gas price
	         * @example
	         * ```
	         * transaction.gasPrice // 20000000000
	         * ```
	         */
	        get: function () {
	            return this._data.gasPrice;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmTransaction.prototype, "gasUsed", {
	        /**
	         * @returns the transaction gas used
	         * @example
	         * ```
	         * transaction.gasUsed // 1340925
	         * ```
	         */
	        get: function () {
	            return this._data.gasUsed;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmTransaction.prototype, "cumulativeGasUsed", {
	        /**
	         * @returns the transaction cumulative gas used
	         * @example
	         * ```
	         * transaction.cumulativeGasUsed // 1340925
	         * ```
	         */
	        get: function () {
	            return this._data.cumulativeGasUsed;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmTransaction.prototype, "blockNumber", {
	        /**
	         * @returns the transaction block number
	         * @example
	         * ```
	         * transaction.blockNumber // 12526958
	         * ```
	         */
	        get: function () {
	            return this._data.blockNumber;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmTransaction.prototype, "value", {
	        /**
	         * @returns the transaction value
	         * @example
	         * ```
	         * transaction.value // EvmNative
	         * ```
	         */
	        get: function () {
	            return this._data.value;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmTransaction.prototype, "chain", {
	        /**
	         * @returns the transaction chain
	         * @example
	         * ```
	         * transaction.chain // EvmChain
	         * ```
	         */
	        get: function () {
	            return this._data.chain;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmTransaction.prototype, "contractAddress", {
	        /**
	         * @returns the transaction contract address
	         * @example
	         * ```
	         * transaction.contractAddress // EvmAddress
	         * ```
	         */
	        get: function () {
	            return this._data.contractAddress;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmTransaction.prototype, "logs", {
	        /**
	         * @returns the transaction logs
	         * @example
	         * ```
	         * transaction.logs // EvmTransactionLog[]
	         * ```
	         */
	        get: function () {
	            return this._data.logs;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmTransaction.prototype, "receiptRoot", {
	        /**
	         * @returns the transaction receipt root
	         * @example
	         * ```
	         * transaction.receiptRoot // string
	         * ```
	         */
	        get: function () {
	            return this._data.receiptRoot;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmTransaction.prototype, "receiptStatus", {
	        /**
	         * @returns the transaction receipt status
	         * @example
	         * ```
	         * transaction.receiptStatus // 1
	         * ```
	         */
	        get: function () {
	            return this._data.receiptStatus;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmTransaction.prototype, "data", {
	        /**
	         * @returns the transaction data
	         * @example
	         * ```
	         * transaction.data // 0x000000000000000000000000000000000000000000000000000000000000002
	         * ```
	         */
	        get: function () {
	            return this._data.data;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmTransaction.prototype, "hash", {
	        /**
	         * @returns the transaction hash
	         * @example
	         * ```
	         * transaction.hash // 0x057Ec652A4F150f7FF94f089A38008f49a0DF88e
	         * ```
	         */
	        get: function () {
	            return this._data.hash;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmTransaction.prototype, "type", {
	        /**
	         * @returns the transaction type
	         * @example
	         * ```
	         * transaction.type // 1
	         * ```
	         */
	        get: function () {
	            return this._data.type;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmTransaction.prototype, "blockHash", {
	        /**
	         * @returns the transaction black hash
	         * @example
	         * ```
	         * transaction.blockHash // 0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86
	         * ```
	         */
	        get: function () {
	            return this._data.blockHash;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmTransaction.prototype, "blockTimestamp", {
	        /**
	         * @returns the transaction block timestamp
	         * @example
	         * ```
	         * transaction.blockTimestamp // Date
	         * ```
	         */
	        get: function () {
	            return this._data.blockTimestamp;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmTransaction.prototype, "signature", {
	        /**
	         * @returns the signature (if available)
	         * @example
	         * ```
	         * transaction.signature // EvmSignature
	         * ```
	         */
	        get: function () {
	            return this._data.signature;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmTransaction.prototype, "index", {
	        /**
	         * @returns the index
	         * @example
	         * ```
	         * transaction.index // 1
	         * ```
	         */
	        get: function () {
	            return this._data.index;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmTransaction.prototype, "v", {
	        get: function () {
	            var _a;
	            return (_a = this._data.signature) === null || _a === void 0 ? void 0 : _a.v;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmTransaction.prototype, "r", {
	        get: function () {
	            var _a;
	            return (_a = this._data.signature) === null || _a === void 0 ? void 0 : _a.r;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmTransaction.prototype, "s", {
	        get: function () {
	            var _a;
	            return (_a = this._data.signature) === null || _a === void 0 ? void 0 : _a.s;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    EvmTransaction.parse = function (data, core) {
	        var _a;
	        return ({
	            from: EvmAddress_1$7.EvmAddress.create(data.from, core),
	            to: (0, common_core_1$1e.maybe)(data.to, function (to) { return EvmAddress_1$7.EvmAddress.create(to, core); }),
	            nonce: (0, common_core_1$1e.maybe)(data.nonce, common_core_1$1e.BigNumber.create),
	            data: (0, common_core_1$1e.maybe)(data.data),
	            value: (0, common_core_1$1e.maybe)(data.value, function (val) { return EvmNative_1$3.EvmNative.create(val, 'wei'); }),
	            hash: data.hash,
	            type: (0, common_core_1$1e.maybe)(data.type, function (value) { return +value; }),
	            chain: EvmChain_1$8.EvmChain.create(data.chain),
	            gas: (0, common_core_1$1e.maybe)(data.gas, common_core_1$1e.BigNumber.create),
	            gasPrice: common_core_1$1e.BigNumber.create(data.gasPrice),
	            index: +data.index,
	            blockNumber: common_core_1$1e.BigNumber.create(data.blockNumber),
	            blockHash: data.blockHash,
	            blockTimestamp: (0, common_core_1$1e.dateInputToDate)(data.blockTimestamp),
	            cumulativeGasUsed: common_core_1$1e.BigNumber.create(data.cumulativeGasUsed),
	            gasUsed: common_core_1$1e.BigNumber.create(data.gasUsed),
	            contractAddress: (0, common_core_1$1e.maybe)(data.contractAddress, function (address) { return EvmAddress_1$7.EvmAddress.create(address, core); }),
	            receiptRoot: (0, common_core_1$1e.maybe)(data.receiptRoot),
	            receiptStatus: (0, common_core_1$1e.maybe)(data.receiptStatus, function (status) { return +status; }),
	            logs: ((_a = data.logs) !== null && _a !== void 0 ? _a : []).map(function (log) { return EvmTransactionLog_1.EvmTransactionLog.create(log); }),
	            signature: (0, common_core_1$1e.maybe)(data.signature, EvmSignature_1.EvmSignature.create),
	        });
	    };
	    return EvmTransaction;
	}());
	EvmTransaction$1.EvmTransaction = EvmTransaction;

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(types$q, exports);
		__exportStar(EvmTransaction$1, exports);
		
	} (EvmTransaction$2));

	var EvmSimpleBlock$1 = {};

	var __assign$L = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$L = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$L.apply(this, arguments);
	};
	Object.defineProperty(EvmSimpleBlock$1, "__esModule", { value: true });
	EvmSimpleBlock$1.EvmSimpleBlock = void 0;
	var common_core_1$1d = lib$9;
	var EvmChain_1$7 = EvmChain$2;
	/**
	 * The EvmSimpleBlock is a representation of a block.
	 *
	 * @category DataType
	 */
	var EvmSimpleBlock = /** @class */ (function () {
	    function EvmSimpleBlock(data, core) {
	        this._data = EvmSimpleBlock.parse(data, core);
	    }
	    /**
	     * Create a new instance of EvmSimpleBlock from any valid transaction input
	     * @param data - the EvmSimpleBlockish type
	     * @example const transaction = EvmTransaction.create(data);
	     */
	    EvmSimpleBlock.create = function (data, core) {
	        if (data instanceof EvmSimpleBlock) {
	            return data;
	        }
	        var finalCore = core !== null && core !== void 0 ? core : common_core_1$1d.CoreProvider.getDefault();
	        return new EvmSimpleBlock(data, finalCore);
	    };
	    /**
	     * Check the equality between two Evm blocks. It compares their hashes and blocks.
	     * @param dataA - The first block to compare
	     * @param dataB - The second block to compare
	     * @example EvmTransaction.equals(dataA, dataB)
	     */
	    EvmSimpleBlock.equals = function (dataA, dataB) {
	        var blockA = EvmSimpleBlock.create(dataA);
	        var blockB = EvmSimpleBlock.create(dataB);
	        if (!blockA.chain.equals(blockB.chain)) {
	            return false;
	        }
	        if (blockA.hash !== blockB.hash) {
	            return false;
	        }
	        if (!blockA.number.equals(blockB.number)) {
	            return false;
	        }
	        return true;
	    };
	    /**
	     * Checks the equality of the current block with another evm block
	     * @param data - the block to compare with
	     * @example
	     * ```ts
	     * block.equals(data)
	     * ```
	     */
	    EvmSimpleBlock.prototype.equals = function (data) {
	        return EvmSimpleBlock.equals(this, data);
	    };
	    /**
	     * @returns a JSON represention of the block.
	     * @example
	     * ```
	     * block.toJSON()
	     * ```
	     */
	    EvmSimpleBlock.prototype.toJSON = function () {
	        var data = this._data;
	        return __assign$L(__assign$L({}, data), { number: data.number.toString(), chain: data.chain.format() });
	    };
	    /**
	     * @returns a JSON represention of the block.
	     * @example
	     * ```
	     * block.format()
	     * ```
	     */
	    EvmSimpleBlock.prototype.format = function () {
	        return this.toJSON();
	    };
	    Object.defineProperty(EvmSimpleBlock.prototype, "result", {
	        /**
	         * @returns all the data without casting it to JSON.
	         * @example block.result
	         */
	        get: function () {
	            return this._data;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmSimpleBlock.prototype, "number", {
	        /**
	         * @returns the block number.
	         * @example block.number // BigNumber
	         */
	        get: function () {
	            return this._data.number;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmSimpleBlock.prototype, "hash", {
	        /**
	         * @returns the block hash.
	         * @example block.hash // "0x9b559aef7ea858608c2e554246fe4a24287e7aeeb976848df2b9a2531f4b9171"
	         */
	        get: function () {
	            return this._data.hash;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmSimpleBlock.prototype, "timestamp", {
	        /**
	         * @returns the block timestamp.
	         * @example block.timestamp // Date
	         */
	        get: function () {
	            return this._data.timestamp;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmSimpleBlock.prototype, "chain", {
	        /**
	         * @returns the block chain.
	         * @example block.chain // EvmChain
	         */
	        get: function () {
	            return this._data.chain;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    EvmSimpleBlock.parse = function (data, core) { return ({
	        timestamp: (0, common_core_1$1d.dateInputToDate)(data.timestamp),
	        number: common_core_1$1d.BigNumber.create(data.number),
	        chain: EvmChain_1$7.EvmChain.create(data.chain, core),
	        hash: data.hash,
	    }); };
	    return EvmSimpleBlock;
	}());
	EvmSimpleBlock$1.EvmSimpleBlock = EvmSimpleBlock;

	var __assign$K = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$K = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$K.apply(this, arguments);
	};
	Object.defineProperty(EvmBlock$1, "__esModule", { value: true });
	EvmBlock$1.EvmBlock = void 0;
	var common_core_1$1c = lib$9;
	var EvmAddress_1$6 = EvmAddress$2;
	var EvmChain_1$6 = EvmChain$2;
	var EvmTransaction_1 = EvmTransaction$2;
	var EvmSimpleBlock_1 = EvmSimpleBlock$1;
	/**
	 * The EvmBlock is a representation of a block.
	 *
	 * @category DataType
	 */
	var EvmBlock = /** @class */ (function () {
	    function EvmBlock(data, core) {
	        this._data = EvmBlock.parse(data, core);
	    }
	    /**
	     * Create a new instance of EvmBlock from any valid transaction input
	     * @param data - the EvmBlockish type
	     * @example const transaction = EvmTransaction.create(data);
	     */
	    EvmBlock.create = function (data, core) {
	        if (data instanceof EvmBlock) {
	            return data;
	        }
	        var finalCore = core !== null && core !== void 0 ? core : common_core_1$1c.CoreProvider.getDefault();
	        return new EvmBlock(data, finalCore);
	    };
	    /**
	     * Check the equality between two Evm blocks. It compares their hashes and blocks.
	     * @param dataA - The first block to compare
	     * @param dataB - The second block to compare
	     * @example EvmTransaction.equals(dataA, dataB)
	     */
	    EvmBlock.equals = function (dataA, dataB) {
	        var blockA = EvmSimpleBlock_1.EvmSimpleBlock.create(dataA);
	        var blockB = EvmSimpleBlock_1.EvmSimpleBlock.create(dataB);
	        if (!blockA.chain.equals(blockB.chain)) {
	            return false;
	        }
	        if (blockA.hash !== blockB.hash) {
	            return false;
	        }
	        return true;
	    };
	    /**
	     * Checks the equality of the current block with another evm block
	     * @param data - the block to compare with
	     * @example
	     * ```ts
	     * block.equals(data)
	     * ```
	     */
	    EvmBlock.prototype.equals = function (data) {
	        return EvmBlock.equals(this, data);
	    };
	    /**
	     * @returns a JSON represention of the block.
	     * @example
	     * ```
	     * block.toJSON()
	     * ```
	     */
	    EvmBlock.prototype.toJSON = function () {
	        var data = this._data;
	        return __assign$K(__assign$K({}, data), { number: data.number.toString(), difficulty: data.difficulty.toString(), totalDifficulty: data.totalDifficulty.toString(), size: data.size.toString(), gasLimit: data.gasLimit.toString(), gasUsed: data.gasUsed.toString(), chain: data.chain.format(), miner: data.miner.format(), transactions: data.transactions.map(function (transaction) { return transaction.toJSON(); }) });
	    };
	    /**
	     * @returns a JSON represention of the block.
	     * @example
	     * ```
	     * block.format()
	     * ```
	     */
	    EvmBlock.prototype.format = function () {
	        return this.toJSON();
	    };
	    Object.defineProperty(EvmBlock.prototype, "result", {
	        /**
	         * @returns all the data without casting it to JSON.
	         * @example block.result
	         */
	        get: function () {
	            return this._data;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmBlock.prototype, "number", {
	        /**
	         * @returns the block number.
	         * @example block.number // BigNumber
	         */
	        get: function () {
	            return this._data.number;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmBlock.prototype, "hash", {
	        /**
	         * @returns the block hash.
	         * @example block.hash // "0x9b559aef7ea858608c2e554246fe4a24287e7aeeb976848df2b9a2531f4b9171"
	         */
	        get: function () {
	            return this._data.hash;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmBlock.prototype, "timestamp", {
	        /**
	         * @returns the block timestamp.
	         * @example block.timestamp // Date
	         */
	        get: function () {
	            return this._data.timestamp;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmBlock.prototype, "miner", {
	        /**
	         * @returns the block miner.
	         * @example block.miner // EvmAddress
	         */
	        get: function () {
	            return this._data.miner;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmBlock.prototype, "difficulty", {
	        /**
	         * @returns the block difficulty.
	         * @example block.difficulty // BigNumber
	         */
	        get: function () {
	            return this._data.difficulty;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmBlock.prototype, "totalDifficulty", {
	        /**
	         * @returns the block total difficulty.
	         * @example block.totalDifficulty // BigNumber
	         */
	        get: function () {
	            return this._data.totalDifficulty;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmBlock.prototype, "size", {
	        /**
	         * @returns the block size.
	         * @example block.size // BigNumber
	         */
	        get: function () {
	            return this._data.size;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmBlock.prototype, "gasLimit", {
	        /**
	         * @returns the block gas limit.
	         * @example block.gasLimit // BigNumber
	         */
	        get: function () {
	            return this._data.gasLimit;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmBlock.prototype, "gasUsed", {
	        /**
	         * @returns the block gas used.
	         * @example block.gasUsed // BigNumber
	         */
	        get: function () {
	            return this._data.gasUsed;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmBlock.prototype, "transactions", {
	        /**
	         * @returns the block transactions.
	         * @example block.transactions // EvmTransaction[]
	         */
	        get: function () {
	            return this._data.transactions;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmBlock.prototype, "chain", {
	        /**
	         * @returns the block chain.
	         * @example block.chain // EvmChain
	         */
	        get: function () {
	            return this._data.chain;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmBlock.prototype, "transactionCount", {
	        /**
	         * @returns the block transaction count.
	         * @example block.transactionCount // 252
	         */
	        get: function () {
	            return this._data.transactionCount;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmBlock.prototype, "transactionsRoot", {
	        /**
	         * @returns the block transactions root.
	         * @example block.transactionsRoot // "0xe4c7bf3aff7ad07f9e80d57f7189f0252592fee6321c2a9bd9b09b6ce0690d27"
	         */
	        get: function () {
	            return this._data.transactionsRoot;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmBlock.prototype, "stateRoot", {
	        /**
	         * @returns the block state root.
	         * @example block.stateRoot // "0x49e3bfe7b618e27fde8fa08884803a8458b502c6534af69873a3cc926a7c724b"
	         */
	        get: function () {
	            return this._data.stateRoot;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmBlock.prototype, "receiptsRoot", {
	        /**
	         * @returns the block receipts root.
	         * @example block.receiptsRoot // "0x7cf43d7e837284f036cf92c56973f5e27bdd253ca46168fa195a6b07fa719f23"
	         */
	        get: function () {
	            return this._data.receiptsRoot;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmBlock.prototype, "logsBloom", {
	        /**
	         * @returns the block logs bloom.
	         * @example block.logsBloom // "0xdde5fc46c5d8bcbd58207bc9f267bf43298e23791a326ff02661e99790da9996b3e0dd912c0b8202d389d282c56e4d11eb2dec4898a32b6b165f1f4cae6aa0079498eab50293f3b8defbf6af11bb75f0408a563ddfc26a3323d1ff5f9849e95d5f034d88a757ddea032c75c00708c9ff34d2207f997cc7d93fd1fa160a6bfaf62a54e31f9fe67ab95752106ba9d185bfdc9b6dc3e17427f844ee74e5c09b17b83ad6e8fc7360f5c7c3e4e1939e77a6374bee57d1fa6b2322b11ad56ad0398302de9b26d6fbfe414aa416bff141fad9d4af6aea19322e47595e342cd377403f417dfd396ab5f151095a5535f51cbc34a40ce9648927b7d1d72ab9daf253e31daf"
	         */
	        get: function () {
	            return this._data.logsBloom;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmBlock.prototype, "extraData", {
	        /**
	         * @returns the block extra data.
	         * @example block.extraData // "0x65746865726d696e652d6575726f70652d7765737433"
	         */
	        get: function () {
	            return this._data.extraData;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmBlock.prototype, "parentHash", {
	        /**
	         * @returns the block parent hash.
	         * @example block.parentHash // "0x011d1fc45839de975cc55d758943f9f1d204f80a90eb631f3bf064b80d53e045"
	         */
	        get: function () {
	            return this._data.parentHash;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmBlock.prototype, "sha3Uncles", {
	        /**
	         * @returns the block sha3Uncles.
	         * @example block.sha3Uncles // "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347"
	         */
	        get: function () {
	            return this._data.sha3Uncles;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmBlock.prototype, "nonce", {
	        /**
	         * @returns the block nonce.
	         * @example block.nonce // "0xedeb2d8fd2b2bdec"
	         */
	        get: function () {
	            return this._data.nonce;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    EvmBlock.parse = function (data, core) { return (__assign$K(__assign$K({}, data), { miner: EvmAddress_1$6.EvmAddress.create(data.miner, core), timestamp: (0, common_core_1$1c.dateInputToDate)(data.timestamp), number: common_core_1$1c.BigNumber.create(data.number), difficulty: common_core_1$1c.BigNumber.create(data.difficulty), totalDifficulty: common_core_1$1c.BigNumber.create(data.totalDifficulty), size: common_core_1$1c.BigNumber.create(data.size), gasLimit: common_core_1$1c.BigNumber.create(data.gasLimit), gasUsed: common_core_1$1c.BigNumber.create(data.gasUsed), transactions: data.transactions.map(function (transaction) { return EvmTransaction_1.EvmTransaction.create(transaction, core); }), chain: EvmChain_1$6.EvmChain.create(data.chain, core), transactionCount: +data.transactionCount })); };
	    return EvmBlock;
	}());
	EvmBlock$1.EvmBlock = EvmBlock;

	var types$o = {};

	Object.defineProperty(types$o, "__esModule", { value: true });

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(EvmBlock$1, exports);
		__exportStar(EvmSimpleBlock$1, exports);
		__exportStar(types$o, exports);
		
	} (EvmBlock$2));

	var EvmBlockDate$2 = {};

	var EvmBlockDate$1 = {};

	Object.defineProperty(EvmBlockDate$1, "__esModule", { value: true });
	EvmBlockDate$1.EvmBlockDate = void 0;
	var EvmBlockDate = /** @class */ (function () {
	    function EvmBlockDate(data) {
	        this.data = data;
	    }
	    /**
	     * Create a new instance of EvmBlockDate.
	     * @param data - the EvmBlockDateish type.
	     */
	    EvmBlockDate.create = function (data) {
	        if (data instanceof EvmBlockDate) {
	            return data;
	        }
	        return new EvmBlockDate(EvmBlockDate.parse(data));
	    };
	    EvmBlockDate.parse = function (input) {
	        return {
	            block: input.block,
	            date: new Date(input.date),
	            timestamp: input.timestamp,
	            // TODO: the swagger currently has wrong type for `block_timestamp`, should be `string`.
	            blockTimestamp: String(input.block_timestamp),
	            hash: input.hash,
	            parentHash: input.parent_hash,
	        };
	    };
	    Object.defineProperty(EvmBlockDate.prototype, "block", {
	        /**
	         * @description The block number.
	         * @example `9193266`
	         */
	        get: function () {
	            return this.data.block;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmBlockDate.prototype, "date", {
	        /**
	         * @description The date of the block.
	         * @example `2020-01-01T00:00:00+00:00`
	         */
	        get: function () {
	            return this.data.date;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmBlockDate.prototype, "timestamp", {
	        /**
	         * @description The timestamp of the block
	         * @example `1577836811`
	         */
	        get: function () {
	            return this.data.timestamp;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmBlockDate.prototype, "blockTimestamp", {
	        /**
	         * @description The timestamp of the block
	         * @example `2022-01-03T22:59:39.000Z`
	         */
	        get: function () {
	            return this.data.blockTimestamp;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmBlockDate.prototype, "block_timestamp", {
	        /**
	         * @deprecated Use `blockTimestamp` instead.
	         */
	        get: function () {
	            return this.data.blockTimestamp;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmBlockDate.prototype, "hash", {
	        /**
	         * @description The block hash.
	         * @example `0x9b559aef7ea858608c2e554246fe4a24287e7aeeb976848df2b9a2531f4b9171`
	         */
	        get: function () {
	            return this.data.hash;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmBlockDate.prototype, "block_hash", {
	        /**
	         * @deprecated Use `hash` instead.
	         */
	        get: function () {
	            return this.data.hash;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmBlockDate.prototype, "parentHash", {
	        /**
	         * @description The block hash of the parent block.
	         * @example `0x011d1fc45839de975cc55d758943f9f1d204f80a90eb631f3bf064b80d53e045`
	         */
	        get: function () {
	            return this.data.parentHash;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmBlockDate.prototype, "parent_hash", {
	        /**
	         * @deprecated Use `parentHash` instead.
	         */
	        get: function () {
	            return this.data.parentHash;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    return EvmBlockDate;
	}());
	EvmBlockDate$1.EvmBlockDate = EvmBlockDate;

	var types$n = {};

	Object.defineProperty(types$n, "__esModule", { value: true });

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(EvmBlockDate$1, exports);
		__exportStar(types$n, exports);
		
	} (EvmBlockDate$2));

	var EvmEvent$2 = {};

	var EvmEvent$1 = {};

	var __assign$J = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$J = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$J.apply(this, arguments);
	};
	Object.defineProperty(EvmEvent$1, "__esModule", { value: true });
	EvmEvent$1.EvmEvent = void 0;
	var common_core_1$1b = lib$9;
	var EvmAddress_1$5 = EvmAddress$2;
	var EvmChain_1$5 = EvmChain$2;
	var EvmNative_1$2 = EvmNative$2;
	/**
	 * The EvmEvent is a representation of an event.
	 *
	 * Use this class any time you work with an event.
	 *
	 * @category DataType
	 */
	var EvmEvent = /** @class */ (function () {
	    function EvmEvent(_data) {
	        this._data = _data;
	    }
	    /**
	     * Create a new instance of EvmEvent from any valid event input
	     * @param data - the EvmEventish type
	     * @example
	     * ```
	     * const event = EvmEventish.create(data);
	     *```
	     */
	    EvmEvent.create = function (data, core) {
	        if (data instanceof EvmEvent) {
	            return data;
	        }
	        var finalCore = core !== null && core !== void 0 ? core : common_core_1$1b.CoreProvider.getDefault();
	        return new EvmEvent(EvmEvent.parse(data, finalCore));
	    };
	    /**
	     * Check the equality between two Evm events. It checks if the chain, block number, address and data are equal.
	     * @param dataA - The first event
	     * @param dataB - The second event
	     * @example
	     * ```ts
	     * EvmEvent.equals(dataA, dataB)
	     * ```
	     * @returns true if the events are equal, false otherwise
	     */
	    EvmEvent.equals = function (dataA, dataB) {
	        var eventA = EvmEvent.create(dataA);
	        var eventB = EvmEvent.create(dataB);
	        if (!eventA._data.chain.equals(eventB._data.chain)) {
	            return false;
	        }
	        if (!eventA._data.blockNumber.equals(eventB._data.blockNumber)) {
	            return false;
	        }
	        if (!eventA._data.address.equals(eventB._data.address)) {
	            return false;
	        }
	        if (eventA._data.data !== eventB._data.data) {
	            return false;
	        }
	        return true;
	    };
	    /**
	     * Checks the equality of the current event instance with another evm event
	     * @param data - the event to compare with
	     * @example
	     * ```ts
	     * event.equals(data)
	     * ```
	     * @returns true if the events are equal, false otherwise
	     */
	    EvmEvent.prototype.equals = function (data) {
	        return EvmEvent.equals(this, data);
	    };
	    /**
	     * @returns a JSON represention of the event.
	     * @example
	     * ```
	     * event.toJSON()
	     * ```
	     */
	    EvmEvent.prototype.toJSON = function () {
	        var _a, _b, _c;
	        var data = this._data;
	        return __assign$J(__assign$J({}, data), { chain: data.chain.format(), address: data.address.format(), blockNumber: data.blockNumber.toString(), data: {
	                from: (_a = data.data.from) === null || _a === void 0 ? void 0 : _a.format(),
	                to: (_b = data.data.to) === null || _b === void 0 ? void 0 : _b.format(),
	                value: (_c = data.data.value) === null || _c === void 0 ? void 0 : _c.format(),
	            } });
	    };
	    /**
	     * @returns a JSON represention of the event.
	     * @example event.format()
	     */
	    EvmEvent.prototype.format = function () {
	        return this.toJSON();
	    };
	    Object.defineProperty(EvmEvent.prototype, "result", {
	        /**
	         * @returns all the data without casting it to JSON.
	         * @example event.result
	         */
	        get: function () {
	            return this._data;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmEvent.prototype, "chain", {
	        /**
	         * @returns the event chain
	         * @example event.chain // EvmChain
	         */
	        get: function () {
	            return this._data.chain;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmEvent.prototype, "address", {
	        /**
	         * @returns the event address
	         * @example event.address // EvmAddress
	         */
	        get: function () {
	            return this._data.address;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmEvent.prototype, "blockNumber", {
	        /**
	         * @returns the event block number
	         * @example event.blockNumber // BigNumber
	         */
	        get: function () {
	            return this._data.blockNumber;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmEvent.prototype, "blockTimestamp", {
	        /**
	         * @returns the event block timestamp
	         * @example event.blockTimestamp // Date
	         */
	        get: function () {
	            return this._data.blockTimestamp;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmEvent.prototype, "data", {
	        /**
	         * @returns the event data with from address, to address and value
	         * @example event.data
	         */
	        get: function () {
	            return this._data.data;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmEvent.prototype, "transactionHash", {
	        /**
	         * @returns the event block trannsaciton hash
	         * @example event.transactionHash // "0xc9f62f4f6ab505a96c1a84ec2899c6bfd86245ef1effaa689fc997798be763d5"
	         */
	        get: function () {
	            return this._data.transactionHash;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmEvent.prototype, "blockHash", {
	        /**
	         * @returns the event block hash
	         * @example event.blockHash // "0xc9f62f4f6ab505a96c1a84ec2899c6bfd86245ef1effaa689fc997798be763d5"
	         */
	        get: function () {
	            return this._data.blockHash;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    EvmEvent.parse = function (data, core) { return (__assign$J(__assign$J({}, data), { chain: EvmChain_1$5.EvmChain.create(data.chain, core), address: EvmAddress_1$5.EvmAddress.create(data.address, core), blockNumber: common_core_1$1b.BigNumber.create(data.blockNumber), blockTimestamp: (0, common_core_1$1b.dateInputToDate)(data.blockTimestamp), data: {
	            from: (0, common_core_1$1b.maybe)(data.data.from, function (from) { return EvmAddress_1$5.EvmAddress.create(from, core); }),
	            to: (0, common_core_1$1b.maybe)(data.data.to, function (to) { return EvmAddress_1$5.EvmAddress.create(to, core); }),
	            value: (0, common_core_1$1b.maybe)(data.data.value, EvmNative_1$2.EvmNative.create),
	        } })); };
	    return EvmEvent;
	}());
	EvmEvent$1.EvmEvent = EvmEvent;

	var types$m = {};

	Object.defineProperty(types$m, "__esModule", { value: true });

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(EvmEvent$1, exports);
		__exportStar(types$m, exports);
		
	} (EvmEvent$2));

	var EvmNft$2 = {};

	var EvmNft$1 = {};

	var __assign$I = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$I = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$I.apply(this, arguments);
	};
	Object.defineProperty(EvmNft$1, "__esModule", { value: true });
	EvmNft$1.EvmNft = void 0;
	var common_core_1$1a = lib$9;
	var EvmAddress_1$4 = EvmAddress$2;
	var EvmChain_1$4 = EvmChain$2;
	/**
	 * The EvmNft class is a MoralisData that references to a the NFT of the type; Erc721 or Erc1155
	 *
	 * @category DataType
	 */
	var EvmNft = /** @class */ (function () {
	    function EvmNft(data, core) {
	        this._data = EvmNft.parse(data, core);
	    }
	    /**
	     * Create a new instance of EvmNft from any valid address input
	     *
	     * @param data - the EvmNftish type
	     * @param core - the Core instance
	     * @example
	     * ```ts
	     * const nft = EvmNft.create(data);
	     * ```
	     * @returns an instance of EvmNft
	     */
	    EvmNft.create = function (data, core) {
	        if (data instanceof EvmNft) {
	            return data;
	        }
	        var finalCore = core !== null && core !== void 0 ? core : common_core_1$1a.CoreProvider.getDefault();
	        return new EvmNft(data, finalCore);
	    };
	    // TODO: refactor to reduce complexity
	    /**
	     * Compares two EvmNftish data. verifies that the chain, tokenAddress and owner of values are equal.
	     * @param valueA - the first EvmNftish data to compare
	     * @param valueB - the second EvmNftish data to compare
	     * @returns true if the values are equal, false otherwise
	     * @example
	     * ```ts
	     *  EvmNft.equals(valueA, valueB);
	     * ```
	     */
	    // eslint-disable-next-line complexity
	    EvmNft.equals = function (valueA, valueB) {
	        var nftA = EvmNft.create(valueA);
	        var nftB = EvmNft.create(valueB);
	        if (!nftA._data.chain.equals(nftB._data.chain)) {
	            return false;
	        }
	        if (!nftA._data.tokenAddress.equals(nftB._data.tokenAddress)) {
	            return false;
	        }
	        // Owners are different between tokens
	        if (nftA._data.ownerOf && nftB._data.ownerOf && !nftA._data.ownerOf.equals(nftB._data.ownerOf)) {
	            return false;
	        }
	        // Owner is defined in only one token
	        if ((nftA._data.ownerOf && !nftB._data.ownerOf) || (!nftA._data.ownerOf && nftB._data.ownerOf)) {
	            return false;
	        }
	        return true;
	    };
	    /**
	     * Compares an EvmNftish data to this EvmNft instance.
	     * @param value - the value to compare
	     * @returns true if the value is equal to the current instance, false otherwise
	     * @example
	     * ```ts
	     * nft.equals(value);
	     * ```
	     */
	    EvmNft.prototype.equals = function (value) {
	        return EvmNft.equals(this, value);
	    };
	    /**
	     * Converts the EvmNft instance to a JSON object.
	     * @returns JSON object of the EvmNft instance
	     * @example `nft.toJSON()`
	     */
	    EvmNft.prototype.toJSON = function () {
	        var _b, _c, _d;
	        var data = this._data;
	        return __assign$I(__assign$I({}, data), { tokenAddress: data.tokenAddress.format(), chain: data.chain.format(), ownerOf: (_b = data.ownerOf) === null || _b === void 0 ? void 0 : _b.format(), blockNumberMinted: (_c = data.blockNumberMinted) === null || _c === void 0 ? void 0 : _c.toString(), blockNumber: (_d = data.blockNumber) === null || _d === void 0 ? void 0 : _d.toString() });
	    };
	    /**
	     * Converts the EvmNft instance to a JSON object.
	     * @returns JSON object of the EvmNft instance
	     * @example `nft.format()`
	     */
	    EvmNft.prototype.format = function () {
	        return this.toJSON();
	    };
	    Object.defineProperty(EvmNft.prototype, "result", {
	        get: function () {
	            return this._data;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNft.prototype, "chain", {
	        /**
	         * @returns the NFT chain
	         * @example
	         * ```
	         * nft.chain // EvmChain
	         * ```
	         */
	        get: function () {
	            return this._data.chain;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNft.prototype, "contractType", {
	        /**
	         * @returns the NFT contract type
	         * @example
	         * ```
	         * nft.contractType // "ERC721" | "ERC1155"
	         * ```
	         */
	        get: function () {
	            return this._data.contractType;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNft.prototype, "tokenAddress", {
	        /**
	         * @returns the NFT token address
	         * @example
	         * ```
	         * nft.tokenAddress // EvmAddress
	         * ```
	         */
	        get: function () {
	            return this._data.tokenAddress;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNft.prototype, "metadata", {
	        /**
	         * @returns the NFT metadata
	         * @example
	         * ```ts
	         * nft.metadata
	         * // {
	         * // name: 'Pancake',
	         * // description: 'The dessert series 1',
	         * // image: 'ipfs://QmNQFXCZ6LGzvpMW9Q5PWbCrEnLknQrPwr2r8pbQAgzQ9A/4863BD6B-6C92-4B96-BF80-8020B2F7C3A5.jpeg',
	         * // }
	         * ```
	         */
	        get: function () {
	            return this._data.metadata;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNft.prototype, "tokenUri", {
	        /**
	         * @returns the NFT token URI
	         * @example
	         * ```
	         * nft.tokenUri // "https://gateway.moralisipfs.com/ipfs/QmajSqgxY3cWBgBeRm38vasJAcTit1kp5EwqVHxszJYgUC/728.json"
	         * ```
	         */
	        get: function () {
	            return this._data.tokenUri;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNft.prototype, "tokenHash", {
	        /**
	         * @returns the NFT token hash
	         * @example
	         * ```
	         * nft.tokenHash // "QmajSqgxY3cWBgBeRm38vasJAcTit1kp5EwqVHxszJYgUC"
	         * ```
	         */
	        get: function () {
	            return this._data.tokenHash;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNft.prototype, "name", {
	        /**
	         * @returns the NFT name
	         * @example
	         * ```
	         * nft.name // "Tether USD"
	         * ```
	         */
	        get: function () {
	            return this._data.name;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNft.prototype, "symbol", {
	        /**
	         * @returns the NFT symbol
	         * @example
	         * ```
	         * nft.symbol // "USDT"
	         * ```
	         */
	        get: function () {
	            return this._data.symbol;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNft.prototype, "ownerOf", {
	        /**
	         * @returns the NFT owner of address
	         * @example
	         * ```
	         * nft.ownerOf // EvmAddress
	         * ```
	         */
	        get: function () {
	            return this._data.ownerOf;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNft.prototype, "blockNumberMinted", {
	        /**
	         * @returns the NFT block number minted from
	         * @example
	         * ```
	         * nft.blockNumberMinted // BigNumber
	         * ```
	         */
	        get: function () {
	            return this._data.blockNumberMinted;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNft.prototype, "blockNumber", {
	        /**
	         * @returns the NFT block number
	         * @example
	         * ```
	         * nft.blockNumber // BigNumber
	         * ```
	         */
	        get: function () {
	            return this._data.blockNumber;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNft.prototype, "lastMetadataSync", {
	        /**
	         * @returns the NFT latest metadata sync date
	         * @example
	         * ```
	         * nft.latestMetadataSync // Date
	         * ```
	         */
	        get: function () {
	            return this._data.lastMetadataSync;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNft.prototype, "lastTokenUriSync", {
	        /**
	         * @returns the NFT latest token URI sync date
	         * @example
	         * ```
	         * nft.latestTokenUriSync // Date
	         * ```
	         */
	        get: function () {
	            return this._data.lastTokenUriSync;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNft.prototype, "amount", {
	        /**
	         * @returns the NFT amount
	         * @example
	         * ```
	         * nft.amount // 2
	         * ```
	         */
	        get: function () {
	            return this._data.amount;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNft.prototype, "tokenId", {
	        /**
	         * @returns the token id
	         * @example
	         * ```
	         * nft.tokenId // '1234'
	         * ```
	         */
	        get: function () {
	            return this._data.tokenId;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    var _a;
	    _a = EvmNft;
	    EvmNft.parse = function (data, core) { return (__assign$I(__assign$I({}, data), { chain: EvmChain_1$4.EvmChain.create(data.chain, core), contractType: (0, common_core_1$1a.maybe)(data.contractType), tokenAddress: EvmAddress_1$4.EvmAddress.create(data.tokenAddress, core), metadata: (0, common_core_1$1a.maybe)(data.metadata, _a.validateMetadata), tokenUri: (0, common_core_1$1a.maybe)(data.tokenUri), tokenHash: (0, common_core_1$1a.maybe)(data.tokenHash), name: (0, common_core_1$1a.maybe)(data.name), symbol: (0, common_core_1$1a.maybe)(data.symbol), ownerOf: (0, common_core_1$1a.maybe)(data.ownerOf, function (ownerOf) { return EvmAddress_1$4.EvmAddress.create(ownerOf, core); }), blockNumberMinted: (0, common_core_1$1a.maybe)(data.blockNumberMinted, common_core_1$1a.BigNumber.create), blockNumber: (0, common_core_1$1a.maybe)(data.blockNumber, common_core_1$1a.BigNumber.create), lastMetadataSync: (0, common_core_1$1a.maybe)(data.lastMetadataSync, common_core_1$1a.dateInputToDate), lastTokenUriSync: (0, common_core_1$1a.maybe)(data.lastTokenUriSync, common_core_1$1a.dateInputToDate), amount: (0, common_core_1$1a.maybe)(data.amount, function (value) { return +value; }) })); };
	    /**
	     * This function confirms that the NFT metadata is a valid JSON string.
	     *
	     * @param value - the new value for the NFT metadata
	     * @returns the parsed value of the JSON string
	     * @throws {CoreError} if the value is not a valid JSON string
	     */
	    EvmNft.validateMetadata = function (value) {
	        try {
	            return JSON.parse(value);
	        }
	        catch (error) {
	            throw new common_core_1$1a.CoreError({
	                code: common_core_1$1a.CoreErrorCode.INVALID_ARGUMENT,
	                message: 'Invalid metadata provided, cannot parse the value to JSON',
	            });
	        }
	    };
	    return EvmNft;
	}());
	EvmNft$1.EvmNft = EvmNft;

	var types$l = {};

	Object.defineProperty(types$l, "__esModule", { value: true });

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(EvmNft$1, exports);
		__exportStar(types$l, exports);
		
	} (EvmNft$2));

	var EvmNftCollection$2 = {};

	var EvmNftCollection$1 = {};

	var __assign$H = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$H = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$H.apply(this, arguments);
	};
	Object.defineProperty(EvmNftCollection$1, "__esModule", { value: true });
	EvmNftCollection$1.EvmNftCollection = void 0;
	var common_core_1$19 = lib$9;
	var EvmAddress_1$3 = EvmAddress$2;
	var EvmChain_1$3 = EvmChain$2;
	/**
	 * The EvmNftCollection is a representation of an nft collection.
	 *
	 * @category DataType
	 */
	var EvmNftCollection = /** @class */ (function () {
	    function EvmNftCollection(data, core) {
	        this._data = EvmNftCollection.parse(data, core);
	    }
	    /**
	     * Create a new instance of EvmNftCollection from any valid transaction input
	     * @param data - the EvmNftCollectionish type
	     * @example const collection = EvmTransaction.create(data);
	     */
	    EvmNftCollection.create = function (data, core) {
	        if (data instanceof EvmNftCollection) {
	            return data;
	        }
	        var finalCore = core !== null && core !== void 0 ? core : common_core_1$19.CoreProvider.getDefault();
	        return new EvmNftCollection(data, finalCore);
	    };
	    /**
	     * Check the equality between two Evm collections. It compares their hashes and collections.
	     * @param dataA - The first collection to compare
	     * @param dataB - The second collection to compare
	     * @example EvmNftCollection.equals(dataA, dataB)
	     */
	    EvmNftCollection.equals = function (dataA, dataB) {
	        var collectionA = EvmNftCollection.create(dataA);
	        var collectionB = EvmNftCollection.create(dataB);
	        if (!collectionA.chain.equals(collectionB.chain)) {
	            return false;
	        }
	        if (!collectionA.tokenAddress.equals(collectionB.tokenAddress)) {
	            return false;
	        }
	        return true;
	    };
	    /**
	     * Checks the equality of the current collection with another evm collection
	     * @param data - the collection to compare with
	     * @example
	     * ```ts
	     * collection.equals(data)
	     * ```
	     */
	    EvmNftCollection.prototype.equals = function (data) {
	        return EvmNftCollection.equals(this, data);
	    };
	    /**
	     * @returns a JSON represention of the collection.
	     * @example
	     * ```
	     * collection.toJSON()
	     * ```
	     */
	    EvmNftCollection.prototype.toJSON = function () {
	        var data = this._data;
	        return __assign$H(__assign$H({}, data), { chain: data.chain.format(), tokenAddress: data.tokenAddress.format() });
	    };
	    /**
	     * @returns a JSON represention of the collection.
	     * @example
	     * ```
	     * collection.format()
	     * ```
	     */
	    EvmNftCollection.prototype.format = function () {
	        return this.toJSON();
	    };
	    Object.defineProperty(EvmNftCollection.prototype, "result", {
	        /**
	         * @returns all the data without casting it to JSON.
	         * @example collection.result
	         */
	        get: function () {
	            return this._data;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNftCollection.prototype, "chain", {
	        /**
	         * @returns the chain where the collection is deployed.
	         * @example collection.chain // EvmChain
	         */
	        get: function () {
	            return this._data.chain;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNftCollection.prototype, "tokenAddress", {
	        /**
	         * @returns the token address of collection.
	         * @example collection.tokenAddress // EvmAddress
	         */
	        get: function () {
	            return this._data.tokenAddress;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNftCollection.prototype, "contractType", {
	        /**
	         * @returns the token type of collection.
	         * @example collection.tokenAddress // 'ERC721'
	         */
	        get: function () {
	            return this._data.contractType;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNftCollection.prototype, "name", {
	        /**
	         * @returns the token name of collection.
	         * @example collection.tokenAddress // 'Test NFT'
	         */
	        get: function () {
	            return this._data.name;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNftCollection.prototype, "symbol", {
	        /**
	         * @returns the token symbol of collection.
	         * @example collection.symbol // 'TEST'
	         */
	        get: function () {
	            return this._data.symbol;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    EvmNftCollection.parse = function (data, core) { return (__assign$H(__assign$H({}, data), { tokenAddress: EvmAddress_1$3.EvmAddress.create(data.tokenAddress, core), chain: EvmChain_1$3.EvmChain.create(data.chain, core), contractType: (0, common_core_1$19.maybe)(data.contractType) })); };
	    return EvmNftCollection;
	}());
	EvmNftCollection$1.EvmNftCollection = EvmNftCollection;

	var types$k = {};

	Object.defineProperty(types$k, "__esModule", { value: true });

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(EvmNftCollection$1, exports);
		__exportStar(types$k, exports);
		
	} (EvmNftCollection$2));

	var EvmNftMetadata$2 = {};

	var EvmNftMetadata$1 = {};

	var __assign$G = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$G = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$G.apply(this, arguments);
	};
	Object.defineProperty(EvmNftMetadata$1, "__esModule", { value: true });
	EvmNftMetadata$1.EvmNftMetadata = void 0;
	var common_core_1$18 = lib$9;
	var EvmAddress_1$2 = EvmAddress$2;
	var EvmChain_1$2 = EvmChain$2;
	/**
	 * The EvmNftMetadata contains metadata of an NFT.
	 *
	 * @category DataType
	 */
	var EvmNftMetadata = /** @class */ (function () {
	    function EvmNftMetadata(data) {
	        this._data = EvmNftMetadata.parse(data);
	    }
	    /**
	     *  Create a new instance of EvmNftMetadata from any valid EvmNftMetadata input
	     *
	     * @param data - the EvmNftMetadataish type
	     * @example
	     * ```ts
	     * const token = EvmNftMetadataish.create(value);
	     * ```
	     */
	    EvmNftMetadata.create = function (data) {
	        if (data instanceof EvmNftMetadata) {
	            return data;
	        }
	        return new EvmNftMetadata(data);
	    };
	    /**
	     * Compares two EvmNftMetadata instances. This checks if the chain and tokenAddress of both meatdatas are equal.
	     *
	     * @param dataA - the first EvmNftMetadataish to compare
	     * @param dataB - the second EvmNftMetadataish to compare
	     * @returns true if the two EvmNftMetadataData are equal
	     * @example
	     * ```ts
	     * EvmNftMetadata.equals(dataA, dataB);
	     * ```
	     */
	    EvmNftMetadata.equals = function (dataA, dataB) {
	        var metadataA = EvmNftMetadata.create(dataA);
	        var metadataB = EvmNftMetadata.create(dataB);
	        if (!metadataA._data.chain.equals(metadataB._data.chain)) {
	            return false;
	        }
	        if (!metadataA._data.tokenAddress.equals(metadataB._data.tokenAddress)) {
	            return false;
	        }
	        return true;
	    };
	    /**
	     * Compares EvmNftMetadata instance to current instance
	     *
	     * @param data - the EvmNftMetadataish to compare
	     * @returns true if the EvmNftMetadataish is equals given metadata
	     * @example
	     * ```ts
	     * metadata.equals(data);
	     * ```
	     */
	    EvmNftMetadata.prototype.equals = function (data) {
	        return EvmNftMetadata.equals(this, data);
	    };
	    /**
	     * @returns the data as JSON.
	     * @example metadata.toJSON();
	     */
	    EvmNftMetadata.prototype.toJSON = function () {
	        var data = this._data;
	        return __assign$G(__assign$G({}, data), { chain: data.chain.format(), tokenAddress: data.tokenAddress.format() });
	    };
	    /**
	     * @returns the data as JSON.
	     * @example metadata.format();
	     */
	    EvmNftMetadata.prototype.format = function () {
	        return this.toJSON();
	    };
	    Object.defineProperty(EvmNftMetadata.prototype, "result", {
	        /**
	         * @returns all the data without casting it to JSON.
	         * @example metadata.result;
	         */
	        get: function () {
	            return this._data;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNftMetadata.prototype, "name", {
	        /**
	         * @returns the name in the metadata.
	         * @example metadata.name; // "Baby Ape Mutant Club"
	         */
	        get: function () {
	            return this._data.name;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNftMetadata.prototype, "symbol", {
	        /**
	         * @returns the symbol in the metadata.
	         * @example metadata.symbol; // "BAMC"
	         */
	        get: function () {
	            return this._data.symbol;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNftMetadata.prototype, "contractType", {
	        /**
	         * @returns the contract type of the NFT.
	         * @example metadata.contractType; // "ERC721"
	         */
	        get: function () {
	            return this._data.contractType;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNftMetadata.prototype, "chain", {
	        /**
	         * @returns the chain in the metadata.
	         * @example metadata.chain; // EvmChain
	         */
	        get: function () {
	            return this._data.chain;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNftMetadata.prototype, "tokenAddress", {
	        /**
	         * @returns the token address in the metadata.
	         * @example metadata.tokenAddress; // EvmAddress
	         */
	        get: function () {
	            return this._data.tokenAddress;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNftMetadata.prototype, "syncedAt", {
	        /**
	         * @returns the date the metadata was synced.
	         * @example metadata.syncedAt; // Date
	         */
	        get: function () {
	            return this._data.syncedAt;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    EvmNftMetadata.parse = function (data) { return (__assign$G(__assign$G({}, data), { chain: EvmChain_1$2.EvmChain.create(data.chain), tokenAddress: EvmAddress_1$2.EvmAddress.create(data.tokenAddress), syncedAt: (0, common_core_1$18.maybe)(data.syncedAt, common_core_1$18.dateInputToDate) })); };
	    return EvmNftMetadata;
	}());
	EvmNftMetadata$1.EvmNftMetadata = EvmNftMetadata;

	var types$j = {};

	Object.defineProperty(types$j, "__esModule", { value: true });

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(EvmNftMetadata$1, exports);
		__exportStar(types$j, exports);
		
	} (EvmNftMetadata$2));

	var EvmNftTrade$2 = {};

	var EvmNftTrade$1 = {};

	var __assign$F = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$F = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$F.apply(this, arguments);
	};
	Object.defineProperty(EvmNftTrade$1, "__esModule", { value: true });
	EvmNftTrade$1.EvmNftTrade = void 0;
	var common_core_1$17 = lib$9;
	var EvmAddress_1$1 = EvmAddress$2;
	var EvmChain_1$1 = EvmChain$2;
	var EvmNative_1$1 = EvmNative$2;
	/**
	 * The EvmNftTrade is a representation of a published trade.
	 *
	 * Use this class any time you work with a transaction.
	 *
	 * @category DataType
	 */
	var EvmNftTrade = /** @class */ (function () {
	    function EvmNftTrade(data) {
	        this._data = EvmNftTrade.parse(data);
	    }
	    /**
	     * Create a new instance of EvmNftTrade from any valid transaction input
	     * @param data - the EvmNftTradeish type
	     * @example
	     * ```
	     * const trade = EvmNftTrade.create(data);
	     *```
	     */
	    EvmNftTrade.create = function (data) {
	        if (data instanceof EvmNftTrade) {
	            return data;
	        }
	        return new EvmNftTrade(data);
	    };
	    /**
	     * Check the equality between two Evm trades. It compares the `chain`, `blockNumber`, `transactionIndex` and `transactionHash`
	     * @param dataA - The first trade
	     * @param dataB - The second trade
	     * @example
	     * ```ts
	     * EvmNftTrade.equals(dataA, dataB)
	     * ```
	     * @returns true if the trades are equal, false otherwise
	     */
	    EvmNftTrade.equals = function (dataA, dataB) {
	        var transactionA = EvmNftTrade.create(dataA);
	        var transactionB = EvmNftTrade.create(dataB);
	        if (!transactionA._data.chain.equals(transactionB._data.chain)) {
	            return false;
	        }
	        if (!transactionA._data.blockNumber.equals(transactionB._data.blockNumber)) {
	            return false;
	        }
	        if (transactionA._data.transactionHash !== transactionB._data.transactionHash) {
	            return false;
	        }
	        if (transactionA._data.transactionIndex !== transactionB._data.transactionIndex) {
	            return false;
	        }
	        return true;
	    };
	    /**
	     * Checks the equality of the current trade instance with another evm trade
	     * @param data - the trade to compare with
	     * @example
	     * ```ts
	     * trade.equals(data)
	     * ```
	     * @returns true if the trades are equal, false otherwise
	     */
	    EvmNftTrade.prototype.equals = function (data) {
	        return EvmNftTrade.equals(this, data);
	    };
	    /**
	     * @returns a JSON represention of the trade.
	     * @example
	     * ```
	     * trade.toJSON()
	     * ```
	     */
	    EvmNftTrade.prototype.toJSON = function () {
	        var data = this._data;
	        return __assign$F(__assign$F({}, data), { chain: data.chain.format(), sellerAddress: data.sellerAddress.format(), buyerAddress: data.buyerAddress.format(), marketplaceAddress: data.marketplaceAddress.format(), tokenAddress: data.tokenAddress.format(), priceTokenAddress: data.priceTokenAddress ? data.priceTokenAddress.format() : undefined, blockNumber: data.blockNumber.toString(), price: data.price.toString(), blockTimestamp: data.blockTimestamp.toString() });
	    };
	    /**
	     * @returns a JSON represention of the trade.
	     * @example
	     * ```
	     * trade.format()
	     * ```
	     */
	    EvmNftTrade.prototype.format = function () {
	        return this.toJSON();
	    };
	    Object.defineProperty(EvmNftTrade.prototype, "result", {
	        /**
	         * @returns all the data without casting it to JSON.
	         * @example trade.result
	         */
	        get: function () {
	            return this._data;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNftTrade.prototype, "sellerAddress", {
	        /**
	         * @returns the trade seller address
	         * @example trade.sellerAddress // EvmAddress
	         */
	        get: function () {
	            return this._data.sellerAddress;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNftTrade.prototype, "buyerAddress", {
	        /**
	         * @returns the trade buyer address
	         * @example trade.buyerAddress // EvmAddress
	         */
	        get: function () {
	            return this._data.buyerAddress;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNftTrade.prototype, "marketplaceAddress", {
	        /**
	         * @returns the trade marketplace address
	         * @example trade.marketplaceAddress // EvmAddress
	         */
	        get: function () {
	            return this._data.marketplaceAddress;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNftTrade.prototype, "tokenAddress", {
	        /**
	         * @returns the trade token address
	         * @example trade.tokenAddress // EvmAddress
	         */
	        get: function () {
	            return this._data.tokenAddress;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNftTrade.prototype, "priceTokenAddress", {
	        /**
	         * @returns the trade price token address
	         * @example trade.priceTokenAddress // EvmAddress
	         */
	        get: function () {
	            return this._data.priceTokenAddress;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNftTrade.prototype, "price", {
	        /**
	         * @returns the trade price
	         * @example trade.price // EvmNative
	         */
	        get: function () {
	            return this._data.price;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNftTrade.prototype, "blockNumber", {
	        /**
	         * @returns the trade block number
	         * @example trade.blockNumber // BigNumber
	         */
	        get: function () {
	            return this._data.blockNumber;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNftTrade.prototype, "transactionIndex", {
	        /**
	         * @returns the trade transaction index
	         * @example trade.transactionIndex // 164
	         */
	        get: function () {
	            return this._data.transactionIndex;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNftTrade.prototype, "transactionHash", {
	        /**
	         * @returns the trade transaction hash
	         * @example trade.transactionHash // "0x4de0bcef1450492bd5c2e7693cf644c40005868d0dcc8a7a50a80ef2efa88d1e"
	         */
	        get: function () {
	            return this._data.transactionHash;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNftTrade.prototype, "chain", {
	        /**
	         * @returns the trade chain
	         * @example trade.chain // EvmChain
	         */
	        get: function () {
	            return this._data.chain;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNftTrade.prototype, "tokenIds", {
	        /**
	         * @returns the trade token Ids
	         * @example trade.tokenIds // ["16404"]
	         */
	        get: function () {
	            return this._data.tokenIds;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNftTrade.prototype, "blockHash", {
	        /**
	         * @returns the trade block hash
	         * @example trade.blockHash // "0x4de0bcef1450492bd5c2e7693cf644c40005868d0dcc8a7a50a80ef2efa88d1e"
	         */
	        get: function () {
	            return this._data.blockHash;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNftTrade.prototype, "blockTimestamp", {
	        /**
	         * @returns the trade block timestamp
	         * @example trade.blockTimestamp // Date
	         */
	        get: function () {
	            return this._data.blockTimestamp;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    EvmNftTrade.parse = function (data) { return (__assign$F(__assign$F({}, data), { chain: EvmChain_1$1.EvmChain.create(data.chain), sellerAddress: EvmAddress_1$1.EvmAddress.create(data.sellerAddress), buyerAddress: EvmAddress_1$1.EvmAddress.create(data.buyerAddress), marketplaceAddress: EvmAddress_1$1.EvmAddress.create(data.marketplaceAddress), tokenAddress: EvmAddress_1$1.EvmAddress.create(data.tokenAddress), priceTokenAddress: (0, common_core_1$17.maybe)(data.priceTokenAddress, EvmAddress_1$1.EvmAddress.create), blockNumber: common_core_1$17.BigNumber.create(data.blockNumber), price: EvmNative_1$1.EvmNative.create(data.price), transactionIndex: +data.transactionIndex, blockTimestamp: (0, common_core_1$17.dateInputToDate)(data.blockTimestamp) })); };
	    return EvmNftTrade;
	}());
	EvmNftTrade$1.EvmNftTrade = EvmNftTrade;

	var types$i = {};

	Object.defineProperty(types$i, "__esModule", { value: true });

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(EvmNftTrade$1, exports);
		__exportStar(types$i, exports);
		
	} (EvmNftTrade$2));

	var EvmNftTransfer$2 = {};

	var EvmNftTransfer$1 = {};

	var __assign$E = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$E = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$E.apply(this, arguments);
	};
	Object.defineProperty(EvmNftTransfer$1, "__esModule", { value: true });
	EvmNftTransfer$1.EvmNftTransfer = void 0;
	var common_core_1$16 = lib$9;
	var EvmAddress_1 = EvmAddress$2;
	var EvmChain_1 = EvmChain$2;
	var EvmNative_1 = EvmNative$2;
	/**
	 * The EvmNftTransfer is a representation of a completed NFT transfer.
	 *
	 * @category DataType
	 */
	var EvmNftTransfer = /** @class */ (function () {
	    function EvmNftTransfer(data, core) {
	        this._data = EvmNftTransfer.parse(data, core);
	    }
	    /**
	     * Create a new instance of EvmNftTransfer from any valid transfer input
	     * @param data - the EvmNftTransferish type
	     * @example
	     * ```
	     * const transfer = EvmNftTransfer.create(data);
	     *```
	     */
	    EvmNftTransfer.create = function (data, core) {
	        if (data instanceof EvmNftTransfer) {
	            return data;
	        }
	        var finalCore = core !== null && core !== void 0 ? core : common_core_1$16.CoreProvider.getDefault();
	        return new EvmNftTransfer(data, finalCore);
	    };
	    /**
	     * Check the equality between two NFT transfers. The compares the chain, blockHash, tokenId and logIndex.
	     * @param dataA - The first transfer to compare
	     * @param dataB - The second transfer to compare
	     * @example EvmNftTransfer.equals(dataA, dataB)
	     * @returns true if the transfers are equal, false otherwise
	     */
	    EvmNftTransfer.equals = function (dataA, dataB) {
	        var transferA = EvmNftTransfer.create(dataA);
	        var transferB = EvmNftTransfer.create(dataB);
	        if (!transferA.chain.equals(transferB.chain)) {
	            return false;
	        }
	        if (transferA.blockHash !== transferB.blockHash) {
	            return false;
	        }
	        if (transferA.tokenId !== transferB.tokenId) {
	            return false;
	        }
	        if (transferA.logIndex !== transferB.logIndex) {
	            return false;
	        }
	        return true;
	    };
	    /**
	     * Checks the equality of the current transfer instance with another nft transfer
	     * @param data - the transfer to compare with
	     * @example transaction.equals(data)
	     * @returns true if the transfers are equal, false otherwise
	     */
	    EvmNftTransfer.prototype.equals = function (data) {
	        return EvmNftTransfer.equals(this, data);
	    };
	    /**
	     * @returns a JSON represention of the transfer.
	     * @example
	     * ```
	     * transfer.toJSON()
	     * ```
	     */
	    EvmNftTransfer.prototype.toJSON = function () {
	        var data = this._data;
	        return __assign$E(__assign$E({}, data), { chain: data.chain.format(), fromAddress: data.fromAddress ? data.fromAddress.format() : undefined, toAddress: data.toAddress.format(), tokenAddress: data.tokenAddress.format(), value: data.value ? data.value.format() : undefined, operator: data.operator ? data.operator.format() : undefined, blockNumber: data.blockNumber.toString() });
	    };
	    /**
	     * @returns a JSON represention of the transfer.
	     * @example
	     * ```
	     * transfer.format()
	     * ```
	     */
	    EvmNftTransfer.prototype.format = function () {
	        return this.toJSON();
	    };
	    Object.defineProperty(EvmNftTransfer.prototype, "result", {
	        /**
	         * @returns all the data without casting it to JSON.
	         * @example transfer.result
	         */
	        get: function () {
	            return this._data;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNftTransfer.prototype, "chain", {
	        /**
	         * @returns the chain of the transfer.
	         * @example transfer.chain // EvmChain
	         */
	        get: function () {
	            return this._data.chain;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNftTransfer.prototype, "blockHash", {
	        /**
	         * @returns the block hash of the transfer.
	         * @example transfer.blockHash // "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
	         */
	        get: function () {
	            return this._data.blockHash;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNftTransfer.prototype, "blockNumber", {
	        /**
	         * @returns the block number of the transfer.
	         * @example transfer.blockNumber // BigNumber
	         */
	        get: function () {
	            return this._data.blockNumber;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNftTransfer.prototype, "blockTimestamp", {
	        /**
	         * @returns the block timestamp of the transfer.
	         * @example transfer.blockTimestamp // Date
	         */
	        get: function () {
	            return this._data.blockTimestamp;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNftTransfer.prototype, "fromAddress", {
	        /**
	         * @returns the from address of the transfer.
	         * @example transfer.fromAddress // EvmAddress
	         */
	        get: function () {
	            return this._data.fromAddress;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNftTransfer.prototype, "toAddress", {
	        /**
	         * @returns the to address of the transfer.
	         * @example transfer.toAddress // EvmAddress
	         */
	        get: function () {
	            return this._data.toAddress;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNftTransfer.prototype, "tokenAddress", {
	        /**
	         * @returns the token address of the transfer.
	         * @example transfer.tokenAddress // EvmAddress
	         */
	        get: function () {
	            return this._data.tokenAddress;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNftTransfer.prototype, "tokenId", {
	        /**
	         * @returns the token id of the transfer.
	         * @example transfer.tokenId // "15"
	         */
	        get: function () {
	            return this._data.tokenId;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNftTransfer.prototype, "amount", {
	        /**
	         * @returns the amount of the transfer.
	         * @example transfer.amount // 1
	         */
	        get: function () {
	            return this._data.amount;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNftTransfer.prototype, "value", {
	        /**
	         * @returns the value of the transfer.
	         * @example transfer.value // EvmNative
	         */
	        get: function () {
	            return this._data.value;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNftTransfer.prototype, "logIndex", {
	        /**
	         * @returns the log index of the transfer.
	         * @example transfer.logIndex // 0
	         */
	        get: function () {
	            return this._data.logIndex;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNftTransfer.prototype, "transactionHash", {
	        /**
	         * @returns the transaction hash of the transfer.
	         * @example transfer.transactionHash // "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
	         */
	        get: function () {
	            return this._data.transactionHash;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNftTransfer.prototype, "transactionIndex", {
	        /**
	         * @returns the transaction index of the transfer.
	         * @example transfer.transactionIndex // 123
	         */
	        get: function () {
	            return this._data.transactionIndex;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNftTransfer.prototype, "transactionType", {
	        /**
	         * @returns the transaction type of the transfer.
	         * @example transfer.transactionType // "1"
	         */
	        get: function () {
	            return this._data.transactionType;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNftTransfer.prototype, "operator", {
	        /**
	         * @returns the operator of the transfer.
	         * @example transfer.operator // EvmAddress
	         */
	        get: function () {
	            return this._data.operator;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmNftTransfer.prototype, "contractType", {
	        /**
	         * @returns the contract type of the transfer.
	         * @example transfer.contractType // "ERC721"
	         */
	        get: function () {
	            return this._data.contractType;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    EvmNftTransfer.parse = function (data, core) { return (__assign$E(__assign$E({}, data), { chain: EvmChain_1.EvmChain.create(data.chain, core), amount: (0, common_core_1$16.maybe)(data.amount, function (amount) { return +amount; }), blockNumber: common_core_1$16.BigNumber.create(data.blockNumber), blockTimestamp: (0, common_core_1$16.dateInputToDate)(data.blockTimestamp), transactionIndex: (0, common_core_1$16.maybe)(data.transactionIndex, function (index) { return +index; }), transactionType: (0, common_core_1$16.maybe)(data.transactionType), fromAddress: (0, common_core_1$16.maybe)(data.fromAddress, function (address) { return EvmAddress_1.EvmAddress.create(address, core); }), toAddress: EvmAddress_1.EvmAddress.create(data.toAddress, core), tokenAddress: EvmAddress_1.EvmAddress.create(data.tokenAddress, core), value: (0, common_core_1$16.maybe)(data.value, EvmNative_1.EvmNative.create), operator: (0, common_core_1$16.maybe)(data.operator, function (operator) { return EvmAddress_1.EvmAddress.create(operator, core); }), logIndex: +data.logIndex })); };
	    return EvmNftTransfer;
	}());
	EvmNftTransfer$1.EvmNftTransfer = EvmNftTransfer;

	var types$h = {};

	Object.defineProperty(types$h, "__esModule", { value: true });

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(EvmNftTransfer$1, exports);
		__exportStar(types$h, exports);
		
	} (EvmNftTransfer$2));

	var EvmSignature = {};

	var types$g = {};

	Object.defineProperty(types$g, "__esModule", { value: true });

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(EvmSignature$2, exports);
		__exportStar(types$g, exports);
		
	} (EvmSignature));

	var EvmAbiItem = {};

	Object.defineProperty(EvmAbiItem, "__esModule", { value: true });

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(Erc20$1, exports);
		__exportStar(Erc20Transfer$2, exports);
		__exportStar(Erc20Value$2, exports);
		__exportStar(EvmAddress$2, exports);
		__exportStar(EvmBlock$2, exports);
		__exportStar(EvmBlockDate$2, exports);
		__exportStar(EvmChain$2, exports);
		__exportStar(EvmEvent$2, exports);
		__exportStar(EvmNative$2, exports);
		__exportStar(EvmNft$2, exports);
		__exportStar(EvmNftCollection$2, exports);
		__exportStar(EvmNftMetadata$2, exports);
		__exportStar(EvmNftTrade$2, exports);
		__exportStar(EvmNftTransfer$2, exports);
		__exportStar(EvmSignature, exports);
		__exportStar(EvmTransaction$2, exports);
		__exportStar(EvmTransactionLog$2, exports);
		__exportStar(EvmAbiItem, exports);
		
	} (dataTypes$3));

	var CommonEvmUtils$1 = {};

	var CommonEvmUtilsConfigSetup$1 = {};

	Object.defineProperty(CommonEvmUtilsConfigSetup$1, "__esModule", { value: true });
	CommonEvmUtilsConfigSetup$1.CommonEvmUtilsConfigSetup = void 0;
	var CommonEvmUtilsConfig_1$1 = CommonEvmUtilsConfig;
	var CommonEvmUtilsConfigSetup = /** @class */ (function () {
	    function CommonEvmUtilsConfigSetup() {
	    }
	    CommonEvmUtilsConfigSetup.register = function (config) {
	        config.registerKey(CommonEvmUtilsConfig_1$1.CommonEvmUtilsConfig.formatEvmAddress);
	        config.registerKey(CommonEvmUtilsConfig_1$1.CommonEvmUtilsConfig.formatEvmChainId);
	    };
	    return CommonEvmUtilsConfigSetup;
	}());
	CommonEvmUtilsConfigSetup$1.CommonEvmUtilsConfigSetup = CommonEvmUtilsConfigSetup;

	var __extends$7 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __createBinding$2 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault$2 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar$2 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$2(result, mod, k);
	    __setModuleDefault$2(result, mod);
	    return result;
	};
	Object.defineProperty(CommonEvmUtils$1, "__esModule", { value: true });
	CommonEvmUtils$1.CommonEvmUtils = void 0;
	var common_core_1$15 = lib$9;
	var CommonEvmUtilsConfigSetup_1 = CommonEvmUtilsConfigSetup$1;
	var dataTypes$2 = __importStar$2(dataTypes$3);
	var CommonEvmUtils = /** @class */ (function (_super) {
	    __extends$7(CommonEvmUtils, _super);
	    function CommonEvmUtils(core) {
	        return _super.call(this, CommonEvmUtils.moduleName, core) || this;
	    }
	    CommonEvmUtils.create = function (core) {
	        return new CommonEvmUtils(core !== null && core !== void 0 ? core : common_core_1$15.CoreProvider.getDefault());
	    };
	    CommonEvmUtils.prototype.setup = function () {
	        CommonEvmUtilsConfigSetup_1.CommonEvmUtilsConfigSetup.register(this.core.config);
	    };
	    CommonEvmUtils.prototype.start = function () {
	        // Nothing
	    };
	    Object.defineProperty(CommonEvmUtils.prototype, "EvmAddress", {
	        get: function () {
	            return dataTypes$2.EvmAddress;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(CommonEvmUtils.prototype, "EvmChain", {
	        get: function () {
	            return dataTypes$2.EvmChain;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(CommonEvmUtils.prototype, "EvmNative", {
	        get: function () {
	            return dataTypes$2.EvmNative;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    CommonEvmUtils.moduleName = 'evmUtils';
	    return CommonEvmUtils;
	}(common_core_1$15.Module));
	CommonEvmUtils$1.CommonEvmUtils = CommonEvmUtils;

	var EvmChainResolver$1 = {};

	Object.defineProperty(EvmChainResolver$1, "__esModule", { value: true });
	EvmChainResolver$1.EvmChainResolver = void 0;
	var CommonEvmUtilsConfig_1 = CommonEvmUtilsConfig;
	var dataTypes_1$T = dataTypes$3;
	var EvmChainResolver = /** @class */ (function () {
	    function EvmChainResolver() {
	    }
	    EvmChainResolver.resolve = function (chain, core) {
	        if (chain) {
	            return dataTypes_1$T.EvmChain.create(chain, core);
	        }
	        var defaultEvmChain = core.config.get(CommonEvmUtilsConfig_1.CommonEvmUtilsConfig.defaultEvmApiChain);
	        return dataTypes_1$T.EvmChain.create(defaultEvmChain, core);
	    };
	    return EvmChainResolver;
	}());
	EvmChainResolver$1.EvmChainResolver = EvmChainResolver;

	var operations$6 = {};

	var balance = {};

	var getNativeBalanceOperation = {};

	Object.defineProperty(getNativeBalanceOperation, "__esModule", { value: true });
	getNativeBalanceOperation.getNativeBalanceOperation = void 0;
	var common_core_1$14 = lib$9;
	var dataTypes_1$S = dataTypes$3;
	var EvmChainResolver_1$A = EvmChainResolver$1;
	/** Get the native balance for a specific wallet address. */
	getNativeBalanceOperation.getNativeBalanceOperation = {
	    method: 'GET',
	    name: 'getNativeBalance',
	    id: 'getNativeBalance',
	    groupName: 'balance',
	    urlPathPattern: '/{address}/balance',
	    urlPathParamNames: ['address'],
	    urlSearchParamNames: ['chain', 'toBlock'],
	    getRequestUrlParams: getRequestUrlParams$1i,
	    serializeRequest: serializeRequest$1i,
	    deserializeRequest: deserializeRequest$1i,
	    deserializeResponse: deserializeResponse$1i,
	};
	// Methods
	function getRequestUrlParams$1i(request, core) {
	    return {
	        chain: EvmChainResolver_1$A.EvmChainResolver.resolve(request.chain, core).apiHex,
	        to_block: (0, common_core_1$14.maybe)(request.toBlock, String),
	        address: dataTypes_1$S.EvmAddress.create(request.address, core).checksum,
	    };
	}
	function deserializeResponse$1i(jsonResponse) {
	    return {
	        balance: dataTypes_1$S.EvmNative.create(jsonResponse.balance, 'wei'),
	    };
	}
	function serializeRequest$1i(request, core) {
	    return {
	        chain: EvmChainResolver_1$A.EvmChainResolver.resolve(request.chain, core).apiHex,
	        toBlock: request.toBlock,
	        address: dataTypes_1$S.EvmAddress.create(request.address, core).lowercase,
	    };
	}
	function deserializeRequest$1i(jsonRequest, core) {
	    return {
	        chain: dataTypes_1$S.EvmChain.create(jsonRequest.chain, core),
	        toBlock: jsonRequest.toBlock,
	        address: dataTypes_1$S.EvmAddress.create(jsonRequest.address, core),
	    };
	}

	var getNativeBalancesForAddressesOperation = {};

	Object.defineProperty(getNativeBalancesForAddressesOperation, "__esModule", { value: true });
	getNativeBalancesForAddressesOperation.getNativeBalancesForAddressesOperation = void 0;
	var common_core_1$13 = lib$9;
	var dataTypes_1$R = dataTypes$3;
	var EvmChainResolver_1$z = EvmChainResolver$1;
	/** Get the native balances for a set of specific addresses */
	getNativeBalancesForAddressesOperation.getNativeBalancesForAddressesOperation = {
	    method: 'GET',
	    name: 'getNativeBalancesForAddresses',
	    id: 'getNativeBalancesForAddresses',
	    groupName: 'balance',
	    urlPathPattern: '/wallets/balance',
	    urlSearchParamNames: ['chain', 'providerUrl', 'toBlock', 'walletAddresses'],
	    getRequestUrlParams: getRequestUrlParams$1h,
	    serializeRequest: serializeRequest$1h,
	    deserializeRequest: deserializeRequest$1h,
	    deserializeResponse: deserializeResponse$1h,
	};
	// Methods
	function getRequestUrlParams$1h(request, core) {
	    var _a;
	    return {
	        chain: EvmChainResolver_1$z.EvmChainResolver.resolve(request.chain, core).apiHex,
	        providerUrl: request.providerUrl,
	        to_block: (0, common_core_1$13.maybe)(request.toBlock, String),
	        wallet_addresses: (_a = request.walletAddresses) === null || _a === void 0 ? void 0 : _a.map(function (address) { return dataTypes_1$R.EvmAddress.create(address, core).checksum; }),
	    };
	}
	function deserializeResponse$1h(jsonResponse, request, core) {
	    return (jsonResponse !== null && jsonResponse !== void 0 ? jsonResponse : []).map(function (chainBalances) { return ({
	        chain: EvmChainResolver_1$z.EvmChainResolver.resolve(request.chain, core),
	        blockNumber: chainBalances.block_number,
	        blockTimestamp: chainBalances.block_timestamp,
	        totalBalance: dataTypes_1$R.EvmNative.create(chainBalances.total_balance, 'wei'),
	        walletBalances: chainBalances.wallet_balances.map(function (walletBalance) { return ({
	            address: dataTypes_1$R.EvmAddress.create(walletBalance.address, core),
	            balance: dataTypes_1$R.EvmNative.create(walletBalance.balance, 'wei'),
	        }); }),
	    }); });
	}
	function serializeRequest$1h(request, core) {
	    var _a;
	    return {
	        chain: EvmChainResolver_1$z.EvmChainResolver.resolve(request.chain, core).apiHex,
	        providerUrl: request.providerUrl,
	        toBlock: request.toBlock,
	        walletAddresses: (_a = request.walletAddresses) === null || _a === void 0 ? void 0 : _a.map(function (address) { return dataTypes_1$R.EvmAddress.create(address, core).checksum; }),
	    };
	}
	function deserializeRequest$1h(jsonRequest, core) {
	    var _a;
	    return {
	        chain: EvmChainResolver_1$z.EvmChainResolver.resolve(jsonRequest.chain, core),
	        providerUrl: jsonRequest.providerUrl,
	        toBlock: jsonRequest.toBlock,
	        walletAddresses: (_a = jsonRequest.walletAddresses) === null || _a === void 0 ? void 0 : _a.map(function (address) { return dataTypes_1$R.EvmAddress.create(address, core); }),
	    };
	}

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(getNativeBalanceOperation, exports);
		__exportStar(getNativeBalancesForAddressesOperation, exports);
		
	} (balance));

	var block = {};

	var getBlockOperation = {};

	var __assign$D = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$D = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$D.apply(this, arguments);
	};
	Object.defineProperty(getBlockOperation, "__esModule", { value: true });
	getBlockOperation.getBlockOperation = void 0;
	var common_core_1$12 = lib$9;
	var dataTypes_1$Q = dataTypes$3;
	var EvmChainResolver_1$y = EvmChainResolver$1;
	/** Get the contents of a block given the block hash. */
	getBlockOperation.getBlockOperation = {
	    method: 'GET',
	    name: 'getBlock',
	    id: 'getBlock',
	    groupName: 'block',
	    isNullable: true,
	    urlPathPattern: '/block/{blockNumberOrHash}',
	    urlPathParamNames: ['blockNumberOrHash'],
	    urlSearchParamNames: ['chain'],
	    getRequestUrlParams: getRequestUrlParams$1g,
	    serializeRequest: serializeRequest$1g,
	    deserializeRequest: deserializeRequest$1g,
	    deserializeResponse: deserializeResponse$1g,
	};
	// Methods
	function getRequestUrlParams$1g(request, core) {
	    return {
	        chain: EvmChainResolver_1$y.EvmChainResolver.resolve(request.chain, core).apiHex,
	        blockNumberOrHash: request.blockNumberOrHash,
	    };
	}
	function deserializeResponse$1g(jsonResponse, request, core) {
	    var _a;
	    var data = (0, common_core_1$12.toCamelCase)(jsonResponse);
	    var chain = EvmChainResolver_1$y.EvmChainResolver.resolve(request.chain, core);
	    // TODO: account for changes in api, now we have unknown types for addresses
	    // OR fix the types correctly in api
	    // I noticed that the docs comes with a type of "string | unknown" which automatically resolves to "unknown". I think we should fix this in the api, casting for now
	    return dataTypes_1$Q.EvmBlock.create(__assign$D(__assign$D({}, data), { chain: chain, transactions: ((_a = data.transactions) !== null && _a !== void 0 ? _a : []).map(function (transaction) {
	            var _a;
	            return dataTypes_1$Q.EvmTransaction.create({
	                cumulativeGasUsed: transaction.receiptCumulativeGasUsed,
	                gasPrice: transaction.gasPrice,
	                gasUsed: transaction.receiptGasUsed,
	                index: transaction.transactionIndex,
	                contractAddress: transaction.receiptContractAddress,
	                receiptRoot: transaction.receiptRoot,
	                receiptStatus: +transaction.receiptStatus,
	                chain: chain,
	                data: transaction.input,
	                from: transaction.fromAddress,
	                hash: transaction.hash,
	                nonce: transaction.nonce,
	                value: transaction.value,
	                blockHash: transaction.blockHash,
	                blockNumber: +transaction.blockNumber,
	                blockTimestamp: new Date(transaction.blockTimestamp),
	                gas: transaction.gas,
	                to: transaction.toAddress,
	                logs: ((_a = transaction.logs) !== null && _a !== void 0 ? _a : []).map(function (jsonLog) {
	                    var log = (0, common_core_1$12.toCamelCase)(jsonLog);
	                    return dataTypes_1$Q.EvmTransactionLog.create({
	                        chain: chain,
	                        address: log.address,
	                        blockHash: log.blockHash,
	                        blockNumber: +log.blockNumber,
	                        data: log.data,
	                        topics: [log.topic0, log.topic1, log.topic2, log.topic3],
	                        transactionHash: log.transactionHash,
	                        blockTimestamp: log.blockTimestamp,
	                        logIndex: +log.logIndex,
	                        transactionIndex: +log.transactionIndex,
	                    });
	                }),
	            }, core);
	        }) }), core);
	}
	function serializeRequest$1g(request, core) {
	    return {
	        chain: EvmChainResolver_1$y.EvmChainResolver.resolve(request.chain, core).apiHex,
	        blockNumberOrHash: request.blockNumberOrHash,
	    };
	}
	function deserializeRequest$1g(jsonRequest, core) {
	    return {
	        chain: dataTypes_1$Q.EvmChain.create(jsonRequest.chain, core),
	        blockNumberOrHash: jsonRequest.blockNumberOrHash,
	    };
	}

	var getDateToBlockOperation = {};

	Object.defineProperty(getDateToBlockOperation, "__esModule", { value: true });
	getDateToBlockOperation.getDateToBlockOperation = void 0;
	var dataTypes_1$P = dataTypes$3;
	var EvmChainResolver_1$x = EvmChainResolver$1;
	/** Get the closest block given the date. */
	getDateToBlockOperation.getDateToBlockOperation = {
	    method: 'GET',
	    name: 'getDateToBlock',
	    id: 'getDateToBlock',
	    groupName: 'block',
	    urlPathPattern: '/dateToBlock',
	    urlSearchParamNames: ['chain', 'date'],
	    getRequestUrlParams: getRequestUrlParams$1f,
	    serializeRequest: serializeRequest$1f,
	    deserializeRequest: deserializeRequest$1f,
	    deserializeResponse: deserializeResponse$1f,
	};
	// Methods
	function getRequestUrlParams$1f(request, core) {
	    return {
	        chain: EvmChainResolver_1$x.EvmChainResolver.resolve(request.chain, core).apiHex,
	        date: new Date(request.date).toISOString(),
	    };
	}
	function deserializeResponse$1f(jsonResponse) {
	    return dataTypes_1$P.EvmBlockDate.create(jsonResponse);
	}
	function serializeRequest$1f(request, core) {
	    return {
	        chain: EvmChainResolver_1$x.EvmChainResolver.resolve(request.chain, core).apiHex,
	        date: new Date(request.date).toISOString(),
	    };
	}
	function deserializeRequest$1f(jsonRequest, core) {
	    return {
	        chain: dataTypes_1$P.EvmChain.create(jsonRequest.chain, core),
	        date: new Date(jsonRequest.date),
	    };
	}

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(getBlockOperation, exports);
		__exportStar(getDateToBlockOperation, exports);
		
	} (block));

	var defi = {};

	var getPairAddressOperation = {};

	Object.defineProperty(getPairAddressOperation, "__esModule", { value: true });
	getPairAddressOperation.getPairAddressOperation = void 0;
	var dataTypes_1$O = dataTypes$3;
	var EvmChainResolver_1$w = EvmChainResolver$1;
	/**
	 * Fetch the pair data of the provided token0+token1 combination.
	 * The token0 and token1 options are interchangable (ie. there is no different outcome in "token0=WETH and token1=USDT" or "token0=USDT and token1=WETH")
	 */
	getPairAddressOperation.getPairAddressOperation = {
	    method: 'GET',
	    name: 'getPairAddress',
	    id: 'getPairAddress',
	    groupName: 'defi',
	    urlPathPattern: '/{token0Address}/{token1Address}/pairAddress',
	    urlPathParamNames: ['token0Address', 'token1Address'],
	    urlSearchParamNames: ['chain', 'toBlock', 'toDate', 'exchange'],
	    getRequestUrlParams: getRequestUrlParams$1e,
	    serializeRequest: serializeRequest$1e,
	    deserializeRequest: deserializeRequest$1e,
	    deserializeResponse: deserializeResponse$1e,
	};
	// Methods
	function getRequestUrlParams$1e(request, core) {
	    return {
	        chain: EvmChainResolver_1$w.EvmChainResolver.resolve(request.chain, core).apiHex,
	        to_block: request.toBlock,
	        to_date: request.toDate ? new Date(request.toDate).toISOString() : undefined,
	        exchange: request.exchange,
	        token0Address: dataTypes_1$O.EvmAddress.create(request.token0Address, core).lowercase,
	        token1Address: dataTypes_1$O.EvmAddress.create(request.token1Address, core).lowercase,
	    };
	}
	function createErc20Token(token, core, chain) {
	    var _a, _b, _c;
	    return dataTypes_1$O.Erc20Token.create({
	        contractAddress: (token === null || token === void 0 ? void 0 : token.address) ? dataTypes_1$O.EvmAddress.create(token === null || token === void 0 ? void 0 : token.address, core) : '',
	        decimals: (_a = token === null || token === void 0 ? void 0 : token.decimals) !== null && _a !== void 0 ? _a : 0,
	        name: (_b = token === null || token === void 0 ? void 0 : token.name) !== null && _b !== void 0 ? _b : '',
	        symbol: (_c = token === null || token === void 0 ? void 0 : token.symbol) !== null && _c !== void 0 ? _c : '',
	        logo: token === null || token === void 0 ? void 0 : token.logo,
	        thumbnail: token === null || token === void 0 ? void 0 : token.thumbnail,
	        chain: EvmChainResolver_1$w.EvmChainResolver.resolve(chain, core),
	    }, core);
	}
	function deserializeResponse$1e(jsonResponse, request, core) {
	    var _a, _b, _c, _d, _e, _f, _g, _h;
	    return {
	        //   ApiResult types generated all come as undefined which should not be the case TODO:
	        token0: {
	            token: createErc20Token(jsonResponse.token0, core, request.chain),
	            blockNumber: (_a = jsonResponse.token0) === null || _a === void 0 ? void 0 : _a.block_number,
	            validated: (_b = jsonResponse.token0) === null || _b === void 0 ? void 0 : _b.validated,
	            createdAt: ((_c = jsonResponse.token0) === null || _c === void 0 ? void 0 : _c.created_at) ? new Date((_d = jsonResponse.token0) === null || _d === void 0 ? void 0 : _d.created_at) : undefined,
	        },
	        token1: {
	            token: createErc20Token(jsonResponse.token1, core, request.chain),
	            blockNumber: (_e = jsonResponse.token1) === null || _e === void 0 ? void 0 : _e.block_number,
	            validated: (_f = jsonResponse.token1) === null || _f === void 0 ? void 0 : _f.validated,
	            createdAt: ((_g = jsonResponse.token1) === null || _g === void 0 ? void 0 : _g.created_at) ? new Date((_h = jsonResponse.token1) === null || _h === void 0 ? void 0 : _h.created_at) : undefined,
	        },
	        pairAddress: jsonResponse.pairAddress ? dataTypes_1$O.EvmAddress.create(jsonResponse.pairAddress, core) : undefined,
	    };
	}
	function serializeRequest$1e(request, core) {
	    return {
	        chain: EvmChainResolver_1$w.EvmChainResolver.resolve(request.chain, core).apiHex,
	        toBlock: request.toBlock,
	        toDate: request.toDate ? new Date(request.toDate).toISOString() : undefined,
	        exchange: request.exchange,
	        token0Address: dataTypes_1$O.EvmAddress.create(request.token0Address, core).lowercase,
	        token1Address: dataTypes_1$O.EvmAddress.create(request.token1Address, core).lowercase,
	    };
	}
	function deserializeRequest$1e(jsonRequest, core) {
	    return {
	        chain: dataTypes_1$O.EvmChain.create(jsonRequest.chain, core),
	        toBlock: jsonRequest.toBlock,
	        toDate: jsonRequest.toDate ? new Date(jsonRequest.toDate) : undefined,
	        exchange: jsonRequest.exchange,
	        token0Address: dataTypes_1$O.EvmAddress.create(jsonRequest.token0Address, core),
	        token1Address: dataTypes_1$O.EvmAddress.create(jsonRequest.token1Address, core),
	    };
	}

	var getPairReservesOperation = {};

	Object.defineProperty(getPairReservesOperation, "__esModule", { value: true });
	getPairReservesOperation.getPairReservesOperation = void 0;
	var dataTypes_1$N = dataTypes$3;
	var EvmChainResolver_1$v = EvmChainResolver$1;
	/** Get the liquidity reserves for a given pair address. Only Uniswap V2 based exchanges supported at the moment. */
	getPairReservesOperation.getPairReservesOperation = {
	    method: 'GET',
	    name: 'getPairReserves',
	    id: 'getPairReserves',
	    groupName: 'defi',
	    urlPathPattern: '/{pairAddress}/reserves',
	    urlPathParamNames: ['pairAddress'],
	    urlSearchParamNames: ['chain', 'toBlock', 'toDate'],
	    getRequestUrlParams: getRequestUrlParams$1d,
	    serializeRequest: serializeRequest$1d,
	    deserializeRequest: deserializeRequest$1d,
	    deserializeResponse: deserializeResponse$1d,
	};
	// Methods
	function getRequestUrlParams$1d(request, core) {
	    return {
	        chain: EvmChainResolver_1$v.EvmChainResolver.resolve(request.chain, core).apiHex,
	        pairAddress: dataTypes_1$N.EvmAddress.create(request.pairAddress, core).lowercase,
	        to_block: request.toBlock,
	        to_date: request.toDate ? new Date(request.toDate).toISOString() : undefined,
	    };
	}
	function serializeRequest$1d(request, core) {
	    return {
	        chain: EvmChainResolver_1$v.EvmChainResolver.resolve(request.chain, core).apiHex,
	        toBlock: request.toBlock,
	        toDate: request.toDate ? new Date(request.toDate).toISOString() : undefined,
	        pairAddress: dataTypes_1$N.EvmAddress.create(request.pairAddress, core).lowercase,
	    };
	}
	function deserializeRequest$1d(jsonRequest, core) {
	    return {
	        chain: dataTypes_1$N.EvmChain.create(jsonRequest.chain, core),
	        toBlock: jsonRequest.toBlock,
	        toDate: jsonRequest.toDate ? new Date(jsonRequest.toDate) : undefined,
	        pairAddress: dataTypes_1$N.EvmAddress.create(jsonRequest.pairAddress, core),
	    };
	}
	function deserializeResponse$1d(jsonResponse) {
	    return jsonResponse;
	}

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(getPairAddressOperation, exports);
		__exportStar(getPairReservesOperation, exports);
		
	} (defi));

	var events$1 = {};

	var getContractEventsOperation = {};

	Object.defineProperty(getContractEventsOperation, "__esModule", { value: true });
	getContractEventsOperation.getContractEventsOperation = void 0;
	var common_core_1$11 = lib$9;
	var dataTypes_1$M = dataTypes$3;
	var EvmChainResolver_1$u = EvmChainResolver$1;
	/** Get events for a contract ordered by block number in descending order. */
	getContractEventsOperation.getContractEventsOperation = {
	    method: 'POST',
	    name: 'getContractEvents',
	    id: 'getContractEvents',
	    groupName: 'events',
	    urlPathPattern: '/{address}/events',
	    urlPathParamNames: ['address'],
	    urlSearchParamNames: [
	        'chain',
	        'fromBlock',
	        'toBlock',
	        'fromDate',
	        'toDate',
	        'topic',
	        'offset',
	        'limit',
	        'disableTotal',
	    ],
	    bodyParamNames: ['abi'],
	    bodyType: 'raw',
	    firstPageIndex: 0,
	    getRequestUrlParams: getRequestUrlParams$1c,
	    getRequestBody: getRequestBody$r,
	    serializeRequest: serializeRequest$1c,
	    deserializeRequest: deserializeRequest$1c,
	    deserializeResponse: deserializeResponse$1c,
	};
	// Methods
	function getRequestUrlParams$1c(request, core) {
	    return {
	        chain: EvmChainResolver_1$u.EvmChainResolver.resolve(request.chain, core).apiHex,
	        from_block: (0, common_core_1$11.maybe)(request.fromBlock, String),
	        to_block: (0, common_core_1$11.maybe)(request.toBlock, String),
	        from_date: request.fromDate ? new Date(request.fromDate).toISOString() : undefined,
	        to_date: request.toDate ? new Date(request.toDate).toISOString() : undefined,
	        topic: request.topic,
	        offset: (0, common_core_1$11.maybe)(request.offset, String),
	        limit: (0, common_core_1$11.maybe)(request.limit, String),
	        address: dataTypes_1$M.EvmAddress.create(request.address, core).lowercase,
	        disable_total: request.disableTotal,
	    };
	}
	function getRequestBody$r(request) {
	    return request.abi;
	}
	function deserializeResponse$1c(jsonResponse, request, core) {
	    var _a, _b;
	    return (_b = ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : [])) === null || _b === void 0 ? void 0 : _b.map(function (event) {
	        return dataTypes_1$M.EvmEvent.create({
	            chain: EvmChainResolver_1$u.EvmChainResolver.resolve(request.chain, core),
	            address: request.address,
	            blockHash: event.block_hash,
	            blockNumber: event.block_number,
	            blockTimestamp: event.block_timestamp,
	            transactionHash: event.transaction_hash,
	            data: {
	                to: event.data.to,
	                from: event.data.from,
	                value: event.data.value,
	            },
	        }, core);
	    });
	}
	function serializeRequest$1c(request, core) {
	    return {
	        chain: EvmChainResolver_1$u.EvmChainResolver.resolve(request.chain, core).apiHex,
	        fromBlock: request.fromBlock,
	        toBlock: request.toBlock,
	        fromDate: request.fromDate ? new Date(request.fromDate).toISOString() : undefined,
	        toDate: request.toDate ? new Date(request.toDate).toISOString() : undefined,
	        topic: request.topic,
	        offset: request.offset,
	        limit: request.limit,
	        address: dataTypes_1$M.EvmAddress.create(request.address, core).lowercase,
	        abi: request.abi,
	        disableTotal: request.disableTotal,
	    };
	}
	function deserializeRequest$1c(jsonRequest, core) {
	    return {
	        chain: dataTypes_1$M.EvmChain.create(jsonRequest.chain, core),
	        fromBlock: jsonRequest.fromBlock,
	        toBlock: jsonRequest.toBlock,
	        fromDate: jsonRequest.fromDate ? new Date(jsonRequest.fromDate) : undefined,
	        toDate: jsonRequest.toDate ? new Date(jsonRequest.toDate) : undefined,
	        topic: jsonRequest.topic,
	        offset: jsonRequest.offset,
	        limit: jsonRequest.limit,
	        address: dataTypes_1$M.EvmAddress.create(jsonRequest.address, core),
	        abi: jsonRequest.abi,
	        disableTotal: jsonRequest.disableTotal,
	    };
	}

	var getContractLogsOperation = {};

	var __assign$C = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$C = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$C.apply(this, arguments);
	};
	Object.defineProperty(getContractLogsOperation, "__esModule", { value: true });
	getContractLogsOperation.getContractLogsOperation = void 0;
	var common_core_1$10 = lib$9;
	var dataTypes_1$L = dataTypes$3;
	var EvmChainResolver_1$t = EvmChainResolver$1;
	/** Get the logs for a contract. */
	getContractLogsOperation.getContractLogsOperation = {
	    method: 'GET',
	    name: 'getContractLogs',
	    id: 'getContractLogs',
	    groupName: 'events',
	    urlPathPattern: '/{address}/logs',
	    urlPathParamNames: ['address'],
	    urlSearchParamNames: [
	        'chain',
	        'blockNumber',
	        'fromBlock',
	        'toBlock',
	        'fromDate',
	        'toDate',
	        'topic0',
	        'topic1',
	        'topic2',
	        'topic3',
	        'limit',
	        'cursor',
	        'disableTotal',
	    ],
	    firstPageIndex: 0,
	    getRequestUrlParams: getRequestUrlParams$1b,
	    serializeRequest: serializeRequest$1b,
	    deserializeRequest: deserializeRequest$1b,
	    deserializeResponse: deserializeResponse$1b,
	};
	// Methods
	function getRequestUrlParams$1b(request, core) {
	    return {
	        chain: EvmChainResolver_1$t.EvmChainResolver.resolve(request.chain, core).apiHex,
	        block_number: request.blockNumber,
	        from_block: request.fromBlock,
	        to_block: request.toBlock,
	        from_date: request.fromDate ? new Date(request.fromDate).toISOString() : undefined,
	        to_date: request.toDate ? new Date(request.toDate).toISOString() : undefined,
	        topic0: request.topic0,
	        topic1: request.topic1,
	        topic2: request.topic2,
	        topic3: request.topic3,
	        limit: (0, common_core_1$10.maybe)(request.limit, String),
	        cursor: request.cursor,
	        address: dataTypes_1$L.EvmAddress.create(request.address, core).lowercase,
	        disable_total: request.disableTotal,
	    };
	}
	function serializeRequest$1b(request, core) {
	    return {
	        chain: EvmChainResolver_1$t.EvmChainResolver.resolve(request.chain, core).apiHex,
	        blockNumber: request.blockNumber,
	        fromBlock: request.fromBlock,
	        toBlock: request.toBlock,
	        fromDate: request.fromDate ? new Date(request.fromDate).toISOString() : undefined,
	        toDate: request.toDate ? new Date(request.toDate).toISOString() : undefined,
	        topic0: request.topic0,
	        topic1: request.topic1,
	        topic2: request.topic2,
	        topic3: request.topic3,
	        limit: request.limit,
	        cursor: request.cursor,
	        address: dataTypes_1$L.EvmAddress.create(request.address, core).lowercase,
	        disableTotal: request.disableTotal,
	    };
	}
	function deserializeRequest$1b(jsonRequest, core) {
	    return {
	        chain: dataTypes_1$L.EvmChain.create(jsonRequest.chain, core),
	        blockNumber: jsonRequest.blockNumber,
	        fromBlock: jsonRequest.fromBlock,
	        toBlock: jsonRequest.toBlock,
	        fromDate: jsonRequest.fromDate ? new Date(jsonRequest.fromDate) : undefined,
	        toDate: jsonRequest.toDate ? new Date(jsonRequest.toDate) : undefined,
	        topic0: jsonRequest.topic0,
	        topic1: jsonRequest.topic1,
	        topic2: jsonRequest.topic2,
	        topic3: jsonRequest.topic3,
	        limit: jsonRequest.limit,
	        cursor: jsonRequest.cursor,
	        address: dataTypes_1$L.EvmAddress.create(jsonRequest.address, core),
	        disableTotal: jsonRequest.disableTotal,
	    };
	}
	function deserializeResponse$1b(jsonResponse, request, core) {
	    var _a, _b;
	    return (_b = ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : [])) === null || _b === void 0 ? void 0 : _b.map(function (log) {
	        return dataTypes_1$L.EvmTransactionLog.create(__assign$C(__assign$C({}, (0, common_core_1$10.toCamelCase)(log)), { topics: [log.topic0, log.topic1, log.topic2, log.topic3], blockNumber: Number(log.block_number), chain: EvmChainResolver_1$t.EvmChainResolver.resolve(request.chain, core) }), core);
	    });
	}

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(getContractEventsOperation, exports);
		__exportStar(getContractLogsOperation, exports);
		
	} (events$1));

	var ipfs = {};

	var uploadFolderOperation = {};

	Object.defineProperty(uploadFolderOperation, "__esModule", { value: true });
	uploadFolderOperation.uploadFolderOperation = void 0;
	/** Upload multiple files to IPFS and place them in a folder directory. */
	uploadFolderOperation.uploadFolderOperation = {
	    method: 'POST',
	    name: 'uploadFolder',
	    id: 'uploadFolder',
	    groupName: 'ipfs',
	    urlPathPattern: '/ipfs/uploadFolder',
	    bodyType: 'raw',
	    bodyParamNames: ['abi'],
	    getRequestUrlParams: getRequestUrlParams$1a,
	    serializeRequest: serializeRequest$1a,
	    deserializeRequest: deserializeRequest$1a,
	    deserializeResponse: deserializeResponse$1a,
	    getRequestBody: getRequestBody$q,
	};
	// Methods
	function getRequestUrlParams$1a(_) {
	    return {};
	}
	function getRequestBody$q(request) {
	    return request.abi;
	}
	function deserializeResponse$1a(jsonResponse) {
	    return jsonResponse;
	}
	function serializeRequest$1a(request) {
	    return {
	        abi: JSON.stringify(request.abi),
	    };
	}
	function deserializeRequest$1a(jsonRequest) {
	    return {
	        abi: JSON.parse(jsonRequest.abi),
	    };
	}

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(uploadFolderOperation, exports);
		
	} (ipfs));

	var nft = {};

	var getContractNFTsOperation = {};

	var __assign$B = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$B = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$B.apply(this, arguments);
	};
	Object.defineProperty(getContractNFTsOperation, "__esModule", { value: true });
	getContractNFTsOperation.getContractNFTsOperation = void 0;
	var common_core_1$$ = lib$9;
	var dataTypes_1$K = dataTypes$3;
	var EvmChainResolver_1$s = EvmChainResolver$1;
	/**
	 * Get NFTs for a given contract address, including metadata for all NFTs (where available).
	 * * Results are limited to 100 per page by default
	 * * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection.
	 */
	getContractNFTsOperation.getContractNFTsOperation = {
	    method: 'GET',
	    name: 'getContractNFTs',
	    id: 'getContractNFTs',
	    groupName: 'nft',
	    urlPathPattern: '/nft/{address}',
	    urlPathParamNames: ['address'],
	    urlSearchParamNames: [
	        'chain',
	        'format',
	        'limit',
	        'totalRanges',
	        'range',
	        'cursor',
	        'normalizeMetadata',
	        'disableTotal',
	    ],
	    firstPageIndex: 0,
	    getRequestUrlParams: getRequestUrlParams$19,
	    serializeRequest: serializeRequest$19,
	    deserializeRequest: deserializeRequest$19,
	    deserializeResponse: deserializeResponse$19,
	};
	// Methods
	function getRequestUrlParams$19(request, core) {
	    return {
	        chain: EvmChainResolver_1$s.EvmChainResolver.resolve(request.chain, core).apiHex,
	        address: dataTypes_1$K.EvmAddress.create(request.address, core).lowercase,
	        format: request.format,
	        limit: (0, common_core_1$$.maybe)(request.limit, String),
	        totalRanges: (0, common_core_1$$.maybe)(request.totalRanges, String),
	        range: (0, common_core_1$$.maybe)(request.range, String),
	        cursor: request.cursor,
	        normalizeMetadata: request.normalizeMetadata,
	        disable_total: request.disableTotal,
	    };
	}
	function deserializeResponse$19(jsonResponse, request, core) {
	    var _a;
	    return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (nft) {
	        return dataTypes_1$K.EvmNft.create(__assign$B(__assign$B({}, (0, common_core_1$$.toCamelCase)(nft)), { chain: EvmChainResolver_1$s.EvmChainResolver.resolve(request.chain, core), ownerOf: nft.owner_of ? dataTypes_1$K.EvmAddress.create(nft.owner_of, core) : undefined, lastMetadataSync: nft.last_metadata_sync ? new Date(nft.last_metadata_sync) : undefined, lastTokenUriSync: nft.last_token_uri_sync ? new Date(nft.last_token_uri_sync) : undefined }), core);
	    });
	}
	function serializeRequest$19(request, core) {
	    return {
	        chain: EvmChainResolver_1$s.EvmChainResolver.resolve(request.chain, core).apiHex,
	        format: request.format,
	        limit: request.limit,
	        totalRanges: request.totalRanges,
	        range: request.range,
	        cursor: request.cursor,
	        address: dataTypes_1$K.EvmAddress.create(request.address, core).checksum,
	        normalizeMetadata: request.normalizeMetadata,
	        disableTotal: request.disableTotal,
	    };
	}
	function deserializeRequest$19(jsonRequest, core) {
	    return {
	        chain: dataTypes_1$K.EvmChain.create(jsonRequest.chain, core),
	        format: jsonRequest.format,
	        limit: jsonRequest.limit,
	        totalRanges: jsonRequest.totalRanges,
	        range: jsonRequest.range,
	        cursor: jsonRequest.cursor,
	        address: dataTypes_1$K.EvmAddress.create(jsonRequest.address, core),
	        normalizeMetadata: jsonRequest.normalizeMetadata,
	        disableTotal: jsonRequest.disableTotal,
	    };
	}

	var getMultipleNFTsOperation = {};

	var __assign$A = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$A = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$A.apply(this, arguments);
	};
	Object.defineProperty(getMultipleNFTsOperation, "__esModule", { value: true });
	getMultipleNFTsOperation.getMultipleNFTsOperation = void 0;
	var common_core_1$_ = lib$9;
	var dataTypes_1$J = dataTypes$3;
	var EvmChainResolver_1$r = EvmChainResolver$1;
	/**
	 * Get NFTs for a given contract address, including metadata for all NFTs (where available).
	 * * Results are limited to 100 per page by default
	 * * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection.
	 */
	getMultipleNFTsOperation.getMultipleNFTsOperation = {
	    method: 'POST',
	    name: 'getMultipleNFTs',
	    id: 'getMultipleNFTs',
	    groupName: 'nft',
	    urlPathPattern: '/nft/getMultipleNFTs',
	    urlSearchParamNames: ['chain'],
	    bodyType: 'properties',
	    bodyParamNames: ['tokens', 'normalizeMetadata'],
	    getRequestUrlParams: getRequestUrlParams$18,
	    getRequestBody: getRequestBody$p,
	    serializeRequest: serializeRequest$18,
	    deserializeRequest: deserializeRequest$18,
	    deserializeResponse: deserializeResponse$18,
	};
	// Methods
	function getRequestUrlParams$18(request, core) {
	    return {
	        chain: EvmChainResolver_1$r.EvmChainResolver.resolve(request.chain, core).apiHex,
	    };
	}
	function getRequestBody$p(request, core) {
	    return {
	        tokens: request.tokens.map(function (token) { return ({
	            token_address: dataTypes_1$J.EvmAddress.create(token.tokenAddress, core).lowercase,
	            token_id: token.tokenId,
	        }); }),
	        normalizeMetadata: request.normalizeMetadata,
	    };
	}
	function deserializeResponse$18(jsonResponse, request, core) {
	    return (jsonResponse !== null && jsonResponse !== void 0 ? jsonResponse : []).map(function (nft) {
	        if (nft === null) {
	            return null;
	        }
	        return dataTypes_1$J.EvmNft.create(__assign$A(__assign$A({}, (0, common_core_1$_.toCamelCase)(nft)), { chain: EvmChainResolver_1$r.EvmChainResolver.resolve(request.chain, core), amount: nft.amount ? parseInt(nft.amount, 10) : undefined, ownerOf: dataTypes_1$J.EvmAddress.create(nft.owner_of, core), lastMetadataSync: (0, common_core_1$_.dateInputToDate)(nft.last_metadata_sync), lastTokenUriSync: (0, common_core_1$_.dateInputToDate)(nft.last_token_uri_sync) }), core);
	    });
	}
	function serializeRequest$18(request, core) {
	    return {
	        chain: EvmChainResolver_1$r.EvmChainResolver.resolve(request.chain, core).apiHex,
	        normalizeMetadata: request.normalizeMetadata,
	        tokens: request.tokens.map(function (token) { return ({
	            tokenAddress: dataTypes_1$J.EvmAddress.create(token.tokenAddress, core).lowercase,
	            tokenId: token.tokenId,
	        }); }),
	    };
	}
	function deserializeRequest$18(jsonRequest, core) {
	    return {
	        chain: dataTypes_1$J.EvmChain.create(jsonRequest.chain, core),
	        normalizeMetadata: jsonRequest.normalizeMetadata,
	        tokens: jsonRequest.tokens.map(function (token) { return ({
	            tokenAddress: dataTypes_1$J.EvmAddress.create(token.tokenAddress, core),
	            tokenId: token.tokenId,
	        }); }),
	    };
	}

	var getNFTContractMetadataOperation = {};

	var __assign$z = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$z = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$z.apply(this, arguments);
	};
	Object.defineProperty(getNFTContractMetadataOperation, "__esModule", { value: true });
	getNFTContractMetadataOperation.getNFTContractMetadataOperation = void 0;
	var common_core_1$Z = lib$9;
	var dataTypes_1$I = dataTypes$3;
	var EvmChainResolver_1$q = EvmChainResolver$1;
	/**
	 * Get the collection / contract level metadata for a given contract (name, symbol, base token uri).
	 * * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection
	 */
	getNFTContractMetadataOperation.getNFTContractMetadataOperation = {
	    method: 'GET',
	    name: 'getNFTContractMetadata',
	    id: 'getNFTContractMetadata',
	    groupName: 'nft',
	    isNullable: true,
	    urlPathPattern: '/nft/{address}/metadata',
	    urlPathParamNames: ['address'],
	    urlSearchParamNames: ['chain'],
	    getRequestUrlParams: getRequestUrlParams$17,
	    serializeRequest: serializeRequest$17,
	    deserializeRequest: deserializeRequest$17,
	    deserializeResponse: deserializeResponse$17,
	};
	// Methods
	function getRequestUrlParams$17(request, core) {
	    return {
	        chain: EvmChainResolver_1$q.EvmChainResolver.resolve(request.chain, core).apiHex,
	        address: dataTypes_1$I.EvmAddress.create(request.address, core).lowercase,
	    };
	}
	function deserializeResponse$17(jsonResponse, request, core) {
	    return dataTypes_1$I.EvmNftMetadata.create(__assign$z(__assign$z({}, (0, common_core_1$Z.toCamelCase)(jsonResponse)), { chain: EvmChainResolver_1$q.EvmChainResolver.resolve(request.chain, core), tokenAddress: dataTypes_1$I.EvmAddress.create(jsonResponse.token_address, core), syncedAt: jsonResponse.synced_at ? new Date(jsonResponse.synced_at) : null, contractType: (0, common_core_1$Z.maybe)(jsonResponse.contract_type) }));
	}
	function serializeRequest$17(request, core) {
	    return {
	        chain: EvmChainResolver_1$q.EvmChainResolver.resolve(request.chain, core).apiHex,
	        address: dataTypes_1$I.EvmAddress.create(request.address, core).checksum,
	    };
	}
	function deserializeRequest$17(jsonRequest, core) {
	    return {
	        chain: dataTypes_1$I.EvmChain.create(jsonRequest.chain, core),
	        address: dataTypes_1$I.EvmAddress.create(jsonRequest.address, core),
	    };
	}

	var getNFTContractTransfersOperation = {};

	var __assign$y = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$y = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$y.apply(this, arguments);
	};
	Object.defineProperty(getNFTContractTransfersOperation, "__esModule", { value: true });
	getNFTContractTransfersOperation.getNFTContractTransfersOperation = void 0;
	var common_core_1$Y = lib$9;
	var dataTypes_1$H = dataTypes$3;
	var EvmChainResolver_1$p = EvmChainResolver$1;
	/** Get transfers of NFTs for a given contract and other parameters. */
	getNFTContractTransfersOperation.getNFTContractTransfersOperation = {
	    method: 'GET',
	    name: 'getNFTContractTransfers',
	    id: 'getNFTContractTransfers',
	    groupName: 'nft',
	    urlPathPattern: '/nft/{address}/transfers',
	    urlPathParamNames: ['address'],
	    urlSearchParamNames: [
	        'chain',
	        'format',
	        'limit',
	        'cursor',
	        'fromBlock',
	        'fromDate',
	        'toBlock',
	        'toDate',
	        'disableTotal',
	    ],
	    firstPageIndex: 0,
	    getRequestUrlParams: getRequestUrlParams$16,
	    serializeRequest: serializeRequest$16,
	    deserializeRequest: deserializeRequest$16,
	    deserializeResponse: deserializeResponse$16,
	};
	// Methods
	function getRequestUrlParams$16(request, core) {
	    return {
	        chain: EvmChainResolver_1$p.EvmChainResolver.resolve(request.chain, core).apiHex,
	        address: dataTypes_1$H.EvmAddress.create(request.address, core).lowercase,
	        format: request.format,
	        limit: (0, common_core_1$Y.maybe)(request.limit, String),
	        from_block: (0, common_core_1$Y.maybe)(request.fromBlock, String),
	        from_date: request.fromDate ? new Date(request.fromDate).toISOString() : undefined,
	        to_block: (0, common_core_1$Y.maybe)(request.toBlock, String),
	        to_date: request.toDate ? new Date(request.toDate).toISOString() : undefined,
	        cursor: request.cursor,
	        disable_total: request.disableTotal,
	    };
	}
	function deserializeResponse$16(jsonResponse, request, core) {
	    var _a;
	    return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (transfer) {
	        return dataTypes_1$H.EvmNftTransfer.create(__assign$y(__assign$y({}, (0, common_core_1$Y.toCamelCase)(transfer)), { chain: EvmChainResolver_1$p.EvmChainResolver.resolve(request.chain, core), tokenAddress: dataTypes_1$H.EvmAddress.create(transfer.to_address, core), toAddress: dataTypes_1$H.EvmAddress.create(transfer.to_address, core), operator: transfer.operator ? dataTypes_1$H.EvmAddress.create(transfer.operator, core) : null, fromAddress: transfer.from_address ? dataTypes_1$H.EvmAddress.create(transfer.from_address, core) : null, value: transfer.value ? dataTypes_1$H.EvmNative.create(transfer.value) : null, blockTimestamp: new Date(transfer.block_timestamp) }), core);
	    });
	}
	function serializeRequest$16(request, core) {
	    return {
	        chain: EvmChainResolver_1$p.EvmChainResolver.resolve(request.chain, core).apiHex,
	        format: request.format,
	        limit: request.limit,
	        cursor: request.cursor,
	        address: dataTypes_1$H.EvmAddress.create(request.address, core).checksum,
	        fromBlock: request.fromBlock,
	        toBlock: request.toBlock,
	        fromDate: request.fromDate ? new Date(request.fromDate).toISOString() : undefined,
	        toDate: request.toDate ? new Date(request.toDate).toISOString() : undefined,
	        disableTotal: request.disableTotal,
	    };
	}
	function deserializeRequest$16(jsonRequest, core) {
	    return {
	        chain: dataTypes_1$H.EvmChain.create(jsonRequest.chain, core),
	        format: jsonRequest.format,
	        limit: jsonRequest.limit,
	        cursor: jsonRequest.cursor,
	        address: dataTypes_1$H.EvmAddress.create(jsonRequest.address, core),
	        fromBlock: jsonRequest.fromBlock,
	        toBlock: jsonRequest.toBlock,
	        fromDate: jsonRequest.fromDate ? new Date(jsonRequest.fromDate) : undefined,
	        toDate: jsonRequest.toDate ? new Date(jsonRequest.toDate) : undefined,
	        disableTotal: jsonRequest.disableTotal,
	    };
	}

	var getNFTLowestPriceOperation = {};

	var __assign$x = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$x = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$x.apply(this, arguments);
	};
	Object.defineProperty(getNFTLowestPriceOperation, "__esModule", { value: true });
	getNFTLowestPriceOperation.getNFTLowestPriceOperation = void 0;
	var common_core_1$X = lib$9;
	var dataTypes_1$G = dataTypes$3;
	var EvmChainResolver_1$o = EvmChainResolver$1;
	/** Get the lowest executed price for an NFT contract for the last x days (only trades paid in ETH). */
	getNFTLowestPriceOperation.getNFTLowestPriceOperation = {
	    method: 'GET',
	    name: 'getNFTLowestPrice',
	    id: 'getNFTLowestPrice',
	    groupName: 'nft',
	    isNullable: true,
	    urlPathPattern: '/nft/{address}/lowestprice',
	    urlPathParamNames: ['address'],
	    urlSearchParamNames: ['chain', 'days', 'marketplace'],
	    getRequestUrlParams: getRequestUrlParams$15,
	    serializeRequest: serializeRequest$15,
	    deserializeRequest: deserializeRequest$15,
	    deserializeResponse: deserializeResponse$15,
	};
	// Methods
	function getRequestUrlParams$15(request, core) {
	    return {
	        chain: EvmChainResolver_1$o.EvmChainResolver.resolve(request.chain, core).apiHex,
	        address: dataTypes_1$G.EvmAddress.create(request.address, core).lowercase,
	        days: (0, common_core_1$X.maybe)(request.days, String),
	        marketplace: request.marketplace,
	    };
	}
	function deserializeResponse$15(jsonResponse, request, core) {
	    return dataTypes_1$G.EvmNftTrade.create(__assign$x(__assign$x({}, (0, common_core_1$X.toCamelCase)(jsonResponse)), { chain: EvmChainResolver_1$o.EvmChainResolver.resolve(request.chain, core), sellerAddress: dataTypes_1$G.EvmAddress.create(jsonResponse.seller_address, core), buyerAddress: dataTypes_1$G.EvmAddress.create(jsonResponse.buyer_address, core), marketplaceAddress: dataTypes_1$G.EvmAddress.create(jsonResponse.marketplace_address, core), tokenAddress: dataTypes_1$G.EvmAddress.create(jsonResponse.token_address, core), price: dataTypes_1$G.EvmNative.create(jsonResponse.price, 'wei'), blockTimestamp: new Date(jsonResponse.block_timestamp), tokenIds: jsonResponse.token_ids }));
	}
	function serializeRequest$15(request, core) {
	    return {
	        chain: EvmChainResolver_1$o.EvmChainResolver.resolve(request.chain, core).apiHex,
	        days: request.days,
	        marketplace: request.marketplace,
	        address: dataTypes_1$G.EvmAddress.create(request.address, core).checksum,
	    };
	}
	function deserializeRequest$15(jsonRequest, core) {
	    return {
	        chain: dataTypes_1$G.EvmChain.create(jsonRequest.chain, core),
	        days: jsonRequest.days,
	        marketplace: jsonRequest.marketplace,
	        address: dataTypes_1$G.EvmAddress.create(jsonRequest.address, core),
	    };
	}

	var getNFTMetadataOperation$1 = {};

	var __assign$w = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$w = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$w.apply(this, arguments);
	};
	Object.defineProperty(getNFTMetadataOperation$1, "__esModule", { value: true });
	getNFTMetadataOperation$1.getNFTMetadataOperation = void 0;
	var common_core_1$W = lib$9;
	var dataTypes_1$F = dataTypes$3;
	var EvmChainResolver_1$n = EvmChainResolver$1;
	/**
	 * Get NFT data, including metadata (where available), for the given NFT token ID and contract address.
	 * * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection
	 */
	getNFTMetadataOperation$1.getNFTMetadataOperation = {
	    method: 'GET',
	    name: 'getNFTMetadata',
	    id: 'getNFTMetadata',
	    groupName: 'nft',
	    isNullable: true,
	    urlPathPattern: '/nft/{address}/{tokenId}',
	    urlPathParamNames: ['address', 'tokenId'],
	    urlSearchParamNames: ['chain', 'format', 'normalizeMetadata'],
	    getRequestUrlParams: getRequestUrlParams$14,
	    serializeRequest: serializeRequest$14,
	    deserializeRequest: deserializeRequest$14,
	    deserializeResponse: deserializeResponse$14,
	};
	// Methods
	function getRequestUrlParams$14(request, core) {
	    return {
	        chain: EvmChainResolver_1$n.EvmChainResolver.resolve(request.chain, core).apiHex,
	        address: dataTypes_1$F.EvmAddress.create(request.address, core).lowercase,
	        tokenId: request.tokenId,
	        format: request.format,
	        normalizeMetadata: request.normalizeMetadata,
	    };
	}
	function deserializeResponse$14(jsonResponse, request, core) {
	    return dataTypes_1$F.EvmNft.create(__assign$w(__assign$w({}, (0, common_core_1$W.toCamelCase)(jsonResponse)), { chain: EvmChainResolver_1$n.EvmChainResolver.resolve(request.chain, core), ownerOf: jsonResponse.owner_of ? dataTypes_1$F.EvmAddress.create(jsonResponse.owner_of, core) : undefined, lastMetadataSync: jsonResponse.last_metadata_sync ? new Date(jsonResponse.last_metadata_sync) : undefined, lastTokenUriSync: jsonResponse.last_token_uri_sync ? new Date(jsonResponse.last_token_uri_sync) : undefined }), core);
	}
	function serializeRequest$14(request, core) {
	    return {
	        chain: EvmChainResolver_1$n.EvmChainResolver.resolve(request.chain, core).apiHex,
	        format: request.format,
	        address: dataTypes_1$F.EvmAddress.create(request.address, core).checksum,
	        tokenId: request.tokenId,
	        normalizeMetadata: request.normalizeMetadata,
	    };
	}
	function deserializeRequest$14(jsonRequest, core) {
	    return {
	        chain: dataTypes_1$F.EvmChain.create(jsonRequest.chain, core),
	        format: jsonRequest.format,
	        address: dataTypes_1$F.EvmAddress.create(jsonRequest.address, core),
	        tokenId: jsonRequest.tokenId,
	        normalizeMetadata: jsonRequest.normalizeMetadata,
	    };
	}

	var getNFTOwnersOperation = {};

	var __assign$v = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$v = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$v.apply(this, arguments);
	};
	Object.defineProperty(getNFTOwnersOperation, "__esModule", { value: true });
	getNFTOwnersOperation.getNFTOwnersOperation = void 0;
	var common_core_1$V = lib$9;
	var dataTypes_1$E = dataTypes$3;
	var EvmChainResolver_1$m = EvmChainResolver$1;
	/**
	 * Get owners of NFTs for a given contract.
	 * * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection.
	 */
	getNFTOwnersOperation.getNFTOwnersOperation = {
	    method: 'GET',
	    name: 'getNFTOwners',
	    id: 'getNFTOwners',
	    groupName: 'nft',
	    urlPathPattern: '/nft/{address}/owners',
	    urlPathParamNames: ['address'],
	    urlSearchParamNames: ['chain', 'format', 'limit', 'cursor', 'normalizeMetadata', 'disableTotal'],
	    firstPageIndex: 1,
	    getRequestUrlParams: getRequestUrlParams$13,
	    serializeRequest: serializeRequest$13,
	    deserializeRequest: deserializeRequest$13,
	    deserializeResponse: deserializeResponse$13,
	};
	// Methods
	function getRequestUrlParams$13(request, core) {
	    return {
	        chain: EvmChainResolver_1$m.EvmChainResolver.resolve(request.chain, core).apiHex,
	        address: dataTypes_1$E.EvmAddress.create(request.address, core).lowercase,
	        format: request.format,
	        limit: (0, common_core_1$V.maybe)(request.limit, String),
	        cursor: request.cursor,
	        normalizeMetadata: request.normalizeMetadata,
	        disable_total: request.disableTotal,
	    };
	}
	function deserializeResponse$13(jsonResponse, request, core) {
	    var _a;
	    return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (nft) {
	        return dataTypes_1$E.EvmNft.create(__assign$v(__assign$v({}, (0, common_core_1$V.toCamelCase)(nft)), { chain: EvmChainResolver_1$m.EvmChainResolver.resolve(request.chain, core), ownerOf: dataTypes_1$E.EvmAddress.create(nft.owner_of, core), lastMetadataSync: new Date(nft.last_metadata_sync), lastTokenUriSync: new Date(nft.last_token_uri_sync) }), core);
	    });
	}
	function serializeRequest$13(request, core) {
	    return {
	        chain: EvmChainResolver_1$m.EvmChainResolver.resolve(request.chain, core).apiHex,
	        format: request.format,
	        limit: request.limit,
	        cursor: request.cursor,
	        address: dataTypes_1$E.EvmAddress.create(request.address, core).checksum,
	        normalizeMetadata: request.normalizeMetadata,
	        disableTotal: request.disableTotal,
	    };
	}
	function deserializeRequest$13(jsonRequest, core) {
	    return {
	        chain: dataTypes_1$E.EvmChain.create(jsonRequest.chain, core),
	        format: jsonRequest.format,
	        limit: jsonRequest.limit,
	        cursor: jsonRequest.cursor,
	        address: dataTypes_1$E.EvmAddress.create(jsonRequest.address, core),
	        normalizeMetadata: jsonRequest.normalizeMetadata,
	        disableTotal: jsonRequest.disableTotal,
	    };
	}

	var getNFTTokenIdOwnersOperation = {};

	var __assign$u = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$u = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$u.apply(this, arguments);
	};
	Object.defineProperty(getNFTTokenIdOwnersOperation, "__esModule", { value: true });
	getNFTTokenIdOwnersOperation.getNFTTokenIdOwnersOperation = void 0;
	var common_core_1$U = lib$9;
	var dataTypes_1$D = dataTypes$3;
	var EvmChainResolver_1$l = EvmChainResolver$1;
	/**
	 * Get owners of a specific NFT given the contract address and token ID.
	 * * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection
	 */
	getNFTTokenIdOwnersOperation.getNFTTokenIdOwnersOperation = {
	    method: 'GET',
	    name: 'getNFTTokenIdOwners',
	    id: 'getNFTTokenIdOwners',
	    groupName: 'nft',
	    urlPathPattern: '/nft/{address}/{tokenId}/owners',
	    urlPathParamNames: ['address', 'tokenId'],
	    urlSearchParamNames: ['chain', 'format', 'limit', 'cursor', 'normalizeMetadata', 'disableTotal'],
	    firstPageIndex: 1,
	    getRequestUrlParams: getRequestUrlParams$12,
	    serializeRequest: serializeRequest$12,
	    deserializeRequest: deserializeRequest$12,
	    deserializeResponse: deserializeResponse$12,
	};
	// Methods
	function getRequestUrlParams$12(request, core) {
	    return {
	        chain: EvmChainResolver_1$l.EvmChainResolver.resolve(request.chain, core).apiHex,
	        address: dataTypes_1$D.EvmAddress.create(request.address, core).lowercase,
	        format: request.format,
	        limit: (0, common_core_1$U.maybe)(request.limit, String),
	        cursor: request.cursor,
	        tokenId: request.tokenId,
	        normalizeMetadata: request.normalizeMetadata,
	        disable_total: request.disableTotal,
	    };
	}
	function deserializeResponse$12(jsonResponse, request, core) {
	    var _a;
	    return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (nft) {
	        return dataTypes_1$D.EvmNft.create(__assign$u(__assign$u({}, (0, common_core_1$U.toCamelCase)(nft)), { chain: EvmChainResolver_1$l.EvmChainResolver.resolve(request.chain, core), ownerOf: dataTypes_1$D.EvmAddress.create(nft.owner_of, core), lastMetadataSync: new Date(nft.last_metadata_sync), lastTokenUriSync: new Date(nft.last_token_uri_sync) }));
	    });
	}
	function serializeRequest$12(request, core) {
	    return {
	        chain: EvmChainResolver_1$l.EvmChainResolver.resolve(request.chain, core).apiHex,
	        format: request.format,
	        limit: request.limit,
	        cursor: request.cursor,
	        address: dataTypes_1$D.EvmAddress.create(request.address, core).checksum,
	        tokenId: request.tokenId,
	        normalizeMetadata: request.normalizeMetadata,
	        disableTotal: request.disableTotal,
	    };
	}
	function deserializeRequest$12(jsonRequest, core) {
	    return {
	        chain: dataTypes_1$D.EvmChain.create(jsonRequest.chain, core),
	        format: jsonRequest.format,
	        limit: jsonRequest.limit,
	        cursor: jsonRequest.cursor,
	        address: dataTypes_1$D.EvmAddress.create(jsonRequest.address, core),
	        tokenId: jsonRequest.tokenId,
	        normalizeMetadata: jsonRequest.normalizeMetadata,
	        disableTotal: jsonRequest.disableTotal,
	    };
	}

	var getNFTTradesOperation = {};

	var __assign$t = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$t = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$t.apply(this, arguments);
	};
	Object.defineProperty(getNFTTradesOperation, "__esModule", { value: true });
	getNFTTradesOperation.getNFTTradesOperation = void 0;
	var common_core_1$T = lib$9;
	var dataTypes_1$C = dataTypes$3;
	var EvmChainResolver_1$k = EvmChainResolver$1;
	/** Get trades of NFTs for a given contract and marketplace. */
	getNFTTradesOperation.getNFTTradesOperation = {
	    method: 'GET',
	    name: 'getNFTTrades',
	    id: 'getNFTTrades',
	    groupName: 'nft',
	    urlPathPattern: '/nft/{address}/trades',
	    urlPathParamNames: ['address'],
	    urlSearchParamNames: [
	        'chain',
	        'fromBlock',
	        'toBlock',
	        'fromDate',
	        'toDate',
	        'marketplace',
	        'cursor',
	        'limit',
	        'disableTotal',
	    ],
	    firstPageIndex: 0,
	    getRequestUrlParams: getRequestUrlParams$11,
	    serializeRequest: serializeRequest$11,
	    deserializeRequest: deserializeRequest$11,
	    deserializeResponse: deserializeResponse$11,
	};
	// Methods
	function getRequestUrlParams$11(request, core) {
	    return {
	        chain: EvmChainResolver_1$k.EvmChainResolver.resolve(request.chain, core).apiHex,
	        address: dataTypes_1$C.EvmAddress.create(request.address, core).lowercase,
	        from_block: (0, common_core_1$T.maybe)(request.fromBlock, String),
	        to_block: (0, common_core_1$T.maybe)(request.toBlock, String),
	        from_date: request.fromDate ? new Date(request.fromDate).toISOString() : undefined,
	        to_date: request.toDate ? new Date(request.toDate).toISOString() : undefined,
	        marketplace: request.marketplace,
	        cursor: request.cursor,
	        limit: (0, common_core_1$T.maybe)(request.limit, String),
	        disable_total: request.disableTotal,
	    };
	}
	function deserializeResponse$11(jsonResponse, request, core) {
	    var _a;
	    return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (trade) {
	        return dataTypes_1$C.EvmNftTrade.create(__assign$t(__assign$t({}, (0, common_core_1$T.toCamelCase)(trade)), { chain: EvmChainResolver_1$k.EvmChainResolver.resolve(request.chain, core), sellerAddress: dataTypes_1$C.EvmAddress.create(trade.seller_address, core), buyerAddress: dataTypes_1$C.EvmAddress.create(trade.buyer_address, core), marketplaceAddress: dataTypes_1$C.EvmAddress.create(trade.marketplace_address, core), tokenAddress: dataTypes_1$C.EvmAddress.create(trade.token_address, core), price: dataTypes_1$C.EvmNative.create(trade.price, 'wei'), blockTimestamp: new Date(trade.block_timestamp), tokenIds: trade.token_ids }));
	    });
	}
	function serializeRequest$11(request, core) {
	    return {
	        chain: EvmChainResolver_1$k.EvmChainResolver.resolve(request.chain, core).apiHex,
	        fromBlock: request.fromBlock,
	        toBlock: request.toBlock,
	        fromDate: request.fromDate,
	        toDate: request.toDate,
	        marketplace: request.marketplace,
	        cursor: request.cursor,
	        limit: request.limit,
	        address: dataTypes_1$C.EvmAddress.create(request.address, core).checksum,
	        disableTotal: request.disableTotal,
	    };
	}
	function deserializeRequest$11(jsonRequest, core) {
	    return {
	        chain: dataTypes_1$C.EvmChain.create(jsonRequest.chain, core),
	        fromBlock: jsonRequest.fromBlock,
	        toBlock: jsonRequest.toBlock,
	        fromDate: jsonRequest.fromDate,
	        toDate: jsonRequest.toDate,
	        marketplace: jsonRequest.marketplace,
	        cursor: jsonRequest.cursor,
	        limit: jsonRequest.limit,
	        address: dataTypes_1$C.EvmAddress.create(jsonRequest.address, core),
	        disableTotal: jsonRequest.disableTotal,
	    };
	}

	var getNFTTransfersByBlockOperation = {};

	var __assign$s = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$s = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$s.apply(this, arguments);
	};
	Object.defineProperty(getNFTTransfersByBlockOperation, "__esModule", { value: true });
	getNFTTransfersByBlockOperation.getNFTTransfersByBlockOperation = void 0;
	var common_core_1$S = lib$9;
	var dataTypes_1$B = dataTypes$3;
	var EvmChainResolver_1$j = EvmChainResolver$1;
	/** Get transfers of NFTs given a block number or block hash. */
	getNFTTransfersByBlockOperation.getNFTTransfersByBlockOperation = {
	    method: 'GET',
	    name: 'getNFTTransfersByBlock',
	    id: 'getNFTTransfersByBlock',
	    groupName: 'nft',
	    urlPathPattern: '/block/{blockNumberOrHash}/nft/transfers',
	    urlPathParamNames: ['blockNumberOrHash'],
	    urlSearchParamNames: ['chain', 'limit', 'cursor', 'disableTotal'],
	    firstPageIndex: 0,
	    getRequestUrlParams: getRequestUrlParams$10,
	    serializeRequest: serializeRequest$10,
	    deserializeRequest: deserializeRequest$10,
	    deserializeResponse: deserializeResponse$10,
	};
	// Methods
	function getRequestUrlParams$10(request, core) {
	    return {
	        chain: EvmChainResolver_1$j.EvmChainResolver.resolve(request.chain, core).apiHex,
	        limit: (0, common_core_1$S.maybe)(request.limit, String),
	        cursor: request.cursor,
	        blockNumberOrHash: request.blockNumberOrHash,
	        disable_total: request.disableTotal,
	    };
	}
	function deserializeResponse$10(jsonResponse, request, core) {
	    var _a;
	    return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (transfer) {
	        return dataTypes_1$B.EvmNftTransfer.create(__assign$s(__assign$s({}, (0, common_core_1$S.toCamelCase)(transfer)), { chain: EvmChainResolver_1$j.EvmChainResolver.resolve(request.chain, core), tokenAddress: dataTypes_1$B.EvmAddress.create(transfer.token_address, core), toAddress: dataTypes_1$B.EvmAddress.create(transfer.to_address, core), operator: transfer.operator ? dataTypes_1$B.EvmAddress.create(transfer.operator, core) : null, fromAddress: transfer.from_address ? dataTypes_1$B.EvmAddress.create(transfer.from_address, core) : null, value: transfer.value ? dataTypes_1$B.EvmNative.create(transfer.value, 'wei') : null, blockTimestamp: new Date(transfer.block_timestamp) }), core);
	    });
	}
	function serializeRequest$10(request, core) {
	    return {
	        chain: EvmChainResolver_1$j.EvmChainResolver.resolve(request.chain, core).apiHex,
	        limit: request.limit,
	        cursor: request.cursor,
	        blockNumberOrHash: request.blockNumberOrHash,
	        disableTotal: request.disableTotal,
	    };
	}
	function deserializeRequest$10(jsonRequest, core) {
	    return {
	        chain: dataTypes_1$B.EvmChain.create(jsonRequest.chain, core),
	        limit: jsonRequest.limit,
	        cursor: jsonRequest.cursor,
	        blockNumberOrHash: jsonRequest.blockNumberOrHash,
	        disableTotal: jsonRequest.disableTotal,
	    };
	}

	var getNFTTransfersFromToBlockOperation = {};

	var __assign$r = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$r = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$r.apply(this, arguments);
	};
	Object.defineProperty(getNFTTransfersFromToBlockOperation, "__esModule", { value: true });
	getNFTTransfersFromToBlockOperation.getNFTTransfersFromToBlockOperation = void 0;
	var common_core_1$R = lib$9;
	var dataTypes_1$A = dataTypes$3;
	var EvmChainResolver_1$i = EvmChainResolver$1;
	/** Get transfers of NFTs from a block number to a block number. */
	getNFTTransfersFromToBlockOperation.getNFTTransfersFromToBlockOperation = {
	    method: 'GET',
	    name: 'getNFTTransfersFromToBlock',
	    id: 'getNFTTransfersFromToBlock',
	    groupName: 'nft',
	    urlPathPattern: '/nft/transfers',
	    urlSearchParamNames: [
	        'chain',
	        'fromBlock',
	        'toBlock',
	        'fromDate',
	        'toDate',
	        'format',
	        'limit',
	        'cursor',
	        'disableTotal',
	    ],
	    firstPageIndex: 0,
	    getRequestUrlParams: getRequestUrlParams$$,
	    serializeRequest: serializeRequest$$,
	    deserializeRequest: deserializeRequest$$,
	    deserializeResponse: deserializeResponse$$,
	};
	// Methods
	function getRequestUrlParams$$(request, core) {
	    return {
	        chain: EvmChainResolver_1$i.EvmChainResolver.resolve(request.chain, core).apiHex,
	        from_block: (0, common_core_1$R.maybe)(request.fromBlock, String),
	        to_block: (0, common_core_1$R.maybe)(request.toBlock, String),
	        from_date: request.fromDate ? new Date(request.fromDate).toISOString() : undefined,
	        to_date: request.toDate ? new Date(request.toDate).toISOString() : undefined,
	        format: request.format,
	        limit: (0, common_core_1$R.maybe)(request.limit, String),
	        cursor: request.cursor,
	        disable_total: request.disableTotal,
	    };
	}
	function deserializeResponse$$(jsonResponse, request, core) {
	    var _a;
	    return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (transfer) {
	        return dataTypes_1$A.EvmNftTransfer.create(__assign$r(__assign$r({}, (0, common_core_1$R.toCamelCase)(transfer)), { chain: EvmChainResolver_1$i.EvmChainResolver.resolve(request.chain, core), tokenAddress: dataTypes_1$A.EvmAddress.create(transfer.to_address, core), toAddress: dataTypes_1$A.EvmAddress.create(transfer.to_address, core), operator: transfer.operator ? dataTypes_1$A.EvmAddress.create(transfer.operator, core) : null, fromAddress: transfer.from_address ? dataTypes_1$A.EvmAddress.create(transfer.from_address, core) : null, value: transfer.value ? dataTypes_1$A.EvmNative.create(transfer.value) : null, blockTimestamp: new Date(transfer.block_timestamp) }));
	    });
	}
	function serializeRequest$$(request, core) {
	    return {
	        chain: EvmChainResolver_1$i.EvmChainResolver.resolve(request.chain, core).apiHex,
	        fromBlock: request.fromBlock,
	        toBlock: request.toBlock,
	        fromDate: request.fromDate,
	        toDate: request.toDate,
	        format: request.format,
	        limit: request.limit,
	        cursor: request.cursor,
	        disableTotal: request.disableTotal,
	    };
	}
	function deserializeRequest$$(jsonRequest, core) {
	    return {
	        chain: dataTypes_1$A.EvmChain.create(jsonRequest.chain, core),
	        fromBlock: jsonRequest.fromBlock,
	        toBlock: jsonRequest.toBlock,
	        fromDate: jsonRequest.fromDate,
	        toDate: jsonRequest.toDate,
	        format: jsonRequest.format,
	        limit: jsonRequest.limit,
	        cursor: jsonRequest.cursor,
	        disableTotal: jsonRequest.disableTotal,
	    };
	}

	var getNFTTransfersOperation = {};

	var __assign$q = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$q = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$q.apply(this, arguments);
	};
	Object.defineProperty(getNFTTransfersOperation, "__esModule", { value: true });
	getNFTTransfersOperation.getNFTTransfersOperation = void 0;
	var common_core_1$Q = lib$9;
	var dataTypes_1$z = dataTypes$3;
	var EvmChainResolver_1$h = EvmChainResolver$1;
	/** Get transfers of an NFT given a contract address and token ID. */
	getNFTTransfersOperation.getNFTTransfersOperation = {
	    method: 'GET',
	    name: 'getNFTTransfers',
	    id: 'getNFTTransfers',
	    groupName: 'nft',
	    urlPathPattern: '/nft/{address}/{tokenId}/transfers',
	    urlPathParamNames: ['address', 'tokenId'],
	    urlSearchParamNames: ['chain', 'format', 'limit', 'cursor', 'disableTotal'],
	    firstPageIndex: 0,
	    getRequestUrlParams: getRequestUrlParams$_,
	    serializeRequest: serializeRequest$_,
	    deserializeRequest: deserializeRequest$_,
	    deserializeResponse: deserializeResponse$_,
	};
	// Methods
	function getRequestUrlParams$_(request, core) {
	    return {
	        chain: EvmChainResolver_1$h.EvmChainResolver.resolve(request.chain, core).apiHex,
	        address: dataTypes_1$z.EvmAddress.create(request.address, core).lowercase,
	        format: request.format,
	        limit: (0, common_core_1$Q.maybe)(request.limit, String),
	        cursor: request.cursor,
	        tokenId: request.tokenId,
	        disable_total: request.disableTotal,
	    };
	}
	function deserializeResponse$_(jsonResponse, request, core) {
	    var _a;
	    return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (transfer) {
	        return dataTypes_1$z.EvmNftTransfer.create(__assign$q(__assign$q({}, (0, common_core_1$Q.toCamelCase)(transfer)), { chain: EvmChainResolver_1$h.EvmChainResolver.resolve(request.chain, core), tokenAddress: dataTypes_1$z.EvmAddress.create(transfer.to_address, core), toAddress: dataTypes_1$z.EvmAddress.create(transfer.to_address, core), operator: transfer.operator ? dataTypes_1$z.EvmAddress.create(transfer.operator, core) : null, fromAddress: transfer.from_address ? dataTypes_1$z.EvmAddress.create(transfer.from_address, core) : null, value: transfer.value ? dataTypes_1$z.EvmNative.create(transfer.value) : null, blockTimestamp: new Date(transfer.block_timestamp) }));
	    });
	}
	function serializeRequest$_(request, core) {
	    return {
	        chain: EvmChainResolver_1$h.EvmChainResolver.resolve(request.chain, core).apiHex,
	        format: request.format,
	        limit: request.limit,
	        cursor: request.cursor,
	        address: dataTypes_1$z.EvmAddress.create(request.address, core).checksum,
	        tokenId: request.tokenId,
	        disableTotal: request.disableTotal,
	    };
	}
	function deserializeRequest$_(jsonRequest, core) {
	    return {
	        chain: dataTypes_1$z.EvmChain.create(jsonRequest.chain, core),
	        format: jsonRequest.format,
	        limit: jsonRequest.limit,
	        cursor: jsonRequest.cursor,
	        address: dataTypes_1$z.EvmAddress.create(jsonRequest.address, core),
	        tokenId: jsonRequest.tokenId,
	        disableTotal: jsonRequest.disableTotal,
	    };
	}

	var getWalletNFTCollectionsOperation = {};

	var __assign$p = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$p = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$p.apply(this, arguments);
	};
	Object.defineProperty(getWalletNFTCollectionsOperation, "__esModule", { value: true });
	getWalletNFTCollectionsOperation.getWalletNFTCollectionsOperation = void 0;
	var common_core_1$P = lib$9;
	var dataTypes_1$y = dataTypes$3;
	var EvmChainResolver_1$g = EvmChainResolver$1;
	/** Get NFT collections owned by a given wallet address. */
	getWalletNFTCollectionsOperation.getWalletNFTCollectionsOperation = {
	    method: 'GET',
	    name: 'getWalletNFTCollections',
	    id: 'getWalletNFTCollections',
	    groupName: 'nft',
	    urlPathPattern: '/{address}/nft/collections',
	    urlPathParamNames: ['address'],
	    urlSearchParamNames: ['chain', 'limit', 'cursor', 'disableTotal'],
	    firstPageIndex: 1,
	    getRequestUrlParams: getRequestUrlParams$Z,
	    serializeRequest: serializeRequest$Z,
	    deserializeRequest: deserializeRequest$Z,
	    deserializeResponse: deserializeResponse$Z,
	};
	// Methods
	function getRequestUrlParams$Z(request, core) {
	    return {
	        chain: EvmChainResolver_1$g.EvmChainResolver.resolve(request.chain, core).apiHex,
	        address: dataTypes_1$y.EvmAddress.create(request.address, core).lowercase,
	        limit: (0, common_core_1$P.maybe)(request.limit, String),
	        cursor: request.cursor,
	        disable_total: request.disableTotal,
	    };
	}
	function deserializeResponse$Z(jsonResponse, request, core) {
	    var _a;
	    return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (collection) {
	        return dataTypes_1$y.EvmNftCollection.create(__assign$p(__assign$p({}, (0, common_core_1$P.toCamelCase)(collection)), { chain: EvmChainResolver_1$g.EvmChainResolver.resolve(request.chain, core), tokenAddress: dataTypes_1$y.EvmAddress.create(collection.token_address, core) }), core);
	    });
	}
	function serializeRequest$Z(request, core) {
	    return {
	        chain: EvmChainResolver_1$g.EvmChainResolver.resolve(request.chain, core).apiHex,
	        limit: request.limit,
	        cursor: request.cursor,
	        address: dataTypes_1$y.EvmAddress.create(request.address, core).checksum,
	        disableTotal: request.disableTotal,
	    };
	}
	function deserializeRequest$Z(jsonRequest, core) {
	    return {
	        chain: dataTypes_1$y.EvmChain.create(jsonRequest.chain, core),
	        limit: jsonRequest.limit,
	        cursor: jsonRequest.cursor,
	        address: dataTypes_1$y.EvmAddress.create(jsonRequest.address, core),
	        disableTotal: jsonRequest.disableTotal,
	    };
	}

	var getWalletNFTsOperation = {};

	Object.defineProperty(getWalletNFTsOperation, "__esModule", { value: true });
	getWalletNFTsOperation.getWalletNFTsOperation = void 0;
	var common_core_1$O = lib$9;
	var dataTypes_1$x = dataTypes$3;
	var EvmChainResolver_1$f = EvmChainResolver$1;
	/**
	 * Get NFTs owned by a given address.
	 * * The response will include status [SYNCED/SYNCING] based on the contracts being indexed.
	 * * Use the token_address param to get results for a specific contract only
	 * * Note results will include all indexed NFTs
	 * * Any request which includes the token_address param will start the indexing process for that NFT collection the very first time it is requested.
	 */
	getWalletNFTsOperation.getWalletNFTsOperation = {
	    method: 'GET',
	    name: 'getWalletNFTs',
	    id: 'getWalletNFTs',
	    groupName: 'nft',
	    firstPageIndex: 1,
	    urlPathPattern: '/{address}/nft',
	    urlPathParamNames: ['address'],
	    urlSearchParamNames: ['chain', 'format', 'limit', 'tokenAddresses', 'cursor', 'normalizeMetadata', 'disableTotal'],
	    getRequestUrlParams: getRequestUrlParams$Y,
	    serializeRequest: serializeRequest$Y,
	    deserializeRequest: deserializeRequest$Y,
	    deserializeResponse: deserializeResponse$Y,
	};
	// Methods
	function getRequestUrlParams$Y(request, core) {
	    var _a;
	    return {
	        chain: EvmChainResolver_1$f.EvmChainResolver.resolve(request.chain, core).apiHex,
	        address: dataTypes_1$x.EvmAddress.create(request.address, core).lowercase,
	        format: request.format,
	        limit: (0, common_core_1$O.maybe)(request.limit, String),
	        token_addresses: (_a = request.tokenAddresses) === null || _a === void 0 ? void 0 : _a.map(function (address) { return dataTypes_1$x.EvmAddress.create(address, core).lowercase; }),
	        cursor: request.cursor,
	        normalizeMetadata: request.normalizeMetadata,
	        disable_total: request.disableTotal,
	    };
	}
	function deserializeResponse$Y(jsonResponse, request, core) {
	    var _a;
	    return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (nft) {
	        return dataTypes_1$x.EvmNft.create({
	            chain: EvmChainResolver_1$f.EvmChainResolver.resolve(request.chain, core),
	            contractType: nft.contract_type,
	            tokenAddress: nft.token_address,
	            tokenId: nft.token_id,
	            tokenUri: nft.token_uri,
	            metadata: nft.metadata,
	            name: nft.name,
	            symbol: nft.symbol,
	            amount: nft.amount ? parseInt(nft.amount, 10) : undefined,
	            blockNumberMinted: nft.block_number_minted,
	            blockNumber: nft.block_number,
	            ownerOf: dataTypes_1$x.EvmAddress.create(nft.owner_of, core),
	            tokenHash: nft.token_hash,
	            lastMetadataSync: (0, common_core_1$O.dateInputToDate)(nft.last_metadata_sync),
	            lastTokenUriSync: (0, common_core_1$O.dateInputToDate)(nft.last_token_uri_sync),
	        });
	    });
	}
	function serializeRequest$Y(request, core) {
	    var _a;
	    return {
	        chain: EvmChainResolver_1$f.EvmChainResolver.resolve(request.chain, core).apiHex,
	        format: request.format,
	        limit: request.limit,
	        tokenAddresses: (_a = request.tokenAddresses) === null || _a === void 0 ? void 0 : _a.map(function (address) { return dataTypes_1$x.EvmAddress.create(address, core).checksum; }),
	        cursor: request.cursor,
	        address: dataTypes_1$x.EvmAddress.create(request.address, core).checksum,
	        normalizeMetadata: request.normalizeMetadata,
	        disableTotal: request.disableTotal,
	    };
	}
	function deserializeRequest$Y(jsonRequest, core) {
	    return {
	        chain: dataTypes_1$x.EvmChain.create(jsonRequest.chain, core),
	        format: jsonRequest.format,
	        limit: jsonRequest.limit,
	        tokenAddresses: (0, common_core_1$O.maybe)(jsonRequest.tokenAddresses, function (addresses) {
	            return addresses.map(function (address) { return dataTypes_1$x.EvmAddress.create(address, core); });
	        }),
	        cursor: jsonRequest.cursor,
	        address: dataTypes_1$x.EvmAddress.create(jsonRequest.address, core),
	        normalizeMetadata: jsonRequest.normalizeMetadata,
	        disableTotal: jsonRequest.disableTotal,
	    };
	}

	var getWalletNFTTransfersOperation = {};

	var __assign$o = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$o = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$o.apply(this, arguments);
	};
	Object.defineProperty(getWalletNFTTransfersOperation, "__esModule", { value: true });
	getWalletNFTTransfersOperation.getWalletNFTTransfersOperation = void 0;
	var common_core_1$N = lib$9;
	var dataTypes_1$w = dataTypes$3;
	var EvmChainResolver_1$e = EvmChainResolver$1;
	/** Get transfers of NFTs given the wallet and other parameters. */
	getWalletNFTTransfersOperation.getWalletNFTTransfersOperation = {
	    method: 'GET',
	    name: 'getWalletNFTTransfers',
	    id: 'getWalletNFTTransfers',
	    groupName: 'nft',
	    urlPathPattern: '/{address}/nft/transfers',
	    urlPathParamNames: ['address'],
	    urlSearchParamNames: ['chain', 'format', 'direction', 'fromBlock', 'toBlock', 'limit', 'cursor', 'disableTotal'],
	    firstPageIndex: 0,
	    getRequestUrlParams: getRequestUrlParams$X,
	    serializeRequest: serializeRequest$X,
	    deserializeRequest: deserializeRequest$X,
	    deserializeResponse: deserializeResponse$X,
	};
	// Methods
	function getRequestUrlParams$X(request, core) {
	    return {
	        chain: EvmChainResolver_1$e.EvmChainResolver.resolve(request.chain, core).apiHex,
	        address: dataTypes_1$w.EvmAddress.create(request.address, core).lowercase,
	        format: request.format,
	        direction: request.direction,
	        from_block: (0, common_core_1$N.maybe)(request.fromBlock, String),
	        to_block: request.toBlock,
	        limit: (0, common_core_1$N.maybe)(request.limit, String),
	        cursor: request.cursor,
	        disable_total: request.disableTotal,
	    };
	}
	function deserializeResponse$X(jsonResponse, request, core) {
	    var _a;
	    return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (transfer) {
	        return dataTypes_1$w.EvmNftTransfer.create(__assign$o(__assign$o({}, (0, common_core_1$N.toCamelCase)(transfer)), { chain: EvmChainResolver_1$e.EvmChainResolver.resolve(request.chain, core), tokenAddress: dataTypes_1$w.EvmAddress.create(transfer.token_address, core), toAddress: dataTypes_1$w.EvmAddress.create(transfer.to_address, core), operator: transfer.operator ? dataTypes_1$w.EvmAddress.create(transfer.operator, core) : null, fromAddress: transfer.from_address ? dataTypes_1$w.EvmAddress.create(transfer.from_address, core) : null, value: transfer.value ? dataTypes_1$w.EvmNative.create(transfer.value, 'wei') : null, blockTimestamp: new Date(transfer.block_timestamp) }), core);
	    });
	}
	function serializeRequest$X(request, core) {
	    return {
	        chain: EvmChainResolver_1$e.EvmChainResolver.resolve(request.chain, core).apiHex,
	        format: request.format,
	        direction: request.direction,
	        fromBlock: request.fromBlock,
	        toBlock: request.toBlock,
	        limit: request.limit,
	        cursor: request.cursor,
	        address: dataTypes_1$w.EvmAddress.create(request.address, core).checksum,
	        disableTotal: request.disableTotal,
	    };
	}
	function deserializeRequest$X(jsonRequest, core) {
	    return {
	        chain: dataTypes_1$w.EvmChain.create(jsonRequest.chain, core),
	        format: jsonRequest.format,
	        direction: jsonRequest.direction,
	        fromBlock: jsonRequest.fromBlock,
	        toBlock: jsonRequest.toBlock,
	        limit: jsonRequest.limit,
	        cursor: jsonRequest.cursor,
	        address: dataTypes_1$w.EvmAddress.create(jsonRequest.address, core),
	        disableTotal: jsonRequest.disableTotal,
	    };
	}

	var reSyncMetadataOperation = {};

	Object.defineProperty(reSyncMetadataOperation, "__esModule", { value: true });
	reSyncMetadataOperation.reSyncMetadataOperation = void 0;
	var dataTypes_1$v = dataTypes$3;
	var EvmChainResolver_1$d = EvmChainResolver$1;
	/**
	 * ReSync the metadata for an NFT
	 * * The metadata flag will request a the NFT's metadata from the already existing token_uri
	 * * The uri(default) flag will fetch the latest token_uri from the given NFT address. In sync mode the metadata will also be fetched
	 * * The sync mode will make the endpoint synchronous so it will wait for the task to be completed before responding
	 * * The async mode(default) will make the endpoint asynchronous so we will wait for the task to be completed before responding
	 */
	reSyncMetadataOperation.reSyncMetadataOperation = {
	    method: 'GET',
	    name: 'reSyncMetadata',
	    id: 'reSyncMetadata',
	    groupName: 'nft',
	    urlPathPattern: '/nft/{address}/{tokenId}/metadata/resync',
	    urlPathParamNames: ['address', 'tokenId'],
	    urlSearchParamNames: ['chain', 'flag', 'mode'],
	    getRequestUrlParams: getRequestUrlParams$W,
	    serializeRequest: serializeRequest$W,
	    deserializeRequest: deserializeRequest$W,
	    deserializeResponse: deserializeResponse$W,
	};
	// Methods
	function getRequestUrlParams$W(request, core) {
	    return {
	        chain: EvmChainResolver_1$d.EvmChainResolver.resolve(request.chain, core).apiHex,
	        address: dataTypes_1$v.EvmAddress.create(request.address, core).lowercase,
	        flag: request.flag,
	        mode: request.mode,
	        tokenId: request.tokenId,
	    };
	}
	function serializeRequest$W(request, core) {
	    return {
	        chain: EvmChainResolver_1$d.EvmChainResolver.resolve(request.chain, core).apiHex,
	        flag: request.flag,
	        mode: request.mode,
	        address: dataTypes_1$v.EvmAddress.create(request.address, core).checksum,
	        tokenId: request.tokenId,
	    };
	}
	function deserializeRequest$W(jsonRequest, core) {
	    return {
	        chain: dataTypes_1$v.EvmChain.create(jsonRequest.chain, core),
	        flag: jsonRequest.flag,
	        mode: jsonRequest.mode,
	        address: dataTypes_1$v.EvmAddress.create(jsonRequest.address, core),
	        tokenId: jsonRequest.tokenId,
	    };
	}
	function deserializeResponse$W(jsonResponse) {
	    return jsonResponse;
	}

	var searchNFTsOperation = {};

	Object.defineProperty(searchNFTsOperation, "__esModule", { value: true });
	searchNFTsOperation.searchNFTsOperation = void 0;
	var common_core_1$M = lib$9;
	var dataTypes_1$u = dataTypes$3;
	var EvmChainResolver_1$c = EvmChainResolver$1;
	/** Get NFTs that match a given metadata search query. */
	searchNFTsOperation.searchNFTsOperation = {
	    method: 'GET',
	    name: 'searchNFTs',
	    id: 'searchNFTs',
	    groupName: 'nft',
	    urlPathPattern: '/nft/search',
	    urlSearchParamNames: [
	        'chain',
	        'format',
	        'q',
	        'filter',
	        'fromBlock',
	        'toBlock',
	        'fromDate',
	        'toDate',
	        'addresses',
	        'cursor',
	        'limit',
	        'disableTotal',
	    ],
	    firstPageIndex: 0,
	    getRequestUrlParams: getRequestUrlParams$V,
	    serializeRequest: serializeRequest$V,
	    deserializeRequest: deserializeRequest$V,
	    deserializeResponse: deserializeResponse$V,
	};
	// Methods
	function getRequestUrlParams$V(request, core) {
	    var _a;
	    return {
	        chain: EvmChainResolver_1$c.EvmChainResolver.resolve(request.chain, core).apiHex,
	        format: request.format,
	        q: request.q,
	        filter: request.filter,
	        from_block: (0, common_core_1$M.maybe)(request.fromBlock, String),
	        to_block: (0, common_core_1$M.maybe)(request.toBlock, String),
	        from_date: request.fromDate ? new Date(request.fromDate).toISOString() : undefined,
	        to_date: request.toDate ? new Date(request.toDate).toISOString() : undefined,
	        addresses: (_a = request.addresses) === null || _a === void 0 ? void 0 : _a.map(function (address) { return dataTypes_1$u.EvmAddress.create(address, core).lowercase; }),
	        cursor: request.cursor,
	        limit: (0, common_core_1$M.maybe)(request.limit, String),
	        disable_total: request.disableTotal,
	    };
	}
	function deserializeResponse$V(jsonResponse, request, core) {
	    var _a;
	    return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (nft) { return ({
	        token: dataTypes_1$u.EvmNft.create({
	            chain: EvmChainResolver_1$c.EvmChainResolver.resolve(request.chain, core),
	            contractType: nft.contract_type,
	            tokenAddress: nft.token_address,
	            tokenId: nft.token_id,
	            tokenUri: nft.token_uri,
	            metadata: nft.metadata,
	            tokenHash: nft.token_hash,
	        }, core),
	        tokenHash: nft.token_hash,
	        blockNumberMinted: nft.block_number_minted,
	        lastMetadataSync: nft.last_metadata_sync ? new Date(nft.last_metadata_sync) : undefined,
	        lastTokenUriSync: nft.last_token_uri_sync ? new Date(nft.last_token_uri_sync) : undefined,
	        batchId: nft.batch_id,
	        frozen: nft.frozen,
	        frozenLogIndex: nft.frozen_log_index,
	        imported: nft.imported,
	        isValid: nft.is_valid,
	        openseaLookup: nft.opensea_lookup,
	        resyncing: nft.resyncing,
	        syncing: nft.syncing,
	        updatedAt: new Date(nft.updatedAt),
	    }); });
	}
	function serializeRequest$V(request, core) {
	    var _a;
	    return {
	        chain: EvmChainResolver_1$c.EvmChainResolver.resolve(request.chain, core).apiHex,
	        format: request.format,
	        q: request.q,
	        filter: request.filter,
	        fromBlock: request.fromBlock,
	        toBlock: request.toBlock,
	        fromDate: request.fromDate,
	        toDate: request.toDate,
	        addresses: (_a = request.addresses) === null || _a === void 0 ? void 0 : _a.map(function (address) { return dataTypes_1$u.EvmAddress.create(address, core).checksum; }),
	        cursor: request.cursor,
	        limit: request.limit,
	        disableTotal: request.disableTotal,
	    };
	}
	function deserializeRequest$V(jsonRequest, core) {
	    return {
	        chain: dataTypes_1$u.EvmChain.create(jsonRequest.chain, core),
	        format: jsonRequest.format,
	        q: jsonRequest.q,
	        filter: jsonRequest.filter,
	        fromBlock: jsonRequest.fromBlock,
	        toBlock: jsonRequest.toBlock,
	        fromDate: jsonRequest.fromDate,
	        toDate: jsonRequest.toDate,
	        addresses: (0, common_core_1$M.maybe)(jsonRequest.addresses, function (addresses) {
	            return addresses.map(function (address) { return dataTypes_1$u.EvmAddress.create(address, core); });
	        }),
	        cursor: jsonRequest.cursor,
	        limit: jsonRequest.limit,
	        disableTotal: jsonRequest.disableTotal,
	    };
	}

	var syncNFTContractOperation = {};

	Object.defineProperty(syncNFTContractOperation, "__esModule", { value: true });
	syncNFTContractOperation.syncNFTContractOperation = void 0;
	var dataTypes_1$t = dataTypes$3;
	var EvmChainResolver_1$b = EvmChainResolver$1;
	/** Initiates a sync of a previously non synced Contract. */
	syncNFTContractOperation.syncNFTContractOperation = {
	    method: 'PUT',
	    name: 'syncNFTContract',
	    id: 'syncNFTContract',
	    groupName: 'nft',
	    urlPathPattern: '/nft/{address}/sync',
	    urlPathParamNames: ['address'],
	    urlSearchParamNames: ['chain'],
	    getRequestUrlParams: getRequestUrlParams$U,
	    serializeRequest: serializeRequest$U,
	    deserializeRequest: deserializeRequest$U,
	    deserializeResponse: deserializeResponse$U,
	};
	// Methods
	function getRequestUrlParams$U(request, core) {
	    return {
	        chain: EvmChainResolver_1$b.EvmChainResolver.resolve(request.chain, core).apiHex,
	        address: dataTypes_1$t.EvmAddress.create(request.address, core).lowercase,
	    };
	}
	function deserializeResponse$U() {
	    return {
	        success: true,
	    };
	}
	function serializeRequest$U(request, core) {
	    return {
	        chain: EvmChainResolver_1$b.EvmChainResolver.resolve(request.chain, core).apiHex,
	        address: dataTypes_1$t.EvmAddress.create(request.address, core).checksum,
	    };
	}
	function deserializeRequest$U(jsonRequest, core) {
	    return {
	        chain: dataTypes_1$t.EvmChain.create(jsonRequest.chain, core),
	        address: dataTypes_1$t.EvmAddress.create(jsonRequest.address, core),
	    };
	}

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(getContractNFTsOperation, exports);
		__exportStar(getMultipleNFTsOperation, exports);
		__exportStar(getNFTContractMetadataOperation, exports);
		__exportStar(getNFTContractTransfersOperation, exports);
		__exportStar(getNFTLowestPriceOperation, exports);
		__exportStar(getNFTMetadataOperation$1, exports);
		__exportStar(getNFTOwnersOperation, exports);
		__exportStar(getNFTTokenIdOwnersOperation, exports);
		__exportStar(getNFTTradesOperation, exports);
		__exportStar(getNFTTransfersByBlockOperation, exports);
		__exportStar(getNFTTransfersFromToBlockOperation, exports);
		__exportStar(getNFTTransfersOperation, exports);
		__exportStar(getWalletNFTCollectionsOperation, exports);
		__exportStar(getWalletNFTsOperation, exports);
		__exportStar(getWalletNFTTransfersOperation, exports);
		__exportStar(reSyncMetadataOperation, exports);
		__exportStar(searchNFTsOperation, exports);
		__exportStar(syncNFTContractOperation, exports);
		
	} (nft));

	var operations$5 = {};

	var resolve = {};

	var resolveAddressOperation = {};

	Object.defineProperty(resolveAddressOperation, "__esModule", { value: true });
	resolveAddressOperation.resolveAddressOperation = void 0;
	var common_core_1$L = lib$9;
	var dataTypes_1$s = dataTypes$3;
	/** Resolve an ETH address and find the ENS name. */
	resolveAddressOperation.resolveAddressOperation = {
	    method: 'GET',
	    name: 'resolveAddress',
	    id: 'resolveAddress',
	    groupName: 'resolve',
	    isNullable: true,
	    urlPathPattern: '/resolve/{address}/reverse',
	    urlPathParamNames: ['address'],
	    getRequestUrlParams: getRequestUrlParams$T,
	    serializeRequest: serializeRequest$T,
	    deserializeRequest: deserializeRequest$T,
	    deserializeResponse: deserializeResponse$T,
	};
	// Methods
	function getRequestUrlParams$T(request, core) {
	    return {
	        address: (0, common_core_1$L.maybe)(request.address, function (address) { return dataTypes_1$s.EvmAddress.create(address, core).checksum; }),
	    };
	}
	function deserializeResponse$T(jsonResponse) {
	    return jsonResponse;
	}
	function serializeRequest$T(request, core) {
	    return {
	        address: (0, common_core_1$L.maybe)(request.address, function (address) { return dataTypes_1$s.EvmAddress.create(address, core).checksum; }),
	    };
	}
	function deserializeRequest$T(jsonRequest, core) {
	    return {
	        address: (0, common_core_1$L.maybe)(jsonRequest.address, function (address) { return dataTypes_1$s.EvmAddress.create(address, core); }),
	    };
	}

	var resolveDomainOperation = {};

	Object.defineProperty(resolveDomainOperation, "__esModule", { value: true });
	resolveDomainOperation.resolveDomainOperation = void 0;
	var dataTypes_1$r = dataTypes$3;
	/** Resolve an Unstoppable domain and get the address. */
	resolveDomainOperation.resolveDomainOperation = {
	    method: 'GET',
	    name: 'resolveDomain',
	    id: 'resolveDomain',
	    groupName: 'resolve',
	    isNullable: true,
	    urlPathPattern: '/resolve/{domain}',
	    urlPathParamNames: ['domain'],
	    urlSearchParamNames: ['currency'],
	    getRequestUrlParams: getRequestUrlParams$S,
	    serializeRequest: serializeRequest$S,
	    deserializeRequest: deserializeRequest$S,
	    deserializeResponse: deserializeResponse$S,
	};
	// Methods
	function getRequestUrlParams$S(request) {
	    return {
	        currency: request.currency,
	        domain: request.domain,
	    };
	}
	function serializeRequest$S(request) {
	    return {
	        currency: request.currency,
	        domain: request.domain,
	    };
	}
	function deserializeRequest$S(jsonRequest) {
	    return {
	        currency: jsonRequest.currency,
	        domain: jsonRequest.domain,
	    };
	}
	function deserializeResponse$S(jsonResponse, request, core) {
	    return {
	        address: dataTypes_1$r.EvmAddress.create(jsonResponse.address, core),
	    };
	}

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(resolveAddressOperation, exports);
		__exportStar(resolveDomainOperation, exports);
		
	} (resolve));

	var token = {};

	var getTokenAllowanceOperation = {};

	Object.defineProperty(getTokenAllowanceOperation, "__esModule", { value: true });
	getTokenAllowanceOperation.getTokenAllowanceOperation = void 0;
	var common_core_1$K = lib$9;
	var dataTypes_1$q = dataTypes$3;
	var EvmChainResolver_1$a = EvmChainResolver$1;
	/** Get the amount which the spender is allowed to withdraw on behalf of the owner. */
	getTokenAllowanceOperation.getTokenAllowanceOperation = {
	    method: 'GET',
	    name: 'getTokenAllowance',
	    id: 'getTokenAllowance',
	    groupName: 'token',
	    urlPathPattern: '/erc20/{address}/allowance',
	    urlPathParamNames: ['address'],
	    urlSearchParamNames: ['chain', 'ownerAddress', 'spenderAddress'],
	    getRequestUrlParams: getRequestUrlParams$R,
	    serializeRequest: serializeRequest$R,
	    deserializeRequest: deserializeRequest$R,
	    deserializeResponse: deserializeResponse$R,
	};
	// Methods
	function getRequestUrlParams$R(request, core) {
	    return {
	        chain: EvmChainResolver_1$a.EvmChainResolver.resolve(request.chain, core).apiHex,
	        owner_address: dataTypes_1$q.EvmAddress.create(request.ownerAddress, core).lowercase,
	        spender_address: dataTypes_1$q.EvmAddress.create(request.spenderAddress, core).lowercase,
	        address: dataTypes_1$q.EvmAddress.create(request.address, core).lowercase,
	    };
	}
	function deserializeResponse$R(jsonResponse) {
	    return {
	        allowance: common_core_1$K.BigNumber.create(jsonResponse.allowance),
	    };
	}
	function serializeRequest$R(request, core) {
	    return {
	        chain: EvmChainResolver_1$a.EvmChainResolver.resolve(request.chain, core).apiHex,
	        ownerAddress: dataTypes_1$q.EvmAddress.create(request.ownerAddress, core).checksum,
	        spenderAddress: dataTypes_1$q.EvmAddress.create(request.spenderAddress, core).checksum,
	        address: dataTypes_1$q.EvmAddress.create(request.address, core).checksum,
	    };
	}
	function deserializeRequest$R(jsonRequest, core) {
	    return {
	        chain: dataTypes_1$q.EvmChain.create(jsonRequest.chain, core),
	        ownerAddress: dataTypes_1$q.EvmAddress.create(jsonRequest.ownerAddress, core),
	        spenderAddress: dataTypes_1$q.EvmAddress.create(jsonRequest.spenderAddress, core),
	        address: dataTypes_1$q.EvmAddress.create(jsonRequest.address, core),
	    };
	}

	var getTokenMetadataOperation = {};

	var __assign$n = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$n = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$n.apply(this, arguments);
	};
	Object.defineProperty(getTokenMetadataOperation, "__esModule", { value: true });
	getTokenMetadataOperation.getTokenMetadataOperation = void 0;
	var common_core_1$J = lib$9;
	var dataTypes_1$p = dataTypes$3;
	var EvmChainResolver_1$9 = EvmChainResolver$1;
	/** Get the metadata for a given token contract address (name, symbol, decimals, logo). */
	getTokenMetadataOperation.getTokenMetadataOperation = {
	    method: 'GET',
	    name: 'getTokenMetadata',
	    id: 'getTokenMetadata',
	    groupName: 'token',
	    urlPathPattern: '/erc20/metadata',
	    urlSearchParamNames: ['chain', 'addresses'],
	    getRequestUrlParams: getRequestUrlParams$Q,
	    serializeRequest: serializeRequest$Q,
	    deserializeRequest: deserializeRequest$Q,
	    deserializeResponse: deserializeResponse$Q,
	};
	// Methods
	function getRequestUrlParams$Q(request, core) {
	    return {
	        chain: EvmChainResolver_1$9.EvmChainResolver.resolve(request.chain, core).apiHex,
	        addresses: request.addresses.map(function (address) { return dataTypes_1$p.EvmAddress.create(address, core).lowercase; }),
	    };
	}
	function deserializeResponse$Q(jsonResponse, request, core) {
	    return (jsonResponse !== null && jsonResponse !== void 0 ? jsonResponse : []).map(function (token) {
	        return {
	            token: dataTypes_1$p.Erc20Token.create(__assign$n(__assign$n({}, (0, common_core_1$J.toCamelCase)(token)), { contractAddress: token.address, chain: EvmChainResolver_1$9.EvmChainResolver.resolve(request.chain, core) }), core),
	            blockNumber: token.block_number,
	            validated: token.validated,
	        };
	    });
	}
	function serializeRequest$Q(request, core) {
	    return {
	        chain: EvmChainResolver_1$9.EvmChainResolver.resolve(request.chain, core).apiHex,
	        addresses: request.addresses.map(function (address) { return dataTypes_1$p.EvmAddress.create(address, core).checksum; }),
	    };
	}
	function deserializeRequest$Q(jsonRequest, core) {
	    return {
	        chain: dataTypes_1$p.EvmChain.create(jsonRequest.chain, core),
	        addresses: jsonRequest.addresses.map(function (address) { return dataTypes_1$p.EvmAddress.create(address, core); }),
	    };
	}

	var getTokenMetadataBySymbolOperation = {};

	var __assign$m = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$m = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$m.apply(this, arguments);
	};
	Object.defineProperty(getTokenMetadataBySymbolOperation, "__esModule", { value: true });
	getTokenMetadataBySymbolOperation.getTokenMetadataBySymbolOperation = void 0;
	var common_core_1$I = lib$9;
	var dataTypes_1$o = dataTypes$3;
	var EvmChainResolver_1$8 = EvmChainResolver$1;
	/** Get metadata for a list of token symbols (name, symbol, decimals, logo). */
	getTokenMetadataBySymbolOperation.getTokenMetadataBySymbolOperation = {
	    method: 'GET',
	    name: 'getTokenMetadataBySymbol',
	    id: 'getTokenMetadataBySymbol',
	    groupName: 'token',
	    urlPathPattern: '/erc20/metadata/symbols',
	    urlSearchParamNames: ['chain', 'symbols'],
	    getRequestUrlParams: getRequestUrlParams$P,
	    serializeRequest: serializeRequest$P,
	    deserializeRequest: deserializeRequest$P,
	    deserializeResponse: deserializeResponse$P,
	};
	// Methods
	function getRequestUrlParams$P(request, core) {
	    return {
	        chain: EvmChainResolver_1$8.EvmChainResolver.resolve(request.chain, core).apiHex,
	        symbols: request.symbols,
	    };
	}
	function deserializeResponse$P(jsonResponse, request, core) {
	    return (jsonResponse !== null && jsonResponse !== void 0 ? jsonResponse : []).map(function (token) {
	        return {
	            token: dataTypes_1$o.Erc20Token.create(__assign$m(__assign$m({}, (0, common_core_1$I.toCamelCase)(token)), { contractAddress: token.address, chain: EvmChainResolver_1$8.EvmChainResolver.resolve(request.chain, core) }), core),
	            blockNumber: token.block_number,
	            validated: token.validated,
	        };
	    });
	}
	function serializeRequest$P(request, core) {
	    return {
	        chain: EvmChainResolver_1$8.EvmChainResolver.resolve(request.chain, core).apiHex,
	        symbols: request.symbols,
	    };
	}
	function deserializeRequest$P(jsonRequest, core) {
	    return {
	        chain: dataTypes_1$o.EvmChain.create(jsonRequest.chain, core),
	        symbols: jsonRequest.symbols,
	    };
	}

	var getTokenPriceOperation$1 = {};

	var __assign$l = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$l = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$l.apply(this, arguments);
	};
	Object.defineProperty(getTokenPriceOperation$1, "__esModule", { value: true });
	getTokenPriceOperation$1.getTokenPriceOperation = void 0;
	var common_core_1$H = lib$9;
	var dataTypes_1$n = dataTypes$3;
	var EvmChainResolver_1$7 = EvmChainResolver$1;
	/** Get the token price denominated in the blockchains native token and USD. */
	getTokenPriceOperation$1.getTokenPriceOperation = {
	    method: 'GET',
	    name: 'getTokenPrice',
	    id: 'getTokenPrice',
	    groupName: 'token',
	    urlPathPattern: '/erc20/{address}/price',
	    urlPathParamNames: ['address'],
	    urlSearchParamNames: ['chain', 'exchange', 'toBlock'],
	    getRequestUrlParams: getRequestUrlParams$O,
	    serializeRequest: serializeRequest$O,
	    deserializeRequest: deserializeRequest$O,
	    deserializeResponse: deserializeResponse$O,
	};
	// Methods
	function getRequestUrlParams$O(request, core) {
	    return {
	        chain: EvmChainResolver_1$7.EvmChainResolver.resolve(request.chain, core).apiHex,
	        exchange: request.exchange,
	        to_block: (0, common_core_1$H.maybe)(request.toBlock, String),
	        address: dataTypes_1$n.EvmAddress.create(request.address, core).lowercase,
	    };
	}
	function deserializeResponse$O(jsonResponse, request, core) {
	    var _a, _b, _c;
	    return __assign$l(__assign$l({}, (0, common_core_1$H.toCamelCase)(jsonResponse)), { nativePrice: ((_a = jsonResponse.nativePrice) === null || _a === void 0 ? void 0 : _a.value)
	            ? dataTypes_1$n.EvmNative.create((_b = jsonResponse.nativePrice) === null || _b === void 0 ? void 0 : _b.value, (_c = jsonResponse.nativePrice) === null || _c === void 0 ? void 0 : _c.decimals)
	            : null, exchangeAddress: jsonResponse.exchangeAddress ? dataTypes_1$n.EvmAddress.create(jsonResponse.exchangeAddress, core) : null });
	}
	function serializeRequest$O(request, core) {
	    return {
	        chain: EvmChainResolver_1$7.EvmChainResolver.resolve(request.chain, core).apiHex,
	        exchange: request.exchange,
	        toBlock: request.toBlock,
	        address: dataTypes_1$n.EvmAddress.create(request.address, core).checksum,
	    };
	}
	function deserializeRequest$O(jsonRequest, core) {
	    return {
	        chain: dataTypes_1$n.EvmChain.create(jsonRequest.chain, core),
	        exchange: jsonRequest.exchange,
	        toBlock: jsonRequest.toBlock,
	        address: dataTypes_1$n.EvmAddress.create(jsonRequest.address, core),
	    };
	}

	var getTokenTransfersOperation = {};

	var __assign$k = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$k = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$k.apply(this, arguments);
	};
	Object.defineProperty(getTokenTransfersOperation, "__esModule", { value: true });
	getTokenTransfersOperation.getTokenTransfersOperation = void 0;
	var common_core_1$G = lib$9;
	var dataTypes_1$m = dataTypes$3;
	var EvmChainResolver_1$6 = EvmChainResolver$1;
	/** Get ERC20 token transactions from a contract ordered by block number in descending order. */
	getTokenTransfersOperation.getTokenTransfersOperation = {
	    method: 'GET',
	    name: 'getTokenTransfers',
	    id: 'getTokenTransfers',
	    groupName: 'token',
	    urlPathPattern: '/erc20/{address}/transfers',
	    urlPathParamNames: ['address'],
	    urlSearchParamNames: ['chain', 'fromBlock', 'toBlock', 'fromDate', 'toDate', 'limit', 'cursor', 'disableTotal'],
	    firstPageIndex: 0,
	    getRequestUrlParams: getRequestUrlParams$N,
	    serializeRequest: serializeRequest$N,
	    deserializeRequest: deserializeRequest$N,
	    deserializeResponse: deserializeResponse$N,
	};
	// Methods
	function getRequestUrlParams$N(request, core) {
	    return {
	        chain: EvmChainResolver_1$6.EvmChainResolver.resolve(request.chain, core).apiHex,
	        from_block: (0, common_core_1$G.maybe)(request.fromBlock, String),
	        to_block: (0, common_core_1$G.maybe)(request.toBlock, String),
	        from_date: request.fromDate ? new Date(request.fromDate).toISOString() : undefined,
	        to_date: request.toDate ? new Date(request.toDate).toISOString() : undefined,
	        limit: (0, common_core_1$G.maybe)(request.limit, String),
	        address: dataTypes_1$m.EvmAddress.create(request.address, core).lowercase,
	        cursor: request.cursor,
	        disable_total: request.disableTotal,
	    };
	}
	function deserializeResponse$N(jsonResponse, request, core) {
	    var _a;
	    return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (transfer) {
	        return dataTypes_1$m.Erc20Transfer.create(__assign$k(__assign$k({}, (0, common_core_1$G.toCamelCase)(transfer)), { chain: EvmChainResolver_1$6.EvmChainResolver.resolve(request.chain, core), address: dataTypes_1$m.EvmAddress.create(transfer.address, core), toAddress: dataTypes_1$m.EvmAddress.create(transfer.to_address, core), fromAddress: dataTypes_1$m.EvmAddress.create(transfer.from_address, core), value: common_core_1$G.BigNumber.create(transfer.value), blockTimestamp: new Date(transfer.block_timestamp) }));
	    });
	}
	function serializeRequest$N(request, core) {
	    return {
	        chain: EvmChainResolver_1$6.EvmChainResolver.resolve(request.chain, core).apiHex,
	        fromBlock: request.fromBlock,
	        toBlock: request.toBlock,
	        fromDate: request.fromDate,
	        toDate: request.toDate,
	        limit: request.limit,
	        address: dataTypes_1$m.EvmAddress.create(request.address, core).checksum,
	        cursor: request.cursor,
	        disableTotal: request.disableTotal,
	    };
	}
	function deserializeRequest$N(jsonRequest, core) {
	    return {
	        chain: dataTypes_1$m.EvmChain.create(jsonRequest.chain, core),
	        fromBlock: jsonRequest.fromBlock,
	        toBlock: jsonRequest.toBlock,
	        fromDate: jsonRequest.fromDate,
	        toDate: jsonRequest.toDate,
	        limit: jsonRequest.limit,
	        address: dataTypes_1$m.EvmAddress.create(jsonRequest.address, core),
	        cursor: jsonRequest.cursor,
	        disableTotal: jsonRequest.disableTotal,
	    };
	}

	var getWalletTokenBalancesOperation = {};

	Object.defineProperty(getWalletTokenBalancesOperation, "__esModule", { value: true });
	getWalletTokenBalancesOperation.getWalletTokenBalancesOperation = void 0;
	var common_core_1$F = lib$9;
	var dataTypes_1$l = dataTypes$3;
	var EvmChainResolver_1$5 = EvmChainResolver$1;
	/** Get token balances for a specific wallet address. */
	getWalletTokenBalancesOperation.getWalletTokenBalancesOperation = {
	    method: 'GET',
	    name: 'getWalletTokenBalances',
	    id: 'getWalletTokenBalances',
	    groupName: 'token',
	    urlPathPattern: '/{address}/erc20',
	    urlPathParamNames: ['address'],
	    urlSearchParamNames: ['chain', 'toBlock', 'tokenAddresses'],
	    getRequestUrlParams: getRequestUrlParams$M,
	    serializeRequest: serializeRequest$M,
	    deserializeRequest: deserializeRequest$M,
	    deserializeResponse: deserializeResponse$M,
	};
	// Methods
	function getRequestUrlParams$M(request, core) {
	    return {
	        chain: EvmChainResolver_1$5.EvmChainResolver.resolve(request.chain, core).apiHex,
	        to_block: (0, common_core_1$F.maybe)(request.toBlock, String),
	        token_addresses: (0, common_core_1$F.maybe)(request.tokenAddresses, function (addresses) {
	            return addresses.map(function (address) { return dataTypes_1$l.EvmAddress.create(address, core).lowercase; });
	        }),
	        address: dataTypes_1$l.EvmAddress.create(request.address, core).lowercase,
	    };
	}
	function deserializeResponse$M(jsonResponse, request, core) {
	    return (jsonResponse !== null && jsonResponse !== void 0 ? jsonResponse : []).map(function (token) {
	        return dataTypes_1$l.Erc20Value.create(token.balance, {
	            decimals: token.decimals,
	            token: {
	                decimals: token.decimals,
	                name: token.name,
	                symbol: token.symbol,
	                contractAddress: token.token_address,
	                logo: token.logo,
	                thumbnail: token.thumbnail,
	                chain: EvmChainResolver_1$5.EvmChainResolver.resolve(request.chain, core),
	            },
	        }, core);
	    });
	}
	function serializeRequest$M(request, core) {
	    return {
	        chain: EvmChainResolver_1$5.EvmChainResolver.resolve(request.chain, core).apiHex,
	        tokenAddresses: (0, common_core_1$F.maybe)(request.tokenAddresses, function (addresses) {
	            return addresses.map(function (address) { return dataTypes_1$l.EvmAddress.create(address, core).checksum; });
	        }),
	        address: dataTypes_1$l.EvmAddress.create(request.address).checksum,
	        toBlock: request.toBlock,
	    };
	}
	function deserializeRequest$M(jsonRequest, core) {
	    return {
	        chain: dataTypes_1$l.EvmChain.create(jsonRequest.chain, core),
	        tokenAddresses: (0, common_core_1$F.maybe)(jsonRequest.tokenAddresses, function (addresses) {
	            return addresses.map(function (address) { return dataTypes_1$l.EvmAddress.create(address, core); });
	        }),
	        address: dataTypes_1$l.EvmAddress.create(jsonRequest.address, core),
	        toBlock: jsonRequest.toBlock,
	    };
	}

	var getWalletTokenTransfersOperation = {};

	var __assign$j = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$j = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$j.apply(this, arguments);
	};
	Object.defineProperty(getWalletTokenTransfersOperation, "__esModule", { value: true });
	getWalletTokenTransfersOperation.getWalletTokenTransfersOperation = void 0;
	var common_core_1$E = lib$9;
	var dataTypes_1$k = dataTypes$3;
	var EvmChainResolver_1$4 = EvmChainResolver$1;
	/** Get ERC20 token transactions ordered by block number in descending order. */
	getWalletTokenTransfersOperation.getWalletTokenTransfersOperation = {
	    method: 'GET',
	    name: 'getWalletTokenTransfers',
	    id: 'getWalletTokenTransfers',
	    groupName: 'token',
	    urlPathPattern: '/{address}/erc20/transfers',
	    urlPathParamNames: ['address'],
	    urlSearchParamNames: ['chain', 'fromBlock', 'toBlock', 'fromDate', 'toDate', 'limit', 'cursor', 'disableTotal'],
	    firstPageIndex: 0,
	    getRequestUrlParams: getRequestUrlParams$L,
	    serializeRequest: serializeRequest$L,
	    deserializeRequest: deserializeRequest$L,
	    deserializeResponse: deserializeResponse$L,
	};
	// Methods
	function getRequestUrlParams$L(request, core) {
	    return {
	        chain: EvmChainResolver_1$4.EvmChainResolver.resolve(request.chain, core).apiHex,
	        address: dataTypes_1$k.EvmAddress.create(request.address, core).lowercase,
	        from_block: (0, common_core_1$E.maybe)(request.fromBlock, String),
	        to_block: (0, common_core_1$E.maybe)(request.toBlock, String),
	        from_date: request.fromDate ? new Date(request.fromDate).toISOString() : undefined,
	        to_date: request.toDate ? new Date(request.toDate).toISOString() : undefined,
	        limit: (0, common_core_1$E.maybe)(request.limit, String),
	        cursor: request.cursor,
	        disable_total: request.disableTotal,
	    };
	}
	function deserializeResponse$L(jsonResponse, request, core) {
	    var _a;
	    return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (transfer) {
	        return dataTypes_1$k.Erc20Transfer.create(__assign$j(__assign$j({}, (0, common_core_1$E.toCamelCase)(transfer)), { chain: EvmChainResolver_1$4.EvmChainResolver.resolve(request.chain, core), address: dataTypes_1$k.EvmAddress.create(transfer.address, core), toAddress: dataTypes_1$k.EvmAddress.create(transfer.to_address, core), fromAddress: dataTypes_1$k.EvmAddress.create(transfer.from_address, core), value: common_core_1$E.BigNumber.create(transfer.value), blockTimestamp: new Date(transfer.block_timestamp) }));
	    });
	}
	function serializeRequest$L(request, core) {
	    return {
	        chain: EvmChainResolver_1$4.EvmChainResolver.resolve(request.chain, core).apiHex,
	        address: dataTypes_1$k.EvmAddress.create(request.address, core).checksum,
	        fromBlock: request.fromBlock,
	        toBlock: request.toBlock,
	        fromDate: request.fromDate,
	        toDate: request.toDate,
	        limit: request.limit,
	        cursor: request.cursor,
	        disableTotal: request.disableTotal,
	    };
	}
	function deserializeRequest$L(jsonRequest, core) {
	    return {
	        chain: dataTypes_1$k.EvmChain.create(jsonRequest.chain, core),
	        address: dataTypes_1$k.EvmAddress.create(jsonRequest.address, core),
	        fromBlock: jsonRequest.fromBlock,
	        toBlock: jsonRequest.toBlock,
	        fromDate: jsonRequest.fromDate,
	        toDate: jsonRequest.toDate,
	        limit: jsonRequest.limit,
	        cursor: jsonRequest.cursor,
	        disableTotal: jsonRequest.disableTotal,
	    };
	}

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(getTokenAllowanceOperation, exports);
		__exportStar(getTokenMetadataOperation, exports);
		__exportStar(getTokenMetadataBySymbolOperation, exports);
		__exportStar(getTokenPriceOperation$1, exports);
		__exportStar(getTokenTransfersOperation, exports);
		__exportStar(getWalletTokenBalancesOperation, exports);
		__exportStar(getWalletTokenTransfersOperation, exports);
		__exportStar(getWalletTokenTransfersOperation, exports);
		
	} (token));

	var transaction = {};

	var getTransactionOperation = {};

	Object.defineProperty(getTransactionOperation, "__esModule", { value: true });
	getTransactionOperation.getTransactionOperation = void 0;
	var dataTypes_1$j = dataTypes$3;
	var EvmChainResolver_1$3 = EvmChainResolver$1;
	/** Get the contents of a transaction by the given transaction hash. */
	getTransactionOperation.getTransactionOperation = {
	    method: 'GET',
	    name: 'getTransaction',
	    id: 'getTransaction',
	    groupName: 'transaction',
	    isNullable: true,
	    urlPathPattern: '/transaction/{transactionHash}',
	    urlPathParamNames: ['transactionHash'],
	    urlSearchParamNames: ['chain'],
	    getRequestUrlParams: getRequestUrlParams$K,
	    serializeRequest: serializeRequest$K,
	    deserializeRequest: deserializeRequest$K,
	    deserializeResponse: deserializeResponse$K,
	};
	function getRequestUrlParams$K(request, core) {
	    return {
	        chain: EvmChainResolver_1$3.EvmChainResolver.resolve(request.chain, core).apiHex,
	        transactionHash: request.transactionHash,
	    };
	}
	function serializeRequest$K(request, core) {
	    return {
	        chain: EvmChainResolver_1$3.EvmChainResolver.resolve(request.chain, core).apiHex,
	        transactionHash: request.transactionHash,
	    };
	}
	function deserializeRequest$K(jsonRequest, core) {
	    return {
	        chain: dataTypes_1$j.EvmChain.create(jsonRequest.chain, core),
	        transactionHash: jsonRequest.transactionHash,
	    };
	}
	//TODO: I noticed that the docs comes with a type of "string | unknown" which automatically resolves to "unknown". I think we should fix this in the api, casting for now
	function deserializeResponse$K(jsonResponse, request, core) {
	    var _a;
	    return dataTypes_1$j.EvmTransaction.create({
	        from: jsonResponse.from_address,
	        to: jsonResponse.to_address,
	        value: jsonResponse.value,
	        gasPrice: jsonResponse.gas_price,
	        gasUsed: jsonResponse.receipt_gas_used,
	        data: jsonResponse.input,
	        nonce: jsonResponse.nonce,
	        blockHash: jsonResponse.block_hash,
	        blockNumber: jsonResponse.block_number,
	        blockTimestamp: jsonResponse.block_timestamp,
	        index: jsonResponse.transaction_index,
	        chain: EvmChainResolver_1$3.EvmChainResolver.resolve(request.chain, core),
	        hash: jsonResponse.hash,
	        gas: jsonResponse.gas,
	        cumulativeGasUsed: jsonResponse.receipt_cumulative_gas_used,
	        contractAddress: jsonResponse.receipt_contract_address,
	        logs: ((_a = jsonResponse.logs) !== null && _a !== void 0 ? _a : []).map(function (log) {
	            return dataTypes_1$j.EvmTransactionLog.create({
	                address: log.address,
	                blockHash: log.block_hash,
	                blockNumber: +log.block_number,
	                data: log.data,
	                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
	                topics: [log.topic0, log.topic1, log.topic2, log.topic3],
	                transactionHash: log.transaction_hash,
	                blockTimestamp: log.block_timestamp,
	                logIndex: +log.log_index,
	                transactionIndex: +log.transaction_index,
	                chain: EvmChainResolver_1$3.EvmChainResolver.resolve(request.chain, core),
	            }, core);
	        }),
	        receiptRoot: jsonResponse.receipt_root,
	        receiptStatus: jsonResponse.receipt_status,
	    }, core);
	}

	var getWalletTransactionsOperation = {};

	Object.defineProperty(getWalletTransactionsOperation, "__esModule", { value: true });
	getWalletTransactionsOperation.getWalletTransactionsOperation = void 0;
	var common_core_1$D = lib$9;
	var dataTypes_1$i = dataTypes$3;
	var EvmChainResolver_1$2 = EvmChainResolver$1;
	/** Get native transactions ordered by block number in descending order. */
	getWalletTransactionsOperation.getWalletTransactionsOperation = {
	    method: 'GET',
	    name: 'getWalletTransactions',
	    id: 'getWalletTransactions',
	    groupName: 'transaction',
	    urlPathPattern: '/{address}',
	    urlPathParamNames: ['address'],
	    urlSearchParamNames: ['chain', 'fromBlock', 'toBlock', 'fromDate', 'toDate', 'cursor', 'limit', 'disableTotal'],
	    firstPageIndex: 0,
	    getRequestUrlParams: getRequestUrlParams$J,
	    serializeRequest: serializeRequest$J,
	    deserializeRequest: deserializeRequest$J,
	    deserializeResponse: deserializeResponse$J,
	};
	// Methods
	function getRequestUrlParams$J(request, core) {
	    return {
	        chain: EvmChainResolver_1$2.EvmChainResolver.resolve(request.chain, core).apiHex,
	        from_block: (0, common_core_1$D.maybe)(request.fromBlock, String),
	        to_block: (0, common_core_1$D.maybe)(request.toBlock, String),
	        from_date: request.fromDate ? new Date(request.fromDate).toISOString() : undefined,
	        to_date: request.toDate ? new Date(request.toDate).toISOString() : undefined,
	        cursor: request.cursor,
	        limit: (0, common_core_1$D.maybe)(request.limit, String),
	        address: dataTypes_1$i.EvmAddress.create(request.address, core).lowercase,
	        disable_total: request.disableTotal,
	    };
	}
	function serializeRequest$J(request, core) {
	    return {
	        chain: EvmChainResolver_1$2.EvmChainResolver.resolve(request.chain, core).apiHex,
	        fromBlock: request.fromBlock,
	        toBlock: request.toBlock,
	        fromDate: request.fromDate,
	        toDate: request.toDate,
	        cursor: request.cursor,
	        limit: request.limit,
	        address: dataTypes_1$i.EvmAddress.create(request.address, core).checksum,
	        disableTotal: request.disableTotal,
	    };
	}
	function deserializeRequest$J(jsonRequest, core) {
	    return {
	        chain: dataTypes_1$i.EvmChain.create(jsonRequest.chain, core),
	        fromBlock: jsonRequest.fromBlock,
	        toBlock: jsonRequest.toBlock,
	        fromDate: jsonRequest.fromDate,
	        toDate: jsonRequest.toDate,
	        cursor: jsonRequest.cursor,
	        limit: jsonRequest.limit,
	        address: dataTypes_1$i.EvmAddress.create(jsonRequest.address, core),
	        disableTotal: jsonRequest.disableTotal,
	    };
	}
	function deserializeResponse$J(jsonResponse, request, core) {
	    var _a;
	    return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (transfer) {
	        return dataTypes_1$i.EvmTransaction.create({
	            cumulativeGasUsed: transfer.receipt_cumulative_gas_used,
	            gasPrice: transfer.gas_price,
	            gasUsed: transfer.receipt_gas_used,
	            index: +transfer.transaction_index,
	            contractAddress: transfer.receipt_contract_address,
	            receiptRoot: transfer.receipt_root,
	            receiptStatus: +transfer.receipt_status,
	            chain: EvmChainResolver_1$2.EvmChainResolver.resolve(request.chain, core),
	            data: transfer.input,
	            from: transfer.from_address,
	            hash: transfer.hash,
	            nonce: transfer.nonce,
	            value: transfer.value,
	            blockHash: transfer.block_hash,
	            blockNumber: +transfer.block_number,
	            blockTimestamp: new Date(transfer.block_timestamp),
	            gas: transfer.gas ? common_core_1$D.BigNumber.create(transfer.gas) : null,
	            to: transfer.to_address ? transfer.to_address : null,
	        }, core);
	    });
	}

	var getWalletTransactionsVerboseOperation = {};

	Object.defineProperty(getWalletTransactionsVerboseOperation, "__esModule", { value: true });
	getWalletTransactionsVerboseOperation.getWalletTransactionsVerboseOperation = void 0;
	var common_core_1$C = lib$9;
	var dataTypes_1$h = dataTypes$3;
	var EvmChainResolver_1$1 = EvmChainResolver$1;
	/** Get native transactions ordered by block number in descending order. */
	getWalletTransactionsVerboseOperation.getWalletTransactionsVerboseOperation = {
	    method: 'GET',
	    name: 'getWalletTransactionsVerbose',
	    id: 'getWalletTransactionsVerbose',
	    groupName: 'transaction',
	    urlPathPattern: '/{address}/verbose',
	    urlPathParamNames: ['address'],
	    urlSearchParamNames: ['chain', 'fromBlock', 'toBlock', 'fromDate', 'toDate', 'cursor', 'limit', 'disableTotal'],
	    firstPageIndex: 0,
	    getRequestUrlParams: getRequestUrlParams$I,
	    serializeRequest: serializeRequest$I,
	    deserializeRequest: deserializeRequest$I,
	    deserializeResponse: deserializeResponse$I,
	};
	// Methods
	function getRequestUrlParams$I(request, core) {
	    return {
	        chain: EvmChainResolver_1$1.EvmChainResolver.resolve(request.chain, core).apiHex,
	        from_block: (0, common_core_1$C.maybe)(request.fromBlock, String),
	        to_block: (0, common_core_1$C.maybe)(request.toBlock, String),
	        from_date: request.fromDate ? new Date(request.fromDate).toISOString() : undefined,
	        to_date: request.toDate ? new Date(request.toDate).toISOString() : undefined,
	        cursor: request.cursor,
	        limit: (0, common_core_1$C.maybe)(request.limit, String),
	        address: dataTypes_1$h.EvmAddress.create(request.address, core).lowercase,
	        disable_total: request.disableTotal,
	    };
	}
	function serializeRequest$I(request, core) {
	    return {
	        chain: EvmChainResolver_1$1.EvmChainResolver.resolve(request.chain, core).apiHex,
	        fromBlock: request.fromBlock,
	        toBlock: request.toBlock,
	        fromDate: request.fromDate,
	        toDate: request.toDate,
	        cursor: request.cursor,
	        limit: request.limit,
	        address: dataTypes_1$h.EvmAddress.create(request.address, core).checksum,
	        disableTotal: request.disableTotal,
	    };
	}
	function deserializeRequest$I(jsonRequest, core) {
	    return {
	        chain: dataTypes_1$h.EvmChain.create(jsonRequest.chain, core),
	        fromBlock: jsonRequest.fromBlock,
	        toBlock: jsonRequest.toBlock,
	        fromDate: jsonRequest.fromDate,
	        toDate: jsonRequest.toDate,
	        cursor: jsonRequest.cursor,
	        limit: jsonRequest.limit,
	        address: dataTypes_1$h.EvmAddress.create(jsonRequest.address, core),
	        disableTotal: jsonRequest.disableTotal,
	    };
	}
	function deserializeResponse$I(jsonResponse, request, core) {
	    var _a;
	    return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (transfer) {
	        var _a;
	        return dataTypes_1$h.EvmTransaction.create({
	            cumulativeGasUsed: transfer.receipt_cumulative_gas_used,
	            gasPrice: transfer.gas_price,
	            gasUsed: transfer.receipt_gas_used,
	            index: +transfer.transaction_index,
	            contractAddress: transfer.receipt_contract_address,
	            receiptRoot: transfer.receipt_root,
	            receiptStatus: +transfer.receipt_status,
	            chain: EvmChainResolver_1$1.EvmChainResolver.resolve(request.chain, core),
	            data: transfer.input,
	            from: dataTypes_1$h.EvmAddress.create(transfer.from_address, core),
	            hash: transfer.hash,
	            nonce: transfer.nonce,
	            value: transfer.value,
	            blockHash: transfer.block_hash,
	            blockNumber: +transfer.block_number,
	            blockTimestamp: new Date(transfer.block_timestamp),
	            gas: common_core_1$C.BigNumber.create(transfer.gas),
	            to: dataTypes_1$h.EvmAddress.create(transfer.to_address, core),
	            logs: ((_a = transfer.logs) !== null && _a !== void 0 ? _a : []).map(function (log) {
	                return dataTypes_1$h.EvmTransactionLog.create({
	                    logIndex: +log.log_index,
	                    transactionHash: log.transaction_hash,
	                    transactionIndex: +log.transaction_index,
	                    address: log.address,
	                    data: log.data,
	                    topics: [log.topic0, log.topic1, log.topic2, log.topic3],
	                    blockHash: log.block_hash,
	                    blockNumber: +log.block_number,
	                    blockTimestamp: transfer.block_timestamp,
	                    chain: EvmChainResolver_1$1.EvmChainResolver.resolve(request.chain, core),
	                }, core);
	            }),
	        }, core);
	    });
	}

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(getTransactionOperation, exports);
		__exportStar(getWalletTransactionsOperation, exports);
		__exportStar(getWalletTransactionsVerboseOperation, exports);
		
	} (transaction));

	var utils$n = {};

	var runContractFunctionOperation = {};

	Object.defineProperty(runContractFunctionOperation, "__esModule", { value: true });
	runContractFunctionOperation.runContractFunctionOperation = void 0;
	var dataTypes_1$g = dataTypes$3;
	var EvmChainResolver_1 = EvmChainResolver$1;
	/** Run a given function of a contract ABI and retrieve readonly data. */
	runContractFunctionOperation.runContractFunctionOperation = {
	    method: 'POST',
	    name: 'runContractFunction',
	    id: 'runContractFunction',
	    groupName: 'utils',
	    urlPathParamNames: ['address'],
	    urlSearchParamNames: ['chain', 'functionName'],
	    urlPathPattern: '/{address}/function',
	    bodyType: 'properties',
	    bodyParamNames: ['abi', 'params'],
	    getRequestUrlParams: getRequestUrlParams$H,
	    getRequestBody: getRequestBody$o,
	    deserializeResponse: deserializeResponse$H,
	    serializeRequest: serializeRequest$H,
	    deserializeRequest: deserializeRequest$H,
	};
	// Methods
	function getRequestUrlParams$H(request, core) {
	    return {
	        address: dataTypes_1$g.EvmAddress.create(request.address, core).lowercase,
	        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,
	        function_name: request.functionName,
	    };
	}
	function getRequestBody$o(request) {
	    return {
	        abi: request.abi,
	        params: request.params,
	    };
	}
	function deserializeResponse$H(jsonResponse) {
	    return jsonResponse;
	}
	function serializeRequest$H(request, core) {
	    return {
	        address: dataTypes_1$g.EvmAddress.create(request.address, core).checksum,
	        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,
	        functionName: request.functionName,
	        abi: request.abi,
	        params: request.params,
	    };
	}
	function deserializeRequest$H(jsonRequest, core) {
	    return {
	        address: dataTypes_1$g.EvmAddress.create(jsonRequest.address, core),
	        chain: dataTypes_1$g.EvmChain.create(jsonRequest.chain, core),
	        functionName: jsonRequest.functionName,
	        abi: jsonRequest.abi,
	        params: jsonRequest.params,
	    };
	}

	var endpointWeightsOperation = {};

	Object.defineProperty(endpointWeightsOperation, "__esModule", { value: true });
	endpointWeightsOperation.endpointWeightsOperation = void 0;
	/** Get the endpoint price list for rate limits and cost. */
	endpointWeightsOperation.endpointWeightsOperation = {
	    method: 'GET',
	    name: 'endpointWeights',
	    id: 'endpointWeights',
	    groupName: 'utils',
	    urlPathPattern: '/info/endpointWeights',
	    getRequestUrlParams: getRequestUrlParams$G,
	    deserializeRequest: deserializeRequest$G,
	    serializeRequest: serializeRequest$G,
	    deserializeResponse: deserializeResponse$G,
	};
	// Methods
	function getRequestUrlParams$G() {
	    return {};
	}
	function serializeRequest$G() {
	    return undefined;
	}
	function deserializeRequest$G() {
	    return {};
	}
	function deserializeResponse$G(jsonResponse) {
	    return jsonResponse;
	}

	var web3ApiVersionOperation = {};

	Object.defineProperty(web3ApiVersionOperation, "__esModule", { value: true });
	web3ApiVersionOperation.web3ApiVersionOperation = void 0;
	/** Get the current version of the Moralis Web3 API. */
	web3ApiVersionOperation.web3ApiVersionOperation = {
	    method: 'GET',
	    name: 'web3ApiVersion',
	    id: 'web3ApiVersion',
	    groupName: 'utils',
	    urlPathPattern: '/web3/version',
	    deserializeRequest: deserializeRequest$F,
	    serializeRequest: serializeRequest$F,
	    getRequestUrlParams: getRequestUrlParams$F,
	    deserializeResponse: deserializeResponse$F,
	};
	// Methods
	function getRequestUrlParams$F() {
	    return {};
	}
	function serializeRequest$F() {
	    return undefined;
	}
	function deserializeRequest$F() {
	    return {};
	}
	function deserializeResponse$F(jsonResponse) {
	    return jsonResponse;
	}

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(runContractFunctionOperation, exports);
		__exportStar(endpointWeightsOperation, exports);
		__exportStar(web3ApiVersionOperation, exports);
		
	} (utils$n));

	Object.defineProperty(operations$5, "__esModule", { value: true });
	operations$5.operations = void 0;
	var balance_1 = balance;
	var block_1 = block;
	var defi_1 = defi;
	var events_1 = events$1;
	var ipfs_1 = ipfs;
	var nft_1 = nft;
	var resolve_1 = resolve;
	var token_1 = token;
	var getWalletTokenTransfersOperation_1 = getWalletTokenTransfersOperation;
	var transaction_1 = transaction;
	var utils_1 = utils$n;
	var runContractFunctionOperation_1 = runContractFunctionOperation;
	operations$5.operations = [
	    utils_1.endpointWeightsOperation,
	    block_1.getBlockOperation,
	    events_1.getContractEventsOperation,
	    events_1.getContractLogsOperation,
	    nft_1.getContractNFTsOperation,
	    block_1.getDateToBlockOperation,
	    nft_1.getMultipleNFTsOperation,
	    balance_1.getNativeBalanceOperation,
	    balance_1.getNativeBalancesForAddressesOperation,
	    nft_1.getNFTContractMetadataOperation,
	    nft_1.getNFTContractTransfersOperation,
	    nft_1.getNFTLowestPriceOperation,
	    nft_1.getNFTMetadataOperation,
	    nft_1.getNFTOwnersOperation,
	    nft_1.getNFTTokenIdOwnersOperation,
	    nft_1.getNFTTradesOperation,
	    nft_1.getNFTTransfersByBlockOperation,
	    nft_1.getNFTTransfersFromToBlockOperation,
	    nft_1.getNFTTransfersOperation,
	    defi_1.getPairAddressOperation,
	    defi_1.getPairReservesOperation,
	    token_1.getTokenAllowanceOperation,
	    token_1.getTokenMetadataBySymbolOperation,
	    token_1.getTokenMetadataOperation,
	    token_1.getTokenPriceOperation,
	    token_1.getTokenTransfersOperation,
	    transaction_1.getTransactionOperation,
	    nft_1.getWalletNFTCollectionsOperation,
	    nft_1.getWalletNFTsOperation,
	    nft_1.getWalletNFTTransfersOperation,
	    token_1.getWalletTokenBalancesOperation,
	    getWalletTokenTransfersOperation_1.getWalletTokenTransfersOperation,
	    transaction_1.getWalletTransactionsOperation,
	    transaction_1.getWalletTransactionsVerboseOperation,
	    resolve_1.resolveAddressOperation,
	    resolve_1.resolveDomainOperation,
	    nft_1.reSyncMetadataOperation,
	    runContractFunctionOperation_1.runContractFunctionOperation,
	    nft_1.searchNFTsOperation,
	    nft_1.syncNFTContractOperation,
	    ipfs_1.uploadFolderOperation,
	    utils_1.web3ApiVersionOperation,
	];

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(balance, exports);
		__exportStar(block, exports);
		__exportStar(defi, exports);
		__exportStar(events$1, exports);
		__exportStar(ipfs, exports);
		__exportStar(nft, exports);
		__exportStar(operations$5, exports);
		__exportStar(resolve, exports);
		__exportStar(token, exports);
		__exportStar(transaction, exports);
		__exportStar(utils$n, exports);
		
	} (operations$6));

	var config$2 = {};

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(CommonEvmUtilsConfig, exports);
		__exportStar(CommonEvmUtilsConfigSetup$1, exports);
		
	} (config$2));

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(dataTypes$3, exports);
		__exportStar(CommonEvmUtils$1, exports);
		__exportStar(EvmChainResolver$1, exports);
		__exportStar(operations$6, exports);
		__exportStar(config$2, exports);
		
	} (lib$6));

	var StreamTrigger$2 = {};

	var StreamTrigger$1 = {};

	var StreamSelector$2 = {};

	var StreamSelector$1 = {};

	Object.defineProperty(StreamSelector$1, "__esModule", { value: true });
	StreamSelector$1.StreamSelector = void 0;
	var common_core_1$B = lib$9;
	/**
	 * The StreamSelector class is a representation of a stream selector
	 *
	 * Use this class any time you want to use a value in your stream trigger data that is not a static value
	 *
	 * @category DataType
	 */
	var StreamSelector = /** @class */ (function () {
	    /**
	     * Create a new instance of StreamSelector from any valid stream data field
	     *
	     * @example
	     * ```
	     * const receiverSelector = StreamSelector.create('$to')
	     * const selector = StreamSelector.create('$contract')
	     * ```
	     */
	    function StreamSelector(data) {
	        this._value = StreamSelector.parse(data);
	    }
	    StreamSelector.isSelectorString = function (selector) {
	        if (selector instanceof StreamSelector) {
	            return true;
	        }
	        return selector.startsWith('$');
	    };
	    StreamSelector.create = function (streamSelector) {
	        if (streamSelector instanceof StreamSelector) {
	            return streamSelector;
	        }
	        return new StreamSelector(streamSelector);
	    };
	    StreamSelector.parse = function (streamSelector) {
	        if (!StreamSelector.isSelectorString(streamSelector)) {
	            throw new common_core_1$B.CoreError({
	                code: common_core_1$B.CoreErrorCode.INVALID_ARGUMENT,
	                message: 'Invalid selector string provided',
	            });
	        }
	        return streamSelector;
	    };
	    /**
	     * Compares two StreamSelector data. It checks a deep equality check of both values.
	     * @param valueA - the first StreamSelectorish data to compare
	     * @param valueB - the second StreamSelectorish data to compare
	     * @returns true if the values are equal, false otherwise
	     * @example
	     * ```ts
	     *  StreamSelector.equals(valueA, valueB);
	     * ```
	     */
	    StreamSelector.equals = function (valueA, valueB) {
	        var streamSelectorA = StreamSelector.create(valueA);
	        var streamSelectorB = StreamSelector.create(valueB);
	        return streamSelectorA.value === streamSelectorB.value;
	    };
	    /**
	     * Compares an StreamSelectorish data to this StreamSelector instance.
	     * @param streamSelector - the streamSelector to compare
	     * @returns true if the streamSelector is equal to the current instance, false otherwise
	     * @example
	     * ```ts
	     * streamSelector.equals(streamSelector);
	     * ```
	     */
	    StreamSelector.prototype.equals = function (streamSelector) {
	        return StreamSelector.equals(this, streamSelector);
	    };
	    /**
	     * Converts the StreamSelector instance to a JSON object.
	     * @returns JSON object of the StreamSelector instance
	     * @example `streamSelector.format()`
	     */
	    StreamSelector.prototype.format = function () {
	        return this.value;
	    };
	    Object.defineProperty(StreamSelector.prototype, "value", {
	        /**
	         * @returns the selector path
	         * @example '$from'
	         */
	        get: function () {
	            return this._value;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    return StreamSelector;
	}());
	StreamSelector$1.StreamSelector = StreamSelector;

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(StreamSelector$1, exports);
		
	} (StreamSelector$2));

	var __assign$i = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$i = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$i.apply(this, arguments);
	};
	var __rest$i = (commonjsGlobal && commonjsGlobal.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	Object.defineProperty(StreamTrigger$1, "__esModule", { value: true });
	StreamTrigger$1.StreamTrigger = void 0;
	var common_core_1$A = lib$9;
	var common_evm_utils_1$l = lib$6;
	var StreamSelector_1 = StreamSelector$2;
	/**
	 * The StreamTrigger class is a representation of a stream trigger that is used by the Moralis Stream API
	 *
	 * @category DataType
	 */
	var StreamTrigger = /** @class */ (function () {
	    function StreamTrigger(data, core) {
	        this._data = StreamTrigger.parse(data, core);
	    }
	    StreamTrigger.create = function (data, core) {
	        if (data instanceof StreamTrigger) {
	            return data;
	        }
	        var finalCore = core !== null && core !== void 0 ? core : common_core_1$A.CoreProvider.getDefault();
	        return new StreamTrigger(data, finalCore);
	    };
	    StreamTrigger.parseSelectorOrAddress = function (input, core) {
	        var result;
	        // If it is not an EvmAddress, it can be a string, but only the ones that are selectors should be treated that way
	        if (!(input instanceof common_evm_utils_1$l.EvmAddress) && StreamSelector_1.StreamSelector.isSelectorString(input)) {
	            result = StreamSelector_1.StreamSelector.create(input);
	        }
	        else {
	            result = common_evm_utils_1$l.EvmAddress.create(input, core);
	        }
	        return result;
	    };
	    // eslint-disable-next-line complexity
	    StreamTrigger.equals = function (valueA, valueB) {
	        var _a, _b;
	        var streamTriggerA = StreamTrigger.create(valueA);
	        var streamTriggerB = StreamTrigger.create(valueB);
	        if (streamTriggerA.type !== streamTriggerB.type) {
	            return false;
	        }
	        // contractAddress can be a StreamSelector or an EvmAddress. It is easier to compare them as strings
	        if (streamTriggerA.contractAddress.format() !== streamTriggerB.contractAddress.format()) {
	            return false;
	        }
	        if (streamTriggerA.functionAbi !== streamTriggerB.functionAbi) {
	            return false;
	        }
	        if (((_a = streamTriggerA.inputs) === null || _a === void 0 ? void 0 : _a.length) !== ((_b = streamTriggerB.inputs) === null || _b === void 0 ? void 0 : _b.length)) {
	            return false;
	        }
	        var triggerInputsA = streamTriggerA.inputs || [];
	        var triggerInputsB = streamTriggerB.inputs || [];
	        for (var i = 0; i < (triggerInputsA === null || triggerInputsA === void 0 ? void 0 : triggerInputsA.length); i++) {
	            if (triggerInputsA[i] !== triggerInputsB[i]) {
	                return false;
	            }
	        }
	        if (streamTriggerA.topic0 !== streamTriggerB.topic0) {
	            return false;
	        }
	        if (streamTriggerA.callFrom !== streamTriggerB.callFrom) {
	            return false;
	        }
	        return true;
	    };
	    /**
	     * Compares two StreamTrigger arrays. It checks a deep equality check of both values, meaning that all the values have to be on both arrays.
	     * @param valueA - the first StreamTriggerish[] data to compare
	     * @param valueB - the second StreamTriggerish[] data to compare
	     * @returns true if all values are equal, false otherwise
	     * @example
	     * ```ts
	     *  StreamTrigger.arrayEquals(valueA, valueB);
	     * ```
	     */
	    StreamTrigger.arrayEquals = function (valueA, valueB) {
	        if (valueA.length !== valueB.length) {
	            return false;
	        }
	        var triggersA = valueA.map(function (trigger) { return StreamTrigger.create(trigger); });
	        var triggersB = valueB.map(function (trigger) { return StreamTrigger.create(trigger); });
	        var seenTriggersB = Array(triggersB.length).fill(false);
	        var _loop_1 = function (i) {
	            var indexB = triggersB.findIndex(function (triggerB) { return triggerB.equals(triggersA[i]); });
	            if (indexB < 0) {
	                return { value: false };
	            }
	            seenTriggersB[indexB] = true;
	        };
	        for (var i = 0; i < triggersA.length; i++) {
	            var state_1 = _loop_1(i);
	            if (typeof state_1 === "object")
	                return state_1.value;
	        }
	        if (seenTriggersB.some(function (seen) { return !seen; })) {
	            return false;
	        }
	        return true;
	    };
	    /**
	     * Compares an StreamTrigger data to this StreamTrigger instance.
	     * @param value - the value to compare
	     * @returns true if the value is equal to the current instance, false otherwise
	     * @example
	     * ```ts
	     * streamTrigger.equals(value);
	     * ```
	     */
	    StreamTrigger.prototype.equals = function (value) {
	        return StreamTrigger.equals(this, value);
	    };
	    /**
	     * Converts the StreamTrigger instance to a JSON object.
	     * @returns JSON object of the StreamTrigger instance
	     * @example `streamTrigger.toJSON()`
	     */
	    StreamTrigger.prototype.toJSON = function () {
	        var _a = this._data, contractAddress = _a.contractAddress, callFrom = _a.callFrom, data = __rest$i(_a, ["contractAddress", "callFrom"]);
	        return __assign$i(__assign$i({}, data), { contractAddress: contractAddress.format(), callFrom: callFrom === null || callFrom === void 0 ? void 0 : callFrom.format() });
	    };
	    /**
	     * Converts the StreamTrigger instance to a JSON object.
	     * @returns JSON object of the StreamTrigger instance
	     * @example `streamTrigger.format()`
	     */
	    StreamTrigger.prototype.format = function () {
	        return this.toJSON();
	    };
	    Object.defineProperty(StreamTrigger.prototype, "type", {
	        get: function () {
	            return this._data.type;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamTrigger.prototype, "contractAddress", {
	        get: function () {
	            return this._data.contractAddress;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamTrigger.prototype, "functionAbi", {
	        get: function () {
	            return this._data.functionAbi;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamTrigger.prototype, "inputs", {
	        get: function () {
	            return this._data.inputs;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamTrigger.prototype, "topic0", {
	        get: function () {
	            return this._data.topic0;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamTrigger.prototype, "callFrom", {
	        get: function () {
	            return this._data.callFrom;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    StreamTrigger.parse = function (data, core) {
	        var contractAddressInput = data.contractAddress, callFromInput = data.callFrom, input = __rest$i(data, ["contractAddress", "callFrom"]);
	        var contractAddress = StreamTrigger.parseSelectorOrAddress(contractAddressInput, core);
	        var callFrom = (0, common_core_1$A.maybe)(callFromInput, function (value) { return StreamTrigger.parseSelectorOrAddress(value, core); });
	        return __assign$i(__assign$i({}, input), { contractAddress: contractAddress, callFrom: callFrom });
	    };
	    return StreamTrigger;
	}());
	StreamTrigger$1.StreamTrigger = StreamTrigger;

	var types$f = {};

	Object.defineProperty(types$f, "__esModule", { value: true });

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(StreamTrigger$1, exports);
		__exportStar(types$f, exports);
		
	} (StreamTrigger$2));

	var __assign$h = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$h = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$h.apply(this, arguments);
	};
	var __rest$h = (commonjsGlobal && commonjsGlobal.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	Object.defineProperty(EvmStream$1, "__esModule", { value: true });
	EvmStream$1.EvmStream = void 0;
	var common_core_1$z = lib$9;
	var common_evm_utils_1$k = lib$6;
	var StreamTrigger_1 = StreamTrigger$2;
	/**
	 * The EvmStream class is a representation of Moralis Stream that is returned by the Moralis Stream API
	 *
	 * @category DataType
	 */
	var EvmStream = /** @class */ (function () {
	    function EvmStream(data, core) {
	        this._data = EvmStream.parse(data, core);
	    }
	    /**
	     * Create a new instance of EvmStream
	     *
	     * @param data - the EvmStreamish type
	     * @param core - the Core instance
	     * @example
	     * ```ts
	     * const evmStream = EvmStream.create(data);
	     * ```
	     * @returns an instance of EvmStream
	     */
	    EvmStream.create = function (data, core) {
	        if (data instanceof EvmStream) {
	            return data;
	        }
	        var finalCore = core !== null && core !== void 0 ? core : common_core_1$z.CoreProvider.getDefault();
	        return new EvmStream(data, finalCore);
	    };
	    /**
	     * Compares two EvmStream data. It checks a deep equality check of both values.
	     * @param valueA - the first EvmStreamish data to compare
	     * @param valueB - the second EvmStreamish data to compare
	     * @returns true if the values are equal, false otherwise
	     * @example
	     * ```ts
	     *  EvmStream.equals(valueA, valueB);
	     * ```
	     */
	    EvmStream.equals = function (valueA, valueB) {
	        var _a, _b;
	        var evmStreamA = EvmStream.create(valueA);
	        var evmStreamB = EvmStream.create(valueB);
	        if (evmStreamA.id !== evmStreamB.id) {
	            return false;
	        }
	        if (((_a = evmStreamA.triggers) === null || _a === void 0 ? void 0 : _a.length) !== ((_b = evmStreamB.triggers) === null || _b === void 0 ? void 0 : _b.length) ||
	            !StreamTrigger_1.StreamTrigger.arrayEquals(evmStreamA.triggers || [], evmStreamB.triggers || [])) {
	            return false;
	        }
	        return true;
	    };
	    /**
	     * Compares an EvmStreamish data to this EvmStream instance.
	     * @param value - the value to compare
	     * @returns true if the value is equal to the current instance, false otherwise
	     * @example
	     * ```ts
	     * evmStream.equals(value);
	     * ```
	     */
	    EvmStream.prototype.equals = function (value) {
	        return EvmStream.equals(this, value);
	    };
	    /**
	     * Converts the EvmStream instance to a JSON object.
	     * @returns JSON object of the EvmStream instance
	     * @example `evmStream.toJSON()`
	     */
	    EvmStream.prototype.toJSON = function () {
	        var _a = this._data, chains = _a.chains, triggers = _a.triggers, data = __rest$h(_a, ["chains", "triggers"]);
	        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
	        return __assign$h(__assign$h({}, data), { chainIds: chains.map(function (chain) { return chain.format(); }), triggers: triggers === null || triggers === void 0 ? void 0 : triggers.map(function (trigger) { return trigger.format(); }) });
	    };
	    /**
	     * Converts the EvmStream instance to a JSON object.
	     * @returns JSON object of the EvmStream instance
	     * @example `evmStream.format()`
	     */
	    EvmStream.prototype.format = function () {
	        return this.toJSON();
	    };
	    Object.defineProperty(EvmStream.prototype, "chains", {
	        get: function () {
	            return this._data.chains;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmStream.prototype, "chainIds", {
	        get: function () {
	            return this._data.chains.map(function (chain) { return chain.format(); });
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmStream.prototype, "webhookUrl", {
	        get: function () {
	            return this._data.webhookUrl;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmStream.prototype, "description", {
	        get: function () {
	            return this._data.description;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmStream.prototype, "tag", {
	        get: function () {
	            return this._data.tag;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmStream.prototype, "topic0", {
	        get: function () {
	            return this._data.topic0;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmStream.prototype, "allAddresses", {
	        get: function () {
	            return this._data.allAddresses;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmStream.prototype, "includeNativeTxs", {
	        get: function () {
	            return this._data.includeNativeTxs;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmStream.prototype, "includeContractLogs", {
	        get: function () {
	            return this._data.includeContractLogs;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmStream.prototype, "includeInternalTxs", {
	        get: function () {
	            return this._data.includeInternalTxs;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmStream.prototype, "abi", {
	        get: function () {
	            return this._data.abi;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmStream.prototype, "advancedOptions", {
	        get: function () {
	            return this._data.advancedOptions;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmStream.prototype, "id", {
	        get: function () {
	            return this._data.id;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmStream.prototype, "status", {
	        get: function () {
	            return this._data.status;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmStream.prototype, "statusMessage", {
	        get: function () {
	            return this._data.statusMessage;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmStream.prototype, "triggers", {
	        get: function () {
	            return this._data.triggers;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmStream.prototype, "getNativeBalances", {
	        get: function () {
	            return this._data.getNativeBalances;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    EvmStream.parse = function (data, core) {
	        var _a, _b, _c, _d;
	        return __assign$h(__assign$h({}, data), { chains: data.chainIds.map(function (chainId) { return common_evm_utils_1$k.EvmChain.create(chainId, core); }), topic0: (0, common_core_1$z.maybe)(data.topic0), allAddresses: (_a = data.allAddresses) !== null && _a !== void 0 ? _a : false, includeContractLogs: (_b = data.includeContractLogs) !== null && _b !== void 0 ? _b : false, includeInternalTxs: (_c = data.includeInternalTxs) !== null && _c !== void 0 ? _c : false, includeNativeTxs: (_d = data.includeNativeTxs) !== null && _d !== void 0 ? _d : false, advancedOptions: (0, common_core_1$z.maybe)(data.advancedOptions), abi: (0, common_core_1$z.maybe)(data.abi), triggers: (0, common_core_1$z.maybe)(data.triggers, function (triggers) { return triggers.map(function (trigger) { return StreamTrigger_1.StreamTrigger.create(trigger, core); }); }), getNativeBalances: (0, common_core_1$z.maybe)(data.getNativeBalances) });
	    };
	    return EvmStream;
	}());
	EvmStream$1.EvmStream = EvmStream;

	var types$e = {};

	Object.defineProperty(types$e, "__esModule", { value: true });

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(EvmStream$1, exports);
		__exportStar(types$e, exports);
		
	} (EvmStream$2));

	var EvmStreamResult$2 = {};

	var EvmStreamResult$1 = {};

	var EvmStreamResultFormatter$1 = {};

	var __assign$g = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$g = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$g.apply(this, arguments);
	};
	Object.defineProperty(EvmStreamResultFormatter$1, "__esModule", { value: true });
	EvmStreamResultFormatter$1.EvmStreamResultFormatter = void 0;
	var EvmStreamResultFormatter = /** @class */ (function () {
	    function EvmStreamResultFormatter() {
	    }
	    EvmStreamResultFormatter.toJSON = function (data) {
	        return __assign$g(__assign$g({}, data), { erc20Transfers: data.erc20Transfers.map(function (value) { return value.toJSON(); }), erc20Approvals: data.erc20Approvals.map(function (value) { return value.toJSON(); }), nftTransfers: data.nftTransfers.map(function (value) { return value.toJSON(); }), nftApprovals: {
	                ERC721: data.nftApprovals.ERC721.map(function (value) { return value.toJSON(); }),
	                ERC1155: data.nftApprovals.ERC1155.map(function (value) { return value.toJSON(); }),
	            }, chain: data.chain.format(), block: data.block.toJSON(), logs: data.logs.map(function (value) { return value.toJSON(); }), txs: data.txs.map(function (value) { return value.toJSON(); }), txsInternal: data.txsInternal.map(function (value) { return value.toJSON(); }), abi: data.abi, nativeBalances: data.nativeBalances.map(function (nativeBalance) { return nativeBalance.toJSON(); }) });
	    };
	    return EvmStreamResultFormatter;
	}());
	EvmStreamResultFormatter$1.EvmStreamResultFormatter = EvmStreamResultFormatter;

	var EvmStreamResultParser$1 = {};

	var StreamErc1155Approval$2 = {};

	var StreamTriggerOutput$2 = {};

	var StreamTriggerOutput$1 = {};

	var __assign$f = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$f = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$f.apply(this, arguments);
	};
	var __rest$g = (commonjsGlobal && commonjsGlobal.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	Object.defineProperty(StreamTriggerOutput$1, "__esModule", { value: true });
	StreamTriggerOutput$1.StreamTriggerOutput = void 0;
	var common_core_1$y = lib$9;
	/**
	 * The StreamTrigger class is a representation of a stream trigger that is used by the Moralis Stream API
	 *
	 * @category DataType
	 */
	var StreamTriggerOutput = /** @class */ (function () {
	    function StreamTriggerOutput(data, core) {
	        this._data = StreamTriggerOutput.parse(data, core);
	    }
	    StreamTriggerOutput.create = function (data, core) {
	        if (data instanceof StreamTriggerOutput) {
	            return data;
	        }
	        var finalCore = core !== null && core !== void 0 ? core : common_core_1$y.CoreProvider.getDefault();
	        return new StreamTriggerOutput(data, finalCore);
	    };
	    /**
	     * Compares two StreamTriggerOutput data. It checks a deep equality check of both values.
	     * @param valueA - the first StreamTriggerOutputish data to compare
	     * @param valueB - the second StreamTriggerOutputish data to compare
	     * @returns true if the values are equal, false otherwise
	     * @example
	     * ```ts
	     *  StreamTriggerOutput.equals(valueA, valueB);
	     * ```
	     */
	    StreamTriggerOutput.equals = function (valueA, valueB) {
	        var streamTriggerOutputA = StreamTriggerOutput.create(valueA);
	        var streamTriggerOutputB = StreamTriggerOutput.create(valueB);
	        return (streamTriggerOutputA.name === streamTriggerOutputB.name &&
	            streamTriggerOutputA.value === streamTriggerOutputB.value);
	    };
	    /**
	     * Compares two StreamTriggerOutput arrays. It checks a deep equality check of both values, meaning that all the values have to be on both arrays.
	     * @param valueA - the first StreamTriggerOutputish[] data to compare
	     * @param valueB - the second StreamTriggerOutputish[] data to compare
	     * @returns true if all values are equal, false otherwise
	     * @example
	     * ```ts
	     *  StreamTriggerOutput.arrayEquals(valueA, valueB);
	     * ```
	     */
	    StreamTriggerOutput.arrayEquals = function (valueA, valueB) {
	        if (valueA.length !== valueB.length) {
	            return false;
	        }
	        var triggerOutputsA = valueA.map(function (triggerOutput) { return StreamTriggerOutput.create(triggerOutput); });
	        var triggerOutputsB = valueB.map(function (triggerOutput) { return StreamTriggerOutput.create(triggerOutput); });
	        triggerOutputsA.sort(function (a, b) { return (b.name > a.name ? 1 : -1); });
	        triggerOutputsB.sort(function (a, b) { return (b.name > a.name ? 1 : -1); });
	        for (var i = 0; i < (triggerOutputsA === null || triggerOutputsA === void 0 ? void 0 : triggerOutputsA.length); i++) {
	            if (!triggerOutputsA[i].equals(triggerOutputsB[i])) {
	                return false;
	            }
	        }
	        return true;
	    };
	    /**
	     * Compares an StreamTriggerOutputish data to this StreamTriggerOutput instance.
	     * @param value - the value to compare
	     * @returns true if the value is equal to the current instance, false otherwise
	     * @example
	     * ```ts
	     * streamTriggerOutput.equals(value);
	     * ```
	     */
	    StreamTriggerOutput.prototype.equals = function (value) {
	        return StreamTriggerOutput.equals(this, value);
	    };
	    /**
	     * Converts the StreamTriggerOutput instance to a JSON object.
	     * @returns JSON object of the StreamTriggerOutput instance
	     * @example `streamTriggerOutput.toJSON()`
	     */
	    StreamTriggerOutput.prototype.toJSON = function () {
	        var data = __rest$g(this._data, []);
	        return __assign$f({}, data);
	    };
	    /**
	     * Converts the StreamTriggerOutput instance to a JSON object.
	     * @returns JSON object of the StreamTriggerOutput instance
	     * @example `streamTriggerOutput.format()`
	     */
	    StreamTriggerOutput.prototype.format = function () {
	        return this.toJSON();
	    };
	    Object.defineProperty(StreamTriggerOutput.prototype, "name", {
	        get: function () {
	            return this._data.name;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamTriggerOutput.prototype, "value", {
	        get: function () {
	            return this._data.value;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    StreamTriggerOutput.parse = function (data, _core) {
	        return __assign$f({}, data);
	    };
	    return StreamTriggerOutput;
	}());
	StreamTriggerOutput$1.StreamTriggerOutput = StreamTriggerOutput;

	var types$d = {};

	Object.defineProperty(types$d, "__esModule", { value: true });

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(StreamTriggerOutput$1, exports);
		__exportStar(types$d, exports);
		
	} (StreamTriggerOutput$2));

	var __assign$e = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$e = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$e.apply(this, arguments);
	};
	Object.defineProperty(StreamErc1155Approval$2, "__esModule", { value: true });
	StreamErc1155Approval$2.StreamErc1155Approval = void 0;
	var common_core_1$x = lib$9;
	var common_evm_utils_1$j = lib$6;
	var StreamTriggerOutput_1$7 = StreamTriggerOutput$2;
	/**
	 * The StreamErc1155Approval class is a representation of a nft approval (ERC1155) that is returned by the Moralis Stream API
	 *
	 * @category DataType
	 */
	var StreamErc1155Approval$1 = /** @class */ (function () {
	    function StreamErc1155Approval(data, core) {
	        this._data = StreamErc1155Approval.parse(data, core);
	    }
	    /**
	     * Create a new instance of StreamErc1155Approval
	     *
	     * @param data - the StreamErc1155Approvalish type
	     * @param core - the Core instance
	     * @example
	     * ```ts
	     * const evmNftApproval = StreamErc1155Approval.create(data);
	     * ```
	     * @returns an instance of StreamErc1155Approval
	     */
	    StreamErc1155Approval.create = function (data, core) {
	        if (data instanceof StreamErc1155Approval) {
	            return data;
	        }
	        var finalCore = core !== null && core !== void 0 ? core : common_core_1$x.CoreProvider.getDefault();
	        return new StreamErc1155Approval(data, finalCore);
	    };
	    /**
	     * Compares two StreamErc1155Approval data. It checks a deep equality check of both values.
	     * @param valueA - the first StreamErc1155Approvalish data to compare
	     * @param valueB - the second StreamErc1155Approvalish data to compare
	     * @returns true if the values are equal, false otherwise
	     * @example
	     * ```ts
	     *  StreamErc1155Approval.equals(valueA, valueB);
	     * ```
	     */
	    // eslint-disable-next-line complexity
	    StreamErc1155Approval.equals = function (valueA, valueB) {
	        var _a, _b;
	        var evmNftApprovalA = StreamErc1155Approval.create(valueA);
	        var evmNftApprovalB = StreamErc1155Approval.create(valueB);
	        if (!evmNftApprovalA.chain.equals(evmNftApprovalB.chain)) {
	            return false;
	        }
	        if (evmNftApprovalA.transactionHash !== evmNftApprovalB.transactionHash) {
	            return false;
	        }
	        if (!evmNftApprovalA.account.equals(evmNftApprovalB.account)) {
	            return false;
	        }
	        if (!evmNftApprovalA.contract.equals(evmNftApprovalB.contract)) {
	            return false;
	        }
	        if (!evmNftApprovalA.operator.equals(evmNftApprovalB.operator)) {
	            return false;
	        }
	        if (evmNftApprovalA.approved !== evmNftApprovalB.approved) {
	            return false;
	        }
	        if (((_a = evmNftApprovalA.triggers) === null || _a === void 0 ? void 0 : _a.length) !== ((_b = evmNftApprovalB.triggers) === null || _b === void 0 ? void 0 : _b.length) ||
	            !StreamTriggerOutput_1$7.StreamTriggerOutput.arrayEquals(evmNftApprovalA.triggers || [], evmNftApprovalB.triggers || [])) {
	            return false;
	        }
	        return true;
	    };
	    /**
	     * Compares an StreamErc1155Approvalish data to this StreamErc1155Approval instance.
	     * @param value - the value to compare
	     * @returns true if the value is equal to the current instance, false otherwise
	     * @example
	     * ```ts
	     * evmNftApproval.equals(value);
	     * ```
	     */
	    StreamErc1155Approval.prototype.equals = function (value) {
	        return StreamErc1155Approval.equals(this, value);
	    };
	    /**
	     * Converts the StreamErc1155Approval instance to a JSON object.
	     * @returns JSON object of the StreamErc1155Approval instance
	     * @example `evmNftApproval.toJSON()`
	     */
	    StreamErc1155Approval.prototype.toJSON = function () {
	        var _a;
	        var data = this._data;
	        return __assign$e(__assign$e({}, data), { chain: data.chain.format(), contract: data.contract.format(), account: data.account.format(), operator: data.operator.format(), triggers: (_a = data.triggers) === null || _a === void 0 ? void 0 : _a.map(function (trigger) { return trigger.format(); }) });
	    };
	    /**
	     * Converts the StreamErc1155Approval instance to a JSON object.
	     * @returns JSON object of the StreamErc1155Approval instance
	     * @example `evmNftApproval.format()`
	     */
	    StreamErc1155Approval.prototype.format = function () {
	        return this.toJSON();
	    };
	    Object.defineProperty(StreamErc1155Approval.prototype, "chain", {
	        get: function () {
	            return this._data.chain;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamErc1155Approval.prototype, "approved", {
	        get: function () {
	            return this._data.approved;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamErc1155Approval.prototype, "transactionHash", {
	        get: function () {
	            return this._data.transactionHash;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamErc1155Approval.prototype, "contract", {
	        get: function () {
	            return this._data.contract;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamErc1155Approval.prototype, "logIndex", {
	        get: function () {
	            return this._data.logIndex;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamErc1155Approval.prototype, "account", {
	        get: function () {
	            return this._data.account;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamErc1155Approval.prototype, "operator", {
	        get: function () {
	            return this._data.operator;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamErc1155Approval.prototype, "tokenContractType", {
	        get: function () {
	            return this._data.tokenContractType;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamErc1155Approval.prototype, "tokenName", {
	        get: function () {
	            return this._data.tokenName;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamErc1155Approval.prototype, "tokenSymbol", {
	        get: function () {
	            return this._data.tokenSymbol;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamErc1155Approval.prototype, "triggers", {
	        get: function () {
	            return this._data.triggers;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    StreamErc1155Approval.parse = function (data, core) {
	        var chain = common_evm_utils_1$j.EvmChain.create(data.chain, core);
	        return __assign$e(__assign$e({}, data), { chain: chain, logIndex: +data.logIndex, account: common_evm_utils_1$j.EvmAddress.create(data.account, core), operator: common_evm_utils_1$j.EvmAddress.create(data.operator, core), contract: common_evm_utils_1$j.EvmAddress.create(data.contract, core), tokenContractType: data.tokenContractType, triggers: (0, common_core_1$x.maybe)(data.triggers, function (triggers) {
	                return triggers.map(function (trigger) { return StreamTriggerOutput_1$7.StreamTriggerOutput.create(trigger, core); });
	            }) });
	    };
	    return StreamErc1155Approval;
	}());
	StreamErc1155Approval$2.StreamErc1155Approval = StreamErc1155Approval$1;

	var StreamErc20Approval$2 = {};

	var __assign$d = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$d = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$d.apply(this, arguments);
	};
	var __rest$f = (commonjsGlobal && commonjsGlobal.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	Object.defineProperty(StreamErc20Approval$2, "__esModule", { value: true });
	StreamErc20Approval$2.StreamErc20Approval = void 0;
	var common_core_1$w = lib$9;
	var common_evm_utils_1$i = lib$6;
	var StreamTriggerOutput_1$6 = StreamTriggerOutput$2;
	/**
	 * The StreamErc20Transfer class is a representation of a erc20 approval that is returned by the Moralis Stream API
	 *
	 * @category DataType
	 */
	var StreamErc20Approval$1 = /** @class */ (function () {
	    function StreamErc20Approval(data, core) {
	        this._data = StreamErc20Approval.parse(data, core);
	    }
	    /**
	     * Create a new instance of StreamErc20Approval
	     *
	     * @param data - the StreamErc20Approvalish type
	     * @param core - the Core instance
	     * @example
	     * ```ts
	     * const erc20Approval = StreamErc20Approval.create(data);
	     * ```
	     * @returns an instance of StreamErc20Approval
	     */
	    StreamErc20Approval.create = function (data, core) {
	        if (data instanceof StreamErc20Approval) {
	            return data;
	        }
	        var finalCore = core !== null && core !== void 0 ? core : common_core_1$w.CoreProvider.getDefault();
	        return new StreamErc20Approval(data, finalCore);
	    };
	    /**
	     * Compares two StreamErc20Approval data. It checks a deep equality check of both values.
	     * @param valueA - the first StreamErc20Approvalish data to compare
	     * @param valueB - the second StreamErc20Approvalish data to compare
	     * @returns true if the values are equal, false otherwise
	     * @example
	     * ```ts
	     *  StreamErc20Approval.equals(valueA, valueB);
	     * ```
	     */
	    StreamErc20Approval.equals = function (valueA, valueB) {
	        var _a, _b;
	        var erc20ApprovalA = StreamErc20Approval.create(valueA);
	        var erc20ApprovalB = StreamErc20Approval.create(valueB);
	        if (!erc20ApprovalA.chain.equals(erc20ApprovalB.chain)) {
	            return false;
	        }
	        if (erc20ApprovalA.transactionHash !== erc20ApprovalB.transactionHash) {
	            return false;
	        }
	        if (erc20ApprovalA.logIndex !== erc20ApprovalB.logIndex) {
	            return false;
	        }
	        if (((_a = erc20ApprovalA.triggers) === null || _a === void 0 ? void 0 : _a.length) !== ((_b = erc20ApprovalB.triggers) === null || _b === void 0 ? void 0 : _b.length) ||
	            !StreamTriggerOutput_1$6.StreamTriggerOutput.arrayEquals(erc20ApprovalA.triggers || [], erc20ApprovalB.triggers || [])) {
	            return false;
	        }
	        return true;
	    };
	    /**
	     * Compares an StreamErc20Approvalish data to this StreamErc20Approval instance.
	     * @param value - the value to compare
	     * @returns true if the value is equal to the current instance, false otherwise
	     * @example
	     * ```ts
	     * erc20Approval.equals(value);
	     * ```
	     */
	    StreamErc20Approval.prototype.equals = function (value) {
	        return StreamErc20Approval.equals(this, value);
	    };
	    /**
	     * Converts the StreamErc20Approval instance to a JSON object.
	     * @returns JSON object of the StreamErc20Approval instance
	     * @example `erc20Approval.toJSON()`
	     */
	    StreamErc20Approval.prototype.toJSON = function () {
	        var _a = this._data, chain = _a.chain, owner = _a.owner, spender = _a.spender, contract = _a.contract, value = _a.value, triggers = _a.triggers, data = __rest$f(_a, ["chain", "owner", "spender", "contract", "value", "triggers"]);
	        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
	        return __assign$d(__assign$d({}, data), { chain: chain.format(), owner: owner.format(), spender: spender.format(), contract: contract.format(), value: value.toString(), triggers: triggers === null || triggers === void 0 ? void 0 : triggers.map(function (trigger) { return trigger.format(); }) });
	    };
	    /**
	     * Converts the StreamErc20Approval instance to a JSON object.
	     * @returns JSON object of the StreamErc20Approval instance
	     * @example `erc20Approval.format()`
	     */
	    StreamErc20Approval.prototype.format = function () {
	        return this.toJSON();
	    };
	    Object.defineProperty(StreamErc20Approval.prototype, "chain", {
	        get: function () {
	            return this._data.chain;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamErc20Approval.prototype, "transactionHash", {
	        get: function () {
	            return this._data.transactionHash;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamErc20Approval.prototype, "logIndex", {
	        get: function () {
	            return this._data.logIndex;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamErc20Approval.prototype, "owner", {
	        get: function () {
	            return this._data.owner;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamErc20Approval.prototype, "spender", {
	        get: function () {
	            return this._data.spender;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamErc20Approval.prototype, "value", {
	        get: function () {
	            return this._data.value;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamErc20Approval.prototype, "contract", {
	        get: function () {
	            return this._data.contract;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamErc20Approval.prototype, "tokenName", {
	        get: function () {
	            return this._data.tokenName;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamErc20Approval.prototype, "tokenSymbol", {
	        get: function () {
	            return this._data.tokenSymbol;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamErc20Approval.prototype, "tokenDecimals", {
	        get: function () {
	            return this._data.tokenDecimals;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamErc20Approval.prototype, "valueWithDecimals", {
	        get: function () {
	            return this._data.valueWithDecimals;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamErc20Approval.prototype, "triggers", {
	        get: function () {
	            return this._data.triggers;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    StreamErc20Approval.parse = function (data, core) {
	        var chain = common_evm_utils_1$i.EvmChain.create(data.chain, core);
	        return __assign$d(__assign$d({}, data), { chain: chain, spender: common_evm_utils_1$i.EvmAddress.create(data.spender, core), owner: common_evm_utils_1$i.EvmAddress.create(data.owner, core), logIndex: +data.logIndex, contract: common_evm_utils_1$i.EvmAddress.create(data.contract, core), value: common_core_1$w.BigNumber.create(data.value), valueWithDecimals: (0, common_core_1$w.maybe)(data.valueWithDecimals), tokenDecimals: data.tokenDecimals === '' ? undefined : +data.tokenDecimals, triggers: (0, common_core_1$w.maybe)(data.triggers, function (triggers) {
	                return triggers.map(function (trigger) { return StreamTriggerOutput_1$6.StreamTriggerOutput.create(trigger, core); });
	            }) });
	    };
	    return StreamErc20Approval;
	}());
	StreamErc20Approval$2.StreamErc20Approval = StreamErc20Approval$1;

	var StreamErc20Transfer$2 = {};

	var __assign$c = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$c = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$c.apply(this, arguments);
	};
	var __rest$e = (commonjsGlobal && commonjsGlobal.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	Object.defineProperty(StreamErc20Transfer$2, "__esModule", { value: true });
	StreamErc20Transfer$2.StreamErc20Transfer = void 0;
	var common_core_1$v = lib$9;
	var common_evm_utils_1$h = lib$6;
	var StreamTriggerOutput_1$5 = StreamTriggerOutput$2;
	/**
	 * The StreamErc20Transfer class is a representation of a erc20 transfer that is returned by the Moralis Stream API
	 *
	 * @category DataType
	 */
	var StreamErc20Transfer$1 = /** @class */ (function () {
	    function StreamErc20Transfer(data, core) {
	        this._data = StreamErc20Transfer.parse(data, core);
	    }
	    /**
	     * Create a new instance of StreamErc20Transfer
	     *
	     * @param data - the StreamErc20Transferish type
	     * @param core - the Core instance
	     * @example
	     * ```ts
	     * const erc20Transfer = StreamErc20Transfer.create(data);
	     * ```
	     * @returns an instance of StreamErc20Transfer
	     */
	    StreamErc20Transfer.create = function (data, core) {
	        if (data instanceof StreamErc20Transfer) {
	            return data;
	        }
	        var finalCore = core !== null && core !== void 0 ? core : common_core_1$v.CoreProvider.getDefault();
	        return new StreamErc20Transfer(data, finalCore);
	    };
	    /**
	     * Compares two StreamErc20Transfer data. It checks a deep equality check of both values.
	     * @param valueA - the first StreamErc20Transferish data to compare
	     * @param valueB - the second StreamErc20Transferish data to compare
	     * @returns true if the values are equal, false otherwise
	     * @example
	     * ```ts
	     *  StreamErc20Transfer.equals(valueA, valueB);
	     * ```
	     */
	    StreamErc20Transfer.equals = function (valueA, valueB) {
	        var _a, _b;
	        var erc20TransferA = StreamErc20Transfer.create(valueA);
	        var erc20TransferB = StreamErc20Transfer.create(valueB);
	        if (!erc20TransferA.chain.equals(erc20TransferB.chain)) {
	            return false;
	        }
	        if (erc20TransferA.transactionHash !== erc20TransferB.transactionHash) {
	            return false;
	        }
	        if (erc20TransferA.logIndex !== erc20TransferB.logIndex) {
	            return false;
	        }
	        if (((_a = erc20TransferA.triggers) === null || _a === void 0 ? void 0 : _a.length) !== ((_b = erc20TransferB.triggers) === null || _b === void 0 ? void 0 : _b.length) ||
	            !StreamTriggerOutput_1$5.StreamTriggerOutput.arrayEquals(erc20TransferA.triggers || [], erc20TransferB.triggers || [])) {
	            return false;
	        }
	        return true;
	    };
	    /**
	     * Compares an StreamErc20Transferish data to this StreamErc20Transfer instance.
	     * @param value - the value to compare
	     * @returns true if the value is equal to the current instance, false otherwise
	     * @example
	     * ```ts
	     * erc20Transfer.equals(value);
	     * ```
	     */
	    StreamErc20Transfer.prototype.equals = function (value) {
	        return StreamErc20Transfer.equals(this, value);
	    };
	    /**
	     * Converts the StreamErc20Transfer instance to a JSON object.
	     * @returns JSON object of the StreamErc20Transfer instance
	     * @example `erc20Transfer.toJSON()`
	     */
	    StreamErc20Transfer.prototype.toJSON = function () {
	        var _a = this._data, chain = _a.chain, from = _a.from, to = _a.to, contract = _a.contract, value = _a.value, triggers = _a.triggers, data = __rest$e(_a, ["chain", "from", "to", "contract", "value", "triggers"]);
	        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
	        return __assign$c(__assign$c({}, data), { chain: chain.format(), from: from.format(), to: to.format(), contract: contract.format(), value: value.toString(), triggers: triggers === null || triggers === void 0 ? void 0 : triggers.map(function (trigger) { return trigger.format(); }) });
	    };
	    /**
	     * Converts the StreamErc20Transfer instance to a JSON object.
	     * @returns JSON object of the StreamErc20Transfer instance
	     * @example `erc20Transfer.format()`
	     */
	    StreamErc20Transfer.prototype.format = function () {
	        return this.toJSON();
	    };
	    Object.defineProperty(StreamErc20Transfer.prototype, "chain", {
	        get: function () {
	            return this._data.chain;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamErc20Transfer.prototype, "transactionHash", {
	        get: function () {
	            return this._data.transactionHash;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamErc20Transfer.prototype, "logIndex", {
	        get: function () {
	            return this._data.logIndex;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamErc20Transfer.prototype, "from", {
	        get: function () {
	            return this._data.from;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamErc20Transfer.prototype, "to", {
	        get: function () {
	            return this._data.to;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamErc20Transfer.prototype, "value", {
	        get: function () {
	            return this._data.value;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamErc20Transfer.prototype, "contract", {
	        get: function () {
	            return this._data.contract;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamErc20Transfer.prototype, "tokenName", {
	        get: function () {
	            return this._data.tokenName;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamErc20Transfer.prototype, "tokenSymbol", {
	        get: function () {
	            return this._data.tokenSymbol;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamErc20Transfer.prototype, "tokenDecimals", {
	        get: function () {
	            return this._data.tokenDecimals;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamErc20Transfer.prototype, "valueWithDecimals", {
	        get: function () {
	            return this._data.valueWithDecimals;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamErc20Transfer.prototype, "triggers", {
	        get: function () {
	            return this._data.triggers;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    StreamErc20Transfer.parse = function (data, core) {
	        var chain = common_evm_utils_1$h.EvmChain.create(data.chain, core);
	        return __assign$c(__assign$c({}, data), { chain: chain, from: common_evm_utils_1$h.EvmAddress.create(data.from, core), to: common_evm_utils_1$h.EvmAddress.create(data.to, core), logIndex: +data.logIndex, contract: common_evm_utils_1$h.EvmAddress.create(data.contract, core), value: common_core_1$v.BigNumber.create(data.value), valueWithDecimals: (0, common_core_1$v.maybe)(data.valueWithDecimals), tokenDecimals: data.tokenDecimals === '' ? undefined : +data.tokenDecimals, triggers: (0, common_core_1$v.maybe)(data.triggers, function (triggers) {
	                return triggers.map(function (trigger) { return StreamTriggerOutput_1$5.StreamTriggerOutput.create(trigger, core); });
	            }) });
	    };
	    return StreamErc20Transfer;
	}());
	StreamErc20Transfer$2.StreamErc20Transfer = StreamErc20Transfer$1;

	var StreamErc721Approval$2 = {};

	var __assign$b = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$b = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$b.apply(this, arguments);
	};
	Object.defineProperty(StreamErc721Approval$2, "__esModule", { value: true });
	StreamErc721Approval$2.StreamErc721Approval = void 0;
	var common_core_1$u = lib$9;
	var common_evm_utils_1$g = lib$6;
	var StreamTriggerOutput_1$4 = StreamTriggerOutput$2;
	/**
	 * The StreamErc1155Approval class is a representation of a nft approval (ERC721) that is returned by the Moralis Stream API
	 *
	 * @category DataType
	 */
	var StreamErc721Approval$1 = /** @class */ (function () {
	    function StreamErc721Approval(data, core) {
	        this._data = StreamErc721Approval.parse(data, core);
	    }
	    /**
	     * Create a new instance of StreamErc721Approval
	     *
	     * @param data - the StreamErc721Approvalish type
	     * @param core - the Core instance
	     * @example
	     * ```ts
	     * const evmNftApproval = StreamErc721Approval.create(data);
	     * ```
	     * @returns an instance of StreamErc721Approval
	     */
	    StreamErc721Approval.create = function (data, core) {
	        if (data instanceof StreamErc721Approval) {
	            return data;
	        }
	        var finalCore = core !== null && core !== void 0 ? core : common_core_1$u.CoreProvider.getDefault();
	        return new StreamErc721Approval(data, finalCore);
	    };
	    /**
	     * Compares two StreamErc721Approval data. It checks a deep equality check of both values.
	     * @param valueA - the first StreamErc721Approvalish data to compare
	     * @param valueB - the second StreamErc721Approvalish data to compare
	     * @returns true if the values are equal, false otherwise
	     * @example
	     * ```ts
	     *  StreamErc721Approval.equals(valueA, valueB);
	     * ```
	     */
	    // eslint-disable-next-line complexity
	    StreamErc721Approval.equals = function (valueA, valueB) {
	        var _a, _b;
	        var evmNftApprovalA = StreamErc721Approval.create(valueA);
	        var evmNftApprovalB = StreamErc721Approval.create(valueB);
	        if (!evmNftApprovalA.chain.equals(evmNftApprovalB.chain)) {
	            return false;
	        }
	        if (evmNftApprovalA.transactionHash !== evmNftApprovalB.transactionHash) {
	            return false;
	        }
	        if (!evmNftApprovalA.owner.equals(evmNftApprovalB.owner)) {
	            return false;
	        }
	        if (!evmNftApprovalA.contract.equals(evmNftApprovalB.contract)) {
	            return false;
	        }
	        if (evmNftApprovalA.tokenId !== evmNftApprovalB.tokenId) {
	            return false;
	        }
	        if (!evmNftApprovalA.approved.equals(evmNftApprovalB.approved)) {
	            return false;
	        }
	        if (((_a = evmNftApprovalA.triggers) === null || _a === void 0 ? void 0 : _a.length) !== ((_b = evmNftApprovalB.triggers) === null || _b === void 0 ? void 0 : _b.length) ||
	            !StreamTriggerOutput_1$4.StreamTriggerOutput.arrayEquals(evmNftApprovalA.triggers || [], evmNftApprovalB.triggers || [])) {
	            return false;
	        }
	        return true;
	    };
	    /**
	     * Compares an StreamErc721Approvalish data to this StreamErc721Approval instance.
	     * @param value - the value to compare
	     * @returns true if the value is equal to the current instance, false otherwise
	     * @example
	     * ```ts
	     * evmNftApproval.equals(value);
	     * ```
	     */
	    StreamErc721Approval.prototype.equals = function (value) {
	        return StreamErc721Approval.equals(this, value);
	    };
	    /**
	     * Converts the StreamErc721Approval instance to a JSON object.
	     * @returns JSON object of the StreamErc721Approval instance
	     * @example `evmNftApproval.toJSON()`
	     */
	    StreamErc721Approval.prototype.toJSON = function () {
	        var _a;
	        var data = this._data;
	        return __assign$b(__assign$b({}, data), { chain: data.chain.format(), contract: data.contract.format(), owner: data.owner.format(), approved: data.approved.format(), triggers: (_a = data.triggers) === null || _a === void 0 ? void 0 : _a.map(function (trigger) { return trigger.format(); }) });
	    };
	    /**
	     * Converts the StreamErc721Approval instance to a JSON object.
	     * @returns JSON object of the StreamErc721Approval instance
	     * @example `evmNftApproval.format()`
	     */
	    StreamErc721Approval.prototype.format = function () {
	        return this.toJSON();
	    };
	    Object.defineProperty(StreamErc721Approval.prototype, "chain", {
	        get: function () {
	            return this._data.chain;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamErc721Approval.prototype, "approved", {
	        get: function () {
	            return this._data.approved;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamErc721Approval.prototype, "owner", {
	        get: function () {
	            return this._data.owner;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamErc721Approval.prototype, "transactionHash", {
	        get: function () {
	            return this._data.transactionHash;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamErc721Approval.prototype, "contract", {
	        get: function () {
	            return this._data.contract;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamErc721Approval.prototype, "logIndex", {
	        get: function () {
	            return this._data.logIndex;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamErc721Approval.prototype, "tokenId", {
	        get: function () {
	            return this._data.tokenId;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamErc721Approval.prototype, "tokenContractType", {
	        get: function () {
	            return this._data.tokenContractType;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamErc721Approval.prototype, "tokenName", {
	        get: function () {
	            return this._data.tokenName;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamErc721Approval.prototype, "tokenSymbol", {
	        get: function () {
	            return this._data.tokenSymbol;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamErc721Approval.prototype, "triggers", {
	        get: function () {
	            return this._data.triggers;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    StreamErc721Approval.parse = function (data, core) {
	        var chain = common_evm_utils_1$g.EvmChain.create(data.chain, core);
	        return __assign$b(__assign$b({}, data), { chain: chain, logIndex: +data.logIndex, owner: common_evm_utils_1$g.EvmAddress.create(data.owner, core), contract: common_evm_utils_1$g.EvmAddress.create(data.contract, core), tokenContractType: data.tokenContractType, approved: common_evm_utils_1$g.EvmAddress.create(data.approved, core), triggers: (0, common_core_1$u.maybe)(data.triggers, function (triggers) {
	                return triggers.map(function (trigger) { return StreamTriggerOutput_1$4.StreamTriggerOutput.create(trigger, core); });
	            }) });
	    };
	    return StreamErc721Approval;
	}());
	StreamErc721Approval$2.StreamErc721Approval = StreamErc721Approval$1;

	var StreamEvmInternalTransaction$2 = {};

	var __assign$a = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$a = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$a.apply(this, arguments);
	};
	Object.defineProperty(StreamEvmInternalTransaction$2, "__esModule", { value: true });
	StreamEvmInternalTransaction$2.StreamEvmInternalTransaction = void 0;
	var common_core_1$t = lib$9;
	var common_evm_utils_1$f = lib$6;
	var StreamTriggerOutput_1$3 = StreamTriggerOutput$2;
	/**
	 * The StreamEvmInternalTransaction class is a representation of an internal transaction that is returned by the Moralis Stream API
	 *
	 * @category DataType
	 */
	var StreamEvmInternalTransaction$1 = /** @class */ (function () {
	    function StreamEvmInternalTransaction(data, core) {
	        this._data = StreamEvmInternalTransaction.parse(data, core);
	    }
	    /**
	     * Create a new instance of StreamEvmInternalTransactionish
	     *
	     * @param data - the StreamEvmInternalTransactionishish type
	     * @param core - the Core instance
	     * @example
	     * ```ts
	     * const transaction = StreamEvmTransactionish.create(data);
	     * ```
	     * @returns an instance of StreamEvmInternalTransaction
	     */
	    StreamEvmInternalTransaction.create = function (data, core) {
	        if (data instanceof StreamEvmInternalTransaction) {
	            return data;
	        }
	        var finalCore = core !== null && core !== void 0 ? core : common_core_1$t.CoreProvider.getDefault();
	        return new StreamEvmInternalTransaction(data, finalCore);
	    };
	    /**
	     * Compares two StreamEvmInternalTransaction data. It checks a deep equality check of both values.
	     * @param valueA - the first StreamEvmInternalTransactionish data to compare
	     * @param valueB - the second StreamEvmInternalTransactionish data to compare
	     * @returns true if the values are equal, false otherwise
	     * @example
	     * ```ts
	     *  StreamEvmInternalTransaction.equals(valueA, valueB);
	     * ```
	     */
	    StreamEvmInternalTransaction.equals = function (valueA, valueB) {
	        var _a, _b;
	        var evmInternalTransactionA = StreamEvmInternalTransaction.create(valueA);
	        var evmInternalTransactionB = StreamEvmInternalTransaction.create(valueB);
	        if (!evmInternalTransactionA.chain.equals(evmInternalTransactionB.chain)) {
	            return false;
	        }
	        if (evmInternalTransactionA.transactionHash !== evmInternalTransactionB.transactionHash) {
	            return false;
	        }
	        if (((_a = evmInternalTransactionA.triggers) === null || _a === void 0 ? void 0 : _a.length) !== ((_b = evmInternalTransactionB.triggers) === null || _b === void 0 ? void 0 : _b.length) ||
	            !StreamTriggerOutput_1$3.StreamTriggerOutput.arrayEquals(evmInternalTransactionA.triggers || [], evmInternalTransactionB.triggers || [])) {
	            return false;
	        }
	        return true;
	    };
	    /**
	     * Compares an StreamEvmInternalTransactionish data to this StreamEvmInternalTransaction instance.
	     * @param value - the value to compare
	     * @returns true if the value is equal to the current instance, false otherwise
	     * @example
	     * ```ts
	     * evmInternalTransaction.equals(value);
	     * ```
	     */
	    StreamEvmInternalTransaction.prototype.equals = function (value) {
	        return StreamEvmInternalTransaction.equals(this, value);
	    };
	    /**
	     * Converts the StreamEvmInternalTransaction instance to a JSON object.
	     * @returns JSON object of the StreamEvmInternalTransaction instance
	     * @example `evmInternalTransaction.toJSON()`
	     */
	    StreamEvmInternalTransaction.prototype.toJSON = function () {
	        var _a, _b, _c, _d, _e;
	        var data = this._data;
	        return __assign$a(__assign$a({}, data), { chain: data.chain.format(), from: (_a = data.from) === null || _a === void 0 ? void 0 : _a.format(), to: (_b = data.to) === null || _b === void 0 ? void 0 : _b.format(), value: (_c = data.value) === null || _c === void 0 ? void 0 : _c.toString(), gas: (_d = data.gas) === null || _d === void 0 ? void 0 : _d.toString(), triggers: (_e = data.triggers) === null || _e === void 0 ? void 0 : _e.map(function (trigger) { return trigger.format(); }) });
	    };
	    /**
	     * Converts the StreamEvmInternalTransaction instance to a JSON object.
	     * @returns JSON object of the StreamEvmInternalTransaction instance
	     * @example `evmInternalTransaction.format()`
	     */
	    StreamEvmInternalTransaction.prototype.format = function () {
	        return this.toJSON();
	    };
	    Object.defineProperty(StreamEvmInternalTransaction.prototype, "chain", {
	        get: function () {
	            return this._data.chain;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamEvmInternalTransaction.prototype, "from", {
	        get: function () {
	            return this._data.from;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamEvmInternalTransaction.prototype, "to", {
	        get: function () {
	            return this._data.to;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamEvmInternalTransaction.prototype, "value", {
	        get: function () {
	            return this._data.value;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamEvmInternalTransaction.prototype, "transactionHash", {
	        get: function () {
	            return this._data.transactionHash;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamEvmInternalTransaction.prototype, "gas", {
	        get: function () {
	            return this._data.gas;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamEvmInternalTransaction.prototype, "triggers", {
	        get: function () {
	            return this._data.triggers;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    StreamEvmInternalTransaction.parse = function (data, core) { return (__assign$a(__assign$a({}, data), { chain: common_evm_utils_1$f.EvmChain.create(data.chain, core), from: (0, common_core_1$t.maybe)(data.from, function (value) { return common_evm_utils_1$f.EvmAddress.create(value, core); }), to: (0, common_core_1$t.maybe)(data.to, function (value) { return common_evm_utils_1$f.EvmAddress.create(value, core); }), value: (0, common_core_1$t.maybe)(data.value, function (value) { return common_core_1$t.BigNumber.create(value); }), gas: (0, common_core_1$t.maybe)(data.gas, function (value) { return common_core_1$t.BigNumber.create(value); }), triggers: (0, common_core_1$t.maybe)(data.triggers, function (triggers) { return triggers.map(function (trigger) { return StreamTriggerOutput_1$3.StreamTriggerOutput.create(trigger, core); }); }) })); };
	    return StreamEvmInternalTransaction;
	}());
	StreamEvmInternalTransaction$2.StreamEvmInternalTransaction = StreamEvmInternalTransaction$1;

	var StreamEvmNftTransfer$2 = {};

	var __assign$9 = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$9 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9.apply(this, arguments);
	};
	Object.defineProperty(StreamEvmNftTransfer$2, "__esModule", { value: true });
	StreamEvmNftTransfer$2.StreamEvmNftTransfer = void 0;
	var common_core_1$s = lib$9;
	var common_evm_utils_1$e = lib$6;
	var StreamTriggerOutput_1$2 = StreamTriggerOutput$2;
	/**
	 * The StreamEvmNftTransfer class is a representation of a nft transfer (EREC721 or ERC1155) that is returned by the Moralis Stream API
	 *
	 * @category DataType
	 */
	var StreamEvmNftTransfer$1 = /** @class */ (function () {
	    function StreamEvmNftTransfer(data, core) {
	        this._data = StreamEvmNftTransfer.parse(data, core);
	    }
	    /**
	     * Create a new instance of StreamEvmNftTransferish
	     *
	     * @param data - the StreamEvmNftTransferishish type
	     * @param core - the Core instance
	     * @example
	     * ```ts
	     * const transfer = StreamEvmTransactionish.create(data);
	     * ```
	     * @returns an instance of StreamEvmNftTransfer
	     */
	    StreamEvmNftTransfer.create = function (data, core) {
	        if (data instanceof StreamEvmNftTransfer) {
	            return data;
	        }
	        var finalCore = core !== null && core !== void 0 ? core : common_core_1$s.CoreProvider.getDefault();
	        return new StreamEvmNftTransfer(data, finalCore);
	    };
	    StreamEvmNftTransfer.parse = function (data, core) {
	        return __assign$9(__assign$9({}, data), { chain: common_evm_utils_1$e.EvmChain.create(data.chain, core), to: common_evm_utils_1$e.EvmAddress.create(data.to, core), contract: common_evm_utils_1$e.EvmAddress.create(data.contract, core), from: common_evm_utils_1$e.EvmAddress.create(data.from, core), logIndex: +data.logIndex, operator: (0, common_core_1$s.maybe)(data.operator, function (operator) { return common_evm_utils_1$e.EvmAddress.create(operator, core); }), tokenId: data.tokenId, transactionHash: data.transactionHash, amount: +data.amount, tokenName: data.tokenName, triggers: (0, common_core_1$s.maybe)(data.triggers, function (triggers) {
	                return triggers.map(function (trigger) { return StreamTriggerOutput_1$2.StreamTriggerOutput.create(trigger, core); });
	            }) });
	    };
	    /**
	     * Compares two StreamEvmNftTransfer data. It checks a deep equality check of both values.
	     * @param valueA - the first StreamEvmNftTransferish data to compare
	     * @param valueB - the second StreamEvmNftTransferish data to compare
	     * @returns true if the values are equal, false otherwise
	     * @example
	     * ```ts
	     *  StreamEvmNftTransfer.equals(valueA, valueB);
	     * ```
	     */
	    // eslint-disable-next-line complexity
	    StreamEvmNftTransfer.equals = function (valueA, valueB) {
	        var _a, _b;
	        var transferA = StreamEvmNftTransfer.create(valueA);
	        var transferB = StreamEvmNftTransfer.create(valueB);
	        if (!transferA.chain.equals(transferB.chain)) {
	            return false;
	        }
	        if (transferA.transactionHash !== transferB.transactionHash) {
	            return false;
	        }
	        if (transferA.logIndex !== transferB.logIndex) {
	            return false;
	        }
	        if (!transferA.contract.equals(transferB.contract)) {
	            return false;
	        }
	        if (transferA.tokenId !== transferB.tokenId) {
	            return false;
	        }
	        if (((_a = transferA.triggers) === null || _a === void 0 ? void 0 : _a.length) !== ((_b = transferB.triggers) === null || _b === void 0 ? void 0 : _b.length) ||
	            !StreamTriggerOutput_1$2.StreamTriggerOutput.arrayEquals(transferA.triggers || [], transferB.triggers || [])) {
	            return false;
	        }
	        return true;
	    };
	    /**
	     * Compares an StreamEvmNftTransferish data to this StreamEvmNftTransfer instance.
	     * @param value - the value to compare
	     * @returns true if the value is equal to the current instance, false otherwise
	     * @example
	     * ```ts
	     * transfer.equals(value);
	     * ```
	     */
	    StreamEvmNftTransfer.prototype.equals = function (value) {
	        return StreamEvmNftTransfer.equals(this, value);
	    };
	    /**
	     * Converts the StreamEvmNftTransfer instance to a JSON object.
	     * @returns JSON object of the StreamEvmNftTransfer instance
	     * @example `transfer.toJSON()`
	     */
	    StreamEvmNftTransfer.prototype.toJSON = function () {
	        var _a, _b;
	        var data = this._data;
	        return __assign$9(__assign$9({}, data), { chain: data.chain.format(), from: data.from.format(), to: data.to.format(), contract: data.contract.format(), operator: (_a = data.operator) === null || _a === void 0 ? void 0 : _a.format(), triggers: (_b = data.triggers) === null || _b === void 0 ? void 0 : _b.map(function (trigger) { return trigger.format(); }) });
	    };
	    /**
	     * Converts the StreamEvmNftTransfer instance to a JSON object.
	     * @returns JSON object of the StreamEvmNftTransfer instance
	     * @example `transfer.toJSON()`
	     */
	    StreamEvmNftTransfer.prototype.format = function () {
	        return this.toJSON();
	    };
	    Object.defineProperty(StreamEvmNftTransfer.prototype, "chain", {
	        get: function () {
	            return this._data.chain;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamEvmNftTransfer.prototype, "transactionHash", {
	        get: function () {
	            return this._data.transactionHash;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamEvmNftTransfer.prototype, "from", {
	        get: function () {
	            return this._data.from;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamEvmNftTransfer.prototype, "to", {
	        get: function () {
	            return this._data.to;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamEvmNftTransfer.prototype, "contract", {
	        get: function () {
	            return this._data.contract;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamEvmNftTransfer.prototype, "logIndex", {
	        get: function () {
	            return this._data.logIndex;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamEvmNftTransfer.prototype, "tokenId", {
	        get: function () {
	            return this._data.tokenId;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamEvmNftTransfer.prototype, "amount", {
	        get: function () {
	            return this._data.amount;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamEvmNftTransfer.prototype, "tokenContractType", {
	        get: function () {
	            return this._data.tokenContractType;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamEvmNftTransfer.prototype, "tokenName", {
	        get: function () {
	            return this._data.tokenName;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamEvmNftTransfer.prototype, "tokenSymbol", {
	        get: function () {
	            return this._data.tokenSymbol;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamEvmNftTransfer.prototype, "operator", {
	        get: function () {
	            return this._data.operator;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamEvmNftTransfer.prototype, "triggers", {
	        get: function () {
	            return this._data.triggers;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    return StreamEvmNftTransfer;
	}());
	StreamEvmNftTransfer$2.StreamEvmNftTransfer = StreamEvmNftTransfer$1;

	var StreamEvmTransaction$2 = {};

	var __assign$8 = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$8 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8.apply(this, arguments);
	};
	var __rest$d = (commonjsGlobal && commonjsGlobal.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	Object.defineProperty(StreamEvmTransaction$2, "__esModule", { value: true });
	StreamEvmTransaction$2.StreamEvmTransaction = void 0;
	var common_core_1$r = lib$9;
	var common_evm_utils_1$d = lib$6;
	var StreamTriggerOutput_1$1 = StreamTriggerOutput$2;
	/**
	 * The StreamEvmTransaction class is a representation of a transaction that is returned by the Moralis Stream API
	 *
	 * @category DataType
	 */
	var StreamEvmTransaction$1 = /** @class */ (function () {
	    function StreamEvmTransaction(_a, core) {
	        var data = __rest$d(_a, []);
	        this._data = StreamEvmTransaction.parse(data, core);
	    }
	    /**
	     * Create a new instance of StreamEvmTransactionish
	     *
	     * @param data - the StreamEvmTransactionishish type
	     * @param core - the Core instance
	     * @example
	     * ```ts
	     * const transaction = StreamEvmTransactionish.create(data);
	     * ```
	     * @returns an instance of StreamEvmTransaction
	     */
	    StreamEvmTransaction.create = function (data, core) {
	        if (data instanceof StreamEvmTransaction) {
	            return data;
	        }
	        var finalCore = core !== null && core !== void 0 ? core : common_core_1$r.CoreProvider.getDefault();
	        return new StreamEvmTransaction(data, finalCore);
	    };
	    StreamEvmTransaction.parse = function (data, core) {
	        var signature = data.r != null && data.s != null && data.v != null
	            ? common_evm_utils_1$d.EvmSignature.create({ r: data.r, s: data.s, v: data.v })
	            : undefined;
	        return __assign$8(__assign$8({}, data), { chain: common_evm_utils_1$d.EvmChain.create(data.chain, core), gas: (0, common_core_1$r.maybe)(data.gas, common_core_1$r.BigNumber.create), gasPrice: (0, common_core_1$r.maybe)(data.gasPrice, common_core_1$r.BigNumber.create), nonce: (0, common_core_1$r.maybe)(data.nonce, common_core_1$r.BigNumber.create), input: (0, common_core_1$r.maybe)(data.input), fromAddress: common_evm_utils_1$d.EvmAddress.create(data.fromAddress, core), toAddress: (0, common_core_1$r.maybe)(data.toAddress, function (address) { return common_evm_utils_1$d.EvmAddress.create(address, core); }), value: (0, common_core_1$r.maybe)(data.value, common_core_1$r.BigNumber.create), type: (0, common_core_1$r.maybe)(data.type, function (type) { return +type; }), receiptCumulativeGasUsed: (0, common_core_1$r.maybe)(data.receiptCumulativeGasUsed, common_core_1$r.BigNumber.create), receiptGasUsed: (0, common_core_1$r.maybe)(data.receiptGasUsed, common_core_1$r.BigNumber.create), receiptContractAddress: (0, common_core_1$r.maybe)(data.receiptContractAddress, function (address) { return common_evm_utils_1$d.EvmAddress.create(address, core); }), receiptRoot: (0, common_core_1$r.maybe)(data.receiptRoot), receiptStatus: (0, common_core_1$r.maybe)(data.receiptStatus, function (status) { return +status; }), signature: signature, transactionIndex: +data.transactionIndex, triggers: (0, common_core_1$r.maybe)(data.triggers, function (triggers) {
	                return triggers.map(function (trigger) { return StreamTriggerOutput_1$1.StreamTriggerOutput.create(trigger, core); });
	            }) });
	    };
	    /**
	     * Compares two StreamEvmTransaction data. It checks a deep equality check of both values.
	     * @param valueA - the first StreamEvmTransactionish data to compare
	     * @param valueB - the second StreamEvmTransactionish data to compare
	     * @returns true if the values are equal, false otherwise
	     * @example
	     * ```ts
	     *  StreamEvmTransaction.equals(valueA, valueB);
	     * ```
	     */
	    StreamEvmTransaction.equals = function (valueA, valueB) {
	        var _a, _b;
	        var transactionA = StreamEvmTransaction.create(valueA);
	        var transactionB = StreamEvmTransaction.create(valueB);
	        if (!transactionA.chain.equals(transactionB.chain)) {
	            return false;
	        }
	        if (transactionA.hash !== transactionB.hash) {
	            return false;
	        }
	        if (((_a = transactionA.triggers) === null || _a === void 0 ? void 0 : _a.length) !== ((_b = transactionB.triggers) === null || _b === void 0 ? void 0 : _b.length) ||
	            !StreamTriggerOutput_1$1.StreamTriggerOutput.arrayEquals(transactionA.triggers || [], transactionB.triggers || [])) {
	            return false;
	        }
	        return true;
	    };
	    /**
	     * Compares an StreamEvmTransactionish data to this StreamEvmTransaction instance.
	     * @param value - the value to compare
	     * @returns true if the value is equal to the current instance, false otherwise
	     * @example
	     * ```ts
	     * transaction.equals(value);
	     * ```
	     */
	    StreamEvmTransaction.prototype.equals = function (value) {
	        return StreamEvmTransaction.equals(this, value);
	    };
	    /**
	     * Converts the StreamEvmTransaction instance to a JSON object.
	     * @returns JSON object of the StreamEvmTransaction instance
	     * @example `transaction.toJSON()`
	     */
	    StreamEvmTransaction.prototype.toJSON = function () {
	        var _a = this._data, chain = _a.chain, gas = _a.gas, gasPrice = _a.gasPrice, nonce = _a.nonce, fromAddress = _a.fromAddress, toAddress = _a.toAddress, value = _a.value, receiptContractAddress = _a.receiptContractAddress, receiptCumulativeGasUsed = _a.receiptCumulativeGasUsed, receiptGasUsed = _a.receiptGasUsed, signature = _a.signature, triggers = _a.triggers, data = __rest$d(_a, ["chain", "gas", "gasPrice", "nonce", "fromAddress", "toAddress", "value", "receiptContractAddress", "receiptCumulativeGasUsed", "receiptGasUsed", "signature", "triggers"]);
	        return __assign$8(__assign$8({}, data), { chain: chain.format(), gas: gas === null || gas === void 0 ? void 0 : gas.toString(), gasPrice: gasPrice === null || gasPrice === void 0 ? void 0 : gasPrice.toString(), nonce: nonce === null || nonce === void 0 ? void 0 : nonce.toString(), fromAddress: fromAddress.format(), toAddress: toAddress === null || toAddress === void 0 ? void 0 : toAddress.format(), value: value === null || value === void 0 ? void 0 : value.toString(), receiptCumulativeGasUsed: receiptCumulativeGasUsed === null || receiptCumulativeGasUsed === void 0 ? void 0 : receiptCumulativeGasUsed.toString(), receiptGasUsed: receiptGasUsed === null || receiptGasUsed === void 0 ? void 0 : receiptGasUsed.toString(), receiptContractAddress: receiptContractAddress === null || receiptContractAddress === void 0 ? void 0 : receiptContractAddress.format(), r: signature === null || signature === void 0 ? void 0 : signature.r, s: signature === null || signature === void 0 ? void 0 : signature.s, v: signature === null || signature === void 0 ? void 0 : signature.v, triggers: triggers === null || triggers === void 0 ? void 0 : triggers.map(function (trigger) { return trigger.format(); }) });
	    };
	    /**
	     * Converts the StreamEvmTransaction instance to a JSON object.
	     * @returns JSON object of the StreamEvmTransaction instance
	     * @example `transaction.toJSON()`
	     */
	    StreamEvmTransaction.prototype.format = function () {
	        return this.toJSON();
	    };
	    Object.defineProperty(StreamEvmTransaction.prototype, "chain", {
	        get: function () {
	            return this._data.chain;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamEvmTransaction.prototype, "input", {
	        get: function () {
	            return this._data.input;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamEvmTransaction.prototype, "transactionIndex", {
	        get: function () {
	            return this._data.transactionIndex;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamEvmTransaction.prototype, "fromAddress", {
	        get: function () {
	            return this._data.fromAddress;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamEvmTransaction.prototype, "toAddress", {
	        get: function () {
	            return this._data.toAddress;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamEvmTransaction.prototype, "receiptGasUsed", {
	        get: function () {
	            return this._data.receiptGasUsed;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamEvmTransaction.prototype, "receiptCumulativeGasUsed", {
	        get: function () {
	            return this._data.receiptCumulativeGasUsed;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamEvmTransaction.prototype, "receiptContractAddress", {
	        get: function () {
	            return this._data.receiptContractAddress;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamEvmTransaction.prototype, "signature", {
	        get: function () {
	            return this._data.signature;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamEvmTransaction.prototype, "r", {
	        get: function () {
	            var _a;
	            return (_a = this.signature) === null || _a === void 0 ? void 0 : _a.r;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamEvmTransaction.prototype, "s", {
	        get: function () {
	            var _a;
	            return (_a = this.signature) === null || _a === void 0 ? void 0 : _a.s;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamEvmTransaction.prototype, "v", {
	        get: function () {
	            var _a;
	            return (_a = this.signature) === null || _a === void 0 ? void 0 : _a.v;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamEvmTransaction.prototype, "hash", {
	        get: function () {
	            return this._data.hash;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamEvmTransaction.prototype, "gas", {
	        get: function () {
	            return this._data.gas;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamEvmTransaction.prototype, "gasPrice", {
	        get: function () {
	            return this._data.gasPrice;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamEvmTransaction.prototype, "nonce", {
	        get: function () {
	            return this._data.nonce;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamEvmTransaction.prototype, "value", {
	        get: function () {
	            return this._data.value;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamEvmTransaction.prototype, "type", {
	        get: function () {
	            return this._data.type;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamEvmTransaction.prototype, "receiptRoot", {
	        get: function () {
	            return this._data.receiptRoot;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamEvmTransaction.prototype, "receiptStatus", {
	        get: function () {
	            return this._data.receiptStatus;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamEvmTransaction.prototype, "triggers", {
	        get: function () {
	            return this._data.triggers;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    return StreamEvmTransaction;
	}());
	StreamEvmTransaction$2.StreamEvmTransaction = StreamEvmTransaction$1;

	var StreamEvmTransactionLog$2 = {};

	var __assign$7 = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$7 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7.apply(this, arguments);
	};
	var __rest$c = (commonjsGlobal && commonjsGlobal.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	Object.defineProperty(StreamEvmTransactionLog$2, "__esModule", { value: true });
	StreamEvmTransactionLog$2.StreamEvmTransactionLog = void 0;
	var common_core_1$q = lib$9;
	var common_evm_utils_1$c = lib$6;
	var StreamTriggerOutput_1 = StreamTriggerOutput$2;
	/**
	 * The StreamEvmTransactionLog class is a representation of a transaction log that is returned by the Moralis Stream API
	 *
	 * @category DataType
	 */
	var StreamEvmTransactionLog$1 = /** @class */ (function () {
	    function StreamEvmTransactionLog(_a, core) {
	        var data = __rest$c(_a, []);
	        this._data = StreamEvmTransactionLog.parse(data, core);
	    }
	    /**
	     * Create a new instance of StreamEvmTransactionLog
	     *
	     * @param data - the StreamEvmTransactionLogish type
	     * @param core - the Core instance
	     * @example
	     * ```ts
	     * const transactionLog = StreamEvmTransactionLog.create(data);
	     * ```
	     * @returns an instance of StreamEvmTransactionLog
	     */
	    StreamEvmTransactionLog.create = function (data, core) {
	        if (data instanceof StreamEvmTransactionLog) {
	            return data;
	        }
	        var finalCore = core !== null && core !== void 0 ? core : common_core_1$q.CoreProvider.getDefault();
	        return new StreamEvmTransactionLog(data, finalCore);
	    };
	    StreamEvmTransactionLog.parse = function (data, core) {
	        return __assign$7(__assign$7({}, data), { chain: common_evm_utils_1$c.EvmChain.create(data.chain, core), logIndex: +data.logIndex, address: common_evm_utils_1$c.EvmAddress.create(data.address, core), topic0: (0, common_core_1$q.maybe)(data.topic0), topic1: (0, common_core_1$q.maybe)(data.topic1), topic2: (0, common_core_1$q.maybe)(data.topic2), topic3: (0, common_core_1$q.maybe)(data.topic3), triggers: (0, common_core_1$q.maybe)(data.triggers, function (triggers) {
	                return triggers.map(function (trigger) { return StreamTriggerOutput_1.StreamTriggerOutput.create(trigger, core); });
	            }) });
	    };
	    /**
	     * Compares two StreamEvmTransactionLog data. It checks a deep equality check of both values.
	     * @param valueA - the first StreamEvmTransactionLogish data to compare
	     * @param valueB - the second StreamEvmTransactionLogish data to compare
	     * @returns true if the values are equal, false otherwise
	     * @example
	     * ```ts
	     *  StreamEvmTransactionLog.equals(valueA, valueB);
	     * ```
	     */
	    StreamEvmTransactionLog.equals = function (valueA, valueB) {
	        var _a, _b;
	        var transactionLogA = StreamEvmTransactionLog.create(valueA);
	        var transactionLogB = StreamEvmTransactionLog.create(valueB);
	        if (!transactionLogA.chain.equals(transactionLogB.chain)) {
	            return false;
	        }
	        if (transactionLogA.transactionHash !== transactionLogB.transactionHash) {
	            return false;
	        }
	        if (transactionLogA.logIndex !== transactionLogB.logIndex) {
	            return false;
	        }
	        if (((_a = transactionLogA.triggers) === null || _a === void 0 ? void 0 : _a.length) !== ((_b = transactionLogB.triggers) === null || _b === void 0 ? void 0 : _b.length) ||
	            !StreamTriggerOutput_1.StreamTriggerOutput.arrayEquals(transactionLogA.triggers || [], transactionLogB.triggers || [])) {
	            return false;
	        }
	        return true;
	    };
	    /**
	     * Compares an StreamEvmTransactionLogish data to this StreamEvmTransactionLog instance.
	     * @param value - the value to compare
	     * @returns true if the value is equal to the current instance, false otherwise
	     * @example
	     * ```ts
	     * transactionLog.equals(value);
	     * ```
	     */
	    StreamEvmTransactionLog.prototype.equals = function (value) {
	        return StreamEvmTransactionLog.equals(this, value);
	    };
	    /**
	     * Converts the StreamEvmTransactionLog instance to a JSON object.
	     * @returns JSON object of the StreamEvmTransactionLog instance
	     * @example `transactionLog.toJSON()`
	     */
	    StreamEvmTransactionLog.prototype.toJSON = function () {
	        var _a = this._data, chain = _a.chain, address = _a.address, triggers = _a.triggers, data = __rest$c(_a, ["chain", "address", "triggers"]);
	        return __assign$7(__assign$7({}, data), { chain: chain.format(), address: address.format(), triggers: triggers === null || triggers === void 0 ? void 0 : triggers.map(function (trigger) { return trigger.format(); }) });
	    };
	    /**
	     * Converts the StreamEvmTransactionLog instance to a JSON object.
	     * @returns JSON object of the StreamEvmTransactionLog instance
	     * @example `transactionLog.toJSON()`
	     */
	    StreamEvmTransactionLog.prototype.format = function () {
	        return this.toJSON();
	    };
	    Object.defineProperty(StreamEvmTransactionLog.prototype, "chain", {
	        get: function () {
	            return this._data.chain;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamEvmTransactionLog.prototype, "logIndex", {
	        get: function () {
	            return this._data.logIndex;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamEvmTransactionLog.prototype, "transactionHash", {
	        get: function () {
	            return this._data.transactionHash;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamEvmTransactionLog.prototype, "address", {
	        get: function () {
	            return this._data.address;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamEvmTransactionLog.prototype, "data", {
	        get: function () {
	            return this._data.data;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamEvmTransactionLog.prototype, "topic0", {
	        get: function () {
	            return this._data.topic0;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamEvmTransactionLog.prototype, "topic1", {
	        get: function () {
	            return this._data.topic1;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamEvmTransactionLog.prototype, "topic2", {
	        get: function () {
	            return this._data.topic2;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamEvmTransactionLog.prototype, "topic3", {
	        get: function () {
	            return this._data.topic3;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamEvmTransactionLog.prototype, "triggers", {
	        get: function () {
	            return this._data.triggers;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    return StreamEvmTransactionLog;
	}());
	StreamEvmTransactionLog$2.StreamEvmTransactionLog = StreamEvmTransactionLog$1;

	var StreamNativeBalance$2 = {};

	var StreamNativeBalance$1 = {};

	Object.defineProperty(StreamNativeBalance$1, "__esModule", { value: true });
	StreamNativeBalance$1.StreamNativeBalance = void 0;
	var common_core_1$p = lib$9;
	var common_evm_utils_1$b = lib$6;
	/**
	 * The NativeBalance class is a representation of a nativeBalance-address pair
	 *
	 * @category DataType
	 */
	var StreamNativeBalance = /** @class */ (function () {
	    function StreamNativeBalance(data, core) {
	        this._data = StreamNativeBalance.parse(data, core);
	    }
	    StreamNativeBalance.create = function (data, core) {
	        if (data instanceof StreamNativeBalance) {
	            return data;
	        }
	        var finalCore = core !== null && core !== void 0 ? core : common_core_1$p.CoreProvider.getDefault();
	        return new StreamNativeBalance(data, finalCore);
	    };
	    StreamNativeBalance.parse = function (input, core) {
	        return {
	            address: common_evm_utils_1$b.EvmAddress.create(input.address, core),
	            balance: common_evm_utils_1$b.EvmNative.create(input.balance, 'wei'),
	        };
	    };
	    StreamNativeBalance.equals = function (valueA, valueB) {
	        var nativeBalanceTriggerA = StreamNativeBalance.create(valueA);
	        var nativeBalanceTriggerB = StreamNativeBalance.create(valueB);
	        return (nativeBalanceTriggerA.address.equals(nativeBalanceTriggerB.address) &&
	            nativeBalanceTriggerA.balance.equals(nativeBalanceTriggerB.balance));
	    };
	    /**
	     * Compares an NativeBalance data to this NativeBalance instance.
	     * @param value - the value to compare
	     * @returns true if the value is equal to the current instance, false otherwise
	     * @example
	     * ```ts
	     * nativeBalanceTrigger.equals(value);
	     * ```
	     */
	    StreamNativeBalance.prototype.equals = function (value) {
	        return StreamNativeBalance.equals(this, value);
	    };
	    /**
	     * Converts the NativeBalance instance to a JSON object.
	     * @returns JSON object of the NativeBalance instance
	     * @example `nativeBalanceTrigger.toJSON()`
	     */
	    StreamNativeBalance.prototype.toJSON = function () {
	        var _a = this._data, address = _a.address, balance = _a.balance;
	        return {
	            address: address.format(),
	            balance: balance.format(),
	        };
	    };
	    /**
	     * Converts the NativeBalance instance to a JSON object.
	     * @returns JSON object of the NativeBalance instance
	     * @example `nativeBalanceTrigger.format()`
	     */
	    StreamNativeBalance.prototype.format = function () {
	        return this.toJSON();
	    };
	    Object.defineProperty(StreamNativeBalance.prototype, "address", {
	        get: function () {
	            return this._data.address;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(StreamNativeBalance.prototype, "balance", {
	        get: function () {
	            return this._data.balance;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    return StreamNativeBalance;
	}());
	StreamNativeBalance$1.StreamNativeBalance = StreamNativeBalance;

	var types$c = {};

	Object.defineProperty(types$c, "__esModule", { value: true });

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(StreamNativeBalance$1, exports);
		__exportStar(types$c, exports);
		
	} (StreamNativeBalance$2));

	var __assign$6 = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$6 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6.apply(this, arguments);
	};
	Object.defineProperty(EvmStreamResultParser$1, "__esModule", { value: true });
	EvmStreamResultParser$1.EvmStreamResultParser = void 0;
	var common_evm_utils_1$a = lib$6;
	var StreamErc1155Approval_1 = StreamErc1155Approval$2;
	var StreamErc20Approval_1 = StreamErc20Approval$2;
	var StreamErc20Transfer_1 = StreamErc20Transfer$2;
	var StreamErc721Approval_1 = StreamErc721Approval$2;
	var StreamEvmInternalTransaction_1 = StreamEvmInternalTransaction$2;
	var StreamEvmNftTransfer_1 = StreamEvmNftTransfer$2;
	var StreamEvmTransaction_1 = StreamEvmTransaction$2;
	var StreamEvmTransactionLog_1 = StreamEvmTransactionLog$2;
	var StreamNativeBalance_1 = StreamNativeBalance$2;
	var EvmStreamResultParser = /** @class */ (function () {
	    function EvmStreamResultParser() {
	    }
	    EvmStreamResultParser.parseChainId = function (value, core) {
	        // Only needed for the initial test-response where we get an empty string as chain
	        return value === '' ? common_evm_utils_1$a.EvmChain.ETHEREUM : common_evm_utils_1$a.EvmChain.create(value, core);
	    };
	    EvmStreamResultParser.parseErc20Transfers = function (value, chain) {
	        return value.map(function (transfer) {
	            return StreamErc20Transfer_1.StreamErc20Transfer.create(__assign$6({ chain: chain }, transfer));
	        });
	    };
	    EvmStreamResultParser.parseErc20Approvals = function (value, chain) {
	        return value.map(function (approval) {
	            return StreamErc20Approval_1.StreamErc20Approval.create(__assign$6({ chain: chain }, approval));
	        });
	    };
	    EvmStreamResultParser.parseNftTransfers = function (value, chain) {
	        return value.map(function (transfer) {
	            return StreamEvmNftTransfer_1.StreamEvmNftTransfer.create(__assign$6({ chain: chain }, transfer));
	        });
	    };
	    EvmStreamResultParser.parseNftApprovals = function (value, chain) {
	        return {
	            ERC721: value.ERC721.map(function (approval) {
	                return StreamErc721Approval_1.StreamErc721Approval.create(__assign$6({ chain: chain }, approval));
	            }),
	            ERC1155: value.ERC1155.map(function (approval) {
	                return StreamErc1155Approval_1.StreamErc1155Approval.create(__assign$6({ chain: chain }, approval));
	            }),
	        };
	    };
	    EvmStreamResultParser.parseBlock = function (value, chain) {
	        if (value.number === '') {
	            return common_evm_utils_1$a.EvmSimpleBlock.create({
	                chain: chain,
	                number: 0,
	                hash: '',
	                timestamp: '0',
	            });
	        }
	        return common_evm_utils_1$a.EvmSimpleBlock.create(__assign$6({ chain: chain }, value));
	    };
	    EvmStreamResultParser.parseLogs = function (value, chain) {
	        return value.map(function (log) {
	            return StreamEvmTransactionLog_1.StreamEvmTransactionLog.create(__assign$6({ chain: chain }, log));
	        });
	    };
	    EvmStreamResultParser.parseTransactions = function (value, chain) {
	        return value.map(function (transaction) {
	            return StreamEvmTransaction_1.StreamEvmTransaction.create(__assign$6({ chain: chain }, transaction));
	        });
	    };
	    EvmStreamResultParser.parseInternalTransactions = function (value, chain) {
	        return value.map(function (transaction) {
	            return StreamEvmInternalTransaction_1.StreamEvmInternalTransaction.create(__assign$6({ chain: chain }, transaction));
	        });
	    };
	    EvmStreamResultParser.parseNativeBalances = function (value) {
	        return value.map(function (nativeBalance) { return StreamNativeBalance_1.StreamNativeBalance.create(nativeBalance); });
	    };
	    var _a;
	    _a = EvmStreamResultParser;
	    EvmStreamResultParser.parse = function (value, core) {
	        var chain = _a.parseChainId(value.chainId, core);
	        return {
	            chain: chain,
	            erc20Transfers: _a.parseErc20Transfers(value.erc20Transfers, chain),
	            erc20Approvals: _a.parseErc20Approvals(value.erc20Approvals, chain),
	            nftTransfers: _a.parseNftTransfers(value.nftTransfers, chain),
	            /**
	             * @deprecated Will be removed. Use nftTokenApprovals
	             */
	            nftApprovals: _a.parseNftApprovals(value.nftApprovals, chain),
	            block: _a.parseBlock(value.block, chain),
	            logs: _a.parseLogs(value.logs, chain),
	            txs: _a.parseTransactions(value.txs, chain),
	            txsInternal: _a.parseInternalTransactions(value.txsInternal, chain),
	            abi: value.abi,
	            retries: value.retries,
	            confirmed: value.confirmed,
	            streamId: value.streamId,
	            tag: value.tag,
	            nativeBalances: _a.parseNativeBalances(value.nativeBalances),
	        };
	    };
	    return EvmStreamResultParser;
	}());
	EvmStreamResultParser$1.EvmStreamResultParser = EvmStreamResultParser;

	const version$5 = "properties/5.7.0";

	(undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	const logger$7 = new Logger(version$5);
	function defineReadOnly(object, name, value) {
	    Object.defineProperty(object, name, {
	        enumerable: true,
	        value: value,
	        writable: false,
	    });
	}
	// Crawl up the constructor chain to find a static method
	function getStatic(ctor, key) {
	    for (let i = 0; i < 32; i++) {
	        if (ctor[key]) {
	            return ctor[key];
	        }
	        if (!ctor.prototype || typeof (ctor.prototype) !== "object") {
	            break;
	        }
	        ctor = Object.getPrototypeOf(ctor.prototype).constructor;
	    }
	    return null;
	}
	const opaque = { bigint: true, boolean: true, "function": true, number: true, string: true };
	function _isFrozen(object) {
	    // Opaque objects are not mutable, so safe to copy by assignment
	    if (object === undefined || object === null || opaque[typeof (object)]) {
	        return true;
	    }
	    if (Array.isArray(object) || typeof (object) === "object") {
	        if (!Object.isFrozen(object)) {
	            return false;
	        }
	        const keys = Object.keys(object);
	        for (let i = 0; i < keys.length; i++) {
	            let value = null;
	            try {
	                value = object[keys[i]];
	            }
	            catch (error) {
	                // If accessing a value triggers an error, it is a getter
	                // designed to do so (e.g. Result) and is therefore "frozen"
	                continue;
	            }
	            if (!_isFrozen(value)) {
	                return false;
	            }
	        }
	        return true;
	    }
	    return logger$7.throwArgumentError(`Cannot deepCopy ${typeof (object)}`, "object", object);
	}
	// Returns a new copy of object, such that no properties may be replaced.
	// New properties may be added only to objects.
	function _deepCopy(object) {
	    if (_isFrozen(object)) {
	        return object;
	    }
	    // Arrays are mutable, so we need to create a copy
	    if (Array.isArray(object)) {
	        return Object.freeze(object.map((item) => deepCopy(item)));
	    }
	    if (typeof (object) === "object") {
	        const result = {};
	        for (const key in object) {
	            const value = object[key];
	            if (value === undefined) {
	                continue;
	            }
	            defineReadOnly(result, key, deepCopy(value));
	        }
	        return result;
	    }
	    return logger$7.throwArgumentError(`Cannot deepCopy ${typeof (object)}`, "object", object);
	}
	function deepCopy(object) {
	    return _deepCopy(object);
	}
	class Description {
	    constructor(info) {
	        for (const key in info) {
	            this[key] = deepCopy(info[key]);
	        }
	    }
	}

	const version$4 = "abi/5.7.0";

	const logger$6 = new Logger(version$4);
	const _constructorGuard = {};
	let ModifiersBytes = { calldata: true, memory: true, storage: true };
	let ModifiersNest = { calldata: true, memory: true };
	function checkModifier(type, name) {
	    if (type === "bytes" || type === "string") {
	        if (ModifiersBytes[name]) {
	            return true;
	        }
	    }
	    else if (type === "address") {
	        if (name === "payable") {
	            return true;
	        }
	    }
	    else if (type.indexOf("[") >= 0 || type === "tuple") {
	        if (ModifiersNest[name]) {
	            return true;
	        }
	    }
	    if (ModifiersBytes[name] || name === "payable") {
	        logger$6.throwArgumentError("invalid modifier", "name", name);
	    }
	    return false;
	}
	// @TODO: Make sure that children of an indexed tuple are marked with a null indexed
	function parseParamType(param, allowIndexed) {
	    let originalParam = param;
	    function throwError(i) {
	        logger$6.throwArgumentError(`unexpected character at position ${i}`, "param", param);
	    }
	    param = param.replace(/\s/g, " ");
	    function newNode(parent) {
	        let node = { type: "", name: "", parent: parent, state: { allowType: true } };
	        if (allowIndexed) {
	            node.indexed = false;
	        }
	        return node;
	    }
	    let parent = { type: "", name: "", state: { allowType: true } };
	    let node = parent;
	    for (let i = 0; i < param.length; i++) {
	        let c = param[i];
	        switch (c) {
	            case "(":
	                if (node.state.allowType && node.type === "") {
	                    node.type = "tuple";
	                }
	                else if (!node.state.allowParams) {
	                    throwError(i);
	                }
	                node.state.allowType = false;
	                node.type = verifyType(node.type);
	                node.components = [newNode(node)];
	                node = node.components[0];
	                break;
	            case ")":
	                delete node.state;
	                if (node.name === "indexed") {
	                    if (!allowIndexed) {
	                        throwError(i);
	                    }
	                    node.indexed = true;
	                    node.name = "";
	                }
	                if (checkModifier(node.type, node.name)) {
	                    node.name = "";
	                }
	                node.type = verifyType(node.type);
	                let child = node;
	                node = node.parent;
	                if (!node) {
	                    throwError(i);
	                }
	                delete child.parent;
	                node.state.allowParams = false;
	                node.state.allowName = true;
	                node.state.allowArray = true;
	                break;
	            case ",":
	                delete node.state;
	                if (node.name === "indexed") {
	                    if (!allowIndexed) {
	                        throwError(i);
	                    }
	                    node.indexed = true;
	                    node.name = "";
	                }
	                if (checkModifier(node.type, node.name)) {
	                    node.name = "";
	                }
	                node.type = verifyType(node.type);
	                let sibling = newNode(node.parent);
	                //{ type: "", name: "", parent: node.parent, state: { allowType: true } };
	                node.parent.components.push(sibling);
	                delete node.parent;
	                node = sibling;
	                break;
	            // Hit a space...
	            case " ":
	                // If reading type, the type is done and may read a param or name
	                if (node.state.allowType) {
	                    if (node.type !== "") {
	                        node.type = verifyType(node.type);
	                        delete node.state.allowType;
	                        node.state.allowName = true;
	                        node.state.allowParams = true;
	                    }
	                }
	                // If reading name, the name is done
	                if (node.state.allowName) {
	                    if (node.name !== "") {
	                        if (node.name === "indexed") {
	                            if (!allowIndexed) {
	                                throwError(i);
	                            }
	                            if (node.indexed) {
	                                throwError(i);
	                            }
	                            node.indexed = true;
	                            node.name = "";
	                        }
	                        else if (checkModifier(node.type, node.name)) {
	                            node.name = "";
	                        }
	                        else {
	                            node.state.allowName = false;
	                        }
	                    }
	                }
	                break;
	            case "[":
	                if (!node.state.allowArray) {
	                    throwError(i);
	                }
	                node.type += c;
	                node.state.allowArray = false;
	                node.state.allowName = false;
	                node.state.readArray = true;
	                break;
	            case "]":
	                if (!node.state.readArray) {
	                    throwError(i);
	                }
	                node.type += c;
	                node.state.readArray = false;
	                node.state.allowArray = true;
	                node.state.allowName = true;
	                break;
	            default:
	                if (node.state.allowType) {
	                    node.type += c;
	                    node.state.allowParams = true;
	                    node.state.allowArray = true;
	                }
	                else if (node.state.allowName) {
	                    node.name += c;
	                    delete node.state.allowArray;
	                }
	                else if (node.state.readArray) {
	                    node.type += c;
	                }
	                else {
	                    throwError(i);
	                }
	        }
	    }
	    if (node.parent) {
	        logger$6.throwArgumentError("unexpected eof", "param", param);
	    }
	    delete parent.state;
	    if (node.name === "indexed") {
	        if (!allowIndexed) {
	            throwError(originalParam.length - 7);
	        }
	        if (node.indexed) {
	            throwError(originalParam.length - 7);
	        }
	        node.indexed = true;
	        node.name = "";
	    }
	    else if (checkModifier(node.type, node.name)) {
	        node.name = "";
	    }
	    parent.type = verifyType(parent.type);
	    return parent;
	}
	function populate(object, params) {
	    for (let key in params) {
	        defineReadOnly(object, key, params[key]);
	    }
	}
	const FormatTypes = Object.freeze({
	    // Bare formatting, as is needed for computing a sighash of an event or function
	    sighash: "sighash",
	    // Human-Readable with Minimal spacing and without names (compact human-readable)
	    minimal: "minimal",
	    // Human-Readable with nice spacing, including all names
	    full: "full",
	    // JSON-format a la Solidity
	    json: "json"
	});
	const paramTypeArray = new RegExp(/^(.*)\[([0-9]*)\]$/);
	class ParamType {
	    constructor(constructorGuard, params) {
	        if (constructorGuard !== _constructorGuard) {
	            logger$6.throwError("use fromString", Logger.errors.UNSUPPORTED_OPERATION, {
	                operation: "new ParamType()"
	            });
	        }
	        populate(this, params);
	        let match = this.type.match(paramTypeArray);
	        if (match) {
	            populate(this, {
	                arrayLength: parseInt(match[2] || "-1"),
	                arrayChildren: ParamType.fromObject({
	                    type: match[1],
	                    components: this.components
	                }),
	                baseType: "array"
	            });
	        }
	        else {
	            populate(this, {
	                arrayLength: null,
	                arrayChildren: null,
	                baseType: ((this.components != null) ? "tuple" : this.type)
	            });
	        }
	        this._isParamType = true;
	        Object.freeze(this);
	    }
	    // Format the parameter fragment
	    //   - sighash: "(uint256,address)"
	    //   - minimal: "tuple(uint256,address) indexed"
	    //   - full:    "tuple(uint256 foo, address bar) indexed baz"
	    format(format) {
	        if (!format) {
	            format = FormatTypes.sighash;
	        }
	        if (!FormatTypes[format]) {
	            logger$6.throwArgumentError("invalid format type", "format", format);
	        }
	        if (format === FormatTypes.json) {
	            let result = {
	                type: ((this.baseType === "tuple") ? "tuple" : this.type),
	                name: (this.name || undefined)
	            };
	            if (typeof (this.indexed) === "boolean") {
	                result.indexed = this.indexed;
	            }
	            if (this.components) {
	                result.components = this.components.map((comp) => JSON.parse(comp.format(format)));
	            }
	            return JSON.stringify(result);
	        }
	        let result = "";
	        // Array
	        if (this.baseType === "array") {
	            result += this.arrayChildren.format(format);
	            result += "[" + (this.arrayLength < 0 ? "" : String(this.arrayLength)) + "]";
	        }
	        else {
	            if (this.baseType === "tuple") {
	                if (format !== FormatTypes.sighash) {
	                    result += this.type;
	                }
	                result += "(" + this.components.map((comp) => comp.format(format)).join((format === FormatTypes.full) ? ", " : ",") + ")";
	            }
	            else {
	                result += this.type;
	            }
	        }
	        if (format !== FormatTypes.sighash) {
	            if (this.indexed === true) {
	                result += " indexed";
	            }
	            if (format === FormatTypes.full && this.name) {
	                result += " " + this.name;
	            }
	        }
	        return result;
	    }
	    static from(value, allowIndexed) {
	        if (typeof (value) === "string") {
	            return ParamType.fromString(value, allowIndexed);
	        }
	        return ParamType.fromObject(value);
	    }
	    static fromObject(value) {
	        if (ParamType.isParamType(value)) {
	            return value;
	        }
	        return new ParamType(_constructorGuard, {
	            name: (value.name || null),
	            type: verifyType(value.type),
	            indexed: ((value.indexed == null) ? null : !!value.indexed),
	            components: (value.components ? value.components.map(ParamType.fromObject) : null)
	        });
	    }
	    static fromString(value, allowIndexed) {
	        function ParamTypify(node) {
	            return ParamType.fromObject({
	                name: node.name,
	                type: node.type,
	                indexed: node.indexed,
	                components: node.components
	            });
	        }
	        return ParamTypify(parseParamType(value, !!allowIndexed));
	    }
	    static isParamType(value) {
	        return !!(value != null && value._isParamType);
	    }
	}
	function parseParams(value, allowIndex) {
	    return splitNesting(value).map((param) => ParamType.fromString(param, allowIndex));
	}
	class Fragment {
	    constructor(constructorGuard, params) {
	        if (constructorGuard !== _constructorGuard) {
	            logger$6.throwError("use a static from method", Logger.errors.UNSUPPORTED_OPERATION, {
	                operation: "new Fragment()"
	            });
	        }
	        populate(this, params);
	        this._isFragment = true;
	        Object.freeze(this);
	    }
	    static from(value) {
	        if (Fragment.isFragment(value)) {
	            return value;
	        }
	        if (typeof (value) === "string") {
	            return Fragment.fromString(value);
	        }
	        return Fragment.fromObject(value);
	    }
	    static fromObject(value) {
	        if (Fragment.isFragment(value)) {
	            return value;
	        }
	        switch (value.type) {
	            case "function":
	                return FunctionFragment.fromObject(value);
	            case "event":
	                return EventFragment.fromObject(value);
	            case "constructor":
	                return ConstructorFragment.fromObject(value);
	            case "error":
	                return ErrorFragment.fromObject(value);
	            case "fallback":
	            case "receive":
	                // @TODO: Something? Maybe return a FunctionFragment? A custom DefaultFunctionFragment?
	                return null;
	        }
	        return logger$6.throwArgumentError("invalid fragment object", "value", value);
	    }
	    static fromString(value) {
	        // Make sure the "returns" is surrounded by a space and all whitespace is exactly one space
	        value = value.replace(/\s/g, " ");
	        value = value.replace(/\(/g, " (").replace(/\)/g, ") ").replace(/\s+/g, " ");
	        value = value.trim();
	        if (value.split(" ")[0] === "event") {
	            return EventFragment.fromString(value.substring(5).trim());
	        }
	        else if (value.split(" ")[0] === "function") {
	            return FunctionFragment.fromString(value.substring(8).trim());
	        }
	        else if (value.split("(")[0].trim() === "constructor") {
	            return ConstructorFragment.fromString(value.trim());
	        }
	        else if (value.split(" ")[0] === "error") {
	            return ErrorFragment.fromString(value.substring(5).trim());
	        }
	        return logger$6.throwArgumentError("unsupported fragment", "value", value);
	    }
	    static isFragment(value) {
	        return !!(value && value._isFragment);
	    }
	}
	class EventFragment extends Fragment {
	    format(format) {
	        if (!format) {
	            format = FormatTypes.sighash;
	        }
	        if (!FormatTypes[format]) {
	            logger$6.throwArgumentError("invalid format type", "format", format);
	        }
	        if (format === FormatTypes.json) {
	            return JSON.stringify({
	                type: "event",
	                anonymous: this.anonymous,
	                name: this.name,
	                inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
	            });
	        }
	        let result = "";
	        if (format !== FormatTypes.sighash) {
	            result += "event ";
	        }
	        result += this.name + "(" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? ", " : ",") + ") ";
	        if (format !== FormatTypes.sighash) {
	            if (this.anonymous) {
	                result += "anonymous ";
	            }
	        }
	        return result.trim();
	    }
	    static from(value) {
	        if (typeof (value) === "string") {
	            return EventFragment.fromString(value);
	        }
	        return EventFragment.fromObject(value);
	    }
	    static fromObject(value) {
	        if (EventFragment.isEventFragment(value)) {
	            return value;
	        }
	        if (value.type !== "event") {
	            logger$6.throwArgumentError("invalid event object", "value", value);
	        }
	        const params = {
	            name: verifyIdentifier(value.name),
	            anonymous: value.anonymous,
	            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),
	            type: "event"
	        };
	        return new EventFragment(_constructorGuard, params);
	    }
	    static fromString(value) {
	        let match = value.match(regexParen);
	        if (!match) {
	            logger$6.throwArgumentError("invalid event string", "value", value);
	        }
	        let anonymous = false;
	        match[3].split(" ").forEach((modifier) => {
	            switch (modifier.trim()) {
	                case "anonymous":
	                    anonymous = true;
	                    break;
	                case "":
	                    break;
	                default:
	                    logger$6.warn("unknown modifier: " + modifier);
	            }
	        });
	        return EventFragment.fromObject({
	            name: match[1].trim(),
	            anonymous: anonymous,
	            inputs: parseParams(match[2], true),
	            type: "event"
	        });
	    }
	    static isEventFragment(value) {
	        return (value && value._isFragment && value.type === "event");
	    }
	}
	function parseGas(value, params) {
	    params.gas = null;
	    let comps = value.split("@");
	    if (comps.length !== 1) {
	        if (comps.length > 2) {
	            logger$6.throwArgumentError("invalid human-readable ABI signature", "value", value);
	        }
	        if (!comps[1].match(/^[0-9]+$/)) {
	            logger$6.throwArgumentError("invalid human-readable ABI signature gas", "value", value);
	        }
	        params.gas = BigNumber.from(comps[1]);
	        return comps[0];
	    }
	    return value;
	}
	function parseModifiers(value, params) {
	    params.constant = false;
	    params.payable = false;
	    params.stateMutability = "nonpayable";
	    value.split(" ").forEach((modifier) => {
	        switch (modifier.trim()) {
	            case "constant":
	                params.constant = true;
	                break;
	            case "payable":
	                params.payable = true;
	                params.stateMutability = "payable";
	                break;
	            case "nonpayable":
	                params.payable = false;
	                params.stateMutability = "nonpayable";
	                break;
	            case "pure":
	                params.constant = true;
	                params.stateMutability = "pure";
	                break;
	            case "view":
	                params.constant = true;
	                params.stateMutability = "view";
	                break;
	            case "external":
	            case "public":
	            case "":
	                break;
	            default:
	                console.log("unknown modifier: " + modifier);
	        }
	    });
	}
	function verifyState(value) {
	    let result = {
	        constant: false,
	        payable: true,
	        stateMutability: "payable"
	    };
	    if (value.stateMutability != null) {
	        result.stateMutability = value.stateMutability;
	        // Set (and check things are consistent) the constant property
	        result.constant = (result.stateMutability === "view" || result.stateMutability === "pure");
	        if (value.constant != null) {
	            if ((!!value.constant) !== result.constant) {
	                logger$6.throwArgumentError("cannot have constant function with mutability " + result.stateMutability, "value", value);
	            }
	        }
	        // Set (and check things are consistent) the payable property
	        result.payable = (result.stateMutability === "payable");
	        if (value.payable != null) {
	            if ((!!value.payable) !== result.payable) {
	                logger$6.throwArgumentError("cannot have payable function with mutability " + result.stateMutability, "value", value);
	            }
	        }
	    }
	    else if (value.payable != null) {
	        result.payable = !!value.payable;
	        // If payable we can assume non-constant; otherwise we can't assume
	        if (value.constant == null && !result.payable && value.type !== "constructor") {
	            logger$6.throwArgumentError("unable to determine stateMutability", "value", value);
	        }
	        result.constant = !!value.constant;
	        if (result.constant) {
	            result.stateMutability = "view";
	        }
	        else {
	            result.stateMutability = (result.payable ? "payable" : "nonpayable");
	        }
	        if (result.payable && result.constant) {
	            logger$6.throwArgumentError("cannot have constant payable function", "value", value);
	        }
	    }
	    else if (value.constant != null) {
	        result.constant = !!value.constant;
	        result.payable = !result.constant;
	        result.stateMutability = (result.constant ? "view" : "payable");
	    }
	    else if (value.type !== "constructor") {
	        logger$6.throwArgumentError("unable to determine stateMutability", "value", value);
	    }
	    return result;
	}
	class ConstructorFragment extends Fragment {
	    format(format) {
	        if (!format) {
	            format = FormatTypes.sighash;
	        }
	        if (!FormatTypes[format]) {
	            logger$6.throwArgumentError("invalid format type", "format", format);
	        }
	        if (format === FormatTypes.json) {
	            return JSON.stringify({
	                type: "constructor",
	                stateMutability: ((this.stateMutability !== "nonpayable") ? this.stateMutability : undefined),
	                payable: this.payable,
	                gas: (this.gas ? this.gas.toNumber() : undefined),
	                inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
	            });
	        }
	        if (format === FormatTypes.sighash) {
	            logger$6.throwError("cannot format a constructor for sighash", Logger.errors.UNSUPPORTED_OPERATION, {
	                operation: "format(sighash)"
	            });
	        }
	        let result = "constructor(" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? ", " : ",") + ") ";
	        if (this.stateMutability && this.stateMutability !== "nonpayable") {
	            result += this.stateMutability + " ";
	        }
	        return result.trim();
	    }
	    static from(value) {
	        if (typeof (value) === "string") {
	            return ConstructorFragment.fromString(value);
	        }
	        return ConstructorFragment.fromObject(value);
	    }
	    static fromObject(value) {
	        if (ConstructorFragment.isConstructorFragment(value)) {
	            return value;
	        }
	        if (value.type !== "constructor") {
	            logger$6.throwArgumentError("invalid constructor object", "value", value);
	        }
	        let state = verifyState(value);
	        if (state.constant) {
	            logger$6.throwArgumentError("constructor cannot be constant", "value", value);
	        }
	        const params = {
	            name: null,
	            type: value.type,
	            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),
	            payable: state.payable,
	            stateMutability: state.stateMutability,
	            gas: (value.gas ? BigNumber.from(value.gas) : null)
	        };
	        return new ConstructorFragment(_constructorGuard, params);
	    }
	    static fromString(value) {
	        let params = { type: "constructor" };
	        value = parseGas(value, params);
	        let parens = value.match(regexParen);
	        if (!parens || parens[1].trim() !== "constructor") {
	            logger$6.throwArgumentError("invalid constructor string", "value", value);
	        }
	        params.inputs = parseParams(parens[2].trim(), false);
	        parseModifiers(parens[3].trim(), params);
	        return ConstructorFragment.fromObject(params);
	    }
	    static isConstructorFragment(value) {
	        return (value && value._isFragment && value.type === "constructor");
	    }
	}
	class FunctionFragment extends ConstructorFragment {
	    format(format) {
	        if (!format) {
	            format = FormatTypes.sighash;
	        }
	        if (!FormatTypes[format]) {
	            logger$6.throwArgumentError("invalid format type", "format", format);
	        }
	        if (format === FormatTypes.json) {
	            return JSON.stringify({
	                type: "function",
	                name: this.name,
	                constant: this.constant,
	                stateMutability: ((this.stateMutability !== "nonpayable") ? this.stateMutability : undefined),
	                payable: this.payable,
	                gas: (this.gas ? this.gas.toNumber() : undefined),
	                inputs: this.inputs.map((input) => JSON.parse(input.format(format))),
	                outputs: this.outputs.map((output) => JSON.parse(output.format(format))),
	            });
	        }
	        let result = "";
	        if (format !== FormatTypes.sighash) {
	            result += "function ";
	        }
	        result += this.name + "(" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? ", " : ",") + ") ";
	        if (format !== FormatTypes.sighash) {
	            if (this.stateMutability) {
	                if (this.stateMutability !== "nonpayable") {
	                    result += (this.stateMutability + " ");
	                }
	            }
	            else if (this.constant) {
	                result += "view ";
	            }
	            if (this.outputs && this.outputs.length) {
	                result += "returns (" + this.outputs.map((output) => output.format(format)).join(", ") + ") ";
	            }
	            if (this.gas != null) {
	                result += "@" + this.gas.toString() + " ";
	            }
	        }
	        return result.trim();
	    }
	    static from(value) {
	        if (typeof (value) === "string") {
	            return FunctionFragment.fromString(value);
	        }
	        return FunctionFragment.fromObject(value);
	    }
	    static fromObject(value) {
	        if (FunctionFragment.isFunctionFragment(value)) {
	            return value;
	        }
	        if (value.type !== "function") {
	            logger$6.throwArgumentError("invalid function object", "value", value);
	        }
	        let state = verifyState(value);
	        const params = {
	            type: value.type,
	            name: verifyIdentifier(value.name),
	            constant: state.constant,
	            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),
	            outputs: (value.outputs ? value.outputs.map(ParamType.fromObject) : []),
	            payable: state.payable,
	            stateMutability: state.stateMutability,
	            gas: (value.gas ? BigNumber.from(value.gas) : null)
	        };
	        return new FunctionFragment(_constructorGuard, params);
	    }
	    static fromString(value) {
	        let params = { type: "function" };
	        value = parseGas(value, params);
	        let comps = value.split(" returns ");
	        if (comps.length > 2) {
	            logger$6.throwArgumentError("invalid function string", "value", value);
	        }
	        let parens = comps[0].match(regexParen);
	        if (!parens) {
	            logger$6.throwArgumentError("invalid function signature", "value", value);
	        }
	        params.name = parens[1].trim();
	        if (params.name) {
	            verifyIdentifier(params.name);
	        }
	        params.inputs = parseParams(parens[2], false);
	        parseModifiers(parens[3].trim(), params);
	        // We have outputs
	        if (comps.length > 1) {
	            let returns = comps[1].match(regexParen);
	            if (returns[1].trim() != "" || returns[3].trim() != "") {
	                logger$6.throwArgumentError("unexpected tokens", "value", value);
	            }
	            params.outputs = parseParams(returns[2], false);
	        }
	        else {
	            params.outputs = [];
	        }
	        return FunctionFragment.fromObject(params);
	    }
	    static isFunctionFragment(value) {
	        return (value && value._isFragment && value.type === "function");
	    }
	}
	//export class StructFragment extends Fragment {
	//}
	function checkForbidden(fragment) {
	    const sig = fragment.format();
	    if (sig === "Error(string)" || sig === "Panic(uint256)") {
	        logger$6.throwArgumentError(`cannot specify user defined ${sig} error`, "fragment", fragment);
	    }
	    return fragment;
	}
	class ErrorFragment extends Fragment {
	    format(format) {
	        if (!format) {
	            format = FormatTypes.sighash;
	        }
	        if (!FormatTypes[format]) {
	            logger$6.throwArgumentError("invalid format type", "format", format);
	        }
	        if (format === FormatTypes.json) {
	            return JSON.stringify({
	                type: "error",
	                name: this.name,
	                inputs: this.inputs.map((input) => JSON.parse(input.format(format))),
	            });
	        }
	        let result = "";
	        if (format !== FormatTypes.sighash) {
	            result += "error ";
	        }
	        result += this.name + "(" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? ", " : ",") + ") ";
	        return result.trim();
	    }
	    static from(value) {
	        if (typeof (value) === "string") {
	            return ErrorFragment.fromString(value);
	        }
	        return ErrorFragment.fromObject(value);
	    }
	    static fromObject(value) {
	        if (ErrorFragment.isErrorFragment(value)) {
	            return value;
	        }
	        if (value.type !== "error") {
	            logger$6.throwArgumentError("invalid error object", "value", value);
	        }
	        const params = {
	            type: value.type,
	            name: verifyIdentifier(value.name),
	            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : [])
	        };
	        return checkForbidden(new ErrorFragment(_constructorGuard, params));
	    }
	    static fromString(value) {
	        let params = { type: "error" };
	        let parens = value.match(regexParen);
	        if (!parens) {
	            logger$6.throwArgumentError("invalid error signature", "value", value);
	        }
	        params.name = parens[1].trim();
	        if (params.name) {
	            verifyIdentifier(params.name);
	        }
	        params.inputs = parseParams(parens[2], false);
	        return checkForbidden(ErrorFragment.fromObject(params));
	    }
	    static isErrorFragment(value) {
	        return (value && value._isFragment && value.type === "error");
	    }
	}
	function verifyType(type) {
	    // These need to be transformed to their full description
	    if (type.match(/^uint($|[^1-9])/)) {
	        type = "uint256" + type.substring(4);
	    }
	    else if (type.match(/^int($|[^1-9])/)) {
	        type = "int256" + type.substring(3);
	    }
	    // @TODO: more verification
	    return type;
	}
	// See: https://github.com/ethereum/solidity/blob/1f8f1a3db93a548d0555e3e14cfc55a10e25b60e/docs/grammar/SolidityLexer.g4#L234
	const regexIdentifier = new RegExp("^[a-zA-Z$_][a-zA-Z0-9$_]*$");
	function verifyIdentifier(value) {
	    if (!value || !value.match(regexIdentifier)) {
	        logger$6.throwArgumentError(`invalid identifier "${value}"`, "value", value);
	    }
	    return value;
	}
	const regexParen = new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$");
	function splitNesting(value) {
	    value = value.trim();
	    let result = [];
	    let accum = "";
	    let depth = 0;
	    for (let offset = 0; offset < value.length; offset++) {
	        let c = value[offset];
	        if (c === "," && depth === 0) {
	            result.push(accum);
	            accum = "";
	        }
	        else {
	            accum += c;
	            if (c === "(") {
	                depth++;
	            }
	            else if (c === ")") {
	                depth--;
	                if (depth === -1) {
	                    logger$6.throwArgumentError("unbalanced parenthesis", "value", value);
	                }
	            }
	        }
	    }
	    if (accum) {
	        result.push(accum);
	    }
	    return result;
	}

	const logger$5 = new Logger(version$4);
	function checkResultErrors(result) {
	    // Find the first error (if any)
	    const errors = [];
	    const checkErrors = function (path, object) {
	        if (!Array.isArray(object)) {
	            return;
	        }
	        for (let key in object) {
	            const childPath = path.slice();
	            childPath.push(key);
	            try {
	                checkErrors(childPath, object[key]);
	            }
	            catch (error) {
	                errors.push({ path: childPath, error: error });
	            }
	        }
	    };
	    checkErrors([], result);
	    return errors;
	}
	class Coder {
	    constructor(name, type, localName, dynamic) {
	        // @TODO: defineReadOnly these
	        this.name = name;
	        this.type = type;
	        this.localName = localName;
	        this.dynamic = dynamic;
	    }
	    _throwError(message, value) {
	        logger$5.throwArgumentError(message, this.localName, value);
	    }
	}
	class Writer {
	    constructor(wordSize) {
	        defineReadOnly(this, "wordSize", wordSize || 32);
	        this._data = [];
	        this._dataLength = 0;
	        this._padding = new Uint8Array(wordSize);
	    }
	    get data() {
	        return hexConcat(this._data);
	    }
	    get length() { return this._dataLength; }
	    _writeData(data) {
	        this._data.push(data);
	        this._dataLength += data.length;
	        return data.length;
	    }
	    appendWriter(writer) {
	        return this._writeData(concat(writer._data));
	    }
	    // Arrayish items; padded on the right to wordSize
	    writeBytes(value) {
	        let bytes = arrayify(value);
	        const paddingOffset = bytes.length % this.wordSize;
	        if (paddingOffset) {
	            bytes = concat([bytes, this._padding.slice(paddingOffset)]);
	        }
	        return this._writeData(bytes);
	    }
	    _getValue(value) {
	        let bytes = arrayify(BigNumber.from(value));
	        if (bytes.length > this.wordSize) {
	            logger$5.throwError("value out-of-bounds", Logger.errors.BUFFER_OVERRUN, {
	                length: this.wordSize,
	                offset: bytes.length
	            });
	        }
	        if (bytes.length % this.wordSize) {
	            bytes = concat([this._padding.slice(bytes.length % this.wordSize), bytes]);
	        }
	        return bytes;
	    }
	    // BigNumberish items; padded on the left to wordSize
	    writeValue(value) {
	        return this._writeData(this._getValue(value));
	    }
	    writeUpdatableValue() {
	        const offset = this._data.length;
	        this._data.push(this._padding);
	        this._dataLength += this.wordSize;
	        return (value) => {
	            this._data[offset] = this._getValue(value);
	        };
	    }
	}
	class Reader {
	    constructor(data, wordSize, coerceFunc, allowLoose) {
	        defineReadOnly(this, "_data", arrayify(data));
	        defineReadOnly(this, "wordSize", wordSize || 32);
	        defineReadOnly(this, "_coerceFunc", coerceFunc);
	        defineReadOnly(this, "allowLoose", allowLoose);
	        this._offset = 0;
	    }
	    get data() { return hexlify(this._data); }
	    get consumed() { return this._offset; }
	    // The default Coerce function
	    static coerce(name, value) {
	        let match = name.match("^u?int([0-9]+)$");
	        if (match && parseInt(match[1]) <= 48) {
	            value = value.toNumber();
	        }
	        return value;
	    }
	    coerce(name, value) {
	        if (this._coerceFunc) {
	            return this._coerceFunc(name, value);
	        }
	        return Reader.coerce(name, value);
	    }
	    _peekBytes(offset, length, loose) {
	        let alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;
	        if (this._offset + alignedLength > this._data.length) {
	            if (this.allowLoose && loose && this._offset + length <= this._data.length) {
	                alignedLength = length;
	            }
	            else {
	                logger$5.throwError("data out-of-bounds", Logger.errors.BUFFER_OVERRUN, {
	                    length: this._data.length,
	                    offset: this._offset + alignedLength
	                });
	            }
	        }
	        return this._data.slice(this._offset, this._offset + alignedLength);
	    }
	    subReader(offset) {
	        return new Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);
	    }
	    readBytes(length, loose) {
	        let bytes = this._peekBytes(0, length, !!loose);
	        this._offset += bytes.length;
	        // @TODO: Make sure the length..end bytes are all 0?
	        return bytes.slice(0, length);
	    }
	    readValue() {
	        return BigNumber.from(this.readBytes(this.wordSize));
	    }
	}

	class AddressCoder extends Coder {
	    constructor(localName) {
	        super("address", "address", localName, false);
	    }
	    defaultValue() {
	        return "0x0000000000000000000000000000000000000000";
	    }
	    encode(writer, value) {
	        try {
	            value = getAddress(value);
	        }
	        catch (error) {
	            this._throwError(error.message, value);
	        }
	        return writer.writeValue(value);
	    }
	    decode(reader) {
	        return getAddress(hexZeroPad(reader.readValue().toHexString(), 20));
	    }
	}

	// Clones the functionality of an existing Coder, but without a localName
	class AnonymousCoder extends Coder {
	    constructor(coder) {
	        super(coder.name, coder.type, undefined, coder.dynamic);
	        this.coder = coder;
	    }
	    defaultValue() {
	        return this.coder.defaultValue();
	    }
	    encode(writer, value) {
	        return this.coder.encode(writer, value);
	    }
	    decode(reader) {
	        return this.coder.decode(reader);
	    }
	}

	const logger$4 = new Logger(version$4);
	function pack(writer, coders, values) {
	    let arrayValues = null;
	    if (Array.isArray(values)) {
	        arrayValues = values;
	    }
	    else if (values && typeof (values) === "object") {
	        let unique = {};
	        arrayValues = coders.map((coder) => {
	            const name = coder.localName;
	            if (!name) {
	                logger$4.throwError("cannot encode object for signature with missing names", Logger.errors.INVALID_ARGUMENT, {
	                    argument: "values",
	                    coder: coder,
	                    value: values
	                });
	            }
	            if (unique[name]) {
	                logger$4.throwError("cannot encode object for signature with duplicate names", Logger.errors.INVALID_ARGUMENT, {
	                    argument: "values",
	                    coder: coder,
	                    value: values
	                });
	            }
	            unique[name] = true;
	            return values[name];
	        });
	    }
	    else {
	        logger$4.throwArgumentError("invalid tuple value", "tuple", values);
	    }
	    if (coders.length !== arrayValues.length) {
	        logger$4.throwArgumentError("types/value length mismatch", "tuple", values);
	    }
	    let staticWriter = new Writer(writer.wordSize);
	    let dynamicWriter = new Writer(writer.wordSize);
	    let updateFuncs = [];
	    coders.forEach((coder, index) => {
	        let value = arrayValues[index];
	        if (coder.dynamic) {
	            // Get current dynamic offset (for the future pointer)
	            let dynamicOffset = dynamicWriter.length;
	            // Encode the dynamic value into the dynamicWriter
	            coder.encode(dynamicWriter, value);
	            // Prepare to populate the correct offset once we are done
	            let updateFunc = staticWriter.writeUpdatableValue();
	            updateFuncs.push((baseOffset) => {
	                updateFunc(baseOffset + dynamicOffset);
	            });
	        }
	        else {
	            coder.encode(staticWriter, value);
	        }
	    });
	    // Backfill all the dynamic offsets, now that we know the static length
	    updateFuncs.forEach((func) => { func(staticWriter.length); });
	    let length = writer.appendWriter(staticWriter);
	    length += writer.appendWriter(dynamicWriter);
	    return length;
	}
	function unpack(reader, coders) {
	    let values = [];
	    // A reader anchored to this base
	    let baseReader = reader.subReader(0);
	    coders.forEach((coder) => {
	        let value = null;
	        if (coder.dynamic) {
	            let offset = reader.readValue();
	            let offsetReader = baseReader.subReader(offset.toNumber());
	            try {
	                value = coder.decode(offsetReader);
	            }
	            catch (error) {
	                // Cannot recover from this
	                if (error.code === Logger.errors.BUFFER_OVERRUN) {
	                    throw error;
	                }
	                value = error;
	                value.baseType = coder.name;
	                value.name = coder.localName;
	                value.type = coder.type;
	            }
	        }
	        else {
	            try {
	                value = coder.decode(reader);
	            }
	            catch (error) {
	                // Cannot recover from this
	                if (error.code === Logger.errors.BUFFER_OVERRUN) {
	                    throw error;
	                }
	                value = error;
	                value.baseType = coder.name;
	                value.name = coder.localName;
	                value.type = coder.type;
	            }
	        }
	        if (value != undefined) {
	            values.push(value);
	        }
	    });
	    // We only output named properties for uniquely named coders
	    const uniqueNames = coders.reduce((accum, coder) => {
	        const name = coder.localName;
	        if (name) {
	            if (!accum[name]) {
	                accum[name] = 0;
	            }
	            accum[name]++;
	        }
	        return accum;
	    }, {});
	    // Add any named parameters (i.e. tuples)
	    coders.forEach((coder, index) => {
	        let name = coder.localName;
	        if (!name || uniqueNames[name] !== 1) {
	            return;
	        }
	        if (name === "length") {
	            name = "_length";
	        }
	        if (values[name] != null) {
	            return;
	        }
	        const value = values[index];
	        if (value instanceof Error) {
	            Object.defineProperty(values, name, {
	                enumerable: true,
	                get: () => { throw value; }
	            });
	        }
	        else {
	            values[name] = value;
	        }
	    });
	    for (let i = 0; i < values.length; i++) {
	        const value = values[i];
	        if (value instanceof Error) {
	            Object.defineProperty(values, i, {
	                enumerable: true,
	                get: () => { throw value; }
	            });
	        }
	    }
	    return Object.freeze(values);
	}
	class ArrayCoder extends Coder {
	    constructor(coder, length, localName) {
	        const type = (coder.type + "[" + (length >= 0 ? length : "") + "]");
	        const dynamic = (length === -1 || coder.dynamic);
	        super("array", type, localName, dynamic);
	        this.coder = coder;
	        this.length = length;
	    }
	    defaultValue() {
	        // Verifies the child coder is valid (even if the array is dynamic or 0-length)
	        const defaultChild = this.coder.defaultValue();
	        const result = [];
	        for (let i = 0; i < this.length; i++) {
	            result.push(defaultChild);
	        }
	        return result;
	    }
	    encode(writer, value) {
	        if (!Array.isArray(value)) {
	            this._throwError("expected array value", value);
	        }
	        let count = this.length;
	        if (count === -1) {
	            count = value.length;
	            writer.writeValue(value.length);
	        }
	        logger$4.checkArgumentCount(value.length, count, "coder array" + (this.localName ? (" " + this.localName) : ""));
	        let coders = [];
	        for (let i = 0; i < value.length; i++) {
	            coders.push(this.coder);
	        }
	        return pack(writer, coders, value);
	    }
	    decode(reader) {
	        let count = this.length;
	        if (count === -1) {
	            count = reader.readValue().toNumber();
	            // Check that there is *roughly* enough data to ensure
	            // stray random data is not being read as a length. Each
	            // slot requires at least 32 bytes for their value (or 32
	            // bytes as a link to the data). This could use a much
	            // tighter bound, but we are erroring on the side of safety.
	            if (count * 32 > reader._data.length) {
	                logger$4.throwError("insufficient data length", Logger.errors.BUFFER_OVERRUN, {
	                    length: reader._data.length,
	                    count: count
	                });
	            }
	        }
	        let coders = [];
	        for (let i = 0; i < count; i++) {
	            coders.push(new AnonymousCoder(this.coder));
	        }
	        return reader.coerce(this.name, unpack(reader, coders));
	    }
	}

	class BooleanCoder extends Coder {
	    constructor(localName) {
	        super("bool", "bool", localName, false);
	    }
	    defaultValue() {
	        return false;
	    }
	    encode(writer, value) {
	        return writer.writeValue(value ? 1 : 0);
	    }
	    decode(reader) {
	        return reader.coerce(this.type, !reader.readValue().isZero());
	    }
	}

	class DynamicBytesCoder extends Coder {
	    constructor(type, localName) {
	        super(type, type, localName, true);
	    }
	    defaultValue() {
	        return "0x";
	    }
	    encode(writer, value) {
	        value = arrayify(value);
	        let length = writer.writeValue(value.length);
	        length += writer.writeBytes(value);
	        return length;
	    }
	    decode(reader) {
	        return reader.readBytes(reader.readValue().toNumber(), true);
	    }
	}
	class BytesCoder extends DynamicBytesCoder {
	    constructor(localName) {
	        super("bytes", localName);
	    }
	    decode(reader) {
	        return reader.coerce(this.name, hexlify(super.decode(reader)));
	    }
	}

	// @TODO: Merge this with bytes
	class FixedBytesCoder extends Coder {
	    constructor(size, localName) {
	        let name = "bytes" + String(size);
	        super(name, name, localName, false);
	        this.size = size;
	    }
	    defaultValue() {
	        return ("0x0000000000000000000000000000000000000000000000000000000000000000").substring(0, 2 + this.size * 2);
	    }
	    encode(writer, value) {
	        let data = arrayify(value);
	        if (data.length !== this.size) {
	            this._throwError("incorrect data length", value);
	        }
	        return writer.writeBytes(data);
	    }
	    decode(reader) {
	        return reader.coerce(this.name, hexlify(reader.readBytes(this.size)));
	    }
	}

	class NullCoder extends Coder {
	    constructor(localName) {
	        super("null", "", localName, false);
	    }
	    defaultValue() {
	        return null;
	    }
	    encode(writer, value) {
	        if (value != null) {
	            this._throwError("not null", value);
	        }
	        return writer.writeBytes([]);
	    }
	    decode(reader) {
	        reader.readBytes(0);
	        return reader.coerce(this.name, null);
	    }
	}

	const NegativeOne = ( /*#__PURE__*/BigNumber.from(-1));
	const Zero = ( /*#__PURE__*/BigNumber.from(0));
	const One = ( /*#__PURE__*/BigNumber.from(1));
	const MaxUint256 = ( /*#__PURE__*/BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"));

	const HashZero = "0x0000000000000000000000000000000000000000000000000000000000000000";

	class NumberCoder extends Coder {
	    constructor(size, signed, localName) {
	        const name = ((signed ? "int" : "uint") + (size * 8));
	        super(name, name, localName, false);
	        this.size = size;
	        this.signed = signed;
	    }
	    defaultValue() {
	        return 0;
	    }
	    encode(writer, value) {
	        let v = BigNumber.from(value);
	        // Check bounds are safe for encoding
	        let maxUintValue = MaxUint256.mask(writer.wordSize * 8);
	        if (this.signed) {
	            let bounds = maxUintValue.mask(this.size * 8 - 1);
	            if (v.gt(bounds) || v.lt(bounds.add(One).mul(NegativeOne))) {
	                this._throwError("value out-of-bounds", value);
	            }
	        }
	        else if (v.lt(Zero) || v.gt(maxUintValue.mask(this.size * 8))) {
	            this._throwError("value out-of-bounds", value);
	        }
	        v = v.toTwos(this.size * 8).mask(this.size * 8);
	        if (this.signed) {
	            v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);
	        }
	        return writer.writeValue(v);
	    }
	    decode(reader) {
	        let value = reader.readValue().mask(this.size * 8);
	        if (this.signed) {
	            value = value.fromTwos(this.size * 8);
	        }
	        return reader.coerce(this.name, value);
	    }
	}

	const version$3 = "strings/5.7.0";

	const logger$3 = new Logger(version$3);
	///////////////////////////////
	var UnicodeNormalizationForm;
	(function (UnicodeNormalizationForm) {
	    UnicodeNormalizationForm["current"] = "";
	    UnicodeNormalizationForm["NFC"] = "NFC";
	    UnicodeNormalizationForm["NFD"] = "NFD";
	    UnicodeNormalizationForm["NFKC"] = "NFKC";
	    UnicodeNormalizationForm["NFKD"] = "NFKD";
	})(UnicodeNormalizationForm || (UnicodeNormalizationForm = {}));
	var Utf8ErrorReason;
	(function (Utf8ErrorReason) {
	    // A continuation byte was present where there was nothing to continue
	    // - offset = the index the codepoint began in
	    Utf8ErrorReason["UNEXPECTED_CONTINUE"] = "unexpected continuation byte";
	    // An invalid (non-continuation) byte to start a UTF-8 codepoint was found
	    // - offset = the index the codepoint began in
	    Utf8ErrorReason["BAD_PREFIX"] = "bad codepoint prefix";
	    // The string is too short to process the expected codepoint
	    // - offset = the index the codepoint began in
	    Utf8ErrorReason["OVERRUN"] = "string overrun";
	    // A missing continuation byte was expected but not found
	    // - offset = the index the continuation byte was expected at
	    Utf8ErrorReason["MISSING_CONTINUE"] = "missing continuation byte";
	    // The computed code point is outside the range for UTF-8
	    // - offset       = start of this codepoint
	    // - badCodepoint = the computed codepoint; outside the UTF-8 range
	    Utf8ErrorReason["OUT_OF_RANGE"] = "out of UTF-8 range";
	    // UTF-8 strings may not contain UTF-16 surrogate pairs
	    // - offset       = start of this codepoint
	    // - badCodepoint = the computed codepoint; inside the UTF-16 surrogate range
	    Utf8ErrorReason["UTF16_SURROGATE"] = "UTF-16 surrogate";
	    // The string is an overlong representation
	    // - offset       = start of this codepoint
	    // - badCodepoint = the computed codepoint; already bounds checked
	    Utf8ErrorReason["OVERLONG"] = "overlong representation";
	})(Utf8ErrorReason || (Utf8ErrorReason = {}));
	function errorFunc(reason, offset, bytes, output, badCodepoint) {
	    return logger$3.throwArgumentError(`invalid codepoint at offset ${offset}; ${reason}`, "bytes", bytes);
	}
	function ignoreFunc(reason, offset, bytes, output, badCodepoint) {
	    // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes
	    if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {
	        let i = 0;
	        for (let o = offset + 1; o < bytes.length; o++) {
	            if (bytes[o] >> 6 !== 0x02) {
	                break;
	            }
	            i++;
	        }
	        return i;
	    }
	    // This byte runs us past the end of the string, so just jump to the end
	    // (but the first byte was read already read and therefore skipped)
	    if (reason === Utf8ErrorReason.OVERRUN) {
	        return bytes.length - offset - 1;
	    }
	    // Nothing to skip
	    return 0;
	}
	function replaceFunc(reason, offset, bytes, output, badCodepoint) {
	    // Overlong representations are otherwise "valid" code points; just non-deistingtished
	    if (reason === Utf8ErrorReason.OVERLONG) {
	        output.push(badCodepoint);
	        return 0;
	    }
	    // Put the replacement character into the output
	    output.push(0xfffd);
	    // Otherwise, process as if ignoring errors
	    return ignoreFunc(reason, offset, bytes);
	}
	// Common error handing strategies
	const Utf8ErrorFuncs = Object.freeze({
	    error: errorFunc,
	    ignore: ignoreFunc,
	    replace: replaceFunc
	});
	// http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499
	function getUtf8CodePoints(bytes, onError) {
	    if (onError == null) {
	        onError = Utf8ErrorFuncs.error;
	    }
	    bytes = arrayify(bytes);
	    const result = [];
	    let i = 0;
	    // Invalid bytes are ignored
	    while (i < bytes.length) {
	        const c = bytes[i++];
	        // 0xxx xxxx
	        if (c >> 7 === 0) {
	            result.push(c);
	            continue;
	        }
	        // Multibyte; how many bytes left for this character?
	        let extraLength = null;
	        let overlongMask = null;
	        // 110x xxxx 10xx xxxx
	        if ((c & 0xe0) === 0xc0) {
	            extraLength = 1;
	            overlongMask = 0x7f;
	            // 1110 xxxx 10xx xxxx 10xx xxxx
	        }
	        else if ((c & 0xf0) === 0xe0) {
	            extraLength = 2;
	            overlongMask = 0x7ff;
	            // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx
	        }
	        else if ((c & 0xf8) === 0xf0) {
	            extraLength = 3;
	            overlongMask = 0xffff;
	        }
	        else {
	            if ((c & 0xc0) === 0x80) {
	                i += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i - 1, bytes, result);
	            }
	            else {
	                i += onError(Utf8ErrorReason.BAD_PREFIX, i - 1, bytes, result);
	            }
	            continue;
	        }
	        // Do we have enough bytes in our data?
	        if (i - 1 + extraLength >= bytes.length) {
	            i += onError(Utf8ErrorReason.OVERRUN, i - 1, bytes, result);
	            continue;
	        }
	        // Remove the length prefix from the char
	        let res = c & ((1 << (8 - extraLength - 1)) - 1);
	        for (let j = 0; j < extraLength; j++) {
	            let nextChar = bytes[i];
	            // Invalid continuation byte
	            if ((nextChar & 0xc0) != 0x80) {
	                i += onError(Utf8ErrorReason.MISSING_CONTINUE, i, bytes, result);
	                res = null;
	                break;
	            }
	            res = (res << 6) | (nextChar & 0x3f);
	            i++;
	        }
	        // See above loop for invalid continuation byte
	        if (res === null) {
	            continue;
	        }
	        // Maximum code point
	        if (res > 0x10ffff) {
	            i += onError(Utf8ErrorReason.OUT_OF_RANGE, i - 1 - extraLength, bytes, result, res);
	            continue;
	        }
	        // Reserved for UTF-16 surrogate halves
	        if (res >= 0xd800 && res <= 0xdfff) {
	            i += onError(Utf8ErrorReason.UTF16_SURROGATE, i - 1 - extraLength, bytes, result, res);
	            continue;
	        }
	        // Check for overlong sequences (more bytes than needed)
	        if (res <= overlongMask) {
	            i += onError(Utf8ErrorReason.OVERLONG, i - 1 - extraLength, bytes, result, res);
	            continue;
	        }
	        result.push(res);
	    }
	    return result;
	}
	// http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array
	function toUtf8Bytes(str, form = UnicodeNormalizationForm.current) {
	    if (form != UnicodeNormalizationForm.current) {
	        logger$3.checkNormalize();
	        str = str.normalize(form);
	    }
	    let result = [];
	    for (let i = 0; i < str.length; i++) {
	        const c = str.charCodeAt(i);
	        if (c < 0x80) {
	            result.push(c);
	        }
	        else if (c < 0x800) {
	            result.push((c >> 6) | 0xc0);
	            result.push((c & 0x3f) | 0x80);
	        }
	        else if ((c & 0xfc00) == 0xd800) {
	            i++;
	            const c2 = str.charCodeAt(i);
	            if (i >= str.length || (c2 & 0xfc00) !== 0xdc00) {
	                throw new Error("invalid utf-8 string");
	            }
	            // Surrogate Pair
	            const pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);
	            result.push((pair >> 18) | 0xf0);
	            result.push(((pair >> 12) & 0x3f) | 0x80);
	            result.push(((pair >> 6) & 0x3f) | 0x80);
	            result.push((pair & 0x3f) | 0x80);
	        }
	        else {
	            result.push((c >> 12) | 0xe0);
	            result.push(((c >> 6) & 0x3f) | 0x80);
	            result.push((c & 0x3f) | 0x80);
	        }
	    }
	    return arrayify(result);
	}
	function escapeChar(value) {
	    const hex = ("0000" + value.toString(16));
	    return "\\u" + hex.substring(hex.length - 4);
	}
	function _toEscapedUtf8String(bytes, onError) {
	    return '"' + getUtf8CodePoints(bytes, onError).map((codePoint) => {
	        if (codePoint < 256) {
	            switch (codePoint) {
	                case 8: return "\\b";
	                case 9: return "\\t";
	                case 10: return "\\n";
	                case 13: return "\\r";
	                case 34: return "\\\"";
	                case 92: return "\\\\";
	            }
	            if (codePoint >= 32 && codePoint < 127) {
	                return String.fromCharCode(codePoint);
	            }
	        }
	        if (codePoint <= 0xffff) {
	            return escapeChar(codePoint);
	        }
	        codePoint -= 0x10000;
	        return escapeChar(((codePoint >> 10) & 0x3ff) + 0xd800) + escapeChar((codePoint & 0x3ff) + 0xdc00);
	    }).join("") + '"';
	}
	function _toUtf8String(codePoints) {
	    return codePoints.map((codePoint) => {
	        if (codePoint <= 0xffff) {
	            return String.fromCharCode(codePoint);
	        }
	        codePoint -= 0x10000;
	        return String.fromCharCode((((codePoint >> 10) & 0x3ff) + 0xd800), ((codePoint & 0x3ff) + 0xdc00));
	    }).join("");
	}
	function toUtf8String(bytes, onError) {
	    return _toUtf8String(getUtf8CodePoints(bytes, onError));
	}
	function toUtf8CodePoints(str, form = UnicodeNormalizationForm.current) {
	    return getUtf8CodePoints(toUtf8Bytes(str, form));
	}

	function formatBytes32String(text) {
	    // Get the bytes
	    const bytes = toUtf8Bytes(text);
	    // Check we have room for null-termination
	    if (bytes.length > 31) {
	        throw new Error("bytes32 string must be less than 32 bytes");
	    }
	    // Zero-pad (implicitly null-terminates)
	    return hexlify(concat([bytes, HashZero]).slice(0, 32));
	}
	function parseBytes32String(bytes) {
	    const data = arrayify(bytes);
	    // Must be 32 bytes with a null-termination
	    if (data.length !== 32) {
	        throw new Error("invalid bytes32 - not 32 bytes long");
	    }
	    if (data[31] !== 0) {
	        throw new Error("invalid bytes32 string - no null terminator");
	    }
	    // Find the null termination
	    let length = 31;
	    while (data[length - 1] === 0) {
	        length--;
	    }
	    // Determine the string value
	    return toUtf8String(data.slice(0, length));
	}

	function bytes2(data) {
	    if ((data.length % 4) !== 0) {
	        throw new Error("bad data");
	    }
	    let result = [];
	    for (let i = 0; i < data.length; i += 4) {
	        result.push(parseInt(data.substring(i, i + 4), 16));
	    }
	    return result;
	}
	function createTable(data, func) {
	    if (!func) {
	        func = function (value) { return [parseInt(value, 16)]; };
	    }
	    let lo = 0;
	    let result = {};
	    data.split(",").forEach((pair) => {
	        let comps = pair.split(":");
	        lo += parseInt(comps[0], 16);
	        result[lo] = func(comps[1]);
	    });
	    return result;
	}
	function createRangeTable(data) {
	    let hi = 0;
	    return data.split(",").map((v) => {
	        let comps = v.split("-");
	        if (comps.length === 1) {
	            comps[1] = "0";
	        }
	        else if (comps[1] === "") {
	            comps[1] = "1";
	        }
	        let lo = hi + parseInt(comps[0], 16);
	        hi = parseInt(comps[1], 16);
	        return { l: lo, h: hi };
	    });
	}
	function matchMap(value, ranges) {
	    let lo = 0;
	    for (let i = 0; i < ranges.length; i++) {
	        let range = ranges[i];
	        lo += range.l;
	        if (value >= lo && value <= lo + range.h && ((value - lo) % (range.d || 1)) === 0) {
	            if (range.e && range.e.indexOf(value - lo) !== -1) {
	                continue;
	            }
	            return range;
	        }
	    }
	    return null;
	}
	const Table_A_1_ranges = createRangeTable("221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d");
	// @TODO: Make this relative...
	const Table_B_1_flags = "ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff".split(",").map((v) => parseInt(v, 16));
	const Table_B_2_ranges = [
	    { h: 25, s: 32, l: 65 },
	    { h: 30, s: 32, e: [23], l: 127 },
	    { h: 54, s: 1, e: [48], l: 64, d: 2 },
	    { h: 14, s: 1, l: 57, d: 2 },
	    { h: 44, s: 1, l: 17, d: 2 },
	    { h: 10, s: 1, e: [2, 6, 8], l: 61, d: 2 },
	    { h: 16, s: 1, l: 68, d: 2 },
	    { h: 84, s: 1, e: [18, 24, 66], l: 19, d: 2 },
	    { h: 26, s: 32, e: [17], l: 435 },
	    { h: 22, s: 1, l: 71, d: 2 },
	    { h: 15, s: 80, l: 40 },
	    { h: 31, s: 32, l: 16 },
	    { h: 32, s: 1, l: 80, d: 2 },
	    { h: 52, s: 1, l: 42, d: 2 },
	    { h: 12, s: 1, l: 55, d: 2 },
	    { h: 40, s: 1, e: [38], l: 15, d: 2 },
	    { h: 14, s: 1, l: 48, d: 2 },
	    { h: 37, s: 48, l: 49 },
	    { h: 148, s: 1, l: 6351, d: 2 },
	    { h: 88, s: 1, l: 160, d: 2 },
	    { h: 15, s: 16, l: 704 },
	    { h: 25, s: 26, l: 854 },
	    { h: 25, s: 32, l: 55915 },
	    { h: 37, s: 40, l: 1247 },
	    { h: 25, s: -119711, l: 53248 },
	    { h: 25, s: -119763, l: 52 },
	    { h: 25, s: -119815, l: 52 },
	    { h: 25, s: -119867, e: [1, 4, 5, 7, 8, 11, 12, 17], l: 52 },
	    { h: 25, s: -119919, l: 52 },
	    { h: 24, s: -119971, e: [2, 7, 8, 17], l: 52 },
	    { h: 24, s: -120023, e: [2, 7, 13, 15, 16, 17], l: 52 },
	    { h: 25, s: -120075, l: 52 },
	    { h: 25, s: -120127, l: 52 },
	    { h: 25, s: -120179, l: 52 },
	    { h: 25, s: -120231, l: 52 },
	    { h: 25, s: -120283, l: 52 },
	    { h: 25, s: -120335, l: 52 },
	    { h: 24, s: -119543, e: [17], l: 56 },
	    { h: 24, s: -119601, e: [17], l: 58 },
	    { h: 24, s: -119659, e: [17], l: 58 },
	    { h: 24, s: -119717, e: [17], l: 58 },
	    { h: 24, s: -119775, e: [17], l: 58 }
	];
	const Table_B_2_lut_abs = createTable("b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3");
	const Table_B_2_lut_rel = createTable("179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7");
	const Table_B_2_complex = createTable("df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D", bytes2);
	const Table_C_ranges = createRangeTable("80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001");
	function flatten(values) {
	    return values.reduce((accum, value) => {
	        value.forEach((value) => { accum.push(value); });
	        return accum;
	    }, []);
	}
	function _nameprepTableA1(codepoint) {
	    return !!matchMap(codepoint, Table_A_1_ranges);
	}
	function _nameprepTableB2(codepoint) {
	    let range = matchMap(codepoint, Table_B_2_ranges);
	    if (range) {
	        return [codepoint + range.s];
	    }
	    let codes = Table_B_2_lut_abs[codepoint];
	    if (codes) {
	        return codes;
	    }
	    let shift = Table_B_2_lut_rel[codepoint];
	    if (shift) {
	        return [codepoint + shift[0]];
	    }
	    let complex = Table_B_2_complex[codepoint];
	    if (complex) {
	        return complex;
	    }
	    return null;
	}
	function _nameprepTableC(codepoint) {
	    return !!matchMap(codepoint, Table_C_ranges);
	}
	function nameprep(value) {
	    // This allows platforms with incomplete normalize to bypass
	    // it for very basic names which the built-in toLowerCase
	    // will certainly handle correctly
	    if (value.match(/^[a-z0-9-]*$/i) && value.length <= 59) {
	        return value.toLowerCase();
	    }
	    // Get the code points (keeping the current normalization)
	    let codes = toUtf8CodePoints(value);
	    codes = flatten(codes.map((code) => {
	        // Substitute Table B.1 (Maps to Nothing)
	        if (Table_B_1_flags.indexOf(code) >= 0) {
	            return [];
	        }
	        if (code >= 0xfe00 && code <= 0xfe0f) {
	            return [];
	        }
	        // Substitute Table B.2 (Case Folding)
	        let codesTableB2 = _nameprepTableB2(code);
	        if (codesTableB2) {
	            return codesTableB2;
	        }
	        // No Substitution
	        return [code];
	    }));
	    // Normalize using form KC
	    codes = toUtf8CodePoints(_toUtf8String(codes), UnicodeNormalizationForm.NFKC);
	    // Prohibit Tables C.1.2, C.2.2, C.3, C.4, C.5, C.6, C.7, C.8, C.9
	    codes.forEach((code) => {
	        if (_nameprepTableC(code)) {
	            throw new Error("STRINGPREP_CONTAINS_PROHIBITED");
	        }
	    });
	    // Prohibit Unassigned Code Points (Table A.1)
	    codes.forEach((code) => {
	        if (_nameprepTableA1(code)) {
	            throw new Error("STRINGPREP_CONTAINS_UNASSIGNED");
	        }
	    });
	    // IDNA extras
	    let name = _toUtf8String(codes);
	    // IDNA: 4.2.3.1
	    if (name.substring(0, 1) === "-" || name.substring(2, 4) === "--" || name.substring(name.length - 1) === "-") {
	        throw new Error("invalid hyphen");
	    }
	    return name;
	}

	var lib_esm$2 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		get UnicodeNormalizationForm () { return UnicodeNormalizationForm; },
		Utf8ErrorFuncs: Utf8ErrorFuncs,
		get Utf8ErrorReason () { return Utf8ErrorReason; },
		_toEscapedUtf8String: _toEscapedUtf8String,
		formatBytes32String: formatBytes32String,
		nameprep: nameprep,
		parseBytes32String: parseBytes32String,
		toUtf8Bytes: toUtf8Bytes,
		toUtf8CodePoints: toUtf8CodePoints,
		toUtf8String: toUtf8String
	});

	class StringCoder extends DynamicBytesCoder {
	    constructor(localName) {
	        super("string", localName);
	    }
	    defaultValue() {
	        return "";
	    }
	    encode(writer, value) {
	        return super.encode(writer, toUtf8Bytes(value));
	    }
	    decode(reader) {
	        return toUtf8String(super.decode(reader));
	    }
	}

	class TupleCoder extends Coder {
	    constructor(coders, localName) {
	        let dynamic = false;
	        const types = [];
	        coders.forEach((coder) => {
	            if (coder.dynamic) {
	                dynamic = true;
	            }
	            types.push(coder.type);
	        });
	        const type = ("tuple(" + types.join(",") + ")");
	        super("tuple", type, localName, dynamic);
	        this.coders = coders;
	    }
	    defaultValue() {
	        const values = [];
	        this.coders.forEach((coder) => {
	            values.push(coder.defaultValue());
	        });
	        // We only output named properties for uniquely named coders
	        const uniqueNames = this.coders.reduce((accum, coder) => {
	            const name = coder.localName;
	            if (name) {
	                if (!accum[name]) {
	                    accum[name] = 0;
	                }
	                accum[name]++;
	            }
	            return accum;
	        }, {});
	        // Add named values
	        this.coders.forEach((coder, index) => {
	            let name = coder.localName;
	            if (!name || uniqueNames[name] !== 1) {
	                return;
	            }
	            if (name === "length") {
	                name = "_length";
	            }
	            if (values[name] != null) {
	                return;
	            }
	            values[name] = values[index];
	        });
	        return Object.freeze(values);
	    }
	    encode(writer, value) {
	        return pack(writer, this.coders, value);
	    }
	    decode(reader) {
	        return reader.coerce(this.name, unpack(reader, this.coders));
	    }
	}

	const logger$2 = new Logger(version$4);
	const paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
	const paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
	class AbiCoder {
	    constructor(coerceFunc) {
	        defineReadOnly(this, "coerceFunc", coerceFunc || null);
	    }
	    _getCoder(param) {
	        switch (param.baseType) {
	            case "address":
	                return new AddressCoder(param.name);
	            case "bool":
	                return new BooleanCoder(param.name);
	            case "string":
	                return new StringCoder(param.name);
	            case "bytes":
	                return new BytesCoder(param.name);
	            case "array":
	                return new ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);
	            case "tuple":
	                return new TupleCoder((param.components || []).map((component) => {
	                    return this._getCoder(component);
	                }), param.name);
	            case "":
	                return new NullCoder(param.name);
	        }
	        // u?int[0-9]*
	        let match = param.type.match(paramTypeNumber);
	        if (match) {
	            let size = parseInt(match[2] || "256");
	            if (size === 0 || size > 256 || (size % 8) !== 0) {
	                logger$2.throwArgumentError("invalid " + match[1] + " bit length", "param", param);
	            }
	            return new NumberCoder(size / 8, (match[1] === "int"), param.name);
	        }
	        // bytes[0-9]+
	        match = param.type.match(paramTypeBytes);
	        if (match) {
	            let size = parseInt(match[1]);
	            if (size === 0 || size > 32) {
	                logger$2.throwArgumentError("invalid bytes length", "param", param);
	            }
	            return new FixedBytesCoder(size, param.name);
	        }
	        return logger$2.throwArgumentError("invalid type", "type", param.type);
	    }
	    _getWordSize() { return 32; }
	    _getReader(data, allowLoose) {
	        return new Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);
	    }
	    _getWriter() {
	        return new Writer(this._getWordSize());
	    }
	    getDefaultValue(types) {
	        const coders = types.map((type) => this._getCoder(ParamType.from(type)));
	        const coder = new TupleCoder(coders, "_");
	        return coder.defaultValue();
	    }
	    encode(types, values) {
	        if (types.length !== values.length) {
	            logger$2.throwError("types/values length mismatch", Logger.errors.INVALID_ARGUMENT, {
	                count: { types: types.length, values: values.length },
	                value: { types: types, values: values }
	            });
	        }
	        const coders = types.map((type) => this._getCoder(ParamType.from(type)));
	        const coder = (new TupleCoder(coders, "_"));
	        const writer = this._getWriter();
	        coder.encode(writer, values);
	        return writer.data;
	    }
	    decode(types, data, loose) {
	        const coders = types.map((type) => this._getCoder(ParamType.from(type)));
	        const coder = new TupleCoder(coders, "_");
	        return coder.decode(this._getReader(arrayify(data), loose));
	    }
	}
	const defaultAbiCoder = new AbiCoder();

	function id(text) {
	    return keccak256(toUtf8Bytes(text));
	}

	const logger$1 = new Logger(version$4);
	class LogDescription extends Description {
	}
	class TransactionDescription extends Description {
	}
	class ErrorDescription extends Description {
	}
	class Indexed extends Description {
	    static isIndexed(value) {
	        return !!(value && value._isIndexed);
	    }
	}
	const BuiltinErrors = {
	    "0x08c379a0": { signature: "Error(string)", name: "Error", inputs: ["string"], reason: true },
	    "0x4e487b71": { signature: "Panic(uint256)", name: "Panic", inputs: ["uint256"] }
	};
	function wrapAccessError(property, error) {
	    const wrap = new Error(`deferred error during ABI decoding triggered accessing ${property}`);
	    wrap.error = error;
	    return wrap;
	}
	/*
	function checkNames(fragment: Fragment, type: "input" | "output", params: Array<ParamType>): void {
	    params.reduce((accum, param) => {
	        if (param.name) {
	            if (accum[param.name]) {
	                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format("full") }`, "fragment", fragment);
	            }
	            accum[param.name] = true;
	        }
	        return accum;
	    }, <{ [ name: string ]: boolean }>{ });
	}
	*/
	class Interface {
	    constructor(fragments) {
	        let abi = [];
	        if (typeof (fragments) === "string") {
	            abi = JSON.parse(fragments);
	        }
	        else {
	            abi = fragments;
	        }
	        defineReadOnly(this, "fragments", abi.map((fragment) => {
	            return Fragment.from(fragment);
	        }).filter((fragment) => (fragment != null)));
	        defineReadOnly(this, "_abiCoder", getStatic(new.target, "getAbiCoder")());
	        defineReadOnly(this, "functions", {});
	        defineReadOnly(this, "errors", {});
	        defineReadOnly(this, "events", {});
	        defineReadOnly(this, "structs", {});
	        // Add all fragments by their signature
	        this.fragments.forEach((fragment) => {
	            let bucket = null;
	            switch (fragment.type) {
	                case "constructor":
	                    if (this.deploy) {
	                        logger$1.warn("duplicate definition - constructor");
	                        return;
	                    }
	                    //checkNames(fragment, "input", fragment.inputs);
	                    defineReadOnly(this, "deploy", fragment);
	                    return;
	                case "function":
	                    //checkNames(fragment, "input", fragment.inputs);
	                    //checkNames(fragment, "output", (<FunctionFragment>fragment).outputs);
	                    bucket = this.functions;
	                    break;
	                case "event":
	                    //checkNames(fragment, "input", fragment.inputs);
	                    bucket = this.events;
	                    break;
	                case "error":
	                    bucket = this.errors;
	                    break;
	                default:
	                    return;
	            }
	            let signature = fragment.format();
	            if (bucket[signature]) {
	                logger$1.warn("duplicate definition - " + signature);
	                return;
	            }
	            bucket[signature] = fragment;
	        });
	        // If we do not have a constructor add a default
	        if (!this.deploy) {
	            defineReadOnly(this, "deploy", ConstructorFragment.from({
	                payable: false,
	                type: "constructor"
	            }));
	        }
	        defineReadOnly(this, "_isInterface", true);
	    }
	    format(format) {
	        if (!format) {
	            format = FormatTypes.full;
	        }
	        if (format === FormatTypes.sighash) {
	            logger$1.throwArgumentError("interface does not support formatting sighash", "format", format);
	        }
	        const abi = this.fragments.map((fragment) => fragment.format(format));
	        // We need to re-bundle the JSON fragments a bit
	        if (format === FormatTypes.json) {
	            return JSON.stringify(abi.map((j) => JSON.parse(j)));
	        }
	        return abi;
	    }
	    // Sub-classes can override these to handle other blockchains
	    static getAbiCoder() {
	        return defaultAbiCoder;
	    }
	    static getAddress(address) {
	        return getAddress(address);
	    }
	    static getSighash(fragment) {
	        return hexDataSlice(id(fragment.format()), 0, 4);
	    }
	    static getEventTopic(eventFragment) {
	        return id(eventFragment.format());
	    }
	    // Find a function definition by any means necessary (unless it is ambiguous)
	    getFunction(nameOrSignatureOrSighash) {
	        if (isHexString$1(nameOrSignatureOrSighash)) {
	            for (const name in this.functions) {
	                if (nameOrSignatureOrSighash === this.getSighash(name)) {
	                    return this.functions[name];
	                }
	            }
	            logger$1.throwArgumentError("no matching function", "sighash", nameOrSignatureOrSighash);
	        }
	        // It is a bare name, look up the function (will return null if ambiguous)
	        if (nameOrSignatureOrSighash.indexOf("(") === -1) {
	            const name = nameOrSignatureOrSighash.trim();
	            const matching = Object.keys(this.functions).filter((f) => (f.split("(" /* fix:) */)[0] === name));
	            if (matching.length === 0) {
	                logger$1.throwArgumentError("no matching function", "name", name);
	            }
	            else if (matching.length > 1) {
	                logger$1.throwArgumentError("multiple matching functions", "name", name);
	            }
	            return this.functions[matching[0]];
	        }
	        // Normalize the signature and lookup the function
	        const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];
	        if (!result) {
	            logger$1.throwArgumentError("no matching function", "signature", nameOrSignatureOrSighash);
	        }
	        return result;
	    }
	    // Find an event definition by any means necessary (unless it is ambiguous)
	    getEvent(nameOrSignatureOrTopic) {
	        if (isHexString$1(nameOrSignatureOrTopic)) {
	            const topichash = nameOrSignatureOrTopic.toLowerCase();
	            for (const name in this.events) {
	                if (topichash === this.getEventTopic(name)) {
	                    return this.events[name];
	                }
	            }
	            logger$1.throwArgumentError("no matching event", "topichash", topichash);
	        }
	        // It is a bare name, look up the function (will return null if ambiguous)
	        if (nameOrSignatureOrTopic.indexOf("(") === -1) {
	            const name = nameOrSignatureOrTopic.trim();
	            const matching = Object.keys(this.events).filter((f) => (f.split("(" /* fix:) */)[0] === name));
	            if (matching.length === 0) {
	                logger$1.throwArgumentError("no matching event", "name", name);
	            }
	            else if (matching.length > 1) {
	                logger$1.throwArgumentError("multiple matching events", "name", name);
	            }
	            return this.events[matching[0]];
	        }
	        // Normalize the signature and lookup the function
	        const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];
	        if (!result) {
	            logger$1.throwArgumentError("no matching event", "signature", nameOrSignatureOrTopic);
	        }
	        return result;
	    }
	    // Find a function definition by any means necessary (unless it is ambiguous)
	    getError(nameOrSignatureOrSighash) {
	        if (isHexString$1(nameOrSignatureOrSighash)) {
	            const getSighash = getStatic(this.constructor, "getSighash");
	            for (const name in this.errors) {
	                const error = this.errors[name];
	                if (nameOrSignatureOrSighash === getSighash(error)) {
	                    return this.errors[name];
	                }
	            }
	            logger$1.throwArgumentError("no matching error", "sighash", nameOrSignatureOrSighash);
	        }
	        // It is a bare name, look up the function (will return null if ambiguous)
	        if (nameOrSignatureOrSighash.indexOf("(") === -1) {
	            const name = nameOrSignatureOrSighash.trim();
	            const matching = Object.keys(this.errors).filter((f) => (f.split("(" /* fix:) */)[0] === name));
	            if (matching.length === 0) {
	                logger$1.throwArgumentError("no matching error", "name", name);
	            }
	            else if (matching.length > 1) {
	                logger$1.throwArgumentError("multiple matching errors", "name", name);
	            }
	            return this.errors[matching[0]];
	        }
	        // Normalize the signature and lookup the function
	        const result = this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];
	        if (!result) {
	            logger$1.throwArgumentError("no matching error", "signature", nameOrSignatureOrSighash);
	        }
	        return result;
	    }
	    // Get the sighash (the bytes4 selector) used by Solidity to identify a function
	    getSighash(fragment) {
	        if (typeof (fragment) === "string") {
	            try {
	                fragment = this.getFunction(fragment);
	            }
	            catch (error) {
	                try {
	                    fragment = this.getError(fragment);
	                }
	                catch (_) {
	                    throw error;
	                }
	            }
	        }
	        return getStatic(this.constructor, "getSighash")(fragment);
	    }
	    // Get the topic (the bytes32 hash) used by Solidity to identify an event
	    getEventTopic(eventFragment) {
	        if (typeof (eventFragment) === "string") {
	            eventFragment = this.getEvent(eventFragment);
	        }
	        return getStatic(this.constructor, "getEventTopic")(eventFragment);
	    }
	    _decodeParams(params, data) {
	        return this._abiCoder.decode(params, data);
	    }
	    _encodeParams(params, values) {
	        return this._abiCoder.encode(params, values);
	    }
	    encodeDeploy(values) {
	        return this._encodeParams(this.deploy.inputs, values || []);
	    }
	    decodeErrorResult(fragment, data) {
	        if (typeof (fragment) === "string") {
	            fragment = this.getError(fragment);
	        }
	        const bytes = arrayify(data);
	        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(fragment)) {
	            logger$1.throwArgumentError(`data signature does not match error ${fragment.name}.`, "data", hexlify(bytes));
	        }
	        return this._decodeParams(fragment.inputs, bytes.slice(4));
	    }
	    encodeErrorResult(fragment, values) {
	        if (typeof (fragment) === "string") {
	            fragment = this.getError(fragment);
	        }
	        return hexlify(concat([
	            this.getSighash(fragment),
	            this._encodeParams(fragment.inputs, values || [])
	        ]));
	    }
	    // Decode the data for a function call (e.g. tx.data)
	    decodeFunctionData(functionFragment, data) {
	        if (typeof (functionFragment) === "string") {
	            functionFragment = this.getFunction(functionFragment);
	        }
	        const bytes = arrayify(data);
	        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {
	            logger$1.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, "data", hexlify(bytes));
	        }
	        return this._decodeParams(functionFragment.inputs, bytes.slice(4));
	    }
	    // Encode the data for a function call (e.g. tx.data)
	    encodeFunctionData(functionFragment, values) {
	        if (typeof (functionFragment) === "string") {
	            functionFragment = this.getFunction(functionFragment);
	        }
	        return hexlify(concat([
	            this.getSighash(functionFragment),
	            this._encodeParams(functionFragment.inputs, values || [])
	        ]));
	    }
	    // Decode the result from a function call (e.g. from eth_call)
	    decodeFunctionResult(functionFragment, data) {
	        if (typeof (functionFragment) === "string") {
	            functionFragment = this.getFunction(functionFragment);
	        }
	        let bytes = arrayify(data);
	        let reason = null;
	        let message = "";
	        let errorArgs = null;
	        let errorName = null;
	        let errorSignature = null;
	        switch (bytes.length % this._abiCoder._getWordSize()) {
	            case 0:
	                try {
	                    return this._abiCoder.decode(functionFragment.outputs, bytes);
	                }
	                catch (error) { }
	                break;
	            case 4: {
	                const selector = hexlify(bytes.slice(0, 4));
	                const builtin = BuiltinErrors[selector];
	                if (builtin) {
	                    errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));
	                    errorName = builtin.name;
	                    errorSignature = builtin.signature;
	                    if (builtin.reason) {
	                        reason = errorArgs[0];
	                    }
	                    if (errorName === "Error") {
	                        message = `; VM Exception while processing transaction: reverted with reason string ${JSON.stringify(errorArgs[0])}`;
	                    }
	                    else if (errorName === "Panic") {
	                        message = `; VM Exception while processing transaction: reverted with panic code ${errorArgs[0]}`;
	                    }
	                }
	                else {
	                    try {
	                        const error = this.getError(selector);
	                        errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));
	                        errorName = error.name;
	                        errorSignature = error.format();
	                    }
	                    catch (error) { }
	                }
	                break;
	            }
	        }
	        return logger$1.throwError("call revert exception" + message, Logger.errors.CALL_EXCEPTION, {
	            method: functionFragment.format(),
	            data: hexlify(data), errorArgs, errorName, errorSignature, reason
	        });
	    }
	    // Encode the result for a function call (e.g. for eth_call)
	    encodeFunctionResult(functionFragment, values) {
	        if (typeof (functionFragment) === "string") {
	            functionFragment = this.getFunction(functionFragment);
	        }
	        return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));
	    }
	    // Create the filter for the event with search criteria (e.g. for eth_filterLog)
	    encodeFilterTopics(eventFragment, values) {
	        if (typeof (eventFragment) === "string") {
	            eventFragment = this.getEvent(eventFragment);
	        }
	        if (values.length > eventFragment.inputs.length) {
	            logger$1.throwError("too many arguments for " + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {
	                argument: "values",
	                value: values
	            });
	        }
	        let topics = [];
	        if (!eventFragment.anonymous) {
	            topics.push(this.getEventTopic(eventFragment));
	        }
	        const encodeTopic = (param, value) => {
	            if (param.type === "string") {
	                return id(value);
	            }
	            else if (param.type === "bytes") {
	                return keccak256(hexlify(value));
	            }
	            if (param.type === "bool" && typeof (value) === "boolean") {
	                value = (value ? "0x01" : "0x00");
	            }
	            if (param.type.match(/^u?int/)) {
	                value = BigNumber.from(value).toHexString();
	            }
	            // Check addresses are valid
	            if (param.type === "address") {
	                this._abiCoder.encode(["address"], [value]);
	            }
	            return hexZeroPad(hexlify(value), 32);
	        };
	        values.forEach((value, index) => {
	            let param = eventFragment.inputs[index];
	            if (!param.indexed) {
	                if (value != null) {
	                    logger$1.throwArgumentError("cannot filter non-indexed parameters; must be null", ("contract." + param.name), value);
	                }
	                return;
	            }
	            if (value == null) {
	                topics.push(null);
	            }
	            else if (param.baseType === "array" || param.baseType === "tuple") {
	                logger$1.throwArgumentError("filtering with tuples or arrays not supported", ("contract." + param.name), value);
	            }
	            else if (Array.isArray(value)) {
	                topics.push(value.map((value) => encodeTopic(param, value)));
	            }
	            else {
	                topics.push(encodeTopic(param, value));
	            }
	        });
	        // Trim off trailing nulls
	        while (topics.length && topics[topics.length - 1] === null) {
	            topics.pop();
	        }
	        return topics;
	    }
	    encodeEventLog(eventFragment, values) {
	        if (typeof (eventFragment) === "string") {
	            eventFragment = this.getEvent(eventFragment);
	        }
	        const topics = [];
	        const dataTypes = [];
	        const dataValues = [];
	        if (!eventFragment.anonymous) {
	            topics.push(this.getEventTopic(eventFragment));
	        }
	        if (values.length !== eventFragment.inputs.length) {
	            logger$1.throwArgumentError("event arguments/values mismatch", "values", values);
	        }
	        eventFragment.inputs.forEach((param, index) => {
	            const value = values[index];
	            if (param.indexed) {
	                if (param.type === "string") {
	                    topics.push(id(value));
	                }
	                else if (param.type === "bytes") {
	                    topics.push(keccak256(value));
	                }
	                else if (param.baseType === "tuple" || param.baseType === "array") {
	                    // @TODO
	                    throw new Error("not implemented");
	                }
	                else {
	                    topics.push(this._abiCoder.encode([param.type], [value]));
	                }
	            }
	            else {
	                dataTypes.push(param);
	                dataValues.push(value);
	            }
	        });
	        return {
	            data: this._abiCoder.encode(dataTypes, dataValues),
	            topics: topics
	        };
	    }
	    // Decode a filter for the event and the search criteria
	    decodeEventLog(eventFragment, data, topics) {
	        if (typeof (eventFragment) === "string") {
	            eventFragment = this.getEvent(eventFragment);
	        }
	        if (topics != null && !eventFragment.anonymous) {
	            let topicHash = this.getEventTopic(eventFragment);
	            if (!isHexString$1(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {
	                logger$1.throwError("fragment/topic mismatch", Logger.errors.INVALID_ARGUMENT, { argument: "topics[0]", expected: topicHash, value: topics[0] });
	            }
	            topics = topics.slice(1);
	        }
	        let indexed = [];
	        let nonIndexed = [];
	        let dynamic = [];
	        eventFragment.inputs.forEach((param, index) => {
	            if (param.indexed) {
	                if (param.type === "string" || param.type === "bytes" || param.baseType === "tuple" || param.baseType === "array") {
	                    indexed.push(ParamType.fromObject({ type: "bytes32", name: param.name }));
	                    dynamic.push(true);
	                }
	                else {
	                    indexed.push(param);
	                    dynamic.push(false);
	                }
	            }
	            else {
	                nonIndexed.push(param);
	                dynamic.push(false);
	            }
	        });
	        let resultIndexed = (topics != null) ? this._abiCoder.decode(indexed, concat(topics)) : null;
	        let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);
	        let result = [];
	        let nonIndexedIndex = 0, indexedIndex = 0;
	        eventFragment.inputs.forEach((param, index) => {
	            if (param.indexed) {
	                if (resultIndexed == null) {
	                    result[index] = new Indexed({ _isIndexed: true, hash: null });
	                }
	                else if (dynamic[index]) {
	                    result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });
	                }
	                else {
	                    try {
	                        result[index] = resultIndexed[indexedIndex++];
	                    }
	                    catch (error) {
	                        result[index] = error;
	                    }
	                }
	            }
	            else {
	                try {
	                    result[index] = resultNonIndexed[nonIndexedIndex++];
	                }
	                catch (error) {
	                    result[index] = error;
	                }
	            }
	            // Add the keyword argument if named and safe
	            if (param.name && result[param.name] == null) {
	                const value = result[index];
	                // Make error named values throw on access
	                if (value instanceof Error) {
	                    Object.defineProperty(result, param.name, {
	                        enumerable: true,
	                        get: () => { throw wrapAccessError(`property ${JSON.stringify(param.name)}`, value); }
	                    });
	                }
	                else {
	                    result[param.name] = value;
	                }
	            }
	        });
	        // Make all error indexed values throw on access
	        for (let i = 0; i < result.length; i++) {
	            const value = result[i];
	            if (value instanceof Error) {
	                Object.defineProperty(result, i, {
	                    enumerable: true,
	                    get: () => { throw wrapAccessError(`index ${i}`, value); }
	                });
	            }
	        }
	        return Object.freeze(result);
	    }
	    // Given a transaction, find the matching function fragment (if any) and
	    // determine all its properties and call parameters
	    parseTransaction(tx) {
	        let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());
	        if (!fragment) {
	            return null;
	        }
	        return new TransactionDescription({
	            args: this._abiCoder.decode(fragment.inputs, "0x" + tx.data.substring(10)),
	            functionFragment: fragment,
	            name: fragment.name,
	            signature: fragment.format(),
	            sighash: this.getSighash(fragment),
	            value: BigNumber.from(tx.value || "0"),
	        });
	    }
	    // @TODO
	    //parseCallResult(data: BytesLike): ??
	    // Given an event log, find the matching event fragment (if any) and
	    // determine all its properties and values
	    parseLog(log) {
	        let fragment = this.getEvent(log.topics[0]);
	        if (!fragment || fragment.anonymous) {
	            return null;
	        }
	        // @TODO: If anonymous, and the only method, and the input count matches, should we parse?
	        //        Probably not, because just because it is the only event in the ABI does
	        //        not mean we have the full ABI; maybe just a fragment?
	        return new LogDescription({
	            eventFragment: fragment,
	            name: fragment.name,
	            signature: fragment.format(),
	            topic: this.getEventTopic(fragment),
	            args: this.decodeEventLog(fragment, log.data, log.topics)
	        });
	    }
	    parseError(data) {
	        const hexData = hexlify(data);
	        let fragment = this.getError(hexData.substring(0, 10).toLowerCase());
	        if (!fragment) {
	            return null;
	        }
	        return new ErrorDescription({
	            args: this._abiCoder.decode(fragment.inputs, "0x" + hexData.substring(10)),
	            errorFragment: fragment,
	            name: fragment.name,
	            signature: fragment.format(),
	            sighash: this.getSighash(fragment),
	        });
	    }
	    /*
	    static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {
	        if (Interface.isInterface(value)) {
	            return value;
	        }
	        if (typeof(value) === "string") {
	            return new Interface(JSON.parse(value));
	        }
	        return new Interface(value);
	    }
	    */
	    static isInterface(value) {
	        return !!(value && value._isInterface);
	    }
	}

	var lib_esm$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		AbiCoder: AbiCoder,
		ConstructorFragment: ConstructorFragment,
		ErrorFragment: ErrorFragment,
		EventFragment: EventFragment,
		FormatTypes: FormatTypes,
		Fragment: Fragment,
		FunctionFragment: FunctionFragment,
		Indexed: Indexed,
		Interface: Interface,
		LogDescription: LogDescription,
		ParamType: ParamType,
		TransactionDescription: TransactionDescription,
		checkResultErrors: checkResultErrors,
		defaultAbiCoder: defaultAbiCoder
	});

	var require$$0$6 = /*@__PURE__*/getAugmentedNamespace(lib_esm$1);

	Object.defineProperty(EvmStreamResult$1, "__esModule", { value: true });
	EvmStreamResult$1.EvmStreamResult = void 0;
	var common_core_1$o = lib$9;
	var EvmStreamResultFormatter_1 = EvmStreamResultFormatter$1;
	var EvmStreamResultParser_1 = EvmStreamResultParser$1;
	var abi_1$1 = require$$0$6;
	/**
	 * The EvmStreamResult class is representation of the webhook data that is returned from the Stream api
	 *
	 * @category DataType
	 */
	var EvmStreamResult = /** @class */ (function () {
	    function EvmStreamResult(data, core) {
	        this._data = EvmStreamResult.parse(data, core);
	    }
	    /**
	     * Create a new instance of EvmStreamResult
	     *
	     * @param data - the EvmStreamResultish type
	     * @param core - the Core instance
	     * @example
	     * ```ts
	     * const evmStreamResult = EvmStreamResult.create(data);
	     * ```
	     * @returns an instance of EvmStreamResult
	     */
	    EvmStreamResult.create = function (data, core) {
	        if (data instanceof EvmStreamResult) {
	            return data;
	        }
	        var finalCore = core !== null && core !== void 0 ? core : common_core_1$o.CoreProvider.getDefault();
	        return new EvmStreamResult(data, finalCore);
	    };
	    /**
	     * Compares two EvmStreamResult data. It checks a deep equality check of both values.
	     * @param valueA - the first EvmStreamResultish data to compare
	     * @param valueB - the second EvmStreamResultish data to compare
	     * @returns true if the values are equal, false otherwise
	     * @example
	     * ```ts
	     *  EvmStreamResult.equals(valueA, valueB);
	     * ```
	     */
	    EvmStreamResult.equals = function (valueA, valueB) {
	        var evmStreamResultA = EvmStreamResult.create(valueA);
	        var evmStreamResultB = EvmStreamResult.create(valueB);
	        if (!evmStreamResultA.chain.equals(evmStreamResultB.chain)) {
	            return false;
	        }
	        if (!evmStreamResultA.block.equals(evmStreamResultB.block)) {
	            return false;
	        }
	        if (evmStreamResultA.streamId !== evmStreamResultB.streamId) {
	            return false;
	        }
	        if (evmStreamResultA.tag !== evmStreamResultB.tag) {
	            return false;
	        }
	        if (evmStreamResultA.confirmed !== evmStreamResultB.confirmed) {
	            return false;
	        }
	        return true;
	    };
	    /**
	     * Compares an EvmStreamResultish data to this EvmStreamResult instance.
	     * @param value - the value to compare
	     * @returns true if the value is equal to the current instance, false otherwise
	     * @example
	     * ```ts
	     * evmStreamResult.equals(value);
	     * ```
	     */
	    EvmStreamResult.prototype.equals = function (value) {
	        return EvmStreamResult.equals(this, value);
	    };
	    /**
	     * Converts the EvmStreamResult instance to a JSON object.
	     * @returns JSON object of the EvmStreamResult instance
	     * @example `evmStreamResult.toJSON()`
	     */
	    EvmStreamResult.prototype.toJSON = function () {
	        return EvmStreamResultFormatter_1.EvmStreamResultFormatter.toJSON(this._data);
	    };
	    /**
	     * Converts the EvmStreamResult instance to a JSON object.
	     * @returns JSON object of the EvmStreamResult instance
	     * @example `evmStreamResult.format()`
	     */
	    EvmStreamResult.prototype.format = function () {
	        return this.toJSON();
	    };
	    Object.defineProperty(EvmStreamResult.prototype, "abiInterface", {
	        get: function () {
	            if (!this.abi || !this.abi.length) {
	                return null;
	            }
	            return new abi_1$1.Interface(this.abi);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmStreamResult.prototype, "decodedLogs", {
	        get: function () {
	            var abiInterface = this.abiInterface;
	            if (!abiInterface) {
	                return [];
	            }
	            return this.logs.map(function (log) {
	                return abiInterface.parseLog({
	                    data: log.data,
	                    topics: [log.topic0, log.topic1, log.topic2, log.topic3].filter(isNotEmpty$1),
	                });
	            });
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmStreamResult.prototype, "chain", {
	        get: function () {
	            return this._data.chain;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmStreamResult.prototype, "streamId", {
	        get: function () {
	            return this._data.streamId;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmStreamResult.prototype, "tag", {
	        get: function () {
	            return this._data.tag;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmStreamResult.prototype, "block", {
	        get: function () {
	            return this._data.block;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmStreamResult.prototype, "retries", {
	        get: function () {
	            return this._data.retries;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmStreamResult.prototype, "confirmed", {
	        get: function () {
	            return this._data.confirmed;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmStreamResult.prototype, "erc20Approvals", {
	        get: function () {
	            return this._data.erc20Approvals;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmStreamResult.prototype, "erc20Transfers", {
	        get: function () {
	            return this._data.erc20Transfers;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmStreamResult.prototype, "logs", {
	        get: function () {
	            return this._data.logs;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmStreamResult.prototype, "nftApprovals", {
	        get: function () {
	            return this._data.nftApprovals;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmStreamResult.prototype, "nftTransfers", {
	        get: function () {
	            return this._data.nftTransfers;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmStreamResult.prototype, "txs", {
	        get: function () {
	            return this._data.txs;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmStreamResult.prototype, "txsInternal", {
	        get: function () {
	            return this._data.txsInternal;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmStreamResult.prototype, "abi", {
	        get: function () {
	            return this._data.abi;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(EvmStreamResult.prototype, "nativeBalances", {
	        get: function () {
	            return this._data.nativeBalances;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    EvmStreamResult.parse = function (data, core) {
	        return EvmStreamResultParser_1.EvmStreamResultParser.parse(data, core);
	    };
	    return EvmStreamResult;
	}());
	EvmStreamResult$1.EvmStreamResult = EvmStreamResult;
	var isNotEmpty$1 = function (value) { return value != null; };

	var types$b = {};

	Object.defineProperty(types$b, "__esModule", { value: true });

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(EvmStreamResult$1, exports);
		__exportStar(types$b, exports);
		
	} (EvmStreamResult$2));

	var StreamErc1155Approval = {};

	var types$a = {};

	Object.defineProperty(types$a, "__esModule", { value: true });

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(StreamErc1155Approval$2, exports);
		__exportStar(types$a, exports);
		
	} (StreamErc1155Approval));

	var StreamErc20Approval = {};

	var types$9 = {};

	Object.defineProperty(types$9, "__esModule", { value: true });

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(StreamErc20Approval$2, exports);
		__exportStar(types$9, exports);
		
	} (StreamErc20Approval));

	var StreamErc20Transfer = {};

	var types$8 = {};

	Object.defineProperty(types$8, "__esModule", { value: true });

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(StreamErc20Transfer$2, exports);
		__exportStar(types$8, exports);
		
	} (StreamErc20Transfer));

	var StreamErc721Approval = {};

	var types$7 = {};

	Object.defineProperty(types$7, "__esModule", { value: true });

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(StreamErc721Approval$2, exports);
		__exportStar(types$7, exports);
		
	} (StreamErc721Approval));

	var StreamEvmInternalTransaction = {};

	var types$6 = {};

	Object.defineProperty(types$6, "__esModule", { value: true });

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(StreamEvmInternalTransaction$2, exports);
		__exportStar(types$6, exports);
		
	} (StreamEvmInternalTransaction));

	var StreamEvmNftTransfer = {};

	var types$5 = {};

	Object.defineProperty(types$5, "__esModule", { value: true });

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(StreamEvmNftTransfer$2, exports);
		__exportStar(types$5, exports);
		
	} (StreamEvmNftTransfer));

	var StreamEvmTransaction = {};

	var types$4 = {};

	Object.defineProperty(types$4, "__esModule", { value: true });

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(StreamEvmTransaction$2, exports);
		__exportStar(types$4, exports);
		
	} (StreamEvmTransaction));

	var StreamEvmTransactionLog = {};

	var types$3 = {};

	Object.defineProperty(types$3, "__esModule", { value: true });

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(StreamEvmTransactionLog$2, exports);
		__exportStar(types$3, exports);
		
	} (StreamEvmTransactionLog));

	var EvmAbi = {};

	Object.defineProperty(EvmAbi, "__esModule", { value: true });

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(AptosStream$2, exports);
		__exportStar(EvmStream$2, exports);
		__exportStar(EvmStreamResult$2, exports);
		__exportStar(StreamErc1155Approval, exports);
		__exportStar(StreamErc20Approval, exports);
		__exportStar(StreamErc20Transfer, exports);
		__exportStar(StreamErc721Approval, exports);
		__exportStar(StreamEvmInternalTransaction, exports);
		__exportStar(StreamEvmNftTransfer, exports);
		__exportStar(StreamEvmTransaction, exports);
		__exportStar(StreamEvmTransactionLog, exports);
		__exportStar(StreamTrigger$2, exports);
		__exportStar(StreamTriggerOutput$2, exports);
		__exportStar(EvmAbi, exports);
		
	} (dataTypes$6));

	var operations$4 = {};

	var aptosStreams = {};

	var addAddressAptosOperation = {};

	var __assign$5 = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$5 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5.apply(this, arguments);
	};
	Object.defineProperty(addAddressAptosOperation, "__esModule", { value: true });
	addAddressAptosOperation.addAddressAptosOperation = void 0;
	var common_core_1$n = lib$9;
	var common_aptos_utils_1$6 = lib$7;
	addAddressAptosOperation.addAddressAptosOperation = {
	    method: 'POST',
	    name: 'addAddressAptos',
	    id: 'aptosStreamsAddAddresses',
	    groupName: 'aptosStreams',
	    urlPathPattern: '/streams/aptos/{id}/address',
	    bodyParamNames: ['address'],
	    urlPathParamNames: ['id'],
	    bodyType: 'properties',
	    getRequestUrlParams: getRequestUrlParams$E,
	    getRequestBody: getRequestBody$n,
	    deserializeResponse: deserializeResponse$E,
	    serializeRequest: serializeRequest$E,
	    deserializeRequest: deserializeRequest$E,
	};
	// Methods
	function getRequestUrlParams$E(request) {
	    return {
	        id: request.id,
	    };
	}
	function getRequestBody$n(request) {
	    return {
	        address: Array.isArray(request.address)
	            ? request.address.map(function (a) { return common_aptos_utils_1$6.AptosAddress.create(a).address; })
	            : common_aptos_utils_1$6.AptosAddress.create(request.address).address,
	    };
	}
	function deserializeResponse$E(jsonResponse) {
	    var data = (0, common_core_1$n.toCamelCase)(jsonResponse);
	    return __assign$5(__assign$5({}, data), { address: data.address
	            ? typeof data.address === 'string'
	                ? common_aptos_utils_1$6.AptosAddress.create(data.address)
	                : data.address.map(function (address) { return common_aptos_utils_1$6.AptosAddress.create(address); })
	            : undefined });
	}
	function serializeRequest$E(request) {
	    return {
	        id: request.id,
	        address: Array.isArray(request.address)
	            ? request.address.map(function (a) { return common_aptos_utils_1$6.AptosAddress.create(a).address; })
	            : common_aptos_utils_1$6.AptosAddress.create(request.address).address,
	    };
	}
	function deserializeRequest$E(jsonRequest) {
	    return {
	        id: jsonRequest.id,
	        address: Array.isArray(jsonRequest.address)
	            ? jsonRequest.address.map(function (a) { return common_aptos_utils_1$6.AptosAddress.create(a); })
	            : common_aptos_utils_1$6.AptosAddress.create(jsonRequest.address),
	    };
	}

	var getStreamsAptosOperation = {};

	Object.defineProperty(getStreamsAptosOperation, "__esModule", { value: true });
	getStreamsAptosOperation.getStreamsAptosOperation = void 0;
	var common_core_1$m = lib$9;
	var dataTypes_1$f = dataTypes$6;
	getStreamsAptosOperation.getStreamsAptosOperation = {
	    method: 'GET',
	    name: 'getStreamsAptos',
	    id: 'aptosStreamsGetAll',
	    groupName: 'aptosStreams',
	    urlSearchParamNames: ['cursor', 'limit'],
	    urlPathPattern: '/streams/aptos',
	    firstPageIndex: 0,
	    getRequestUrlParams: getRequestUrlParams$D,
	    deserializeResponse: deserializeResponse$D,
	    serializeRequest: serializeRequest$D,
	    deserializeRequest: deserializeRequest$D,
	};
	// Methods
	function getRequestUrlParams$D(request) {
	    return {
	        limit: (0, common_core_1$m.maybe)(request.limit, String),
	        cursor: request.cursor,
	    };
	}
	function deserializeResponse$D(jsonResponse) {
	    var _a;
	    return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (stream) { return dataTypes_1$f.AptosStream.create(stream); });
	}
	function serializeRequest$D(request) {
	    return {
	        cursor: request.cursor,
	        limit: request.limit,
	    };
	}
	function deserializeRequest$D(jsonRequest) {
	    return {
	        cursor: jsonRequest.cursor,
	        limit: jsonRequest.limit,
	    };
	}

	var getStreamAptosOperation = {};

	Object.defineProperty(getStreamAptosOperation, "__esModule", { value: true });
	getStreamAptosOperation.getStreamAptosOperation = void 0;
	var dataTypes_1$e = dataTypes$6;
	getStreamAptosOperation.getStreamAptosOperation = {
	    method: 'GET',
	    name: 'getStreamAptos',
	    id: 'aptosStreamsGet',
	    groupName: 'aptosStreams',
	    urlPathPattern: '/streams/aptos/{id}',
	    urlPathParamNames: ['id'],
	    getRequestUrlParams: getRequestUrlParams$C,
	    deserializeResponse: deserializeResponse$C,
	    serializeRequest: serializeRequest$C,
	    deserializeRequest: deserializeRequest$C,
	};
	// Methods
	function getRequestUrlParams$C(request) {
	    return {
	        id: request.id,
	    };
	}
	function deserializeResponse$C(jsonResponse) {
	    return dataTypes_1$e.AptosStream.create(jsonResponse);
	}
	function serializeRequest$C(request) {
	    return {
	        id: request.id,
	    };
	}
	function deserializeRequest$C(jsonRequest) {
	    return {
	        id: jsonRequest.id,
	    };
	}

	var createStreamAptosOperation = {};

	Object.defineProperty(createStreamAptosOperation, "__esModule", { value: true });
	createStreamAptosOperation.createStreamAptosOperation = void 0;
	var common_aptos_utils_1$5 = lib$7;
	var dataTypes_1$d = dataTypes$6;
	createStreamAptosOperation.createStreamAptosOperation = {
	    method: 'PUT',
	    name: 'createStreamAptos',
	    id: 'aptosStreamsCreate',
	    groupName: 'aptosStreams',
	    urlPathPattern: '/streams/aptos',
	    bodyParamNames: [
	        'webhookUrl',
	        'tag',
	        'functions',
	        'events',
	        'network',
	        'includePayload',
	        'includeEvents',
	        'includeChanges',
	        'description',
	        'demo',
	        'allAddresses',
	    ],
	    bodyType: 'properties',
	    getRequestUrlParams: getRequestUrlParams$B,
	    getRequestBody: getRequestBody$m,
	    deserializeResponse: deserializeResponse$B,
	    serializeRequest: serializeRequest$B,
	    deserializeRequest: deserializeRequest$B,
	};
	// Methods
	function getRequestUrlParams$B() {
	    return {};
	}
	function getRequestBody$m(request) {
	    return {
	        allAddresses: request.allAddresses,
	        demo: request.demo,
	        description: request.description,
	        includeChanges: request.includeChanges,
	        includeEvents: request.includeEvents,
	        includePayload: request.includePayload,
	        network: request.network.map(function (network) { return common_aptos_utils_1$5.AptosNetwork.create(network); }),
	        events: request.events,
	        functions: request.functions,
	        tag: request.tag,
	        webhookUrl: request.webhookUrl,
	    };
	}
	function deserializeResponse$B(jsonResponse) {
	    return dataTypes_1$d.AptosStream.create(jsonResponse);
	}
	function serializeRequest$B(request) {
	    return {
	        allAddresses: request.allAddresses,
	        demo: request.demo,
	        description: request.description,
	        includeChanges: request.includeChanges,
	        includeEvents: request.includeEvents,
	        includePayload: request.includePayload,
	        network: request.network.map(function (network) { return common_aptos_utils_1$5.AptosNetwork.create(network).network; }),
	        events: request.events,
	        functions: request.functions,
	        tag: request.tag,
	        webhookUrl: request.webhookUrl,
	    };
	}
	function deserializeRequest$B(jsonRequest) {
	    return {
	        allAddresses: jsonRequest.allAddresses,
	        demo: jsonRequest.demo,
	        description: jsonRequest.description,
	        includeChanges: jsonRequest.includeChanges,
	        includeEvents: jsonRequest.includeEvents,
	        includePayload: jsonRequest.includePayload,
	        network: jsonRequest.network.map(function (network) { return common_aptos_utils_1$5.AptosNetwork.create(network); }),
	        events: jsonRequest.events,
	        functions: jsonRequest.functions,
	        tag: jsonRequest.tag,
	        webhookUrl: jsonRequest.webhookUrl,
	    };
	}

	var deleteAddressAptosOperation = {};

	Object.defineProperty(deleteAddressAptosOperation, "__esModule", { value: true });
	deleteAddressAptosOperation.deleteAddressAptosOperation = void 0;
	var common_aptos_utils_1$4 = lib$7;
	deleteAddressAptosOperation.deleteAddressAptosOperation = {
	    method: 'DELETE',
	    name: 'deleteAddressAptos',
	    id: 'aptosStreamsDeleteAddresses',
	    groupName: 'aptosStreams',
	    urlPathParamNames: ['id'],
	    urlPathPattern: "/streams/aptos/{id}/address",
	    bodyParamNames: ['address'],
	    bodyType: 'properties',
	    getRequestUrlParams: getRequestUrlParams$A,
	    getRequestBody: getRequestBody$l,
	    deserializeResponse: deserializeResponse$A,
	    serializeRequest: serializeRequest$A,
	    deserializeRequest: deserializeRequest$A,
	};
	// Methods
	function getRequestUrlParams$A(request) {
	    return {
	        id: request.id,
	    };
	}
	function getRequestBody$l(request) {
	    return {
	        address: Array.isArray(request.address)
	            ? request.address.map(function (address) { return common_aptos_utils_1$4.AptosAddress.create(address).address; })
	            : common_aptos_utils_1$4.AptosAddress.create(request.address).address,
	    };
	}
	function deserializeResponse$A(jsonResponse) {
	    return jsonResponse;
	}
	function serializeRequest$A(request) {
	    return {
	        id: request.id,
	        address: Array.isArray(request.address)
	            ? request.address.map(function (address) { return common_aptos_utils_1$4.AptosAddress.create(address).address; })
	            : common_aptos_utils_1$4.AptosAddress.create(request.address).address,
	    };
	}
	function deserializeRequest$A(jsonRequest) {
	    return {
	        id: jsonRequest.id,
	        address: Array.isArray(jsonRequest.address)
	            ? jsonRequest.address.map(function (address) { return common_aptos_utils_1$4.AptosAddress.create(address); })
	            : common_aptos_utils_1$4.AptosAddress.create(jsonRequest.address),
	    };
	}

	var deleteStreamAptosOperation = {};

	Object.defineProperty(deleteStreamAptosOperation, "__esModule", { value: true });
	deleteStreamAptosOperation.deleteStreamAptosOperation = void 0;
	deleteStreamAptosOperation.deleteStreamAptosOperation = {
	    method: 'DELETE',
	    name: 'deleteStreamAptos',
	    id: 'aptosStreamsDelete',
	    groupName: 'aptosStreams',
	    urlPathParamNames: ['id'],
	    urlPathPattern: "/streams/aptos/{id}",
	    bodyParamNames: [],
	    bodyType: 'properties',
	    getRequestUrlParams: getRequestUrlParams$z,
	    getRequestBody: getRequestBody$k,
	    deserializeResponse: deserializeResponse$z,
	    serializeRequest: serializeRequest$z,
	    deserializeRequest: deserializeRequest$z,
	};
	// Methods
	function getRequestUrlParams$z(request) {
	    return {
	        id: request.id,
	    };
	}
	function getRequestBody$k() {
	    return {};
	}
	function deserializeResponse$z(jsonResponse) {
	    return jsonResponse;
	}
	function serializeRequest$z(request) {
	    return {
	        id: request.id,
	    };
	}
	function deserializeRequest$z(jsonRequest) {
	    return {
	        id: jsonRequest.id,
	    };
	}

	var getAddressesAptosOperation = {};

	Object.defineProperty(getAddressesAptosOperation, "__esModule", { value: true });
	getAddressesAptosOperation.getAddressesAptosOperation = void 0;
	var common_aptos_utils_1$3 = lib$7;
	var common_core_1$l = lib$9;
	getAddressesAptosOperation.getAddressesAptosOperation = {
	    method: 'GET',
	    name: 'getAddressesAptos',
	    id: 'aptosStreamsGetAddresses',
	    groupName: 'aptosStreams',
	    urlPathParamNames: ['id'],
	    urlSearchParamNames: ['cursor', 'limit'],
	    urlPathPattern: '/streams/aptos/{id}/address',
	    firstPageIndex: 0,
	    getRequestUrlParams: getRequestUrlParams$y,
	    deserializeResponse: deserializeResponse$y,
	    serializeRequest: serializeRequest$y,
	    deserializeRequest: deserializeRequest$y,
	};
	// Methods
	function getRequestUrlParams$y(request) {
	    return {
	        id: request.id,
	        limit: (0, common_core_1$l.maybe)(request.limit, String),
	        cursor: request.cursor,
	    };
	}
	function deserializeResponse$y(jsonResponse) {
	    var _a;
	    return {
	        result: ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (address) { return common_aptos_utils_1$3.AptosAddress.create(address.address); }),
	        total: jsonResponse.total,
	    };
	}
	function serializeRequest$y(request) {
	    return {
	        id: request.id,
	        limit: request.limit,
	        cursor: request.cursor,
	    };
	}
	function deserializeRequest$y(jsonRequest) {
	    return {
	        id: jsonRequest.id,
	        limit: jsonRequest.limit,
	        cursor: jsonRequest.cursor,
	    };
	}

	var updateStreamAptosOperation = {};

	Object.defineProperty(updateStreamAptosOperation, "__esModule", { value: true });
	updateStreamAptosOperation.updateStreamAptosOperation = void 0;
	var common_aptos_utils_1$2 = lib$7;
	var dataTypes_1$c = dataTypes$6;
	updateStreamAptosOperation.updateStreamAptosOperation = {
	    method: 'POST',
	    name: 'updateStreamAptos',
	    id: 'aptosStreamsUpdate',
	    groupName: 'aptosStreams',
	    urlPathParamNames: ['id'],
	    urlPathPattern: '/streams/aptos/{id}',
	    bodyParamNames: [
	        'allAddresses',
	        'demo',
	        'description',
	        'includeChanges',
	        'includeEvents',
	        'includePayload',
	        'network',
	        'events',
	        'functions',
	        'tag',
	        'webhookUrl',
	    ],
	    bodyType: 'properties',
	    getRequestUrlParams: getRequestUrlParams$x,
	    getRequestBody: getRequestBody$j,
	    deserializeResponse: deserializeResponse$x,
	    serializeRequest: serializeRequest$x,
	    deserializeRequest: deserializeRequest$x,
	};
	// Methods
	function getRequestUrlParams$x(request) {
	    return {
	        id: request.id,
	    };
	}
	function getRequestBody$j(request) {
	    return {
	        allAddresses: request.allAddresses,
	        demo: request.demo,
	        description: request.description,
	        includeChanges: request.includeChanges,
	        includeEvents: request.includeEvents,
	        includePayload: request.includePayload,
	        network: request.network.map(function (network) { return common_aptos_utils_1$2.AptosNetwork.create(network); }),
	        events: request.events,
	        functions: request.functions,
	        tag: request.tag,
	        webhookUrl: request.webhookUrl,
	    };
	}
	function deserializeResponse$x(jsonResponse) {
	    return dataTypes_1$c.AptosStream.create(jsonResponse);
	}
	function serializeRequest$x(request) {
	    return {
	        id: request.id,
	        allAddresses: request.allAddresses,
	        demo: request.demo,
	        description: request.description,
	        includeChanges: request.includeChanges,
	        includeEvents: request.includeEvents,
	        includePayload: request.includePayload,
	        network: request.network.map(function (network) { return common_aptos_utils_1$2.AptosNetwork.create(network).network; }),
	        events: request.events,
	        functions: request.functions,
	        tag: request.tag,
	        webhookUrl: request.webhookUrl,
	    };
	}
	function deserializeRequest$x(jsonRequest) {
	    return {
	        id: jsonRequest.id,
	        allAddresses: jsonRequest.allAddresses,
	        demo: jsonRequest.demo,
	        description: jsonRequest.description,
	        includeChanges: jsonRequest.includeChanges,
	        includeEvents: jsonRequest.includeEvents,
	        includePayload: jsonRequest.includePayload,
	        network: jsonRequest.network.map(function (network) { return common_aptos_utils_1$2.AptosNetwork.create(network); }),
	        events: jsonRequest.events,
	        functions: jsonRequest.functions,
	        tag: jsonRequest.tag,
	        webhookUrl: jsonRequest.webhookUrl,
	    };
	}

	var updateStreamStatusAptosOperation = {};

	Object.defineProperty(updateStreamStatusAptosOperation, "__esModule", { value: true });
	updateStreamStatusAptosOperation.updateStreamStatusAptosOperation = void 0;
	updateStreamStatusAptosOperation.updateStreamStatusAptosOperation = {
	    method: 'POST',
	    name: 'updateStreamStatusAptos',
	    id: 'aptosStreamsUpdateStatus',
	    groupName: 'aptosStreams',
	    urlPathParamNames: ['id'],
	    urlPathPattern: '/streams/aptos/{id}/status',
	    bodyParamNames: ['status'],
	    bodyType: 'properties',
	    getRequestUrlParams: getRequestUrlParams$w,
	    getRequestBody: getRequestBody$i,
	    deserializeResponse: deserializeResponse$w,
	    serializeRequest: serializeRequest$w,
	    deserializeRequest: deserializeRequest$w,
	};
	// Methods
	function getRequestUrlParams$w(request) {
	    return {
	        id: request.id,
	    };
	}
	function getRequestBody$i(request) {
	    return {
	        status: request.status,
	    };
	}
	function deserializeResponse$w(jsonResponse) {
	    return jsonResponse;
	}
	function serializeRequest$w(request) {
	    return {
	        id: request.id,
	        status: request.status,
	    };
	}
	function deserializeRequest$w(jsonRequest) {
	    return {
	        id: jsonRequest.id,
	        status: jsonRequest.status,
	    };
	}

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(addAddressAptosOperation, exports);
		__exportStar(getStreamsAptosOperation, exports);
		__exportStar(getStreamAptosOperation, exports);
		__exportStar(createStreamAptosOperation, exports);
		__exportStar(deleteAddressAptosOperation, exports);
		__exportStar(deleteStreamAptosOperation, exports);
		__exportStar(getAddressesAptosOperation, exports);
		__exportStar(updateStreamAptosOperation, exports);
		__exportStar(updateStreamStatusAptosOperation, exports);
		
	} (aptosStreams));

	var evmStreams = {};

	var addAddressEvmOperation = {};

	var __assign$4 = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$4 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4.apply(this, arguments);
	};
	Object.defineProperty(addAddressEvmOperation, "__esModule", { value: true });
	addAddressEvmOperation.addAddressEvmOperation = void 0;
	var common_core_1$k = lib$9;
	var common_evm_utils_1$9 = lib$6;
	addAddressEvmOperation.addAddressEvmOperation = {
	    method: 'POST',
	    name: 'addAddressEvm',
	    id: 'AddAddressToStream',
	    groupName: 'evmStreams',
	    urlPathPattern: '/streams/evm/{id}/address',
	    bodyParamNames: ['address'],
	    urlPathParamNames: ['id'],
	    bodyType: 'properties',
	    getRequestUrlParams: getRequestUrlParams$v,
	    getRequestBody: getRequestBody$h,
	    deserializeResponse: deserializeResponse$v,
	    serializeRequest: serializeRequest$v,
	    deserializeRequest: deserializeRequest$v,
	};
	// Methods
	function getRequestUrlParams$v(request) {
	    return {
	        id: request.id,
	    };
	}
	function getRequestBody$h(request, core) {
	    return {
	        address: Array.isArray(request.address)
	            ? request.address.map(function (a) { return common_evm_utils_1$9.EvmAddress.create(a, core).checksum; })
	            : common_evm_utils_1$9.EvmAddress.create(request.address, core).checksum,
	    };
	}
	function deserializeResponse$v(jsonResponse) {
	    var data = (0, common_core_1$k.toCamelCase)(jsonResponse);
	    return __assign$4(__assign$4({}, data), { address: data.address
	            ? typeof data.address === 'string'
	                ? common_evm_utils_1$9.EvmAddress.create(data.address)
	                : data.address.map(function (address) { return common_evm_utils_1$9.EvmAddress.create(address); })
	            : undefined });
	}
	function serializeRequest$v(request, core) {
	    return {
	        id: request.id,
	        address: Array.isArray(request.address)
	            ? request.address.map(function (a) { return common_evm_utils_1$9.EvmAddress.create(a, core).checksum; })
	            : common_evm_utils_1$9.EvmAddress.create(request.address, core).checksum,
	    };
	}
	function deserializeRequest$v(jsonRequest, core) {
	    return {
	        id: jsonRequest.id,
	        address: Array.isArray(jsonRequest.address)
	            ? jsonRequest.address.map(function (a) { return common_evm_utils_1$9.EvmAddress.create(a, core); })
	            : common_evm_utils_1$9.EvmAddress.create(jsonRequest.address, core),
	    };
	}

	var getStreamsEvmOperation = {};

	Object.defineProperty(getStreamsEvmOperation, "__esModule", { value: true });
	getStreamsEvmOperation.getStreamsEvmOperation = void 0;
	var common_core_1$j = lib$9;
	var dataTypes_1$b = dataTypes$6;
	getStreamsEvmOperation.getStreamsEvmOperation = {
	    method: 'GET',
	    name: 'getStreamsEvm',
	    id: 'GetStreams',
	    groupName: 'evmStreams',
	    urlSearchParamNames: ['cursor', 'limit'],
	    urlPathPattern: '/streams/evm',
	    firstPageIndex: 0,
	    getRequestUrlParams: getRequestUrlParams$u,
	    deserializeResponse: deserializeResponse$u,
	    serializeRequest: serializeRequest$u,
	    deserializeRequest: deserializeRequest$u,
	};
	// Methods
	function getRequestUrlParams$u(request) {
	    return {
	        limit: (0, common_core_1$j.maybe)(request.limit, String),
	        cursor: request.cursor,
	    };
	}
	function deserializeResponse$u(jsonResponse, request, core) {
	    var _a;
	    return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (stream) { return dataTypes_1$b.EvmStream.create(stream, core); });
	}
	function serializeRequest$u(request) {
	    return {
	        cursor: request.cursor,
	        limit: request.limit,
	    };
	}
	function deserializeRequest$u(jsonRequest) {
	    return {
	        cursor: jsonRequest.cursor,
	        limit: jsonRequest.limit,
	    };
	}

	var getStreamEvmOperation = {};

	Object.defineProperty(getStreamEvmOperation, "__esModule", { value: true });
	getStreamEvmOperation.getStreamEvmOperation = void 0;
	var dataTypes_1$a = dataTypes$6;
	getStreamEvmOperation.getStreamEvmOperation = {
	    method: 'GET',
	    name: 'getStreamEvm',
	    id: 'GetStream',
	    groupName: 'evmStreams',
	    urlPathPattern: '/streams/evm/{id}',
	    urlPathParamNames: ['id'],
	    getRequestUrlParams: getRequestUrlParams$t,
	    deserializeResponse: deserializeResponse$t,
	    serializeRequest: serializeRequest$t,
	    deserializeRequest: deserializeRequest$t,
	};
	// Methods
	function getRequestUrlParams$t(request) {
	    return {
	        id: request.id,
	    };
	}
	function deserializeResponse$t(jsonResponse, request, core) {
	    return dataTypes_1$a.EvmStream.create(jsonResponse, core);
	}
	function serializeRequest$t(request) {
	    return {
	        id: request.id,
	    };
	}
	function deserializeRequest$t(jsonRequest) {
	    return {
	        id: jsonRequest.id,
	    };
	}

	var createStreamEvmOperation = {};

	Object.defineProperty(createStreamEvmOperation, "__esModule", { value: true });
	createStreamEvmOperation.createStreamEvmOperation = void 0;
	var common_evm_utils_1$8 = lib$6;
	var dataTypes_1$9 = dataTypes$6;
	createStreamEvmOperation.createStreamEvmOperation = {
	    method: 'PUT',
	    name: 'createStreamEvm',
	    id: 'CreateStream',
	    groupName: 'evmStreams',
	    urlPathPattern: '/streams/evm',
	    bodyParamNames: [
	        'webhookUrl',
	        'description',
	        'tag',
	        'topic0',
	        'allAddresses',
	        'includeNativeTxs',
	        'includeContractLogs',
	        'includeInternalTxs',
	        'getNativeBalances',
	        'chains',
	        'abi',
	        'advancedOptions',
	        'demo',
	        'triggers',
	    ],
	    bodyType: 'properties',
	    getRequestUrlParams: getRequestUrlParams$s,
	    getRequestBody: getRequestBody$g,
	    deserializeResponse: deserializeResponse$s,
	    serializeRequest: serializeRequest$s,
	    deserializeRequest: deserializeRequest$s,
	};
	// Methods
	function getRequestUrlParams$s() {
	    return {};
	}
	function getRequestBody$g(request, core) {
	    var _a;
	    return {
	        webhookUrl: request.webhookUrl,
	        description: request.description,
	        tag: request.tag,
	        topic0: request.topic0,
	        allAddresses: request.allAddresses,
	        includeNativeTxs: request.includeNativeTxs,
	        includeContractLogs: request.includeContractLogs,
	        includeInternalTxs: request.includeInternalTxs,
	        getNativeBalances: request.getNativeBalances,
	        chainIds: request.chains.map(function (chain) { return common_evm_utils_1$8.EvmChain.create(chain, core).apiHex; }),
	        abi: request.abi,
	        advancedOptions: request.advancedOptions,
	        demo: request.demo,
	        triggers: (_a = request.triggers) === null || _a === void 0 ? void 0 : _a.map(function (trigger) { return dataTypes_1$9.StreamTrigger.create(trigger, core).format(); }),
	    };
	}
	function deserializeResponse$s(jsonResponse, request, core) {
	    return dataTypes_1$9.EvmStream.create(jsonResponse, core);
	}
	function serializeRequest$s(request, core) {
	    var _a;
	    return {
	        webhookUrl: request.webhookUrl,
	        description: request.description,
	        tag: request.tag,
	        topic0: request.topic0,
	        allAddresses: request.allAddresses,
	        includeNativeTxs: request.includeNativeTxs,
	        includeContractLogs: request.includeContractLogs,
	        includeInternalTxs: request.includeInternalTxs,
	        chainIds: request.chains.map(function (chain) { return common_evm_utils_1$8.EvmChain.create(chain, core).apiHex; }),
	        abi: request.abi,
	        advancedOptions: request.advancedOptions,
	        demo: request.demo,
	        triggers: (_a = request.triggers) === null || _a === void 0 ? void 0 : _a.map(function (trigger) { return dataTypes_1$9.StreamTrigger.create(trigger, core).format(); }),
	    };
	}
	function deserializeRequest$s(jsonRequest, core) {
	    var _a;
	    return {
	        webhookUrl: jsonRequest.webhookUrl,
	        description: jsonRequest.description,
	        tag: jsonRequest.tag,
	        topic0: jsonRequest.topic0,
	        allAddresses: jsonRequest.allAddresses,
	        includeNativeTxs: jsonRequest.includeNativeTxs,
	        includeContractLogs: jsonRequest.includeContractLogs,
	        includeInternalTxs: jsonRequest.includeInternalTxs,
	        chains: jsonRequest.chainIds.map(function (chainId) { return common_evm_utils_1$8.EvmChain.create(chainId, core); }),
	        abi: jsonRequest.abi,
	        advancedOptions: jsonRequest.advancedOptions,
	        demo: jsonRequest.demo,
	        triggers: (_a = jsonRequest.triggers) === null || _a === void 0 ? void 0 : _a.map(function (trigger) { return dataTypes_1$9.StreamTrigger.create(trigger, core); }),
	    };
	}

	var deleteAddressEvmOperation = {};

	Object.defineProperty(deleteAddressEvmOperation, "__esModule", { value: true });
	deleteAddressEvmOperation.deleteAddressEvmOperation = void 0;
	var common_core_1$i = lib$9;
	var common_evm_utils_1$7 = lib$6;
	deleteAddressEvmOperation.deleteAddressEvmOperation = {
	    method: 'DELETE',
	    name: 'deleteAddressEvm',
	    id: 'DeleteAddressFromStream',
	    groupName: 'evmStreams',
	    urlPathParamNames: ['id'],
	    urlPathPattern: "/streams/evm/{id}/address",
	    bodyParamNames: ['address'],
	    bodyType: 'properties',
	    getRequestUrlParams: getRequestUrlParams$r,
	    getRequestBody: getRequestBody$f,
	    deserializeResponse: deserializeResponse$r,
	    serializeRequest: serializeRequest$r,
	    deserializeRequest: deserializeRequest$r,
	};
	// Methods
	function getRequestUrlParams$r(request) {
	    return {
	        id: request.id,
	    };
	}
	function getRequestBody$f(request) {
	    return {
	        address: Array.isArray(request.address)
	            ? request.address.map(function (address) { return common_evm_utils_1$7.EvmAddress.create(address).lowercase; })
	            : common_evm_utils_1$7.EvmAddress.create(request.address).lowercase,
	    };
	}
	function deserializeResponse$r(jsonResponse, request, core) {
	    var data = (0, common_core_1$i.toCamelCase)(jsonResponse);
	    return {
	        streamId: jsonResponse.streamId,
	        address: data.address
	            ? typeof data.address === 'string'
	                ? common_evm_utils_1$7.EvmAddress.create(data.address, core)
	                : data.address.map(function (address) { return common_evm_utils_1$7.EvmAddress.create(address, core); })
	            : undefined,
	    };
	}
	function serializeRequest$r(request, core) {
	    return {
	        id: request.id,
	        address: Array.isArray(request.address)
	            ? request.address.map(function (address) { return common_evm_utils_1$7.EvmAddress.create(address, core).lowercase; })
	            : common_evm_utils_1$7.EvmAddress.create(request.address, core).lowercase,
	    };
	}
	function deserializeRequest$r(jsonRequest, core) {
	    return {
	        id: jsonRequest.id,
	        address: Array.isArray(jsonRequest.address)
	            ? jsonRequest.address.map(function (address) { return common_evm_utils_1$7.EvmAddress.create(address, core); })
	            : common_evm_utils_1$7.EvmAddress.create(jsonRequest.address, core),
	    };
	}

	var deleteStreamEvmOperation = {};

	Object.defineProperty(deleteStreamEvmOperation, "__esModule", { value: true });
	deleteStreamEvmOperation.deleteStreamEvmOperation = void 0;
	var dataTypes_1$8 = dataTypes$6;
	deleteStreamEvmOperation.deleteStreamEvmOperation = {
	    method: 'DELETE',
	    name: 'deleteStreamEvm',
	    id: 'DeleteStream',
	    groupName: 'evmStreams',
	    urlPathParamNames: ['id'],
	    urlPathPattern: "/streams/evm/{id}",
	    bodyParamNames: [],
	    bodyType: 'properties',
	    getRequestUrlParams: getRequestUrlParams$q,
	    getRequestBody: getRequestBody$e,
	    deserializeResponse: deserializeResponse$q,
	    serializeRequest: serializeRequest$q,
	    deserializeRequest: deserializeRequest$q,
	};
	// Methods
	function getRequestUrlParams$q(request) {
	    return {
	        id: request.id,
	    };
	}
	function getRequestBody$e() {
	    return {};
	}
	function deserializeResponse$q(jsonResponse, request, core) {
	    return dataTypes_1$8.EvmStream.create(jsonResponse, core);
	}
	function serializeRequest$q(request) {
	    return {
	        id: request.id,
	    };
	}
	function deserializeRequest$q(jsonRequest) {
	    return {
	        id: jsonRequest.id,
	    };
	}

	var getAddressesEvmOperation = {};

	var __assign$3 = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$3 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3.apply(this, arguments);
	};
	Object.defineProperty(getAddressesEvmOperation, "__esModule", { value: true });
	getAddressesEvmOperation.getAddressesEvmOperation = void 0;
	var common_core_1$h = lib$9;
	var common_evm_utils_1$6 = lib$6;
	getAddressesEvmOperation.getAddressesEvmOperation = {
	    method: 'GET',
	    name: 'getAddressesEvm',
	    id: 'GetAddresses',
	    groupName: 'evmStreams',
	    urlPathParamNames: ['id'],
	    urlSearchParamNames: ['cursor', 'limit'],
	    urlPathPattern: '/streams/evm/{id}/address',
	    firstPageIndex: 0,
	    getRequestUrlParams: getRequestUrlParams$p,
	    deserializeResponse: deserializeResponse$p,
	    serializeRequest: serializeRequest$p,
	    deserializeRequest: deserializeRequest$p,
	};
	// Methods
	function getRequestUrlParams$p(request) {
	    return {
	        id: request.id,
	        limit: (0, common_core_1$h.maybe)(request.limit, String),
	        cursor: request.cursor,
	    };
	}
	function deserializeResponse$p(jsonResponse, request, core) {
	    var _a;
	    return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (stream) { return (__assign$3(__assign$3({}, stream), { address: stream.address ? common_evm_utils_1$6.EvmAddress.create(stream.address, core) : undefined })); });
	}
	function serializeRequest$p(request) {
	    return {
	        id: request.id,
	        limit: request.limit,
	        cursor: request.cursor,
	    };
	}
	function deserializeRequest$p(jsonRequest) {
	    return {
	        id: jsonRequest.id,
	        limit: jsonRequest.limit,
	        cursor: jsonRequest.cursor,
	    };
	}

	var updateStreamEvmOperation = {};

	Object.defineProperty(updateStreamEvmOperation, "__esModule", { value: true });
	updateStreamEvmOperation.updateStreamEvmOperation = void 0;
	var common_evm_utils_1$5 = lib$6;
	var dataTypes_1$7 = dataTypes$6;
	updateStreamEvmOperation.updateStreamEvmOperation = {
	    method: 'POST',
	    name: 'updateStreamEvm',
	    id: 'UpdateStream',
	    groupName: 'evmStreams',
	    urlPathParamNames: ['id'],
	    urlPathPattern: '/streams/evm/{id}',
	    bodyParamNames: [
	        'webhookUrl',
	        'description',
	        'tag',
	        'topic0',
	        'allAddresses',
	        'includeNativeTxs',
	        'includeContractLogs',
	        'includeInternalTxs',
	        'getNativeBalances',
	        'chains',
	        'abi',
	        'advancedOptions',
	        'demo',
	        'triggers',
	    ],
	    bodyType: 'properties',
	    getRequestUrlParams: getRequestUrlParams$o,
	    getRequestBody: getRequestBody$d,
	    deserializeResponse: deserializeResponse$o,
	    serializeRequest: serializeRequest$o,
	    deserializeRequest: deserializeRequest$o,
	};
	// Methods
	function getRequestUrlParams$o(request) {
	    return {
	        id: request.id,
	    };
	}
	function getRequestBody$d(request, core) {
	    var _a;
	    return {
	        webhookUrl: request.webhookUrl,
	        description: request.description,
	        tag: request.tag,
	        topic0: request.topic0,
	        allAddresses: request.allAddresses,
	        includeNativeTxs: request.includeNativeTxs,
	        includeContractLogs: request.includeContractLogs,
	        includeInternalTxs: request.includeInternalTxs,
	        getNativeBalances: request.getNativeBalances,
	        chainIds: request.chains.map(function (chain) { return common_evm_utils_1$5.EvmChain.create(chain, core).apiHex; }),
	        abi: request.abi,
	        advancedOptions: request.advancedOptions,
	        demo: request.demo,
	        triggers: (_a = request.triggers) === null || _a === void 0 ? void 0 : _a.map(function (trigger) { return dataTypes_1$7.StreamTrigger.create(trigger, core); }),
	    };
	}
	function deserializeResponse$o(jsonResponse, request, core) {
	    return dataTypes_1$7.EvmStream.create(jsonResponse, core);
	}
	function serializeRequest$o(request, core) {
	    var _a;
	    return {
	        id: request.id,
	        webhookUrl: request.webhookUrl,
	        description: request.description,
	        tag: request.tag,
	        topic0: request.topic0,
	        allAddresses: request.allAddresses,
	        includeNativeTxs: request.includeNativeTxs,
	        includeContractLogs: request.includeContractLogs,
	        includeInternalTxs: request.includeInternalTxs,
	        chainIds: request.chains.map(function (chain) { return common_evm_utils_1$5.EvmChain.create(chain, core).apiHex; }),
	        abi: request.abi,
	        advancedOptions: request.advancedOptions,
	        demo: request.demo,
	        triggers: (_a = request.triggers) === null || _a === void 0 ? void 0 : _a.map(function (trigger) { return dataTypes_1$7.StreamTrigger.create(trigger, core).format(); }),
	    };
	}
	function deserializeRequest$o(jsonRequest, core) {
	    var _a;
	    return {
	        id: jsonRequest.id,
	        webhookUrl: jsonRequest.webhookUrl,
	        description: jsonRequest.description,
	        tag: jsonRequest.tag,
	        topic0: jsonRequest.topic0,
	        allAddresses: jsonRequest.allAddresses,
	        includeNativeTxs: jsonRequest.includeNativeTxs,
	        includeContractLogs: jsonRequest.includeContractLogs,
	        includeInternalTxs: jsonRequest.includeInternalTxs,
	        chains: jsonRequest.chainIds.map(function (chainId) { return common_evm_utils_1$5.EvmChain.create(chainId, core); }),
	        abi: jsonRequest.abi,
	        advancedOptions: jsonRequest.advancedOptions,
	        demo: jsonRequest.demo,
	        triggers: (_a = jsonRequest.triggers) === null || _a === void 0 ? void 0 : _a.map(function (trigger) { return dataTypes_1$7.StreamTrigger.create(trigger, core); }),
	    };
	}

	var updateStreamStatusEvmOperation = {};

	Object.defineProperty(updateStreamStatusEvmOperation, "__esModule", { value: true });
	updateStreamStatusEvmOperation.updateStreamStatusEvmOperation = void 0;
	updateStreamStatusEvmOperation.updateStreamStatusEvmOperation = {
	    method: 'POST',
	    name: 'updateStreamStatusEvm',
	    id: 'UpdateStreamStatus',
	    groupName: 'evmStreams',
	    urlPathParamNames: ['id'],
	    urlPathPattern: '/streams/evm/{id}/status',
	    bodyParamNames: ['status'],
	    bodyType: 'properties',
	    getRequestUrlParams: getRequestUrlParams$n,
	    getRequestBody: getRequestBody$c,
	    deserializeResponse: deserializeResponse$n,
	    serializeRequest: serializeRequest$n,
	    deserializeRequest: deserializeRequest$n,
	};
	// Methods
	function getRequestUrlParams$n(request) {
	    return {
	        id: request.id,
	    };
	}
	function getRequestBody$c(request) {
	    return {
	        status: request.status,
	    };
	}
	function deserializeResponse$n(jsonResponse) {
	    return jsonResponse;
	}
	function serializeRequest$n(request) {
	    return {
	        id: request.id,
	        status: request.status,
	    };
	}
	function deserializeRequest$n(jsonRequest) {
	    return {
	        id: jsonRequest.id,
	        status: jsonRequest.status,
	    };
	}

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(addAddressEvmOperation, exports);
		__exportStar(getStreamsEvmOperation, exports);
		__exportStar(getStreamEvmOperation, exports);
		__exportStar(createStreamEvmOperation, exports);
		__exportStar(deleteAddressEvmOperation, exports);
		__exportStar(deleteStreamEvmOperation, exports);
		__exportStar(getAddressesEvmOperation, exports);
		__exportStar(updateStreamEvmOperation, exports);
		__exportStar(updateStreamStatusEvmOperation, exports);
		
	} (evmStreams));

	var history = {};

	var getHistoryOperation = {};

	Object.defineProperty(getHistoryOperation, "__esModule", { value: true });
	getHistoryOperation.getHistoryOperation = void 0;
	var common_core_1$g = lib$9;
	getHistoryOperation.getHistoryOperation = {
	    method: 'GET',
	    name: 'getHistory',
	    id: 'GetHistory',
	    groupName: 'history',
	    urlPathPattern: '/history',
	    urlSearchParamNames: ['excludePayload', 'limit', 'cursor'],
	    firstPageIndex: 0,
	    getRequestUrlParams: getRequestUrlParams$m,
	    deserializeResponse: deserializeResponse$m,
	    serializeRequest: serializeRequest$m,
	    deserializeRequest: deserializeRequest$m,
	};
	// Methods
	function getRequestUrlParams$m(request) {
	    return {
	        excludePayload: (0, common_core_1$g.maybe)(request.excludePayload, String),
	        limit: (0, common_core_1$g.maybe)(request.limit, String),
	        cursor: request.cursor,
	    };
	}
	function deserializeResponse$m(jsonResponse) {
	    var _a;
	    return (_a = jsonResponse.result) !== null && _a !== void 0 ? _a : [];
	}
	function serializeRequest$m(request) {
	    return request;
	}
	function deserializeRequest$m(jsonRequest) {
	    return jsonRequest;
	}

	var replayHistoryOperation = {};

	Object.defineProperty(replayHistoryOperation, "__esModule", { value: true });
	replayHistoryOperation.replayHistoryOperation = void 0;
	replayHistoryOperation.replayHistoryOperation = {
	    method: 'POST',
	    name: 'replayHistory',
	    id: 'ReplayHistory',
	    groupName: 'history',
	    urlPathPattern: '/history/replay/{streamId}/{id}',
	    urlPathParamNames: ['streamId', 'id'],
	    bodyParamNames: [],
	    bodyType: 'properties',
	    getRequestUrlParams: getRequestUrlParams$l,
	    getRequestBody: getRequestBody$b,
	    deserializeResponse: deserializeResponse$l,
	    serializeRequest: serializeRequest$l,
	    deserializeRequest: deserializeRequest$l,
	};
	// Methods
	function getRequestUrlParams$l(request) {
	    return {
	        streamId: request.streamId,
	        id: request.id,
	    };
	}
	function getRequestBody$b() {
	    return {};
	}
	function deserializeResponse$l(jsonResponse) {
	    return jsonResponse;
	}
	function serializeRequest$l(request) {
	    return {
	        streamId: request.streamId,
	        id: request.id,
	    };
	}
	function deserializeRequest$l(jsonRequest) {
	    return {
	        streamId: jsonRequest.streamId,
	        id: jsonRequest.id,
	    };
	}

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(getHistoryOperation, exports);
		__exportStar(replayHistoryOperation, exports);
		
	} (history));

	var project = {};

	var getSettingsOperation = {};

	Object.defineProperty(getSettingsOperation, "__esModule", { value: true });
	getSettingsOperation.getSettingsOperation = void 0;
	getSettingsOperation.getSettingsOperation = {
	    method: 'GET',
	    name: 'getSettings',
	    id: 'GetSettings',
	    groupName: 'project',
	    urlPathPattern: '/settings',
	    getRequestUrlParams: getRequestUrlParams$k,
	    deserializeResponse: deserializeResponse$k,
	    serializeRequest: serializeRequest$k,
	    deserializeRequest: deserializeRequest$k,
	};
	// Methods
	function getRequestUrlParams$k() {
	    return {};
	}
	function deserializeResponse$k(jsonResponse) {
	    return jsonResponse;
	}
	function serializeRequest$k() {
	    return undefined;
	}
	function deserializeRequest$k() {
	    return {};
	}

	var setSettingsOperation = {};

	Object.defineProperty(setSettingsOperation, "__esModule", { value: true });
	setSettingsOperation.setSettingsOperation = void 0;
	setSettingsOperation.setSettingsOperation = {
	    method: 'POST',
	    name: 'setSettings',
	    id: 'SetSettings',
	    groupName: 'project',
	    urlPathPattern: '/settings',
	    bodyParamNames: ['region'],
	    bodyType: 'properties',
	    getRequestUrlParams: getRequestUrlParams$j,
	    getRequestBody: getRequestBody$a,
	    deserializeResponse: deserializeResponse$j,
	    serializeRequest: serializeRequest$j,
	    deserializeRequest: deserializeRequest$j,
	};
	// Methods
	function getRequestUrlParams$j() {
	    return {};
	}
	function getRequestBody$a(request) {
	    return {
	        region: request.region,
	    };
	}
	function deserializeResponse$j(jsonResponse) {
	    return jsonResponse;
	}
	function serializeRequest$j(request) {
	    return {
	        region: request.region,
	    };
	}
	function deserializeRequest$j(jsonRequest) {
	    return {
	        region: jsonRequest.region,
	    };
	}

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(getSettingsOperation, exports);
		__exportStar(setSettingsOperation, exports);
		
	} (project));

	var stats = {};

	var getStatsOperation = {};

	Object.defineProperty(getStatsOperation, "__esModule", { value: true });
	getStatsOperation.getStatsOperation = void 0;
	getStatsOperation.getStatsOperation = {
	    method: 'GET',
	    name: 'getStats',
	    id: 'getStats',
	    groupName: 'streams',
	    urlPathPattern: '/stats',
	    getRequestUrlParams: getRequestUrlParams$i,
	    deserializeResponse: deserializeResponse$i,
	    serializeRequest: serializeRequest$i,
	    deserializeRequest: deserializeRequest$i,
	};
	// Methods
	function getRequestUrlParams$i() {
	    return {};
	}
	function deserializeResponse$i(jsonResponse) {
	    return jsonResponse;
	}
	function serializeRequest$i() {
	    return undefined;
	}
	function deserializeRequest$i() {
	    return {};
	}

	var getStatsByIdOperation = {};

	Object.defineProperty(getStatsByIdOperation, "__esModule", { value: true });
	getStatsByIdOperation.getStatsByIdOperation = void 0;
	getStatsByIdOperation.getStatsByIdOperation = {
	    method: 'GET',
	    name: 'getStatsById',
	    id: 'GetStatsByStreamId',
	    groupName: 'stats',
	    urlPathPattern: '/stats/{streamId}',
	    urlPathParamNames: ['streamId'],
	    getRequestUrlParams: getRequestUrlParams$h,
	    deserializeResponse: deserializeResponse$h,
	    serializeRequest: serializeRequest$h,
	    deserializeRequest: deserializeRequest$h,
	};
	// Methods
	function getRequestUrlParams$h(request) {
	    return {
	        streamId: request.streamId,
	    };
	}
	function deserializeResponse$h(jsonResponse) {
	    return jsonResponse;
	}
	function serializeRequest$h(request) {
	    return request;
	}
	function deserializeRequest$h(jsonRequest) {
	    return jsonRequest;
	}

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(getStatsOperation, exports);
		__exportStar(getStatsByIdOperation, exports);
		
	} (stats));

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(aptosStreams, exports);
		__exportStar(evmStreams, exports);
		__exportStar(history, exports);
		__exportStar(project, exports);
		__exportStar(stats, exports);
		
	} (operations$4));

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		// Export data types
		__exportStar(dataTypes$6, exports);
		__exportStar(operations$4, exports);
		
	} (lib$8));

	var IncorrectNetworkError$1 = {};

	var StreamNetwork = {};

	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.StreamNetwork = void 0;
		(function (StreamNetwork) {
		    StreamNetwork["APTOS"] = "aptos";
		    StreamNetwork["EVM"] = "evm";
		})(exports.StreamNetwork || (exports.StreamNetwork = {}));
		
	} (StreamNetwork));

	var __extends$6 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(IncorrectNetworkError$1, "__esModule", { value: true });
	IncorrectNetworkError$1.IncorrectNetworkError = void 0;
	var common_core_1$f = lib$9;
	var StreamNetwork_1$9 = StreamNetwork;
	var IncorrectNetworkError = /** @class */ (function (_super) {
	    __extends$6(IncorrectNetworkError, _super);
	    function IncorrectNetworkError(network) {
	        return _super.call(this, {
	            code: common_core_1$f.StreamErrorCode.INCORRECT_NETWORK,
	            message: "Incorrect network provided. Got \"".concat(network, "\", Valid values are: ").concat(Object.values(StreamNetwork_1$9.StreamNetwork)
	                .map(function (value) { return "\"".concat(value, "\""); })
	                .join(', ')),
	        }) || this;
	    }
	    return IncorrectNetworkError;
	}(common_core_1$f.MoralisStreamError));
	IncorrectNetworkError$1.IncorrectNetworkError = IncorrectNetworkError;

	var __rest$b = (commonjsGlobal && commonjsGlobal.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	Object.defineProperty(create, "__esModule", { value: true });
	create.makeCreateStream = void 0;
	var api_utils_1$c = lib$a;
	var common_streams_utils_1$9 = lib$8;
	var IncorrectNetworkError_1$8 = IncorrectNetworkError$1;
	var StreamNetwork_1$8 = StreamNetwork;
	var makeCreateAptosStream = function (core, baseUrl, _a) {
	    _a.networkType; var options = __rest$b(_a, ["networkType"]);
	    return new api_utils_1$c.OperationResolver(common_streams_utils_1$9.createStreamAptosOperation, baseUrl, core).fetch(options);
	};
	var makeCreateEvmStream = function (core, baseUrl, _a) {
	    _a.networkType; var options = __rest$b(_a, ["networkType"]);
	    return new api_utils_1$c.OperationResolver(common_streams_utils_1$9.createStreamEvmOperation, baseUrl, core).fetch(options);
	};
	var makeCreateStream = function (core, baseUrl) {
	    return (function (createStreamOptions) {
	        switch (createStreamOptions.networkType) {
	            case StreamNetwork_1$8.StreamNetwork.APTOS:
	                return makeCreateAptosStream(core, baseUrl, createStreamOptions);
	            case StreamNetwork_1$8.StreamNetwork.EVM:
	                return makeCreateEvmStream(core, baseUrl, createStreamOptions);
	            default:
	                if (createStreamOptions.networkType === undefined) {
	                    return makeCreateEvmStream(core, baseUrl, createStreamOptions);
	                }
	                throw new IncorrectNetworkError_1$8.IncorrectNetworkError(createStreamOptions.networkType);
	        }
	    });
	};
	create.makeCreateStream = makeCreateStream;

	var update = {};

	var __rest$a = (commonjsGlobal && commonjsGlobal.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	Object.defineProperty(update, "__esModule", { value: true });
	update.makeUpdateStream = void 0;
	var api_utils_1$b = lib$a;
	var StreamNetwork_1$7 = StreamNetwork;
	var IncorrectNetworkError_1$7 = IncorrectNetworkError$1;
	var common_streams_utils_1$8 = lib$8;
	var makeUpdateAptosStream = function (core, baseUrl, _a) {
	    _a.networkType; var options = __rest$a(_a, ["networkType"]);
	    return new api_utils_1$b.OperationResolver(common_streams_utils_1$8.updateStreamAptosOperation, baseUrl, core).fetch(options);
	};
	var makeUpdateEvmStream = function (core, baseUrl, _a) {
	    _a.networkType; var options = __rest$a(_a, ["networkType"]);
	    return new api_utils_1$b.OperationResolver(common_streams_utils_1$8.updateStreamEvmOperation, baseUrl, core).fetch(options);
	};
	var makeUpdateStream = function (core, baseUrl) {
	    return (function (updateStreamOptions) {
	        switch (updateStreamOptions.networkType) {
	            case StreamNetwork_1$7.StreamNetwork.APTOS:
	                return makeUpdateAptosStream(core, baseUrl, updateStreamOptions);
	            case StreamNetwork_1$7.StreamNetwork.EVM:
	                return makeUpdateEvmStream(core, baseUrl, updateStreamOptions);
	            default:
	                if (updateStreamOptions.networkType === undefined) {
	                    return makeUpdateEvmStream(core, baseUrl, updateStreamOptions);
	                }
	                throw new IncorrectNetworkError_1$7.IncorrectNetworkError(updateStreamOptions.networkType);
	        }
	    });
	};
	update.makeUpdateStream = makeUpdateStream;

	var _delete = {};

	var __rest$9 = (commonjsGlobal && commonjsGlobal.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	Object.defineProperty(_delete, "__esModule", { value: true });
	_delete.makeDeleteStream = void 0;
	var api_utils_1$a = lib$a;
	var StreamNetwork_1$6 = StreamNetwork;
	var IncorrectNetworkError_1$6 = IncorrectNetworkError$1;
	var common_streams_utils_1$7 = lib$8;
	var makeDeleteAptosStream = function (core, baseUrl, _a) {
	    _a.networkType; var options = __rest$9(_a, ["networkType"]);
	    return new api_utils_1$a.OperationResolver(common_streams_utils_1$7.deleteStreamAptosOperation, baseUrl, core).fetch(options);
	};
	var makeDeleteEvmStream = function (core, baseUrl, _a) {
	    _a.networkType; var options = __rest$9(_a, ["networkType"]);
	    return new api_utils_1$a.OperationResolver(common_streams_utils_1$7.deleteStreamEvmOperation, baseUrl, core).fetch(options);
	};
	var makeDeleteStream = function (core, baseUrl) {
	    return (function (deleteStreamOptions) {
	        switch (deleteStreamOptions.networkType) {
	            case StreamNetwork_1$6.StreamNetwork.APTOS:
	                return makeDeleteAptosStream(core, baseUrl, deleteStreamOptions);
	            case StreamNetwork_1$6.StreamNetwork.EVM:
	                return makeDeleteEvmStream(core, baseUrl, deleteStreamOptions);
	            default:
	                if (deleteStreamOptions.networkType === undefined) {
	                    return makeDeleteEvmStream(core, baseUrl, deleteStreamOptions);
	                }
	                throw new IncorrectNetworkError_1$6.IncorrectNetworkError(deleteStreamOptions.networkType);
	        }
	    });
	};
	_delete.makeDeleteStream = makeDeleteStream;

	var getAll = {};

	var __rest$8 = (commonjsGlobal && commonjsGlobal.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	Object.defineProperty(getAll, "__esModule", { value: true });
	getAll.makeGetStreams = void 0;
	var api_utils_1$9 = lib$a;
	var common_streams_utils_1$6 = lib$8;
	var StreamNetwork_1$5 = StreamNetwork;
	var IncorrectNetworkError_1$5 = IncorrectNetworkError$1;
	var makeGetAptosStream$1 = function (core, baseUrl, _a) {
	    _a.networkType; var options = __rest$8(_a, ["networkType"]);
	    return new api_utils_1$9.PaginatedOperationResolver(common_streams_utils_1$6.getStreamsAptosOperation, baseUrl, core).fetch(options);
	};
	var makeGetEvmStream$1 = function (core, baseUrl, _a) {
	    _a.networkType; var options = __rest$8(_a, ["networkType"]);
	    return new api_utils_1$9.PaginatedOperationResolver(common_streams_utils_1$6.getStreamsEvmOperation, baseUrl, core).fetch(options);
	};
	var makeGetStreams = function (core, baseUrl) {
	    return (function (getStreamsOptions) {
	        switch (getStreamsOptions.networkType) {
	            case StreamNetwork_1$5.StreamNetwork.APTOS:
	                return makeGetAptosStream$1(core, baseUrl, getStreamsOptions);
	            case StreamNetwork_1$5.StreamNetwork.EVM:
	                return makeGetEvmStream$1(core, baseUrl, getStreamsOptions);
	            default:
	                if (getStreamsOptions.networkType === undefined) {
	                    return makeGetEvmStream$1(core, baseUrl, getStreamsOptions);
	                }
	                throw new IncorrectNetworkError_1$5.IncorrectNetworkError(getStreamsOptions.networkType);
	        }
	    });
	};
	getAll.makeGetStreams = makeGetStreams;

	var verifySignature = {};

	var lookup = [];
	var revLookup = [];
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
	var inited = false;
	function init () {
	  inited = true;
	  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
	  for (var i = 0, len = code.length; i < len; ++i) {
	    lookup[i] = code[i];
	    revLookup[code.charCodeAt(i)] = i;
	  }

	  revLookup['-'.charCodeAt(0)] = 62;
	  revLookup['_'.charCodeAt(0)] = 63;
	}

	function toByteArray (b64) {
	  if (!inited) {
	    init();
	  }
	  var i, j, l, tmp, placeHolders, arr;
	  var len = b64.length;

	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4')
	  }

	  // the number of equal signs (place holders)
	  // if there are two placeholders, than the two characters before it
	  // represent one byte
	  // if there is only one, then the three characters before it represent 2 bytes
	  // this is just a cheap hack to not do indexOf twice
	  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

	  // base64 is 4/3 + up to two characters of the original data
	  arr = new Arr(len * 3 / 4 - placeHolders);

	  // if there are placeholders, only get up to the last complete 4 chars
	  l = placeHolders > 0 ? len - 4 : len;

	  var L = 0;

	  for (i = 0, j = 0; i < l; i += 4, j += 3) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)];
	    arr[L++] = (tmp >> 16) & 0xFF;
	    arr[L++] = (tmp >> 8) & 0xFF;
	    arr[L++] = tmp & 0xFF;
	  }

	  if (placeHolders === 2) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);
	    arr[L++] = tmp & 0xFF;
	  } else if (placeHolders === 1) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);
	    arr[L++] = (tmp >> 8) & 0xFF;
	    arr[L++] = tmp & 0xFF;
	  }

	  return arr
	}

	function tripletToBase64 (num) {
	  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
	}

	function encodeChunk (uint8, start, end) {
	  var tmp;
	  var output = [];
	  for (var i = start; i < end; i += 3) {
	    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
	    output.push(tripletToBase64(tmp));
	  }
	  return output.join('')
	}

	function fromByteArray (uint8) {
	  if (!inited) {
	    init();
	  }
	  var tmp;
	  var len = uint8.length;
	  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
	  var output = '';
	  var parts = [];
	  var maxChunkLength = 16383; // must be multiple of 3

	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
	  }

	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1];
	    output += lookup[tmp >> 2];
	    output += lookup[(tmp << 4) & 0x3F];
	    output += '==';
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);
	    output += lookup[tmp >> 10];
	    output += lookup[(tmp >> 4) & 0x3F];
	    output += lookup[(tmp << 2) & 0x3F];
	    output += '=';
	  }

	  parts.push(output);

	  return parts.join('')
	}

	function read (buffer, offset, isLE, mLen, nBytes) {
	  var e, m;
	  var eLen = nBytes * 8 - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var nBits = -7;
	  var i = isLE ? (nBytes - 1) : 0;
	  var d = isLE ? -1 : 1;
	  var s = buffer[offset + i];

	  i += d;

	  e = s & ((1 << (-nBits)) - 1);
	  s >>= (-nBits);
	  nBits += eLen;
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1);
	  e >>= (-nBits);
	  nBits += mLen;
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias;
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen);
	    e = e - eBias;
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}

	function write (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c;
	  var eLen = nBytes * 8 - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
	  var i = isLE ? 0 : (nBytes - 1);
	  var d = isLE ? 1 : -1;
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

	  value = Math.abs(value);

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0;
	    e = eMax;
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2);
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--;
	      c *= 2;
	    }
	    if (e + eBias >= 1) {
	      value += rt / c;
	    } else {
	      value += rt * Math.pow(2, 1 - eBias);
	    }
	    if (value * c >= 2) {
	      e++;
	      c /= 2;
	    }

	    if (e + eBias >= eMax) {
	      m = 0;
	      e = eMax;
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen);
	      e = e + eBias;
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
	      e = 0;
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m;
	  eLen += mLen;
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128;
	}

	var toString = {}.toString;

	var isArray$1 = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};

	var INSPECT_MAX_BYTES = 50;

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.

	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer$d.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined
	  ? global$1.TYPED_ARRAY_SUPPORT
	  : true;

	/*
	 * Export kMaxLength after typed array support is determined.
	 */
	kMaxLength();

	function kMaxLength () {
	  return Buffer$d.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}

	function createBuffer (that, length) {
	  if (kMaxLength() < length) {
	    throw new RangeError('Invalid typed array length')
	  }
	  if (Buffer$d.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = new Uint8Array(length);
	    that.__proto__ = Buffer$d.prototype;
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    if (that === null) {
	      that = new Buffer$d(length);
	    }
	    that.length = length;
	  }

	  return that
	}

	/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */

	function Buffer$d (arg, encodingOrOffset, length) {
	  if (!Buffer$d.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer$d)) {
	    return new Buffer$d(arg, encodingOrOffset, length)
	  }

	  // Common case.
	  if (typeof arg === 'number') {
	    if (typeof encodingOrOffset === 'string') {
	      throw new Error(
	        'If encoding is specified then the first argument must be a string'
	      )
	    }
	    return allocUnsafe(this, arg)
	  }
	  return from(this, arg, encodingOrOffset, length)
	}

	Buffer$d.poolSize = 8192; // not used by this implementation

	// TODO: Legacy, not needed anymore. Remove in next major version.
	Buffer$d._augment = function (arr) {
	  arr.__proto__ = Buffer$d.prototype;
	  return arr
	};

	function from (that, value, encodingOrOffset, length) {
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number')
	  }

	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    return fromArrayBuffer(that, value, encodingOrOffset, length)
	  }

	  if (typeof value === 'string') {
	    return fromString(that, value, encodingOrOffset)
	  }

	  return fromObject(that, value)
	}

	/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/
	Buffer$d.from = function (value, encodingOrOffset, length) {
	  return from(null, value, encodingOrOffset, length)
	};

	if (Buffer$d.TYPED_ARRAY_SUPPORT) {
	  Buffer$d.prototype.__proto__ = Uint8Array.prototype;
	  Buffer$d.__proto__ = Uint8Array;
	  if (typeof Symbol !== 'undefined' && Symbol.species &&
	      Buffer$d[Symbol.species] === Buffer$d) ;
	}

	function assertSize (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be a number')
	  } else if (size < 0) {
	    throw new RangeError('"size" argument must not be negative')
	  }
	}

	function alloc (that, size, fill, encoding) {
	  assertSize(size);
	  if (size <= 0) {
	    return createBuffer(that, size)
	  }
	  if (fill !== undefined) {
	    // Only pay attention to encoding if it's a string. This
	    // prevents accidentally sending in a number that would
	    // be interpretted as a start offset.
	    return typeof encoding === 'string'
	      ? createBuffer(that, size).fill(fill, encoding)
	      : createBuffer(that, size).fill(fill)
	  }
	  return createBuffer(that, size)
	}

	/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/
	Buffer$d.alloc = function (size, fill, encoding) {
	  return alloc(null, size, fill, encoding)
	};

	function allocUnsafe (that, size) {
	  assertSize(size);
	  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
	  if (!Buffer$d.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < size; ++i) {
	      that[i] = 0;
	    }
	  }
	  return that
	}

	/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */
	Buffer$d.allocUnsafe = function (size) {
	  return allocUnsafe(null, size)
	};
	/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */
	Buffer$d.allocUnsafeSlow = function (size) {
	  return allocUnsafe(null, size)
	};

	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
	    encoding = 'utf8';
	  }

	  if (!Buffer$d.isEncoding(encoding)) {
	    throw new TypeError('"encoding" must be a valid string encoding')
	  }

	  var length = byteLength(string, encoding) | 0;
	  that = createBuffer(that, length);

	  var actual = that.write(string, encoding);

	  if (actual !== length) {
	    // Writing a hex string, for example, that contains invalid characters will
	    // cause everything after the first invalid character to be ignored. (e.g.
	    // 'abxxcd' will be treated as 'ab')
	    that = that.slice(0, actual);
	  }

	  return that
	}

	function fromArrayLike (that, array) {
	  var length = array.length < 0 ? 0 : checked(array.length) | 0;
	  that = createBuffer(that, length);
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255;
	  }
	  return that
	}

	function fromArrayBuffer (that, array, byteOffset, length) {
	  array.byteLength; // this throws if `array` is not a valid ArrayBuffer

	  if (byteOffset < 0 || array.byteLength < byteOffset) {
	    throw new RangeError('\'offset\' is out of bounds')
	  }

	  if (array.byteLength < byteOffset + (length || 0)) {
	    throw new RangeError('\'length\' is out of bounds')
	  }

	  if (byteOffset === undefined && length === undefined) {
	    array = new Uint8Array(array);
	  } else if (length === undefined) {
	    array = new Uint8Array(array, byteOffset);
	  } else {
	    array = new Uint8Array(array, byteOffset, length);
	  }

	  if (Buffer$d.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = array;
	    that.__proto__ = Buffer$d.prototype;
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromArrayLike(that, array);
	  }
	  return that
	}

	function fromObject (that, obj) {
	  if (internalIsBuffer(obj)) {
	    var len = checked(obj.length) | 0;
	    that = createBuffer(that, len);

	    if (that.length === 0) {
	      return that
	    }

	    obj.copy(that, 0, 0, len);
	    return that
	  }

	  if (obj) {
	    if ((typeof ArrayBuffer !== 'undefined' &&
	        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
	      if (typeof obj.length !== 'number' || isnan(obj.length)) {
	        return createBuffer(that, 0)
	      }
	      return fromArrayLike(that, obj)
	    }

	    if (obj.type === 'Buffer' && isArray$1(obj.data)) {
	      return fromArrayLike(that, obj.data)
	    }
	  }

	  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
	}

	function checked (length) {
	  // Note: cannot use `length < kMaxLength()` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}
	Buffer$d.isBuffer = isBuffer$1;
	function internalIsBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer$d.compare = function compare (a, b) {
	  if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }

	  if (a === b) return 0

	  var x = a.length;
	  var y = b.length;

	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i];
	      y = b[i];
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	};

	Buffer$d.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'latin1':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	};

	Buffer$d.concat = function concat (list, length) {
	  if (!isArray$1(list)) {
	    throw new TypeError('"list" argument must be an Array of Buffers')
	  }

	  if (list.length === 0) {
	    return Buffer$d.alloc(0)
	  }

	  var i;
	  if (length === undefined) {
	    length = 0;
	    for (i = 0; i < list.length; ++i) {
	      length += list[i].length;
	    }
	  }

	  var buffer = Buffer$d.allocUnsafe(length);
	  var pos = 0;
	  for (i = 0; i < list.length; ++i) {
	    var buf = list[i];
	    if (!internalIsBuffer(buf)) {
	      throw new TypeError('"list" argument must be an Array of Buffers')
	    }
	    buf.copy(buffer, pos);
	    pos += buf.length;
	  }
	  return buffer
	};

	function byteLength (string, encoding) {
	  if (internalIsBuffer(string)) {
	    return string.length
	  }
	  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
	      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
	    return string.byteLength
	  }
	  if (typeof string !== 'string') {
	    string = '' + string;
	  }

	  var len = string.length;
	  if (len === 0) return 0

	  // Use a for loop to avoid recursion
	  var loweredCase = false;
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return len
	      case 'utf8':
	      case 'utf-8':
	      case undefined:
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase();
	        loweredCase = true;
	    }
	  }
	}
	Buffer$d.byteLength = byteLength;

	function slowToString (encoding, start, end) {
	  var loweredCase = false;

	  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
	  // property of a typed array.

	  // This behaves neither like String nor Uint8Array in that we set start/end
	  // to their upper/lower bounds if the value passed is out of range.
	  // undefined is handled specially as per ECMA-262 6th Edition,
	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
	  if (start === undefined || start < 0) {
	    start = 0;
	  }
	  // Return early if start > this.length. Done here to prevent potential uint32
	  // coercion fail below.
	  if (start > this.length) {
	    return ''
	  }

	  if (end === undefined || end > this.length) {
	    end = this.length;
	  }

	  if (end <= 0) {
	    return ''
	  }

	  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
	  end >>>= 0;
	  start >>>= 0;

	  if (end <= start) {
	    return ''
	  }

	  if (!encoding) encoding = 'utf8';

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'latin1':
	      case 'binary':
	        return latin1Slice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase();
	        loweredCase = true;
	    }
	  }
	}

	// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
	// Buffer instances.
	Buffer$d.prototype._isBuffer = true;

	function swap (b, n, m) {
	  var i = b[n];
	  b[n] = b[m];
	  b[m] = i;
	}

	Buffer$d.prototype.swap16 = function swap16 () {
	  var len = this.length;
	  if (len % 2 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 16-bits')
	  }
	  for (var i = 0; i < len; i += 2) {
	    swap(this, i, i + 1);
	  }
	  return this
	};

	Buffer$d.prototype.swap32 = function swap32 () {
	  var len = this.length;
	  if (len % 4 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 32-bits')
	  }
	  for (var i = 0; i < len; i += 4) {
	    swap(this, i, i + 3);
	    swap(this, i + 1, i + 2);
	  }
	  return this
	};

	Buffer$d.prototype.swap64 = function swap64 () {
	  var len = this.length;
	  if (len % 8 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 64-bits')
	  }
	  for (var i = 0; i < len; i += 8) {
	    swap(this, i, i + 7);
	    swap(this, i + 1, i + 6);
	    swap(this, i + 2, i + 5);
	    swap(this, i + 3, i + 4);
	  }
	  return this
	};

	Buffer$d.prototype.toString = function toString () {
	  var length = this.length | 0;
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	};

	Buffer$d.prototype.equals = function equals (b) {
	  if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer$d.compare(this, b) === 0
	};

	Buffer$d.prototype.inspect = function inspect () {
	  var str = '';
	  var max = INSPECT_MAX_BYTES;
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
	    if (this.length > max) str += ' ... ';
	  }
	  return '<Buffer ' + str + '>'
	};

	Buffer$d.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
	  if (!internalIsBuffer(target)) {
	    throw new TypeError('Argument must be a Buffer')
	  }

	  if (start === undefined) {
	    start = 0;
	  }
	  if (end === undefined) {
	    end = target ? target.length : 0;
	  }
	  if (thisStart === undefined) {
	    thisStart = 0;
	  }
	  if (thisEnd === undefined) {
	    thisEnd = this.length;
	  }

	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	    throw new RangeError('out of range index')
	  }

	  if (thisStart >= thisEnd && start >= end) {
	    return 0
	  }
	  if (thisStart >= thisEnd) {
	    return -1
	  }
	  if (start >= end) {
	    return 1
	  }

	  start >>>= 0;
	  end >>>= 0;
	  thisStart >>>= 0;
	  thisEnd >>>= 0;

	  if (this === target) return 0

	  var x = thisEnd - thisStart;
	  var y = end - start;
	  var len = Math.min(x, y);

	  var thisCopy = this.slice(thisStart, thisEnd);
	  var targetCopy = target.slice(start, end);

	  for (var i = 0; i < len; ++i) {
	    if (thisCopy[i] !== targetCopy[i]) {
	      x = thisCopy[i];
	      y = targetCopy[i];
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	};

	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf
	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
	  // Empty buffer means no match
	  if (buffer.length === 0) return -1

	  // Normalize byteOffset
	  if (typeof byteOffset === 'string') {
	    encoding = byteOffset;
	    byteOffset = 0;
	  } else if (byteOffset > 0x7fffffff) {
	    byteOffset = 0x7fffffff;
	  } else if (byteOffset < -0x80000000) {
	    byteOffset = -0x80000000;
	  }
	  byteOffset = +byteOffset;  // Coerce to Number.
	  if (isNaN(byteOffset)) {
	    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
	    byteOffset = dir ? 0 : (buffer.length - 1);
	  }

	  // Normalize byteOffset: negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
	  if (byteOffset >= buffer.length) {
	    if (dir) return -1
	    else byteOffset = buffer.length - 1;
	  } else if (byteOffset < 0) {
	    if (dir) byteOffset = 0;
	    else return -1
	  }

	  // Normalize val
	  if (typeof val === 'string') {
	    val = Buffer$d.from(val, encoding);
	  }

	  // Finally, search either indexOf (if dir is true) or lastIndexOf
	  if (internalIsBuffer(val)) {
	    // Special case: looking for empty string/buffer always fails
	    if (val.length === 0) {
	      return -1
	    }
	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
	  } else if (typeof val === 'number') {
	    val = val & 0xFF; // Search for a byte value [0-255]
	    if (Buffer$d.TYPED_ARRAY_SUPPORT &&
	        typeof Uint8Array.prototype.indexOf === 'function') {
	      if (dir) {
	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
	      } else {
	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
	      }
	    }
	    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
	  var indexSize = 1;
	  var arrLength = arr.length;
	  var valLength = val.length;

	  if (encoding !== undefined) {
	    encoding = String(encoding).toLowerCase();
	    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
	        encoding === 'utf16le' || encoding === 'utf-16le') {
	      if (arr.length < 2 || val.length < 2) {
	        return -1
	      }
	      indexSize = 2;
	      arrLength /= 2;
	      valLength /= 2;
	      byteOffset /= 2;
	    }
	  }

	  function read (buf, i) {
	    if (indexSize === 1) {
	      return buf[i]
	    } else {
	      return buf.readUInt16BE(i * indexSize)
	    }
	  }

	  var i;
	  if (dir) {
	    var foundIndex = -1;
	    for (i = byteOffset; i < arrLength; i++) {
	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	        if (foundIndex === -1) foundIndex = i;
	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
	      } else {
	        if (foundIndex !== -1) i -= i - foundIndex;
	        foundIndex = -1;
	      }
	    }
	  } else {
	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
	    for (i = byteOffset; i >= 0; i--) {
	      var found = true;
	      for (var j = 0; j < valLength; j++) {
	        if (read(arr, i + j) !== read(val, j)) {
	          found = false;
	          break
	        }
	      }
	      if (found) return i
	    }
	  }

	  return -1
	}

	Buffer$d.prototype.includes = function includes (val, byteOffset, encoding) {
	  return this.indexOf(val, byteOffset, encoding) !== -1
	};

	Buffer$d.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
	};

	Buffer$d.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
	};

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0;
	  var remaining = buf.length - offset;
	  if (!length) {
	    length = remaining;
	  } else {
	    length = Number(length);
	    if (length > remaining) {
	      length = remaining;
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length;
	  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2;
	  }
	  for (var i = 0; i < length; ++i) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16);
	    if (isNaN(parsed)) return i
	    buf[offset + i] = parsed;
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function latin1Write (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer$d.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8';
	    length = this.length;
	    offset = 0;
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset;
	    length = this.length;
	    offset = 0;
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0;
	    if (isFinite(length)) {
	      length = length | 0;
	      if (encoding === undefined) encoding = 'utf8';
	    } else {
	      encoding = length;
	      length = undefined;
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    throw new Error(
	      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
	    )
	  }

	  var remaining = this.length - offset;
	  if (length === undefined || length > remaining) length = remaining;

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('Attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8';

	  var loweredCase = false;
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	        return asciiWrite(this, string, offset, length)

	      case 'latin1':
	      case 'binary':
	        return latin1Write(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase();
	        loweredCase = true;
	    }
	  }
	};

	Buffer$d.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	};

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return fromByteArray(buf)
	  } else {
	    return fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end);
	  var res = [];

	  var i = start;
	  while (i < end) {
	    var firstByte = buf[i];
	    var codePoint = null;
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1;

	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint;

	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte;
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1];
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint;
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1];
	          thirdByte = buf[i + 2];
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint;
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1];
	          thirdByte = buf[i + 2];
	          fourthByte = buf[i + 3];
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint;
	            }
	          }
	      }
	    }

	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD;
	      bytesPerSequence = 1;
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000;
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
	      codePoint = 0xDC00 | codePoint & 0x3FF;
	    }

	    res.push(codePoint);
	    i += bytesPerSequence;
	  }

	  return decodeCodePointsArray(res)
	}

	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000;

	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length;
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }

	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = '';
	  var i = 0;
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    );
	  }
	  return res
	}

	function asciiSlice (buf, start, end) {
	  var ret = '';
	  end = Math.min(buf.length, end);

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i] & 0x7F);
	  }
	  return ret
	}

	function latin1Slice (buf, start, end) {
	  var ret = '';
	  end = Math.min(buf.length, end);

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i]);
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length;

	  if (!start || start < 0) start = 0;
	  if (!end || end < 0 || end > len) end = len;

	  var out = '';
	  for (var i = start; i < end; ++i) {
	    out += toHex$1(buf[i]);
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end);
	  var res = '';
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
	  }
	  return res
	}

	Buffer$d.prototype.slice = function slice (start, end) {
	  var len = this.length;
	  start = ~~start;
	  end = end === undefined ? len : ~~end;

	  if (start < 0) {
	    start += len;
	    if (start < 0) start = 0;
	  } else if (start > len) {
	    start = len;
	  }

	  if (end < 0) {
	    end += len;
	    if (end < 0) end = 0;
	  } else if (end > len) {
	    end = len;
	  }

	  if (end < start) end = start;

	  var newBuf;
	  if (Buffer$d.TYPED_ARRAY_SUPPORT) {
	    newBuf = this.subarray(start, end);
	    newBuf.__proto__ = Buffer$d.prototype;
	  } else {
	    var sliceLen = end - start;
	    newBuf = new Buffer$d(sliceLen, undefined);
	    for (var i = 0; i < sliceLen; ++i) {
	      newBuf[i] = this[i + start];
	    }
	  }

	  return newBuf
	};

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer$d.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);

	  var val = this[offset];
	  var mul = 1;
	  var i = 0;
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul;
	  }

	  return val
	};

	Buffer$d.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length);
	  }

	  var val = this[offset + --byteLength];
	  var mul = 1;
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul;
	  }

	  return val
	};

	Buffer$d.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length);
	  return this[offset]
	};

	Buffer$d.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  return this[offset] | (this[offset + 1] << 8)
	};

	Buffer$d.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  return (this[offset] << 8) | this[offset + 1]
	};

	Buffer$d.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	};

	Buffer$d.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	};

	Buffer$d.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);

	  var val = this[offset];
	  var mul = 1;
	  var i = 0;
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul;
	  }
	  mul *= 0x80;

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

	  return val
	};

	Buffer$d.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);

	  var i = byteLength;
	  var mul = 1;
	  var val = this[offset + --i];
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul;
	  }
	  mul *= 0x80;

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

	  return val
	};

	Buffer$d.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length);
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	};

	Buffer$d.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  var val = this[offset] | (this[offset + 1] << 8);
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	};

	Buffer$d.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  var val = this[offset + 1] | (this[offset] << 8);
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	};

	Buffer$d.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	};

	Buffer$d.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	};

	Buffer$d.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);
	  return read(this, offset, true, 23, 4)
	};

	Buffer$d.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);
	  return read(this, offset, false, 23, 4)
	};

	Buffer$d.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length);
	  return read(this, offset, true, 52, 8)
	};

	Buffer$d.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length);
	  return read(this, offset, false, 52, 8)
	};

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	}

	Buffer$d.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
	    checkInt(this, value, offset, byteLength, maxBytes, 0);
	  }

	  var mul = 1;
	  var i = 0;
	  this[offset] = value & 0xFF;
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer$d.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
	    checkInt(this, value, offset, byteLength, maxBytes, 0);
	  }

	  var i = byteLength - 1;
	  var mul = 1;
	  this[offset + i] = value & 0xFF;
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer$d.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
	  if (!Buffer$d.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
	  this[offset] = (value & 0xff);
	  return offset + 1
	};

	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1;
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8;
	  }
	}

	Buffer$d.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
	  if (Buffer$d.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff);
	    this[offset + 1] = (value >>> 8);
	  } else {
	    objectWriteUInt16(this, value, offset, true);
	  }
	  return offset + 2
	};

	Buffer$d.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
	  if (Buffer$d.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8);
	    this[offset + 1] = (value & 0xff);
	  } else {
	    objectWriteUInt16(this, value, offset, false);
	  }
	  return offset + 2
	};

	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1;
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;
	  }
	}

	Buffer$d.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
	  if (Buffer$d.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24);
	    this[offset + 2] = (value >>> 16);
	    this[offset + 1] = (value >>> 8);
	    this[offset] = (value & 0xff);
	  } else {
	    objectWriteUInt32(this, value, offset, true);
	  }
	  return offset + 4
	};

	Buffer$d.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
	  if (Buffer$d.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24);
	    this[offset + 1] = (value >>> 16);
	    this[offset + 2] = (value >>> 8);
	    this[offset + 3] = (value & 0xff);
	  } else {
	    objectWriteUInt32(this, value, offset, false);
	  }
	  return offset + 4
	};

	Buffer$d.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1);

	    checkInt(this, value, offset, byteLength, limit - 1, -limit);
	  }

	  var i = 0;
	  var mul = 1;
	  var sub = 0;
	  this[offset] = value & 0xFF;
	  while (++i < byteLength && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	      sub = 1;
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer$d.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1);

	    checkInt(this, value, offset, byteLength, limit - 1, -limit);
	  }

	  var i = byteLength - 1;
	  var mul = 1;
	  var sub = 0;
	  this[offset + i] = value & 0xFF;
	  while (--i >= 0 && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	      sub = 1;
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer$d.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
	  if (!Buffer$d.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
	  if (value < 0) value = 0xff + value + 1;
	  this[offset] = (value & 0xff);
	  return offset + 1
	};

	Buffer$d.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
	  if (Buffer$d.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff);
	    this[offset + 1] = (value >>> 8);
	  } else {
	    objectWriteUInt16(this, value, offset, true);
	  }
	  return offset + 2
	};

	Buffer$d.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
	  if (Buffer$d.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8);
	    this[offset + 1] = (value & 0xff);
	  } else {
	    objectWriteUInt16(this, value, offset, false);
	  }
	  return offset + 2
	};

	Buffer$d.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
	  if (Buffer$d.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff);
	    this[offset + 1] = (value >>> 8);
	    this[offset + 2] = (value >>> 16);
	    this[offset + 3] = (value >>> 24);
	  } else {
	    objectWriteUInt32(this, value, offset, true);
	  }
	  return offset + 4
	};

	Buffer$d.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
	  if (value < 0) value = 0xffffffff + value + 1;
	  if (Buffer$d.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24);
	    this[offset + 1] = (value >>> 16);
	    this[offset + 2] = (value >>> 8);
	    this[offset + 3] = (value & 0xff);
	  } else {
	    objectWriteUInt32(this, value, offset, false);
	  }
	  return offset + 4
	};

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	  if (offset < 0) throw new RangeError('Index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4);
	  }
	  write(buf, value, offset, littleEndian, 23, 4);
	  return offset + 4
	}

	Buffer$d.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	};

	Buffer$d.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	};

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8);
	  }
	  write(buf, value, offset, littleEndian, 52, 8);
	  return offset + 8
	}

	Buffer$d.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	};

	Buffer$d.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	};

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer$d.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0;
	  if (!end && end !== 0) end = this.length;
	  if (targetStart >= target.length) targetStart = target.length;
	  if (!targetStart) targetStart = 0;
	  if (end > 0 && end < start) end = start;

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length;
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start;
	  }

	  var len = end - start;
	  var i;

	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; --i) {
	      target[i + targetStart] = this[i + start];
	    }
	  } else if (len < 1000 || !Buffer$d.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; ++i) {
	      target[i + targetStart] = this[i + start];
	    }
	  } else {
	    Uint8Array.prototype.set.call(
	      target,
	      this.subarray(start, start + len),
	      targetStart
	    );
	  }

	  return len
	};

	// Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])
	Buffer$d.prototype.fill = function fill (val, start, end, encoding) {
	  // Handle string cases:
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      encoding = start;
	      start = 0;
	      end = this.length;
	    } else if (typeof end === 'string') {
	      encoding = end;
	      end = this.length;
	    }
	    if (val.length === 1) {
	      var code = val.charCodeAt(0);
	      if (code < 256) {
	        val = code;
	      }
	    }
	    if (encoding !== undefined && typeof encoding !== 'string') {
	      throw new TypeError('encoding must be a string')
	    }
	    if (typeof encoding === 'string' && !Buffer$d.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding)
	    }
	  } else if (typeof val === 'number') {
	    val = val & 255;
	  }

	  // Invalid ranges are not set to a default, so can range check early.
	  if (start < 0 || this.length < start || this.length < end) {
	    throw new RangeError('Out of range index')
	  }

	  if (end <= start) {
	    return this
	  }

	  start = start >>> 0;
	  end = end === undefined ? this.length : end >>> 0;

	  if (!val) val = 0;

	  var i;
	  if (typeof val === 'number') {
	    for (i = start; i < end; ++i) {
	      this[i] = val;
	    }
	  } else {
	    var bytes = internalIsBuffer(val)
	      ? val
	      : utf8ToBytes(new Buffer$d(val, encoding).toString());
	    var len = bytes.length;
	    for (i = 0; i < end - start; ++i) {
	      this[i + start] = bytes[i % len];
	    }
	  }

	  return this
	};

	// HELPER FUNCTIONS
	// ================

	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '');
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '=';
	  }
	  return str
	}

	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function toHex$1 (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity;
	  var codePoint;
	  var length = string.length;
	  var leadSurrogate = null;
	  var bytes = [];

	  for (var i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i);

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	          continue
	        }

	        // valid lead
	        leadSurrogate = codePoint;

	        continue
	      }

	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	        leadSurrogate = codePoint;
	        continue
	      }

	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	    }

	    leadSurrogate = null;

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint);
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      );
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      );
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      );
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = [];
	  for (var i = 0; i < str.length; ++i) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF);
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo;
	  var byteArray = [];
	  for (var i = 0; i < str.length; ++i) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i);
	    hi = c >> 8;
	    lo = c % 256;
	    byteArray.push(lo);
	    byteArray.push(hi);
	  }

	  return byteArray
	}


	function base64ToBytes (str) {
	  return toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; ++i) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i];
	  }
	  return i
	}

	function isnan (val) {
	  return val !== val // eslint-disable-line no-self-compare
	}


	// the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
	// The _isBuffer check is for Safari 5-7 support, because it's missing
	// Object.prototype.constructor. Remove this eventually
	function isBuffer$1(obj) {
	  return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))
	}

	function isFastBuffer (obj) {
	  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
	}

	// For Node v0.10 support. Remove this eventually.
	function isSlowBuffer (obj) {
	  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))
	}

	var sha3$1 = {};

	var dist_browser$1 = {};

	var constants = {};

	var externals = {};

	var dist_browser = {};

	var __importDefault$3 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(dist_browser, "__esModule", { value: true });
	dist_browser.getLength = dist_browser.decode = dist_browser.encode = void 0;
	var bn_js_1$1 = __importDefault$3(bnExports$1);
	/**
	 * RLP Encoding based on: https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-RLP
	 * This function takes in a data, convert it to buffer if not, and a length for recursion
	 * @param input - will be converted to buffer
	 * @returns returns buffer of encoded data
	 **/
	function encode(input) {
	    if (Array.isArray(input)) {
	        var output = [];
	        for (var i = 0; i < input.length; i++) {
	            output.push(encode(input[i]));
	        }
	        var buf = Buffer$d.concat(output);
	        return Buffer$d.concat([encodeLength(buf.length, 192), buf]);
	    }
	    else {
	        var inputBuf = toBuffer(input);
	        return inputBuf.length === 1 && inputBuf[0] < 128
	            ? inputBuf
	            : Buffer$d.concat([encodeLength(inputBuf.length, 128), inputBuf]);
	    }
	}
	dist_browser.encode = encode;
	/**
	 * Parse integers. Check if there is no leading zeros
	 * @param v The value to parse
	 * @param base The base to parse the integer into
	 */
	function safeParseInt(v, base) {
	    if (v[0] === '0' && v[1] === '0') {
	        throw new Error('invalid RLP: extra zeros');
	    }
	    return parseInt(v, base);
	}
	function encodeLength(len, offset) {
	    if (len < 56) {
	        return Buffer$d.from([len + offset]);
	    }
	    else {
	        var hexLength = intToHex(len);
	        var lLength = hexLength.length / 2;
	        var firstByte = intToHex(offset + 55 + lLength);
	        return Buffer$d.from(firstByte + hexLength, 'hex');
	    }
	}
	function decode(input, stream) {
	    if (stream === void 0) { stream = false; }
	    if (!input || input.length === 0) {
	        return Buffer$d.from([]);
	    }
	    var inputBuffer = toBuffer(input);
	    var decoded = _decode(inputBuffer);
	    if (stream) {
	        return decoded;
	    }
	    if (decoded.remainder.length !== 0) {
	        throw new Error('invalid remainder');
	    }
	    return decoded.data;
	}
	dist_browser.decode = decode;
	/**
	 * Get the length of the RLP input
	 * @param input
	 * @returns The length of the input or an empty Buffer if no input
	 */
	function getLength$1(input) {
	    if (!input || input.length === 0) {
	        return Buffer$d.from([]);
	    }
	    var inputBuffer = toBuffer(input);
	    var firstByte = inputBuffer[0];
	    if (firstByte <= 0x7f) {
	        return inputBuffer.length;
	    }
	    else if (firstByte <= 0xb7) {
	        return firstByte - 0x7f;
	    }
	    else if (firstByte <= 0xbf) {
	        return firstByte - 0xb6;
	    }
	    else if (firstByte <= 0xf7) {
	        // a list between  0-55 bytes long
	        return firstByte - 0xbf;
	    }
	    else {
	        // a list  over 55 bytes long
	        var llength = firstByte - 0xf6;
	        var length_1 = safeParseInt(inputBuffer.slice(1, llength).toString('hex'), 16);
	        return llength + length_1;
	    }
	}
	dist_browser.getLength = getLength$1;
	/** Decode an input with RLP */
	function _decode(input) {
	    var length, llength, data, innerRemainder, d;
	    var decoded = [];
	    var firstByte = input[0];
	    if (firstByte <= 0x7f) {
	        // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.
	        return {
	            data: input.slice(0, 1),
	            remainder: input.slice(1),
	        };
	    }
	    else if (firstByte <= 0xb7) {
	        // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string
	        // The range of the first byte is [0x80, 0xb7]
	        length = firstByte - 0x7f;
	        // set 0x80 null to 0
	        if (firstByte === 0x80) {
	            data = Buffer$d.from([]);
	        }
	        else {
	            data = input.slice(1, length);
	        }
	        if (length === 2 && data[0] < 0x80) {
	            throw new Error('invalid rlp encoding: byte must be less 0x80');
	        }
	        return {
	            data: data,
	            remainder: input.slice(length),
	        };
	    }
	    else if (firstByte <= 0xbf) {
	        // string is greater than 55 bytes long. A single byte with the value (0xb7 plus the length of the length),
	        // followed by the length, followed by the string
	        llength = firstByte - 0xb6;
	        if (input.length - 1 < llength) {
	            throw new Error('invalid RLP: not enough bytes for string length');
	        }
	        length = safeParseInt(input.slice(1, llength).toString('hex'), 16);
	        if (length <= 55) {
	            throw new Error('invalid RLP: expected string length to be greater than 55');
	        }
	        data = input.slice(llength, length + llength);
	        if (data.length < length) {
	            throw new Error('invalid RLP: not enough bytes for string');
	        }
	        return {
	            data: data,
	            remainder: input.slice(length + llength),
	        };
	    }
	    else if (firstByte <= 0xf7) {
	        // a list between  0-55 bytes long
	        length = firstByte - 0xbf;
	        innerRemainder = input.slice(1, length);
	        while (innerRemainder.length) {
	            d = _decode(innerRemainder);
	            decoded.push(d.data);
	            innerRemainder = d.remainder;
	        }
	        return {
	            data: decoded,
	            remainder: input.slice(length),
	        };
	    }
	    else {
	        // a list  over 55 bytes long
	        llength = firstByte - 0xf6;
	        length = safeParseInt(input.slice(1, llength).toString('hex'), 16);
	        var totalLength = llength + length;
	        if (totalLength > input.length) {
	            throw new Error('invalid rlp: total length is larger than the data');
	        }
	        innerRemainder = input.slice(llength, totalLength);
	        if (innerRemainder.length === 0) {
	            throw new Error('invalid rlp, List has a invalid length');
	        }
	        while (innerRemainder.length) {
	            d = _decode(innerRemainder);
	            decoded.push(d.data);
	            innerRemainder = d.remainder;
	        }
	        return {
	            data: decoded,
	            remainder: input.slice(totalLength),
	        };
	    }
	}
	/** Check if a string is prefixed by 0x */
	function isHexPrefixed$1(str) {
	    return str.slice(0, 2) === '0x';
	}
	/** Removes 0x from a given String */
	function stripHexPrefix$1(str) {
	    if (typeof str !== 'string') {
	        return str;
	    }
	    return isHexPrefixed$1(str) ? str.slice(2) : str;
	}
	/** Transform an integer into its hexadecimal value */
	function intToHex(integer) {
	    if (integer < 0) {
	        throw new Error('Invalid integer as argument, must be unsigned!');
	    }
	    var hex = integer.toString(16);
	    return hex.length % 2 ? "0" + hex : hex;
	}
	/** Pad a string to be even */
	function padToEven$1(a) {
	    return a.length % 2 ? "0" + a : a;
	}
	/** Transform an integer into a Buffer */
	function intToBuffer(integer) {
	    var hex = intToHex(integer);
	    return Buffer$d.from(hex, 'hex');
	}
	/** Transform anything into a Buffer */
	function toBuffer(v) {
	    if (!isBuffer$1(v)) {
	        if (typeof v === 'string') {
	            if (isHexPrefixed$1(v)) {
	                return Buffer$d.from(padToEven$1(stripHexPrefix$1(v)), 'hex');
	            }
	            else {
	                return Buffer$d.from(v);
	            }
	        }
	        else if (typeof v === 'number' || typeof v === 'bigint') {
	            if (!v) {
	                return Buffer$d.from([]);
	            }
	            else {
	                return intToBuffer(v);
	            }
	        }
	        else if (v === null || v === undefined) {
	            return Buffer$d.from([]);
	        }
	        else if (v instanceof Uint8Array) {
	            return Buffer$d.from(v);
	        }
	        else if (bn_js_1$1.default.isBN(v)) {
	            // converts a BN to a Buffer
	            return Buffer$d.from(v.toArray());
	        }
	        else {
	            throw new Error('invalid type');
	        }
	    }
	    return v;
	}

	/**
	 * Re-exports commonly used modules:
	 * * Exports [`BN`](https://github.com/indutny/bn.js), [`rlp`](https://github.com/ethereumjs/rlp).
	 * @packageDocumentation
	 */
	var __createBinding$1 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault$1 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar$1 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$1(result, mod, k);
	    __setModuleDefault$1(result, mod);
	    return result;
	};
	var __importDefault$2 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(externals, "__esModule", { value: true });
	externals.rlp = externals.BN = void 0;
	var bn_js_1 = __importDefault$2(bnExports$1);
	externals.BN = bn_js_1.default;
	var rlp = __importStar$1(dist_browser);
	externals.rlp = rlp;

	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.KECCAK256_RLP = exports.KECCAK256_RLP_S = exports.KECCAK256_RLP_ARRAY = exports.KECCAK256_RLP_ARRAY_S = exports.KECCAK256_NULL = exports.KECCAK256_NULL_S = exports.TWO_POW256 = exports.MAX_INTEGER = exports.MAX_UINT64 = void 0;
		var buffer_1 = require$$2$1;
		var externals_1 = externals;
		/**
		 * 2^64-1
		 */
		exports.MAX_UINT64 = new externals_1.BN('ffffffffffffffff', 16);
		/**
		 * The max integer that the evm can handle (2^256-1)
		 */
		exports.MAX_INTEGER = new externals_1.BN('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16);
		/**
		 * 2^256
		 */
		exports.TWO_POW256 = new externals_1.BN('10000000000000000000000000000000000000000000000000000000000000000', 16);
		/**
		 * Keccak-256 hash of null
		 */
		exports.KECCAK256_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';
		/**
		 * Keccak-256 hash of null
		 */
		exports.KECCAK256_NULL = buffer_1.Buffer.from(exports.KECCAK256_NULL_S, 'hex');
		/**
		 * Keccak-256 of an RLP of an empty array
		 */
		exports.KECCAK256_RLP_ARRAY_S = '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347';
		/**
		 * Keccak-256 of an RLP of an empty array
		 */
		exports.KECCAK256_RLP_ARRAY = buffer_1.Buffer.from(exports.KECCAK256_RLP_ARRAY_S, 'hex');
		/**
		 * Keccak-256 hash of the RLP of null
		 */
		exports.KECCAK256_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421';
		/**
		 * Keccak-256 hash of the RLP of null
		 */
		exports.KECCAK256_RLP = buffer_1.Buffer.from(exports.KECCAK256_RLP_S, 'hex');
		
	} (constants));

	var account = {};

	// shim for using process in browser
	// based off https://github.com/defunctzombie/node-process/blob/master/browser.js

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	var cachedSetTimeout = defaultSetTimout;
	var cachedClearTimeout = defaultClearTimeout;
	if (typeof global$1.setTimeout === 'function') {
	    cachedSetTimeout = setTimeout;
	}
	if (typeof global$1.clearTimeout === 'function') {
	    cachedClearTimeout = clearTimeout;
	}

	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	function nextTick(fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	}
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	var title = 'browser';
	var platform = 'browser';
	var browser$3 = true;
	var env = {};
	var argv = [];
	var version$2 = ''; // empty string to avoid regexp issues
	var versions = {};
	var release = {};
	var config$1 = {};

	function noop$2() {}

	var on = noop$2;
	var addListener = noop$2;
	var once$2 = noop$2;
	var off = noop$2;
	var removeListener = noop$2;
	var removeAllListeners = noop$2;
	var emit = noop$2;

	function binding(name) {
	    throw new Error('process.binding is not supported');
	}

	function cwd () { return '/' }
	function chdir (dir) {
	    throw new Error('process.chdir is not supported');
	}function umask() { return 0; }

	// from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
	var performance = global$1.performance || {};
	var performanceNow =
	  performance.now        ||
	  performance.mozNow     ||
	  performance.msNow      ||
	  performance.oNow       ||
	  performance.webkitNow  ||
	  function(){ return (new Date()).getTime() };

	// generate timestamp or delta
	// see http://nodejs.org/api/process.html#process_process_hrtime
	function hrtime(previousTimestamp){
	  var clocktime = performanceNow.call(performance)*1e-3;
	  var seconds = Math.floor(clocktime);
	  var nanoseconds = Math.floor((clocktime%1)*1e9);
	  if (previousTimestamp) {
	    seconds = seconds - previousTimestamp[0];
	    nanoseconds = nanoseconds - previousTimestamp[1];
	    if (nanoseconds<0) {
	      seconds--;
	      nanoseconds += 1e9;
	    }
	  }
	  return [seconds,nanoseconds]
	}

	var startTime = new Date();
	function uptime() {
	  var currentTime = new Date();
	  var dif = currentTime - startTime;
	  return dif / 1000;
	}

	var browser$1$1 = {
	  nextTick: nextTick,
	  title: title,
	  browser: browser$3,
	  env: env,
	  argv: argv,
	  version: version$2,
	  versions: versions,
	  on: on,
	  addListener: addListener,
	  once: once$2,
	  off: off,
	  removeListener: removeListener,
	  removeAllListeners: removeAllListeners,
	  emit: emit,
	  binding: binding,
	  cwd: cwd,
	  chdir: chdir,
	  umask: umask,
	  hrtime: hrtime,
	  platform: platform,
	  release: release,
	  config: config$1,
	  uptime: uptime
	};

	var process = browser$1$1;

	var inherits$f;
	if (typeof Object.create === 'function'){
	  inherits$f = function inherits(ctor, superCtor) {
	    // implementation from standard node.js 'util' module
	    ctor.super_ = superCtor;
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  inherits$f = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor;
	    var TempCtor = function () {};
	    TempCtor.prototype = superCtor.prototype;
	    ctor.prototype = new TempCtor();
	    ctor.prototype.constructor = ctor;
	  };
	}
	var inherits$g = inherits$f;

	var formatRegExp = /%[sdj%]/g;
	function format(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect$1(arguments[i]));
	    }
	    return objects.join(' ');
	  }

	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect$1(x);
	    }
	  }
	  return str;
	}

	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	function deprecate(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global$1.process)) {
	    return function() {
	      return deprecate(fn, msg).apply(this, arguments);
	    };
	  }

	  if (process.noDeprecation === true) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	}

	var debugs = {};
	var debugEnviron;
	function debuglog(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = process.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = 0;
	      debugs[set] = function() {
	        var msg = format.apply(null, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	}

	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect$1(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    _extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}

	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect$1.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};

	// Don't use 'blue' not visible on cmd.exe
	inspect$1.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};


	function stylizeWithColor(str, styleType) {
	  var style = inspect$1.styles[styleType];

	  if (style) {
	    return '\u001b[' + inspect$1.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect$1.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}


	function stylizeNoColor(str, styleType) {
	  return str;
	}


	function arrayToHash(array) {
	  var hash = {};

	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });

	  return hash;
	}


	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== inspect$1 &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }

	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }

	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);

	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }

	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }

	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }

	  var base = '', array = false, braces = ['{', '}'];

	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }

	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }

	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }

	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }

	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }

	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }

	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }

	  ctx.seen.push(value);

	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }

	  ctx.seen.pop();

	  return reduceToSingleString(output, base, braces);
	}


	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}


	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}


	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}


	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }

	  return name + ': ' + str;
	}


	function reduceToSingleString(output, base, braces) {
	  var length = output.reduce(function(prev, cur) {
	    if (cur.indexOf('\n') >= 0) ;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);

	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }

	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}


	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}

	function isNull(arg) {
	  return arg === null;
	}

	function isNullOrUndefined(arg) {
	  return arg == null;
	}

	function isNumber(arg) {
	  return typeof arg === 'number';
	}

	function isString(arg) {
	  return typeof arg === 'string';
	}

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}

	function isUndefined(arg) {
	  return arg === void 0;
	}

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}

	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}

	function isFunction(arg) {
	  return typeof arg === 'function';
	}

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}

	function isBuffer(maybeBuf) {
	  return isBuffer$1(maybeBuf);
	}

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}


	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}


	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];

	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}


	// log is just a thin wrapper to console.log that prepends a timestamp
	function log() {
	  console.log('%s - %s', timestamp(), format.apply(null, arguments));
	}

	function _extend(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;

	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	}
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	var util = {
	  inherits: inherits$g,
	  _extend: _extend,
	  log: log,
	  isBuffer: isBuffer,
	  isPrimitive: isPrimitive,
	  isFunction: isFunction,
	  isError: isError,
	  isDate: isDate,
	  isObject: isObject,
	  isRegExp: isRegExp,
	  isUndefined: isUndefined,
	  isSymbol: isSymbol,
	  isString: isString,
	  isNumber: isNumber,
	  isNullOrUndefined: isNullOrUndefined,
	  isNull: isNull,
	  isBoolean: isBoolean,
	  isArray: isArray,
	  inspect: inspect$1,
	  deprecate: deprecate,
	  format: format,
	  debuglog: debuglog
	};

	var util$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		_extend: _extend,
		debuglog: debuglog,
		default: util,
		deprecate: deprecate,
		format: format,
		inherits: inherits$g,
		inspect: inspect$1,
		isArray: isArray,
		isBoolean: isBoolean,
		isBuffer: isBuffer,
		isDate: isDate,
		isError: isError,
		isFunction: isFunction,
		isNull: isNull,
		isNullOrUndefined: isNullOrUndefined,
		isNumber: isNumber,
		isObject: isObject,
		isPrimitive: isPrimitive,
		isRegExp: isRegExp,
		isString: isString,
		isSymbol: isSymbol,
		isUndefined: isUndefined,
		log: log
	});

	function compare(a, b) {
	  if (a === b) {
	    return 0;
	  }

	  var x = a.length;
	  var y = b.length;

	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i];
	      y = b[i];
	      break;
	    }
	  }

	  if (x < y) {
	    return -1;
	  }
	  if (y < x) {
	    return 1;
	  }
	  return 0;
	}
	var hasOwn = Object.prototype.hasOwnProperty;

	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) {
	    if (hasOwn.call(obj, key)) keys.push(key);
	  }
	  return keys;
	};
	var pSlice = Array.prototype.slice;
	var _functionsHaveNames;
	function functionsHaveNames() {
	  if (typeof _functionsHaveNames !== 'undefined') {
	    return _functionsHaveNames;
	  }
	  return _functionsHaveNames = (function () {
	    return function foo() {}.name === 'foo';
	  }());
	}
	function pToString (obj) {
	  return Object.prototype.toString.call(obj);
	}
	function isView(arrbuf) {
	  if (isBuffer$2(arrbuf)) {
	    return false;
	  }
	  if (typeof global$1.ArrayBuffer !== 'function') {
	    return false;
	  }
	  if (typeof ArrayBuffer.isView === 'function') {
	    return ArrayBuffer.isView(arrbuf);
	  }
	  if (!arrbuf) {
	    return false;
	  }
	  if (arrbuf instanceof DataView) {
	    return true;
	  }
	  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
	    return true;
	  }
	  return false;
	}
	// 1. The assert module provides functions that throw
	// AssertionError's when particular conditions are not met. The
	// assert module must conform to the following interface.

	function assert$h(value, message) {
	  if (!value) fail(value, true, message, '==', ok);
	}

	// 2. The AssertionError is defined in assert.
	// new assert.AssertionError({ message: message,
	//                             actual: actual,
	//                             expected: expected })

	var regex = /\s*function\s+([^\(\s]*)\s*/;
	// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
	function getName(func) {
	  if (!isFunction(func)) {
	    return;
	  }
	  if (functionsHaveNames()) {
	    return func.name;
	  }
	  var str = func.toString();
	  var match = str.match(regex);
	  return match && match[1];
	}
	assert$h.AssertionError = AssertionError;
	function AssertionError(options) {
	  this.name = 'AssertionError';
	  this.actual = options.actual;
	  this.expected = options.expected;
	  this.operator = options.operator;
	  if (options.message) {
	    this.message = options.message;
	    this.generatedMessage = false;
	  } else {
	    this.message = getMessage(this);
	    this.generatedMessage = true;
	  }
	  var stackStartFunction = options.stackStartFunction || fail;
	  if (Error.captureStackTrace) {
	    Error.captureStackTrace(this, stackStartFunction);
	  } else {
	    // non v8 browsers so we can have a stacktrace
	    var err = new Error();
	    if (err.stack) {
	      var out = err.stack;

	      // try to strip useless frames
	      var fn_name = getName(stackStartFunction);
	      var idx = out.indexOf('\n' + fn_name);
	      if (idx >= 0) {
	        // once we have located the function frame
	        // we need to strip out everything before it (and its line)
	        var next_line = out.indexOf('\n', idx + 1);
	        out = out.substring(next_line + 1);
	      }

	      this.stack = out;
	    }
	  }
	}

	// assert.AssertionError instanceof Error
	inherits$g(AssertionError, Error);

	function truncate(s, n) {
	  if (typeof s === 'string') {
	    return s.length < n ? s : s.slice(0, n);
	  } else {
	    return s;
	  }
	}
	function inspect(something) {
	  if (functionsHaveNames() || !isFunction(something)) {
	    return inspect$1(something);
	  }
	  var rawname = getName(something);
	  var name = rawname ? ': ' + rawname : '';
	  return '[Function' +  name + ']';
	}
	function getMessage(self) {
	  return truncate(inspect(self.actual), 128) + ' ' +
	         self.operator + ' ' +
	         truncate(inspect(self.expected), 128);
	}

	// At present only the three keys mentioned above are used and
	// understood by the spec. Implementations or sub modules can pass
	// other keys to the AssertionError's constructor - they will be
	// ignored.

	// 3. All of the following functions must throw an AssertionError
	// when a corresponding condition is not met, with a message that
	// may be undefined if not provided.  All assertion methods provide
	// both the actual and expected values to the assertion error for
	// display purposes.

	function fail(actual, expected, message, operator, stackStartFunction) {
	  throw new AssertionError({
	    message: message,
	    actual: actual,
	    expected: expected,
	    operator: operator,
	    stackStartFunction: stackStartFunction
	  });
	}

	// EXTENSION! allows for well behaved errors defined elsewhere.
	assert$h.fail = fail;

	// 4. Pure assertion tests whether a value is truthy, as determined
	// by !!guard.
	// assert.ok(guard, message_opt);
	// This statement is equivalent to assert.equal(true, !!guard,
	// message_opt);. To test strictly for the value true, use
	// assert.strictEqual(true, guard, message_opt);.

	function ok(value, message) {
	  if (!value) fail(value, true, message, '==', ok);
	}
	assert$h.ok = ok;

	// 5. The equality assertion tests shallow, coercive equality with
	// ==.
	// assert.equal(actual, expected, message_opt);
	assert$h.equal = equal;
	function equal(actual, expected, message) {
	  if (actual != expected) fail(actual, expected, message, '==', equal);
	}

	// 6. The non-equality assertion tests for whether two objects are not equal
	// with != assert.notEqual(actual, expected, message_opt);
	assert$h.notEqual = notEqual;
	function notEqual(actual, expected, message) {
	  if (actual == expected) {
	    fail(actual, expected, message, '!=', notEqual);
	  }
	}

	// 7. The equivalence assertion tests a deep equality relation.
	// assert.deepEqual(actual, expected, message_opt);
	assert$h.deepEqual = deepEqual;
	function deepEqual(actual, expected, message) {
	  if (!_deepEqual(actual, expected, false)) {
	    fail(actual, expected, message, 'deepEqual', deepEqual);
	  }
	}
	assert$h.deepStrictEqual = deepStrictEqual;
	function deepStrictEqual(actual, expected, message) {
	  if (!_deepEqual(actual, expected, true)) {
	    fail(actual, expected, message, 'deepStrictEqual', deepStrictEqual);
	  }
	}

	function _deepEqual(actual, expected, strict, memos) {
	  // 7.1. All identical values are equivalent, as determined by ===.
	  if (actual === expected) {
	    return true;
	  } else if (isBuffer$2(actual) && isBuffer$2(expected)) {
	    return compare(actual, expected) === 0;

	  // 7.2. If the expected value is a Date object, the actual value is
	  // equivalent if it is also a Date object that refers to the same time.
	  } else if (isDate(actual) && isDate(expected)) {
	    return actual.getTime() === expected.getTime();

	  // 7.3 If the expected value is a RegExp object, the actual value is
	  // equivalent if it is also a RegExp object with the same source and
	  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
	  } else if (isRegExp(actual) && isRegExp(expected)) {
	    return actual.source === expected.source &&
	           actual.global === expected.global &&
	           actual.multiline === expected.multiline &&
	           actual.lastIndex === expected.lastIndex &&
	           actual.ignoreCase === expected.ignoreCase;

	  // 7.4. Other pairs that do not both pass typeof value == 'object',
	  // equivalence is determined by ==.
	  } else if ((actual === null || typeof actual !== 'object') &&
	             (expected === null || typeof expected !== 'object')) {
	    return strict ? actual === expected : actual == expected;

	  // If both values are instances of typed arrays, wrap their underlying
	  // ArrayBuffers in a Buffer each to increase performance
	  // This optimization requires the arrays to have the same type as checked by
	  // Object.prototype.toString (aka pToString). Never perform binary
	  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
	  // bit patterns are not identical.
	  } else if (isView(actual) && isView(expected) &&
	             pToString(actual) === pToString(expected) &&
	             !(actual instanceof Float32Array ||
	               actual instanceof Float64Array)) {
	    return compare(new Uint8Array(actual.buffer),
	                   new Uint8Array(expected.buffer)) === 0;

	  // 7.5 For all other Object pairs, including Array objects, equivalence is
	  // determined by having the same number of owned properties (as verified
	  // with Object.prototype.hasOwnProperty.call), the same set of keys
	  // (although not necessarily the same order), equivalent values for every
	  // corresponding key, and an identical 'prototype' property. Note: this
	  // accounts for both named and indexed properties on Arrays.
	  } else if (isBuffer$2(actual) !== isBuffer$2(expected)) {
	    return false;
	  } else {
	    memos = memos || {actual: [], expected: []};

	    var actualIndex = memos.actual.indexOf(actual);
	    if (actualIndex !== -1) {
	      if (actualIndex === memos.expected.indexOf(expected)) {
	        return true;
	      }
	    }

	    memos.actual.push(actual);
	    memos.expected.push(expected);

	    return objEquiv(actual, expected, strict, memos);
	  }
	}

	function isArguments(object) {
	  return Object.prototype.toString.call(object) == '[object Arguments]';
	}

	function objEquiv(a, b, strict, actualVisitedObjects) {
	  if (a === null || a === undefined || b === null || b === undefined)
	    return false;
	  // if one is a primitive, the other must be same
	  if (isPrimitive(a) || isPrimitive(b))
	    return a === b;
	  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
	    return false;
	  var aIsArgs = isArguments(a);
	  var bIsArgs = isArguments(b);
	  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
	    return false;
	  if (aIsArgs) {
	    a = pSlice.call(a);
	    b = pSlice.call(b);
	    return _deepEqual(a, b, strict);
	  }
	  var ka = objectKeys(a);
	  var kb = objectKeys(b);
	  var key, i;
	  // having the same number of owned properties (keys incorporates
	  // hasOwnProperty)
	  if (ka.length !== kb.length)
	    return false;
	  //the same set of keys (although not necessarily the same order),
	  ka.sort();
	  kb.sort();
	  //~~~cheap key test
	  for (i = ka.length - 1; i >= 0; i--) {
	    if (ka[i] !== kb[i])
	      return false;
	  }
	  //equivalent values for every corresponding key, and
	  //~~~possibly expensive deep test
	  for (i = ka.length - 1; i >= 0; i--) {
	    key = ka[i];
	    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
	      return false;
	  }
	  return true;
	}

	// 8. The non-equivalence assertion tests for any deep inequality.
	// assert.notDeepEqual(actual, expected, message_opt);
	assert$h.notDeepEqual = notDeepEqual;
	function notDeepEqual(actual, expected, message) {
	  if (_deepEqual(actual, expected, false)) {
	    fail(actual, expected, message, 'notDeepEqual', notDeepEqual);
	  }
	}

	assert$h.notDeepStrictEqual = notDeepStrictEqual;
	function notDeepStrictEqual(actual, expected, message) {
	  if (_deepEqual(actual, expected, true)) {
	    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
	  }
	}


	// 9. The strict equality assertion tests strict equality, as determined by ===.
	// assert.strictEqual(actual, expected, message_opt);
	assert$h.strictEqual = strictEqual;
	function strictEqual(actual, expected, message) {
	  if (actual !== expected) {
	    fail(actual, expected, message, '===', strictEqual);
	  }
	}

	// 10. The strict non-equality assertion tests for strict inequality, as
	// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);
	assert$h.notStrictEqual = notStrictEqual;
	function notStrictEqual(actual, expected, message) {
	  if (actual === expected) {
	    fail(actual, expected, message, '!==', notStrictEqual);
	  }
	}

	function expectedException(actual, expected) {
	  if (!actual || !expected) {
	    return false;
	  }

	  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
	    return expected.test(actual);
	  }

	  try {
	    if (actual instanceof expected) {
	      return true;
	    }
	  } catch (e) {
	    // Ignore.  The instanceof check doesn't work for arrow functions.
	  }

	  if (Error.isPrototypeOf(expected)) {
	    return false;
	  }

	  return expected.call({}, actual) === true;
	}

	function _tryBlock(block) {
	  var error;
	  try {
	    block();
	  } catch (e) {
	    error = e;
	  }
	  return error;
	}

	function _throws(shouldThrow, block, expected, message) {
	  var actual;

	  if (typeof block !== 'function') {
	    throw new TypeError('"block" argument must be a function');
	  }

	  if (typeof expected === 'string') {
	    message = expected;
	    expected = null;
	  }

	  actual = _tryBlock(block);

	  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
	            (message ? ' ' + message : '.');

	  if (shouldThrow && !actual) {
	    fail(actual, expected, 'Missing expected exception' + message);
	  }

	  var userProvidedMessage = typeof message === 'string';
	  var isUnwantedException = !shouldThrow && isError(actual);
	  var isUnexpectedException = !shouldThrow && actual && !expected;

	  if ((isUnwantedException &&
	      userProvidedMessage &&
	      expectedException(actual, expected)) ||
	      isUnexpectedException) {
	    fail(actual, expected, 'Got unwanted exception' + message);
	  }

	  if ((shouldThrow && actual && expected &&
	      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
	    throw actual;
	  }
	}

	// 11. Expected to throw an error:
	// assert.throws(block, Error_opt, message_opt);
	assert$h.throws = throws;
	function throws(block, /*optional*/error, /*optional*/message) {
	  _throws(true, block, error, message);
	}

	// EXTENSION! This is annoying to write outside this module.
	assert$h.doesNotThrow = doesNotThrow;
	function doesNotThrow(block, /*optional*/error, /*optional*/message) {
	  _throws(false, block, error, message);
	}

	assert$h.ifError = ifError;
	function ifError(err) {
	  if (err) throw err;
	}

	var assert$i = /*#__PURE__*/Object.freeze({
		__proto__: null,
		AssertionError: AssertionError,
		assert: ok,
		deepEqual: deepEqual,
		deepStrictEqual: deepStrictEqual,
		default: assert$h,
		doesNotThrow: doesNotThrow,
		equal: equal,
		fail: fail,
		ifError: ifError,
		notDeepEqual: notDeepEqual,
		notDeepStrictEqual: notDeepStrictEqual,
		notEqual: notEqual,
		notStrictEqual: notStrictEqual,
		ok: ok,
		strictEqual: strictEqual,
		throws: throws
	});

	var require$$0$5 = /*@__PURE__*/getAugmentedNamespace(assert$i);

	var secp256k1$1 = {};

	const errors = {
	  IMPOSSIBLE_CASE: 'Impossible case. Please create issue.',
	  TWEAK_ADD:
	    'The tweak was out of range or the resulted private key is invalid',
	  TWEAK_MUL: 'The tweak was out of range or equal to zero',
	  CONTEXT_RANDOMIZE_UNKNOW: 'Unknow error on context randomization',
	  SECKEY_INVALID: 'Private Key is invalid',
	  PUBKEY_PARSE: 'Public Key could not be parsed',
	  PUBKEY_SERIALIZE: 'Public Key serialization error',
	  PUBKEY_COMBINE: 'The sum of the public keys is not valid',
	  SIG_PARSE: 'Signature could not be parsed',
	  SIGN: 'The nonce generation function failed, or the private key was invalid',
	  RECOVER: 'Public key could not be recover',
	  ECDH: 'Scalar was invalid (zero or overflow)'
	};

	function assert$g (cond, msg) {
	  if (!cond) throw new Error(msg)
	}

	function isUint8Array (name, value, length) {
	  assert$g(value instanceof Uint8Array, `Expected ${name} to be an Uint8Array`);

	  if (length !== undefined) {
	    if (Array.isArray(length)) {
	      const numbers = length.join(', ');
	      const msg = `Expected ${name} to be an Uint8Array with length [${numbers}]`;
	      assert$g(length.includes(value.length), msg);
	    } else {
	      const msg = `Expected ${name} to be an Uint8Array with length ${length}`;
	      assert$g(value.length === length, msg);
	    }
	  }
	}

	function isCompressed (value) {
	  assert$g(toTypeString(value) === 'Boolean', 'Expected compressed to be a Boolean');
	}

	function getAssertedOutput (output = (len) => new Uint8Array(len), length) {
	  if (typeof output === 'function') output = output(length);
	  isUint8Array('output', output, length);
	  return output
	}

	function toTypeString (value) {
	  return Object.prototype.toString.call(value).slice(8, -1)
	}

	var lib$5 = (secp256k1) => {
	  return {
	    contextRandomize (seed) {
	      assert$g(
	        seed === null || seed instanceof Uint8Array,
	        'Expected seed to be an Uint8Array or null'
	      );
	      if (seed !== null) isUint8Array('seed', seed, 32);

	      switch (secp256k1.contextRandomize(seed)) {
	        case 1:
	          throw new Error(errors.CONTEXT_RANDOMIZE_UNKNOW)
	      }
	    },

	    privateKeyVerify (seckey) {
	      isUint8Array('private key', seckey, 32);

	      return secp256k1.privateKeyVerify(seckey) === 0
	    },

	    privateKeyNegate (seckey) {
	      isUint8Array('private key', seckey, 32);

	      switch (secp256k1.privateKeyNegate(seckey)) {
	        case 0:
	          return seckey
	        case 1:
	          throw new Error(errors.IMPOSSIBLE_CASE)
	      }
	    },

	    privateKeyTweakAdd (seckey, tweak) {
	      isUint8Array('private key', seckey, 32);
	      isUint8Array('tweak', tweak, 32);

	      switch (secp256k1.privateKeyTweakAdd(seckey, tweak)) {
	        case 0:
	          return seckey
	        case 1:
	          throw new Error(errors.TWEAK_ADD)
	      }
	    },

	    privateKeyTweakMul (seckey, tweak) {
	      isUint8Array('private key', seckey, 32);
	      isUint8Array('tweak', tweak, 32);

	      switch (secp256k1.privateKeyTweakMul(seckey, tweak)) {
	        case 0:
	          return seckey
	        case 1:
	          throw new Error(errors.TWEAK_MUL)
	      }
	    },

	    publicKeyVerify (pubkey) {
	      isUint8Array('public key', pubkey, [33, 65]);

	      return secp256k1.publicKeyVerify(pubkey) === 0
	    },

	    publicKeyCreate (seckey, compressed = true, output) {
	      isUint8Array('private key', seckey, 32);
	      isCompressed(compressed);
	      output = getAssertedOutput(output, compressed ? 33 : 65);

	      switch (secp256k1.publicKeyCreate(output, seckey)) {
	        case 0:
	          return output
	        case 1:
	          throw new Error(errors.SECKEY_INVALID)
	        case 2:
	          throw new Error(errors.PUBKEY_SERIALIZE)
	      }
	    },

	    publicKeyConvert (pubkey, compressed = true, output) {
	      isUint8Array('public key', pubkey, [33, 65]);
	      isCompressed(compressed);
	      output = getAssertedOutput(output, compressed ? 33 : 65);

	      switch (secp256k1.publicKeyConvert(output, pubkey)) {
	        case 0:
	          return output
	        case 1:
	          throw new Error(errors.PUBKEY_PARSE)
	        case 2:
	          throw new Error(errors.PUBKEY_SERIALIZE)
	      }
	    },

	    publicKeyNegate (pubkey, compressed = true, output) {
	      isUint8Array('public key', pubkey, [33, 65]);
	      isCompressed(compressed);
	      output = getAssertedOutput(output, compressed ? 33 : 65);

	      switch (secp256k1.publicKeyNegate(output, pubkey)) {
	        case 0:
	          return output
	        case 1:
	          throw new Error(errors.PUBKEY_PARSE)
	        case 2:
	          throw new Error(errors.IMPOSSIBLE_CASE)
	        case 3:
	          throw new Error(errors.PUBKEY_SERIALIZE)
	      }
	    },

	    publicKeyCombine (pubkeys, compressed = true, output) {
	      assert$g(Array.isArray(pubkeys), 'Expected public keys to be an Array');
	      assert$g(pubkeys.length > 0, 'Expected public keys array will have more than zero items');
	      for (const pubkey of pubkeys) {
	        isUint8Array('public key', pubkey, [33, 65]);
	      }
	      isCompressed(compressed);
	      output = getAssertedOutput(output, compressed ? 33 : 65);

	      switch (secp256k1.publicKeyCombine(output, pubkeys)) {
	        case 0:
	          return output
	        case 1:
	          throw new Error(errors.PUBKEY_PARSE)
	        case 2:
	          throw new Error(errors.PUBKEY_COMBINE)
	        case 3:
	          throw new Error(errors.PUBKEY_SERIALIZE)
	      }
	    },

	    publicKeyTweakAdd (pubkey, tweak, compressed = true, output) {
	      isUint8Array('public key', pubkey, [33, 65]);
	      isUint8Array('tweak', tweak, 32);
	      isCompressed(compressed);
	      output = getAssertedOutput(output, compressed ? 33 : 65);

	      switch (secp256k1.publicKeyTweakAdd(output, pubkey, tweak)) {
	        case 0:
	          return output
	        case 1:
	          throw new Error(errors.PUBKEY_PARSE)
	        case 2:
	          throw new Error(errors.TWEAK_ADD)
	      }
	    },

	    publicKeyTweakMul (pubkey, tweak, compressed = true, output) {
	      isUint8Array('public key', pubkey, [33, 65]);
	      isUint8Array('tweak', tweak, 32);
	      isCompressed(compressed);
	      output = getAssertedOutput(output, compressed ? 33 : 65);

	      switch (secp256k1.publicKeyTweakMul(output, pubkey, tweak)) {
	        case 0:
	          return output
	        case 1:
	          throw new Error(errors.PUBKEY_PARSE)
	        case 2:
	          throw new Error(errors.TWEAK_MUL)
	      }
	    },

	    signatureNormalize (sig) {
	      isUint8Array('signature', sig, 64);

	      switch (secp256k1.signatureNormalize(sig)) {
	        case 0:
	          return sig
	        case 1:
	          throw new Error(errors.SIG_PARSE)
	      }
	    },

	    signatureExport (sig, output) {
	      isUint8Array('signature', sig, 64);
	      output = getAssertedOutput(output, 72);

	      const obj = { output, outputlen: 72 };
	      switch (secp256k1.signatureExport(obj, sig)) {
	        case 0:
	          return output.slice(0, obj.outputlen)
	        case 1:
	          throw new Error(errors.SIG_PARSE)
	        case 2:
	          throw new Error(errors.IMPOSSIBLE_CASE)
	      }
	    },

	    signatureImport (sig, output) {
	      isUint8Array('signature', sig);
	      output = getAssertedOutput(output, 64);

	      switch (secp256k1.signatureImport(output, sig)) {
	        case 0:
	          return output
	        case 1:
	          throw new Error(errors.SIG_PARSE)
	        case 2:
	          throw new Error(errors.IMPOSSIBLE_CASE)
	      }
	    },

	    ecdsaSign (msg32, seckey, options = {}, output) {
	      isUint8Array('message', msg32, 32);
	      isUint8Array('private key', seckey, 32);
	      assert$g(toTypeString(options) === 'Object', 'Expected options to be an Object');
	      if (options.data !== undefined) isUint8Array('options.data', options.data);
	      if (options.noncefn !== undefined) assert$g(toTypeString(options.noncefn) === 'Function', 'Expected options.noncefn to be a Function');
	      output = getAssertedOutput(output, 64);

	      const obj = { signature: output, recid: null };
	      switch (secp256k1.ecdsaSign(obj, msg32, seckey, options.data, options.noncefn)) {
	        case 0:
	          return obj
	        case 1:
	          throw new Error(errors.SIGN)
	        case 2:
	          throw new Error(errors.IMPOSSIBLE_CASE)
	      }
	    },

	    ecdsaVerify (sig, msg32, pubkey) {
	      isUint8Array('signature', sig, 64);
	      isUint8Array('message', msg32, 32);
	      isUint8Array('public key', pubkey, [33, 65]);

	      switch (secp256k1.ecdsaVerify(sig, msg32, pubkey)) {
	        case 0:
	          return true
	        case 3:
	          return false
	        case 1:
	          throw new Error(errors.SIG_PARSE)
	        case 2:
	          throw new Error(errors.PUBKEY_PARSE)
	      }
	    },

	    ecdsaRecover (sig, recid, msg32, compressed = true, output) {
	      isUint8Array('signature', sig, 64);
	      assert$g(
	        toTypeString(recid) === 'Number' &&
	          recid >= 0 &&
	          recid <= 3,
	        'Expected recovery id to be a Number within interval [0, 3]'
	      );
	      isUint8Array('message', msg32, 32);
	      isCompressed(compressed);
	      output = getAssertedOutput(output, compressed ? 33 : 65);

	      switch (secp256k1.ecdsaRecover(output, sig, recid, msg32)) {
	        case 0:
	          return output
	        case 1:
	          throw new Error(errors.SIG_PARSE)
	        case 2:
	          throw new Error(errors.RECOVER)
	        case 3:
	          throw new Error(errors.IMPOSSIBLE_CASE)
	      }
	    },

	    ecdh (pubkey, seckey, options = {}, output) {
	      isUint8Array('public key', pubkey, [33, 65]);
	      isUint8Array('private key', seckey, 32);
	      assert$g(toTypeString(options) === 'Object', 'Expected options to be an Object');
	      if (options.data !== undefined) isUint8Array('options.data', options.data);
	      if (options.hashfn !== undefined) {
	        assert$g(toTypeString(options.hashfn) === 'Function', 'Expected options.hashfn to be a Function');
	        if (options.xbuf !== undefined) isUint8Array('options.xbuf', options.xbuf, 32);
	        if (options.ybuf !== undefined) isUint8Array('options.ybuf', options.ybuf, 32);
	        isUint8Array('output', output);
	      } else {
	        output = getAssertedOutput(output, 32);
	      }

	      switch (secp256k1.ecdh(output, pubkey, seckey, options.data, options.hashfn, options.xbuf, options.ybuf)) {
	        case 0:
	          return output
	        case 1:
	          throw new Error(errors.PUBKEY_PARSE)
	        case 2:
	          throw new Error(errors.ECDH)
	      }
	    }
	  }
	};

	var elliptic$2 = {};

	var name = "elliptic";
	var version$1 = "6.5.4";
	var description = "EC cryptography";
	var main = "lib/elliptic.js";
	var files = [
		"lib"
	];
	var scripts = {
		lint: "eslint lib test",
		"lint:fix": "npm run lint -- --fix",
		unit: "istanbul test _mocha --reporter=spec test/index.js",
		test: "npm run lint && npm run unit",
		version: "grunt dist && git add dist/"
	};
	var repository = {
		type: "git",
		url: "git@github.com:indutny/elliptic"
	};
	var keywords = [
		"EC",
		"Elliptic",
		"curve",
		"Cryptography"
	];
	var author = "Fedor Indutny <fedor@indutny.com>";
	var license = "MIT";
	var bugs = {
		url: "https://github.com/indutny/elliptic/issues"
	};
	var homepage = "https://github.com/indutny/elliptic";
	var devDependencies = {
		brfs: "^2.0.2",
		coveralls: "^3.1.0",
		eslint: "^7.6.0",
		grunt: "^1.2.1",
		"grunt-browserify": "^5.3.0",
		"grunt-cli": "^1.3.2",
		"grunt-contrib-connect": "^3.0.0",
		"grunt-contrib-copy": "^1.0.0",
		"grunt-contrib-uglify": "^5.0.0",
		"grunt-mocha-istanbul": "^5.0.2",
		"grunt-saucelabs": "^9.0.1",
		istanbul: "^0.4.5",
		mocha: "^8.0.1"
	};
	var dependencies = {
		"bn.js": "^4.11.9",
		brorand: "^1.1.0",
		"hash.js": "^1.0.0",
		"hmac-drbg": "^1.0.1",
		inherits: "^2.0.4",
		"minimalistic-assert": "^1.0.1",
		"minimalistic-crypto-utils": "^1.0.1"
	};
	var require$$0$4 = {
		name: name,
		version: version$1,
		description: description,
		main: main,
		files: files,
		scripts: scripts,
		repository: repository,
		keywords: keywords,
		author: author,
		license: license,
		bugs: bugs,
		homepage: homepage,
		devDependencies: devDependencies,
		dependencies: dependencies
	};

	var utils$m = {};

	var bnExports = {};
	var bn = {
	  get exports(){ return bnExports; },
	  set exports(v){ bnExports = v; },
	};

	(function (module) {
		(function (module, exports) {

		  // Utils
		  function assert (val, msg) {
		    if (!val) throw new Error(msg || 'Assertion failed');
		  }

		  // Could use `inherits` module, but don't want to move from single file
		  // architecture yet.
		  function inherits (ctor, superCtor) {
		    ctor.super_ = superCtor;
		    var TempCtor = function () {};
		    TempCtor.prototype = superCtor.prototype;
		    ctor.prototype = new TempCtor();
		    ctor.prototype.constructor = ctor;
		  }

		  // BN

		  function BN (number, base, endian) {
		    if (BN.isBN(number)) {
		      return number;
		    }

		    this.negative = 0;
		    this.words = null;
		    this.length = 0;

		    // Reduction context
		    this.red = null;

		    if (number !== null) {
		      if (base === 'le' || base === 'be') {
		        endian = base;
		        base = 10;
		      }

		      this._init(number || 0, base || 10, endian || 'be');
		    }
		  }
		  if (typeof module === 'object') {
		    module.exports = BN;
		  } else {
		    exports.BN = BN;
		  }

		  BN.BN = BN;
		  BN.wordSize = 26;

		  var Buffer;
		  try {
		    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
		      Buffer = window.Buffer;
		    } else {
		      Buffer = require$$2$1.Buffer;
		    }
		  } catch (e) {
		  }

		  BN.isBN = function isBN (num) {
		    if (num instanceof BN) {
		      return true;
		    }

		    return num !== null && typeof num === 'object' &&
		      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
		  };

		  BN.max = function max (left, right) {
		    if (left.cmp(right) > 0) return left;
		    return right;
		  };

		  BN.min = function min (left, right) {
		    if (left.cmp(right) < 0) return left;
		    return right;
		  };

		  BN.prototype._init = function init (number, base, endian) {
		    if (typeof number === 'number') {
		      return this._initNumber(number, base, endian);
		    }

		    if (typeof number === 'object') {
		      return this._initArray(number, base, endian);
		    }

		    if (base === 'hex') {
		      base = 16;
		    }
		    assert(base === (base | 0) && base >= 2 && base <= 36);

		    number = number.toString().replace(/\s+/g, '');
		    var start = 0;
		    if (number[0] === '-') {
		      start++;
		      this.negative = 1;
		    }

		    if (start < number.length) {
		      if (base === 16) {
		        this._parseHex(number, start, endian);
		      } else {
		        this._parseBase(number, base, start);
		        if (endian === 'le') {
		          this._initArray(this.toArray(), base, endian);
		        }
		      }
		    }
		  };

		  BN.prototype._initNumber = function _initNumber (number, base, endian) {
		    if (number < 0) {
		      this.negative = 1;
		      number = -number;
		    }
		    if (number < 0x4000000) {
		      this.words = [ number & 0x3ffffff ];
		      this.length = 1;
		    } else if (number < 0x10000000000000) {
		      this.words = [
		        number & 0x3ffffff,
		        (number / 0x4000000) & 0x3ffffff
		      ];
		      this.length = 2;
		    } else {
		      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
		      this.words = [
		        number & 0x3ffffff,
		        (number / 0x4000000) & 0x3ffffff,
		        1
		      ];
		      this.length = 3;
		    }

		    if (endian !== 'le') return;

		    // Reverse the bytes
		    this._initArray(this.toArray(), base, endian);
		  };

		  BN.prototype._initArray = function _initArray (number, base, endian) {
		    // Perhaps a Uint8Array
		    assert(typeof number.length === 'number');
		    if (number.length <= 0) {
		      this.words = [ 0 ];
		      this.length = 1;
		      return this;
		    }

		    this.length = Math.ceil(number.length / 3);
		    this.words = new Array(this.length);
		    for (var i = 0; i < this.length; i++) {
		      this.words[i] = 0;
		    }

		    var j, w;
		    var off = 0;
		    if (endian === 'be') {
		      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
		        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
		        this.words[j] |= (w << off) & 0x3ffffff;
		        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
		        off += 24;
		        if (off >= 26) {
		          off -= 26;
		          j++;
		        }
		      }
		    } else if (endian === 'le') {
		      for (i = 0, j = 0; i < number.length; i += 3) {
		        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
		        this.words[j] |= (w << off) & 0x3ffffff;
		        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
		        off += 24;
		        if (off >= 26) {
		          off -= 26;
		          j++;
		        }
		      }
		    }
		    return this.strip();
		  };

		  function parseHex4Bits (string, index) {
		    var c = string.charCodeAt(index);
		    // 'A' - 'F'
		    if (c >= 65 && c <= 70) {
		      return c - 55;
		    // 'a' - 'f'
		    } else if (c >= 97 && c <= 102) {
		      return c - 87;
		    // '0' - '9'
		    } else {
		      return (c - 48) & 0xf;
		    }
		  }

		  function parseHexByte (string, lowerBound, index) {
		    var r = parseHex4Bits(string, index);
		    if (index - 1 >= lowerBound) {
		      r |= parseHex4Bits(string, index - 1) << 4;
		    }
		    return r;
		  }

		  BN.prototype._parseHex = function _parseHex (number, start, endian) {
		    // Create possibly bigger array to ensure that it fits the number
		    this.length = Math.ceil((number.length - start) / 6);
		    this.words = new Array(this.length);
		    for (var i = 0; i < this.length; i++) {
		      this.words[i] = 0;
		    }

		    // 24-bits chunks
		    var off = 0;
		    var j = 0;

		    var w;
		    if (endian === 'be') {
		      for (i = number.length - 1; i >= start; i -= 2) {
		        w = parseHexByte(number, start, i) << off;
		        this.words[j] |= w & 0x3ffffff;
		        if (off >= 18) {
		          off -= 18;
		          j += 1;
		          this.words[j] |= w >>> 26;
		        } else {
		          off += 8;
		        }
		      }
		    } else {
		      var parseLength = number.length - start;
		      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
		        w = parseHexByte(number, start, i) << off;
		        this.words[j] |= w & 0x3ffffff;
		        if (off >= 18) {
		          off -= 18;
		          j += 1;
		          this.words[j] |= w >>> 26;
		        } else {
		          off += 8;
		        }
		      }
		    }

		    this.strip();
		  };

		  function parseBase (str, start, end, mul) {
		    var r = 0;
		    var len = Math.min(str.length, end);
		    for (var i = start; i < len; i++) {
		      var c = str.charCodeAt(i) - 48;

		      r *= mul;

		      // 'a'
		      if (c >= 49) {
		        r += c - 49 + 0xa;

		      // 'A'
		      } else if (c >= 17) {
		        r += c - 17 + 0xa;

		      // '0' - '9'
		      } else {
		        r += c;
		      }
		    }
		    return r;
		  }

		  BN.prototype._parseBase = function _parseBase (number, base, start) {
		    // Initialize as zero
		    this.words = [ 0 ];
		    this.length = 1;

		    // Find length of limb in base
		    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
		      limbLen++;
		    }
		    limbLen--;
		    limbPow = (limbPow / base) | 0;

		    var total = number.length - start;
		    var mod = total % limbLen;
		    var end = Math.min(total, total - mod) + start;

		    var word = 0;
		    for (var i = start; i < end; i += limbLen) {
		      word = parseBase(number, i, i + limbLen, base);

		      this.imuln(limbPow);
		      if (this.words[0] + word < 0x4000000) {
		        this.words[0] += word;
		      } else {
		        this._iaddn(word);
		      }
		    }

		    if (mod !== 0) {
		      var pow = 1;
		      word = parseBase(number, i, number.length, base);

		      for (i = 0; i < mod; i++) {
		        pow *= base;
		      }

		      this.imuln(pow);
		      if (this.words[0] + word < 0x4000000) {
		        this.words[0] += word;
		      } else {
		        this._iaddn(word);
		      }
		    }

		    this.strip();
		  };

		  BN.prototype.copy = function copy (dest) {
		    dest.words = new Array(this.length);
		    for (var i = 0; i < this.length; i++) {
		      dest.words[i] = this.words[i];
		    }
		    dest.length = this.length;
		    dest.negative = this.negative;
		    dest.red = this.red;
		  };

		  BN.prototype.clone = function clone () {
		    var r = new BN(null);
		    this.copy(r);
		    return r;
		  };

		  BN.prototype._expand = function _expand (size) {
		    while (this.length < size) {
		      this.words[this.length++] = 0;
		    }
		    return this;
		  };

		  // Remove leading `0` from `this`
		  BN.prototype.strip = function strip () {
		    while (this.length > 1 && this.words[this.length - 1] === 0) {
		      this.length--;
		    }
		    return this._normSign();
		  };

		  BN.prototype._normSign = function _normSign () {
		    // -0 = 0
		    if (this.length === 1 && this.words[0] === 0) {
		      this.negative = 0;
		    }
		    return this;
		  };

		  BN.prototype.inspect = function inspect () {
		    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
		  };

		  /*

		  var zeros = [];
		  var groupSizes = [];
		  var groupBases = [];

		  var s = '';
		  var i = -1;
		  while (++i < BN.wordSize) {
		    zeros[i] = s;
		    s += '0';
		  }
		  groupSizes[0] = 0;
		  groupSizes[1] = 0;
		  groupBases[0] = 0;
		  groupBases[1] = 0;
		  var base = 2 - 1;
		  while (++base < 36 + 1) {
		    var groupSize = 0;
		    var groupBase = 1;
		    while (groupBase < (1 << BN.wordSize) / base) {
		      groupBase *= base;
		      groupSize += 1;
		    }
		    groupSizes[base] = groupSize;
		    groupBases[base] = groupBase;
		  }

		  */

		  var zeros = [
		    '',
		    '0',
		    '00',
		    '000',
		    '0000',
		    '00000',
		    '000000',
		    '0000000',
		    '00000000',
		    '000000000',
		    '0000000000',
		    '00000000000',
		    '000000000000',
		    '0000000000000',
		    '00000000000000',
		    '000000000000000',
		    '0000000000000000',
		    '00000000000000000',
		    '000000000000000000',
		    '0000000000000000000',
		    '00000000000000000000',
		    '000000000000000000000',
		    '0000000000000000000000',
		    '00000000000000000000000',
		    '000000000000000000000000',
		    '0000000000000000000000000'
		  ];

		  var groupSizes = [
		    0, 0,
		    25, 16, 12, 11, 10, 9, 8,
		    8, 7, 7, 7, 7, 6, 6,
		    6, 6, 6, 6, 6, 5, 5,
		    5, 5, 5, 5, 5, 5, 5,
		    5, 5, 5, 5, 5, 5, 5
		  ];

		  var groupBases = [
		    0, 0,
		    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
		    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
		    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
		    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
		    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
		  ];

		  BN.prototype.toString = function toString (base, padding) {
		    base = base || 10;
		    padding = padding | 0 || 1;

		    var out;
		    if (base === 16 || base === 'hex') {
		      out = '';
		      var off = 0;
		      var carry = 0;
		      for (var i = 0; i < this.length; i++) {
		        var w = this.words[i];
		        var word = (((w << off) | carry) & 0xffffff).toString(16);
		        carry = (w >>> (24 - off)) & 0xffffff;
		        if (carry !== 0 || i !== this.length - 1) {
		          out = zeros[6 - word.length] + word + out;
		        } else {
		          out = word + out;
		        }
		        off += 2;
		        if (off >= 26) {
		          off -= 26;
		          i--;
		        }
		      }
		      if (carry !== 0) {
		        out = carry.toString(16) + out;
		      }
		      while (out.length % padding !== 0) {
		        out = '0' + out;
		      }
		      if (this.negative !== 0) {
		        out = '-' + out;
		      }
		      return out;
		    }

		    if (base === (base | 0) && base >= 2 && base <= 36) {
		      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
		      var groupSize = groupSizes[base];
		      // var groupBase = Math.pow(base, groupSize);
		      var groupBase = groupBases[base];
		      out = '';
		      var c = this.clone();
		      c.negative = 0;
		      while (!c.isZero()) {
		        var r = c.modn(groupBase).toString(base);
		        c = c.idivn(groupBase);

		        if (!c.isZero()) {
		          out = zeros[groupSize - r.length] + r + out;
		        } else {
		          out = r + out;
		        }
		      }
		      if (this.isZero()) {
		        out = '0' + out;
		      }
		      while (out.length % padding !== 0) {
		        out = '0' + out;
		      }
		      if (this.negative !== 0) {
		        out = '-' + out;
		      }
		      return out;
		    }

		    assert(false, 'Base should be between 2 and 36');
		  };

		  BN.prototype.toNumber = function toNumber () {
		    var ret = this.words[0];
		    if (this.length === 2) {
		      ret += this.words[1] * 0x4000000;
		    } else if (this.length === 3 && this.words[2] === 0x01) {
		      // NOTE: at this stage it is known that the top bit is set
		      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
		    } else if (this.length > 2) {
		      assert(false, 'Number can only safely store up to 53 bits');
		    }
		    return (this.negative !== 0) ? -ret : ret;
		  };

		  BN.prototype.toJSON = function toJSON () {
		    return this.toString(16);
		  };

		  BN.prototype.toBuffer = function toBuffer (endian, length) {
		    assert(typeof Buffer !== 'undefined');
		    return this.toArrayLike(Buffer, endian, length);
		  };

		  BN.prototype.toArray = function toArray (endian, length) {
		    return this.toArrayLike(Array, endian, length);
		  };

		  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
		    var byteLength = this.byteLength();
		    var reqLength = length || Math.max(1, byteLength);
		    assert(byteLength <= reqLength, 'byte array longer than desired length');
		    assert(reqLength > 0, 'Requested array length <= 0');

		    this.strip();
		    var littleEndian = endian === 'le';
		    var res = new ArrayType(reqLength);

		    var b, i;
		    var q = this.clone();
		    if (!littleEndian) {
		      // Assume big-endian
		      for (i = 0; i < reqLength - byteLength; i++) {
		        res[i] = 0;
		      }

		      for (i = 0; !q.isZero(); i++) {
		        b = q.andln(0xff);
		        q.iushrn(8);

		        res[reqLength - i - 1] = b;
		      }
		    } else {
		      for (i = 0; !q.isZero(); i++) {
		        b = q.andln(0xff);
		        q.iushrn(8);

		        res[i] = b;
		      }

		      for (; i < reqLength; i++) {
		        res[i] = 0;
		      }
		    }

		    return res;
		  };

		  if (Math.clz32) {
		    BN.prototype._countBits = function _countBits (w) {
		      return 32 - Math.clz32(w);
		    };
		  } else {
		    BN.prototype._countBits = function _countBits (w) {
		      var t = w;
		      var r = 0;
		      if (t >= 0x1000) {
		        r += 13;
		        t >>>= 13;
		      }
		      if (t >= 0x40) {
		        r += 7;
		        t >>>= 7;
		      }
		      if (t >= 0x8) {
		        r += 4;
		        t >>>= 4;
		      }
		      if (t >= 0x02) {
		        r += 2;
		        t >>>= 2;
		      }
		      return r + t;
		    };
		  }

		  BN.prototype._zeroBits = function _zeroBits (w) {
		    // Short-cut
		    if (w === 0) return 26;

		    var t = w;
		    var r = 0;
		    if ((t & 0x1fff) === 0) {
		      r += 13;
		      t >>>= 13;
		    }
		    if ((t & 0x7f) === 0) {
		      r += 7;
		      t >>>= 7;
		    }
		    if ((t & 0xf) === 0) {
		      r += 4;
		      t >>>= 4;
		    }
		    if ((t & 0x3) === 0) {
		      r += 2;
		      t >>>= 2;
		    }
		    if ((t & 0x1) === 0) {
		      r++;
		    }
		    return r;
		  };

		  // Return number of used bits in a BN
		  BN.prototype.bitLength = function bitLength () {
		    var w = this.words[this.length - 1];
		    var hi = this._countBits(w);
		    return (this.length - 1) * 26 + hi;
		  };

		  function toBitArray (num) {
		    var w = new Array(num.bitLength());

		    for (var bit = 0; bit < w.length; bit++) {
		      var off = (bit / 26) | 0;
		      var wbit = bit % 26;

		      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
		    }

		    return w;
		  }

		  // Number of trailing zero bits
		  BN.prototype.zeroBits = function zeroBits () {
		    if (this.isZero()) return 0;

		    var r = 0;
		    for (var i = 0; i < this.length; i++) {
		      var b = this._zeroBits(this.words[i]);
		      r += b;
		      if (b !== 26) break;
		    }
		    return r;
		  };

		  BN.prototype.byteLength = function byteLength () {
		    return Math.ceil(this.bitLength() / 8);
		  };

		  BN.prototype.toTwos = function toTwos (width) {
		    if (this.negative !== 0) {
		      return this.abs().inotn(width).iaddn(1);
		    }
		    return this.clone();
		  };

		  BN.prototype.fromTwos = function fromTwos (width) {
		    if (this.testn(width - 1)) {
		      return this.notn(width).iaddn(1).ineg();
		    }
		    return this.clone();
		  };

		  BN.prototype.isNeg = function isNeg () {
		    return this.negative !== 0;
		  };

		  // Return negative clone of `this`
		  BN.prototype.neg = function neg () {
		    return this.clone().ineg();
		  };

		  BN.prototype.ineg = function ineg () {
		    if (!this.isZero()) {
		      this.negative ^= 1;
		    }

		    return this;
		  };

		  // Or `num` with `this` in-place
		  BN.prototype.iuor = function iuor (num) {
		    while (this.length < num.length) {
		      this.words[this.length++] = 0;
		    }

		    for (var i = 0; i < num.length; i++) {
		      this.words[i] = this.words[i] | num.words[i];
		    }

		    return this.strip();
		  };

		  BN.prototype.ior = function ior (num) {
		    assert((this.negative | num.negative) === 0);
		    return this.iuor(num);
		  };

		  // Or `num` with `this`
		  BN.prototype.or = function or (num) {
		    if (this.length > num.length) return this.clone().ior(num);
		    return num.clone().ior(this);
		  };

		  BN.prototype.uor = function uor (num) {
		    if (this.length > num.length) return this.clone().iuor(num);
		    return num.clone().iuor(this);
		  };

		  // And `num` with `this` in-place
		  BN.prototype.iuand = function iuand (num) {
		    // b = min-length(num, this)
		    var b;
		    if (this.length > num.length) {
		      b = num;
		    } else {
		      b = this;
		    }

		    for (var i = 0; i < b.length; i++) {
		      this.words[i] = this.words[i] & num.words[i];
		    }

		    this.length = b.length;

		    return this.strip();
		  };

		  BN.prototype.iand = function iand (num) {
		    assert((this.negative | num.negative) === 0);
		    return this.iuand(num);
		  };

		  // And `num` with `this`
		  BN.prototype.and = function and (num) {
		    if (this.length > num.length) return this.clone().iand(num);
		    return num.clone().iand(this);
		  };

		  BN.prototype.uand = function uand (num) {
		    if (this.length > num.length) return this.clone().iuand(num);
		    return num.clone().iuand(this);
		  };

		  // Xor `num` with `this` in-place
		  BN.prototype.iuxor = function iuxor (num) {
		    // a.length > b.length
		    var a;
		    var b;
		    if (this.length > num.length) {
		      a = this;
		      b = num;
		    } else {
		      a = num;
		      b = this;
		    }

		    for (var i = 0; i < b.length; i++) {
		      this.words[i] = a.words[i] ^ b.words[i];
		    }

		    if (this !== a) {
		      for (; i < a.length; i++) {
		        this.words[i] = a.words[i];
		      }
		    }

		    this.length = a.length;

		    return this.strip();
		  };

		  BN.prototype.ixor = function ixor (num) {
		    assert((this.negative | num.negative) === 0);
		    return this.iuxor(num);
		  };

		  // Xor `num` with `this`
		  BN.prototype.xor = function xor (num) {
		    if (this.length > num.length) return this.clone().ixor(num);
		    return num.clone().ixor(this);
		  };

		  BN.prototype.uxor = function uxor (num) {
		    if (this.length > num.length) return this.clone().iuxor(num);
		    return num.clone().iuxor(this);
		  };

		  // Not ``this`` with ``width`` bitwidth
		  BN.prototype.inotn = function inotn (width) {
		    assert(typeof width === 'number' && width >= 0);

		    var bytesNeeded = Math.ceil(width / 26) | 0;
		    var bitsLeft = width % 26;

		    // Extend the buffer with leading zeroes
		    this._expand(bytesNeeded);

		    if (bitsLeft > 0) {
		      bytesNeeded--;
		    }

		    // Handle complete words
		    for (var i = 0; i < bytesNeeded; i++) {
		      this.words[i] = ~this.words[i] & 0x3ffffff;
		    }

		    // Handle the residue
		    if (bitsLeft > 0) {
		      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
		    }

		    // And remove leading zeroes
		    return this.strip();
		  };

		  BN.prototype.notn = function notn (width) {
		    return this.clone().inotn(width);
		  };

		  // Set `bit` of `this`
		  BN.prototype.setn = function setn (bit, val) {
		    assert(typeof bit === 'number' && bit >= 0);

		    var off = (bit / 26) | 0;
		    var wbit = bit % 26;

		    this._expand(off + 1);

		    if (val) {
		      this.words[off] = this.words[off] | (1 << wbit);
		    } else {
		      this.words[off] = this.words[off] & ~(1 << wbit);
		    }

		    return this.strip();
		  };

		  // Add `num` to `this` in-place
		  BN.prototype.iadd = function iadd (num) {
		    var r;

		    // negative + positive
		    if (this.negative !== 0 && num.negative === 0) {
		      this.negative = 0;
		      r = this.isub(num);
		      this.negative ^= 1;
		      return this._normSign();

		    // positive + negative
		    } else if (this.negative === 0 && num.negative !== 0) {
		      num.negative = 0;
		      r = this.isub(num);
		      num.negative = 1;
		      return r._normSign();
		    }

		    // a.length > b.length
		    var a, b;
		    if (this.length > num.length) {
		      a = this;
		      b = num;
		    } else {
		      a = num;
		      b = this;
		    }

		    var carry = 0;
		    for (var i = 0; i < b.length; i++) {
		      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
		      this.words[i] = r & 0x3ffffff;
		      carry = r >>> 26;
		    }
		    for (; carry !== 0 && i < a.length; i++) {
		      r = (a.words[i] | 0) + carry;
		      this.words[i] = r & 0x3ffffff;
		      carry = r >>> 26;
		    }

		    this.length = a.length;
		    if (carry !== 0) {
		      this.words[this.length] = carry;
		      this.length++;
		    // Copy the rest of the words
		    } else if (a !== this) {
		      for (; i < a.length; i++) {
		        this.words[i] = a.words[i];
		      }
		    }

		    return this;
		  };

		  // Add `num` to `this`
		  BN.prototype.add = function add (num) {
		    var res;
		    if (num.negative !== 0 && this.negative === 0) {
		      num.negative = 0;
		      res = this.sub(num);
		      num.negative ^= 1;
		      return res;
		    } else if (num.negative === 0 && this.negative !== 0) {
		      this.negative = 0;
		      res = num.sub(this);
		      this.negative = 1;
		      return res;
		    }

		    if (this.length > num.length) return this.clone().iadd(num);

		    return num.clone().iadd(this);
		  };

		  // Subtract `num` from `this` in-place
		  BN.prototype.isub = function isub (num) {
		    // this - (-num) = this + num
		    if (num.negative !== 0) {
		      num.negative = 0;
		      var r = this.iadd(num);
		      num.negative = 1;
		      return r._normSign();

		    // -this - num = -(this + num)
		    } else if (this.negative !== 0) {
		      this.negative = 0;
		      this.iadd(num);
		      this.negative = 1;
		      return this._normSign();
		    }

		    // At this point both numbers are positive
		    var cmp = this.cmp(num);

		    // Optimization - zeroify
		    if (cmp === 0) {
		      this.negative = 0;
		      this.length = 1;
		      this.words[0] = 0;
		      return this;
		    }

		    // a > b
		    var a, b;
		    if (cmp > 0) {
		      a = this;
		      b = num;
		    } else {
		      a = num;
		      b = this;
		    }

		    var carry = 0;
		    for (var i = 0; i < b.length; i++) {
		      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
		      carry = r >> 26;
		      this.words[i] = r & 0x3ffffff;
		    }
		    for (; carry !== 0 && i < a.length; i++) {
		      r = (a.words[i] | 0) + carry;
		      carry = r >> 26;
		      this.words[i] = r & 0x3ffffff;
		    }

		    // Copy rest of the words
		    if (carry === 0 && i < a.length && a !== this) {
		      for (; i < a.length; i++) {
		        this.words[i] = a.words[i];
		      }
		    }

		    this.length = Math.max(this.length, i);

		    if (a !== this) {
		      this.negative = 1;
		    }

		    return this.strip();
		  };

		  // Subtract `num` from `this`
		  BN.prototype.sub = function sub (num) {
		    return this.clone().isub(num);
		  };

		  function smallMulTo (self, num, out) {
		    out.negative = num.negative ^ self.negative;
		    var len = (self.length + num.length) | 0;
		    out.length = len;
		    len = (len - 1) | 0;

		    // Peel one iteration (compiler can't do it, because of code complexity)
		    var a = self.words[0] | 0;
		    var b = num.words[0] | 0;
		    var r = a * b;

		    var lo = r & 0x3ffffff;
		    var carry = (r / 0x4000000) | 0;
		    out.words[0] = lo;

		    for (var k = 1; k < len; k++) {
		      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
		      // note that ncarry could be >= 0x3ffffff
		      var ncarry = carry >>> 26;
		      var rword = carry & 0x3ffffff;
		      var maxJ = Math.min(k, num.length - 1);
		      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
		        var i = (k - j) | 0;
		        a = self.words[i] | 0;
		        b = num.words[j] | 0;
		        r = a * b + rword;
		        ncarry += (r / 0x4000000) | 0;
		        rword = r & 0x3ffffff;
		      }
		      out.words[k] = rword | 0;
		      carry = ncarry | 0;
		    }
		    if (carry !== 0) {
		      out.words[k] = carry | 0;
		    } else {
		      out.length--;
		    }

		    return out.strip();
		  }

		  // TODO(indutny): it may be reasonable to omit it for users who don't need
		  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
		  // multiplication (like elliptic secp256k1).
		  var comb10MulTo = function comb10MulTo (self, num, out) {
		    var a = self.words;
		    var b = num.words;
		    var o = out.words;
		    var c = 0;
		    var lo;
		    var mid;
		    var hi;
		    var a0 = a[0] | 0;
		    var al0 = a0 & 0x1fff;
		    var ah0 = a0 >>> 13;
		    var a1 = a[1] | 0;
		    var al1 = a1 & 0x1fff;
		    var ah1 = a1 >>> 13;
		    var a2 = a[2] | 0;
		    var al2 = a2 & 0x1fff;
		    var ah2 = a2 >>> 13;
		    var a3 = a[3] | 0;
		    var al3 = a3 & 0x1fff;
		    var ah3 = a3 >>> 13;
		    var a4 = a[4] | 0;
		    var al4 = a4 & 0x1fff;
		    var ah4 = a4 >>> 13;
		    var a5 = a[5] | 0;
		    var al5 = a5 & 0x1fff;
		    var ah5 = a5 >>> 13;
		    var a6 = a[6] | 0;
		    var al6 = a6 & 0x1fff;
		    var ah6 = a6 >>> 13;
		    var a7 = a[7] | 0;
		    var al7 = a7 & 0x1fff;
		    var ah7 = a7 >>> 13;
		    var a8 = a[8] | 0;
		    var al8 = a8 & 0x1fff;
		    var ah8 = a8 >>> 13;
		    var a9 = a[9] | 0;
		    var al9 = a9 & 0x1fff;
		    var ah9 = a9 >>> 13;
		    var b0 = b[0] | 0;
		    var bl0 = b0 & 0x1fff;
		    var bh0 = b0 >>> 13;
		    var b1 = b[1] | 0;
		    var bl1 = b1 & 0x1fff;
		    var bh1 = b1 >>> 13;
		    var b2 = b[2] | 0;
		    var bl2 = b2 & 0x1fff;
		    var bh2 = b2 >>> 13;
		    var b3 = b[3] | 0;
		    var bl3 = b3 & 0x1fff;
		    var bh3 = b3 >>> 13;
		    var b4 = b[4] | 0;
		    var bl4 = b4 & 0x1fff;
		    var bh4 = b4 >>> 13;
		    var b5 = b[5] | 0;
		    var bl5 = b5 & 0x1fff;
		    var bh5 = b5 >>> 13;
		    var b6 = b[6] | 0;
		    var bl6 = b6 & 0x1fff;
		    var bh6 = b6 >>> 13;
		    var b7 = b[7] | 0;
		    var bl7 = b7 & 0x1fff;
		    var bh7 = b7 >>> 13;
		    var b8 = b[8] | 0;
		    var bl8 = b8 & 0x1fff;
		    var bh8 = b8 >>> 13;
		    var b9 = b[9] | 0;
		    var bl9 = b9 & 0x1fff;
		    var bh9 = b9 >>> 13;

		    out.negative = self.negative ^ num.negative;
		    out.length = 19;
		    /* k = 0 */
		    lo = Math.imul(al0, bl0);
		    mid = Math.imul(al0, bh0);
		    mid = (mid + Math.imul(ah0, bl0)) | 0;
		    hi = Math.imul(ah0, bh0);
		    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
		    w0 &= 0x3ffffff;
		    /* k = 1 */
		    lo = Math.imul(al1, bl0);
		    mid = Math.imul(al1, bh0);
		    mid = (mid + Math.imul(ah1, bl0)) | 0;
		    hi = Math.imul(ah1, bh0);
		    lo = (lo + Math.imul(al0, bl1)) | 0;
		    mid = (mid + Math.imul(al0, bh1)) | 0;
		    mid = (mid + Math.imul(ah0, bl1)) | 0;
		    hi = (hi + Math.imul(ah0, bh1)) | 0;
		    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
		    w1 &= 0x3ffffff;
		    /* k = 2 */
		    lo = Math.imul(al2, bl0);
		    mid = Math.imul(al2, bh0);
		    mid = (mid + Math.imul(ah2, bl0)) | 0;
		    hi = Math.imul(ah2, bh0);
		    lo = (lo + Math.imul(al1, bl1)) | 0;
		    mid = (mid + Math.imul(al1, bh1)) | 0;
		    mid = (mid + Math.imul(ah1, bl1)) | 0;
		    hi = (hi + Math.imul(ah1, bh1)) | 0;
		    lo = (lo + Math.imul(al0, bl2)) | 0;
		    mid = (mid + Math.imul(al0, bh2)) | 0;
		    mid = (mid + Math.imul(ah0, bl2)) | 0;
		    hi = (hi + Math.imul(ah0, bh2)) | 0;
		    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
		    w2 &= 0x3ffffff;
		    /* k = 3 */
		    lo = Math.imul(al3, bl0);
		    mid = Math.imul(al3, bh0);
		    mid = (mid + Math.imul(ah3, bl0)) | 0;
		    hi = Math.imul(ah3, bh0);
		    lo = (lo + Math.imul(al2, bl1)) | 0;
		    mid = (mid + Math.imul(al2, bh1)) | 0;
		    mid = (mid + Math.imul(ah2, bl1)) | 0;
		    hi = (hi + Math.imul(ah2, bh1)) | 0;
		    lo = (lo + Math.imul(al1, bl2)) | 0;
		    mid = (mid + Math.imul(al1, bh2)) | 0;
		    mid = (mid + Math.imul(ah1, bl2)) | 0;
		    hi = (hi + Math.imul(ah1, bh2)) | 0;
		    lo = (lo + Math.imul(al0, bl3)) | 0;
		    mid = (mid + Math.imul(al0, bh3)) | 0;
		    mid = (mid + Math.imul(ah0, bl3)) | 0;
		    hi = (hi + Math.imul(ah0, bh3)) | 0;
		    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
		    w3 &= 0x3ffffff;
		    /* k = 4 */
		    lo = Math.imul(al4, bl0);
		    mid = Math.imul(al4, bh0);
		    mid = (mid + Math.imul(ah4, bl0)) | 0;
		    hi = Math.imul(ah4, bh0);
		    lo = (lo + Math.imul(al3, bl1)) | 0;
		    mid = (mid + Math.imul(al3, bh1)) | 0;
		    mid = (mid + Math.imul(ah3, bl1)) | 0;
		    hi = (hi + Math.imul(ah3, bh1)) | 0;
		    lo = (lo + Math.imul(al2, bl2)) | 0;
		    mid = (mid + Math.imul(al2, bh2)) | 0;
		    mid = (mid + Math.imul(ah2, bl2)) | 0;
		    hi = (hi + Math.imul(ah2, bh2)) | 0;
		    lo = (lo + Math.imul(al1, bl3)) | 0;
		    mid = (mid + Math.imul(al1, bh3)) | 0;
		    mid = (mid + Math.imul(ah1, bl3)) | 0;
		    hi = (hi + Math.imul(ah1, bh3)) | 0;
		    lo = (lo + Math.imul(al0, bl4)) | 0;
		    mid = (mid + Math.imul(al0, bh4)) | 0;
		    mid = (mid + Math.imul(ah0, bl4)) | 0;
		    hi = (hi + Math.imul(ah0, bh4)) | 0;
		    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
		    w4 &= 0x3ffffff;
		    /* k = 5 */
		    lo = Math.imul(al5, bl0);
		    mid = Math.imul(al5, bh0);
		    mid = (mid + Math.imul(ah5, bl0)) | 0;
		    hi = Math.imul(ah5, bh0);
		    lo = (lo + Math.imul(al4, bl1)) | 0;
		    mid = (mid + Math.imul(al4, bh1)) | 0;
		    mid = (mid + Math.imul(ah4, bl1)) | 0;
		    hi = (hi + Math.imul(ah4, bh1)) | 0;
		    lo = (lo + Math.imul(al3, bl2)) | 0;
		    mid = (mid + Math.imul(al3, bh2)) | 0;
		    mid = (mid + Math.imul(ah3, bl2)) | 0;
		    hi = (hi + Math.imul(ah3, bh2)) | 0;
		    lo = (lo + Math.imul(al2, bl3)) | 0;
		    mid = (mid + Math.imul(al2, bh3)) | 0;
		    mid = (mid + Math.imul(ah2, bl3)) | 0;
		    hi = (hi + Math.imul(ah2, bh3)) | 0;
		    lo = (lo + Math.imul(al1, bl4)) | 0;
		    mid = (mid + Math.imul(al1, bh4)) | 0;
		    mid = (mid + Math.imul(ah1, bl4)) | 0;
		    hi = (hi + Math.imul(ah1, bh4)) | 0;
		    lo = (lo + Math.imul(al0, bl5)) | 0;
		    mid = (mid + Math.imul(al0, bh5)) | 0;
		    mid = (mid + Math.imul(ah0, bl5)) | 0;
		    hi = (hi + Math.imul(ah0, bh5)) | 0;
		    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
		    w5 &= 0x3ffffff;
		    /* k = 6 */
		    lo = Math.imul(al6, bl0);
		    mid = Math.imul(al6, bh0);
		    mid = (mid + Math.imul(ah6, bl0)) | 0;
		    hi = Math.imul(ah6, bh0);
		    lo = (lo + Math.imul(al5, bl1)) | 0;
		    mid = (mid + Math.imul(al5, bh1)) | 0;
		    mid = (mid + Math.imul(ah5, bl1)) | 0;
		    hi = (hi + Math.imul(ah5, bh1)) | 0;
		    lo = (lo + Math.imul(al4, bl2)) | 0;
		    mid = (mid + Math.imul(al4, bh2)) | 0;
		    mid = (mid + Math.imul(ah4, bl2)) | 0;
		    hi = (hi + Math.imul(ah4, bh2)) | 0;
		    lo = (lo + Math.imul(al3, bl3)) | 0;
		    mid = (mid + Math.imul(al3, bh3)) | 0;
		    mid = (mid + Math.imul(ah3, bl3)) | 0;
		    hi = (hi + Math.imul(ah3, bh3)) | 0;
		    lo = (lo + Math.imul(al2, bl4)) | 0;
		    mid = (mid + Math.imul(al2, bh4)) | 0;
		    mid = (mid + Math.imul(ah2, bl4)) | 0;
		    hi = (hi + Math.imul(ah2, bh4)) | 0;
		    lo = (lo + Math.imul(al1, bl5)) | 0;
		    mid = (mid + Math.imul(al1, bh5)) | 0;
		    mid = (mid + Math.imul(ah1, bl5)) | 0;
		    hi = (hi + Math.imul(ah1, bh5)) | 0;
		    lo = (lo + Math.imul(al0, bl6)) | 0;
		    mid = (mid + Math.imul(al0, bh6)) | 0;
		    mid = (mid + Math.imul(ah0, bl6)) | 0;
		    hi = (hi + Math.imul(ah0, bh6)) | 0;
		    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
		    w6 &= 0x3ffffff;
		    /* k = 7 */
		    lo = Math.imul(al7, bl0);
		    mid = Math.imul(al7, bh0);
		    mid = (mid + Math.imul(ah7, bl0)) | 0;
		    hi = Math.imul(ah7, bh0);
		    lo = (lo + Math.imul(al6, bl1)) | 0;
		    mid = (mid + Math.imul(al6, bh1)) | 0;
		    mid = (mid + Math.imul(ah6, bl1)) | 0;
		    hi = (hi + Math.imul(ah6, bh1)) | 0;
		    lo = (lo + Math.imul(al5, bl2)) | 0;
		    mid = (mid + Math.imul(al5, bh2)) | 0;
		    mid = (mid + Math.imul(ah5, bl2)) | 0;
		    hi = (hi + Math.imul(ah5, bh2)) | 0;
		    lo = (lo + Math.imul(al4, bl3)) | 0;
		    mid = (mid + Math.imul(al4, bh3)) | 0;
		    mid = (mid + Math.imul(ah4, bl3)) | 0;
		    hi = (hi + Math.imul(ah4, bh3)) | 0;
		    lo = (lo + Math.imul(al3, bl4)) | 0;
		    mid = (mid + Math.imul(al3, bh4)) | 0;
		    mid = (mid + Math.imul(ah3, bl4)) | 0;
		    hi = (hi + Math.imul(ah3, bh4)) | 0;
		    lo = (lo + Math.imul(al2, bl5)) | 0;
		    mid = (mid + Math.imul(al2, bh5)) | 0;
		    mid = (mid + Math.imul(ah2, bl5)) | 0;
		    hi = (hi + Math.imul(ah2, bh5)) | 0;
		    lo = (lo + Math.imul(al1, bl6)) | 0;
		    mid = (mid + Math.imul(al1, bh6)) | 0;
		    mid = (mid + Math.imul(ah1, bl6)) | 0;
		    hi = (hi + Math.imul(ah1, bh6)) | 0;
		    lo = (lo + Math.imul(al0, bl7)) | 0;
		    mid = (mid + Math.imul(al0, bh7)) | 0;
		    mid = (mid + Math.imul(ah0, bl7)) | 0;
		    hi = (hi + Math.imul(ah0, bh7)) | 0;
		    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
		    w7 &= 0x3ffffff;
		    /* k = 8 */
		    lo = Math.imul(al8, bl0);
		    mid = Math.imul(al8, bh0);
		    mid = (mid + Math.imul(ah8, bl0)) | 0;
		    hi = Math.imul(ah8, bh0);
		    lo = (lo + Math.imul(al7, bl1)) | 0;
		    mid = (mid + Math.imul(al7, bh1)) | 0;
		    mid = (mid + Math.imul(ah7, bl1)) | 0;
		    hi = (hi + Math.imul(ah7, bh1)) | 0;
		    lo = (lo + Math.imul(al6, bl2)) | 0;
		    mid = (mid + Math.imul(al6, bh2)) | 0;
		    mid = (mid + Math.imul(ah6, bl2)) | 0;
		    hi = (hi + Math.imul(ah6, bh2)) | 0;
		    lo = (lo + Math.imul(al5, bl3)) | 0;
		    mid = (mid + Math.imul(al5, bh3)) | 0;
		    mid = (mid + Math.imul(ah5, bl3)) | 0;
		    hi = (hi + Math.imul(ah5, bh3)) | 0;
		    lo = (lo + Math.imul(al4, bl4)) | 0;
		    mid = (mid + Math.imul(al4, bh4)) | 0;
		    mid = (mid + Math.imul(ah4, bl4)) | 0;
		    hi = (hi + Math.imul(ah4, bh4)) | 0;
		    lo = (lo + Math.imul(al3, bl5)) | 0;
		    mid = (mid + Math.imul(al3, bh5)) | 0;
		    mid = (mid + Math.imul(ah3, bl5)) | 0;
		    hi = (hi + Math.imul(ah3, bh5)) | 0;
		    lo = (lo + Math.imul(al2, bl6)) | 0;
		    mid = (mid + Math.imul(al2, bh6)) | 0;
		    mid = (mid + Math.imul(ah2, bl6)) | 0;
		    hi = (hi + Math.imul(ah2, bh6)) | 0;
		    lo = (lo + Math.imul(al1, bl7)) | 0;
		    mid = (mid + Math.imul(al1, bh7)) | 0;
		    mid = (mid + Math.imul(ah1, bl7)) | 0;
		    hi = (hi + Math.imul(ah1, bh7)) | 0;
		    lo = (lo + Math.imul(al0, bl8)) | 0;
		    mid = (mid + Math.imul(al0, bh8)) | 0;
		    mid = (mid + Math.imul(ah0, bl8)) | 0;
		    hi = (hi + Math.imul(ah0, bh8)) | 0;
		    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
		    w8 &= 0x3ffffff;
		    /* k = 9 */
		    lo = Math.imul(al9, bl0);
		    mid = Math.imul(al9, bh0);
		    mid = (mid + Math.imul(ah9, bl0)) | 0;
		    hi = Math.imul(ah9, bh0);
		    lo = (lo + Math.imul(al8, bl1)) | 0;
		    mid = (mid + Math.imul(al8, bh1)) | 0;
		    mid = (mid + Math.imul(ah8, bl1)) | 0;
		    hi = (hi + Math.imul(ah8, bh1)) | 0;
		    lo = (lo + Math.imul(al7, bl2)) | 0;
		    mid = (mid + Math.imul(al7, bh2)) | 0;
		    mid = (mid + Math.imul(ah7, bl2)) | 0;
		    hi = (hi + Math.imul(ah7, bh2)) | 0;
		    lo = (lo + Math.imul(al6, bl3)) | 0;
		    mid = (mid + Math.imul(al6, bh3)) | 0;
		    mid = (mid + Math.imul(ah6, bl3)) | 0;
		    hi = (hi + Math.imul(ah6, bh3)) | 0;
		    lo = (lo + Math.imul(al5, bl4)) | 0;
		    mid = (mid + Math.imul(al5, bh4)) | 0;
		    mid = (mid + Math.imul(ah5, bl4)) | 0;
		    hi = (hi + Math.imul(ah5, bh4)) | 0;
		    lo = (lo + Math.imul(al4, bl5)) | 0;
		    mid = (mid + Math.imul(al4, bh5)) | 0;
		    mid = (mid + Math.imul(ah4, bl5)) | 0;
		    hi = (hi + Math.imul(ah4, bh5)) | 0;
		    lo = (lo + Math.imul(al3, bl6)) | 0;
		    mid = (mid + Math.imul(al3, bh6)) | 0;
		    mid = (mid + Math.imul(ah3, bl6)) | 0;
		    hi = (hi + Math.imul(ah3, bh6)) | 0;
		    lo = (lo + Math.imul(al2, bl7)) | 0;
		    mid = (mid + Math.imul(al2, bh7)) | 0;
		    mid = (mid + Math.imul(ah2, bl7)) | 0;
		    hi = (hi + Math.imul(ah2, bh7)) | 0;
		    lo = (lo + Math.imul(al1, bl8)) | 0;
		    mid = (mid + Math.imul(al1, bh8)) | 0;
		    mid = (mid + Math.imul(ah1, bl8)) | 0;
		    hi = (hi + Math.imul(ah1, bh8)) | 0;
		    lo = (lo + Math.imul(al0, bl9)) | 0;
		    mid = (mid + Math.imul(al0, bh9)) | 0;
		    mid = (mid + Math.imul(ah0, bl9)) | 0;
		    hi = (hi + Math.imul(ah0, bh9)) | 0;
		    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
		    w9 &= 0x3ffffff;
		    /* k = 10 */
		    lo = Math.imul(al9, bl1);
		    mid = Math.imul(al9, bh1);
		    mid = (mid + Math.imul(ah9, bl1)) | 0;
		    hi = Math.imul(ah9, bh1);
		    lo = (lo + Math.imul(al8, bl2)) | 0;
		    mid = (mid + Math.imul(al8, bh2)) | 0;
		    mid = (mid + Math.imul(ah8, bl2)) | 0;
		    hi = (hi + Math.imul(ah8, bh2)) | 0;
		    lo = (lo + Math.imul(al7, bl3)) | 0;
		    mid = (mid + Math.imul(al7, bh3)) | 0;
		    mid = (mid + Math.imul(ah7, bl3)) | 0;
		    hi = (hi + Math.imul(ah7, bh3)) | 0;
		    lo = (lo + Math.imul(al6, bl4)) | 0;
		    mid = (mid + Math.imul(al6, bh4)) | 0;
		    mid = (mid + Math.imul(ah6, bl4)) | 0;
		    hi = (hi + Math.imul(ah6, bh4)) | 0;
		    lo = (lo + Math.imul(al5, bl5)) | 0;
		    mid = (mid + Math.imul(al5, bh5)) | 0;
		    mid = (mid + Math.imul(ah5, bl5)) | 0;
		    hi = (hi + Math.imul(ah5, bh5)) | 0;
		    lo = (lo + Math.imul(al4, bl6)) | 0;
		    mid = (mid + Math.imul(al4, bh6)) | 0;
		    mid = (mid + Math.imul(ah4, bl6)) | 0;
		    hi = (hi + Math.imul(ah4, bh6)) | 0;
		    lo = (lo + Math.imul(al3, bl7)) | 0;
		    mid = (mid + Math.imul(al3, bh7)) | 0;
		    mid = (mid + Math.imul(ah3, bl7)) | 0;
		    hi = (hi + Math.imul(ah3, bh7)) | 0;
		    lo = (lo + Math.imul(al2, bl8)) | 0;
		    mid = (mid + Math.imul(al2, bh8)) | 0;
		    mid = (mid + Math.imul(ah2, bl8)) | 0;
		    hi = (hi + Math.imul(ah2, bh8)) | 0;
		    lo = (lo + Math.imul(al1, bl9)) | 0;
		    mid = (mid + Math.imul(al1, bh9)) | 0;
		    mid = (mid + Math.imul(ah1, bl9)) | 0;
		    hi = (hi + Math.imul(ah1, bh9)) | 0;
		    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
		    w10 &= 0x3ffffff;
		    /* k = 11 */
		    lo = Math.imul(al9, bl2);
		    mid = Math.imul(al9, bh2);
		    mid = (mid + Math.imul(ah9, bl2)) | 0;
		    hi = Math.imul(ah9, bh2);
		    lo = (lo + Math.imul(al8, bl3)) | 0;
		    mid = (mid + Math.imul(al8, bh3)) | 0;
		    mid = (mid + Math.imul(ah8, bl3)) | 0;
		    hi = (hi + Math.imul(ah8, bh3)) | 0;
		    lo = (lo + Math.imul(al7, bl4)) | 0;
		    mid = (mid + Math.imul(al7, bh4)) | 0;
		    mid = (mid + Math.imul(ah7, bl4)) | 0;
		    hi = (hi + Math.imul(ah7, bh4)) | 0;
		    lo = (lo + Math.imul(al6, bl5)) | 0;
		    mid = (mid + Math.imul(al6, bh5)) | 0;
		    mid = (mid + Math.imul(ah6, bl5)) | 0;
		    hi = (hi + Math.imul(ah6, bh5)) | 0;
		    lo = (lo + Math.imul(al5, bl6)) | 0;
		    mid = (mid + Math.imul(al5, bh6)) | 0;
		    mid = (mid + Math.imul(ah5, bl6)) | 0;
		    hi = (hi + Math.imul(ah5, bh6)) | 0;
		    lo = (lo + Math.imul(al4, bl7)) | 0;
		    mid = (mid + Math.imul(al4, bh7)) | 0;
		    mid = (mid + Math.imul(ah4, bl7)) | 0;
		    hi = (hi + Math.imul(ah4, bh7)) | 0;
		    lo = (lo + Math.imul(al3, bl8)) | 0;
		    mid = (mid + Math.imul(al3, bh8)) | 0;
		    mid = (mid + Math.imul(ah3, bl8)) | 0;
		    hi = (hi + Math.imul(ah3, bh8)) | 0;
		    lo = (lo + Math.imul(al2, bl9)) | 0;
		    mid = (mid + Math.imul(al2, bh9)) | 0;
		    mid = (mid + Math.imul(ah2, bl9)) | 0;
		    hi = (hi + Math.imul(ah2, bh9)) | 0;
		    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
		    w11 &= 0x3ffffff;
		    /* k = 12 */
		    lo = Math.imul(al9, bl3);
		    mid = Math.imul(al9, bh3);
		    mid = (mid + Math.imul(ah9, bl3)) | 0;
		    hi = Math.imul(ah9, bh3);
		    lo = (lo + Math.imul(al8, bl4)) | 0;
		    mid = (mid + Math.imul(al8, bh4)) | 0;
		    mid = (mid + Math.imul(ah8, bl4)) | 0;
		    hi = (hi + Math.imul(ah8, bh4)) | 0;
		    lo = (lo + Math.imul(al7, bl5)) | 0;
		    mid = (mid + Math.imul(al7, bh5)) | 0;
		    mid = (mid + Math.imul(ah7, bl5)) | 0;
		    hi = (hi + Math.imul(ah7, bh5)) | 0;
		    lo = (lo + Math.imul(al6, bl6)) | 0;
		    mid = (mid + Math.imul(al6, bh6)) | 0;
		    mid = (mid + Math.imul(ah6, bl6)) | 0;
		    hi = (hi + Math.imul(ah6, bh6)) | 0;
		    lo = (lo + Math.imul(al5, bl7)) | 0;
		    mid = (mid + Math.imul(al5, bh7)) | 0;
		    mid = (mid + Math.imul(ah5, bl7)) | 0;
		    hi = (hi + Math.imul(ah5, bh7)) | 0;
		    lo = (lo + Math.imul(al4, bl8)) | 0;
		    mid = (mid + Math.imul(al4, bh8)) | 0;
		    mid = (mid + Math.imul(ah4, bl8)) | 0;
		    hi = (hi + Math.imul(ah4, bh8)) | 0;
		    lo = (lo + Math.imul(al3, bl9)) | 0;
		    mid = (mid + Math.imul(al3, bh9)) | 0;
		    mid = (mid + Math.imul(ah3, bl9)) | 0;
		    hi = (hi + Math.imul(ah3, bh9)) | 0;
		    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
		    w12 &= 0x3ffffff;
		    /* k = 13 */
		    lo = Math.imul(al9, bl4);
		    mid = Math.imul(al9, bh4);
		    mid = (mid + Math.imul(ah9, bl4)) | 0;
		    hi = Math.imul(ah9, bh4);
		    lo = (lo + Math.imul(al8, bl5)) | 0;
		    mid = (mid + Math.imul(al8, bh5)) | 0;
		    mid = (mid + Math.imul(ah8, bl5)) | 0;
		    hi = (hi + Math.imul(ah8, bh5)) | 0;
		    lo = (lo + Math.imul(al7, bl6)) | 0;
		    mid = (mid + Math.imul(al7, bh6)) | 0;
		    mid = (mid + Math.imul(ah7, bl6)) | 0;
		    hi = (hi + Math.imul(ah7, bh6)) | 0;
		    lo = (lo + Math.imul(al6, bl7)) | 0;
		    mid = (mid + Math.imul(al6, bh7)) | 0;
		    mid = (mid + Math.imul(ah6, bl7)) | 0;
		    hi = (hi + Math.imul(ah6, bh7)) | 0;
		    lo = (lo + Math.imul(al5, bl8)) | 0;
		    mid = (mid + Math.imul(al5, bh8)) | 0;
		    mid = (mid + Math.imul(ah5, bl8)) | 0;
		    hi = (hi + Math.imul(ah5, bh8)) | 0;
		    lo = (lo + Math.imul(al4, bl9)) | 0;
		    mid = (mid + Math.imul(al4, bh9)) | 0;
		    mid = (mid + Math.imul(ah4, bl9)) | 0;
		    hi = (hi + Math.imul(ah4, bh9)) | 0;
		    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
		    w13 &= 0x3ffffff;
		    /* k = 14 */
		    lo = Math.imul(al9, bl5);
		    mid = Math.imul(al9, bh5);
		    mid = (mid + Math.imul(ah9, bl5)) | 0;
		    hi = Math.imul(ah9, bh5);
		    lo = (lo + Math.imul(al8, bl6)) | 0;
		    mid = (mid + Math.imul(al8, bh6)) | 0;
		    mid = (mid + Math.imul(ah8, bl6)) | 0;
		    hi = (hi + Math.imul(ah8, bh6)) | 0;
		    lo = (lo + Math.imul(al7, bl7)) | 0;
		    mid = (mid + Math.imul(al7, bh7)) | 0;
		    mid = (mid + Math.imul(ah7, bl7)) | 0;
		    hi = (hi + Math.imul(ah7, bh7)) | 0;
		    lo = (lo + Math.imul(al6, bl8)) | 0;
		    mid = (mid + Math.imul(al6, bh8)) | 0;
		    mid = (mid + Math.imul(ah6, bl8)) | 0;
		    hi = (hi + Math.imul(ah6, bh8)) | 0;
		    lo = (lo + Math.imul(al5, bl9)) | 0;
		    mid = (mid + Math.imul(al5, bh9)) | 0;
		    mid = (mid + Math.imul(ah5, bl9)) | 0;
		    hi = (hi + Math.imul(ah5, bh9)) | 0;
		    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
		    w14 &= 0x3ffffff;
		    /* k = 15 */
		    lo = Math.imul(al9, bl6);
		    mid = Math.imul(al9, bh6);
		    mid = (mid + Math.imul(ah9, bl6)) | 0;
		    hi = Math.imul(ah9, bh6);
		    lo = (lo + Math.imul(al8, bl7)) | 0;
		    mid = (mid + Math.imul(al8, bh7)) | 0;
		    mid = (mid + Math.imul(ah8, bl7)) | 0;
		    hi = (hi + Math.imul(ah8, bh7)) | 0;
		    lo = (lo + Math.imul(al7, bl8)) | 0;
		    mid = (mid + Math.imul(al7, bh8)) | 0;
		    mid = (mid + Math.imul(ah7, bl8)) | 0;
		    hi = (hi + Math.imul(ah7, bh8)) | 0;
		    lo = (lo + Math.imul(al6, bl9)) | 0;
		    mid = (mid + Math.imul(al6, bh9)) | 0;
		    mid = (mid + Math.imul(ah6, bl9)) | 0;
		    hi = (hi + Math.imul(ah6, bh9)) | 0;
		    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
		    w15 &= 0x3ffffff;
		    /* k = 16 */
		    lo = Math.imul(al9, bl7);
		    mid = Math.imul(al9, bh7);
		    mid = (mid + Math.imul(ah9, bl7)) | 0;
		    hi = Math.imul(ah9, bh7);
		    lo = (lo + Math.imul(al8, bl8)) | 0;
		    mid = (mid + Math.imul(al8, bh8)) | 0;
		    mid = (mid + Math.imul(ah8, bl8)) | 0;
		    hi = (hi + Math.imul(ah8, bh8)) | 0;
		    lo = (lo + Math.imul(al7, bl9)) | 0;
		    mid = (mid + Math.imul(al7, bh9)) | 0;
		    mid = (mid + Math.imul(ah7, bl9)) | 0;
		    hi = (hi + Math.imul(ah7, bh9)) | 0;
		    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
		    w16 &= 0x3ffffff;
		    /* k = 17 */
		    lo = Math.imul(al9, bl8);
		    mid = Math.imul(al9, bh8);
		    mid = (mid + Math.imul(ah9, bl8)) | 0;
		    hi = Math.imul(ah9, bh8);
		    lo = (lo + Math.imul(al8, bl9)) | 0;
		    mid = (mid + Math.imul(al8, bh9)) | 0;
		    mid = (mid + Math.imul(ah8, bl9)) | 0;
		    hi = (hi + Math.imul(ah8, bh9)) | 0;
		    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
		    w17 &= 0x3ffffff;
		    /* k = 18 */
		    lo = Math.imul(al9, bl9);
		    mid = Math.imul(al9, bh9);
		    mid = (mid + Math.imul(ah9, bl9)) | 0;
		    hi = Math.imul(ah9, bh9);
		    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
		    w18 &= 0x3ffffff;
		    o[0] = w0;
		    o[1] = w1;
		    o[2] = w2;
		    o[3] = w3;
		    o[4] = w4;
		    o[5] = w5;
		    o[6] = w6;
		    o[7] = w7;
		    o[8] = w8;
		    o[9] = w9;
		    o[10] = w10;
		    o[11] = w11;
		    o[12] = w12;
		    o[13] = w13;
		    o[14] = w14;
		    o[15] = w15;
		    o[16] = w16;
		    o[17] = w17;
		    o[18] = w18;
		    if (c !== 0) {
		      o[19] = c;
		      out.length++;
		    }
		    return out;
		  };

		  // Polyfill comb
		  if (!Math.imul) {
		    comb10MulTo = smallMulTo;
		  }

		  function bigMulTo (self, num, out) {
		    out.negative = num.negative ^ self.negative;
		    out.length = self.length + num.length;

		    var carry = 0;
		    var hncarry = 0;
		    for (var k = 0; k < out.length - 1; k++) {
		      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
		      // note that ncarry could be >= 0x3ffffff
		      var ncarry = hncarry;
		      hncarry = 0;
		      var rword = carry & 0x3ffffff;
		      var maxJ = Math.min(k, num.length - 1);
		      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
		        var i = k - j;
		        var a = self.words[i] | 0;
		        var b = num.words[j] | 0;
		        var r = a * b;

		        var lo = r & 0x3ffffff;
		        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
		        lo = (lo + rword) | 0;
		        rword = lo & 0x3ffffff;
		        ncarry = (ncarry + (lo >>> 26)) | 0;

		        hncarry += ncarry >>> 26;
		        ncarry &= 0x3ffffff;
		      }
		      out.words[k] = rword;
		      carry = ncarry;
		      ncarry = hncarry;
		    }
		    if (carry !== 0) {
		      out.words[k] = carry;
		    } else {
		      out.length--;
		    }

		    return out.strip();
		  }

		  function jumboMulTo (self, num, out) {
		    var fftm = new FFTM();
		    return fftm.mulp(self, num, out);
		  }

		  BN.prototype.mulTo = function mulTo (num, out) {
		    var res;
		    var len = this.length + num.length;
		    if (this.length === 10 && num.length === 10) {
		      res = comb10MulTo(this, num, out);
		    } else if (len < 63) {
		      res = smallMulTo(this, num, out);
		    } else if (len < 1024) {
		      res = bigMulTo(this, num, out);
		    } else {
		      res = jumboMulTo(this, num, out);
		    }

		    return res;
		  };

		  // Cooley-Tukey algorithm for FFT
		  // slightly revisited to rely on looping instead of recursion

		  function FFTM (x, y) {
		    this.x = x;
		    this.y = y;
		  }

		  FFTM.prototype.makeRBT = function makeRBT (N) {
		    var t = new Array(N);
		    var l = BN.prototype._countBits(N) - 1;
		    for (var i = 0; i < N; i++) {
		      t[i] = this.revBin(i, l, N);
		    }

		    return t;
		  };

		  // Returns binary-reversed representation of `x`
		  FFTM.prototype.revBin = function revBin (x, l, N) {
		    if (x === 0 || x === N - 1) return x;

		    var rb = 0;
		    for (var i = 0; i < l; i++) {
		      rb |= (x & 1) << (l - i - 1);
		      x >>= 1;
		    }

		    return rb;
		  };

		  // Performs "tweedling" phase, therefore 'emulating'
		  // behaviour of the recursive algorithm
		  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
		    for (var i = 0; i < N; i++) {
		      rtws[i] = rws[rbt[i]];
		      itws[i] = iws[rbt[i]];
		    }
		  };

		  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
		    this.permute(rbt, rws, iws, rtws, itws, N);

		    for (var s = 1; s < N; s <<= 1) {
		      var l = s << 1;

		      var rtwdf = Math.cos(2 * Math.PI / l);
		      var itwdf = Math.sin(2 * Math.PI / l);

		      for (var p = 0; p < N; p += l) {
		        var rtwdf_ = rtwdf;
		        var itwdf_ = itwdf;

		        for (var j = 0; j < s; j++) {
		          var re = rtws[p + j];
		          var ie = itws[p + j];

		          var ro = rtws[p + j + s];
		          var io = itws[p + j + s];

		          var rx = rtwdf_ * ro - itwdf_ * io;

		          io = rtwdf_ * io + itwdf_ * ro;
		          ro = rx;

		          rtws[p + j] = re + ro;
		          itws[p + j] = ie + io;

		          rtws[p + j + s] = re - ro;
		          itws[p + j + s] = ie - io;

		          /* jshint maxdepth : false */
		          if (j !== l) {
		            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

		            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
		            rtwdf_ = rx;
		          }
		        }
		      }
		    }
		  };

		  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
		    var N = Math.max(m, n) | 1;
		    var odd = N & 1;
		    var i = 0;
		    for (N = N / 2 | 0; N; N = N >>> 1) {
		      i++;
		    }

		    return 1 << i + 1 + odd;
		  };

		  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
		    if (N <= 1) return;

		    for (var i = 0; i < N / 2; i++) {
		      var t = rws[i];

		      rws[i] = rws[N - i - 1];
		      rws[N - i - 1] = t;

		      t = iws[i];

		      iws[i] = -iws[N - i - 1];
		      iws[N - i - 1] = -t;
		    }
		  };

		  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
		    var carry = 0;
		    for (var i = 0; i < N / 2; i++) {
		      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
		        Math.round(ws[2 * i] / N) +
		        carry;

		      ws[i] = w & 0x3ffffff;

		      if (w < 0x4000000) {
		        carry = 0;
		      } else {
		        carry = w / 0x4000000 | 0;
		      }
		    }

		    return ws;
		  };

		  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
		    var carry = 0;
		    for (var i = 0; i < len; i++) {
		      carry = carry + (ws[i] | 0);

		      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
		      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
		    }

		    // Pad with zeroes
		    for (i = 2 * len; i < N; ++i) {
		      rws[i] = 0;
		    }

		    assert(carry === 0);
		    assert((carry & ~0x1fff) === 0);
		  };

		  FFTM.prototype.stub = function stub (N) {
		    var ph = new Array(N);
		    for (var i = 0; i < N; i++) {
		      ph[i] = 0;
		    }

		    return ph;
		  };

		  FFTM.prototype.mulp = function mulp (x, y, out) {
		    var N = 2 * this.guessLen13b(x.length, y.length);

		    var rbt = this.makeRBT(N);

		    var _ = this.stub(N);

		    var rws = new Array(N);
		    var rwst = new Array(N);
		    var iwst = new Array(N);

		    var nrws = new Array(N);
		    var nrwst = new Array(N);
		    var niwst = new Array(N);

		    var rmws = out.words;
		    rmws.length = N;

		    this.convert13b(x.words, x.length, rws, N);
		    this.convert13b(y.words, y.length, nrws, N);

		    this.transform(rws, _, rwst, iwst, N, rbt);
		    this.transform(nrws, _, nrwst, niwst, N, rbt);

		    for (var i = 0; i < N; i++) {
		      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
		      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
		      rwst[i] = rx;
		    }

		    this.conjugate(rwst, iwst, N);
		    this.transform(rwst, iwst, rmws, _, N, rbt);
		    this.conjugate(rmws, _, N);
		    this.normalize13b(rmws, N);

		    out.negative = x.negative ^ y.negative;
		    out.length = x.length + y.length;
		    return out.strip();
		  };

		  // Multiply `this` by `num`
		  BN.prototype.mul = function mul (num) {
		    var out = new BN(null);
		    out.words = new Array(this.length + num.length);
		    return this.mulTo(num, out);
		  };

		  // Multiply employing FFT
		  BN.prototype.mulf = function mulf (num) {
		    var out = new BN(null);
		    out.words = new Array(this.length + num.length);
		    return jumboMulTo(this, num, out);
		  };

		  // In-place Multiplication
		  BN.prototype.imul = function imul (num) {
		    return this.clone().mulTo(num, this);
		  };

		  BN.prototype.imuln = function imuln (num) {
		    assert(typeof num === 'number');
		    assert(num < 0x4000000);

		    // Carry
		    var carry = 0;
		    for (var i = 0; i < this.length; i++) {
		      var w = (this.words[i] | 0) * num;
		      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
		      carry >>= 26;
		      carry += (w / 0x4000000) | 0;
		      // NOTE: lo is 27bit maximum
		      carry += lo >>> 26;
		      this.words[i] = lo & 0x3ffffff;
		    }

		    if (carry !== 0) {
		      this.words[i] = carry;
		      this.length++;
		    }

		    return this;
		  };

		  BN.prototype.muln = function muln (num) {
		    return this.clone().imuln(num);
		  };

		  // `this` * `this`
		  BN.prototype.sqr = function sqr () {
		    return this.mul(this);
		  };

		  // `this` * `this` in-place
		  BN.prototype.isqr = function isqr () {
		    return this.imul(this.clone());
		  };

		  // Math.pow(`this`, `num`)
		  BN.prototype.pow = function pow (num) {
		    var w = toBitArray(num);
		    if (w.length === 0) return new BN(1);

		    // Skip leading zeroes
		    var res = this;
		    for (var i = 0; i < w.length; i++, res = res.sqr()) {
		      if (w[i] !== 0) break;
		    }

		    if (++i < w.length) {
		      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
		        if (w[i] === 0) continue;

		        res = res.mul(q);
		      }
		    }

		    return res;
		  };

		  // Shift-left in-place
		  BN.prototype.iushln = function iushln (bits) {
		    assert(typeof bits === 'number' && bits >= 0);
		    var r = bits % 26;
		    var s = (bits - r) / 26;
		    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
		    var i;

		    if (r !== 0) {
		      var carry = 0;

		      for (i = 0; i < this.length; i++) {
		        var newCarry = this.words[i] & carryMask;
		        var c = ((this.words[i] | 0) - newCarry) << r;
		        this.words[i] = c | carry;
		        carry = newCarry >>> (26 - r);
		      }

		      if (carry) {
		        this.words[i] = carry;
		        this.length++;
		      }
		    }

		    if (s !== 0) {
		      for (i = this.length - 1; i >= 0; i--) {
		        this.words[i + s] = this.words[i];
		      }

		      for (i = 0; i < s; i++) {
		        this.words[i] = 0;
		      }

		      this.length += s;
		    }

		    return this.strip();
		  };

		  BN.prototype.ishln = function ishln (bits) {
		    // TODO(indutny): implement me
		    assert(this.negative === 0);
		    return this.iushln(bits);
		  };

		  // Shift-right in-place
		  // NOTE: `hint` is a lowest bit before trailing zeroes
		  // NOTE: if `extended` is present - it will be filled with destroyed bits
		  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
		    assert(typeof bits === 'number' && bits >= 0);
		    var h;
		    if (hint) {
		      h = (hint - (hint % 26)) / 26;
		    } else {
		      h = 0;
		    }

		    var r = bits % 26;
		    var s = Math.min((bits - r) / 26, this.length);
		    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
		    var maskedWords = extended;

		    h -= s;
		    h = Math.max(0, h);

		    // Extended mode, copy masked part
		    if (maskedWords) {
		      for (var i = 0; i < s; i++) {
		        maskedWords.words[i] = this.words[i];
		      }
		      maskedWords.length = s;
		    }

		    if (s === 0) ; else if (this.length > s) {
		      this.length -= s;
		      for (i = 0; i < this.length; i++) {
		        this.words[i] = this.words[i + s];
		      }
		    } else {
		      this.words[0] = 0;
		      this.length = 1;
		    }

		    var carry = 0;
		    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
		      var word = this.words[i] | 0;
		      this.words[i] = (carry << (26 - r)) | (word >>> r);
		      carry = word & mask;
		    }

		    // Push carried bits as a mask
		    if (maskedWords && carry !== 0) {
		      maskedWords.words[maskedWords.length++] = carry;
		    }

		    if (this.length === 0) {
		      this.words[0] = 0;
		      this.length = 1;
		    }

		    return this.strip();
		  };

		  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
		    // TODO(indutny): implement me
		    assert(this.negative === 0);
		    return this.iushrn(bits, hint, extended);
		  };

		  // Shift-left
		  BN.prototype.shln = function shln (bits) {
		    return this.clone().ishln(bits);
		  };

		  BN.prototype.ushln = function ushln (bits) {
		    return this.clone().iushln(bits);
		  };

		  // Shift-right
		  BN.prototype.shrn = function shrn (bits) {
		    return this.clone().ishrn(bits);
		  };

		  BN.prototype.ushrn = function ushrn (bits) {
		    return this.clone().iushrn(bits);
		  };

		  // Test if n bit is set
		  BN.prototype.testn = function testn (bit) {
		    assert(typeof bit === 'number' && bit >= 0);
		    var r = bit % 26;
		    var s = (bit - r) / 26;
		    var q = 1 << r;

		    // Fast case: bit is much higher than all existing words
		    if (this.length <= s) return false;

		    // Check bit and return
		    var w = this.words[s];

		    return !!(w & q);
		  };

		  // Return only lowers bits of number (in-place)
		  BN.prototype.imaskn = function imaskn (bits) {
		    assert(typeof bits === 'number' && bits >= 0);
		    var r = bits % 26;
		    var s = (bits - r) / 26;

		    assert(this.negative === 0, 'imaskn works only with positive numbers');

		    if (this.length <= s) {
		      return this;
		    }

		    if (r !== 0) {
		      s++;
		    }
		    this.length = Math.min(s, this.length);

		    if (r !== 0) {
		      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
		      this.words[this.length - 1] &= mask;
		    }

		    return this.strip();
		  };

		  // Return only lowers bits of number
		  BN.prototype.maskn = function maskn (bits) {
		    return this.clone().imaskn(bits);
		  };

		  // Add plain number `num` to `this`
		  BN.prototype.iaddn = function iaddn (num) {
		    assert(typeof num === 'number');
		    assert(num < 0x4000000);
		    if (num < 0) return this.isubn(-num);

		    // Possible sign change
		    if (this.negative !== 0) {
		      if (this.length === 1 && (this.words[0] | 0) < num) {
		        this.words[0] = num - (this.words[0] | 0);
		        this.negative = 0;
		        return this;
		      }

		      this.negative = 0;
		      this.isubn(num);
		      this.negative = 1;
		      return this;
		    }

		    // Add without checks
		    return this._iaddn(num);
		  };

		  BN.prototype._iaddn = function _iaddn (num) {
		    this.words[0] += num;

		    // Carry
		    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
		      this.words[i] -= 0x4000000;
		      if (i === this.length - 1) {
		        this.words[i + 1] = 1;
		      } else {
		        this.words[i + 1]++;
		      }
		    }
		    this.length = Math.max(this.length, i + 1);

		    return this;
		  };

		  // Subtract plain number `num` from `this`
		  BN.prototype.isubn = function isubn (num) {
		    assert(typeof num === 'number');
		    assert(num < 0x4000000);
		    if (num < 0) return this.iaddn(-num);

		    if (this.negative !== 0) {
		      this.negative = 0;
		      this.iaddn(num);
		      this.negative = 1;
		      return this;
		    }

		    this.words[0] -= num;

		    if (this.length === 1 && this.words[0] < 0) {
		      this.words[0] = -this.words[0];
		      this.negative = 1;
		    } else {
		      // Carry
		      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
		        this.words[i] += 0x4000000;
		        this.words[i + 1] -= 1;
		      }
		    }

		    return this.strip();
		  };

		  BN.prototype.addn = function addn (num) {
		    return this.clone().iaddn(num);
		  };

		  BN.prototype.subn = function subn (num) {
		    return this.clone().isubn(num);
		  };

		  BN.prototype.iabs = function iabs () {
		    this.negative = 0;

		    return this;
		  };

		  BN.prototype.abs = function abs () {
		    return this.clone().iabs();
		  };

		  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
		    var len = num.length + shift;
		    var i;

		    this._expand(len);

		    var w;
		    var carry = 0;
		    for (i = 0; i < num.length; i++) {
		      w = (this.words[i + shift] | 0) + carry;
		      var right = (num.words[i] | 0) * mul;
		      w -= right & 0x3ffffff;
		      carry = (w >> 26) - ((right / 0x4000000) | 0);
		      this.words[i + shift] = w & 0x3ffffff;
		    }
		    for (; i < this.length - shift; i++) {
		      w = (this.words[i + shift] | 0) + carry;
		      carry = w >> 26;
		      this.words[i + shift] = w & 0x3ffffff;
		    }

		    if (carry === 0) return this.strip();

		    // Subtraction overflow
		    assert(carry === -1);
		    carry = 0;
		    for (i = 0; i < this.length; i++) {
		      w = -(this.words[i] | 0) + carry;
		      carry = w >> 26;
		      this.words[i] = w & 0x3ffffff;
		    }
		    this.negative = 1;

		    return this.strip();
		  };

		  BN.prototype._wordDiv = function _wordDiv (num, mode) {
		    var shift = this.length - num.length;

		    var a = this.clone();
		    var b = num;

		    // Normalize
		    var bhi = b.words[b.length - 1] | 0;
		    var bhiBits = this._countBits(bhi);
		    shift = 26 - bhiBits;
		    if (shift !== 0) {
		      b = b.ushln(shift);
		      a.iushln(shift);
		      bhi = b.words[b.length - 1] | 0;
		    }

		    // Initialize quotient
		    var m = a.length - b.length;
		    var q;

		    if (mode !== 'mod') {
		      q = new BN(null);
		      q.length = m + 1;
		      q.words = new Array(q.length);
		      for (var i = 0; i < q.length; i++) {
		        q.words[i] = 0;
		      }
		    }

		    var diff = a.clone()._ishlnsubmul(b, 1, m);
		    if (diff.negative === 0) {
		      a = diff;
		      if (q) {
		        q.words[m] = 1;
		      }
		    }

		    for (var j = m - 1; j >= 0; j--) {
		      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
		        (a.words[b.length + j - 1] | 0);

		      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
		      // (0x7ffffff)
		      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

		      a._ishlnsubmul(b, qj, j);
		      while (a.negative !== 0) {
		        qj--;
		        a.negative = 0;
		        a._ishlnsubmul(b, 1, j);
		        if (!a.isZero()) {
		          a.negative ^= 1;
		        }
		      }
		      if (q) {
		        q.words[j] = qj;
		      }
		    }
		    if (q) {
		      q.strip();
		    }
		    a.strip();

		    // Denormalize
		    if (mode !== 'div' && shift !== 0) {
		      a.iushrn(shift);
		    }

		    return {
		      div: q || null,
		      mod: a
		    };
		  };

		  // NOTE: 1) `mode` can be set to `mod` to request mod only,
		  //       to `div` to request div only, or be absent to
		  //       request both div & mod
		  //       2) `positive` is true if unsigned mod is requested
		  BN.prototype.divmod = function divmod (num, mode, positive) {
		    assert(!num.isZero());

		    if (this.isZero()) {
		      return {
		        div: new BN(0),
		        mod: new BN(0)
		      };
		    }

		    var div, mod, res;
		    if (this.negative !== 0 && num.negative === 0) {
		      res = this.neg().divmod(num, mode);

		      if (mode !== 'mod') {
		        div = res.div.neg();
		      }

		      if (mode !== 'div') {
		        mod = res.mod.neg();
		        if (positive && mod.negative !== 0) {
		          mod.iadd(num);
		        }
		      }

		      return {
		        div: div,
		        mod: mod
		      };
		    }

		    if (this.negative === 0 && num.negative !== 0) {
		      res = this.divmod(num.neg(), mode);

		      if (mode !== 'mod') {
		        div = res.div.neg();
		      }

		      return {
		        div: div,
		        mod: res.mod
		      };
		    }

		    if ((this.negative & num.negative) !== 0) {
		      res = this.neg().divmod(num.neg(), mode);

		      if (mode !== 'div') {
		        mod = res.mod.neg();
		        if (positive && mod.negative !== 0) {
		          mod.isub(num);
		        }
		      }

		      return {
		        div: res.div,
		        mod: mod
		      };
		    }

		    // Both numbers are positive at this point

		    // Strip both numbers to approximate shift value
		    if (num.length > this.length || this.cmp(num) < 0) {
		      return {
		        div: new BN(0),
		        mod: this
		      };
		    }

		    // Very short reduction
		    if (num.length === 1) {
		      if (mode === 'div') {
		        return {
		          div: this.divn(num.words[0]),
		          mod: null
		        };
		      }

		      if (mode === 'mod') {
		        return {
		          div: null,
		          mod: new BN(this.modn(num.words[0]))
		        };
		      }

		      return {
		        div: this.divn(num.words[0]),
		        mod: new BN(this.modn(num.words[0]))
		      };
		    }

		    return this._wordDiv(num, mode);
		  };

		  // Find `this` / `num`
		  BN.prototype.div = function div (num) {
		    return this.divmod(num, 'div', false).div;
		  };

		  // Find `this` % `num`
		  BN.prototype.mod = function mod (num) {
		    return this.divmod(num, 'mod', false).mod;
		  };

		  BN.prototype.umod = function umod (num) {
		    return this.divmod(num, 'mod', true).mod;
		  };

		  // Find Round(`this` / `num`)
		  BN.prototype.divRound = function divRound (num) {
		    var dm = this.divmod(num);

		    // Fast case - exact division
		    if (dm.mod.isZero()) return dm.div;

		    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

		    var half = num.ushrn(1);
		    var r2 = num.andln(1);
		    var cmp = mod.cmp(half);

		    // Round down
		    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

		    // Round up
		    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
		  };

		  BN.prototype.modn = function modn (num) {
		    assert(num <= 0x3ffffff);
		    var p = (1 << 26) % num;

		    var acc = 0;
		    for (var i = this.length - 1; i >= 0; i--) {
		      acc = (p * acc + (this.words[i] | 0)) % num;
		    }

		    return acc;
		  };

		  // In-place division by number
		  BN.prototype.idivn = function idivn (num) {
		    assert(num <= 0x3ffffff);

		    var carry = 0;
		    for (var i = this.length - 1; i >= 0; i--) {
		      var w = (this.words[i] | 0) + carry * 0x4000000;
		      this.words[i] = (w / num) | 0;
		      carry = w % num;
		    }

		    return this.strip();
		  };

		  BN.prototype.divn = function divn (num) {
		    return this.clone().idivn(num);
		  };

		  BN.prototype.egcd = function egcd (p) {
		    assert(p.negative === 0);
		    assert(!p.isZero());

		    var x = this;
		    var y = p.clone();

		    if (x.negative !== 0) {
		      x = x.umod(p);
		    } else {
		      x = x.clone();
		    }

		    // A * x + B * y = x
		    var A = new BN(1);
		    var B = new BN(0);

		    // C * x + D * y = y
		    var C = new BN(0);
		    var D = new BN(1);

		    var g = 0;

		    while (x.isEven() && y.isEven()) {
		      x.iushrn(1);
		      y.iushrn(1);
		      ++g;
		    }

		    var yp = y.clone();
		    var xp = x.clone();

		    while (!x.isZero()) {
		      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
		      if (i > 0) {
		        x.iushrn(i);
		        while (i-- > 0) {
		          if (A.isOdd() || B.isOdd()) {
		            A.iadd(yp);
		            B.isub(xp);
		          }

		          A.iushrn(1);
		          B.iushrn(1);
		        }
		      }

		      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
		      if (j > 0) {
		        y.iushrn(j);
		        while (j-- > 0) {
		          if (C.isOdd() || D.isOdd()) {
		            C.iadd(yp);
		            D.isub(xp);
		          }

		          C.iushrn(1);
		          D.iushrn(1);
		        }
		      }

		      if (x.cmp(y) >= 0) {
		        x.isub(y);
		        A.isub(C);
		        B.isub(D);
		      } else {
		        y.isub(x);
		        C.isub(A);
		        D.isub(B);
		      }
		    }

		    return {
		      a: C,
		      b: D,
		      gcd: y.iushln(g)
		    };
		  };

		  // This is reduced incarnation of the binary EEA
		  // above, designated to invert members of the
		  // _prime_ fields F(p) at a maximal speed
		  BN.prototype._invmp = function _invmp (p) {
		    assert(p.negative === 0);
		    assert(!p.isZero());

		    var a = this;
		    var b = p.clone();

		    if (a.negative !== 0) {
		      a = a.umod(p);
		    } else {
		      a = a.clone();
		    }

		    var x1 = new BN(1);
		    var x2 = new BN(0);

		    var delta = b.clone();

		    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
		      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
		      if (i > 0) {
		        a.iushrn(i);
		        while (i-- > 0) {
		          if (x1.isOdd()) {
		            x1.iadd(delta);
		          }

		          x1.iushrn(1);
		        }
		      }

		      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
		      if (j > 0) {
		        b.iushrn(j);
		        while (j-- > 0) {
		          if (x2.isOdd()) {
		            x2.iadd(delta);
		          }

		          x2.iushrn(1);
		        }
		      }

		      if (a.cmp(b) >= 0) {
		        a.isub(b);
		        x1.isub(x2);
		      } else {
		        b.isub(a);
		        x2.isub(x1);
		      }
		    }

		    var res;
		    if (a.cmpn(1) === 0) {
		      res = x1;
		    } else {
		      res = x2;
		    }

		    if (res.cmpn(0) < 0) {
		      res.iadd(p);
		    }

		    return res;
		  };

		  BN.prototype.gcd = function gcd (num) {
		    if (this.isZero()) return num.abs();
		    if (num.isZero()) return this.abs();

		    var a = this.clone();
		    var b = num.clone();
		    a.negative = 0;
		    b.negative = 0;

		    // Remove common factor of two
		    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
		      a.iushrn(1);
		      b.iushrn(1);
		    }

		    do {
		      while (a.isEven()) {
		        a.iushrn(1);
		      }
		      while (b.isEven()) {
		        b.iushrn(1);
		      }

		      var r = a.cmp(b);
		      if (r < 0) {
		        // Swap `a` and `b` to make `a` always bigger than `b`
		        var t = a;
		        a = b;
		        b = t;
		      } else if (r === 0 || b.cmpn(1) === 0) {
		        break;
		      }

		      a.isub(b);
		    } while (true);

		    return b.iushln(shift);
		  };

		  // Invert number in the field F(num)
		  BN.prototype.invm = function invm (num) {
		    return this.egcd(num).a.umod(num);
		  };

		  BN.prototype.isEven = function isEven () {
		    return (this.words[0] & 1) === 0;
		  };

		  BN.prototype.isOdd = function isOdd () {
		    return (this.words[0] & 1) === 1;
		  };

		  // And first word and num
		  BN.prototype.andln = function andln (num) {
		    return this.words[0] & num;
		  };

		  // Increment at the bit position in-line
		  BN.prototype.bincn = function bincn (bit) {
		    assert(typeof bit === 'number');
		    var r = bit % 26;
		    var s = (bit - r) / 26;
		    var q = 1 << r;

		    // Fast case: bit is much higher than all existing words
		    if (this.length <= s) {
		      this._expand(s + 1);
		      this.words[s] |= q;
		      return this;
		    }

		    // Add bit and propagate, if needed
		    var carry = q;
		    for (var i = s; carry !== 0 && i < this.length; i++) {
		      var w = this.words[i] | 0;
		      w += carry;
		      carry = w >>> 26;
		      w &= 0x3ffffff;
		      this.words[i] = w;
		    }
		    if (carry !== 0) {
		      this.words[i] = carry;
		      this.length++;
		    }
		    return this;
		  };

		  BN.prototype.isZero = function isZero () {
		    return this.length === 1 && this.words[0] === 0;
		  };

		  BN.prototype.cmpn = function cmpn (num) {
		    var negative = num < 0;

		    if (this.negative !== 0 && !negative) return -1;
		    if (this.negative === 0 && negative) return 1;

		    this.strip();

		    var res;
		    if (this.length > 1) {
		      res = 1;
		    } else {
		      if (negative) {
		        num = -num;
		      }

		      assert(num <= 0x3ffffff, 'Number is too big');

		      var w = this.words[0] | 0;
		      res = w === num ? 0 : w < num ? -1 : 1;
		    }
		    if (this.negative !== 0) return -res | 0;
		    return res;
		  };

		  // Compare two numbers and return:
		  // 1 - if `this` > `num`
		  // 0 - if `this` == `num`
		  // -1 - if `this` < `num`
		  BN.prototype.cmp = function cmp (num) {
		    if (this.negative !== 0 && num.negative === 0) return -1;
		    if (this.negative === 0 && num.negative !== 0) return 1;

		    var res = this.ucmp(num);
		    if (this.negative !== 0) return -res | 0;
		    return res;
		  };

		  // Unsigned comparison
		  BN.prototype.ucmp = function ucmp (num) {
		    // At this point both numbers have the same sign
		    if (this.length > num.length) return 1;
		    if (this.length < num.length) return -1;

		    var res = 0;
		    for (var i = this.length - 1; i >= 0; i--) {
		      var a = this.words[i] | 0;
		      var b = num.words[i] | 0;

		      if (a === b) continue;
		      if (a < b) {
		        res = -1;
		      } else if (a > b) {
		        res = 1;
		      }
		      break;
		    }
		    return res;
		  };

		  BN.prototype.gtn = function gtn (num) {
		    return this.cmpn(num) === 1;
		  };

		  BN.prototype.gt = function gt (num) {
		    return this.cmp(num) === 1;
		  };

		  BN.prototype.gten = function gten (num) {
		    return this.cmpn(num) >= 0;
		  };

		  BN.prototype.gte = function gte (num) {
		    return this.cmp(num) >= 0;
		  };

		  BN.prototype.ltn = function ltn (num) {
		    return this.cmpn(num) === -1;
		  };

		  BN.prototype.lt = function lt (num) {
		    return this.cmp(num) === -1;
		  };

		  BN.prototype.lten = function lten (num) {
		    return this.cmpn(num) <= 0;
		  };

		  BN.prototype.lte = function lte (num) {
		    return this.cmp(num) <= 0;
		  };

		  BN.prototype.eqn = function eqn (num) {
		    return this.cmpn(num) === 0;
		  };

		  BN.prototype.eq = function eq (num) {
		    return this.cmp(num) === 0;
		  };

		  //
		  // A reduce context, could be using montgomery or something better, depending
		  // on the `m` itself.
		  //
		  BN.red = function red (num) {
		    return new Red(num);
		  };

		  BN.prototype.toRed = function toRed (ctx) {
		    assert(!this.red, 'Already a number in reduction context');
		    assert(this.negative === 0, 'red works only with positives');
		    return ctx.convertTo(this)._forceRed(ctx);
		  };

		  BN.prototype.fromRed = function fromRed () {
		    assert(this.red, 'fromRed works only with numbers in reduction context');
		    return this.red.convertFrom(this);
		  };

		  BN.prototype._forceRed = function _forceRed (ctx) {
		    this.red = ctx;
		    return this;
		  };

		  BN.prototype.forceRed = function forceRed (ctx) {
		    assert(!this.red, 'Already a number in reduction context');
		    return this._forceRed(ctx);
		  };

		  BN.prototype.redAdd = function redAdd (num) {
		    assert(this.red, 'redAdd works only with red numbers');
		    return this.red.add(this, num);
		  };

		  BN.prototype.redIAdd = function redIAdd (num) {
		    assert(this.red, 'redIAdd works only with red numbers');
		    return this.red.iadd(this, num);
		  };

		  BN.prototype.redSub = function redSub (num) {
		    assert(this.red, 'redSub works only with red numbers');
		    return this.red.sub(this, num);
		  };

		  BN.prototype.redISub = function redISub (num) {
		    assert(this.red, 'redISub works only with red numbers');
		    return this.red.isub(this, num);
		  };

		  BN.prototype.redShl = function redShl (num) {
		    assert(this.red, 'redShl works only with red numbers');
		    return this.red.shl(this, num);
		  };

		  BN.prototype.redMul = function redMul (num) {
		    assert(this.red, 'redMul works only with red numbers');
		    this.red._verify2(this, num);
		    return this.red.mul(this, num);
		  };

		  BN.prototype.redIMul = function redIMul (num) {
		    assert(this.red, 'redMul works only with red numbers');
		    this.red._verify2(this, num);
		    return this.red.imul(this, num);
		  };

		  BN.prototype.redSqr = function redSqr () {
		    assert(this.red, 'redSqr works only with red numbers');
		    this.red._verify1(this);
		    return this.red.sqr(this);
		  };

		  BN.prototype.redISqr = function redISqr () {
		    assert(this.red, 'redISqr works only with red numbers');
		    this.red._verify1(this);
		    return this.red.isqr(this);
		  };

		  // Square root over p
		  BN.prototype.redSqrt = function redSqrt () {
		    assert(this.red, 'redSqrt works only with red numbers');
		    this.red._verify1(this);
		    return this.red.sqrt(this);
		  };

		  BN.prototype.redInvm = function redInvm () {
		    assert(this.red, 'redInvm works only with red numbers');
		    this.red._verify1(this);
		    return this.red.invm(this);
		  };

		  // Return negative clone of `this` % `red modulo`
		  BN.prototype.redNeg = function redNeg () {
		    assert(this.red, 'redNeg works only with red numbers');
		    this.red._verify1(this);
		    return this.red.neg(this);
		  };

		  BN.prototype.redPow = function redPow (num) {
		    assert(this.red && !num.red, 'redPow(normalNum)');
		    this.red._verify1(this);
		    return this.red.pow(this, num);
		  };

		  // Prime numbers with efficient reduction
		  var primes = {
		    k256: null,
		    p224: null,
		    p192: null,
		    p25519: null
		  };

		  // Pseudo-Mersenne prime
		  function MPrime (name, p) {
		    // P = 2 ^ N - K
		    this.name = name;
		    this.p = new BN(p, 16);
		    this.n = this.p.bitLength();
		    this.k = new BN(1).iushln(this.n).isub(this.p);

		    this.tmp = this._tmp();
		  }

		  MPrime.prototype._tmp = function _tmp () {
		    var tmp = new BN(null);
		    tmp.words = new Array(Math.ceil(this.n / 13));
		    return tmp;
		  };

		  MPrime.prototype.ireduce = function ireduce (num) {
		    // Assumes that `num` is less than `P^2`
		    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
		    var r = num;
		    var rlen;

		    do {
		      this.split(r, this.tmp);
		      r = this.imulK(r);
		      r = r.iadd(this.tmp);
		      rlen = r.bitLength();
		    } while (rlen > this.n);

		    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
		    if (cmp === 0) {
		      r.words[0] = 0;
		      r.length = 1;
		    } else if (cmp > 0) {
		      r.isub(this.p);
		    } else {
		      if (r.strip !== undefined) {
		        // r is BN v4 instance
		        r.strip();
		      } else {
		        // r is BN v5 instance
		        r._strip();
		      }
		    }

		    return r;
		  };

		  MPrime.prototype.split = function split (input, out) {
		    input.iushrn(this.n, 0, out);
		  };

		  MPrime.prototype.imulK = function imulK (num) {
		    return num.imul(this.k);
		  };

		  function K256 () {
		    MPrime.call(
		      this,
		      'k256',
		      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
		  }
		  inherits(K256, MPrime);

		  K256.prototype.split = function split (input, output) {
		    // 256 = 9 * 26 + 22
		    var mask = 0x3fffff;

		    var outLen = Math.min(input.length, 9);
		    for (var i = 0; i < outLen; i++) {
		      output.words[i] = input.words[i];
		    }
		    output.length = outLen;

		    if (input.length <= 9) {
		      input.words[0] = 0;
		      input.length = 1;
		      return;
		    }

		    // Shift by 9 limbs
		    var prev = input.words[9];
		    output.words[output.length++] = prev & mask;

		    for (i = 10; i < input.length; i++) {
		      var next = input.words[i] | 0;
		      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
		      prev = next;
		    }
		    prev >>>= 22;
		    input.words[i - 10] = prev;
		    if (prev === 0 && input.length > 10) {
		      input.length -= 10;
		    } else {
		      input.length -= 9;
		    }
		  };

		  K256.prototype.imulK = function imulK (num) {
		    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
		    num.words[num.length] = 0;
		    num.words[num.length + 1] = 0;
		    num.length += 2;

		    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
		    var lo = 0;
		    for (var i = 0; i < num.length; i++) {
		      var w = num.words[i] | 0;
		      lo += w * 0x3d1;
		      num.words[i] = lo & 0x3ffffff;
		      lo = w * 0x40 + ((lo / 0x4000000) | 0);
		    }

		    // Fast length reduction
		    if (num.words[num.length - 1] === 0) {
		      num.length--;
		      if (num.words[num.length - 1] === 0) {
		        num.length--;
		      }
		    }
		    return num;
		  };

		  function P224 () {
		    MPrime.call(
		      this,
		      'p224',
		      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
		  }
		  inherits(P224, MPrime);

		  function P192 () {
		    MPrime.call(
		      this,
		      'p192',
		      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
		  }
		  inherits(P192, MPrime);

		  function P25519 () {
		    // 2 ^ 255 - 19
		    MPrime.call(
		      this,
		      '25519',
		      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
		  }
		  inherits(P25519, MPrime);

		  P25519.prototype.imulK = function imulK (num) {
		    // K = 0x13
		    var carry = 0;
		    for (var i = 0; i < num.length; i++) {
		      var hi = (num.words[i] | 0) * 0x13 + carry;
		      var lo = hi & 0x3ffffff;
		      hi >>>= 26;

		      num.words[i] = lo;
		      carry = hi;
		    }
		    if (carry !== 0) {
		      num.words[num.length++] = carry;
		    }
		    return num;
		  };

		  // Exported mostly for testing purposes, use plain name instead
		  BN._prime = function prime (name) {
		    // Cached version of prime
		    if (primes[name]) return primes[name];

		    var prime;
		    if (name === 'k256') {
		      prime = new K256();
		    } else if (name === 'p224') {
		      prime = new P224();
		    } else if (name === 'p192') {
		      prime = new P192();
		    } else if (name === 'p25519') {
		      prime = new P25519();
		    } else {
		      throw new Error('Unknown prime ' + name);
		    }
		    primes[name] = prime;

		    return prime;
		  };

		  //
		  // Base reduction engine
		  //
		  function Red (m) {
		    if (typeof m === 'string') {
		      var prime = BN._prime(m);
		      this.m = prime.p;
		      this.prime = prime;
		    } else {
		      assert(m.gtn(1), 'modulus must be greater than 1');
		      this.m = m;
		      this.prime = null;
		    }
		  }

		  Red.prototype._verify1 = function _verify1 (a) {
		    assert(a.negative === 0, 'red works only with positives');
		    assert(a.red, 'red works only with red numbers');
		  };

		  Red.prototype._verify2 = function _verify2 (a, b) {
		    assert((a.negative | b.negative) === 0, 'red works only with positives');
		    assert(a.red && a.red === b.red,
		      'red works only with red numbers');
		  };

		  Red.prototype.imod = function imod (a) {
		    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
		    return a.umod(this.m)._forceRed(this);
		  };

		  Red.prototype.neg = function neg (a) {
		    if (a.isZero()) {
		      return a.clone();
		    }

		    return this.m.sub(a)._forceRed(this);
		  };

		  Red.prototype.add = function add (a, b) {
		    this._verify2(a, b);

		    var res = a.add(b);
		    if (res.cmp(this.m) >= 0) {
		      res.isub(this.m);
		    }
		    return res._forceRed(this);
		  };

		  Red.prototype.iadd = function iadd (a, b) {
		    this._verify2(a, b);

		    var res = a.iadd(b);
		    if (res.cmp(this.m) >= 0) {
		      res.isub(this.m);
		    }
		    return res;
		  };

		  Red.prototype.sub = function sub (a, b) {
		    this._verify2(a, b);

		    var res = a.sub(b);
		    if (res.cmpn(0) < 0) {
		      res.iadd(this.m);
		    }
		    return res._forceRed(this);
		  };

		  Red.prototype.isub = function isub (a, b) {
		    this._verify2(a, b);

		    var res = a.isub(b);
		    if (res.cmpn(0) < 0) {
		      res.iadd(this.m);
		    }
		    return res;
		  };

		  Red.prototype.shl = function shl (a, num) {
		    this._verify1(a);
		    return this.imod(a.ushln(num));
		  };

		  Red.prototype.imul = function imul (a, b) {
		    this._verify2(a, b);
		    return this.imod(a.imul(b));
		  };

		  Red.prototype.mul = function mul (a, b) {
		    this._verify2(a, b);
		    return this.imod(a.mul(b));
		  };

		  Red.prototype.isqr = function isqr (a) {
		    return this.imul(a, a.clone());
		  };

		  Red.prototype.sqr = function sqr (a) {
		    return this.mul(a, a);
		  };

		  Red.prototype.sqrt = function sqrt (a) {
		    if (a.isZero()) return a.clone();

		    var mod3 = this.m.andln(3);
		    assert(mod3 % 2 === 1);

		    // Fast case
		    if (mod3 === 3) {
		      var pow = this.m.add(new BN(1)).iushrn(2);
		      return this.pow(a, pow);
		    }

		    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
		    //
		    // Find Q and S, that Q * 2 ^ S = (P - 1)
		    var q = this.m.subn(1);
		    var s = 0;
		    while (!q.isZero() && q.andln(1) === 0) {
		      s++;
		      q.iushrn(1);
		    }
		    assert(!q.isZero());

		    var one = new BN(1).toRed(this);
		    var nOne = one.redNeg();

		    // Find quadratic non-residue
		    // NOTE: Max is such because of generalized Riemann hypothesis.
		    var lpow = this.m.subn(1).iushrn(1);
		    var z = this.m.bitLength();
		    z = new BN(2 * z * z).toRed(this);

		    while (this.pow(z, lpow).cmp(nOne) !== 0) {
		      z.redIAdd(nOne);
		    }

		    var c = this.pow(z, q);
		    var r = this.pow(a, q.addn(1).iushrn(1));
		    var t = this.pow(a, q);
		    var m = s;
		    while (t.cmp(one) !== 0) {
		      var tmp = t;
		      for (var i = 0; tmp.cmp(one) !== 0; i++) {
		        tmp = tmp.redSqr();
		      }
		      assert(i < m);
		      var b = this.pow(c, new BN(1).iushln(m - i - 1));

		      r = r.redMul(b);
		      c = b.redSqr();
		      t = t.redMul(c);
		      m = i;
		    }

		    return r;
		  };

		  Red.prototype.invm = function invm (a) {
		    var inv = a._invmp(this.m);
		    if (inv.negative !== 0) {
		      inv.negative = 0;
		      return this.imod(inv).redNeg();
		    } else {
		      return this.imod(inv);
		    }
		  };

		  Red.prototype.pow = function pow (a, num) {
		    if (num.isZero()) return new BN(1).toRed(this);
		    if (num.cmpn(1) === 0) return a.clone();

		    var windowSize = 4;
		    var wnd = new Array(1 << windowSize);
		    wnd[0] = new BN(1).toRed(this);
		    wnd[1] = a;
		    for (var i = 2; i < wnd.length; i++) {
		      wnd[i] = this.mul(wnd[i - 1], a);
		    }

		    var res = wnd[0];
		    var current = 0;
		    var currentLen = 0;
		    var start = num.bitLength() % 26;
		    if (start === 0) {
		      start = 26;
		    }

		    for (i = num.length - 1; i >= 0; i--) {
		      var word = num.words[i];
		      for (var j = start - 1; j >= 0; j--) {
		        var bit = (word >> j) & 1;
		        if (res !== wnd[0]) {
		          res = this.sqr(res);
		        }

		        if (bit === 0 && current === 0) {
		          currentLen = 0;
		          continue;
		        }

		        current <<= 1;
		        current |= bit;
		        currentLen++;
		        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

		        res = this.mul(res, wnd[current]);
		        currentLen = 0;
		        current = 0;
		      }
		      start = 26;
		    }

		    return res;
		  };

		  Red.prototype.convertTo = function convertTo (num) {
		    var r = num.umod(this.m);

		    return r === num ? r.clone() : r;
		  };

		  Red.prototype.convertFrom = function convertFrom (num) {
		    var res = num.clone();
		    res.red = null;
		    return res;
		  };

		  //
		  // Montgomery method engine
		  //

		  BN.mont = function mont (num) {
		    return new Mont(num);
		  };

		  function Mont (m) {
		    Red.call(this, m);

		    this.shift = this.m.bitLength();
		    if (this.shift % 26 !== 0) {
		      this.shift += 26 - (this.shift % 26);
		    }

		    this.r = new BN(1).iushln(this.shift);
		    this.r2 = this.imod(this.r.sqr());
		    this.rinv = this.r._invmp(this.m);

		    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
		    this.minv = this.minv.umod(this.r);
		    this.minv = this.r.sub(this.minv);
		  }
		  inherits(Mont, Red);

		  Mont.prototype.convertTo = function convertTo (num) {
		    return this.imod(num.ushln(this.shift));
		  };

		  Mont.prototype.convertFrom = function convertFrom (num) {
		    var r = this.imod(num.mul(this.rinv));
		    r.red = null;
		    return r;
		  };

		  Mont.prototype.imul = function imul (a, b) {
		    if (a.isZero() || b.isZero()) {
		      a.words[0] = 0;
		      a.length = 1;
		      return a;
		    }

		    var t = a.imul(b);
		    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
		    var u = t.isub(c).iushrn(this.shift);
		    var res = u;

		    if (u.cmp(this.m) >= 0) {
		      res = u.isub(this.m);
		    } else if (u.cmpn(0) < 0) {
		      res = u.iadd(this.m);
		    }

		    return res._forceRed(this);
		  };

		  Mont.prototype.mul = function mul (a, b) {
		    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

		    var t = a.mul(b);
		    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
		    var u = t.isub(c).iushrn(this.shift);
		    var res = u;
		    if (u.cmp(this.m) >= 0) {
		      res = u.isub(this.m);
		    } else if (u.cmpn(0) < 0) {
		      res = u.iadd(this.m);
		    }

		    return res._forceRed(this);
		  };

		  Mont.prototype.invm = function invm (a) {
		    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
		    var res = this.imod(a._invmp(this.m).mul(this.r2));
		    return res._forceRed(this);
		  };
		})(module, commonjsGlobal);
	} (bn));

	var minimalisticAssert = assert$f;

	function assert$f(val, msg) {
	  if (!val)
	    throw new Error(msg || 'Assertion failed');
	}

	assert$f.equal = function assertEqual(l, r, msg) {
	  if (l != r)
	    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
	};

	var utils$l = {};

	(function (exports) {

		var utils = exports;

		function toArray(msg, enc) {
		  if (Array.isArray(msg))
		    return msg.slice();
		  if (!msg)
		    return [];
		  var res = [];
		  if (typeof msg !== 'string') {
		    for (var i = 0; i < msg.length; i++)
		      res[i] = msg[i] | 0;
		    return res;
		  }
		  if (enc === 'hex') {
		    msg = msg.replace(/[^a-z0-9]+/ig, '');
		    if (msg.length % 2 !== 0)
		      msg = '0' + msg;
		    for (var i = 0; i < msg.length; i += 2)
		      res.push(parseInt(msg[i] + msg[i + 1], 16));
		  } else {
		    for (var i = 0; i < msg.length; i++) {
		      var c = msg.charCodeAt(i);
		      var hi = c >> 8;
		      var lo = c & 0xff;
		      if (hi)
		        res.push(hi, lo);
		      else
		        res.push(lo);
		    }
		  }
		  return res;
		}
		utils.toArray = toArray;

		function zero2(word) {
		  if (word.length === 1)
		    return '0' + word;
		  else
		    return word;
		}
		utils.zero2 = zero2;

		function toHex(msg) {
		  var res = '';
		  for (var i = 0; i < msg.length; i++)
		    res += zero2(msg[i].toString(16));
		  return res;
		}
		utils.toHex = toHex;

		utils.encode = function encode(arr, enc) {
		  if (enc === 'hex')
		    return toHex(arr);
		  else
		    return arr;
		};
	} (utils$l));

	(function (exports) {

		var utils = exports;
		var BN = bnExports;
		var minAssert = minimalisticAssert;
		var minUtils = utils$l;

		utils.assert = minAssert;
		utils.toArray = minUtils.toArray;
		utils.zero2 = minUtils.zero2;
		utils.toHex = minUtils.toHex;
		utils.encode = minUtils.encode;

		// Represent num in a w-NAF form
		function getNAF(num, w, bits) {
		  var naf = new Array(Math.max(num.bitLength(), bits) + 1);
		  naf.fill(0);

		  var ws = 1 << (w + 1);
		  var k = num.clone();

		  for (var i = 0; i < naf.length; i++) {
		    var z;
		    var mod = k.andln(ws - 1);
		    if (k.isOdd()) {
		      if (mod > (ws >> 1) - 1)
		        z = (ws >> 1) - mod;
		      else
		        z = mod;
		      k.isubn(z);
		    } else {
		      z = 0;
		    }

		    naf[i] = z;
		    k.iushrn(1);
		  }

		  return naf;
		}
		utils.getNAF = getNAF;

		// Represent k1, k2 in a Joint Sparse Form
		function getJSF(k1, k2) {
		  var jsf = [
		    [],
		    [],
		  ];

		  k1 = k1.clone();
		  k2 = k2.clone();
		  var d1 = 0;
		  var d2 = 0;
		  var m8;
		  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
		    // First phase
		    var m14 = (k1.andln(3) + d1) & 3;
		    var m24 = (k2.andln(3) + d2) & 3;
		    if (m14 === 3)
		      m14 = -1;
		    if (m24 === 3)
		      m24 = -1;
		    var u1;
		    if ((m14 & 1) === 0) {
		      u1 = 0;
		    } else {
		      m8 = (k1.andln(7) + d1) & 7;
		      if ((m8 === 3 || m8 === 5) && m24 === 2)
		        u1 = -m14;
		      else
		        u1 = m14;
		    }
		    jsf[0].push(u1);

		    var u2;
		    if ((m24 & 1) === 0) {
		      u2 = 0;
		    } else {
		      m8 = (k2.andln(7) + d2) & 7;
		      if ((m8 === 3 || m8 === 5) && m14 === 2)
		        u2 = -m24;
		      else
		        u2 = m24;
		    }
		    jsf[1].push(u2);

		    // Second phase
		    if (2 * d1 === u1 + 1)
		      d1 = 1 - d1;
		    if (2 * d2 === u2 + 1)
		      d2 = 1 - d2;
		    k1.iushrn(1);
		    k2.iushrn(1);
		  }

		  return jsf;
		}
		utils.getJSF = getJSF;

		function cachedProperty(obj, name, computer) {
		  var key = '_' + name;
		  obj.prototype[name] = function cachedProperty() {
		    return this[key] !== undefined ? this[key] :
		      this[key] = computer.call(this);
		  };
		}
		utils.cachedProperty = cachedProperty;

		function parseBytes(bytes) {
		  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
		    bytes;
		}
		utils.parseBytes = parseBytes;

		function intFromLE(bytes) {
		  return new BN(bytes, 'hex', 'le');
		}
		utils.intFromLE = intFromLE;
	} (utils$m));

	var brorandExports = {};
	var brorand = {
	  get exports(){ return brorandExports; },
	  set exports(v){ brorandExports = v; },
	};

	var empty = {};

	var empty$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		default: empty
	});

	var require$$0$3 = /*@__PURE__*/getAugmentedNamespace(empty$1);

	var r$1;

	brorand.exports = function rand(len) {
	  if (!r$1)
	    r$1 = new Rand(null);

	  return r$1.generate(len);
	};

	function Rand(rand) {
	  this.rand = rand;
	}
	brorandExports.Rand = Rand;

	Rand.prototype.generate = function generate(len) {
	  return this._rand(len);
	};

	// Emulate crypto API using randy
	Rand.prototype._rand = function _rand(n) {
	  if (this.rand.getBytes)
	    return this.rand.getBytes(n);

	  var res = new Uint8Array(n);
	  for (var i = 0; i < res.length; i++)
	    res[i] = this.rand.getByte();
	  return res;
	};

	if (typeof self === 'object') {
	  if (self.crypto && self.crypto.getRandomValues) {
	    // Modern browsers
	    Rand.prototype._rand = function _rand(n) {
	      var arr = new Uint8Array(n);
	      self.crypto.getRandomValues(arr);
	      return arr;
	    };
	  } else if (self.msCrypto && self.msCrypto.getRandomValues) {
	    // IE
	    Rand.prototype._rand = function _rand(n) {
	      var arr = new Uint8Array(n);
	      self.msCrypto.getRandomValues(arr);
	      return arr;
	    };

	  // Safari's WebWorkers do not have `crypto`
	  } else if (typeof window === 'object') {
	    // Old junk
	    Rand.prototype._rand = function() {
	      throw new Error('Not implemented yet');
	    };
	  }
	} else {
	  // Node.js or Web worker with no crypto support
	  try {
	    var crypto$1 = require$$0$3;
	    if (typeof crypto$1.randomBytes !== 'function')
	      throw new Error('Not supported');

	    Rand.prototype._rand = function _rand(n) {
	      return crypto$1.randomBytes(n);
	    };
	  } catch (e) {
	  }
	}

	var curve = {};

	var BN$8 = bnExports;
	var utils$k = utils$m;
	var getNAF = utils$k.getNAF;
	var getJSF = utils$k.getJSF;
	var assert$e = utils$k.assert;

	function BaseCurve(type, conf) {
	  this.type = type;
	  this.p = new BN$8(conf.p, 16);

	  // Use Montgomery, when there is no fast reduction for the prime
	  this.red = conf.prime ? BN$8.red(conf.prime) : BN$8.mont(this.p);

	  // Useful for many curves
	  this.zero = new BN$8(0).toRed(this.red);
	  this.one = new BN$8(1).toRed(this.red);
	  this.two = new BN$8(2).toRed(this.red);

	  // Curve configuration, optional
	  this.n = conf.n && new BN$8(conf.n, 16);
	  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

	  // Temporary arrays
	  this._wnafT1 = new Array(4);
	  this._wnafT2 = new Array(4);
	  this._wnafT3 = new Array(4);
	  this._wnafT4 = new Array(4);

	  this._bitLength = this.n ? this.n.bitLength() : 0;

	  // Generalized Greg Maxwell's trick
	  var adjustCount = this.n && this.p.div(this.n);
	  if (!adjustCount || adjustCount.cmpn(100) > 0) {
	    this.redN = null;
	  } else {
	    this._maxwellTrick = true;
	    this.redN = this.n.toRed(this.red);
	  }
	}
	var base$1 = BaseCurve;

	BaseCurve.prototype.point = function point() {
	  throw new Error('Not implemented');
	};

	BaseCurve.prototype.validate = function validate() {
	  throw new Error('Not implemented');
	};

	BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
	  assert$e(p.precomputed);
	  var doubles = p._getDoubles();

	  var naf = getNAF(k, 1, this._bitLength);
	  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
	  I /= 3;

	  // Translate into more windowed form
	  var repr = [];
	  var j;
	  var nafW;
	  for (j = 0; j < naf.length; j += doubles.step) {
	    nafW = 0;
	    for (var l = j + doubles.step - 1; l >= j; l--)
	      nafW = (nafW << 1) + naf[l];
	    repr.push(nafW);
	  }

	  var a = this.jpoint(null, null, null);
	  var b = this.jpoint(null, null, null);
	  for (var i = I; i > 0; i--) {
	    for (j = 0; j < repr.length; j++) {
	      nafW = repr[j];
	      if (nafW === i)
	        b = b.mixedAdd(doubles.points[j]);
	      else if (nafW === -i)
	        b = b.mixedAdd(doubles.points[j].neg());
	    }
	    a = a.add(b);
	  }
	  return a.toP();
	};

	BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
	  var w = 4;

	  // Precompute window
	  var nafPoints = p._getNAFPoints(w);
	  w = nafPoints.wnd;
	  var wnd = nafPoints.points;

	  // Get NAF form
	  var naf = getNAF(k, w, this._bitLength);

	  // Add `this`*(N+1) for every w-NAF index
	  var acc = this.jpoint(null, null, null);
	  for (var i = naf.length - 1; i >= 0; i--) {
	    // Count zeroes
	    for (var l = 0; i >= 0 && naf[i] === 0; i--)
	      l++;
	    if (i >= 0)
	      l++;
	    acc = acc.dblp(l);

	    if (i < 0)
	      break;
	    var z = naf[i];
	    assert$e(z !== 0);
	    if (p.type === 'affine') {
	      // J +- P
	      if (z > 0)
	        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
	      else
	        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
	    } else {
	      // J +- J
	      if (z > 0)
	        acc = acc.add(wnd[(z - 1) >> 1]);
	      else
	        acc = acc.add(wnd[(-z - 1) >> 1].neg());
	    }
	  }
	  return p.type === 'affine' ? acc.toP() : acc;
	};

	BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
	  points,
	  coeffs,
	  len,
	  jacobianResult) {
	  var wndWidth = this._wnafT1;
	  var wnd = this._wnafT2;
	  var naf = this._wnafT3;

	  // Fill all arrays
	  var max = 0;
	  var i;
	  var j;
	  var p;
	  for (i = 0; i < len; i++) {
	    p = points[i];
	    var nafPoints = p._getNAFPoints(defW);
	    wndWidth[i] = nafPoints.wnd;
	    wnd[i] = nafPoints.points;
	  }

	  // Comb small window NAFs
	  for (i = len - 1; i >= 1; i -= 2) {
	    var a = i - 1;
	    var b = i;
	    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
	      naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
	      naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
	      max = Math.max(naf[a].length, max);
	      max = Math.max(naf[b].length, max);
	      continue;
	    }

	    var comb = [
	      points[a], /* 1 */
	      null, /* 3 */
	      null, /* 5 */
	      points[b], /* 7 */
	    ];

	    // Try to avoid Projective points, if possible
	    if (points[a].y.cmp(points[b].y) === 0) {
	      comb[1] = points[a].add(points[b]);
	      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
	    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
	      comb[1] = points[a].toJ().mixedAdd(points[b]);
	      comb[2] = points[a].add(points[b].neg());
	    } else {
	      comb[1] = points[a].toJ().mixedAdd(points[b]);
	      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
	    }

	    var index = [
	      -3, /* -1 -1 */
	      -1, /* -1 0 */
	      -5, /* -1 1 */
	      -7, /* 0 -1 */
	      0, /* 0 0 */
	      7, /* 0 1 */
	      5, /* 1 -1 */
	      1, /* 1 0 */
	      3,  /* 1 1 */
	    ];

	    var jsf = getJSF(coeffs[a], coeffs[b]);
	    max = Math.max(jsf[0].length, max);
	    naf[a] = new Array(max);
	    naf[b] = new Array(max);
	    for (j = 0; j < max; j++) {
	      var ja = jsf[0][j] | 0;
	      var jb = jsf[1][j] | 0;

	      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
	      naf[b][j] = 0;
	      wnd[a] = comb;
	    }
	  }

	  var acc = this.jpoint(null, null, null);
	  var tmp = this._wnafT4;
	  for (i = max; i >= 0; i--) {
	    var k = 0;

	    while (i >= 0) {
	      var zero = true;
	      for (j = 0; j < len; j++) {
	        tmp[j] = naf[j][i] | 0;
	        if (tmp[j] !== 0)
	          zero = false;
	      }
	      if (!zero)
	        break;
	      k++;
	      i--;
	    }
	    if (i >= 0)
	      k++;
	    acc = acc.dblp(k);
	    if (i < 0)
	      break;

	    for (j = 0; j < len; j++) {
	      var z = tmp[j];
	      if (z === 0)
	        continue;
	      else if (z > 0)
	        p = wnd[j][(z - 1) >> 1];
	      else if (z < 0)
	        p = wnd[j][(-z - 1) >> 1].neg();

	      if (p.type === 'affine')
	        acc = acc.mixedAdd(p);
	      else
	        acc = acc.add(p);
	    }
	  }
	  // Zeroify references
	  for (i = 0; i < len; i++)
	    wnd[i] = null;

	  if (jacobianResult)
	    return acc;
	  else
	    return acc.toP();
	};

	function BasePoint(curve, type) {
	  this.curve = curve;
	  this.type = type;
	  this.precomputed = null;
	}
	BaseCurve.BasePoint = BasePoint;

	BasePoint.prototype.eq = function eq(/*other*/) {
	  throw new Error('Not implemented');
	};

	BasePoint.prototype.validate = function validate() {
	  return this.curve.validate(this);
	};

	BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
	  bytes = utils$k.toArray(bytes, enc);

	  var len = this.p.byteLength();

	  // uncompressed, hybrid-odd, hybrid-even
	  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
	      bytes.length - 1 === 2 * len) {
	    if (bytes[0] === 0x06)
	      assert$e(bytes[bytes.length - 1] % 2 === 0);
	    else if (bytes[0] === 0x07)
	      assert$e(bytes[bytes.length - 1] % 2 === 1);

	    var res =  this.point(bytes.slice(1, 1 + len),
	      bytes.slice(1 + len, 1 + 2 * len));

	    return res;
	  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
	              bytes.length - 1 === len) {
	    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
	  }
	  throw new Error('Unknown point format');
	};

	BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
	  return this.encode(enc, true);
	};

	BasePoint.prototype._encode = function _encode(compact) {
	  var len = this.curve.p.byteLength();
	  var x = this.getX().toArray('be', len);

	  if (compact)
	    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

	  return [ 0x04 ].concat(x, this.getY().toArray('be', len));
	};

	BasePoint.prototype.encode = function encode(enc, compact) {
	  return utils$k.encode(this._encode(compact), enc);
	};

	BasePoint.prototype.precompute = function precompute(power) {
	  if (this.precomputed)
	    return this;

	  var precomputed = {
	    doubles: null,
	    naf: null,
	    beta: null,
	  };
	  precomputed.naf = this._getNAFPoints(8);
	  precomputed.doubles = this._getDoubles(4, power);
	  precomputed.beta = this._getBeta();
	  this.precomputed = precomputed;

	  return this;
	};

	BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
	  if (!this.precomputed)
	    return false;

	  var doubles = this.precomputed.doubles;
	  if (!doubles)
	    return false;

	  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
	};

	BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
	  if (this.precomputed && this.precomputed.doubles)
	    return this.precomputed.doubles;

	  var doubles = [ this ];
	  var acc = this;
	  for (var i = 0; i < power; i += step) {
	    for (var j = 0; j < step; j++)
	      acc = acc.dbl();
	    doubles.push(acc);
	  }
	  return {
	    step: step,
	    points: doubles,
	  };
	};

	BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
	  if (this.precomputed && this.precomputed.naf)
	    return this.precomputed.naf;

	  var res = [ this ];
	  var max = (1 << wnd) - 1;
	  var dbl = max === 1 ? null : this.dbl();
	  for (var i = 1; i < max; i++)
	    res[i] = res[i - 1].add(dbl);
	  return {
	    wnd: wnd,
	    points: res,
	  };
	};

	BasePoint.prototype._getBeta = function _getBeta() {
	  return null;
	};

	BasePoint.prototype.dblp = function dblp(k) {
	  var r = this;
	  for (var i = 0; i < k; i++)
	    r = r.dbl();
	  return r;
	};

	var inherits_browserExports = {};
	var inherits_browser = {
	  get exports(){ return inherits_browserExports; },
	  set exports(v){ inherits_browserExports = v; },
	};

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  inherits_browser.exports = function inherits(ctor, superCtor) {
	    if (superCtor) {
	      ctor.super_ = superCtor;
	      ctor.prototype = Object.create(superCtor.prototype, {
	        constructor: {
	          value: ctor,
	          enumerable: false,
	          writable: true,
	          configurable: true
	        }
	      });
	    }
	  };
	} else {
	  // old school shim for old browsers
	  inherits_browser.exports = function inherits(ctor, superCtor) {
	    if (superCtor) {
	      ctor.super_ = superCtor;
	      var TempCtor = function () {};
	      TempCtor.prototype = superCtor.prototype;
	      ctor.prototype = new TempCtor();
	      ctor.prototype.constructor = ctor;
	    }
	  };
	}

	var utils$j = utils$m;
	var BN$7 = bnExports;
	var inherits$e = inherits_browserExports;
	var Base$3 = base$1;

	var assert$d = utils$j.assert;

	function ShortCurve(conf) {
	  Base$3.call(this, 'short', conf);

	  this.a = new BN$7(conf.a, 16).toRed(this.red);
	  this.b = new BN$7(conf.b, 16).toRed(this.red);
	  this.tinv = this.two.redInvm();

	  this.zeroA = this.a.fromRed().cmpn(0) === 0;
	  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

	  // If the curve is endomorphic, precalculate beta and lambda
	  this.endo = this._getEndomorphism(conf);
	  this._endoWnafT1 = new Array(4);
	  this._endoWnafT2 = new Array(4);
	}
	inherits$e(ShortCurve, Base$3);
	var short = ShortCurve;

	ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
	  // No efficient endomorphism
	  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
	    return;

	  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
	  var beta;
	  var lambda;
	  if (conf.beta) {
	    beta = new BN$7(conf.beta, 16).toRed(this.red);
	  } else {
	    var betas = this._getEndoRoots(this.p);
	    // Choose the smallest beta
	    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
	    beta = beta.toRed(this.red);
	  }
	  if (conf.lambda) {
	    lambda = new BN$7(conf.lambda, 16);
	  } else {
	    // Choose the lambda that is matching selected beta
	    var lambdas = this._getEndoRoots(this.n);
	    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
	      lambda = lambdas[0];
	    } else {
	      lambda = lambdas[1];
	      assert$d(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
	    }
	  }

	  // Get basis vectors, used for balanced length-two representation
	  var basis;
	  if (conf.basis) {
	    basis = conf.basis.map(function(vec) {
	      return {
	        a: new BN$7(vec.a, 16),
	        b: new BN$7(vec.b, 16),
	      };
	    });
	  } else {
	    basis = this._getEndoBasis(lambda);
	  }

	  return {
	    beta: beta,
	    lambda: lambda,
	    basis: basis,
	  };
	};

	ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
	  // Find roots of for x^2 + x + 1 in F
	  // Root = (-1 +- Sqrt(-3)) / 2
	  //
	  var red = num === this.p ? this.red : BN$7.mont(num);
	  var tinv = new BN$7(2).toRed(red).redInvm();
	  var ntinv = tinv.redNeg();

	  var s = new BN$7(3).toRed(red).redNeg().redSqrt().redMul(tinv);

	  var l1 = ntinv.redAdd(s).fromRed();
	  var l2 = ntinv.redSub(s).fromRed();
	  return [ l1, l2 ];
	};

	ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
	  // aprxSqrt >= sqrt(this.n)
	  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

	  // 3.74
	  // Run EGCD, until r(L + 1) < aprxSqrt
	  var u = lambda;
	  var v = this.n.clone();
	  var x1 = new BN$7(1);
	  var y1 = new BN$7(0);
	  var x2 = new BN$7(0);
	  var y2 = new BN$7(1);

	  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
	  var a0;
	  var b0;
	  // First vector
	  var a1;
	  var b1;
	  // Second vector
	  var a2;
	  var b2;

	  var prevR;
	  var i = 0;
	  var r;
	  var x;
	  while (u.cmpn(0) !== 0) {
	    var q = v.div(u);
	    r = v.sub(q.mul(u));
	    x = x2.sub(q.mul(x1));
	    var y = y2.sub(q.mul(y1));

	    if (!a1 && r.cmp(aprxSqrt) < 0) {
	      a0 = prevR.neg();
	      b0 = x1;
	      a1 = r.neg();
	      b1 = x;
	    } else if (a1 && ++i === 2) {
	      break;
	    }
	    prevR = r;

	    v = u;
	    u = r;
	    x2 = x1;
	    x1 = x;
	    y2 = y1;
	    y1 = y;
	  }
	  a2 = r.neg();
	  b2 = x;

	  var len1 = a1.sqr().add(b1.sqr());
	  var len2 = a2.sqr().add(b2.sqr());
	  if (len2.cmp(len1) >= 0) {
	    a2 = a0;
	    b2 = b0;
	  }

	  // Normalize signs
	  if (a1.negative) {
	    a1 = a1.neg();
	    b1 = b1.neg();
	  }
	  if (a2.negative) {
	    a2 = a2.neg();
	    b2 = b2.neg();
	  }

	  return [
	    { a: a1, b: b1 },
	    { a: a2, b: b2 },
	  ];
	};

	ShortCurve.prototype._endoSplit = function _endoSplit(k) {
	  var basis = this.endo.basis;
	  var v1 = basis[0];
	  var v2 = basis[1];

	  var c1 = v2.b.mul(k).divRound(this.n);
	  var c2 = v1.b.neg().mul(k).divRound(this.n);

	  var p1 = c1.mul(v1.a);
	  var p2 = c2.mul(v2.a);
	  var q1 = c1.mul(v1.b);
	  var q2 = c2.mul(v2.b);

	  // Calculate answer
	  var k1 = k.sub(p1).sub(p2);
	  var k2 = q1.add(q2).neg();
	  return { k1: k1, k2: k2 };
	};

	ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
	  x = new BN$7(x, 16);
	  if (!x.red)
	    x = x.toRed(this.red);

	  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
	  var y = y2.redSqrt();
	  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
	    throw new Error('invalid point');

	  // XXX Is there any way to tell if the number is odd without converting it
	  // to non-red form?
	  var isOdd = y.fromRed().isOdd();
	  if (odd && !isOdd || !odd && isOdd)
	    y = y.redNeg();

	  return this.point(x, y);
	};

	ShortCurve.prototype.validate = function validate(point) {
	  if (point.inf)
	    return true;

	  var x = point.x;
	  var y = point.y;

	  var ax = this.a.redMul(x);
	  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
	  return y.redSqr().redISub(rhs).cmpn(0) === 0;
	};

	ShortCurve.prototype._endoWnafMulAdd =
	    function _endoWnafMulAdd(points, coeffs, jacobianResult) {
	      var npoints = this._endoWnafT1;
	      var ncoeffs = this._endoWnafT2;
	      for (var i = 0; i < points.length; i++) {
	        var split = this._endoSplit(coeffs[i]);
	        var p = points[i];
	        var beta = p._getBeta();

	        if (split.k1.negative) {
	          split.k1.ineg();
	          p = p.neg(true);
	        }
	        if (split.k2.negative) {
	          split.k2.ineg();
	          beta = beta.neg(true);
	        }

	        npoints[i * 2] = p;
	        npoints[i * 2 + 1] = beta;
	        ncoeffs[i * 2] = split.k1;
	        ncoeffs[i * 2 + 1] = split.k2;
	      }
	      var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

	      // Clean-up references to points and coefficients
	      for (var j = 0; j < i * 2; j++) {
	        npoints[j] = null;
	        ncoeffs[j] = null;
	      }
	      return res;
	    };

	function Point$2(curve, x, y, isRed) {
	  Base$3.BasePoint.call(this, curve, 'affine');
	  if (x === null && y === null) {
	    this.x = null;
	    this.y = null;
	    this.inf = true;
	  } else {
	    this.x = new BN$7(x, 16);
	    this.y = new BN$7(y, 16);
	    // Force redgomery representation when loading from JSON
	    if (isRed) {
	      this.x.forceRed(this.curve.red);
	      this.y.forceRed(this.curve.red);
	    }
	    if (!this.x.red)
	      this.x = this.x.toRed(this.curve.red);
	    if (!this.y.red)
	      this.y = this.y.toRed(this.curve.red);
	    this.inf = false;
	  }
	}
	inherits$e(Point$2, Base$3.BasePoint);

	ShortCurve.prototype.point = function point(x, y, isRed) {
	  return new Point$2(this, x, y, isRed);
	};

	ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
	  return Point$2.fromJSON(this, obj, red);
	};

	Point$2.prototype._getBeta = function _getBeta() {
	  if (!this.curve.endo)
	    return;

	  var pre = this.precomputed;
	  if (pre && pre.beta)
	    return pre.beta;

	  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
	  if (pre) {
	    var curve = this.curve;
	    var endoMul = function(p) {
	      return curve.point(p.x.redMul(curve.endo.beta), p.y);
	    };
	    pre.beta = beta;
	    beta.precomputed = {
	      beta: null,
	      naf: pre.naf && {
	        wnd: pre.naf.wnd,
	        points: pre.naf.points.map(endoMul),
	      },
	      doubles: pre.doubles && {
	        step: pre.doubles.step,
	        points: pre.doubles.points.map(endoMul),
	      },
	    };
	  }
	  return beta;
	};

	Point$2.prototype.toJSON = function toJSON() {
	  if (!this.precomputed)
	    return [ this.x, this.y ];

	  return [ this.x, this.y, this.precomputed && {
	    doubles: this.precomputed.doubles && {
	      step: this.precomputed.doubles.step,
	      points: this.precomputed.doubles.points.slice(1),
	    },
	    naf: this.precomputed.naf && {
	      wnd: this.precomputed.naf.wnd,
	      points: this.precomputed.naf.points.slice(1),
	    },
	  } ];
	};

	Point$2.fromJSON = function fromJSON(curve, obj, red) {
	  if (typeof obj === 'string')
	    obj = JSON.parse(obj);
	  var res = curve.point(obj[0], obj[1], red);
	  if (!obj[2])
	    return res;

	  function obj2point(obj) {
	    return curve.point(obj[0], obj[1], red);
	  }

	  var pre = obj[2];
	  res.precomputed = {
	    beta: null,
	    doubles: pre.doubles && {
	      step: pre.doubles.step,
	      points: [ res ].concat(pre.doubles.points.map(obj2point)),
	    },
	    naf: pre.naf && {
	      wnd: pre.naf.wnd,
	      points: [ res ].concat(pre.naf.points.map(obj2point)),
	    },
	  };
	  return res;
	};

	Point$2.prototype.inspect = function inspect() {
	  if (this.isInfinity())
	    return '<EC Point Infinity>';
	  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
	      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
	};

	Point$2.prototype.isInfinity = function isInfinity() {
	  return this.inf;
	};

	Point$2.prototype.add = function add(p) {
	  // O + P = P
	  if (this.inf)
	    return p;

	  // P + O = P
	  if (p.inf)
	    return this;

	  // P + P = 2P
	  if (this.eq(p))
	    return this.dbl();

	  // P + (-P) = O
	  if (this.neg().eq(p))
	    return this.curve.point(null, null);

	  // P + Q = O
	  if (this.x.cmp(p.x) === 0)
	    return this.curve.point(null, null);

	  var c = this.y.redSub(p.y);
	  if (c.cmpn(0) !== 0)
	    c = c.redMul(this.x.redSub(p.x).redInvm());
	  var nx = c.redSqr().redISub(this.x).redISub(p.x);
	  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
	  return this.curve.point(nx, ny);
	};

	Point$2.prototype.dbl = function dbl() {
	  if (this.inf)
	    return this;

	  // 2P = O
	  var ys1 = this.y.redAdd(this.y);
	  if (ys1.cmpn(0) === 0)
	    return this.curve.point(null, null);

	  var a = this.curve.a;

	  var x2 = this.x.redSqr();
	  var dyinv = ys1.redInvm();
	  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

	  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
	  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
	  return this.curve.point(nx, ny);
	};

	Point$2.prototype.getX = function getX() {
	  return this.x.fromRed();
	};

	Point$2.prototype.getY = function getY() {
	  return this.y.fromRed();
	};

	Point$2.prototype.mul = function mul(k) {
	  k = new BN$7(k, 16);
	  if (this.isInfinity())
	    return this;
	  else if (this._hasDoubles(k))
	    return this.curve._fixedNafMul(this, k);
	  else if (this.curve.endo)
	    return this.curve._endoWnafMulAdd([ this ], [ k ]);
	  else
	    return this.curve._wnafMul(this, k);
	};

	Point$2.prototype.mulAdd = function mulAdd(k1, p2, k2) {
	  var points = [ this, p2 ];
	  var coeffs = [ k1, k2 ];
	  if (this.curve.endo)
	    return this.curve._endoWnafMulAdd(points, coeffs);
	  else
	    return this.curve._wnafMulAdd(1, points, coeffs, 2);
	};

	Point$2.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
	  var points = [ this, p2 ];
	  var coeffs = [ k1, k2 ];
	  if (this.curve.endo)
	    return this.curve._endoWnafMulAdd(points, coeffs, true);
	  else
	    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
	};

	Point$2.prototype.eq = function eq(p) {
	  return this === p ||
	         this.inf === p.inf &&
	             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
	};

	Point$2.prototype.neg = function neg(_precompute) {
	  if (this.inf)
	    return this;

	  var res = this.curve.point(this.x, this.y.redNeg());
	  if (_precompute && this.precomputed) {
	    var pre = this.precomputed;
	    var negate = function(p) {
	      return p.neg();
	    };
	    res.precomputed = {
	      naf: pre.naf && {
	        wnd: pre.naf.wnd,
	        points: pre.naf.points.map(negate),
	      },
	      doubles: pre.doubles && {
	        step: pre.doubles.step,
	        points: pre.doubles.points.map(negate),
	      },
	    };
	  }
	  return res;
	};

	Point$2.prototype.toJ = function toJ() {
	  if (this.inf)
	    return this.curve.jpoint(null, null, null);

	  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
	  return res;
	};

	function JPoint(curve, x, y, z) {
	  Base$3.BasePoint.call(this, curve, 'jacobian');
	  if (x === null && y === null && z === null) {
	    this.x = this.curve.one;
	    this.y = this.curve.one;
	    this.z = new BN$7(0);
	  } else {
	    this.x = new BN$7(x, 16);
	    this.y = new BN$7(y, 16);
	    this.z = new BN$7(z, 16);
	  }
	  if (!this.x.red)
	    this.x = this.x.toRed(this.curve.red);
	  if (!this.y.red)
	    this.y = this.y.toRed(this.curve.red);
	  if (!this.z.red)
	    this.z = this.z.toRed(this.curve.red);

	  this.zOne = this.z === this.curve.one;
	}
	inherits$e(JPoint, Base$3.BasePoint);

	ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
	  return new JPoint(this, x, y, z);
	};

	JPoint.prototype.toP = function toP() {
	  if (this.isInfinity())
	    return this.curve.point(null, null);

	  var zinv = this.z.redInvm();
	  var zinv2 = zinv.redSqr();
	  var ax = this.x.redMul(zinv2);
	  var ay = this.y.redMul(zinv2).redMul(zinv);

	  return this.curve.point(ax, ay);
	};

	JPoint.prototype.neg = function neg() {
	  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
	};

	JPoint.prototype.add = function add(p) {
	  // O + P = P
	  if (this.isInfinity())
	    return p;

	  // P + O = P
	  if (p.isInfinity())
	    return this;

	  // 12M + 4S + 7A
	  var pz2 = p.z.redSqr();
	  var z2 = this.z.redSqr();
	  var u1 = this.x.redMul(pz2);
	  var u2 = p.x.redMul(z2);
	  var s1 = this.y.redMul(pz2.redMul(p.z));
	  var s2 = p.y.redMul(z2.redMul(this.z));

	  var h = u1.redSub(u2);
	  var r = s1.redSub(s2);
	  if (h.cmpn(0) === 0) {
	    if (r.cmpn(0) !== 0)
	      return this.curve.jpoint(null, null, null);
	    else
	      return this.dbl();
	  }

	  var h2 = h.redSqr();
	  var h3 = h2.redMul(h);
	  var v = u1.redMul(h2);

	  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
	  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
	  var nz = this.z.redMul(p.z).redMul(h);

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype.mixedAdd = function mixedAdd(p) {
	  // O + P = P
	  if (this.isInfinity())
	    return p.toJ();

	  // P + O = P
	  if (p.isInfinity())
	    return this;

	  // 8M + 3S + 7A
	  var z2 = this.z.redSqr();
	  var u1 = this.x;
	  var u2 = p.x.redMul(z2);
	  var s1 = this.y;
	  var s2 = p.y.redMul(z2).redMul(this.z);

	  var h = u1.redSub(u2);
	  var r = s1.redSub(s2);
	  if (h.cmpn(0) === 0) {
	    if (r.cmpn(0) !== 0)
	      return this.curve.jpoint(null, null, null);
	    else
	      return this.dbl();
	  }

	  var h2 = h.redSqr();
	  var h3 = h2.redMul(h);
	  var v = u1.redMul(h2);

	  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
	  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
	  var nz = this.z.redMul(h);

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype.dblp = function dblp(pow) {
	  if (pow === 0)
	    return this;
	  if (this.isInfinity())
	    return this;
	  if (!pow)
	    return this.dbl();

	  var i;
	  if (this.curve.zeroA || this.curve.threeA) {
	    var r = this;
	    for (i = 0; i < pow; i++)
	      r = r.dbl();
	    return r;
	  }

	  // 1M + 2S + 1A + N * (4S + 5M + 8A)
	  // N = 1 => 6M + 6S + 9A
	  var a = this.curve.a;
	  var tinv = this.curve.tinv;

	  var jx = this.x;
	  var jy = this.y;
	  var jz = this.z;
	  var jz4 = jz.redSqr().redSqr();

	  // Reuse results
	  var jyd = jy.redAdd(jy);
	  for (i = 0; i < pow; i++) {
	    var jx2 = jx.redSqr();
	    var jyd2 = jyd.redSqr();
	    var jyd4 = jyd2.redSqr();
	    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

	    var t1 = jx.redMul(jyd2);
	    var nx = c.redSqr().redISub(t1.redAdd(t1));
	    var t2 = t1.redISub(nx);
	    var dny = c.redMul(t2);
	    dny = dny.redIAdd(dny).redISub(jyd4);
	    var nz = jyd.redMul(jz);
	    if (i + 1 < pow)
	      jz4 = jz4.redMul(jyd4);

	    jx = nx;
	    jz = nz;
	    jyd = dny;
	  }

	  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
	};

	JPoint.prototype.dbl = function dbl() {
	  if (this.isInfinity())
	    return this;

	  if (this.curve.zeroA)
	    return this._zeroDbl();
	  else if (this.curve.threeA)
	    return this._threeDbl();
	  else
	    return this._dbl();
	};

	JPoint.prototype._zeroDbl = function _zeroDbl() {
	  var nx;
	  var ny;
	  var nz;
	  // Z = 1
	  if (this.zOne) {
	    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
	    //     #doubling-mdbl-2007-bl
	    // 1M + 5S + 14A

	    // XX = X1^2
	    var xx = this.x.redSqr();
	    // YY = Y1^2
	    var yy = this.y.redSqr();
	    // YYYY = YY^2
	    var yyyy = yy.redSqr();
	    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
	    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
	    s = s.redIAdd(s);
	    // M = 3 * XX + a; a = 0
	    var m = xx.redAdd(xx).redIAdd(xx);
	    // T = M ^ 2 - 2*S
	    var t = m.redSqr().redISub(s).redISub(s);

	    // 8 * YYYY
	    var yyyy8 = yyyy.redIAdd(yyyy);
	    yyyy8 = yyyy8.redIAdd(yyyy8);
	    yyyy8 = yyyy8.redIAdd(yyyy8);

	    // X3 = T
	    nx = t;
	    // Y3 = M * (S - T) - 8 * YYYY
	    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
	    // Z3 = 2*Y1
	    nz = this.y.redAdd(this.y);
	  } else {
	    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
	    //     #doubling-dbl-2009-l
	    // 2M + 5S + 13A

	    // A = X1^2
	    var a = this.x.redSqr();
	    // B = Y1^2
	    var b = this.y.redSqr();
	    // C = B^2
	    var c = b.redSqr();
	    // D = 2 * ((X1 + B)^2 - A - C)
	    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
	    d = d.redIAdd(d);
	    // E = 3 * A
	    var e = a.redAdd(a).redIAdd(a);
	    // F = E^2
	    var f = e.redSqr();

	    // 8 * C
	    var c8 = c.redIAdd(c);
	    c8 = c8.redIAdd(c8);
	    c8 = c8.redIAdd(c8);

	    // X3 = F - 2 * D
	    nx = f.redISub(d).redISub(d);
	    // Y3 = E * (D - X3) - 8 * C
	    ny = e.redMul(d.redISub(nx)).redISub(c8);
	    // Z3 = 2 * Y1 * Z1
	    nz = this.y.redMul(this.z);
	    nz = nz.redIAdd(nz);
	  }

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype._threeDbl = function _threeDbl() {
	  var nx;
	  var ny;
	  var nz;
	  // Z = 1
	  if (this.zOne) {
	    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
	    //     #doubling-mdbl-2007-bl
	    // 1M + 5S + 15A

	    // XX = X1^2
	    var xx = this.x.redSqr();
	    // YY = Y1^2
	    var yy = this.y.redSqr();
	    // YYYY = YY^2
	    var yyyy = yy.redSqr();
	    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
	    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
	    s = s.redIAdd(s);
	    // M = 3 * XX + a
	    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
	    // T = M^2 - 2 * S
	    var t = m.redSqr().redISub(s).redISub(s);
	    // X3 = T
	    nx = t;
	    // Y3 = M * (S - T) - 8 * YYYY
	    var yyyy8 = yyyy.redIAdd(yyyy);
	    yyyy8 = yyyy8.redIAdd(yyyy8);
	    yyyy8 = yyyy8.redIAdd(yyyy8);
	    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
	    // Z3 = 2 * Y1
	    nz = this.y.redAdd(this.y);
	  } else {
	    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
	    // 3M + 5S

	    // delta = Z1^2
	    var delta = this.z.redSqr();
	    // gamma = Y1^2
	    var gamma = this.y.redSqr();
	    // beta = X1 * gamma
	    var beta = this.x.redMul(gamma);
	    // alpha = 3 * (X1 - delta) * (X1 + delta)
	    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
	    alpha = alpha.redAdd(alpha).redIAdd(alpha);
	    // X3 = alpha^2 - 8 * beta
	    var beta4 = beta.redIAdd(beta);
	    beta4 = beta4.redIAdd(beta4);
	    var beta8 = beta4.redAdd(beta4);
	    nx = alpha.redSqr().redISub(beta8);
	    // Z3 = (Y1 + Z1)^2 - gamma - delta
	    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
	    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
	    var ggamma8 = gamma.redSqr();
	    ggamma8 = ggamma8.redIAdd(ggamma8);
	    ggamma8 = ggamma8.redIAdd(ggamma8);
	    ggamma8 = ggamma8.redIAdd(ggamma8);
	    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
	  }

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype._dbl = function _dbl() {
	  var a = this.curve.a;

	  // 4M + 6S + 10A
	  var jx = this.x;
	  var jy = this.y;
	  var jz = this.z;
	  var jz4 = jz.redSqr().redSqr();

	  var jx2 = jx.redSqr();
	  var jy2 = jy.redSqr();

	  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

	  var jxd4 = jx.redAdd(jx);
	  jxd4 = jxd4.redIAdd(jxd4);
	  var t1 = jxd4.redMul(jy2);
	  var nx = c.redSqr().redISub(t1.redAdd(t1));
	  var t2 = t1.redISub(nx);

	  var jyd8 = jy2.redSqr();
	  jyd8 = jyd8.redIAdd(jyd8);
	  jyd8 = jyd8.redIAdd(jyd8);
	  jyd8 = jyd8.redIAdd(jyd8);
	  var ny = c.redMul(t2).redISub(jyd8);
	  var nz = jy.redAdd(jy).redMul(jz);

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype.trpl = function trpl() {
	  if (!this.curve.zeroA)
	    return this.dbl().add(this);

	  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
	  // 5M + 10S + ...

	  // XX = X1^2
	  var xx = this.x.redSqr();
	  // YY = Y1^2
	  var yy = this.y.redSqr();
	  // ZZ = Z1^2
	  var zz = this.z.redSqr();
	  // YYYY = YY^2
	  var yyyy = yy.redSqr();
	  // M = 3 * XX + a * ZZ2; a = 0
	  var m = xx.redAdd(xx).redIAdd(xx);
	  // MM = M^2
	  var mm = m.redSqr();
	  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
	  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
	  e = e.redIAdd(e);
	  e = e.redAdd(e).redIAdd(e);
	  e = e.redISub(mm);
	  // EE = E^2
	  var ee = e.redSqr();
	  // T = 16*YYYY
	  var t = yyyy.redIAdd(yyyy);
	  t = t.redIAdd(t);
	  t = t.redIAdd(t);
	  t = t.redIAdd(t);
	  // U = (M + E)^2 - MM - EE - T
	  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
	  // X3 = 4 * (X1 * EE - 4 * YY * U)
	  var yyu4 = yy.redMul(u);
	  yyu4 = yyu4.redIAdd(yyu4);
	  yyu4 = yyu4.redIAdd(yyu4);
	  var nx = this.x.redMul(ee).redISub(yyu4);
	  nx = nx.redIAdd(nx);
	  nx = nx.redIAdd(nx);
	  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
	  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
	  ny = ny.redIAdd(ny);
	  ny = ny.redIAdd(ny);
	  ny = ny.redIAdd(ny);
	  // Z3 = (Z1 + E)^2 - ZZ - EE
	  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype.mul = function mul(k, kbase) {
	  k = new BN$7(k, kbase);

	  return this.curve._wnafMul(this, k);
	};

	JPoint.prototype.eq = function eq(p) {
	  if (p.type === 'affine')
	    return this.eq(p.toJ());

	  if (this === p)
	    return true;

	  // x1 * z2^2 == x2 * z1^2
	  var z2 = this.z.redSqr();
	  var pz2 = p.z.redSqr();
	  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
	    return false;

	  // y1 * z2^3 == y2 * z1^3
	  var z3 = z2.redMul(this.z);
	  var pz3 = pz2.redMul(p.z);
	  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
	};

	JPoint.prototype.eqXToP = function eqXToP(x) {
	  var zs = this.z.redSqr();
	  var rx = x.toRed(this.curve.red).redMul(zs);
	  if (this.x.cmp(rx) === 0)
	    return true;

	  var xc = x.clone();
	  var t = this.curve.redN.redMul(zs);
	  for (;;) {
	    xc.iadd(this.curve.n);
	    if (xc.cmp(this.curve.p) >= 0)
	      return false;

	    rx.redIAdd(t);
	    if (this.x.cmp(rx) === 0)
	      return true;
	  }
	};

	JPoint.prototype.inspect = function inspect() {
	  if (this.isInfinity())
	    return '<EC JPoint Infinity>';
	  return '<EC JPoint x: ' + this.x.toString(16, 2) +
	      ' y: ' + this.y.toString(16, 2) +
	      ' z: ' + this.z.toString(16, 2) + '>';
	};

	JPoint.prototype.isInfinity = function isInfinity() {
	  // XXX This code assumes that zero is always zero in red
	  return this.z.cmpn(0) === 0;
	};

	var BN$6 = bnExports;
	var inherits$d = inherits_browserExports;
	var Base$2 = base$1;

	var utils$i = utils$m;

	function MontCurve(conf) {
	  Base$2.call(this, 'mont', conf);

	  this.a = new BN$6(conf.a, 16).toRed(this.red);
	  this.b = new BN$6(conf.b, 16).toRed(this.red);
	  this.i4 = new BN$6(4).toRed(this.red).redInvm();
	  this.two = new BN$6(2).toRed(this.red);
	  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
	}
	inherits$d(MontCurve, Base$2);
	var mont = MontCurve;

	MontCurve.prototype.validate = function validate(point) {
	  var x = point.normalize().x;
	  var x2 = x.redSqr();
	  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
	  var y = rhs.redSqrt();

	  return y.redSqr().cmp(rhs) === 0;
	};

	function Point$1(curve, x, z) {
	  Base$2.BasePoint.call(this, curve, 'projective');
	  if (x === null && z === null) {
	    this.x = this.curve.one;
	    this.z = this.curve.zero;
	  } else {
	    this.x = new BN$6(x, 16);
	    this.z = new BN$6(z, 16);
	    if (!this.x.red)
	      this.x = this.x.toRed(this.curve.red);
	    if (!this.z.red)
	      this.z = this.z.toRed(this.curve.red);
	  }
	}
	inherits$d(Point$1, Base$2.BasePoint);

	MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
	  return this.point(utils$i.toArray(bytes, enc), 1);
	};

	MontCurve.prototype.point = function point(x, z) {
	  return new Point$1(this, x, z);
	};

	MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
	  return Point$1.fromJSON(this, obj);
	};

	Point$1.prototype.precompute = function precompute() {
	  // No-op
	};

	Point$1.prototype._encode = function _encode() {
	  return this.getX().toArray('be', this.curve.p.byteLength());
	};

	Point$1.fromJSON = function fromJSON(curve, obj) {
	  return new Point$1(curve, obj[0], obj[1] || curve.one);
	};

	Point$1.prototype.inspect = function inspect() {
	  if (this.isInfinity())
	    return '<EC Point Infinity>';
	  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
	      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
	};

	Point$1.prototype.isInfinity = function isInfinity() {
	  // XXX This code assumes that zero is always zero in red
	  return this.z.cmpn(0) === 0;
	};

	Point$1.prototype.dbl = function dbl() {
	  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
	  // 2M + 2S + 4A

	  // A = X1 + Z1
	  var a = this.x.redAdd(this.z);
	  // AA = A^2
	  var aa = a.redSqr();
	  // B = X1 - Z1
	  var b = this.x.redSub(this.z);
	  // BB = B^2
	  var bb = b.redSqr();
	  // C = AA - BB
	  var c = aa.redSub(bb);
	  // X3 = AA * BB
	  var nx = aa.redMul(bb);
	  // Z3 = C * (BB + A24 * C)
	  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
	  return this.curve.point(nx, nz);
	};

	Point$1.prototype.add = function add() {
	  throw new Error('Not supported on Montgomery curve');
	};

	Point$1.prototype.diffAdd = function diffAdd(p, diff) {
	  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
	  // 4M + 2S + 6A

	  // A = X2 + Z2
	  var a = this.x.redAdd(this.z);
	  // B = X2 - Z2
	  var b = this.x.redSub(this.z);
	  // C = X3 + Z3
	  var c = p.x.redAdd(p.z);
	  // D = X3 - Z3
	  var d = p.x.redSub(p.z);
	  // DA = D * A
	  var da = d.redMul(a);
	  // CB = C * B
	  var cb = c.redMul(b);
	  // X5 = Z1 * (DA + CB)^2
	  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
	  // Z5 = X1 * (DA - CB)^2
	  var nz = diff.x.redMul(da.redISub(cb).redSqr());
	  return this.curve.point(nx, nz);
	};

	Point$1.prototype.mul = function mul(k) {
	  var t = k.clone();
	  var a = this; // (N / 2) * Q + Q
	  var b = this.curve.point(null, null); // (N / 2) * Q
	  var c = this; // Q

	  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
	    bits.push(t.andln(1));

	  for (var i = bits.length - 1; i >= 0; i--) {
	    if (bits[i] === 0) {
	      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
	      a = a.diffAdd(b, c);
	      // N * Q = 2 * ((N / 2) * Q + Q))
	      b = b.dbl();
	    } else {
	      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
	      b = a.diffAdd(b, c);
	      // N * Q + Q = 2 * ((N / 2) * Q + Q)
	      a = a.dbl();
	    }
	  }
	  return b;
	};

	Point$1.prototype.mulAdd = function mulAdd() {
	  throw new Error('Not supported on Montgomery curve');
	};

	Point$1.prototype.jumlAdd = function jumlAdd() {
	  throw new Error('Not supported on Montgomery curve');
	};

	Point$1.prototype.eq = function eq(other) {
	  return this.getX().cmp(other.getX()) === 0;
	};

	Point$1.prototype.normalize = function normalize() {
	  this.x = this.x.redMul(this.z.redInvm());
	  this.z = this.curve.one;
	  return this;
	};

	Point$1.prototype.getX = function getX() {
	  // Normalize coordinates
	  this.normalize();

	  return this.x.fromRed();
	};

	var utils$h = utils$m;
	var BN$5 = bnExports;
	var inherits$c = inherits_browserExports;
	var Base$1 = base$1;

	var assert$c = utils$h.assert;

	function EdwardsCurve(conf) {
	  // NOTE: Important as we are creating point in Base.call()
	  this.twisted = (conf.a | 0) !== 1;
	  this.mOneA = this.twisted && (conf.a | 0) === -1;
	  this.extended = this.mOneA;

	  Base$1.call(this, 'edwards', conf);

	  this.a = new BN$5(conf.a, 16).umod(this.red.m);
	  this.a = this.a.toRed(this.red);
	  this.c = new BN$5(conf.c, 16).toRed(this.red);
	  this.c2 = this.c.redSqr();
	  this.d = new BN$5(conf.d, 16).toRed(this.red);
	  this.dd = this.d.redAdd(this.d);

	  assert$c(!this.twisted || this.c.fromRed().cmpn(1) === 0);
	  this.oneC = (conf.c | 0) === 1;
	}
	inherits$c(EdwardsCurve, Base$1);
	var edwards = EdwardsCurve;

	EdwardsCurve.prototype._mulA = function _mulA(num) {
	  if (this.mOneA)
	    return num.redNeg();
	  else
	    return this.a.redMul(num);
	};

	EdwardsCurve.prototype._mulC = function _mulC(num) {
	  if (this.oneC)
	    return num;
	  else
	    return this.c.redMul(num);
	};

	// Just for compatibility with Short curve
	EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
	  return this.point(x, y, z, t);
	};

	EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
	  x = new BN$5(x, 16);
	  if (!x.red)
	    x = x.toRed(this.red);

	  var x2 = x.redSqr();
	  var rhs = this.c2.redSub(this.a.redMul(x2));
	  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

	  var y2 = rhs.redMul(lhs.redInvm());
	  var y = y2.redSqrt();
	  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
	    throw new Error('invalid point');

	  var isOdd = y.fromRed().isOdd();
	  if (odd && !isOdd || !odd && isOdd)
	    y = y.redNeg();

	  return this.point(x, y);
	};

	EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
	  y = new BN$5(y, 16);
	  if (!y.red)
	    y = y.toRed(this.red);

	  // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
	  var y2 = y.redSqr();
	  var lhs = y2.redSub(this.c2);
	  var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
	  var x2 = lhs.redMul(rhs.redInvm());

	  if (x2.cmp(this.zero) === 0) {
	    if (odd)
	      throw new Error('invalid point');
	    else
	      return this.point(this.zero, y);
	  }

	  var x = x2.redSqrt();
	  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
	    throw new Error('invalid point');

	  if (x.fromRed().isOdd() !== odd)
	    x = x.redNeg();

	  return this.point(x, y);
	};

	EdwardsCurve.prototype.validate = function validate(point) {
	  if (point.isInfinity())
	    return true;

	  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
	  point.normalize();

	  var x2 = point.x.redSqr();
	  var y2 = point.y.redSqr();
	  var lhs = x2.redMul(this.a).redAdd(y2);
	  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

	  return lhs.cmp(rhs) === 0;
	};

	function Point(curve, x, y, z, t) {
	  Base$1.BasePoint.call(this, curve, 'projective');
	  if (x === null && y === null && z === null) {
	    this.x = this.curve.zero;
	    this.y = this.curve.one;
	    this.z = this.curve.one;
	    this.t = this.curve.zero;
	    this.zOne = true;
	  } else {
	    this.x = new BN$5(x, 16);
	    this.y = new BN$5(y, 16);
	    this.z = z ? new BN$5(z, 16) : this.curve.one;
	    this.t = t && new BN$5(t, 16);
	    if (!this.x.red)
	      this.x = this.x.toRed(this.curve.red);
	    if (!this.y.red)
	      this.y = this.y.toRed(this.curve.red);
	    if (!this.z.red)
	      this.z = this.z.toRed(this.curve.red);
	    if (this.t && !this.t.red)
	      this.t = this.t.toRed(this.curve.red);
	    this.zOne = this.z === this.curve.one;

	    // Use extended coordinates
	    if (this.curve.extended && !this.t) {
	      this.t = this.x.redMul(this.y);
	      if (!this.zOne)
	        this.t = this.t.redMul(this.z.redInvm());
	    }
	  }
	}
	inherits$c(Point, Base$1.BasePoint);

	EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
	  return Point.fromJSON(this, obj);
	};

	EdwardsCurve.prototype.point = function point(x, y, z, t) {
	  return new Point(this, x, y, z, t);
	};

	Point.fromJSON = function fromJSON(curve, obj) {
	  return new Point(curve, obj[0], obj[1], obj[2]);
	};

	Point.prototype.inspect = function inspect() {
	  if (this.isInfinity())
	    return '<EC Point Infinity>';
	  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
	      ' y: ' + this.y.fromRed().toString(16, 2) +
	      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
	};

	Point.prototype.isInfinity = function isInfinity() {
	  // XXX This code assumes that zero is always zero in red
	  return this.x.cmpn(0) === 0 &&
	    (this.y.cmp(this.z) === 0 ||
	    (this.zOne && this.y.cmp(this.curve.c) === 0));
	};

	Point.prototype._extDbl = function _extDbl() {
	  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
	  //     #doubling-dbl-2008-hwcd
	  // 4M + 4S

	  // A = X1^2
	  var a = this.x.redSqr();
	  // B = Y1^2
	  var b = this.y.redSqr();
	  // C = 2 * Z1^2
	  var c = this.z.redSqr();
	  c = c.redIAdd(c);
	  // D = a * A
	  var d = this.curve._mulA(a);
	  // E = (X1 + Y1)^2 - A - B
	  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
	  // G = D + B
	  var g = d.redAdd(b);
	  // F = G - C
	  var f = g.redSub(c);
	  // H = D - B
	  var h = d.redSub(b);
	  // X3 = E * F
	  var nx = e.redMul(f);
	  // Y3 = G * H
	  var ny = g.redMul(h);
	  // T3 = E * H
	  var nt = e.redMul(h);
	  // Z3 = F * G
	  var nz = f.redMul(g);
	  return this.curve.point(nx, ny, nz, nt);
	};

	Point.prototype._projDbl = function _projDbl() {
	  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
	  //     #doubling-dbl-2008-bbjlp
	  //     #doubling-dbl-2007-bl
	  // and others
	  // Generally 3M + 4S or 2M + 4S

	  // B = (X1 + Y1)^2
	  var b = this.x.redAdd(this.y).redSqr();
	  // C = X1^2
	  var c = this.x.redSqr();
	  // D = Y1^2
	  var d = this.y.redSqr();

	  var nx;
	  var ny;
	  var nz;
	  var e;
	  var h;
	  var j;
	  if (this.curve.twisted) {
	    // E = a * C
	    e = this.curve._mulA(c);
	    // F = E + D
	    var f = e.redAdd(d);
	    if (this.zOne) {
	      // X3 = (B - C - D) * (F - 2)
	      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
	      // Y3 = F * (E - D)
	      ny = f.redMul(e.redSub(d));
	      // Z3 = F^2 - 2 * F
	      nz = f.redSqr().redSub(f).redSub(f);
	    } else {
	      // H = Z1^2
	      h = this.z.redSqr();
	      // J = F - 2 * H
	      j = f.redSub(h).redISub(h);
	      // X3 = (B-C-D)*J
	      nx = b.redSub(c).redISub(d).redMul(j);
	      // Y3 = F * (E - D)
	      ny = f.redMul(e.redSub(d));
	      // Z3 = F * J
	      nz = f.redMul(j);
	    }
	  } else {
	    // E = C + D
	    e = c.redAdd(d);
	    // H = (c * Z1)^2
	    h = this.curve._mulC(this.z).redSqr();
	    // J = E - 2 * H
	    j = e.redSub(h).redSub(h);
	    // X3 = c * (B - E) * J
	    nx = this.curve._mulC(b.redISub(e)).redMul(j);
	    // Y3 = c * E * (C - D)
	    ny = this.curve._mulC(e).redMul(c.redISub(d));
	    // Z3 = E * J
	    nz = e.redMul(j);
	  }
	  return this.curve.point(nx, ny, nz);
	};

	Point.prototype.dbl = function dbl() {
	  if (this.isInfinity())
	    return this;

	  // Double in extended coordinates
	  if (this.curve.extended)
	    return this._extDbl();
	  else
	    return this._projDbl();
	};

	Point.prototype._extAdd = function _extAdd(p) {
	  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
	  //     #addition-add-2008-hwcd-3
	  // 8M

	  // A = (Y1 - X1) * (Y2 - X2)
	  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
	  // B = (Y1 + X1) * (Y2 + X2)
	  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
	  // C = T1 * k * T2
	  var c = this.t.redMul(this.curve.dd).redMul(p.t);
	  // D = Z1 * 2 * Z2
	  var d = this.z.redMul(p.z.redAdd(p.z));
	  // E = B - A
	  var e = b.redSub(a);
	  // F = D - C
	  var f = d.redSub(c);
	  // G = D + C
	  var g = d.redAdd(c);
	  // H = B + A
	  var h = b.redAdd(a);
	  // X3 = E * F
	  var nx = e.redMul(f);
	  // Y3 = G * H
	  var ny = g.redMul(h);
	  // T3 = E * H
	  var nt = e.redMul(h);
	  // Z3 = F * G
	  var nz = f.redMul(g);
	  return this.curve.point(nx, ny, nz, nt);
	};

	Point.prototype._projAdd = function _projAdd(p) {
	  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
	  //     #addition-add-2008-bbjlp
	  //     #addition-add-2007-bl
	  // 10M + 1S

	  // A = Z1 * Z2
	  var a = this.z.redMul(p.z);
	  // B = A^2
	  var b = a.redSqr();
	  // C = X1 * X2
	  var c = this.x.redMul(p.x);
	  // D = Y1 * Y2
	  var d = this.y.redMul(p.y);
	  // E = d * C * D
	  var e = this.curve.d.redMul(c).redMul(d);
	  // F = B - E
	  var f = b.redSub(e);
	  // G = B + E
	  var g = b.redAdd(e);
	  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
	  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
	  var nx = a.redMul(f).redMul(tmp);
	  var ny;
	  var nz;
	  if (this.curve.twisted) {
	    // Y3 = A * G * (D - a * C)
	    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
	    // Z3 = F * G
	    nz = f.redMul(g);
	  } else {
	    // Y3 = A * G * (D - C)
	    ny = a.redMul(g).redMul(d.redSub(c));
	    // Z3 = c * F * G
	    nz = this.curve._mulC(f).redMul(g);
	  }
	  return this.curve.point(nx, ny, nz);
	};

	Point.prototype.add = function add(p) {
	  if (this.isInfinity())
	    return p;
	  if (p.isInfinity())
	    return this;

	  if (this.curve.extended)
	    return this._extAdd(p);
	  else
	    return this._projAdd(p);
	};

	Point.prototype.mul = function mul(k) {
	  if (this._hasDoubles(k))
	    return this.curve._fixedNafMul(this, k);
	  else
	    return this.curve._wnafMul(this, k);
	};

	Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
	  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
	};

	Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
	  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
	};

	Point.prototype.normalize = function normalize() {
	  if (this.zOne)
	    return this;

	  // Normalize coordinates
	  var zi = this.z.redInvm();
	  this.x = this.x.redMul(zi);
	  this.y = this.y.redMul(zi);
	  if (this.t)
	    this.t = this.t.redMul(zi);
	  this.z = this.curve.one;
	  this.zOne = true;
	  return this;
	};

	Point.prototype.neg = function neg() {
	  return this.curve.point(this.x.redNeg(),
	    this.y,
	    this.z,
	    this.t && this.t.redNeg());
	};

	Point.prototype.getX = function getX() {
	  this.normalize();
	  return this.x.fromRed();
	};

	Point.prototype.getY = function getY() {
	  this.normalize();
	  return this.y.fromRed();
	};

	Point.prototype.eq = function eq(other) {
	  return this === other ||
	         this.getX().cmp(other.getX()) === 0 &&
	         this.getY().cmp(other.getY()) === 0;
	};

	Point.prototype.eqXToP = function eqXToP(x) {
	  var rx = x.toRed(this.curve.red).redMul(this.z);
	  if (this.x.cmp(rx) === 0)
	    return true;

	  var xc = x.clone();
	  var t = this.curve.redN.redMul(this.z);
	  for (;;) {
	    xc.iadd(this.curve.n);
	    if (xc.cmp(this.curve.p) >= 0)
	      return false;

	    rx.redIAdd(t);
	    if (this.x.cmp(rx) === 0)
	      return true;
	  }
	};

	// Compatibility with BaseCurve
	Point.prototype.toP = Point.prototype.normalize;
	Point.prototype.mixedAdd = Point.prototype.add;

	(function (exports) {

		var curve = exports;

		curve.base = base$1;
		curve.short = short;
		curve.mont = mont;
		curve.edwards = edwards;
	} (curve));

	var curves$2 = {};

	var hash$4 = {};

	var utils$g = {};

	var assert$b = minimalisticAssert;
	var inherits$b = inherits_browserExports;

	utils$g.inherits = inherits$b;

	function isSurrogatePair(msg, i) {
	  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
	    return false;
	  }
	  if (i < 0 || i + 1 >= msg.length) {
	    return false;
	  }
	  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
	}

	function toArray(msg, enc) {
	  if (Array.isArray(msg))
	    return msg.slice();
	  if (!msg)
	    return [];
	  var res = [];
	  if (typeof msg === 'string') {
	    if (!enc) {
	      // Inspired by stringToUtf8ByteArray() in closure-library by Google
	      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
	      // Apache License 2.0
	      // https://github.com/google/closure-library/blob/master/LICENSE
	      var p = 0;
	      for (var i = 0; i < msg.length; i++) {
	        var c = msg.charCodeAt(i);
	        if (c < 128) {
	          res[p++] = c;
	        } else if (c < 2048) {
	          res[p++] = (c >> 6) | 192;
	          res[p++] = (c & 63) | 128;
	        } else if (isSurrogatePair(msg, i)) {
	          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
	          res[p++] = (c >> 18) | 240;
	          res[p++] = ((c >> 12) & 63) | 128;
	          res[p++] = ((c >> 6) & 63) | 128;
	          res[p++] = (c & 63) | 128;
	        } else {
	          res[p++] = (c >> 12) | 224;
	          res[p++] = ((c >> 6) & 63) | 128;
	          res[p++] = (c & 63) | 128;
	        }
	      }
	    } else if (enc === 'hex') {
	      msg = msg.replace(/[^a-z0-9]+/ig, '');
	      if (msg.length % 2 !== 0)
	        msg = '0' + msg;
	      for (i = 0; i < msg.length; i += 2)
	        res.push(parseInt(msg[i] + msg[i + 1], 16));
	    }
	  } else {
	    for (i = 0; i < msg.length; i++)
	      res[i] = msg[i] | 0;
	  }
	  return res;
	}
	utils$g.toArray = toArray;

	function toHex(msg) {
	  var res = '';
	  for (var i = 0; i < msg.length; i++)
	    res += zero2(msg[i].toString(16));
	  return res;
	}
	utils$g.toHex = toHex;

	function htonl(w) {
	  var res = (w >>> 24) |
	            ((w >>> 8) & 0xff00) |
	            ((w << 8) & 0xff0000) |
	            ((w & 0xff) << 24);
	  return res >>> 0;
	}
	utils$g.htonl = htonl;

	function toHex32(msg, endian) {
	  var res = '';
	  for (var i = 0; i < msg.length; i++) {
	    var w = msg[i];
	    if (endian === 'little')
	      w = htonl(w);
	    res += zero8(w.toString(16));
	  }
	  return res;
	}
	utils$g.toHex32 = toHex32;

	function zero2(word) {
	  if (word.length === 1)
	    return '0' + word;
	  else
	    return word;
	}
	utils$g.zero2 = zero2;

	function zero8(word) {
	  if (word.length === 7)
	    return '0' + word;
	  else if (word.length === 6)
	    return '00' + word;
	  else if (word.length === 5)
	    return '000' + word;
	  else if (word.length === 4)
	    return '0000' + word;
	  else if (word.length === 3)
	    return '00000' + word;
	  else if (word.length === 2)
	    return '000000' + word;
	  else if (word.length === 1)
	    return '0000000' + word;
	  else
	    return word;
	}
	utils$g.zero8 = zero8;

	function join32(msg, start, end, endian) {
	  var len = end - start;
	  assert$b(len % 4 === 0);
	  var res = new Array(len / 4);
	  for (var i = 0, k = start; i < res.length; i++, k += 4) {
	    var w;
	    if (endian === 'big')
	      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
	    else
	      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
	    res[i] = w >>> 0;
	  }
	  return res;
	}
	utils$g.join32 = join32;

	function split32(msg, endian) {
	  var res = new Array(msg.length * 4);
	  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
	    var m = msg[i];
	    if (endian === 'big') {
	      res[k] = m >>> 24;
	      res[k + 1] = (m >>> 16) & 0xff;
	      res[k + 2] = (m >>> 8) & 0xff;
	      res[k + 3] = m & 0xff;
	    } else {
	      res[k + 3] = m >>> 24;
	      res[k + 2] = (m >>> 16) & 0xff;
	      res[k + 1] = (m >>> 8) & 0xff;
	      res[k] = m & 0xff;
	    }
	  }
	  return res;
	}
	utils$g.split32 = split32;

	function rotr32$1(w, b) {
	  return (w >>> b) | (w << (32 - b));
	}
	utils$g.rotr32 = rotr32$1;

	function rotl32$2(w, b) {
	  return (w << b) | (w >>> (32 - b));
	}
	utils$g.rotl32 = rotl32$2;

	function sum32$3(a, b) {
	  return (a + b) >>> 0;
	}
	utils$g.sum32 = sum32$3;

	function sum32_3$1(a, b, c) {
	  return (a + b + c) >>> 0;
	}
	utils$g.sum32_3 = sum32_3$1;

	function sum32_4$2(a, b, c, d) {
	  return (a + b + c + d) >>> 0;
	}
	utils$g.sum32_4 = sum32_4$2;

	function sum32_5$2(a, b, c, d, e) {
	  return (a + b + c + d + e) >>> 0;
	}
	utils$g.sum32_5 = sum32_5$2;

	function sum64$1(buf, pos, ah, al) {
	  var bh = buf[pos];
	  var bl = buf[pos + 1];

	  var lo = (al + bl) >>> 0;
	  var hi = (lo < al ? 1 : 0) + ah + bh;
	  buf[pos] = hi >>> 0;
	  buf[pos + 1] = lo;
	}
	utils$g.sum64 = sum64$1;

	function sum64_hi$1(ah, al, bh, bl) {
	  var lo = (al + bl) >>> 0;
	  var hi = (lo < al ? 1 : 0) + ah + bh;
	  return hi >>> 0;
	}
	utils$g.sum64_hi = sum64_hi$1;

	function sum64_lo$1(ah, al, bh, bl) {
	  var lo = al + bl;
	  return lo >>> 0;
	}
	utils$g.sum64_lo = sum64_lo$1;

	function sum64_4_hi$1(ah, al, bh, bl, ch, cl, dh, dl) {
	  var carry = 0;
	  var lo = al;
	  lo = (lo + bl) >>> 0;
	  carry += lo < al ? 1 : 0;
	  lo = (lo + cl) >>> 0;
	  carry += lo < cl ? 1 : 0;
	  lo = (lo + dl) >>> 0;
	  carry += lo < dl ? 1 : 0;

	  var hi = ah + bh + ch + dh + carry;
	  return hi >>> 0;
	}
	utils$g.sum64_4_hi = sum64_4_hi$1;

	function sum64_4_lo$1(ah, al, bh, bl, ch, cl, dh, dl) {
	  var lo = al + bl + cl + dl;
	  return lo >>> 0;
	}
	utils$g.sum64_4_lo = sum64_4_lo$1;

	function sum64_5_hi$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
	  var carry = 0;
	  var lo = al;
	  lo = (lo + bl) >>> 0;
	  carry += lo < al ? 1 : 0;
	  lo = (lo + cl) >>> 0;
	  carry += lo < cl ? 1 : 0;
	  lo = (lo + dl) >>> 0;
	  carry += lo < dl ? 1 : 0;
	  lo = (lo + el) >>> 0;
	  carry += lo < el ? 1 : 0;

	  var hi = ah + bh + ch + dh + eh + carry;
	  return hi >>> 0;
	}
	utils$g.sum64_5_hi = sum64_5_hi$1;

	function sum64_5_lo$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
	  var lo = al + bl + cl + dl + el;

	  return lo >>> 0;
	}
	utils$g.sum64_5_lo = sum64_5_lo$1;

	function rotr64_hi$1(ah, al, num) {
	  var r = (al << (32 - num)) | (ah >>> num);
	  return r >>> 0;
	}
	utils$g.rotr64_hi = rotr64_hi$1;

	function rotr64_lo$1(ah, al, num) {
	  var r = (ah << (32 - num)) | (al >>> num);
	  return r >>> 0;
	}
	utils$g.rotr64_lo = rotr64_lo$1;

	function shr64_hi$1(ah, al, num) {
	  return ah >>> num;
	}
	utils$g.shr64_hi = shr64_hi$1;

	function shr64_lo$1(ah, al, num) {
	  var r = (ah << (32 - num)) | (al >>> num);
	  return r >>> 0;
	}
	utils$g.shr64_lo = shr64_lo$1;

	var common$6 = {};

	var utils$f = utils$g;
	var assert$a = minimalisticAssert;

	function BlockHash$4() {
	  this.pending = null;
	  this.pendingTotal = 0;
	  this.blockSize = this.constructor.blockSize;
	  this.outSize = this.constructor.outSize;
	  this.hmacStrength = this.constructor.hmacStrength;
	  this.padLength = this.constructor.padLength / 8;
	  this.endian = 'big';

	  this._delta8 = this.blockSize / 8;
	  this._delta32 = this.blockSize / 32;
	}
	common$6.BlockHash = BlockHash$4;

	BlockHash$4.prototype.update = function update(msg, enc) {
	  // Convert message to array, pad it, and join into 32bit blocks
	  msg = utils$f.toArray(msg, enc);
	  if (!this.pending)
	    this.pending = msg;
	  else
	    this.pending = this.pending.concat(msg);
	  this.pendingTotal += msg.length;

	  // Enough data, try updating
	  if (this.pending.length >= this._delta8) {
	    msg = this.pending;

	    // Process pending data in blocks
	    var r = msg.length % this._delta8;
	    this.pending = msg.slice(msg.length - r, msg.length);
	    if (this.pending.length === 0)
	      this.pending = null;

	    msg = utils$f.join32(msg, 0, msg.length - r, this.endian);
	    for (var i = 0; i < msg.length; i += this._delta32)
	      this._update(msg, i, i + this._delta32);
	  }

	  return this;
	};

	BlockHash$4.prototype.digest = function digest(enc) {
	  this.update(this._pad());
	  assert$a(this.pending === null);

	  return this._digest(enc);
	};

	BlockHash$4.prototype._pad = function pad() {
	  var len = this.pendingTotal;
	  var bytes = this._delta8;
	  var k = bytes - ((len + this.padLength) % bytes);
	  var res = new Array(k + this.padLength);
	  res[0] = 0x80;
	  for (var i = 1; i < k; i++)
	    res[i] = 0;

	  // Append length
	  len <<= 3;
	  if (this.endian === 'big') {
	    for (var t = 8; t < this.padLength; t++)
	      res[i++] = 0;

	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = (len >>> 24) & 0xff;
	    res[i++] = (len >>> 16) & 0xff;
	    res[i++] = (len >>> 8) & 0xff;
	    res[i++] = len & 0xff;
	  } else {
	    res[i++] = len & 0xff;
	    res[i++] = (len >>> 8) & 0xff;
	    res[i++] = (len >>> 16) & 0xff;
	    res[i++] = (len >>> 24) & 0xff;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;

	    for (t = 8; t < this.padLength; t++)
	      res[i++] = 0;
	  }

	  return res;
	};

	var sha$2 = {};

	var common$5 = {};

	var utils$e = utils$g;
	var rotr32 = utils$e.rotr32;

	function ft_1$1(s, x, y, z) {
	  if (s === 0)
	    return ch32$1(x, y, z);
	  if (s === 1 || s === 3)
	    return p32(x, y, z);
	  if (s === 2)
	    return maj32$1(x, y, z);
	}
	common$5.ft_1 = ft_1$1;

	function ch32$1(x, y, z) {
	  return (x & y) ^ ((~x) & z);
	}
	common$5.ch32 = ch32$1;

	function maj32$1(x, y, z) {
	  return (x & y) ^ (x & z) ^ (y & z);
	}
	common$5.maj32 = maj32$1;

	function p32(x, y, z) {
	  return x ^ y ^ z;
	}
	common$5.p32 = p32;

	function s0_256$1(x) {
	  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
	}
	common$5.s0_256 = s0_256$1;

	function s1_256$1(x) {
	  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
	}
	common$5.s1_256 = s1_256$1;

	function g0_256$1(x) {
	  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
	}
	common$5.g0_256 = g0_256$1;

	function g1_256$1(x) {
	  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
	}
	common$5.g1_256 = g1_256$1;

	var utils$d = utils$g;
	var common$4 = common$6;
	var shaCommon$1 = common$5;

	var rotl32$1 = utils$d.rotl32;
	var sum32$2 = utils$d.sum32;
	var sum32_5$1 = utils$d.sum32_5;
	var ft_1 = shaCommon$1.ft_1;
	var BlockHash$3 = common$4.BlockHash;

	var sha1_K = [
	  0x5A827999, 0x6ED9EBA1,
	  0x8F1BBCDC, 0xCA62C1D6
	];

	function SHA1() {
	  if (!(this instanceof SHA1))
	    return new SHA1();

	  BlockHash$3.call(this);
	  this.h = [
	    0x67452301, 0xefcdab89, 0x98badcfe,
	    0x10325476, 0xc3d2e1f0 ];
	  this.W = new Array(80);
	}

	utils$d.inherits(SHA1, BlockHash$3);
	var _1 = SHA1;

	SHA1.blockSize = 512;
	SHA1.outSize = 160;
	SHA1.hmacStrength = 80;
	SHA1.padLength = 64;

	SHA1.prototype._update = function _update(msg, start) {
	  var W = this.W;

	  for (var i = 0; i < 16; i++)
	    W[i] = msg[start + i];

	  for(; i < W.length; i++)
	    W[i] = rotl32$1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

	  var a = this.h[0];
	  var b = this.h[1];
	  var c = this.h[2];
	  var d = this.h[3];
	  var e = this.h[4];

	  for (i = 0; i < W.length; i++) {
	    var s = ~~(i / 20);
	    var t = sum32_5$1(rotl32$1(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
	    e = d;
	    d = c;
	    c = rotl32$1(b, 30);
	    b = a;
	    a = t;
	  }

	  this.h[0] = sum32$2(this.h[0], a);
	  this.h[1] = sum32$2(this.h[1], b);
	  this.h[2] = sum32$2(this.h[2], c);
	  this.h[3] = sum32$2(this.h[3], d);
	  this.h[4] = sum32$2(this.h[4], e);
	};

	SHA1.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils$d.toHex32(this.h, 'big');
	  else
	    return utils$d.split32(this.h, 'big');
	};

	var utils$c = utils$g;
	var common$3 = common$6;
	var shaCommon = common$5;
	var assert$9 = minimalisticAssert;

	var sum32$1 = utils$c.sum32;
	var sum32_4$1 = utils$c.sum32_4;
	var sum32_5 = utils$c.sum32_5;
	var ch32 = shaCommon.ch32;
	var maj32 = shaCommon.maj32;
	var s0_256 = shaCommon.s0_256;
	var s1_256 = shaCommon.s1_256;
	var g0_256 = shaCommon.g0_256;
	var g1_256 = shaCommon.g1_256;

	var BlockHash$2 = common$3.BlockHash;

	var sha256_K = [
	  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
	  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
	  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
	  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
	  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
	  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
	  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
	  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
	  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
	  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
	  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
	  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
	  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
	  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
	  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
	  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
	];

	function SHA256$1() {
	  if (!(this instanceof SHA256$1))
	    return new SHA256$1();

	  BlockHash$2.call(this);
	  this.h = [
	    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
	    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
	  ];
	  this.k = sha256_K;
	  this.W = new Array(64);
	}
	utils$c.inherits(SHA256$1, BlockHash$2);
	var _256 = SHA256$1;

	SHA256$1.blockSize = 512;
	SHA256$1.outSize = 256;
	SHA256$1.hmacStrength = 192;
	SHA256$1.padLength = 64;

	SHA256$1.prototype._update = function _update(msg, start) {
	  var W = this.W;

	  for (var i = 0; i < 16; i++)
	    W[i] = msg[start + i];
	  for (; i < W.length; i++)
	    W[i] = sum32_4$1(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

	  var a = this.h[0];
	  var b = this.h[1];
	  var c = this.h[2];
	  var d = this.h[3];
	  var e = this.h[4];
	  var f = this.h[5];
	  var g = this.h[6];
	  var h = this.h[7];

	  assert$9(this.k.length === W.length);
	  for (i = 0; i < W.length; i++) {
	    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
	    var T2 = sum32$1(s0_256(a), maj32(a, b, c));
	    h = g;
	    g = f;
	    f = e;
	    e = sum32$1(d, T1);
	    d = c;
	    c = b;
	    b = a;
	    a = sum32$1(T1, T2);
	  }

	  this.h[0] = sum32$1(this.h[0], a);
	  this.h[1] = sum32$1(this.h[1], b);
	  this.h[2] = sum32$1(this.h[2], c);
	  this.h[3] = sum32$1(this.h[3], d);
	  this.h[4] = sum32$1(this.h[4], e);
	  this.h[5] = sum32$1(this.h[5], f);
	  this.h[6] = sum32$1(this.h[6], g);
	  this.h[7] = sum32$1(this.h[7], h);
	};

	SHA256$1.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils$c.toHex32(this.h, 'big');
	  else
	    return utils$c.split32(this.h, 'big');
	};

	var utils$b = utils$g;
	var SHA256 = _256;

	function SHA224() {
	  if (!(this instanceof SHA224))
	    return new SHA224();

	  SHA256.call(this);
	  this.h = [
	    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
	    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
	}
	utils$b.inherits(SHA224, SHA256);
	var _224 = SHA224;

	SHA224.blockSize = 512;
	SHA224.outSize = 224;
	SHA224.hmacStrength = 192;
	SHA224.padLength = 64;

	SHA224.prototype._digest = function digest(enc) {
	  // Just truncate output
	  if (enc === 'hex')
	    return utils$b.toHex32(this.h.slice(0, 7), 'big');
	  else
	    return utils$b.split32(this.h.slice(0, 7), 'big');
	};

	var utils$a = utils$g;
	var common$2 = common$6;
	var assert$8 = minimalisticAssert;

	var rotr64_hi = utils$a.rotr64_hi;
	var rotr64_lo = utils$a.rotr64_lo;
	var shr64_hi = utils$a.shr64_hi;
	var shr64_lo = utils$a.shr64_lo;
	var sum64 = utils$a.sum64;
	var sum64_hi = utils$a.sum64_hi;
	var sum64_lo = utils$a.sum64_lo;
	var sum64_4_hi = utils$a.sum64_4_hi;
	var sum64_4_lo = utils$a.sum64_4_lo;
	var sum64_5_hi = utils$a.sum64_5_hi;
	var sum64_5_lo = utils$a.sum64_5_lo;

	var BlockHash$1 = common$2.BlockHash;

	var sha512_K = [
	  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
	  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
	  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
	  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
	  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
	  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
	  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
	  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
	  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
	  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
	  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
	  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
	  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
	  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
	  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
	  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
	  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
	  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
	  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
	  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
	  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
	  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
	  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
	  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
	  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
	  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
	  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
	  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
	  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
	  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
	  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
	  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
	  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
	  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
	  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
	  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
	  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
	  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
	  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
	  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
	];

	function SHA512$2() {
	  if (!(this instanceof SHA512$2))
	    return new SHA512$2();

	  BlockHash$1.call(this);
	  this.h = [
	    0x6a09e667, 0xf3bcc908,
	    0xbb67ae85, 0x84caa73b,
	    0x3c6ef372, 0xfe94f82b,
	    0xa54ff53a, 0x5f1d36f1,
	    0x510e527f, 0xade682d1,
	    0x9b05688c, 0x2b3e6c1f,
	    0x1f83d9ab, 0xfb41bd6b,
	    0x5be0cd19, 0x137e2179 ];
	  this.k = sha512_K;
	  this.W = new Array(160);
	}
	utils$a.inherits(SHA512$2, BlockHash$1);
	var _512 = SHA512$2;

	SHA512$2.blockSize = 1024;
	SHA512$2.outSize = 512;
	SHA512$2.hmacStrength = 192;
	SHA512$2.padLength = 128;

	SHA512$2.prototype._prepareBlock = function _prepareBlock(msg, start) {
	  var W = this.W;

	  // 32 x 32bit words
	  for (var i = 0; i < 32; i++)
	    W[i] = msg[start + i];
	  for (; i < W.length; i += 2) {
	    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
	    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
	    var c1_hi = W[i - 14];  // i - 7
	    var c1_lo = W[i - 13];
	    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
	    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
	    var c3_hi = W[i - 32];  // i - 16
	    var c3_lo = W[i - 31];

	    W[i] = sum64_4_hi(
	      c0_hi, c0_lo,
	      c1_hi, c1_lo,
	      c2_hi, c2_lo,
	      c3_hi, c3_lo);
	    W[i + 1] = sum64_4_lo(
	      c0_hi, c0_lo,
	      c1_hi, c1_lo,
	      c2_hi, c2_lo,
	      c3_hi, c3_lo);
	  }
	};

	SHA512$2.prototype._update = function _update(msg, start) {
	  this._prepareBlock(msg, start);

	  var W = this.W;

	  var ah = this.h[0];
	  var al = this.h[1];
	  var bh = this.h[2];
	  var bl = this.h[3];
	  var ch = this.h[4];
	  var cl = this.h[5];
	  var dh = this.h[6];
	  var dl = this.h[7];
	  var eh = this.h[8];
	  var el = this.h[9];
	  var fh = this.h[10];
	  var fl = this.h[11];
	  var gh = this.h[12];
	  var gl = this.h[13];
	  var hh = this.h[14];
	  var hl = this.h[15];

	  assert$8(this.k.length === W.length);
	  for (var i = 0; i < W.length; i += 2) {
	    var c0_hi = hh;
	    var c0_lo = hl;
	    var c1_hi = s1_512_hi(eh, el);
	    var c1_lo = s1_512_lo(eh, el);
	    var c2_hi = ch64_hi(eh, el, fh, fl, gh);
	    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
	    var c3_hi = this.k[i];
	    var c3_lo = this.k[i + 1];
	    var c4_hi = W[i];
	    var c4_lo = W[i + 1];

	    var T1_hi = sum64_5_hi(
	      c0_hi, c0_lo,
	      c1_hi, c1_lo,
	      c2_hi, c2_lo,
	      c3_hi, c3_lo,
	      c4_hi, c4_lo);
	    var T1_lo = sum64_5_lo(
	      c0_hi, c0_lo,
	      c1_hi, c1_lo,
	      c2_hi, c2_lo,
	      c3_hi, c3_lo,
	      c4_hi, c4_lo);

	    c0_hi = s0_512_hi(ah, al);
	    c0_lo = s0_512_lo(ah, al);
	    c1_hi = maj64_hi(ah, al, bh, bl, ch);
	    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

	    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
	    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

	    hh = gh;
	    hl = gl;

	    gh = fh;
	    gl = fl;

	    fh = eh;
	    fl = el;

	    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
	    el = sum64_lo(dl, dl, T1_hi, T1_lo);

	    dh = ch;
	    dl = cl;

	    ch = bh;
	    cl = bl;

	    bh = ah;
	    bl = al;

	    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
	    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
	  }

	  sum64(this.h, 0, ah, al);
	  sum64(this.h, 2, bh, bl);
	  sum64(this.h, 4, ch, cl);
	  sum64(this.h, 6, dh, dl);
	  sum64(this.h, 8, eh, el);
	  sum64(this.h, 10, fh, fl);
	  sum64(this.h, 12, gh, gl);
	  sum64(this.h, 14, hh, hl);
	};

	SHA512$2.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils$a.toHex32(this.h, 'big');
	  else
	    return utils$a.split32(this.h, 'big');
	};

	function ch64_hi(xh, xl, yh, yl, zh) {
	  var r = (xh & yh) ^ ((~xh) & zh);
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function ch64_lo(xh, xl, yh, yl, zh, zl) {
	  var r = (xl & yl) ^ ((~xl) & zl);
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function maj64_hi(xh, xl, yh, yl, zh) {
	  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function maj64_lo(xh, xl, yh, yl, zh, zl) {
	  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function s0_512_hi(xh, xl) {
	  var c0_hi = rotr64_hi(xh, xl, 28);
	  var c1_hi = rotr64_hi(xl, xh, 2);  // 34
	  var c2_hi = rotr64_hi(xl, xh, 7);  // 39

	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function s0_512_lo(xh, xl) {
	  var c0_lo = rotr64_lo(xh, xl, 28);
	  var c1_lo = rotr64_lo(xl, xh, 2);  // 34
	  var c2_lo = rotr64_lo(xl, xh, 7);  // 39

	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function s1_512_hi(xh, xl) {
	  var c0_hi = rotr64_hi(xh, xl, 14);
	  var c1_hi = rotr64_hi(xh, xl, 18);
	  var c2_hi = rotr64_hi(xl, xh, 9);  // 41

	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function s1_512_lo(xh, xl) {
	  var c0_lo = rotr64_lo(xh, xl, 14);
	  var c1_lo = rotr64_lo(xh, xl, 18);
	  var c2_lo = rotr64_lo(xl, xh, 9);  // 41

	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function g0_512_hi(xh, xl) {
	  var c0_hi = rotr64_hi(xh, xl, 1);
	  var c1_hi = rotr64_hi(xh, xl, 8);
	  var c2_hi = shr64_hi(xh, xl, 7);

	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function g0_512_lo(xh, xl) {
	  var c0_lo = rotr64_lo(xh, xl, 1);
	  var c1_lo = rotr64_lo(xh, xl, 8);
	  var c2_lo = shr64_lo(xh, xl, 7);

	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function g1_512_hi(xh, xl) {
	  var c0_hi = rotr64_hi(xh, xl, 19);
	  var c1_hi = rotr64_hi(xl, xh, 29);  // 61
	  var c2_hi = shr64_hi(xh, xl, 6);

	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function g1_512_lo(xh, xl) {
	  var c0_lo = rotr64_lo(xh, xl, 19);
	  var c1_lo = rotr64_lo(xl, xh, 29);  // 61
	  var c2_lo = shr64_lo(xh, xl, 6);

	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	var utils$9 = utils$g;

	var SHA512$1 = _512;

	function SHA384() {
	  if (!(this instanceof SHA384))
	    return new SHA384();

	  SHA512$1.call(this);
	  this.h = [
	    0xcbbb9d5d, 0xc1059ed8,
	    0x629a292a, 0x367cd507,
	    0x9159015a, 0x3070dd17,
	    0x152fecd8, 0xf70e5939,
	    0x67332667, 0xffc00b31,
	    0x8eb44a87, 0x68581511,
	    0xdb0c2e0d, 0x64f98fa7,
	    0x47b5481d, 0xbefa4fa4 ];
	}
	utils$9.inherits(SHA384, SHA512$1);
	var _384 = SHA384;

	SHA384.blockSize = 1024;
	SHA384.outSize = 384;
	SHA384.hmacStrength = 192;
	SHA384.padLength = 128;

	SHA384.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils$9.toHex32(this.h.slice(0, 12), 'big');
	  else
	    return utils$9.split32(this.h.slice(0, 12), 'big');
	};

	sha$2.sha1 = _1;
	sha$2.sha224 = _224;
	sha$2.sha256 = _256;
	sha$2.sha384 = _384;
	sha$2.sha512 = _512;

	var ripemd = {};

	var utils$8 = utils$g;
	var common$1 = common$6;

	var rotl32 = utils$8.rotl32;
	var sum32 = utils$8.sum32;
	var sum32_3 = utils$8.sum32_3;
	var sum32_4 = utils$8.sum32_4;
	var BlockHash = common$1.BlockHash;

	function RIPEMD160$2() {
	  if (!(this instanceof RIPEMD160$2))
	    return new RIPEMD160$2();

	  BlockHash.call(this);

	  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
	  this.endian = 'little';
	}
	utils$8.inherits(RIPEMD160$2, BlockHash);
	ripemd.ripemd160 = RIPEMD160$2;

	RIPEMD160$2.blockSize = 512;
	RIPEMD160$2.outSize = 160;
	RIPEMD160$2.hmacStrength = 192;
	RIPEMD160$2.padLength = 64;

	RIPEMD160$2.prototype._update = function update(msg, start) {
	  var A = this.h[0];
	  var B = this.h[1];
	  var C = this.h[2];
	  var D = this.h[3];
	  var E = this.h[4];
	  var Ah = A;
	  var Bh = B;
	  var Ch = C;
	  var Dh = D;
	  var Eh = E;
	  for (var j = 0; j < 80; j++) {
	    var T = sum32(
	      rotl32(
	        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K$4(j)),
	        s[j]),
	      E);
	    A = E;
	    E = D;
	    D = rotl32(C, 10);
	    C = B;
	    B = T;
	    T = sum32(
	      rotl32(
	        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
	        sh[j]),
	      Eh);
	    Ah = Eh;
	    Eh = Dh;
	    Dh = rotl32(Ch, 10);
	    Ch = Bh;
	    Bh = T;
	  }
	  T = sum32_3(this.h[1], C, Dh);
	  this.h[1] = sum32_3(this.h[2], D, Eh);
	  this.h[2] = sum32_3(this.h[3], E, Ah);
	  this.h[3] = sum32_3(this.h[4], A, Bh);
	  this.h[4] = sum32_3(this.h[0], B, Ch);
	  this.h[0] = T;
	};

	RIPEMD160$2.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils$8.toHex32(this.h, 'little');
	  else
	    return utils$8.split32(this.h, 'little');
	};

	function f(j, x, y, z) {
	  if (j <= 15)
	    return x ^ y ^ z;
	  else if (j <= 31)
	    return (x & y) | ((~x) & z);
	  else if (j <= 47)
	    return (x | (~y)) ^ z;
	  else if (j <= 63)
	    return (x & z) | (y & (~z));
	  else
	    return x ^ (y | (~z));
	}

	function K$4(j) {
	  if (j <= 15)
	    return 0x00000000;
	  else if (j <= 31)
	    return 0x5a827999;
	  else if (j <= 47)
	    return 0x6ed9eba1;
	  else if (j <= 63)
	    return 0x8f1bbcdc;
	  else
	    return 0xa953fd4e;
	}

	function Kh(j) {
	  if (j <= 15)
	    return 0x50a28be6;
	  else if (j <= 31)
	    return 0x5c4dd124;
	  else if (j <= 47)
	    return 0x6d703ef3;
	  else if (j <= 63)
	    return 0x7a6d76e9;
	  else
	    return 0x00000000;
	}

	var r = [
	  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
	  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
	  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
	  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
	  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
	];

	var rh = [
	  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
	  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
	  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
	  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
	  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
	];

	var s = [
	  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
	  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
	  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
	  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
	  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
	];

	var sh = [
	  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
	  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
	  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
	  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
	  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
	];

	var utils$7 = utils$g;
	var assert$7 = minimalisticAssert;

	function Hmac(hash, key, enc) {
	  if (!(this instanceof Hmac))
	    return new Hmac(hash, key, enc);
	  this.Hash = hash;
	  this.blockSize = hash.blockSize / 8;
	  this.outSize = hash.outSize / 8;
	  this.inner = null;
	  this.outer = null;

	  this._init(utils$7.toArray(key, enc));
	}
	var hmac = Hmac;

	Hmac.prototype._init = function init(key) {
	  // Shorten key, if needed
	  if (key.length > this.blockSize)
	    key = new this.Hash().update(key).digest();
	  assert$7(key.length <= this.blockSize);

	  // Add padding to key
	  for (var i = key.length; i < this.blockSize; i++)
	    key.push(0);

	  for (i = 0; i < key.length; i++)
	    key[i] ^= 0x36;
	  this.inner = new this.Hash().update(key);

	  // 0x36 ^ 0x5c = 0x6a
	  for (i = 0; i < key.length; i++)
	    key[i] ^= 0x6a;
	  this.outer = new this.Hash().update(key);
	};

	Hmac.prototype.update = function update(msg, enc) {
	  this.inner.update(msg, enc);
	  return this;
	};

	Hmac.prototype.digest = function digest(enc) {
	  this.outer.update(this.inner.digest());
	  return this.outer.digest(enc);
	};

	(function (exports) {
		var hash = exports;

		hash.utils = utils$g;
		hash.common = common$6;
		hash.sha = sha$2;
		hash.ripemd = ripemd;
		hash.hmac = hmac;

		// Proxy hash functions to the main object
		hash.sha1 = hash.sha.sha1;
		hash.sha256 = hash.sha.sha256;
		hash.sha224 = hash.sha.sha224;
		hash.sha384 = hash.sha.sha384;
		hash.sha512 = hash.sha.sha512;
		hash.ripemd160 = hash.ripemd.ripemd160;
	} (hash$4));

	var secp256k1;
	var hasRequiredSecp256k1;

	function requireSecp256k1 () {
		if (hasRequiredSecp256k1) return secp256k1;
		hasRequiredSecp256k1 = 1;
		secp256k1 = {
		  doubles: {
		    step: 4,
		    points: [
		      [
		        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
		        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821',
		      ],
		      [
		        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
		        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf',
		      ],
		      [
		        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
		        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695',
		      ],
		      [
		        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
		        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9',
		      ],
		      [
		        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
		        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36',
		      ],
		      [
		        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
		        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f',
		      ],
		      [
		        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
		        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999',
		      ],
		      [
		        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
		        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09',
		      ],
		      [
		        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
		        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d',
		      ],
		      [
		        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
		        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088',
		      ],
		      [
		        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
		        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d',
		      ],
		      [
		        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
		        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8',
		      ],
		      [
		        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
		        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a',
		      ],
		      [
		        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
		        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453',
		      ],
		      [
		        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
		        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160',
		      ],
		      [
		        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
		        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0',
		      ],
		      [
		        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
		        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6',
		      ],
		      [
		        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
		        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589',
		      ],
		      [
		        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
		        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17',
		      ],
		      [
		        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
		        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda',
		      ],
		      [
		        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
		        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd',
		      ],
		      [
		        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
		        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2',
		      ],
		      [
		        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
		        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6',
		      ],
		      [
		        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
		        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f',
		      ],
		      [
		        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
		        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01',
		      ],
		      [
		        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
		        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3',
		      ],
		      [
		        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
		        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f',
		      ],
		      [
		        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
		        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7',
		      ],
		      [
		        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
		        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78',
		      ],
		      [
		        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
		        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1',
		      ],
		      [
		        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
		        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150',
		      ],
		      [
		        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
		        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82',
		      ],
		      [
		        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
		        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc',
		      ],
		      [
		        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
		        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b',
		      ],
		      [
		        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
		        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51',
		      ],
		      [
		        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
		        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45',
		      ],
		      [
		        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
		        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120',
		      ],
		      [
		        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
		        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84',
		      ],
		      [
		        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
		        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d',
		      ],
		      [
		        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
		        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d',
		      ],
		      [
		        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
		        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8',
		      ],
		      [
		        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
		        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8',
		      ],
		      [
		        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
		        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac',
		      ],
		      [
		        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
		        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f',
		      ],
		      [
		        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
		        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962',
		      ],
		      [
		        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
		        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907',
		      ],
		      [
		        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
		        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec',
		      ],
		      [
		        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
		        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d',
		      ],
		      [
		        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
		        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414',
		      ],
		      [
		        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
		        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd',
		      ],
		      [
		        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
		        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0',
		      ],
		      [
		        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
		        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811',
		      ],
		      [
		        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
		        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1',
		      ],
		      [
		        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
		        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c',
		      ],
		      [
		        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
		        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73',
		      ],
		      [
		        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
		        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd',
		      ],
		      [
		        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
		        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405',
		      ],
		      [
		        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
		        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589',
		      ],
		      [
		        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
		        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e',
		      ],
		      [
		        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
		        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27',
		      ],
		      [
		        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
		        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1',
		      ],
		      [
		        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
		        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482',
		      ],
		      [
		        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
		        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945',
		      ],
		      [
		        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
		        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573',
		      ],
		      [
		        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
		        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82',
		      ],
		    ],
		  },
		  naf: {
		    wnd: 7,
		    points: [
		      [
		        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
		        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672',
		      ],
		      [
		        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
		        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6',
		      ],
		      [
		        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
		        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da',
		      ],
		      [
		        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
		        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37',
		      ],
		      [
		        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
		        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b',
		      ],
		      [
		        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
		        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81',
		      ],
		      [
		        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
		        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58',
		      ],
		      [
		        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
		        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77',
		      ],
		      [
		        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
		        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a',
		      ],
		      [
		        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
		        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c',
		      ],
		      [
		        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
		        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67',
		      ],
		      [
		        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
		        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402',
		      ],
		      [
		        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
		        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55',
		      ],
		      [
		        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
		        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482',
		      ],
		      [
		        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
		        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82',
		      ],
		      [
		        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
		        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396',
		      ],
		      [
		        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
		        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49',
		      ],
		      [
		        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
		        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf',
		      ],
		      [
		        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
		        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a',
		      ],
		      [
		        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
		        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7',
		      ],
		      [
		        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
		        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933',
		      ],
		      [
		        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
		        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a',
		      ],
		      [
		        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
		        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6',
		      ],
		      [
		        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
		        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37',
		      ],
		      [
		        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
		        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e',
		      ],
		      [
		        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
		        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6',
		      ],
		      [
		        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
		        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476',
		      ],
		      [
		        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
		        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40',
		      ],
		      [
		        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
		        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61',
		      ],
		      [
		        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
		        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683',
		      ],
		      [
		        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
		        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5',
		      ],
		      [
		        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
		        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b',
		      ],
		      [
		        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
		        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417',
		      ],
		      [
		        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
		        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868',
		      ],
		      [
		        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
		        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a',
		      ],
		      [
		        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
		        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6',
		      ],
		      [
		        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
		        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996',
		      ],
		      [
		        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
		        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e',
		      ],
		      [
		        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
		        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d',
		      ],
		      [
		        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
		        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2',
		      ],
		      [
		        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
		        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e',
		      ],
		      [
		        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
		        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437',
		      ],
		      [
		        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
		        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311',
		      ],
		      [
		        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
		        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4',
		      ],
		      [
		        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
		        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575',
		      ],
		      [
		        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
		        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d',
		      ],
		      [
		        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
		        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d',
		      ],
		      [
		        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
		        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629',
		      ],
		      [
		        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
		        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06',
		      ],
		      [
		        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
		        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374',
		      ],
		      [
		        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
		        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee',
		      ],
		      [
		        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
		        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1',
		      ],
		      [
		        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
		        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b',
		      ],
		      [
		        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
		        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661',
		      ],
		      [
		        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
		        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6',
		      ],
		      [
		        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
		        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e',
		      ],
		      [
		        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
		        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d',
		      ],
		      [
		        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
		        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc',
		      ],
		      [
		        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
		        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4',
		      ],
		      [
		        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
		        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c',
		      ],
		      [
		        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
		        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b',
		      ],
		      [
		        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
		        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913',
		      ],
		      [
		        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
		        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154',
		      ],
		      [
		        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
		        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865',
		      ],
		      [
		        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
		        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc',
		      ],
		      [
		        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
		        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224',
		      ],
		      [
		        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
		        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e',
		      ],
		      [
		        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
		        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6',
		      ],
		      [
		        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
		        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511',
		      ],
		      [
		        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
		        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b',
		      ],
		      [
		        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
		        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2',
		      ],
		      [
		        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
		        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c',
		      ],
		      [
		        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
		        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3',
		      ],
		      [
		        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
		        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d',
		      ],
		      [
		        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
		        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700',
		      ],
		      [
		        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
		        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4',
		      ],
		      [
		        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
		        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196',
		      ],
		      [
		        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
		        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4',
		      ],
		      [
		        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
		        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257',
		      ],
		      [
		        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
		        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13',
		      ],
		      [
		        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
		        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096',
		      ],
		      [
		        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
		        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38',
		      ],
		      [
		        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
		        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f',
		      ],
		      [
		        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
		        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448',
		      ],
		      [
		        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
		        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a',
		      ],
		      [
		        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
		        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4',
		      ],
		      [
		        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
		        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437',
		      ],
		      [
		        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
		        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7',
		      ],
		      [
		        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
		        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d',
		      ],
		      [
		        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
		        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a',
		      ],
		      [
		        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
		        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54',
		      ],
		      [
		        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
		        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77',
		      ],
		      [
		        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
		        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517',
		      ],
		      [
		        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
		        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10',
		      ],
		      [
		        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
		        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125',
		      ],
		      [
		        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
		        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e',
		      ],
		      [
		        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
		        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1',
		      ],
		      [
		        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
		        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2',
		      ],
		      [
		        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
		        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423',
		      ],
		      [
		        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
		        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8',
		      ],
		      [
		        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
		        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758',
		      ],
		      [
		        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
		        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375',
		      ],
		      [
		        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
		        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d',
		      ],
		      [
		        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
		        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec',
		      ],
		      [
		        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
		        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0',
		      ],
		      [
		        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
		        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c',
		      ],
		      [
		        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
		        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4',
		      ],
		      [
		        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
		        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f',
		      ],
		      [
		        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
		        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649',
		      ],
		      [
		        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
		        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826',
		      ],
		      [
		        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
		        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5',
		      ],
		      [
		        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
		        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87',
		      ],
		      [
		        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
		        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b',
		      ],
		      [
		        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
		        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc',
		      ],
		      [
		        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
		        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c',
		      ],
		      [
		        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
		        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f',
		      ],
		      [
		        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
		        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a',
		      ],
		      [
		        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
		        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46',
		      ],
		      [
		        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
		        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f',
		      ],
		      [
		        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
		        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03',
		      ],
		      [
		        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
		        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08',
		      ],
		      [
		        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
		        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8',
		      ],
		      [
		        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
		        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373',
		      ],
		      [
		        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
		        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3',
		      ],
		      [
		        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
		        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8',
		      ],
		      [
		        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
		        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1',
		      ],
		      [
		        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
		        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9',
		      ],
		    ],
		  },
		};
		return secp256k1;
	}

	(function (exports) {

		var curves = exports;

		var hash = hash$4;
		var curve$1 = curve;
		var utils = utils$m;

		var assert = utils.assert;

		function PresetCurve(options) {
		  if (options.type === 'short')
		    this.curve = new curve$1.short(options);
		  else if (options.type === 'edwards')
		    this.curve = new curve$1.edwards(options);
		  else
		    this.curve = new curve$1.mont(options);
		  this.g = this.curve.g;
		  this.n = this.curve.n;
		  this.hash = options.hash;

		  assert(this.g.validate(), 'Invalid curve');
		  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
		}
		curves.PresetCurve = PresetCurve;

		function defineCurve(name, options) {
		  Object.defineProperty(curves, name, {
		    configurable: true,
		    enumerable: true,
		    get: function() {
		      var curve = new PresetCurve(options);
		      Object.defineProperty(curves, name, {
		        configurable: true,
		        enumerable: true,
		        value: curve,
		      });
		      return curve;
		    },
		  });
		}

		defineCurve('p192', {
		  type: 'short',
		  prime: 'p192',
		  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
		  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
		  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
		  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
		  hash: hash.sha256,
		  gRed: false,
		  g: [
		    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
		    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811',
		  ],
		});

		defineCurve('p224', {
		  type: 'short',
		  prime: 'p224',
		  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
		  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
		  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
		  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
		  hash: hash.sha256,
		  gRed: false,
		  g: [
		    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
		    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34',
		  ],
		});

		defineCurve('p256', {
		  type: 'short',
		  prime: null,
		  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
		  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
		  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
		  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
		  hash: hash.sha256,
		  gRed: false,
		  g: [
		    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
		    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5',
		  ],
		});

		defineCurve('p384', {
		  type: 'short',
		  prime: null,
		  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
		     'fffffffe ffffffff 00000000 00000000 ffffffff',
		  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
		     'fffffffe ffffffff 00000000 00000000 fffffffc',
		  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
		     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
		  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
		     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
		  hash: hash.sha384,
		  gRed: false,
		  g: [
		    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
		    '5502f25d bf55296c 3a545e38 72760ab7',
		    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
		    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f',
		  ],
		});

		defineCurve('p521', {
		  type: 'short',
		  prime: null,
		  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
		     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
		     'ffffffff ffffffff ffffffff ffffffff ffffffff',
		  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
		     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
		     'ffffffff ffffffff ffffffff ffffffff fffffffc',
		  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
		     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
		     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
		  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
		     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
		     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
		  hash: hash.sha512,
		  gRed: false,
		  g: [
		    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
		    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
		    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
		    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
		    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
		    '3fad0761 353c7086 a272c240 88be9476 9fd16650',
		  ],
		});

		defineCurve('curve25519', {
		  type: 'mont',
		  prime: 'p25519',
		  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
		  a: '76d06',
		  b: '1',
		  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
		  hash: hash.sha256,
		  gRed: false,
		  g: [
		    '9',
		  ],
		});

		defineCurve('ed25519', {
		  type: 'edwards',
		  prime: 'p25519',
		  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
		  a: '-1',
		  c: '1',
		  // -121665 * (121666^(-1)) (mod P)
		  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
		  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
		  hash: hash.sha256,
		  gRed: false,
		  g: [
		    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

		    // 4/5
		    '6666666666666666666666666666666666666666666666666666666666666658',
		  ],
		});

		var pre;
		try {
		  pre = requireSecp256k1();
		} catch (e) {
		  pre = undefined;
		}

		defineCurve('secp256k1', {
		  type: 'short',
		  prime: 'k256',
		  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
		  a: '0',
		  b: '7',
		  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
		  h: '1',
		  hash: hash.sha256,

		  // Precomputed endomorphism
		  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
		  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
		  basis: [
		    {
		      a: '3086d221a7d46bcde86c90e49284eb15',
		      b: '-e4437ed6010e88286f547fa90abfe4c3',
		    },
		    {
		      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
		      b: '3086d221a7d46bcde86c90e49284eb15',
		    },
		  ],

		  gRed: false,
		  g: [
		    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
		    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
		    pre,
		  ],
		});
	} (curves$2));

	var hash$3 = hash$4;
	var utils$6 = utils$l;
	var assert$6 = minimalisticAssert;

	function HmacDRBG$1(options) {
	  if (!(this instanceof HmacDRBG$1))
	    return new HmacDRBG$1(options);
	  this.hash = options.hash;
	  this.predResist = !!options.predResist;

	  this.outLen = this.hash.outSize;
	  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

	  this._reseed = null;
	  this.reseedInterval = null;
	  this.K = null;
	  this.V = null;

	  var entropy = utils$6.toArray(options.entropy, options.entropyEnc || 'hex');
	  var nonce = utils$6.toArray(options.nonce, options.nonceEnc || 'hex');
	  var pers = utils$6.toArray(options.pers, options.persEnc || 'hex');
	  assert$6(entropy.length >= (this.minEntropy / 8),
	         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
	  this._init(entropy, nonce, pers);
	}
	var hmacDrbg = HmacDRBG$1;

	HmacDRBG$1.prototype._init = function init(entropy, nonce, pers) {
	  var seed = entropy.concat(nonce).concat(pers);

	  this.K = new Array(this.outLen / 8);
	  this.V = new Array(this.outLen / 8);
	  for (var i = 0; i < this.V.length; i++) {
	    this.K[i] = 0x00;
	    this.V[i] = 0x01;
	  }

	  this._update(seed);
	  this._reseed = 1;
	  this.reseedInterval = 0x1000000000000;  // 2^48
	};

	HmacDRBG$1.prototype._hmac = function hmac() {
	  return new hash$3.hmac(this.hash, this.K);
	};

	HmacDRBG$1.prototype._update = function update(seed) {
	  var kmac = this._hmac()
	                 .update(this.V)
	                 .update([ 0x00 ]);
	  if (seed)
	    kmac = kmac.update(seed);
	  this.K = kmac.digest();
	  this.V = this._hmac().update(this.V).digest();
	  if (!seed)
	    return;

	  this.K = this._hmac()
	               .update(this.V)
	               .update([ 0x01 ])
	               .update(seed)
	               .digest();
	  this.V = this._hmac().update(this.V).digest();
	};

	HmacDRBG$1.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
	  // Optional entropy enc
	  if (typeof entropyEnc !== 'string') {
	    addEnc = add;
	    add = entropyEnc;
	    entropyEnc = null;
	  }

	  entropy = utils$6.toArray(entropy, entropyEnc);
	  add = utils$6.toArray(add, addEnc);

	  assert$6(entropy.length >= (this.minEntropy / 8),
	         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

	  this._update(entropy.concat(add || []));
	  this._reseed = 1;
	};

	HmacDRBG$1.prototype.generate = function generate(len, enc, add, addEnc) {
	  if (this._reseed > this.reseedInterval)
	    throw new Error('Reseed is required');

	  // Optional encoding
	  if (typeof enc !== 'string') {
	    addEnc = add;
	    add = enc;
	    enc = null;
	  }

	  // Optional additional data
	  if (add) {
	    add = utils$6.toArray(add, addEnc || 'hex');
	    this._update(add);
	  }

	  var temp = [];
	  while (temp.length < len) {
	    this.V = this._hmac().update(this.V).digest();
	    temp = temp.concat(this.V);
	  }

	  var res = temp.slice(0, len);
	  this._update(add);
	  this._reseed++;
	  return utils$6.encode(res, enc);
	};

	var BN$4 = bnExports;
	var utils$5 = utils$m;
	var assert$5 = utils$5.assert;

	function KeyPair$3(ec, options) {
	  this.ec = ec;
	  this.priv = null;
	  this.pub = null;

	  // KeyPair(ec, { priv: ..., pub: ... })
	  if (options.priv)
	    this._importPrivate(options.priv, options.privEnc);
	  if (options.pub)
	    this._importPublic(options.pub, options.pubEnc);
	}
	var key$1 = KeyPair$3;

	KeyPair$3.fromPublic = function fromPublic(ec, pub, enc) {
	  if (pub instanceof KeyPair$3)
	    return pub;

	  return new KeyPair$3(ec, {
	    pub: pub,
	    pubEnc: enc,
	  });
	};

	KeyPair$3.fromPrivate = function fromPrivate(ec, priv, enc) {
	  if (priv instanceof KeyPair$3)
	    return priv;

	  return new KeyPair$3(ec, {
	    priv: priv,
	    privEnc: enc,
	  });
	};

	KeyPair$3.prototype.validate = function validate() {
	  var pub = this.getPublic();

	  if (pub.isInfinity())
	    return { result: false, reason: 'Invalid public key' };
	  if (!pub.validate())
	    return { result: false, reason: 'Public key is not a point' };
	  if (!pub.mul(this.ec.curve.n).isInfinity())
	    return { result: false, reason: 'Public key * N != O' };

	  return { result: true, reason: null };
	};

	KeyPair$3.prototype.getPublic = function getPublic(compact, enc) {
	  // compact is optional argument
	  if (typeof compact === 'string') {
	    enc = compact;
	    compact = null;
	  }

	  if (!this.pub)
	    this.pub = this.ec.g.mul(this.priv);

	  if (!enc)
	    return this.pub;

	  return this.pub.encode(enc, compact);
	};

	KeyPair$3.prototype.getPrivate = function getPrivate(enc) {
	  if (enc === 'hex')
	    return this.priv.toString(16, 2);
	  else
	    return this.priv;
	};

	KeyPair$3.prototype._importPrivate = function _importPrivate(key, enc) {
	  this.priv = new BN$4(key, enc || 16);

	  // Ensure that the priv won't be bigger than n, otherwise we may fail
	  // in fixed multiplication method
	  this.priv = this.priv.umod(this.ec.curve.n);
	};

	KeyPair$3.prototype._importPublic = function _importPublic(key, enc) {
	  if (key.x || key.y) {
	    // Montgomery points only have an `x` coordinate.
	    // Weierstrass/Edwards points on the other hand have both `x` and
	    // `y` coordinates.
	    if (this.ec.curve.type === 'mont') {
	      assert$5(key.x, 'Need x coordinate');
	    } else if (this.ec.curve.type === 'short' ||
	               this.ec.curve.type === 'edwards') {
	      assert$5(key.x && key.y, 'Need both x and y coordinate');
	    }
	    this.pub = this.ec.curve.point(key.x, key.y);
	    return;
	  }
	  this.pub = this.ec.curve.decodePoint(key, enc);
	};

	// ECDH
	KeyPair$3.prototype.derive = function derive(pub) {
	  if(!pub.validate()) {
	    assert$5(pub.validate(), 'public point not validated');
	  }
	  return pub.mul(this.priv).getX();
	};

	// ECDSA
	KeyPair$3.prototype.sign = function sign(msg, enc, options) {
	  return this.ec.sign(msg, this, enc, options);
	};

	KeyPair$3.prototype.verify = function verify(msg, signature) {
	  return this.ec.verify(msg, signature, this);
	};

	KeyPair$3.prototype.inspect = function inspect() {
	  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
	         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
	};

	var BN$3 = bnExports;

	var utils$4 = utils$m;
	var assert$4 = utils$4.assert;

	function Signature$3(options, enc) {
	  if (options instanceof Signature$3)
	    return options;

	  if (this._importDER(options, enc))
	    return;

	  assert$4(options.r && options.s, 'Signature without r or s');
	  this.r = new BN$3(options.r, 16);
	  this.s = new BN$3(options.s, 16);
	  if (options.recoveryParam === undefined)
	    this.recoveryParam = null;
	  else
	    this.recoveryParam = options.recoveryParam;
	}
	var signature$2 = Signature$3;

	function Position() {
	  this.place = 0;
	}

	function getLength(buf, p) {
	  var initial = buf[p.place++];
	  if (!(initial & 0x80)) {
	    return initial;
	  }
	  var octetLen = initial & 0xf;

	  // Indefinite length or overflow
	  if (octetLen === 0 || octetLen > 4) {
	    return false;
	  }

	  var val = 0;
	  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
	    val <<= 8;
	    val |= buf[off];
	    val >>>= 0;
	  }

	  // Leading zeroes
	  if (val <= 0x7f) {
	    return false;
	  }

	  p.place = off;
	  return val;
	}

	function rmPadding(buf) {
	  var i = 0;
	  var len = buf.length - 1;
	  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
	    i++;
	  }
	  if (i === 0) {
	    return buf;
	  }
	  return buf.slice(i);
	}

	Signature$3.prototype._importDER = function _importDER(data, enc) {
	  data = utils$4.toArray(data, enc);
	  var p = new Position();
	  if (data[p.place++] !== 0x30) {
	    return false;
	  }
	  var len = getLength(data, p);
	  if (len === false) {
	    return false;
	  }
	  if ((len + p.place) !== data.length) {
	    return false;
	  }
	  if (data[p.place++] !== 0x02) {
	    return false;
	  }
	  var rlen = getLength(data, p);
	  if (rlen === false) {
	    return false;
	  }
	  var r = data.slice(p.place, rlen + p.place);
	  p.place += rlen;
	  if (data[p.place++] !== 0x02) {
	    return false;
	  }
	  var slen = getLength(data, p);
	  if (slen === false) {
	    return false;
	  }
	  if (data.length !== slen + p.place) {
	    return false;
	  }
	  var s = data.slice(p.place, slen + p.place);
	  if (r[0] === 0) {
	    if (r[1] & 0x80) {
	      r = r.slice(1);
	    } else {
	      // Leading zeroes
	      return false;
	    }
	  }
	  if (s[0] === 0) {
	    if (s[1] & 0x80) {
	      s = s.slice(1);
	    } else {
	      // Leading zeroes
	      return false;
	    }
	  }

	  this.r = new BN$3(r);
	  this.s = new BN$3(s);
	  this.recoveryParam = null;

	  return true;
	};

	function constructLength(arr, len) {
	  if (len < 0x80) {
	    arr.push(len);
	    return;
	  }
	  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
	  arr.push(octets | 0x80);
	  while (--octets) {
	    arr.push((len >>> (octets << 3)) & 0xff);
	  }
	  arr.push(len);
	}

	Signature$3.prototype.toDER = function toDER(enc) {
	  var r = this.r.toArray();
	  var s = this.s.toArray();

	  // Pad values
	  if (r[0] & 0x80)
	    r = [ 0 ].concat(r);
	  // Pad values
	  if (s[0] & 0x80)
	    s = [ 0 ].concat(s);

	  r = rmPadding(r);
	  s = rmPadding(s);

	  while (!s[0] && !(s[1] & 0x80)) {
	    s = s.slice(1);
	  }
	  var arr = [ 0x02 ];
	  constructLength(arr, r.length);
	  arr = arr.concat(r);
	  arr.push(0x02);
	  constructLength(arr, s.length);
	  var backHalf = arr.concat(s);
	  var res = [ 0x30 ];
	  constructLength(res, backHalf.length);
	  res = res.concat(backHalf);
	  return utils$4.encode(res, enc);
	};

	var BN$2 = bnExports;
	var HmacDRBG = hmacDrbg;
	var utils$3 = utils$m;
	var curves$1 = curves$2;
	var rand = brorandExports;
	var assert$3 = utils$3.assert;

	var KeyPair$2 = key$1;
	var Signature$2 = signature$2;

	function EC$1(options) {
	  if (!(this instanceof EC$1))
	    return new EC$1(options);

	  // Shortcut `elliptic.ec(curve-name)`
	  if (typeof options === 'string') {
	    assert$3(Object.prototype.hasOwnProperty.call(curves$1, options),
	      'Unknown curve ' + options);

	    options = curves$1[options];
	  }

	  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
	  if (options instanceof curves$1.PresetCurve)
	    options = { curve: options };

	  this.curve = options.curve.curve;
	  this.n = this.curve.n;
	  this.nh = this.n.ushrn(1);
	  this.g = this.curve.g;

	  // Point on curve
	  this.g = options.curve.g;
	  this.g.precompute(options.curve.n.bitLength() + 1);

	  // Hash for function for DRBG
	  this.hash = options.hash || options.curve.hash;
	}
	var ec$1 = EC$1;

	EC$1.prototype.keyPair = function keyPair(options) {
	  return new KeyPair$2(this, options);
	};

	EC$1.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
	  return KeyPair$2.fromPrivate(this, priv, enc);
	};

	EC$1.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
	  return KeyPair$2.fromPublic(this, pub, enc);
	};

	EC$1.prototype.genKeyPair = function genKeyPair(options) {
	  if (!options)
	    options = {};

	  // Instantiate Hmac_DRBG
	  var drbg = new HmacDRBG({
	    hash: this.hash,
	    pers: options.pers,
	    persEnc: options.persEnc || 'utf8',
	    entropy: options.entropy || rand(this.hash.hmacStrength),
	    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
	    nonce: this.n.toArray(),
	  });

	  var bytes = this.n.byteLength();
	  var ns2 = this.n.sub(new BN$2(2));
	  for (;;) {
	    var priv = new BN$2(drbg.generate(bytes));
	    if (priv.cmp(ns2) > 0)
	      continue;

	    priv.iaddn(1);
	    return this.keyFromPrivate(priv);
	  }
	};

	EC$1.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
	  var delta = msg.byteLength() * 8 - this.n.bitLength();
	  if (delta > 0)
	    msg = msg.ushrn(delta);
	  if (!truncOnly && msg.cmp(this.n) >= 0)
	    return msg.sub(this.n);
	  else
	    return msg;
	};

	EC$1.prototype.sign = function sign(msg, key, enc, options) {
	  if (typeof enc === 'object') {
	    options = enc;
	    enc = null;
	  }
	  if (!options)
	    options = {};

	  key = this.keyFromPrivate(key, enc);
	  msg = this._truncateToN(new BN$2(msg, 16));

	  // Zero-extend key to provide enough entropy
	  var bytes = this.n.byteLength();
	  var bkey = key.getPrivate().toArray('be', bytes);

	  // Zero-extend nonce to have the same byte size as N
	  var nonce = msg.toArray('be', bytes);

	  // Instantiate Hmac_DRBG
	  var drbg = new HmacDRBG({
	    hash: this.hash,
	    entropy: bkey,
	    nonce: nonce,
	    pers: options.pers,
	    persEnc: options.persEnc || 'utf8',
	  });

	  // Number of bytes to generate
	  var ns1 = this.n.sub(new BN$2(1));

	  for (var iter = 0; ; iter++) {
	    var k = options.k ?
	      options.k(iter) :
	      new BN$2(drbg.generate(this.n.byteLength()));
	    k = this._truncateToN(k, true);
	    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
	      continue;

	    var kp = this.g.mul(k);
	    if (kp.isInfinity())
	      continue;

	    var kpX = kp.getX();
	    var r = kpX.umod(this.n);
	    if (r.cmpn(0) === 0)
	      continue;

	    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
	    s = s.umod(this.n);
	    if (s.cmpn(0) === 0)
	      continue;

	    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
	                        (kpX.cmp(r) !== 0 ? 2 : 0);

	    // Use complement of `s`, if it is > `n / 2`
	    if (options.canonical && s.cmp(this.nh) > 0) {
	      s = this.n.sub(s);
	      recoveryParam ^= 1;
	    }

	    return new Signature$2({ r: r, s: s, recoveryParam: recoveryParam });
	  }
	};

	EC$1.prototype.verify = function verify(msg, signature, key, enc) {
	  msg = this._truncateToN(new BN$2(msg, 16));
	  key = this.keyFromPublic(key, enc);
	  signature = new Signature$2(signature, 'hex');

	  // Perform primitive values validation
	  var r = signature.r;
	  var s = signature.s;
	  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
	    return false;
	  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
	    return false;

	  // Validate signature
	  var sinv = s.invm(this.n);
	  var u1 = sinv.mul(msg).umod(this.n);
	  var u2 = sinv.mul(r).umod(this.n);
	  var p;

	  if (!this.curve._maxwellTrick) {
	    p = this.g.mulAdd(u1, key.getPublic(), u2);
	    if (p.isInfinity())
	      return false;

	    return p.getX().umod(this.n).cmp(r) === 0;
	  }

	  // NOTE: Greg Maxwell's trick, inspired by:
	  // https://git.io/vad3K

	  p = this.g.jmulAdd(u1, key.getPublic(), u2);
	  if (p.isInfinity())
	    return false;

	  // Compare `p.x` of Jacobian point with `r`,
	  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
	  // inverse of `p.z^2`
	  return p.eqXToP(r);
	};

	EC$1.prototype.recoverPubKey = function(msg, signature, j, enc) {
	  assert$3((3 & j) === j, 'The recovery param is more than two bits');
	  signature = new Signature$2(signature, enc);

	  var n = this.n;
	  var e = new BN$2(msg);
	  var r = signature.r;
	  var s = signature.s;

	  // A set LSB signifies that the y-coordinate is odd
	  var isYOdd = j & 1;
	  var isSecondKey = j >> 1;
	  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
	    throw new Error('Unable to find sencond key candinate');

	  // 1.1. Let x = r + jn.
	  if (isSecondKey)
	    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
	  else
	    r = this.curve.pointFromX(r, isYOdd);

	  var rInv = signature.r.invm(n);
	  var s1 = n.sub(e).mul(rInv).umod(n);
	  var s2 = s.mul(rInv).umod(n);

	  // 1.6.1 Compute Q = r^-1 (sR -  eG)
	  //               Q = r^-1 (sR + -eG)
	  return this.g.mulAdd(s1, r, s2);
	};

	EC$1.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
	  signature = new Signature$2(signature, enc);
	  if (signature.recoveryParam !== null)
	    return signature.recoveryParam;

	  for (var i = 0; i < 4; i++) {
	    var Qprime;
	    try {
	      Qprime = this.recoverPubKey(e, signature, i);
	    } catch (e) {
	      continue;
	    }

	    if (Qprime.eq(Q))
	      return i;
	  }
	  throw new Error('Unable to find valid recovery factor');
	};

	var utils$2 = utils$m;
	var assert$2 = utils$2.assert;
	var parseBytes$2 = utils$2.parseBytes;
	var cachedProperty$1 = utils$2.cachedProperty;

	/**
	* @param {EDDSA} eddsa - instance
	* @param {Object} params - public/private key parameters
	*
	* @param {Array<Byte>} [params.secret] - secret seed bytes
	* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
	* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
	*
	*/
	function KeyPair$1(eddsa, params) {
	  this.eddsa = eddsa;
	  this._secret = parseBytes$2(params.secret);
	  if (eddsa.isPoint(params.pub))
	    this._pub = params.pub;
	  else
	    this._pubBytes = parseBytes$2(params.pub);
	}

	KeyPair$1.fromPublic = function fromPublic(eddsa, pub) {
	  if (pub instanceof KeyPair$1)
	    return pub;
	  return new KeyPair$1(eddsa, { pub: pub });
	};

	KeyPair$1.fromSecret = function fromSecret(eddsa, secret) {
	  if (secret instanceof KeyPair$1)
	    return secret;
	  return new KeyPair$1(eddsa, { secret: secret });
	};

	KeyPair$1.prototype.secret = function secret() {
	  return this._secret;
	};

	cachedProperty$1(KeyPair$1, 'pubBytes', function pubBytes() {
	  return this.eddsa.encodePoint(this.pub());
	});

	cachedProperty$1(KeyPair$1, 'pub', function pub() {
	  if (this._pubBytes)
	    return this.eddsa.decodePoint(this._pubBytes);
	  return this.eddsa.g.mul(this.priv());
	});

	cachedProperty$1(KeyPair$1, 'privBytes', function privBytes() {
	  var eddsa = this.eddsa;
	  var hash = this.hash();
	  var lastIx = eddsa.encodingLength - 1;

	  var a = hash.slice(0, eddsa.encodingLength);
	  a[0] &= 248;
	  a[lastIx] &= 127;
	  a[lastIx] |= 64;

	  return a;
	});

	cachedProperty$1(KeyPair$1, 'priv', function priv() {
	  return this.eddsa.decodeInt(this.privBytes());
	});

	cachedProperty$1(KeyPair$1, 'hash', function hash() {
	  return this.eddsa.hash().update(this.secret()).digest();
	});

	cachedProperty$1(KeyPair$1, 'messagePrefix', function messagePrefix() {
	  return this.hash().slice(this.eddsa.encodingLength);
	});

	KeyPair$1.prototype.sign = function sign(message) {
	  assert$2(this._secret, 'KeyPair can only verify');
	  return this.eddsa.sign(message, this);
	};

	KeyPair$1.prototype.verify = function verify(message, sig) {
	  return this.eddsa.verify(message, sig, this);
	};

	KeyPair$1.prototype.getSecret = function getSecret(enc) {
	  assert$2(this._secret, 'KeyPair is public only');
	  return utils$2.encode(this.secret(), enc);
	};

	KeyPair$1.prototype.getPublic = function getPublic(enc) {
	  return utils$2.encode(this.pubBytes(), enc);
	};

	var key = KeyPair$1;

	var BN$1 = bnExports;
	var utils$1 = utils$m;
	var assert$1 = utils$1.assert;
	var cachedProperty = utils$1.cachedProperty;
	var parseBytes$1 = utils$1.parseBytes;

	/**
	* @param {EDDSA} eddsa - eddsa instance
	* @param {Array<Bytes>|Object} sig -
	* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
	* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
	* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
	* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
	*/
	function Signature$1(eddsa, sig) {
	  this.eddsa = eddsa;

	  if (typeof sig !== 'object')
	    sig = parseBytes$1(sig);

	  if (Array.isArray(sig)) {
	    sig = {
	      R: sig.slice(0, eddsa.encodingLength),
	      S: sig.slice(eddsa.encodingLength),
	    };
	  }

	  assert$1(sig.R && sig.S, 'Signature without R or S');

	  if (eddsa.isPoint(sig.R))
	    this._R = sig.R;
	  if (sig.S instanceof BN$1)
	    this._S = sig.S;

	  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
	  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
	}

	cachedProperty(Signature$1, 'S', function S() {
	  return this.eddsa.decodeInt(this.Sencoded());
	});

	cachedProperty(Signature$1, 'R', function R() {
	  return this.eddsa.decodePoint(this.Rencoded());
	});

	cachedProperty(Signature$1, 'Rencoded', function Rencoded() {
	  return this.eddsa.encodePoint(this.R());
	});

	cachedProperty(Signature$1, 'Sencoded', function Sencoded() {
	  return this.eddsa.encodeInt(this.S());
	});

	Signature$1.prototype.toBytes = function toBytes() {
	  return this.Rencoded().concat(this.Sencoded());
	};

	Signature$1.prototype.toHex = function toHex() {
	  return utils$1.encode(this.toBytes(), 'hex').toUpperCase();
	};

	var signature$1 = Signature$1;

	var hash$2 = hash$4;
	var curves = curves$2;
	var utils = utils$m;
	var assert = utils.assert;
	var parseBytes = utils.parseBytes;
	var KeyPair = key;
	var Signature = signature$1;

	function EDDSA(curve) {
	  assert(curve === 'ed25519', 'only tested with ed25519 so far');

	  if (!(this instanceof EDDSA))
	    return new EDDSA(curve);

	  curve = curves[curve].curve;
	  this.curve = curve;
	  this.g = curve.g;
	  this.g.precompute(curve.n.bitLength() + 1);

	  this.pointClass = curve.point().constructor;
	  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
	  this.hash = hash$2.sha512;
	}

	var eddsa = EDDSA;

	/**
	* @param {Array|String} message - message bytes
	* @param {Array|String|KeyPair} secret - secret bytes or a keypair
	* @returns {Signature} - signature
	*/
	EDDSA.prototype.sign = function sign(message, secret) {
	  message = parseBytes(message);
	  var key = this.keyFromSecret(secret);
	  var r = this.hashInt(key.messagePrefix(), message);
	  var R = this.g.mul(r);
	  var Rencoded = this.encodePoint(R);
	  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
	    .mul(key.priv());
	  var S = r.add(s_).umod(this.curve.n);
	  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
	};

	/**
	* @param {Array} message - message bytes
	* @param {Array|String|Signature} sig - sig bytes
	* @param {Array|String|Point|KeyPair} pub - public key
	* @returns {Boolean} - true if public key matches sig of message
	*/
	EDDSA.prototype.verify = function verify(message, sig, pub) {
	  message = parseBytes(message);
	  sig = this.makeSignature(sig);
	  var key = this.keyFromPublic(pub);
	  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
	  var SG = this.g.mul(sig.S());
	  var RplusAh = sig.R().add(key.pub().mul(h));
	  return RplusAh.eq(SG);
	};

	EDDSA.prototype.hashInt = function hashInt() {
	  var hash = this.hash();
	  for (var i = 0; i < arguments.length; i++)
	    hash.update(arguments[i]);
	  return utils.intFromLE(hash.digest()).umod(this.curve.n);
	};

	EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
	  return KeyPair.fromPublic(this, pub);
	};

	EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
	  return KeyPair.fromSecret(this, secret);
	};

	EDDSA.prototype.makeSignature = function makeSignature(sig) {
	  if (sig instanceof Signature)
	    return sig;
	  return new Signature(this, sig);
	};

	/**
	* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
	*
	* EDDSA defines methods for encoding and decoding points and integers. These are
	* helper convenience methods, that pass along to utility functions implied
	* parameters.
	*
	*/
	EDDSA.prototype.encodePoint = function encodePoint(point) {
	  var enc = point.getY().toArray('le', this.encodingLength);
	  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
	  return enc;
	};

	EDDSA.prototype.decodePoint = function decodePoint(bytes) {
	  bytes = utils.parseBytes(bytes);

	  var lastIx = bytes.length - 1;
	  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
	  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

	  var y = utils.intFromLE(normed);
	  return this.curve.pointFromY(y, xIsOdd);
	};

	EDDSA.prototype.encodeInt = function encodeInt(num) {
	  return num.toArray('le', this.encodingLength);
	};

	EDDSA.prototype.decodeInt = function decodeInt(bytes) {
	  return utils.intFromLE(bytes);
	};

	EDDSA.prototype.isPoint = function isPoint(val) {
	  return val instanceof this.pointClass;
	};

	(function (exports) {

		var elliptic = exports;

		elliptic.version = require$$0$4.version;
		elliptic.utils = utils$m;
		elliptic.rand = brorandExports;
		elliptic.curve = curve;
		elliptic.curves = curves$2;

		// Protocols
		elliptic.ec = ec$1;
		elliptic.eddsa = eddsa;
	} (elliptic$2));

	const EC = elliptic$2.ec;

	const ec = new EC('secp256k1');
	const ecparams = ec.curve;

	// Hack, we can not use bn.js@5, while elliptic uses bn.js@4
	// See https://github.com/indutny/elliptic/issues/191#issuecomment-569888758
	const BN = ecparams.n.constructor;

	function loadCompressedPublicKey (first, xbuf) {
	  let x = new BN(xbuf);

	  // overflow
	  if (x.cmp(ecparams.p) >= 0) return null
	  x = x.toRed(ecparams.red);

	  // compute corresponding Y
	  let y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt();
	  if ((first === 0x03) !== y.isOdd()) y = y.redNeg();

	  return ec.keyPair({ pub: { x: x, y: y } })
	}

	function loadUncompressedPublicKey (first, xbuf, ybuf) {
	  let x = new BN(xbuf);
	  let y = new BN(ybuf);

	  // overflow
	  if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null

	  x = x.toRed(ecparams.red);
	  y = y.toRed(ecparams.red);

	  // is odd flag
	  if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null

	  // x*x*x + b = y*y
	  const x3 = x.redSqr().redIMul(x);
	  if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null

	  return ec.keyPair({ pub: { x: x, y: y } })
	}

	function loadPublicKey (pubkey) {
	  // length should be validated in interface
	  const first = pubkey[0];
	  switch (first) {
	    case 0x02:
	    case 0x03:
	      if (pubkey.length !== 33) return null
	      return loadCompressedPublicKey(first, pubkey.subarray(1, 33))
	    case 0x04:
	    case 0x06:
	    case 0x07:
	      if (pubkey.length !== 65) return null
	      return loadUncompressedPublicKey(first, pubkey.subarray(1, 33), pubkey.subarray(33, 65))
	    default:
	      return null
	  }
	}

	function savePublicKey (output, point) {
	  const pubkey = point.encode(null, output.length === 33);
	  // Loop should be faster because we do not need create extra Uint8Array
	  // output.set(new Uint8Array(pubkey))
	  for (let i = 0; i < output.length; ++i) output[i] = pubkey[i];
	}

	var elliptic$1 = {
	  contextRandomize () {
	    return 0
	  },

	  privateKeyVerify (seckey) {
	    const bn = new BN(seckey);
	    return bn.cmp(ecparams.n) < 0 && !bn.isZero() ? 0 : 1
	  },

	  privateKeyNegate (seckey) {
	    const bn = new BN(seckey);
	    const negate = ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Uint8Array, 'be', 32);
	    seckey.set(negate);
	    return 0
	  },

	  privateKeyTweakAdd (seckey, tweak) {
	    const bn = new BN(tweak);
	    if (bn.cmp(ecparams.n) >= 0) return 1

	    bn.iadd(new BN(seckey));
	    if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n);
	    if (bn.isZero()) return 1

	    const tweaked = bn.toArrayLike(Uint8Array, 'be', 32);
	    seckey.set(tweaked);

	    return 0
	  },

	  privateKeyTweakMul (seckey, tweak) {
	    let bn = new BN(tweak);
	    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1

	    bn.imul(new BN(seckey));
	    if (bn.cmp(ecparams.n) >= 0) bn = bn.umod(ecparams.n);

	    const tweaked = bn.toArrayLike(Uint8Array, 'be', 32);
	    seckey.set(tweaked);

	    return 0
	  },

	  publicKeyVerify (pubkey) {
	    const pair = loadPublicKey(pubkey);
	    return pair === null ? 1 : 0
	  },

	  publicKeyCreate (output, seckey) {
	    const bn = new BN(seckey);
	    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1

	    const point = ec.keyFromPrivate(seckey).getPublic();
	    savePublicKey(output, point);

	    return 0
	  },

	  publicKeyConvert (output, pubkey) {
	    const pair = loadPublicKey(pubkey);
	    if (pair === null) return 1

	    const point = pair.getPublic();
	    savePublicKey(output, point);

	    return 0
	  },

	  publicKeyNegate (output, pubkey) {
	    const pair = loadPublicKey(pubkey);
	    if (pair === null) return 1

	    const point = pair.getPublic();
	    point.y = point.y.redNeg();
	    savePublicKey(output, point);

	    return 0
	  },

	  publicKeyCombine (output, pubkeys) {
	    const pairs = new Array(pubkeys.length);
	    for (let i = 0; i < pubkeys.length; ++i) {
	      pairs[i] = loadPublicKey(pubkeys[i]);
	      if (pairs[i] === null) return 1
	    }

	    let point = pairs[0].getPublic();
	    for (let i = 1; i < pairs.length; ++i) point = point.add(pairs[i].pub);
	    if (point.isInfinity()) return 2

	    savePublicKey(output, point);

	    return 0
	  },

	  publicKeyTweakAdd (output, pubkey, tweak) {
	    const pair = loadPublicKey(pubkey);
	    if (pair === null) return 1

	    tweak = new BN(tweak);
	    if (tweak.cmp(ecparams.n) >= 0) return 2

	    const point = pair.getPublic().add(ecparams.g.mul(tweak));
	    if (point.isInfinity()) return 2

	    savePublicKey(output, point);

	    return 0
	  },

	  publicKeyTweakMul (output, pubkey, tweak) {
	    const pair = loadPublicKey(pubkey);
	    if (pair === null) return 1

	    tweak = new BN(tweak);
	    if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) return 2

	    const point = pair.getPublic().mul(tweak);
	    savePublicKey(output, point);

	    return 0
	  },

	  signatureNormalize (sig) {
	    const r = new BN(sig.subarray(0, 32));
	    const s = new BN(sig.subarray(32, 64));
	    if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) return 1

	    if (s.cmp(ec.nh) === 1) {
	      sig.set(ecparams.n.sub(s).toArrayLike(Uint8Array, 'be', 32), 32);
	    }

	    return 0
	  },

	  // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js
	  // Adapted for Uint8Array instead Buffer
	  signatureExport (obj, sig) {
	    const sigR = sig.subarray(0, 32);
	    const sigS = sig.subarray(32, 64);
	    if (new BN(sigR).cmp(ecparams.n) >= 0) return 1
	    if (new BN(sigS).cmp(ecparams.n) >= 0) return 1

	    const { output } = obj;

	    // Prepare R
	    let r = output.subarray(4, 4 + 33);
	    r[0] = 0x00;
	    r.set(sigR, 1);

	    let lenR = 33;
	    let posR = 0;
	    for (; lenR > 1 && r[posR] === 0x00 && !(r[posR + 1] & 0x80); --lenR, ++posR);

	    r = r.subarray(posR);
	    if (r[0] & 0x80) return 1
	    if (lenR > 1 && (r[0] === 0x00) && !(r[1] & 0x80)) return 1

	    // Prepare S
	    let s = output.subarray(6 + 33, 6 + 33 + 33);
	    s[0] = 0x00;
	    s.set(sigS, 1);

	    let lenS = 33;
	    let posS = 0;
	    for (; lenS > 1 && s[posS] === 0x00 && !(s[posS + 1] & 0x80); --lenS, ++posS);

	    s = s.subarray(posS);
	    if (s[0] & 0x80) return 1
	    if (lenS > 1 && (s[0] === 0x00) && !(s[1] & 0x80)) return 1

	    // Set output length for return
	    obj.outputlen = 6 + lenR + lenS;

	    // Output in specified format
	    // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]
	    output[0] = 0x30;
	    output[1] = obj.outputlen - 2;
	    output[2] = 0x02;
	    output[3] = r.length;
	    output.set(r, 4);
	    output[4 + lenR] = 0x02;
	    output[5 + lenR] = s.length;
	    output.set(s, 6 + lenR);

	    return 0
	  },

	  // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js
	  // Adapted for Uint8Array instead Buffer
	  signatureImport (output, sig) {
	    if (sig.length < 8) return 1
	    if (sig.length > 72) return 1
	    if (sig[0] !== 0x30) return 1
	    if (sig[1] !== sig.length - 2) return 1
	    if (sig[2] !== 0x02) return 1

	    const lenR = sig[3];
	    if (lenR === 0) return 1
	    if (5 + lenR >= sig.length) return 1
	    if (sig[4 + lenR] !== 0x02) return 1

	    const lenS = sig[5 + lenR];
	    if (lenS === 0) return 1
	    if ((6 + lenR + lenS) !== sig.length) return 1

	    if (sig[4] & 0x80) return 1
	    if (lenR > 1 && (sig[4] === 0x00) && !(sig[5] & 0x80)) return 1

	    if (sig[lenR + 6] & 0x80) return 1
	    if (lenS > 1 && (sig[lenR + 6] === 0x00) && !(sig[lenR + 7] & 0x80)) return 1

	    let sigR = sig.subarray(4, 4 + lenR);
	    if (sigR.length === 33 && sigR[0] === 0x00) sigR = sigR.subarray(1);
	    if (sigR.length > 32) return 1

	    let sigS = sig.subarray(6 + lenR);
	    if (sigS.length === 33 && sigS[0] === 0x00) sigS = sigS.slice(1);
	    if (sigS.length > 32) throw new Error('S length is too long')

	    let r = new BN(sigR);
	    if (r.cmp(ecparams.n) >= 0) r = new BN(0);

	    let s = new BN(sig.subarray(6 + lenR));
	    if (s.cmp(ecparams.n) >= 0) s = new BN(0);

	    output.set(r.toArrayLike(Uint8Array, 'be', 32), 0);
	    output.set(s.toArrayLike(Uint8Array, 'be', 32), 32);

	    return 0
	  },

	  ecdsaSign (obj, message, seckey, data, noncefn) {
	    if (noncefn) {
	      const _noncefn = noncefn;
	      noncefn = (counter) => {
	        const nonce = _noncefn(message, seckey, null, data, counter);

	        const isValid = nonce instanceof Uint8Array && nonce.length === 32;
	        if (!isValid) throw new Error('This is the way')

	        return new BN(nonce)
	      };
	    }

	    const d = new BN(seckey);
	    if (d.cmp(ecparams.n) >= 0 || d.isZero()) return 1

	    let sig;
	    try {
	      sig = ec.sign(message, seckey, { canonical: true, k: noncefn, pers: data });
	    } catch (err) {
	      return 1
	    }

	    obj.signature.set(sig.r.toArrayLike(Uint8Array, 'be', 32), 0);
	    obj.signature.set(sig.s.toArrayLike(Uint8Array, 'be', 32), 32);
	    obj.recid = sig.recoveryParam;

	    return 0
	  },

	  ecdsaVerify (sig, msg32, pubkey) {
	    const sigObj = { r: sig.subarray(0, 32), s: sig.subarray(32, 64) };

	    const sigr = new BN(sigObj.r);
	    const sigs = new BN(sigObj.s);
	    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1
	    if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return 3

	    const pair = loadPublicKey(pubkey);
	    if (pair === null) return 2

	    const point = pair.getPublic();
	    const isValid = ec.verify(msg32, sigObj, point);
	    return isValid ? 0 : 3
	  },

	  ecdsaRecover (output, sig, recid, msg32) {
	    const sigObj = { r: sig.slice(0, 32), s: sig.slice(32, 64) };

	    const sigr = new BN(sigObj.r);
	    const sigs = new BN(sigObj.s);
	    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1

	    if (sigr.isZero() || sigs.isZero()) return 2

	    // Can throw `throw new Error('Unable to find sencond key candinate');`
	    let point;
	    try {
	      point = ec.recoverPubKey(msg32, sigObj, recid);
	    } catch (err) {
	      return 2
	    }

	    savePublicKey(output, point);

	    return 0
	  },

	  ecdh (output, pubkey, seckey, data, hashfn, xbuf, ybuf) {
	    const pair = loadPublicKey(pubkey);
	    if (pair === null) return 1

	    const scalar = new BN(seckey);
	    if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) return 2

	    const point = pair.getPublic().mul(scalar);

	    if (hashfn === undefined) {
	      const data = point.encode(null, true);
	      const sha256 = ec.hash().update(data).digest();
	      for (let i = 0; i < 32; ++i) output[i] = sha256[i];
	    } else {
	      if (!xbuf) xbuf = new Uint8Array(32);
	      const x = point.getX().toArray('be', 32);
	      for (let i = 0; i < 32; ++i) xbuf[i] = x[i];

	      if (!ybuf) ybuf = new Uint8Array(32);
	      const y = point.getY().toArray('be', 32);
	      for (let i = 0; i < 32; ++i) ybuf[i] = y[i];

	      const hash = hashfn(xbuf, ybuf, data);

	      const isValid = hash instanceof Uint8Array && hash.length === output.length;
	      if (!isValid) return 2

	      output.set(hash);
	    }

	    return 0
	  }
	};

	var elliptic = lib$5(elliptic$1);

	var random = {};

	var browserExports = {};
	var browser$2 = {
	  get exports(){ return browserExports; },
	  set exports(v){ browserExports = v; },
	};

	var safeBufferExports = {};
	var safeBuffer = {
	  get exports(){ return safeBufferExports; },
	  set exports(v){ safeBufferExports = v; },
	};

	/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */

	(function (module, exports) {
		/* eslint-disable node/no-deprecated-api */
		var buffer = require$$2$1;
		var Buffer = buffer.Buffer;

		// alternative to using Object.keys for old browsers
		function copyProps (src, dst) {
		  for (var key in src) {
		    dst[key] = src[key];
		  }
		}
		if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
		  module.exports = buffer;
		} else {
		  // Copy properties from require('buffer')
		  copyProps(buffer, exports);
		  exports.Buffer = SafeBuffer;
		}

		function SafeBuffer (arg, encodingOrOffset, length) {
		  return Buffer(arg, encodingOrOffset, length)
		}

		SafeBuffer.prototype = Object.create(Buffer.prototype);

		// Copy static methods from Buffer
		copyProps(Buffer, SafeBuffer);

		SafeBuffer.from = function (arg, encodingOrOffset, length) {
		  if (typeof arg === 'number') {
		    throw new TypeError('Argument must not be a number')
		  }
		  return Buffer(arg, encodingOrOffset, length)
		};

		SafeBuffer.alloc = function (size, fill, encoding) {
		  if (typeof size !== 'number') {
		    throw new TypeError('Argument must be a number')
		  }
		  var buf = Buffer(size);
		  if (fill !== undefined) {
		    if (typeof encoding === 'string') {
		      buf.fill(fill, encoding);
		    } else {
		      buf.fill(fill);
		    }
		  } else {
		    buf.fill(0);
		  }
		  return buf
		};

		SafeBuffer.allocUnsafe = function (size) {
		  if (typeof size !== 'number') {
		    throw new TypeError('Argument must be a number')
		  }
		  return Buffer(size)
		};

		SafeBuffer.allocUnsafeSlow = function (size) {
		  if (typeof size !== 'number') {
		    throw new TypeError('Argument must be a number')
		  }
		  return buffer.SlowBuffer(size)
		};
	} (safeBuffer, safeBufferExports));

	// limit of Crypto.getRandomValues()
	// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
	var MAX_BYTES = 65536;

	// Node supports requesting up to this number of bytes
	// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48
	var MAX_UINT32 = 4294967295;

	function oldBrowser () {
	  throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11')
	}

	var Buffer$c = safeBufferExports.Buffer;
	var crypto = commonjsGlobal.crypto || commonjsGlobal.msCrypto;

	if (crypto && crypto.getRandomValues) {
	  browser$2.exports = randomBytes;
	} else {
	  browser$2.exports = oldBrowser;
	}

	function randomBytes (size, cb) {
	  // phantomjs needs to throw
	  if (size > MAX_UINT32) throw new RangeError('requested too many random bytes')

	  var bytes = Buffer$c.allocUnsafe(size);

	  if (size > 0) {  // getRandomValues fails on IE if size == 0
	    if (size > MAX_BYTES) { // this is the max bytes crypto.getRandomValues
	      // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
	      for (var generated = 0; generated < size; generated += MAX_BYTES) {
	        // buffer.slice automatically checks if the end is past the end of
	        // the buffer so we don't have to here
	        crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES));
	      }
	    } else {
	      crypto.getRandomValues(bytes);
	    }
	  }

	  if (typeof cb === 'function') {
	    return nextTick$1(function () {
	      cb(null, bytes);
	    })
	  }

	  return bytes
	}

	Object.defineProperty(random, "__esModule", { value: true });
	var randombytes = browserExports;
	function getRandomBytes(bytes) {
	    return new Promise(function (resolve, reject) {
	        randombytes(bytes, function (err, resp) {
	            if (err) {
	                reject(err);
	                return;
	            }
	            resolve(resp);
	        });
	    });
	}
	random.getRandomBytes = getRandomBytes;
	function getRandomBytesSync(bytes) {
	    return randombytes(bytes);
	}
	random.getRandomBytesSync = getRandomBytesSync;

	(function (exports) {
		var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
		    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
		    return new (P || (P = Promise))(function (resolve, reject) {
		        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
		        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
		        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
		        step((generator = generator.apply(thisArg, _arguments || [])).next());
		    });
		};
		var __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
		    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
		    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
		    function verb(n) { return function (v) { return step([n, v]); }; }
		    function step(op) {
		        if (f) throw new TypeError("Generator is already executing.");
		        while (_) try {
		            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
		            if (y = 0, t) op = [op[0] & 2, t.value];
		            switch (op[0]) {
		                case 0: case 1: t = op; break;
		                case 4: _.label++; return { value: op[1], done: false };
		                case 5: _.label++; y = op[1]; op = [0]; continue;
		                case 7: op = _.ops.pop(); _.trys.pop(); continue;
		                default:
		                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
		                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
		                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
		                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
		                    if (t[2]) _.ops.pop();
		                    _.trys.pop(); continue;
		            }
		            op = body.call(thisArg, _);
		        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
		        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
		    }
		};
		function __export(m) {
		    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
		}
		Object.defineProperty(exports, "__esModule", { value: true });
		var secp256k1_1 = elliptic;
		var random_1 = random;
		var SECP256K1_PRIVATE_KEY_SIZE = 32;
		function createPrivateKey() {
		    return __awaiter(this, void 0, void 0, function () {
		        var pk;
		        return __generator(this, function (_a) {
		            switch (_a.label) {
		                case 0:
		                    return [4 /*yield*/, random_1.getRandomBytes(SECP256K1_PRIVATE_KEY_SIZE)];
		                case 1:
		                    pk = _a.sent();
		                    if (secp256k1_1.privateKeyVerify(pk)) {
		                        return [2 /*return*/, pk];
		                    }
		                    return [3 /*break*/, 0];
		                case 2: return [2 /*return*/];
		            }
		        });
		    });
		}
		exports.createPrivateKey = createPrivateKey;
		function createPrivateKeySync() {
		    while (true) {
		        var pk = random_1.getRandomBytesSync(SECP256K1_PRIVATE_KEY_SIZE);
		        if (secp256k1_1.privateKeyVerify(pk)) {
		            return pk;
		        }
		    }
		}
		exports.createPrivateKeySync = createPrivateKeySync;
		__export(elliptic);
		
	} (secp256k1$1));

	var internal = {};

	/*
	The MIT License

	Copyright (c) 2016 Nick Dodson. nickdodson.com

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE
	 */
	Object.defineProperty(internal, "__esModule", { value: true });
	internal.isHexString = internal.getKeys = internal.fromAscii = internal.fromUtf8 = internal.toAscii = internal.arrayContainsArray = internal.getBinarySize = internal.padToEven = internal.stripHexPrefix = internal.isHexPrefixed = void 0;
	/**
	 * Returns a `Boolean` on whether or not the a `String` starts with '0x'
	 * @param str the string input value
	 * @return a boolean if it is or is not hex prefixed
	 * @throws if the str input is not a string
	 */
	function isHexPrefixed(str) {
	    if (typeof str !== 'string') {
	        throw new Error("[isHexPrefixed] input must be type 'string', received type ".concat(typeof str));
	    }
	    return str[0] === '0' && str[1] === 'x';
	}
	internal.isHexPrefixed = isHexPrefixed;
	/**
	 * Removes '0x' from a given `String` if present
	 * @param str the string value
	 * @returns the string without 0x prefix
	 */
	var stripHexPrefix = function (str) {
	    if (typeof str !== 'string')
	        throw new Error("[stripHexPrefix] input must be type 'string', received ".concat(typeof str));
	    return isHexPrefixed(str) ? str.slice(2) : str;
	};
	internal.stripHexPrefix = stripHexPrefix;
	/**
	 * Pads a `String` to have an even length
	 * @param value
	 * @return output
	 */
	function padToEven(value) {
	    var a = value;
	    if (typeof a !== 'string') {
	        throw new Error("[padToEven] value must be type 'string', received ".concat(typeof a));
	    }
	    if (a.length % 2)
	        a = "0".concat(a);
	    return a;
	}
	internal.padToEven = padToEven;
	/**
	 * Get the binary size of a string
	 * @param str
	 * @returns the number of bytes contained within the string
	 */
	function getBinarySize(str) {
	    if (typeof str !== 'string') {
	        throw new Error("[getBinarySize] method requires input type 'string', recieved ".concat(typeof str));
	    }
	    return Buffer$d.byteLength(str, 'utf8');
	}
	internal.getBinarySize = getBinarySize;
	/**
	 * Returns TRUE if the first specified array contains all elements
	 * from the second one. FALSE otherwise.
	 *
	 * @param superset
	 * @param subset
	 *
	 */
	function arrayContainsArray(superset, subset, some) {
	    if (Array.isArray(superset) !== true) {
	        throw new Error("[arrayContainsArray] method requires input 'superset' to be an array, got type '".concat(typeof superset, "'"));
	    }
	    if (Array.isArray(subset) !== true) {
	        throw new Error("[arrayContainsArray] method requires input 'subset' to be an array, got type '".concat(typeof subset, "'"));
	    }
	    return subset[some ? 'some' : 'every'](function (value) { return superset.indexOf(value) >= 0; });
	}
	internal.arrayContainsArray = arrayContainsArray;
	/**
	 * Should be called to get ascii from its hex representation
	 *
	 * @param string in hex
	 * @returns ascii string representation of hex value
	 */
	function toAscii(hex) {
	    var str = '';
	    var i = 0;
	    var l = hex.length;
	    if (hex.substring(0, 2) === '0x')
	        i = 2;
	    for (; i < l; i += 2) {
	        var code = parseInt(hex.substr(i, 2), 16);
	        str += String.fromCharCode(code);
	    }
	    return str;
	}
	internal.toAscii = toAscii;
	/**
	 * Should be called to get hex representation (prefixed by 0x) of utf8 string
	 *
	 * @param string
	 * @param optional padding
	 * @returns hex representation of input string
	 */
	function fromUtf8(stringValue) {
	    var str = Buffer$d.from(stringValue, 'utf8');
	    return "0x".concat(padToEven(str.toString('hex')).replace(/^0+|0+$/g, ''));
	}
	internal.fromUtf8 = fromUtf8;
	/**
	 * Should be called to get hex representation (prefixed by 0x) of ascii string
	 *
	 * @param  string
	 * @param  optional padding
	 * @returns  hex representation of input string
	 */
	function fromAscii(stringValue) {
	    var hex = '';
	    for (var i = 0; i < stringValue.length; i++) {
	        var code = stringValue.charCodeAt(i);
	        var n = code.toString(16);
	        hex += n.length < 2 ? "0".concat(n) : n;
	    }
	    return "0x".concat(hex);
	}
	internal.fromAscii = fromAscii;
	/**
	 * Returns the keys from an array of objects.
	 * @example
	 * ```js
	 * getKeys([{a: '1', b: '2'}, {a: '3', b: '4'}], 'a') => ['1', '3']
	 *````
	 * @param  params
	 * @param  key
	 * @param  allowEmpty
	 * @returns output just a simple array of output keys
	 */
	function getKeys(params, key, allowEmpty) {
	    if (!Array.isArray(params)) {
	        throw new Error("[getKeys] method expects input 'params' to be an array, got ".concat(typeof params));
	    }
	    if (typeof key !== 'string') {
	        throw new Error("[getKeys] method expects input 'key' to be type 'string', got ".concat(typeof params));
	    }
	    var result = [];
	    for (var i = 0; i < params.length; i++) {
	        var value = params[i][key];
	        if (allowEmpty && !value) {
	            value = '';
	        }
	        else if (typeof value !== 'string') {
	            throw new Error("invalid abi - expected type 'string', received ".concat(typeof value));
	        }
	        result.push(value);
	    }
	    return result;
	}
	internal.getKeys = getKeys;
	/**
	 * Is the string a hex string.
	 *
	 * @param  value
	 * @param  length
	 * @returns  output the string is a hex string
	 */
	function isHexString(value, length) {
	    if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/))
	        return false;
	    if (length && value.length !== 2 + 2 * length)
	        return false;
	    return true;
	}
	internal.isHexString = isHexString;

	var bytes = {};

	var helpers = {};

	Object.defineProperty(helpers, "__esModule", { value: true });
	helpers.assertIsString = helpers.assertIsArray = helpers.assertIsBuffer = helpers.assertIsHexString = void 0;
	var internal_1$1 = internal;
	/**
	 * Throws if a string is not hex prefixed
	 * @param {string} input string to check hex prefix of
	 */
	var assertIsHexString = function (input) {
	    if (!(0, internal_1$1.isHexString)(input)) {
	        var msg = "This method only supports 0x-prefixed hex strings but input was: ".concat(input);
	        throw new Error(msg);
	    }
	};
	helpers.assertIsHexString = assertIsHexString;
	/**
	 * Throws if input is not a buffer
	 * @param {Buffer} input value to check
	 */
	var assertIsBuffer = function (input) {
	    if (!isBuffer$1(input)) {
	        var msg = "This method only supports Buffer but input was: ".concat(input);
	        throw new Error(msg);
	    }
	};
	helpers.assertIsBuffer = assertIsBuffer;
	/**
	 * Throws if input is not an array
	 * @param {number[]} input value to check
	 */
	var assertIsArray = function (input) {
	    if (!Array.isArray(input)) {
	        var msg = "This method only supports number arrays but input was: ".concat(input);
	        throw new Error(msg);
	    }
	};
	helpers.assertIsArray = assertIsArray;
	/**
	 * Throws if input is not a string
	 * @param {string} input value to check
	 */
	var assertIsString = function (input) {
	    if (typeof input !== 'string') {
	        var msg = "This method only supports strings but input was: ".concat(input);
	        throw new Error(msg);
	    }
	};
	helpers.assertIsString = assertIsString;

	(function (exports) {
		var __values = (commonjsGlobal && commonjsGlobal.__values) || function(o) {
		    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
		    if (m) return m.call(o);
		    if (o && typeof o.length === "number") return {
		        next: function () {
		            if (o && i >= o.length) o = void 0;
		            return { value: o && o[i++], done: !o };
		        }
		    };
		    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
		};
		var __read = (commonjsGlobal && commonjsGlobal.__read) || function (o, n) {
		    var m = typeof Symbol === "function" && o[Symbol.iterator];
		    if (!m) return o;
		    var i = m.call(o), r, ar = [], e;
		    try {
		        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
		    }
		    catch (error) { e = { error: error }; }
		    finally {
		        try {
		            if (r && !r.done && (m = i["return"])) m.call(i);
		        }
		        finally { if (e) throw e.error; }
		    }
		    return ar;
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.bufArrToArr = exports.arrToBufArr = exports.validateNoLeadingZeroes = exports.baToJSON = exports.toUtf8 = exports.addHexPrefix = exports.toUnsigned = exports.fromSigned = exports.bufferToHex = exports.bufferToInt = exports.toBuffer = exports.unpadHexString = exports.unpadArray = exports.unpadBuffer = exports.setLengthRight = exports.setLengthLeft = exports.zeros = exports.intToBuffer = exports.intToHex = void 0;
		var externals_1 = externals;
		var internal_1 = internal;
		var helpers_1 = helpers;
		/**
		 * Converts a `Number` into a hex `String`
		 * @param {Number} i
		 * @return {String}
		 */
		var intToHex = function (i) {
		    if (!Number.isSafeInteger(i) || i < 0) {
		        throw new Error("Received an invalid integer type: ".concat(i));
		    }
		    return "0x".concat(i.toString(16));
		};
		exports.intToHex = intToHex;
		/**
		 * Converts an `Number` to a `Buffer`
		 * @param {Number} i
		 * @return {Buffer}
		 */
		var intToBuffer = function (i) {
		    var hex = (0, exports.intToHex)(i);
		    return Buffer$d.from((0, internal_1.padToEven)(hex.slice(2)), 'hex');
		};
		exports.intToBuffer = intToBuffer;
		/**
		 * Returns a buffer filled with 0s.
		 * @param bytes the number of bytes the buffer should be
		 */
		var zeros = function (bytes) {
		    return Buffer$d.allocUnsafe(bytes).fill(0);
		};
		exports.zeros = zeros;
		/**
		 * Pads a `Buffer` with zeros till it has `length` bytes.
		 * Truncates the beginning or end of input if its length exceeds `length`.
		 * @param msg the value to pad (Buffer)
		 * @param length the number of bytes the output should be
		 * @param right whether to start padding form the left or right
		 * @return (Buffer)
		 */
		var setLength = function (msg, length, right) {
		    var buf = (0, exports.zeros)(length);
		    if (right) {
		        if (msg.length < length) {
		            msg.copy(buf);
		            return buf;
		        }
		        return msg.slice(0, length);
		    }
		    else {
		        if (msg.length < length) {
		            msg.copy(buf, length - msg.length);
		            return buf;
		        }
		        return msg.slice(-length);
		    }
		};
		/**
		 * Left Pads a `Buffer` with leading zeros till it has `length` bytes.
		 * Or it truncates the beginning if it exceeds.
		 * @param msg the value to pad (Buffer)
		 * @param length the number of bytes the output should be
		 * @return (Buffer)
		 */
		var setLengthLeft = function (msg, length) {
		    (0, helpers_1.assertIsBuffer)(msg);
		    return setLength(msg, length, false);
		};
		exports.setLengthLeft = setLengthLeft;
		/**
		 * Right Pads a `Buffer` with trailing zeros till it has `length` bytes.
		 * it truncates the end if it exceeds.
		 * @param msg the value to pad (Buffer)
		 * @param length the number of bytes the output should be
		 * @return (Buffer)
		 */
		var setLengthRight = function (msg, length) {
		    (0, helpers_1.assertIsBuffer)(msg);
		    return setLength(msg, length, true);
		};
		exports.setLengthRight = setLengthRight;
		/**
		 * Trims leading zeros from a `Buffer`, `String` or `Number[]`.
		 * @param a (Buffer|Array|String)
		 * @return (Buffer|Array|String)
		 */
		var stripZeros = function (a) {
		    var first = a[0];
		    while (a.length > 0 && first.toString() === '0') {
		        a = a.slice(1);
		        first = a[0];
		    }
		    return a;
		};
		/**
		 * Trims leading zeros from a `Buffer`.
		 * @param a (Buffer)
		 * @return (Buffer)
		 */
		var unpadBuffer = function (a) {
		    (0, helpers_1.assertIsBuffer)(a);
		    return stripZeros(a);
		};
		exports.unpadBuffer = unpadBuffer;
		/**
		 * Trims leading zeros from an `Array` (of numbers).
		 * @param a (number[])
		 * @return (number[])
		 */
		var unpadArray = function (a) {
		    (0, helpers_1.assertIsArray)(a);
		    return stripZeros(a);
		};
		exports.unpadArray = unpadArray;
		/**
		 * Trims leading zeros from a hex-prefixed `String`.
		 * @param a (String)
		 * @return (String)
		 */
		var unpadHexString = function (a) {
		    (0, helpers_1.assertIsHexString)(a);
		    a = (0, internal_1.stripHexPrefix)(a);
		    return stripZeros(a);
		};
		exports.unpadHexString = unpadHexString;
		/**
		 * Attempts to turn a value into a `Buffer`.
		 * Inputs supported: `Buffer`, `String` (hex-prefixed), `Number`, null/undefined, `BN` and other objects
		 * with a `toArray()` or `toBuffer()` method.
		 * @param v the value
		 */
		var toBuffer = function (v) {
		    if (v === null || v === undefined) {
		        return Buffer$d.allocUnsafe(0);
		    }
		    if (isBuffer$1(v)) {
		        return Buffer$d.from(v);
		    }
		    if (Array.isArray(v) || v instanceof Uint8Array) {
		        return Buffer$d.from(v);
		    }
		    if (typeof v === 'string') {
		        if (!(0, internal_1.isHexString)(v)) {
		            throw new Error("Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: ".concat(v));
		        }
		        return Buffer$d.from((0, internal_1.padToEven)((0, internal_1.stripHexPrefix)(v)), 'hex');
		    }
		    if (typeof v === 'number') {
		        return (0, exports.intToBuffer)(v);
		    }
		    if (externals_1.BN.isBN(v)) {
		        if (v.isNeg()) {
		            throw new Error("Cannot convert negative BN to buffer. Given: ".concat(v));
		        }
		        return v.toArrayLike(Buffer$d);
		    }
		    if (v.toArray) {
		        // converts a BN to a Buffer
		        return Buffer$d.from(v.toArray());
		    }
		    if (v.toBuffer) {
		        return Buffer$d.from(v.toBuffer());
		    }
		    throw new Error('invalid type');
		};
		exports.toBuffer = toBuffer;
		/**
		 * Converts a `Buffer` to a `Number`.
		 * @param buf `Buffer` object to convert
		 * @throws If the input number exceeds 53 bits.
		 */
		var bufferToInt = function (buf) {
		    return new externals_1.BN((0, exports.toBuffer)(buf)).toNumber();
		};
		exports.bufferToInt = bufferToInt;
		/**
		 * Converts a `Buffer` into a `0x`-prefixed hex `String`.
		 * @param buf `Buffer` object to convert
		 */
		var bufferToHex = function (buf) {
		    buf = (0, exports.toBuffer)(buf);
		    return '0x' + buf.toString('hex');
		};
		exports.bufferToHex = bufferToHex;
		/**
		 * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.
		 * @param num Signed integer value
		 */
		var fromSigned = function (num) {
		    return new externals_1.BN(num).fromTwos(256);
		};
		exports.fromSigned = fromSigned;
		/**
		 * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.
		 * @param num
		 */
		var toUnsigned = function (num) {
		    return Buffer$d.from(num.toTwos(256).toArray());
		};
		exports.toUnsigned = toUnsigned;
		/**
		 * Adds "0x" to a given `String` if it does not already start with "0x".
		 */
		var addHexPrefix = function (str) {
		    if (typeof str !== 'string') {
		        return str;
		    }
		    return (0, internal_1.isHexPrefixed)(str) ? str : '0x' + str;
		};
		exports.addHexPrefix = addHexPrefix;
		/**
		 * Returns the utf8 string representation from a hex string.
		 *
		 * Examples:
		 *
		 * Input 1: '657468657265756d000000000000000000000000000000000000000000000000'
		 * Input 2: '657468657265756d'
		 * Input 3: '000000000000000000000000000000000000000000000000657468657265756d'
		 *
		 * Output (all 3 input variants): 'ethereum'
		 *
		 * Note that this method is not intended to be used with hex strings
		 * representing quantities in both big endian or little endian notation.
		 *
		 * @param string Hex string, should be `0x` prefixed
		 * @return Utf8 string
		 */
		var toUtf8 = function (hex) {
		    var zerosRegexp = /^(00)+|(00)+$/g;
		    hex = (0, internal_1.stripHexPrefix)(hex);
		    if (hex.length % 2 !== 0) {
		        throw new Error('Invalid non-even hex string input for toUtf8() provided');
		    }
		    var bufferVal = Buffer$d.from(hex.replace(zerosRegexp, ''), 'hex');
		    return bufferVal.toString('utf8');
		};
		exports.toUtf8 = toUtf8;
		/**
		 * Converts a `Buffer` or `Array` to JSON.
		 * @param ba (Buffer|Array)
		 * @return (Array|String|null)
		 */
		var baToJSON = function (ba) {
		    if (isBuffer$1(ba)) {
		        return "0x".concat(ba.toString('hex'));
		    }
		    else if (ba instanceof Array) {
		        var array = [];
		        for (var i = 0; i < ba.length; i++) {
		            array.push((0, exports.baToJSON)(ba[i]));
		        }
		        return array;
		    }
		};
		exports.baToJSON = baToJSON;
		/**
		 * Checks provided Buffers for leading zeroes and throws if found.
		 *
		 * Examples:
		 *
		 * Valid values: 0x1, 0x, 0x01, 0x1234
		 * Invalid values: 0x0, 0x00, 0x001, 0x0001
		 *
		 * Note: This method is useful for validating that RLP encoded integers comply with the rule that all
		 * integer values encoded to RLP must be in the most compact form and contain no leading zero bytes
		 * @param values An object containing string keys and Buffer values
		 * @throws if any provided value is found to have leading zero bytes
		 */
		var validateNoLeadingZeroes = function (values) {
		    var e_1, _a;
		    try {
		        for (var _b = __values(Object.entries(values)), _c = _b.next(); !_c.done; _c = _b.next()) {
		            var _d = __read(_c.value, 2), k = _d[0], v = _d[1];
		            if (v !== undefined && v.length > 0 && v[0] === 0) {
		                throw new Error("".concat(k, " cannot have leading zeroes, received: ").concat(v.toString('hex')));
		            }
		        }
		    }
		    catch (e_1_1) { e_1 = { error: e_1_1 }; }
		    finally {
		        try {
		            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
		        }
		        finally { if (e_1) throw e_1.error; }
		    }
		};
		exports.validateNoLeadingZeroes = validateNoLeadingZeroes;
		function arrToBufArr(arr) {
		    if (!Array.isArray(arr)) {
		        return Buffer$d.from(arr);
		    }
		    return arr.map(function (a) { return arrToBufArr(a); });
		}
		exports.arrToBufArr = arrToBufArr;
		function bufArrToArr(arr) {
		    if (!Array.isArray(arr)) {
		        return Uint8Array.from(arr !== null && arr !== void 0 ? arr : []);
		    }
		    return arr.map(function (a) { return bufArrToArr(a); });
		}
		exports.bufArrToArr = bufArrToArr;
		
	} (bytes));

	var hash$1 = {};

	var keccak$2 = {};

	var hashUtils = {};

	Object.defineProperty(hashUtils, "__esModule", { value: true });
	function createHashFunction(hashConstructor) {
	    return function (msg) {
	        var hash = hashConstructor();
	        hash.update(msg);
	        return Buffer$d.from(hash.digest());
	    };
	}
	hashUtils.createHashFunction = createHashFunction;

	var readableBrowserExports = {};
	var readableBrowser = {
	  get exports(){ return readableBrowserExports; },
	  set exports(v){ readableBrowserExports = v; },
	};

	var domain;

	// This constructor is used to store event handlers. Instantiating this is
	// faster than explicitly calling `Object.create(null)` to get a "clean" empty
	// object (tested with v8 v4.9).
	function EventHandlers() {}
	EventHandlers.prototype = Object.create(null);

	function EventEmitter() {
	  EventEmitter.init.call(this);
	}

	// nodejs oddity
	// require('events') === require('events').EventEmitter
	EventEmitter.EventEmitter = EventEmitter;

	EventEmitter.usingDomains = false;

	EventEmitter.prototype.domain = undefined;
	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;

	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;

	EventEmitter.init = function() {
	  this.domain = null;
	  if (EventEmitter.usingDomains) {
	    // if there is an active domain, then attach to it.
	    if (domain.active ) ;
	  }

	  if (!this._events || this._events === Object.getPrototypeOf(this)._events) {
	    this._events = new EventHandlers();
	    this._eventsCount = 0;
	  }

	  this._maxListeners = this._maxListeners || undefined;
	};

	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
	  if (typeof n !== 'number' || n < 0 || isNaN(n))
	    throw new TypeError('"n" argument must be a positive number');
	  this._maxListeners = n;
	  return this;
	};

	function $getMaxListeners(that) {
	  if (that._maxListeners === undefined)
	    return EventEmitter.defaultMaxListeners;
	  return that._maxListeners;
	}

	EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
	  return $getMaxListeners(this);
	};

	// These standalone emit* functions are used to optimize calling of event
	// handlers for fast cases because emit() itself often has a variable number of
	// arguments and can be deoptimized because of that. These functions always have
	// the same number of arguments and thus do not get deoptimized, so the code
	// inside them can execute faster.
	function emitNone(handler, isFn, self) {
	  if (isFn)
	    handler.call(self);
	  else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);
	    for (var i = 0; i < len; ++i)
	      listeners[i].call(self);
	  }
	}
	function emitOne(handler, isFn, self, arg1) {
	  if (isFn)
	    handler.call(self, arg1);
	  else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);
	    for (var i = 0; i < len; ++i)
	      listeners[i].call(self, arg1);
	  }
	}
	function emitTwo(handler, isFn, self, arg1, arg2) {
	  if (isFn)
	    handler.call(self, arg1, arg2);
	  else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);
	    for (var i = 0; i < len; ++i)
	      listeners[i].call(self, arg1, arg2);
	  }
	}
	function emitThree(handler, isFn, self, arg1, arg2, arg3) {
	  if (isFn)
	    handler.call(self, arg1, arg2, arg3);
	  else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);
	    for (var i = 0; i < len; ++i)
	      listeners[i].call(self, arg1, arg2, arg3);
	  }
	}

	function emitMany(handler, isFn, self, args) {
	  if (isFn)
	    handler.apply(self, args);
	  else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);
	    for (var i = 0; i < len; ++i)
	      listeners[i].apply(self, args);
	  }
	}

	EventEmitter.prototype.emit = function emit(type) {
	  var er, handler, len, args, i, events, domain;
	  var doError = (type === 'error');

	  events = this._events;
	  if (events)
	    doError = (doError && events.error == null);
	  else if (!doError)
	    return false;

	  domain = this.domain;

	  // If there is no 'error' event listener then throw.
	  if (doError) {
	    er = arguments[1];
	    if (domain) {
	      if (!er)
	        er = new Error('Uncaught, unspecified "error" event');
	      er.domainEmitter = this;
	      er.domain = domain;
	      er.domainThrown = false;
	      domain.emit('error', er);
	    } else if (er instanceof Error) {
	      throw er; // Unhandled 'error' event
	    } else {
	      // At least give some kind of context to the user
	      var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
	      err.context = er;
	      throw err;
	    }
	    return false;
	  }

	  handler = events[type];

	  if (!handler)
	    return false;

	  var isFn = typeof handler === 'function';
	  len = arguments.length;
	  switch (len) {
	    // fast cases
	    case 1:
	      emitNone(handler, isFn, this);
	      break;
	    case 2:
	      emitOne(handler, isFn, this, arguments[1]);
	      break;
	    case 3:
	      emitTwo(handler, isFn, this, arguments[1], arguments[2]);
	      break;
	    case 4:
	      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
	      break;
	    // slower
	    default:
	      args = new Array(len - 1);
	      for (i = 1; i < len; i++)
	        args[i - 1] = arguments[i];
	      emitMany(handler, isFn, this, args);
	  }

	  return true;
	};

	function _addListener(target, type, listener, prepend) {
	  var m;
	  var events;
	  var existing;

	  if (typeof listener !== 'function')
	    throw new TypeError('"listener" argument must be a function');

	  events = target._events;
	  if (!events) {
	    events = target._events = new EventHandlers();
	    target._eventsCount = 0;
	  } else {
	    // To avoid recursion in the case that type === "newListener"! Before
	    // adding it to the listeners, first emit "newListener".
	    if (events.newListener) {
	      target.emit('newListener', type,
	                  listener.listener ? listener.listener : listener);

	      // Re-assign `events` because a newListener handler could have caused the
	      // this._events to be assigned to a new object
	      events = target._events;
	    }
	    existing = events[type];
	  }

	  if (!existing) {
	    // Optimize the case of one listener. Don't need the extra array object.
	    existing = events[type] = listener;
	    ++target._eventsCount;
	  } else {
	    if (typeof existing === 'function') {
	      // Adding the second element, need to change to array.
	      existing = events[type] = prepend ? [listener, existing] :
	                                          [existing, listener];
	    } else {
	      // If we've already got an array, just append.
	      if (prepend) {
	        existing.unshift(listener);
	      } else {
	        existing.push(listener);
	      }
	    }

	    // Check for listener leak
	    if (!existing.warned) {
	      m = $getMaxListeners(target);
	      if (m && m > 0 && existing.length > m) {
	        existing.warned = true;
	        var w = new Error('Possible EventEmitter memory leak detected. ' +
	                            existing.length + ' ' + type + ' listeners added. ' +
	                            'Use emitter.setMaxListeners() to increase limit');
	        w.name = 'MaxListenersExceededWarning';
	        w.emitter = target;
	        w.type = type;
	        w.count = existing.length;
	        emitWarning(w);
	      }
	    }
	  }

	  return target;
	}
	function emitWarning(e) {
	  typeof console.warn === 'function' ? console.warn(e) : console.log(e);
	}
	EventEmitter.prototype.addListener = function addListener(type, listener) {
	  return _addListener(this, type, listener, false);
	};

	EventEmitter.prototype.on = EventEmitter.prototype.addListener;

	EventEmitter.prototype.prependListener =
	    function prependListener(type, listener) {
	      return _addListener(this, type, listener, true);
	    };

	function _onceWrap(target, type, listener) {
	  var fired = false;
	  function g() {
	    target.removeListener(type, g);
	    if (!fired) {
	      fired = true;
	      listener.apply(target, arguments);
	    }
	  }
	  g.listener = listener;
	  return g;
	}

	EventEmitter.prototype.once = function once(type, listener) {
	  if (typeof listener !== 'function')
	    throw new TypeError('"listener" argument must be a function');
	  this.on(type, _onceWrap(this, type, listener));
	  return this;
	};

	EventEmitter.prototype.prependOnceListener =
	    function prependOnceListener(type, listener) {
	      if (typeof listener !== 'function')
	        throw new TypeError('"listener" argument must be a function');
	      this.prependListener(type, _onceWrap(this, type, listener));
	      return this;
	    };

	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener =
	    function removeListener(type, listener) {
	      var list, events, position, i, originalListener;

	      if (typeof listener !== 'function')
	        throw new TypeError('"listener" argument must be a function');

	      events = this._events;
	      if (!events)
	        return this;

	      list = events[type];
	      if (!list)
	        return this;

	      if (list === listener || (list.listener && list.listener === listener)) {
	        if (--this._eventsCount === 0)
	          this._events = new EventHandlers();
	        else {
	          delete events[type];
	          if (events.removeListener)
	            this.emit('removeListener', type, list.listener || listener);
	        }
	      } else if (typeof list !== 'function') {
	        position = -1;

	        for (i = list.length; i-- > 0;) {
	          if (list[i] === listener ||
	              (list[i].listener && list[i].listener === listener)) {
	            originalListener = list[i].listener;
	            position = i;
	            break;
	          }
	        }

	        if (position < 0)
	          return this;

	        if (list.length === 1) {
	          list[0] = undefined;
	          if (--this._eventsCount === 0) {
	            this._events = new EventHandlers();
	            return this;
	          } else {
	            delete events[type];
	          }
	        } else {
	          spliceOne(list, position);
	        }

	        if (events.removeListener)
	          this.emit('removeListener', type, originalListener || listener);
	      }

	      return this;
	    };

	EventEmitter.prototype.removeAllListeners =
	    function removeAllListeners(type) {
	      var listeners, events;

	      events = this._events;
	      if (!events)
	        return this;

	      // not listening for removeListener, no need to emit
	      if (!events.removeListener) {
	        if (arguments.length === 0) {
	          this._events = new EventHandlers();
	          this._eventsCount = 0;
	        } else if (events[type]) {
	          if (--this._eventsCount === 0)
	            this._events = new EventHandlers();
	          else
	            delete events[type];
	        }
	        return this;
	      }

	      // emit removeListener for all listeners on all events
	      if (arguments.length === 0) {
	        var keys = Object.keys(events);
	        for (var i = 0, key; i < keys.length; ++i) {
	          key = keys[i];
	          if (key === 'removeListener') continue;
	          this.removeAllListeners(key);
	        }
	        this.removeAllListeners('removeListener');
	        this._events = new EventHandlers();
	        this._eventsCount = 0;
	        return this;
	      }

	      listeners = events[type];

	      if (typeof listeners === 'function') {
	        this.removeListener(type, listeners);
	      } else if (listeners) {
	        // LIFO order
	        do {
	          this.removeListener(type, listeners[listeners.length - 1]);
	        } while (listeners[0]);
	      }

	      return this;
	    };

	EventEmitter.prototype.listeners = function listeners(type) {
	  var evlistener;
	  var ret;
	  var events = this._events;

	  if (!events)
	    ret = [];
	  else {
	    evlistener = events[type];
	    if (!evlistener)
	      ret = [];
	    else if (typeof evlistener === 'function')
	      ret = [evlistener.listener || evlistener];
	    else
	      ret = unwrapListeners(evlistener);
	  }

	  return ret;
	};

	EventEmitter.listenerCount = function(emitter, type) {
	  if (typeof emitter.listenerCount === 'function') {
	    return emitter.listenerCount(type);
	  } else {
	    return listenerCount$1.call(emitter, type);
	  }
	};

	EventEmitter.prototype.listenerCount = listenerCount$1;
	function listenerCount$1(type) {
	  var events = this._events;

	  if (events) {
	    var evlistener = events[type];

	    if (typeof evlistener === 'function') {
	      return 1;
	    } else if (evlistener) {
	      return evlistener.length;
	    }
	  }

	  return 0;
	}

	EventEmitter.prototype.eventNames = function eventNames() {
	  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
	};

	// About 1.5x faster than the two-arg version of Array#splice().
	function spliceOne(list, index) {
	  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
	    list[i] = list[k];
	  list.pop();
	}

	function arrayClone(arr, i) {
	  var copy = new Array(i);
	  while (i--)
	    copy[i] = arr[i];
	  return copy;
	}

	function unwrapListeners(arr) {
	  var ret = new Array(arr.length);
	  for (var i = 0; i < ret.length; ++i) {
	    ret[i] = arr[i].listener || arr[i];
	  }
	  return ret;
	}

	var events = /*#__PURE__*/Object.freeze({
		__proto__: null,
		EventEmitter: EventEmitter,
		default: EventEmitter
	});

	var require$$0$2 = /*@__PURE__*/getAugmentedNamespace(events);

	var streamBrowser = require$$0$2.EventEmitter;

	var require$$3 = /*@__PURE__*/getAugmentedNamespace(util$1);

	var buffer_list;
	var hasRequiredBuffer_list;

	function requireBuffer_list () {
		if (hasRequiredBuffer_list) return buffer_list;
		hasRequiredBuffer_list = 1;

		function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

		function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

		function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

		function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

		var _require = require$$2$1,
		    Buffer = _require.Buffer;

		var _require2 = require$$3,
		    inspect = _require2.inspect;

		var custom = inspect && inspect.custom || 'inspect';

		function copyBuffer(src, target, offset) {
		  Buffer.prototype.copy.call(src, target, offset);
		}

		buffer_list =
		/*#__PURE__*/
		function () {
		  function BufferList() {
		    _classCallCheck(this, BufferList);

		    this.head = null;
		    this.tail = null;
		    this.length = 0;
		  }

		  _createClass(BufferList, [{
		    key: "push",
		    value: function push(v) {
		      var entry = {
		        data: v,
		        next: null
		      };
		      if (this.length > 0) this.tail.next = entry;else this.head = entry;
		      this.tail = entry;
		      ++this.length;
		    }
		  }, {
		    key: "unshift",
		    value: function unshift(v) {
		      var entry = {
		        data: v,
		        next: this.head
		      };
		      if (this.length === 0) this.tail = entry;
		      this.head = entry;
		      ++this.length;
		    }
		  }, {
		    key: "shift",
		    value: function shift() {
		      if (this.length === 0) return;
		      var ret = this.head.data;
		      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
		      --this.length;
		      return ret;
		    }
		  }, {
		    key: "clear",
		    value: function clear() {
		      this.head = this.tail = null;
		      this.length = 0;
		    }
		  }, {
		    key: "join",
		    value: function join(s) {
		      if (this.length === 0) return '';
		      var p = this.head;
		      var ret = '' + p.data;

		      while (p = p.next) {
		        ret += s + p.data;
		      }

		      return ret;
		    }
		  }, {
		    key: "concat",
		    value: function concat(n) {
		      if (this.length === 0) return Buffer.alloc(0);
		      var ret = Buffer.allocUnsafe(n >>> 0);
		      var p = this.head;
		      var i = 0;

		      while (p) {
		        copyBuffer(p.data, ret, i);
		        i += p.data.length;
		        p = p.next;
		      }

		      return ret;
		    } // Consumes a specified amount of bytes or characters from the buffered data.

		  }, {
		    key: "consume",
		    value: function consume(n, hasStrings) {
		      var ret;

		      if (n < this.head.data.length) {
		        // `slice` is the same for buffers and strings.
		        ret = this.head.data.slice(0, n);
		        this.head.data = this.head.data.slice(n);
		      } else if (n === this.head.data.length) {
		        // First chunk is a perfect match.
		        ret = this.shift();
		      } else {
		        // Result spans more than one buffer.
		        ret = hasStrings ? this._getString(n) : this._getBuffer(n);
		      }

		      return ret;
		    }
		  }, {
		    key: "first",
		    value: function first() {
		      return this.head.data;
		    } // Consumes a specified amount of characters from the buffered data.

		  }, {
		    key: "_getString",
		    value: function _getString(n) {
		      var p = this.head;
		      var c = 1;
		      var ret = p.data;
		      n -= ret.length;

		      while (p = p.next) {
		        var str = p.data;
		        var nb = n > str.length ? str.length : n;
		        if (nb === str.length) ret += str;else ret += str.slice(0, n);
		        n -= nb;

		        if (n === 0) {
		          if (nb === str.length) {
		            ++c;
		            if (p.next) this.head = p.next;else this.head = this.tail = null;
		          } else {
		            this.head = p;
		            p.data = str.slice(nb);
		          }

		          break;
		        }

		        ++c;
		      }

		      this.length -= c;
		      return ret;
		    } // Consumes a specified amount of bytes from the buffered data.

		  }, {
		    key: "_getBuffer",
		    value: function _getBuffer(n) {
		      var ret = Buffer.allocUnsafe(n);
		      var p = this.head;
		      var c = 1;
		      p.data.copy(ret);
		      n -= p.data.length;

		      while (p = p.next) {
		        var buf = p.data;
		        var nb = n > buf.length ? buf.length : n;
		        buf.copy(ret, ret.length - n, 0, nb);
		        n -= nb;

		        if (n === 0) {
		          if (nb === buf.length) {
		            ++c;
		            if (p.next) this.head = p.next;else this.head = this.tail = null;
		          } else {
		            this.head = p;
		            p.data = buf.slice(nb);
		          }

		          break;
		        }

		        ++c;
		      }

		      this.length -= c;
		      return ret;
		    } // Make sure the linked list only shows the minimal necessary information.

		  }, {
		    key: custom,
		    value: function value(_, options) {
		      return inspect(this, _objectSpread({}, options, {
		        // Only inspect one level.
		        depth: 0,
		        // It should not recurse.
		        customInspect: false
		      }));
		    }
		  }]);

		  return BufferList;
		}();
		return buffer_list;
	}

	function destroy(err, cb) {
	  var _this = this;

	  var readableDestroyed = this._readableState && this._readableState.destroyed;
	  var writableDestroyed = this._writableState && this._writableState.destroyed;

	  if (readableDestroyed || writableDestroyed) {
	    if (cb) {
	      cb(err);
	    } else if (err) {
	      if (!this._writableState) {
	        nextTick$1(emitErrorNT, this, err);
	      } else if (!this._writableState.errorEmitted) {
	        this._writableState.errorEmitted = true;
	        nextTick$1(emitErrorNT, this, err);
	      }
	    }

	    return this;
	  } // we set destroyed to true before firing error callbacks in order
	  // to make it re-entrance safe in case destroy() is called within callbacks


	  if (this._readableState) {
	    this._readableState.destroyed = true;
	  } // if this is a duplex stream mark the writable part as destroyed as well


	  if (this._writableState) {
	    this._writableState.destroyed = true;
	  }

	  this._destroy(err || null, function (err) {
	    if (!cb && err) {
	      if (!_this._writableState) {
	        nextTick$1(emitErrorAndCloseNT, _this, err);
	      } else if (!_this._writableState.errorEmitted) {
	        _this._writableState.errorEmitted = true;
	        nextTick$1(emitErrorAndCloseNT, _this, err);
	      } else {
	        nextTick$1(emitCloseNT, _this);
	      }
	    } else if (cb) {
	      nextTick$1(emitCloseNT, _this);
	      cb(err);
	    } else {
	      nextTick$1(emitCloseNT, _this);
	    }
	  });

	  return this;
	}

	function emitErrorAndCloseNT(self, err) {
	  emitErrorNT(self, err);
	  emitCloseNT(self);
	}

	function emitCloseNT(self) {
	  if (self._writableState && !self._writableState.emitClose) return;
	  if (self._readableState && !self._readableState.emitClose) return;
	  self.emit('close');
	}

	function undestroy() {
	  if (this._readableState) {
	    this._readableState.destroyed = false;
	    this._readableState.reading = false;
	    this._readableState.ended = false;
	    this._readableState.endEmitted = false;
	  }

	  if (this._writableState) {
	    this._writableState.destroyed = false;
	    this._writableState.ended = false;
	    this._writableState.ending = false;
	    this._writableState.finalCalled = false;
	    this._writableState.prefinished = false;
	    this._writableState.finished = false;
	    this._writableState.errorEmitted = false;
	  }
	}

	function emitErrorNT(self, err) {
	  self.emit('error', err);
	}

	function errorOrDestroy(stream, err) {
	  // We have tests that rely on errors being emitted
	  // in the same tick, so changing this is semver major.
	  // For now when you opt-in to autoDestroy we allow
	  // the error to be emitted nextTick. In a future
	  // semver major update we should change the default to this.
	  var rState = stream._readableState;
	  var wState = stream._writableState;
	  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
	}

	var destroy_1 = {
	  destroy: destroy,
	  undestroy: undestroy,
	  errorOrDestroy: errorOrDestroy
	};

	var errorsBrowser = {};

	function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

	var codes = {};

	function createErrorType(code, message, Base) {
	  if (!Base) {
	    Base = Error;
	  }

	  function getMessage(arg1, arg2, arg3) {
	    if (typeof message === 'string') {
	      return message;
	    } else {
	      return message(arg1, arg2, arg3);
	    }
	  }

	  var NodeError =
	  /*#__PURE__*/
	  function (_Base) {
	    _inheritsLoose(NodeError, _Base);

	    function NodeError(arg1, arg2, arg3) {
	      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
	    }

	    return NodeError;
	  }(Base);

	  NodeError.prototype.name = Base.name;
	  NodeError.prototype.code = code;
	  codes[code] = NodeError;
	} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


	function oneOf(expected, thing) {
	  if (Array.isArray(expected)) {
	    var len = expected.length;
	    expected = expected.map(function (i) {
	      return String(i);
	    });

	    if (len > 2) {
	      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
	    } else if (len === 2) {
	      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
	    } else {
	      return "of ".concat(thing, " ").concat(expected[0]);
	    }
	  } else {
	    return "of ".concat(thing, " ").concat(String(expected));
	  }
	} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


	function startsWith(str, search, pos) {
	  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
	} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


	function endsWith(str, search, this_len) {
	  if (this_len === undefined || this_len > str.length) {
	    this_len = str.length;
	  }

	  return str.substring(this_len - search.length, this_len) === search;
	} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


	function includes(str, search, start) {
	  if (typeof start !== 'number') {
	    start = 0;
	  }

	  if (start + search.length > str.length) {
	    return false;
	  } else {
	    return str.indexOf(search, start) !== -1;
	  }
	}

	createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
	  return 'The value "' + value + '" is invalid for option "' + name + '"';
	}, TypeError);
	createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
	  // determiner: 'must be' or 'must not be'
	  var determiner;

	  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
	    determiner = 'must not be';
	    expected = expected.replace(/^not /, '');
	  } else {
	    determiner = 'must be';
	  }

	  var msg;

	  if (endsWith(name, ' argument')) {
	    // For cases like 'first argument'
	    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
	  } else {
	    var type = includes(name, '.') ? 'property' : 'argument';
	    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
	  }

	  msg += ". Received type ".concat(typeof actual);
	  return msg;
	}, TypeError);
	createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
	createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
	  return 'The ' + name + ' method is not implemented';
	});
	createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
	createErrorType('ERR_STREAM_DESTROYED', function (name) {
	  return 'Cannot call ' + name + ' after a stream was destroyed';
	});
	createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
	createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
	createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
	createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
	createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
	  return 'Unknown encoding: ' + arg;
	}, TypeError);
	createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
	errorsBrowser.codes = codes;

	var ERR_INVALID_OPT_VALUE = errorsBrowser.codes.ERR_INVALID_OPT_VALUE;

	function highWaterMarkFrom(options, isDuplex, duplexKey) {
	  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
	}

	function getHighWaterMark(state, options, duplexKey, isDuplex) {
	  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);

	  if (hwm != null) {
	    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
	      var name = isDuplex ? duplexKey : 'highWaterMark';
	      throw new ERR_INVALID_OPT_VALUE(name, hwm);
	    }

	    return Math.floor(hwm);
	  } // Default value


	  return state.objectMode ? 16 : 16 * 1024;
	}

	var state = {
	  getHighWaterMark: getHighWaterMark
	};

	var browser$1;
	var hasRequiredBrowser;

	function requireBrowser () {
		if (hasRequiredBrowser) return browser$1;
		hasRequiredBrowser = 1;
		/**
		 * Module exports.
		 */

		browser$1 = deprecate;

		/**
		 * Mark that a method should not be used.
		 * Returns a modified function which warns once by default.
		 *
		 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
		 *
		 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
		 * will throw an Error when invoked.
		 *
		 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
		 * will invoke `console.trace()` instead of `console.error()`.
		 *
		 * @param {Function} fn - the function to deprecate
		 * @param {String} msg - the string to print to the console when `fn` is invoked
		 * @returns {Function} a new "deprecated" version of `fn`
		 * @api public
		 */

		function deprecate (fn, msg) {
		  if (config('noDeprecation')) {
		    return fn;
		  }

		  var warned = false;
		  function deprecated() {
		    if (!warned) {
		      if (config('throwDeprecation')) {
		        throw new Error(msg);
		      } else if (config('traceDeprecation')) {
		        console.trace(msg);
		      } else {
		        console.warn(msg);
		      }
		      warned = true;
		    }
		    return fn.apply(this, arguments);
		  }

		  return deprecated;
		}

		/**
		 * Checks `localStorage` for boolean values for the given `name`.
		 *
		 * @param {String} name
		 * @returns {Boolean}
		 * @api private
		 */

		function config (name) {
		  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
		  try {
		    if (!commonjsGlobal.localStorage) return false;
		  } catch (_) {
		    return false;
		  }
		  var val = commonjsGlobal.localStorage[name];
		  if (null == val) return false;
		  return String(val).toLowerCase() === 'true';
		}
		return browser$1;
	}

	var _stream_writable;
	var hasRequired_stream_writable;

	function require_stream_writable () {
		if (hasRequired_stream_writable) return _stream_writable;
		hasRequired_stream_writable = 1;

		_stream_writable = Writable;
		// there will be only 2 of these for each stream


		function CorkedRequest(state) {
		  var _this = this;

		  this.next = null;
		  this.entry = null;

		  this.finish = function () {
		    onCorkedFinish(_this, state);
		  };
		}
		/* </replacement> */

		/*<replacement>*/


		var Duplex;
		/*</replacement>*/

		Writable.WritableState = WritableState;
		/*<replacement>*/

		var internalUtil = {
		  deprecate: requireBrowser()
		};
		/*</replacement>*/

		/*<replacement>*/

		var Stream = streamBrowser;
		/*</replacement>*/


		var Buffer = require$$2$1.Buffer;

		var OurUint8Array = commonjsGlobal.Uint8Array || function () {};

		function _uint8ArrayToBuffer(chunk) {
		  return Buffer.from(chunk);
		}

		function _isUint8Array(obj) {
		  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
		}

		var destroyImpl = destroy_1;

		var _require = state,
		    getHighWaterMark = _require.getHighWaterMark;

		var _require$codes = errorsBrowser.codes,
		    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
		    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
		    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
		    ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
		    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
		    ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
		    ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
		    ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;

		var errorOrDestroy = destroyImpl.errorOrDestroy;

		inherits_browserExports(Writable, Stream);

		function nop() {}

		function WritableState(options, stream, isDuplex) {
		  Duplex = Duplex || require_stream_duplex();
		  options = options || {}; // Duplex streams are both readable and writable, but share
		  // the same options object.
		  // However, some cases require setting options to different
		  // values for the readable and the writable sides of the duplex stream,
		  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.

		  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
		  // contains buffers or objects.

		  this.objectMode = !!options.objectMode;
		  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
		  // Note: 0 is a valid value, means that we always return false if
		  // the entire buffer is not flushed immediately on write()

		  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called

		  this.finalCalled = false; // drain event flag.

		  this.needDrain = false; // at the start of calling end()

		  this.ending = false; // when end() has been called, and returned

		  this.ended = false; // when 'finish' is emitted

		  this.finished = false; // has it been destroyed

		  this.destroyed = false; // should we decode strings into buffers before passing to _write?
		  // this is here so that some node-core streams can optimize string
		  // handling at a lower level.

		  var noDecode = options.decodeStrings === false;
		  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
		  // encoding is 'binary' so we have to make this configurable.
		  // Everything else in the universe uses 'utf8', though.

		  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
		  // of how much we're waiting to get pushed to some underlying
		  // socket or file.

		  this.length = 0; // a flag to see when we're in the middle of a write.

		  this.writing = false; // when true all writes will be buffered until .uncork() call

		  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
		  // or on a later tick.  We set this to true at first, because any
		  // actions that shouldn't happen until "later" should generally also
		  // not happen before the first write call.

		  this.sync = true; // a flag to know if we're processing previously buffered items, which
		  // may call the _write() callback in the same tick, so that we don't
		  // end up in an overlapped onwrite situation.

		  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

		  this.onwrite = function (er) {
		    onwrite(stream, er);
		  }; // the callback that the user supplies to write(chunk,encoding,cb)


		  this.writecb = null; // the amount that is being written when _write is called.

		  this.writelen = 0;
		  this.bufferedRequest = null;
		  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
		  // this must be 0 before 'finish' can be emitted

		  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
		  // This is relevant for synchronous Transform streams

		  this.prefinished = false; // True if the error was already emitted and should not be thrown again

		  this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.

		  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')

		  this.autoDestroy = !!options.autoDestroy; // count buffered requests

		  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
		  // one allocated and free to use, and we maintain at most two

		  this.corkedRequestsFree = new CorkedRequest(this);
		}

		WritableState.prototype.getBuffer = function getBuffer() {
		  var current = this.bufferedRequest;
		  var out = [];

		  while (current) {
		    out.push(current);
		    current = current.next;
		  }

		  return out;
		};

		(function () {
		  try {
		    Object.defineProperty(WritableState.prototype, 'buffer', {
		      get: internalUtil.deprecate(function writableStateBufferGetter() {
		        return this.getBuffer();
		      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
		    });
		  } catch (_) {}
		})(); // Test _writableState for inheritance to account for Duplex streams,
		// whose prototype chain only points to Readable.


		var realHasInstance;

		if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
		  realHasInstance = Function.prototype[Symbol.hasInstance];
		  Object.defineProperty(Writable, Symbol.hasInstance, {
		    value: function value(object) {
		      if (realHasInstance.call(this, object)) return true;
		      if (this !== Writable) return false;
		      return object && object._writableState instanceof WritableState;
		    }
		  });
		} else {
		  realHasInstance = function realHasInstance(object) {
		    return object instanceof this;
		  };
		}

		function Writable(options) {
		  Duplex = Duplex || require_stream_duplex(); // Writable ctor is applied to Duplexes, too.
		  // `realHasInstance` is necessary because using plain `instanceof`
		  // would return false, as no `_writableState` property is attached.
		  // Trying to use the custom `instanceof` for Writable here will also break the
		  // Node.js LazyTransform implementation, which has a non-trivial getter for
		  // `_writableState` that would lead to infinite recursion.
		  // Checking for a Stream.Duplex instance is faster here instead of inside
		  // the WritableState constructor, at least with V8 6.5

		  var isDuplex = this instanceof Duplex;
		  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
		  this._writableState = new WritableState(options, this, isDuplex); // legacy.

		  this.writable = true;

		  if (options) {
		    if (typeof options.write === 'function') this._write = options.write;
		    if (typeof options.writev === 'function') this._writev = options.writev;
		    if (typeof options.destroy === 'function') this._destroy = options.destroy;
		    if (typeof options.final === 'function') this._final = options.final;
		  }

		  Stream.call(this);
		} // Otherwise people can pipe Writable streams, which is just wrong.


		Writable.prototype.pipe = function () {
		  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
		};

		function writeAfterEnd(stream, cb) {
		  var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb

		  errorOrDestroy(stream, er);
		  nextTick$1(cb, er);
		} // Checks that a user-supplied chunk is valid, especially for the particular
		// mode the stream is in. Currently this means that `null` is never accepted
		// and undefined/non-string values are only allowed in object mode.


		function validChunk(stream, state, chunk, cb) {
		  var er;

		  if (chunk === null) {
		    er = new ERR_STREAM_NULL_VALUES();
		  } else if (typeof chunk !== 'string' && !state.objectMode) {
		    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
		  }

		  if (er) {
		    errorOrDestroy(stream, er);
		    nextTick$1(cb, er);
		    return false;
		  }

		  return true;
		}

		Writable.prototype.write = function (chunk, encoding, cb) {
		  var state = this._writableState;
		  var ret = false;

		  var isBuf = !state.objectMode && _isUint8Array(chunk);

		  if (isBuf && !Buffer.isBuffer(chunk)) {
		    chunk = _uint8ArrayToBuffer(chunk);
		  }

		  if (typeof encoding === 'function') {
		    cb = encoding;
		    encoding = null;
		  }

		  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
		  if (typeof cb !== 'function') cb = nop;
		  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
		    state.pendingcb++;
		    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
		  }
		  return ret;
		};

		Writable.prototype.cork = function () {
		  this._writableState.corked++;
		};

		Writable.prototype.uncork = function () {
		  var state = this._writableState;

		  if (state.corked) {
		    state.corked--;
		    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
		  }
		};

		Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
		  // node::ParseEncoding() requires lower case.
		  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
		  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
		  this._writableState.defaultEncoding = encoding;
		  return this;
		};

		Object.defineProperty(Writable.prototype, 'writableBuffer', {
		  // making it explicit this property is not enumerable
		  // because otherwise some prototype manipulation in
		  // userland will fail
		  enumerable: false,
		  get: function get() {
		    return this._writableState && this._writableState.getBuffer();
		  }
		});

		function decodeChunk(state, chunk, encoding) {
		  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
		    chunk = Buffer.from(chunk, encoding);
		  }

		  return chunk;
		}

		Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
		  // making it explicit this property is not enumerable
		  // because otherwise some prototype manipulation in
		  // userland will fail
		  enumerable: false,
		  get: function get() {
		    return this._writableState.highWaterMark;
		  }
		}); // if we're already writing something, then just put this
		// in the queue, and wait our turn.  Otherwise, call _write
		// If we return false, then we need a drain event, so set that flag.

		function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
		  if (!isBuf) {
		    var newChunk = decodeChunk(state, chunk, encoding);

		    if (chunk !== newChunk) {
		      isBuf = true;
		      encoding = 'buffer';
		      chunk = newChunk;
		    }
		  }

		  var len = state.objectMode ? 1 : chunk.length;
		  state.length += len;
		  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

		  if (!ret) state.needDrain = true;

		  if (state.writing || state.corked) {
		    var last = state.lastBufferedRequest;
		    state.lastBufferedRequest = {
		      chunk: chunk,
		      encoding: encoding,
		      isBuf: isBuf,
		      callback: cb,
		      next: null
		    };

		    if (last) {
		      last.next = state.lastBufferedRequest;
		    } else {
		      state.bufferedRequest = state.lastBufferedRequest;
		    }

		    state.bufferedRequestCount += 1;
		  } else {
		    doWrite(stream, state, false, len, chunk, encoding, cb);
		  }

		  return ret;
		}

		function doWrite(stream, state, writev, len, chunk, encoding, cb) {
		  state.writelen = len;
		  state.writecb = cb;
		  state.writing = true;
		  state.sync = true;
		  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
		  state.sync = false;
		}

		function onwriteError(stream, state, sync, er, cb) {
		  --state.pendingcb;

		  if (sync) {
		    // defer the callback if we are being called synchronously
		    // to avoid piling up things on the stack
		    nextTick$1(cb, er); // this can emit finish, and it will always happen
		    // after error

		    nextTick$1(finishMaybe, stream, state);
		    stream._writableState.errorEmitted = true;
		    errorOrDestroy(stream, er);
		  } else {
		    // the caller expect this to happen before if
		    // it is async
		    cb(er);
		    stream._writableState.errorEmitted = true;
		    errorOrDestroy(stream, er); // this can emit finish, but finish must
		    // always follow error

		    finishMaybe(stream, state);
		  }
		}

		function onwriteStateUpdate(state) {
		  state.writing = false;
		  state.writecb = null;
		  state.length -= state.writelen;
		  state.writelen = 0;
		}

		function onwrite(stream, er) {
		  var state = stream._writableState;
		  var sync = state.sync;
		  var cb = state.writecb;
		  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
		  onwriteStateUpdate(state);
		  if (er) onwriteError(stream, state, sync, er, cb);else {
		    // Check if we're actually ready to finish, but don't emit yet
		    var finished = needFinish(state) || stream.destroyed;

		    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
		      clearBuffer(stream, state);
		    }

		    if (sync) {
		      nextTick$1(afterWrite, stream, state, finished, cb);
		    } else {
		      afterWrite(stream, state, finished, cb);
		    }
		  }
		}

		function afterWrite(stream, state, finished, cb) {
		  if (!finished) onwriteDrain(stream, state);
		  state.pendingcb--;
		  cb();
		  finishMaybe(stream, state);
		} // Must force callback to be called on nextTick, so that we don't
		// emit 'drain' before the write() consumer gets the 'false' return
		// value, and has a chance to attach a 'drain' listener.


		function onwriteDrain(stream, state) {
		  if (state.length === 0 && state.needDrain) {
		    state.needDrain = false;
		    stream.emit('drain');
		  }
		} // if there's something in the buffer waiting, then process it


		function clearBuffer(stream, state) {
		  state.bufferProcessing = true;
		  var entry = state.bufferedRequest;

		  if (stream._writev && entry && entry.next) {
		    // Fast case, write everything using _writev()
		    var l = state.bufferedRequestCount;
		    var buffer = new Array(l);
		    var holder = state.corkedRequestsFree;
		    holder.entry = entry;
		    var count = 0;
		    var allBuffers = true;

		    while (entry) {
		      buffer[count] = entry;
		      if (!entry.isBuf) allBuffers = false;
		      entry = entry.next;
		      count += 1;
		    }

		    buffer.allBuffers = allBuffers;
		    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
		    // as the hot path ends with doWrite

		    state.pendingcb++;
		    state.lastBufferedRequest = null;

		    if (holder.next) {
		      state.corkedRequestsFree = holder.next;
		      holder.next = null;
		    } else {
		      state.corkedRequestsFree = new CorkedRequest(state);
		    }

		    state.bufferedRequestCount = 0;
		  } else {
		    // Slow case, write chunks one-by-one
		    while (entry) {
		      var chunk = entry.chunk;
		      var encoding = entry.encoding;
		      var cb = entry.callback;
		      var len = state.objectMode ? 1 : chunk.length;
		      doWrite(stream, state, false, len, chunk, encoding, cb);
		      entry = entry.next;
		      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
		      // it means that we need to wait until it does.
		      // also, that means that the chunk and cb are currently
		      // being processed, so move the buffer counter past them.

		      if (state.writing) {
		        break;
		      }
		    }

		    if (entry === null) state.lastBufferedRequest = null;
		  }

		  state.bufferedRequest = entry;
		  state.bufferProcessing = false;
		}

		Writable.prototype._write = function (chunk, encoding, cb) {
		  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
		};

		Writable.prototype._writev = null;

		Writable.prototype.end = function (chunk, encoding, cb) {
		  var state = this._writableState;

		  if (typeof chunk === 'function') {
		    cb = chunk;
		    chunk = null;
		    encoding = null;
		  } else if (typeof encoding === 'function') {
		    cb = encoding;
		    encoding = null;
		  }

		  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

		  if (state.corked) {
		    state.corked = 1;
		    this.uncork();
		  } // ignore unnecessary end() calls.


		  if (!state.ending) endWritable(this, state, cb);
		  return this;
		};

		Object.defineProperty(Writable.prototype, 'writableLength', {
		  // making it explicit this property is not enumerable
		  // because otherwise some prototype manipulation in
		  // userland will fail
		  enumerable: false,
		  get: function get() {
		    return this._writableState.length;
		  }
		});

		function needFinish(state) {
		  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
		}

		function callFinal(stream, state) {
		  stream._final(function (err) {
		    state.pendingcb--;

		    if (err) {
		      errorOrDestroy(stream, err);
		    }

		    state.prefinished = true;
		    stream.emit('prefinish');
		    finishMaybe(stream, state);
		  });
		}

		function prefinish(stream, state) {
		  if (!state.prefinished && !state.finalCalled) {
		    if (typeof stream._final === 'function' && !state.destroyed) {
		      state.pendingcb++;
		      state.finalCalled = true;
		      nextTick$1(callFinal, stream, state);
		    } else {
		      state.prefinished = true;
		      stream.emit('prefinish');
		    }
		  }
		}

		function finishMaybe(stream, state) {
		  var need = needFinish(state);

		  if (need) {
		    prefinish(stream, state);

		    if (state.pendingcb === 0) {
		      state.finished = true;
		      stream.emit('finish');

		      if (state.autoDestroy) {
		        // In case of duplex streams we need a way to detect
		        // if the readable side is ready for autoDestroy as well
		        var rState = stream._readableState;

		        if (!rState || rState.autoDestroy && rState.endEmitted) {
		          stream.destroy();
		        }
		      }
		    }
		  }

		  return need;
		}

		function endWritable(stream, state, cb) {
		  state.ending = true;
		  finishMaybe(stream, state);

		  if (cb) {
		    if (state.finished) nextTick$1(cb);else stream.once('finish', cb);
		  }

		  state.ended = true;
		  stream.writable = false;
		}

		function onCorkedFinish(corkReq, state, err) {
		  var entry = corkReq.entry;
		  corkReq.entry = null;

		  while (entry) {
		    var cb = entry.callback;
		    state.pendingcb--;
		    cb(err);
		    entry = entry.next;
		  } // reuse the free corkReq.


		  state.corkedRequestsFree.next = corkReq;
		}

		Object.defineProperty(Writable.prototype, 'destroyed', {
		  // making it explicit this property is not enumerable
		  // because otherwise some prototype manipulation in
		  // userland will fail
		  enumerable: false,
		  get: function get() {
		    if (this._writableState === undefined) {
		      return false;
		    }

		    return this._writableState.destroyed;
		  },
		  set: function set(value) {
		    // we ignore the value if the stream
		    // has not been initialized yet
		    if (!this._writableState) {
		      return;
		    } // backward compatibility, the user is explicitly
		    // managing destroyed


		    this._writableState.destroyed = value;
		  }
		});
		Writable.prototype.destroy = destroyImpl.destroy;
		Writable.prototype._undestroy = destroyImpl.undestroy;

		Writable.prototype._destroy = function (err, cb) {
		  cb(err);
		};
		return _stream_writable;
	}

	var _stream_duplex;
	var hasRequired_stream_duplex;

	function require_stream_duplex () {
		if (hasRequired_stream_duplex) return _stream_duplex;
		hasRequired_stream_duplex = 1;
		/*<replacement>*/

		var objectKeys = Object.keys || function (obj) {
		  var keys = [];

		  for (var key in obj) {
		    keys.push(key);
		  }

		  return keys;
		};
		/*</replacement>*/


		_stream_duplex = Duplex;

		var Readable = require_stream_readable();

		var Writable = require_stream_writable();

		inherits_browserExports(Duplex, Readable);

		{
		  // Allow the keys array to be GC'ed.
		  var keys = objectKeys(Writable.prototype);

		  for (var v = 0; v < keys.length; v++) {
		    var method = keys[v];
		    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
		  }
		}

		function Duplex(options) {
		  if (!(this instanceof Duplex)) return new Duplex(options);
		  Readable.call(this, options);
		  Writable.call(this, options);
		  this.allowHalfOpen = true;

		  if (options) {
		    if (options.readable === false) this.readable = false;
		    if (options.writable === false) this.writable = false;

		    if (options.allowHalfOpen === false) {
		      this.allowHalfOpen = false;
		      this.once('end', onend);
		    }
		  }
		}

		Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
		  // making it explicit this property is not enumerable
		  // because otherwise some prototype manipulation in
		  // userland will fail
		  enumerable: false,
		  get: function get() {
		    return this._writableState.highWaterMark;
		  }
		});
		Object.defineProperty(Duplex.prototype, 'writableBuffer', {
		  // making it explicit this property is not enumerable
		  // because otherwise some prototype manipulation in
		  // userland will fail
		  enumerable: false,
		  get: function get() {
		    return this._writableState && this._writableState.getBuffer();
		  }
		});
		Object.defineProperty(Duplex.prototype, 'writableLength', {
		  // making it explicit this property is not enumerable
		  // because otherwise some prototype manipulation in
		  // userland will fail
		  enumerable: false,
		  get: function get() {
		    return this._writableState.length;
		  }
		}); // the no-half-open enforcer

		function onend() {
		  // If the writable side ended, then we're ok.
		  if (this._writableState.ended) return; // no more data can be written.
		  // But allow more writes to happen in this tick.

		  nextTick$1(onEndNT, this);
		}

		function onEndNT(self) {
		  self.end();
		}

		Object.defineProperty(Duplex.prototype, 'destroyed', {
		  // making it explicit this property is not enumerable
		  // because otherwise some prototype manipulation in
		  // userland will fail
		  enumerable: false,
		  get: function get() {
		    if (this._readableState === undefined || this._writableState === undefined) {
		      return false;
		    }

		    return this._readableState.destroyed && this._writableState.destroyed;
		  },
		  set: function set(value) {
		    // we ignore the value if the stream
		    // has not been initialized yet
		    if (this._readableState === undefined || this._writableState === undefined) {
		      return;
		    } // backward compatibility, the user is explicitly
		    // managing destroyed


		    this._readableState.destroyed = value;
		    this._writableState.destroyed = value;
		  }
		});
		return _stream_duplex;
	}

	var string_decoder = {};

	var hasRequiredString_decoder;

	function requireString_decoder () {
		if (hasRequiredString_decoder) return string_decoder;
		hasRequiredString_decoder = 1;

		/*<replacement>*/

		var Buffer = safeBufferExports.Buffer;
		/*</replacement>*/

		var isEncoding = Buffer.isEncoding || function (encoding) {
		  encoding = '' + encoding;
		  switch (encoding && encoding.toLowerCase()) {
		    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
		      return true;
		    default:
		      return false;
		  }
		};

		function _normalizeEncoding(enc) {
		  if (!enc) return 'utf8';
		  var retried;
		  while (true) {
		    switch (enc) {
		      case 'utf8':
		      case 'utf-8':
		        return 'utf8';
		      case 'ucs2':
		      case 'ucs-2':
		      case 'utf16le':
		      case 'utf-16le':
		        return 'utf16le';
		      case 'latin1':
		      case 'binary':
		        return 'latin1';
		      case 'base64':
		      case 'ascii':
		      case 'hex':
		        return enc;
		      default:
		        if (retried) return; // undefined
		        enc = ('' + enc).toLowerCase();
		        retried = true;
		    }
		  }
		}
		// Do not cache `Buffer.isEncoding` when checking encoding names as some
		// modules monkey-patch it to support additional encodings
		function normalizeEncoding(enc) {
		  var nenc = _normalizeEncoding(enc);
		  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
		  return nenc || enc;
		}

		// StringDecoder provides an interface for efficiently splitting a series of
		// buffers into a series of JS strings without breaking apart multi-byte
		// characters.
		string_decoder.StringDecoder = StringDecoder;
		function StringDecoder(encoding) {
		  this.encoding = normalizeEncoding(encoding);
		  var nb;
		  switch (this.encoding) {
		    case 'utf16le':
		      this.text = utf16Text;
		      this.end = utf16End;
		      nb = 4;
		      break;
		    case 'utf8':
		      this.fillLast = utf8FillLast;
		      nb = 4;
		      break;
		    case 'base64':
		      this.text = base64Text;
		      this.end = base64End;
		      nb = 3;
		      break;
		    default:
		      this.write = simpleWrite;
		      this.end = simpleEnd;
		      return;
		  }
		  this.lastNeed = 0;
		  this.lastTotal = 0;
		  this.lastChar = Buffer.allocUnsafe(nb);
		}

		StringDecoder.prototype.write = function (buf) {
		  if (buf.length === 0) return '';
		  var r;
		  var i;
		  if (this.lastNeed) {
		    r = this.fillLast(buf);
		    if (r === undefined) return '';
		    i = this.lastNeed;
		    this.lastNeed = 0;
		  } else {
		    i = 0;
		  }
		  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
		  return r || '';
		};

		StringDecoder.prototype.end = utf8End;

		// Returns only complete characters in a Buffer
		StringDecoder.prototype.text = utf8Text;

		// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
		StringDecoder.prototype.fillLast = function (buf) {
		  if (this.lastNeed <= buf.length) {
		    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
		    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
		  }
		  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
		  this.lastNeed -= buf.length;
		};

		// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
		// continuation byte. If an invalid byte is detected, -2 is returned.
		function utf8CheckByte(byte) {
		  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
		  return byte >> 6 === 0x02 ? -1 : -2;
		}

		// Checks at most 3 bytes at the end of a Buffer in order to detect an
		// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
		// needed to complete the UTF-8 character (if applicable) are returned.
		function utf8CheckIncomplete(self, buf, i) {
		  var j = buf.length - 1;
		  if (j < i) return 0;
		  var nb = utf8CheckByte(buf[j]);
		  if (nb >= 0) {
		    if (nb > 0) self.lastNeed = nb - 1;
		    return nb;
		  }
		  if (--j < i || nb === -2) return 0;
		  nb = utf8CheckByte(buf[j]);
		  if (nb >= 0) {
		    if (nb > 0) self.lastNeed = nb - 2;
		    return nb;
		  }
		  if (--j < i || nb === -2) return 0;
		  nb = utf8CheckByte(buf[j]);
		  if (nb >= 0) {
		    if (nb > 0) {
		      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
		    }
		    return nb;
		  }
		  return 0;
		}

		// Validates as many continuation bytes for a multi-byte UTF-8 character as
		// needed or are available. If we see a non-continuation byte where we expect
		// one, we "replace" the validated continuation bytes we've seen so far with
		// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
		// behavior. The continuation byte check is included three times in the case
		// where all of the continuation bytes for a character exist in the same buffer.
		// It is also done this way as a slight performance increase instead of using a
		// loop.
		function utf8CheckExtraBytes(self, buf, p) {
		  if ((buf[0] & 0xC0) !== 0x80) {
		    self.lastNeed = 0;
		    return '\ufffd';
		  }
		  if (self.lastNeed > 1 && buf.length > 1) {
		    if ((buf[1] & 0xC0) !== 0x80) {
		      self.lastNeed = 1;
		      return '\ufffd';
		    }
		    if (self.lastNeed > 2 && buf.length > 2) {
		      if ((buf[2] & 0xC0) !== 0x80) {
		        self.lastNeed = 2;
		        return '\ufffd';
		      }
		    }
		  }
		}

		// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
		function utf8FillLast(buf) {
		  var p = this.lastTotal - this.lastNeed;
		  var r = utf8CheckExtraBytes(this, buf);
		  if (r !== undefined) return r;
		  if (this.lastNeed <= buf.length) {
		    buf.copy(this.lastChar, p, 0, this.lastNeed);
		    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
		  }
		  buf.copy(this.lastChar, p, 0, buf.length);
		  this.lastNeed -= buf.length;
		}

		// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
		// partial character, the character's bytes are buffered until the required
		// number of bytes are available.
		function utf8Text(buf, i) {
		  var total = utf8CheckIncomplete(this, buf, i);
		  if (!this.lastNeed) return buf.toString('utf8', i);
		  this.lastTotal = total;
		  var end = buf.length - (total - this.lastNeed);
		  buf.copy(this.lastChar, 0, end);
		  return buf.toString('utf8', i, end);
		}

		// For UTF-8, a replacement character is added when ending on a partial
		// character.
		function utf8End(buf) {
		  var r = buf && buf.length ? this.write(buf) : '';
		  if (this.lastNeed) return r + '\ufffd';
		  return r;
		}

		// UTF-16LE typically needs two bytes per character, but even if we have an even
		// number of bytes available, we need to check if we end on a leading/high
		// surrogate. In that case, we need to wait for the next two bytes in order to
		// decode the last character properly.
		function utf16Text(buf, i) {
		  if ((buf.length - i) % 2 === 0) {
		    var r = buf.toString('utf16le', i);
		    if (r) {
		      var c = r.charCodeAt(r.length - 1);
		      if (c >= 0xD800 && c <= 0xDBFF) {
		        this.lastNeed = 2;
		        this.lastTotal = 4;
		        this.lastChar[0] = buf[buf.length - 2];
		        this.lastChar[1] = buf[buf.length - 1];
		        return r.slice(0, -1);
		      }
		    }
		    return r;
		  }
		  this.lastNeed = 1;
		  this.lastTotal = 2;
		  this.lastChar[0] = buf[buf.length - 1];
		  return buf.toString('utf16le', i, buf.length - 1);
		}

		// For UTF-16LE we do not explicitly append special replacement characters if we
		// end on a partial character, we simply let v8 handle that.
		function utf16End(buf) {
		  var r = buf && buf.length ? this.write(buf) : '';
		  if (this.lastNeed) {
		    var end = this.lastTotal - this.lastNeed;
		    return r + this.lastChar.toString('utf16le', 0, end);
		  }
		  return r;
		}

		function base64Text(buf, i) {
		  var n = (buf.length - i) % 3;
		  if (n === 0) return buf.toString('base64', i);
		  this.lastNeed = 3 - n;
		  this.lastTotal = 3;
		  if (n === 1) {
		    this.lastChar[0] = buf[buf.length - 1];
		  } else {
		    this.lastChar[0] = buf[buf.length - 2];
		    this.lastChar[1] = buf[buf.length - 1];
		  }
		  return buf.toString('base64', i, buf.length - n);
		}

		function base64End(buf) {
		  var r = buf && buf.length ? this.write(buf) : '';
		  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
		  return r;
		}

		// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
		function simpleWrite(buf) {
		  return buf.toString(this.encoding);
		}

		function simpleEnd(buf) {
		  return buf && buf.length ? this.write(buf) : '';
		}
		return string_decoder;
	}

	var ERR_STREAM_PREMATURE_CLOSE = errorsBrowser.codes.ERR_STREAM_PREMATURE_CLOSE;

	function once$1(callback) {
	  var called = false;
	  return function () {
	    if (called) return;
	    called = true;

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    callback.apply(this, args);
	  };
	}

	function noop$1() {}

	function isRequest$1(stream) {
	  return stream.setHeader && typeof stream.abort === 'function';
	}

	function eos$1(stream, opts, callback) {
	  if (typeof opts === 'function') return eos$1(stream, null, opts);
	  if (!opts) opts = {};
	  callback = once$1(callback || noop$1);
	  var readable = opts.readable || opts.readable !== false && stream.readable;
	  var writable = opts.writable || opts.writable !== false && stream.writable;

	  var onlegacyfinish = function onlegacyfinish() {
	    if (!stream.writable) onfinish();
	  };

	  var writableEnded = stream._writableState && stream._writableState.finished;

	  var onfinish = function onfinish() {
	    writable = false;
	    writableEnded = true;
	    if (!readable) callback.call(stream);
	  };

	  var readableEnded = stream._readableState && stream._readableState.endEmitted;

	  var onend = function onend() {
	    readable = false;
	    readableEnded = true;
	    if (!writable) callback.call(stream);
	  };

	  var onerror = function onerror(err) {
	    callback.call(stream, err);
	  };

	  var onclose = function onclose() {
	    var err;

	    if (readable && !readableEnded) {
	      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
	      return callback.call(stream, err);
	    }

	    if (writable && !writableEnded) {
	      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
	      return callback.call(stream, err);
	    }
	  };

	  var onrequest = function onrequest() {
	    stream.req.on('finish', onfinish);
	  };

	  if (isRequest$1(stream)) {
	    stream.on('complete', onfinish);
	    stream.on('abort', onclose);
	    if (stream.req) onrequest();else stream.on('request', onrequest);
	  } else if (writable && !stream._writableState) {
	    // legacy streams
	    stream.on('end', onlegacyfinish);
	    stream.on('close', onlegacyfinish);
	  }

	  stream.on('end', onend);
	  stream.on('finish', onfinish);
	  if (opts.error !== false) stream.on('error', onerror);
	  stream.on('close', onclose);
	  return function () {
	    stream.removeListener('complete', onfinish);
	    stream.removeListener('abort', onclose);
	    stream.removeListener('request', onrequest);
	    if (stream.req) stream.req.removeListener('finish', onfinish);
	    stream.removeListener('end', onlegacyfinish);
	    stream.removeListener('close', onlegacyfinish);
	    stream.removeListener('finish', onfinish);
	    stream.removeListener('end', onend);
	    stream.removeListener('error', onerror);
	    stream.removeListener('close', onclose);
	  };
	}

	var endOfStream = eos$1;

	var async_iterator;
	var hasRequiredAsync_iterator;

	function requireAsync_iterator () {
		if (hasRequiredAsync_iterator) return async_iterator;
		hasRequiredAsync_iterator = 1;

		var _Object$setPrototypeO;

		function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

		var finished = endOfStream;

		var kLastResolve = Symbol('lastResolve');
		var kLastReject = Symbol('lastReject');
		var kError = Symbol('error');
		var kEnded = Symbol('ended');
		var kLastPromise = Symbol('lastPromise');
		var kHandlePromise = Symbol('handlePromise');
		var kStream = Symbol('stream');

		function createIterResult(value, done) {
		  return {
		    value: value,
		    done: done
		  };
		}

		function readAndResolve(iter) {
		  var resolve = iter[kLastResolve];

		  if (resolve !== null) {
		    var data = iter[kStream].read(); // we defer if data is null
		    // we can be expecting either 'end' or
		    // 'error'

		    if (data !== null) {
		      iter[kLastPromise] = null;
		      iter[kLastResolve] = null;
		      iter[kLastReject] = null;
		      resolve(createIterResult(data, false));
		    }
		  }
		}

		function onReadable(iter) {
		  // we wait for the next tick, because it might
		  // emit an error with process.nextTick
		  nextTick$1(readAndResolve, iter);
		}

		function wrapForNext(lastPromise, iter) {
		  return function (resolve, reject) {
		    lastPromise.then(function () {
		      if (iter[kEnded]) {
		        resolve(createIterResult(undefined, true));
		        return;
		      }

		      iter[kHandlePromise](resolve, reject);
		    }, reject);
		  };
		}

		var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
		var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
		  get stream() {
		    return this[kStream];
		  },

		  next: function next() {
		    var _this = this;

		    // if we have detected an error in the meanwhile
		    // reject straight away
		    var error = this[kError];

		    if (error !== null) {
		      return Promise.reject(error);
		    }

		    if (this[kEnded]) {
		      return Promise.resolve(createIterResult(undefined, true));
		    }

		    if (this[kStream].destroyed) {
		      // We need to defer via nextTick because if .destroy(err) is
		      // called, the error will be emitted via nextTick, and
		      // we cannot guarantee that there is no error lingering around
		      // waiting to be emitted.
		      return new Promise(function (resolve, reject) {
		        nextTick$1(function () {
		          if (_this[kError]) {
		            reject(_this[kError]);
		          } else {
		            resolve(createIterResult(undefined, true));
		          }
		        });
		      });
		    } // if we have multiple next() calls
		    // we will wait for the previous Promise to finish
		    // this logic is optimized to support for await loops,
		    // where next() is only called once at a time


		    var lastPromise = this[kLastPromise];
		    var promise;

		    if (lastPromise) {
		      promise = new Promise(wrapForNext(lastPromise, this));
		    } else {
		      // fast path needed to support multiple this.push()
		      // without triggering the next() queue
		      var data = this[kStream].read();

		      if (data !== null) {
		        return Promise.resolve(createIterResult(data, false));
		      }

		      promise = new Promise(this[kHandlePromise]);
		    }

		    this[kLastPromise] = promise;
		    return promise;
		  }
		}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
		  return this;
		}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
		  var _this2 = this;

		  // destroy(err, cb) is a private API
		  // we can guarantee we have that here, because we control the
		  // Readable class this is attached to
		  return new Promise(function (resolve, reject) {
		    _this2[kStream].destroy(null, function (err) {
		      if (err) {
		        reject(err);
		        return;
		      }

		      resolve(createIterResult(undefined, true));
		    });
		  });
		}), _Object$setPrototypeO), AsyncIteratorPrototype);

		var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
		  var _Object$create;

		  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
		    value: stream,
		    writable: true
		  }), _defineProperty(_Object$create, kLastResolve, {
		    value: null,
		    writable: true
		  }), _defineProperty(_Object$create, kLastReject, {
		    value: null,
		    writable: true
		  }), _defineProperty(_Object$create, kError, {
		    value: null,
		    writable: true
		  }), _defineProperty(_Object$create, kEnded, {
		    value: stream._readableState.endEmitted,
		    writable: true
		  }), _defineProperty(_Object$create, kHandlePromise, {
		    value: function value(resolve, reject) {
		      var data = iterator[kStream].read();

		      if (data) {
		        iterator[kLastPromise] = null;
		        iterator[kLastResolve] = null;
		        iterator[kLastReject] = null;
		        resolve(createIterResult(data, false));
		      } else {
		        iterator[kLastResolve] = resolve;
		        iterator[kLastReject] = reject;
		      }
		    },
		    writable: true
		  }), _Object$create));
		  iterator[kLastPromise] = null;
		  finished(stream, function (err) {
		    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
		      var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
		      // returned by next() and store the error

		      if (reject !== null) {
		        iterator[kLastPromise] = null;
		        iterator[kLastResolve] = null;
		        iterator[kLastReject] = null;
		        reject(err);
		      }

		      iterator[kError] = err;
		      return;
		    }

		    var resolve = iterator[kLastResolve];

		    if (resolve !== null) {
		      iterator[kLastPromise] = null;
		      iterator[kLastResolve] = null;
		      iterator[kLastReject] = null;
		      resolve(createIterResult(undefined, true));
		    }

		    iterator[kEnded] = true;
		  });
		  stream.on('readable', onReadable.bind(null, iterator));
		  return iterator;
		};

		async_iterator = createReadableStreamAsyncIterator;
		return async_iterator;
	}

	var fromBrowser;
	var hasRequiredFromBrowser;

	function requireFromBrowser () {
		if (hasRequiredFromBrowser) return fromBrowser;
		hasRequiredFromBrowser = 1;
		fromBrowser = function () {
		  throw new Error('Readable.from is not available in the browser')
		};
		return fromBrowser;
	}

	var _stream_readable;
	var hasRequired_stream_readable;

	function require_stream_readable () {
		if (hasRequired_stream_readable) return _stream_readable;
		hasRequired_stream_readable = 1;

		_stream_readable = Readable;
		/*<replacement>*/

		var Duplex;
		/*</replacement>*/

		Readable.ReadableState = ReadableState;
		/*<replacement>*/

		require$$0$2.EventEmitter;

		var EElistenerCount = function EElistenerCount(emitter, type) {
		  return emitter.listeners(type).length;
		};
		/*</replacement>*/

		/*<replacement>*/


		var Stream = streamBrowser;
		/*</replacement>*/


		var Buffer = require$$2$1.Buffer;

		var OurUint8Array = commonjsGlobal.Uint8Array || function () {};

		function _uint8ArrayToBuffer(chunk) {
		  return Buffer.from(chunk);
		}

		function _isUint8Array(obj) {
		  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
		}
		/*<replacement>*/


		var debugUtil = require$$3;

		var debug;

		if (debugUtil && debugUtil.debuglog) {
		  debug = debugUtil.debuglog('stream');
		} else {
		  debug = function debug() {};
		}
		/*</replacement>*/


		var BufferList = requireBuffer_list();

		var destroyImpl = destroy_1;

		var _require = state,
		    getHighWaterMark = _require.getHighWaterMark;

		var _require$codes = errorsBrowser.codes,
		    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
		    ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
		    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
		    ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.


		var StringDecoder;
		var createReadableStreamAsyncIterator;
		var from;

		inherits_browserExports(Readable, Stream);

		var errorOrDestroy = destroyImpl.errorOrDestroy;
		var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

		function prependListener(emitter, event, fn) {
		  // Sadly this is not cacheable as some libraries bundle their own
		  // event emitter implementation with them.
		  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
		  // userland ones.  NEVER DO THIS. This is here only because this code needs
		  // to continue to work with older versions of Node.js that do not include
		  // the prependListener() method. The goal is to eventually remove this hack.

		  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
		}

		function ReadableState(options, stream, isDuplex) {
		  Duplex = Duplex || require_stream_duplex();
		  options = options || {}; // Duplex streams are both readable and writable, but share
		  // the same options object.
		  // However, some cases require setting options to different
		  // values for the readable and the writable sides of the duplex stream.
		  // These options can be provided separately as readableXXX and writableXXX.

		  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
		  // make all the buffer merging and length checks go away

		  this.objectMode = !!options.objectMode;
		  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
		  // Note: 0 is a valid value, means "don't call _read preemptively ever"

		  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
		  // linked list can remove elements from the beginning faster than
		  // array.shift()

		  this.buffer = new BufferList();
		  this.length = 0;
		  this.pipes = null;
		  this.pipesCount = 0;
		  this.flowing = null;
		  this.ended = false;
		  this.endEmitted = false;
		  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
		  // immediately, or on a later tick.  We set this to true at first, because
		  // any actions that shouldn't happen until "later" should generally also
		  // not happen before the first read call.

		  this.sync = true; // whenever we return null, then we set a flag to say
		  // that we're awaiting a 'readable' event emission.

		  this.needReadable = false;
		  this.emittedReadable = false;
		  this.readableListening = false;
		  this.resumeScheduled = false;
		  this.paused = true; // Should close be emitted on destroy. Defaults to true.

		  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')

		  this.autoDestroy = !!options.autoDestroy; // has it been destroyed

		  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
		  // encoding is 'binary' so we have to make this configurable.
		  // Everything else in the universe uses 'utf8', though.

		  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

		  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

		  this.readingMore = false;
		  this.decoder = null;
		  this.encoding = null;

		  if (options.encoding) {
		    if (!StringDecoder) StringDecoder = requireString_decoder().StringDecoder;
		    this.decoder = new StringDecoder(options.encoding);
		    this.encoding = options.encoding;
		  }
		}

		function Readable(options) {
		  Duplex = Duplex || require_stream_duplex();
		  if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
		  // the ReadableState constructor, at least with V8 6.5

		  var isDuplex = this instanceof Duplex;
		  this._readableState = new ReadableState(options, this, isDuplex); // legacy

		  this.readable = true;

		  if (options) {
		    if (typeof options.read === 'function') this._read = options.read;
		    if (typeof options.destroy === 'function') this._destroy = options.destroy;
		  }

		  Stream.call(this);
		}

		Object.defineProperty(Readable.prototype, 'destroyed', {
		  // making it explicit this property is not enumerable
		  // because otherwise some prototype manipulation in
		  // userland will fail
		  enumerable: false,
		  get: function get() {
		    if (this._readableState === undefined) {
		      return false;
		    }

		    return this._readableState.destroyed;
		  },
		  set: function set(value) {
		    // we ignore the value if the stream
		    // has not been initialized yet
		    if (!this._readableState) {
		      return;
		    } // backward compatibility, the user is explicitly
		    // managing destroyed


		    this._readableState.destroyed = value;
		  }
		});
		Readable.prototype.destroy = destroyImpl.destroy;
		Readable.prototype._undestroy = destroyImpl.undestroy;

		Readable.prototype._destroy = function (err, cb) {
		  cb(err);
		}; // Manually shove something into the read() buffer.
		// This returns true if the highWaterMark has not been hit yet,
		// similar to how Writable.write() returns true if you should
		// write() some more.


		Readable.prototype.push = function (chunk, encoding) {
		  var state = this._readableState;
		  var skipChunkCheck;

		  if (!state.objectMode) {
		    if (typeof chunk === 'string') {
		      encoding = encoding || state.defaultEncoding;

		      if (encoding !== state.encoding) {
		        chunk = Buffer.from(chunk, encoding);
		        encoding = '';
		      }

		      skipChunkCheck = true;
		    }
		  } else {
		    skipChunkCheck = true;
		  }

		  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
		}; // Unshift should *always* be something directly out of read()


		Readable.prototype.unshift = function (chunk) {
		  return readableAddChunk(this, chunk, null, true, false);
		};

		function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
		  debug('readableAddChunk', chunk);
		  var state = stream._readableState;

		  if (chunk === null) {
		    state.reading = false;
		    onEofChunk(stream, state);
		  } else {
		    var er;
		    if (!skipChunkCheck) er = chunkInvalid(state, chunk);

		    if (er) {
		      errorOrDestroy(stream, er);
		    } else if (state.objectMode || chunk && chunk.length > 0) {
		      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
		        chunk = _uint8ArrayToBuffer(chunk);
		      }

		      if (addToFront) {
		        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
		      } else if (state.ended) {
		        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
		      } else if (state.destroyed) {
		        return false;
		      } else {
		        state.reading = false;

		        if (state.decoder && !encoding) {
		          chunk = state.decoder.write(chunk);
		          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
		        } else {
		          addChunk(stream, state, chunk, false);
		        }
		      }
		    } else if (!addToFront) {
		      state.reading = false;
		      maybeReadMore(stream, state);
		    }
		  } // We can push more data if we are below the highWaterMark.
		  // Also, if we have no data yet, we can stand some more bytes.
		  // This is to work around cases where hwm=0, such as the repl.


		  return !state.ended && (state.length < state.highWaterMark || state.length === 0);
		}

		function addChunk(stream, state, chunk, addToFront) {
		  if (state.flowing && state.length === 0 && !state.sync) {
		    state.awaitDrain = 0;
		    stream.emit('data', chunk);
		  } else {
		    // update the buffer info.
		    state.length += state.objectMode ? 1 : chunk.length;
		    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
		    if (state.needReadable) emitReadable(stream);
		  }

		  maybeReadMore(stream, state);
		}

		function chunkInvalid(state, chunk) {
		  var er;

		  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
		    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
		  }

		  return er;
		}

		Readable.prototype.isPaused = function () {
		  return this._readableState.flowing === false;
		}; // backwards compatibility.


		Readable.prototype.setEncoding = function (enc) {
		  if (!StringDecoder) StringDecoder = requireString_decoder().StringDecoder;
		  var decoder = new StringDecoder(enc);
		  this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8

		  this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:

		  var p = this._readableState.buffer.head;
		  var content = '';

		  while (p !== null) {
		    content += decoder.write(p.data);
		    p = p.next;
		  }

		  this._readableState.buffer.clear();

		  if (content !== '') this._readableState.buffer.push(content);
		  this._readableState.length = content.length;
		  return this;
		}; // Don't raise the hwm > 1GB


		var MAX_HWM = 0x40000000;

		function computeNewHighWaterMark(n) {
		  if (n >= MAX_HWM) {
		    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
		    n = MAX_HWM;
		  } else {
		    // Get the next highest power of 2 to prevent increasing hwm excessively in
		    // tiny amounts
		    n--;
		    n |= n >>> 1;
		    n |= n >>> 2;
		    n |= n >>> 4;
		    n |= n >>> 8;
		    n |= n >>> 16;
		    n++;
		  }

		  return n;
		} // This function is designed to be inlinable, so please take care when making
		// changes to the function body.


		function howMuchToRead(n, state) {
		  if (n <= 0 || state.length === 0 && state.ended) return 0;
		  if (state.objectMode) return 1;

		  if (n !== n) {
		    // Only flow one buffer at a time
		    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
		  } // If we're asking for more than the current hwm, then raise the hwm.


		  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
		  if (n <= state.length) return n; // Don't have enough

		  if (!state.ended) {
		    state.needReadable = true;
		    return 0;
		  }

		  return state.length;
		} // you can override either this method, or the async _read(n) below.


		Readable.prototype.read = function (n) {
		  debug('read', n);
		  n = parseInt(n, 10);
		  var state = this._readableState;
		  var nOrig = n;
		  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
		  // already have a bunch of data in the buffer, then just trigger
		  // the 'readable' event and move on.

		  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
		    debug('read: emitReadable', state.length, state.ended);
		    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
		    return null;
		  }

		  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

		  if (n === 0 && state.ended) {
		    if (state.length === 0) endReadable(this);
		    return null;
		  } // All the actual chunk generation logic needs to be
		  // *below* the call to _read.  The reason is that in certain
		  // synthetic stream cases, such as passthrough streams, _read
		  // may be a completely synchronous operation which may change
		  // the state of the read buffer, providing enough data when
		  // before there was *not* enough.
		  //
		  // So, the steps are:
		  // 1. Figure out what the state of things will be after we do
		  // a read from the buffer.
		  //
		  // 2. If that resulting state will trigger a _read, then call _read.
		  // Note that this may be asynchronous, or synchronous.  Yes, it is
		  // deeply ugly to write APIs this way, but that still doesn't mean
		  // that the Readable class should behave improperly, as streams are
		  // designed to be sync/async agnostic.
		  // Take note if the _read call is sync or async (ie, if the read call
		  // has returned yet), so that we know whether or not it's safe to emit
		  // 'readable' etc.
		  //
		  // 3. Actually pull the requested chunks out of the buffer and return.
		  // if we need a readable event, then we need to do some reading.


		  var doRead = state.needReadable;
		  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

		  if (state.length === 0 || state.length - n < state.highWaterMark) {
		    doRead = true;
		    debug('length less than watermark', doRead);
		  } // however, if we've ended, then there's no point, and if we're already
		  // reading, then it's unnecessary.


		  if (state.ended || state.reading) {
		    doRead = false;
		    debug('reading or ended', doRead);
		  } else if (doRead) {
		    debug('do read');
		    state.reading = true;
		    state.sync = true; // if the length is currently zero, then we *need* a readable event.

		    if (state.length === 0) state.needReadable = true; // call internal read method

		    this._read(state.highWaterMark);

		    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
		    // and we need to re-evaluate how much data we can return to the user.

		    if (!state.reading) n = howMuchToRead(nOrig, state);
		  }

		  var ret;
		  if (n > 0) ret = fromList(n, state);else ret = null;

		  if (ret === null) {
		    state.needReadable = state.length <= state.highWaterMark;
		    n = 0;
		  } else {
		    state.length -= n;
		    state.awaitDrain = 0;
		  }

		  if (state.length === 0) {
		    // If we have nothing in the buffer, then we want to know
		    // as soon as we *do* get something into the buffer.
		    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

		    if (nOrig !== n && state.ended) endReadable(this);
		  }

		  if (ret !== null) this.emit('data', ret);
		  return ret;
		};

		function onEofChunk(stream, state) {
		  debug('onEofChunk');
		  if (state.ended) return;

		  if (state.decoder) {
		    var chunk = state.decoder.end();

		    if (chunk && chunk.length) {
		      state.buffer.push(chunk);
		      state.length += state.objectMode ? 1 : chunk.length;
		    }
		  }

		  state.ended = true;

		  if (state.sync) {
		    // if we are sync, wait until next tick to emit the data.
		    // Otherwise we risk emitting data in the flow()
		    // the readable code triggers during a read() call
		    emitReadable(stream);
		  } else {
		    // emit 'readable' now to make sure it gets picked up.
		    state.needReadable = false;

		    if (!state.emittedReadable) {
		      state.emittedReadable = true;
		      emitReadable_(stream);
		    }
		  }
		} // Don't emit readable right away in sync mode, because this can trigger
		// another read() call => stack overflow.  This way, it might trigger
		// a nextTick recursion warning, but that's not so bad.


		function emitReadable(stream) {
		  var state = stream._readableState;
		  debug('emitReadable', state.needReadable, state.emittedReadable);
		  state.needReadable = false;

		  if (!state.emittedReadable) {
		    debug('emitReadable', state.flowing);
		    state.emittedReadable = true;
		    nextTick$1(emitReadable_, stream);
		  }
		}

		function emitReadable_(stream) {
		  var state = stream._readableState;
		  debug('emitReadable_', state.destroyed, state.length, state.ended);

		  if (!state.destroyed && (state.length || state.ended)) {
		    stream.emit('readable');
		    state.emittedReadable = false;
		  } // The stream needs another readable event if
		  // 1. It is not flowing, as the flow mechanism will take
		  //    care of it.
		  // 2. It is not ended.
		  // 3. It is below the highWaterMark, so we can schedule
		  //    another readable later.


		  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
		  flow(stream);
		} // at this point, the user has presumably seen the 'readable' event,
		// and called read() to consume some data.  that may have triggered
		// in turn another _read(n) call, in which case reading = true if
		// it's in progress.
		// However, if we're not ended, or reading, and the length < hwm,
		// then go ahead and try to read some more preemptively.


		function maybeReadMore(stream, state) {
		  if (!state.readingMore) {
		    state.readingMore = true;
		    nextTick$1(maybeReadMore_, stream, state);
		  }
		}

		function maybeReadMore_(stream, state) {
		  // Attempt to read more data if we should.
		  //
		  // The conditions for reading more data are (one of):
		  // - Not enough data buffered (state.length < state.highWaterMark). The loop
		  //   is responsible for filling the buffer with enough data if such data
		  //   is available. If highWaterMark is 0 and we are not in the flowing mode
		  //   we should _not_ attempt to buffer any extra data. We'll get more data
		  //   when the stream consumer calls read() instead.
		  // - No data in the buffer, and the stream is in flowing mode. In this mode
		  //   the loop below is responsible for ensuring read() is called. Failing to
		  //   call read here would abort the flow and there's no other mechanism for
		  //   continuing the flow if the stream consumer has just subscribed to the
		  //   'data' event.
		  //
		  // In addition to the above conditions to keep reading data, the following
		  // conditions prevent the data from being read:
		  // - The stream has ended (state.ended).
		  // - There is already a pending 'read' operation (state.reading). This is a
		  //   case where the the stream has called the implementation defined _read()
		  //   method, but they are processing the call asynchronously and have _not_
		  //   called push() with new data. In this case we skip performing more
		  //   read()s. The execution ends in this method again after the _read() ends
		  //   up calling push() with more data.
		  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
		    var len = state.length;
		    debug('maybeReadMore read 0');
		    stream.read(0);
		    if (len === state.length) // didn't get any data, stop spinning.
		      break;
		  }

		  state.readingMore = false;
		} // abstract method.  to be overridden in specific implementation classes.
		// call cb(er, data) where data is <= n in length.
		// for virtual (non-string, non-buffer) streams, "length" is somewhat
		// arbitrary, and perhaps not very meaningful.


		Readable.prototype._read = function (n) {
		  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
		};

		Readable.prototype.pipe = function (dest, pipeOpts) {
		  var src = this;
		  var state = this._readableState;

		  switch (state.pipesCount) {
		    case 0:
		      state.pipes = dest;
		      break;

		    case 1:
		      state.pipes = [state.pipes, dest];
		      break;

		    default:
		      state.pipes.push(dest);
		      break;
		  }

		  state.pipesCount += 1;
		  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
		  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process$1.stdout && dest !== process$1.stderr;
		  var endFn = doEnd ? onend : unpipe;
		  if (state.endEmitted) nextTick$1(endFn);else src.once('end', endFn);
		  dest.on('unpipe', onunpipe);

		  function onunpipe(readable, unpipeInfo) {
		    debug('onunpipe');

		    if (readable === src) {
		      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
		        unpipeInfo.hasUnpiped = true;
		        cleanup();
		      }
		    }
		  }

		  function onend() {
		    debug('onend');
		    dest.end();
		  } // when the dest drains, it reduces the awaitDrain counter
		  // on the source.  This would be more elegant with a .once()
		  // handler in flow(), but adding and removing repeatedly is
		  // too slow.


		  var ondrain = pipeOnDrain(src);
		  dest.on('drain', ondrain);
		  var cleanedUp = false;

		  function cleanup() {
		    debug('cleanup'); // cleanup event handlers once the pipe is broken

		    dest.removeListener('close', onclose);
		    dest.removeListener('finish', onfinish);
		    dest.removeListener('drain', ondrain);
		    dest.removeListener('error', onerror);
		    dest.removeListener('unpipe', onunpipe);
		    src.removeListener('end', onend);
		    src.removeListener('end', unpipe);
		    src.removeListener('data', ondata);
		    cleanedUp = true; // if the reader is waiting for a drain event from this
		    // specific writer, then it would cause it to never start
		    // flowing again.
		    // So, if this is awaiting a drain, then we just call it now.
		    // If we don't know, then assume that we are waiting for one.

		    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
		  }

		  src.on('data', ondata);

		  function ondata(chunk) {
		    debug('ondata');
		    var ret = dest.write(chunk);
		    debug('dest.write', ret);

		    if (ret === false) {
		      // If the user unpiped during `dest.write()`, it is possible
		      // to get stuck in a permanently paused state if that write
		      // also returned false.
		      // => Check whether `dest` is still a piping destination.
		      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
		        debug('false write response, pause', state.awaitDrain);
		        state.awaitDrain++;
		      }

		      src.pause();
		    }
		  } // if the dest has an error, then stop piping into it.
		  // however, don't suppress the throwing behavior for this.


		  function onerror(er) {
		    debug('onerror', er);
		    unpipe();
		    dest.removeListener('error', onerror);
		    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
		  } // Make sure our error handler is attached before userland ones.


		  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

		  function onclose() {
		    dest.removeListener('finish', onfinish);
		    unpipe();
		  }

		  dest.once('close', onclose);

		  function onfinish() {
		    debug('onfinish');
		    dest.removeListener('close', onclose);
		    unpipe();
		  }

		  dest.once('finish', onfinish);

		  function unpipe() {
		    debug('unpipe');
		    src.unpipe(dest);
		  } // tell the dest that it's being piped to


		  dest.emit('pipe', src); // start the flow if it hasn't been started already.

		  if (!state.flowing) {
		    debug('pipe resume');
		    src.resume();
		  }

		  return dest;
		};

		function pipeOnDrain(src) {
		  return function pipeOnDrainFunctionResult() {
		    var state = src._readableState;
		    debug('pipeOnDrain', state.awaitDrain);
		    if (state.awaitDrain) state.awaitDrain--;

		    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
		      state.flowing = true;
		      flow(src);
		    }
		  };
		}

		Readable.prototype.unpipe = function (dest) {
		  var state = this._readableState;
		  var unpipeInfo = {
		    hasUnpiped: false
		  }; // if we're not piping anywhere, then do nothing.

		  if (state.pipesCount === 0) return this; // just one destination.  most common case.

		  if (state.pipesCount === 1) {
		    // passed in one, but it's not the right one.
		    if (dest && dest !== state.pipes) return this;
		    if (!dest) dest = state.pipes; // got a match.

		    state.pipes = null;
		    state.pipesCount = 0;
		    state.flowing = false;
		    if (dest) dest.emit('unpipe', this, unpipeInfo);
		    return this;
		  } // slow case. multiple pipe destinations.


		  if (!dest) {
		    // remove all.
		    var dests = state.pipes;
		    var len = state.pipesCount;
		    state.pipes = null;
		    state.pipesCount = 0;
		    state.flowing = false;

		    for (var i = 0; i < len; i++) {
		      dests[i].emit('unpipe', this, {
		        hasUnpiped: false
		      });
		    }

		    return this;
		  } // try to find the right one.


		  var index = indexOf(state.pipes, dest);
		  if (index === -1) return this;
		  state.pipes.splice(index, 1);
		  state.pipesCount -= 1;
		  if (state.pipesCount === 1) state.pipes = state.pipes[0];
		  dest.emit('unpipe', this, unpipeInfo);
		  return this;
		}; // set up data events if they are asked for
		// Ensure readable listeners eventually get something


		Readable.prototype.on = function (ev, fn) {
		  var res = Stream.prototype.on.call(this, ev, fn);
		  var state = this._readableState;

		  if (ev === 'data') {
		    // update readableListening so that resume() may be a no-op
		    // a few lines down. This is needed to support once('readable').
		    state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused

		    if (state.flowing !== false) this.resume();
		  } else if (ev === 'readable') {
		    if (!state.endEmitted && !state.readableListening) {
		      state.readableListening = state.needReadable = true;
		      state.flowing = false;
		      state.emittedReadable = false;
		      debug('on readable', state.length, state.reading);

		      if (state.length) {
		        emitReadable(this);
		      } else if (!state.reading) {
		        nextTick$1(nReadingNextTick, this);
		      }
		    }
		  }

		  return res;
		};

		Readable.prototype.addListener = Readable.prototype.on;

		Readable.prototype.removeListener = function (ev, fn) {
		  var res = Stream.prototype.removeListener.call(this, ev, fn);

		  if (ev === 'readable') {
		    // We need to check if there is someone still listening to
		    // readable and reset the state. However this needs to happen
		    // after readable has been emitted but before I/O (nextTick) to
		    // support once('readable', fn) cycles. This means that calling
		    // resume within the same tick will have no
		    // effect.
		    nextTick$1(updateReadableListening, this);
		  }

		  return res;
		};

		Readable.prototype.removeAllListeners = function (ev) {
		  var res = Stream.prototype.removeAllListeners.apply(this, arguments);

		  if (ev === 'readable' || ev === undefined) {
		    // We need to check if there is someone still listening to
		    // readable and reset the state. However this needs to happen
		    // after readable has been emitted but before I/O (nextTick) to
		    // support once('readable', fn) cycles. This means that calling
		    // resume within the same tick will have no
		    // effect.
		    nextTick$1(updateReadableListening, this);
		  }

		  return res;
		};

		function updateReadableListening(self) {
		  var state = self._readableState;
		  state.readableListening = self.listenerCount('readable') > 0;

		  if (state.resumeScheduled && !state.paused) {
		    // flowing needs to be set to true now, otherwise
		    // the upcoming resume will not flow.
		    state.flowing = true; // crude way to check if we should resume
		  } else if (self.listenerCount('data') > 0) {
		    self.resume();
		  }
		}

		function nReadingNextTick(self) {
		  debug('readable nexttick read 0');
		  self.read(0);
		} // pause() and resume() are remnants of the legacy readable stream API
		// If the user uses them, then switch into old mode.


		Readable.prototype.resume = function () {
		  var state = this._readableState;

		  if (!state.flowing) {
		    debug('resume'); // we flow only if there is no one listening
		    // for readable, but we still have to call
		    // resume()

		    state.flowing = !state.readableListening;
		    resume(this, state);
		  }

		  state.paused = false;
		  return this;
		};

		function resume(stream, state) {
		  if (!state.resumeScheduled) {
		    state.resumeScheduled = true;
		    nextTick$1(resume_, stream, state);
		  }
		}

		function resume_(stream, state) {
		  debug('resume', state.reading);

		  if (!state.reading) {
		    stream.read(0);
		  }

		  state.resumeScheduled = false;
		  stream.emit('resume');
		  flow(stream);
		  if (state.flowing && !state.reading) stream.read(0);
		}

		Readable.prototype.pause = function () {
		  debug('call pause flowing=%j', this._readableState.flowing);

		  if (this._readableState.flowing !== false) {
		    debug('pause');
		    this._readableState.flowing = false;
		    this.emit('pause');
		  }

		  this._readableState.paused = true;
		  return this;
		};

		function flow(stream) {
		  var state = stream._readableState;
		  debug('flow', state.flowing);

		  while (state.flowing && stream.read() !== null) {
		  }
		} // wrap an old-style stream as the async data source.
		// This is *not* part of the readable stream interface.
		// It is an ugly unfortunate mess of history.


		Readable.prototype.wrap = function (stream) {
		  var _this = this;

		  var state = this._readableState;
		  var paused = false;
		  stream.on('end', function () {
		    debug('wrapped end');

		    if (state.decoder && !state.ended) {
		      var chunk = state.decoder.end();
		      if (chunk && chunk.length) _this.push(chunk);
		    }

		    _this.push(null);
		  });
		  stream.on('data', function (chunk) {
		    debug('wrapped data');
		    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

		    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

		    var ret = _this.push(chunk);

		    if (!ret) {
		      paused = true;
		      stream.pause();
		    }
		  }); // proxy all the other methods.
		  // important when wrapping filters and duplexes.

		  for (var i in stream) {
		    if (this[i] === undefined && typeof stream[i] === 'function') {
		      this[i] = function methodWrap(method) {
		        return function methodWrapReturnFunction() {
		          return stream[method].apply(stream, arguments);
		        };
		      }(i);
		    }
		  } // proxy certain important events.


		  for (var n = 0; n < kProxyEvents.length; n++) {
		    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
		  } // when we try to consume some more bytes, simply unpause the
		  // underlying stream.


		  this._read = function (n) {
		    debug('wrapped _read', n);

		    if (paused) {
		      paused = false;
		      stream.resume();
		    }
		  };

		  return this;
		};

		if (typeof Symbol === 'function') {
		  Readable.prototype[Symbol.asyncIterator] = function () {
		    if (createReadableStreamAsyncIterator === undefined) {
		      createReadableStreamAsyncIterator = requireAsync_iterator();
		    }

		    return createReadableStreamAsyncIterator(this);
		  };
		}

		Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
		  // making it explicit this property is not enumerable
		  // because otherwise some prototype manipulation in
		  // userland will fail
		  enumerable: false,
		  get: function get() {
		    return this._readableState.highWaterMark;
		  }
		});
		Object.defineProperty(Readable.prototype, 'readableBuffer', {
		  // making it explicit this property is not enumerable
		  // because otherwise some prototype manipulation in
		  // userland will fail
		  enumerable: false,
		  get: function get() {
		    return this._readableState && this._readableState.buffer;
		  }
		});
		Object.defineProperty(Readable.prototype, 'readableFlowing', {
		  // making it explicit this property is not enumerable
		  // because otherwise some prototype manipulation in
		  // userland will fail
		  enumerable: false,
		  get: function get() {
		    return this._readableState.flowing;
		  },
		  set: function set(state) {
		    if (this._readableState) {
		      this._readableState.flowing = state;
		    }
		  }
		}); // exposed for testing purposes only.

		Readable._fromList = fromList;
		Object.defineProperty(Readable.prototype, 'readableLength', {
		  // making it explicit this property is not enumerable
		  // because otherwise some prototype manipulation in
		  // userland will fail
		  enumerable: false,
		  get: function get() {
		    return this._readableState.length;
		  }
		}); // Pluck off n bytes from an array of buffers.
		// Length is the combined lengths of all the buffers in the list.
		// This function is designed to be inlinable, so please take care when making
		// changes to the function body.

		function fromList(n, state) {
		  // nothing buffered
		  if (state.length === 0) return null;
		  var ret;
		  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
		    // read it all, truncate the list
		    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
		    state.buffer.clear();
		  } else {
		    // read part of list
		    ret = state.buffer.consume(n, state.decoder);
		  }
		  return ret;
		}

		function endReadable(stream) {
		  var state = stream._readableState;
		  debug('endReadable', state.endEmitted);

		  if (!state.endEmitted) {
		    state.ended = true;
		    nextTick$1(endReadableNT, state, stream);
		  }
		}

		function endReadableNT(state, stream) {
		  debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.

		  if (!state.endEmitted && state.length === 0) {
		    state.endEmitted = true;
		    stream.readable = false;
		    stream.emit('end');

		    if (state.autoDestroy) {
		      // In case of duplex streams we need a way to detect
		      // if the writable side is ready for autoDestroy as well
		      var wState = stream._writableState;

		      if (!wState || wState.autoDestroy && wState.finished) {
		        stream.destroy();
		      }
		    }
		  }
		}

		if (typeof Symbol === 'function') {
		  Readable.from = function (iterable, opts) {
		    if (from === undefined) {
		      from = requireFromBrowser();
		    }

		    return from(Readable, iterable, opts);
		  };
		}

		function indexOf(xs, x) {
		  for (var i = 0, l = xs.length; i < l; i++) {
		    if (xs[i] === x) return i;
		  }

		  return -1;
		}
		return _stream_readable;
	}

	var _stream_transform = Transform$6;

	var _require$codes$1 = errorsBrowser.codes,
	    ERR_METHOD_NOT_IMPLEMENTED = _require$codes$1.ERR_METHOD_NOT_IMPLEMENTED,
	    ERR_MULTIPLE_CALLBACK = _require$codes$1.ERR_MULTIPLE_CALLBACK,
	    ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes$1.ERR_TRANSFORM_ALREADY_TRANSFORMING,
	    ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes$1.ERR_TRANSFORM_WITH_LENGTH_0;

	var Duplex$1 = require_stream_duplex();

	inherits_browserExports(Transform$6, Duplex$1);

	function afterTransform$1(er, data) {
	  var ts = this._transformState;
	  ts.transforming = false;
	  var cb = ts.writecb;

	  if (cb === null) {
	    return this.emit('error', new ERR_MULTIPLE_CALLBACK());
	  }

	  ts.writechunk = null;
	  ts.writecb = null;
	  if (data != null) // single equals check for both `null` and `undefined`
	    this.push(data);
	  cb(er);
	  var rs = this._readableState;
	  rs.reading = false;

	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    this._read(rs.highWaterMark);
	  }
	}

	function Transform$6(options) {
	  if (!(this instanceof Transform$6)) return new Transform$6(options);
	  Duplex$1.call(this, options);
	  this._transformState = {
	    afterTransform: afterTransform$1.bind(this),
	    needTransform: false,
	    transforming: false,
	    writecb: null,
	    writechunk: null,
	    writeencoding: null
	  }; // start out asking for a readable event once data is transformed.

	  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
	  // that Readable wants before the first _read call, so unset the
	  // sync guard flag.

	  this._readableState.sync = false;

	  if (options) {
	    if (typeof options.transform === 'function') this._transform = options.transform;
	    if (typeof options.flush === 'function') this._flush = options.flush;
	  } // When the writable side finishes, then flush out anything remaining.


	  this.on('prefinish', prefinish$1);
	}

	function prefinish$1() {
	  var _this = this;

	  if (typeof this._flush === 'function' && !this._readableState.destroyed) {
	    this._flush(function (er, data) {
	      done$1(_this, er, data);
	    });
	  } else {
	    done$1(this, null, null);
	  }
	}

	Transform$6.prototype.push = function (chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex$1.prototype.push.call(this, chunk, encoding);
	}; // This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.


	Transform$6.prototype._transform = function (chunk, encoding, cb) {
	  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
	};

	Transform$6.prototype._write = function (chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;

	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
	  }
	}; // Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.


	Transform$6.prototype._read = function (n) {
	  var ts = this._transformState;

	  if (ts.writechunk !== null && !ts.transforming) {
	    ts.transforming = true;

	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    // mark that we need a transform, so that any data that comes in
	    // will get processed, now that we've asked for it.
	    ts.needTransform = true;
	  }
	};

	Transform$6.prototype._destroy = function (err, cb) {
	  Duplex$1.prototype._destroy.call(this, err, function (err2) {
	    cb(err2);
	  });
	};

	function done$1(stream, er, data) {
	  if (er) return stream.emit('error', er);
	  if (data != null) // single equals check for both `null` and `undefined`
	    stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
	  // if there's nothing in the write buffer, then that means
	  // that nothing more will ever be provided

	  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
	  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
	  return stream.push(null);
	}

	var _stream_passthrough = PassThrough$1;

	var Transform$5 = _stream_transform;

	inherits_browserExports(PassThrough$1, Transform$5);

	function PassThrough$1(options) {
	  if (!(this instanceof PassThrough$1)) return new PassThrough$1(options);
	  Transform$5.call(this, options);
	}

	PassThrough$1.prototype._transform = function (chunk, encoding, cb) {
	  cb(null, chunk);
	};

	var eos;

	function once(callback) {
	  var called = false;
	  return function () {
	    if (called) return;
	    called = true;
	    callback.apply(void 0, arguments);
	  };
	}

	var _require$codes = errorsBrowser.codes,
	    ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
	    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;

	function noop(err) {
	  // Rethrow the error if it exists to avoid swallowing it
	  if (err) throw err;
	}

	function isRequest(stream) {
	  return stream.setHeader && typeof stream.abort === 'function';
	}

	function destroyer(stream, reading, writing, callback) {
	  callback = once(callback);
	  var closed = false;
	  stream.on('close', function () {
	    closed = true;
	  });
	  if (eos === undefined) eos = endOfStream;
	  eos(stream, {
	    readable: reading,
	    writable: writing
	  }, function (err) {
	    if (err) return callback(err);
	    closed = true;
	    callback();
	  });
	  var destroyed = false;
	  return function (err) {
	    if (closed) return;
	    if (destroyed) return;
	    destroyed = true; // request.destroy just do .end - .abort is what we want

	    if (isRequest(stream)) return stream.abort();
	    if (typeof stream.destroy === 'function') return stream.destroy();
	    callback(err || new ERR_STREAM_DESTROYED('pipe'));
	  };
	}

	function call(fn) {
	  fn();
	}

	function pipe(from, to) {
	  return from.pipe(to);
	}

	function popCallback(streams) {
	  if (!streams.length) return noop;
	  if (typeof streams[streams.length - 1] !== 'function') return noop;
	  return streams.pop();
	}

	function pipeline() {
	  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
	    streams[_key] = arguments[_key];
	  }

	  var callback = popCallback(streams);
	  if (Array.isArray(streams[0])) streams = streams[0];

	  if (streams.length < 2) {
	    throw new ERR_MISSING_ARGS('streams');
	  }

	  var error;
	  var destroys = streams.map(function (stream, i) {
	    var reading = i < streams.length - 1;
	    var writing = i > 0;
	    return destroyer(stream, reading, writing, function (err) {
	      if (!error) error = err;
	      if (err) destroys.forEach(call);
	      if (reading) return;
	      destroys.forEach(call);
	      callback(error);
	    });
	  });
	  return streams.reduce(pipe);
	}

	var pipeline_1 = pipeline;

	(function (module, exports) {
		exports = module.exports = require_stream_readable();
		exports.Stream = exports;
		exports.Readable = exports;
		exports.Writable = require_stream_writable();
		exports.Duplex = require_stream_duplex();
		exports.Transform = _stream_transform;
		exports.PassThrough = _stream_passthrough;
		exports.finished = endOfStream;
		exports.pipeline = pipeline_1;
	} (readableBrowser, readableBrowserExports));

	const { Transform: Transform$4 } = readableBrowserExports;

	var keccak$1 = (KeccakState) => class Keccak extends Transform$4 {
	  constructor (rate, capacity, delimitedSuffix, hashBitLength, options) {
	    super(options);

	    this._rate = rate;
	    this._capacity = capacity;
	    this._delimitedSuffix = delimitedSuffix;
	    this._hashBitLength = hashBitLength;
	    this._options = options;

	    this._state = new KeccakState();
	    this._state.initialize(rate, capacity);
	    this._finalized = false;
	  }

	  _transform (chunk, encoding, callback) {
	    let error = null;
	    try {
	      this.update(chunk, encoding);
	    } catch (err) {
	      error = err;
	    }

	    callback(error);
	  }

	  _flush (callback) {
	    let error = null;
	    try {
	      this.push(this.digest());
	    } catch (err) {
	      error = err;
	    }

	    callback(error);
	  }

	  update (data, encoding) {
	    if (!isBuffer$1(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer')
	    if (this._finalized) throw new Error('Digest already called')
	    if (!isBuffer$1(data)) data = Buffer$d.from(data, encoding);

	    this._state.absorb(data);

	    return this
	  }

	  digest (encoding) {
	    if (this._finalized) throw new Error('Digest already called')
	    this._finalized = true;

	    if (this._delimitedSuffix) this._state.absorbLastFewBits(this._delimitedSuffix);
	    let digest = this._state.squeeze(this._hashBitLength / 8);
	    if (encoding !== undefined) digest = digest.toString(encoding);

	    this._resetState();

	    return digest
	  }

	  // remove result from memory
	  _resetState () {
	    this._state.initialize(this._rate, this._capacity);
	    return this
	  }

	  // because sometimes we need hash right now and little later
	  _clone () {
	    const clone = new Keccak(this._rate, this._capacity, this._delimitedSuffix, this._hashBitLength, this._options);
	    this._state.copy(clone._state);
	    clone._finalized = this._finalized;

	    return clone
	  }
	};

	const { Transform: Transform$3 } = readableBrowserExports;

	var shake = (KeccakState) => class Shake extends Transform$3 {
	  constructor (rate, capacity, delimitedSuffix, options) {
	    super(options);

	    this._rate = rate;
	    this._capacity = capacity;
	    this._delimitedSuffix = delimitedSuffix;
	    this._options = options;

	    this._state = new KeccakState();
	    this._state.initialize(rate, capacity);
	    this._finalized = false;
	  }

	  _transform (chunk, encoding, callback) {
	    let error = null;
	    try {
	      this.update(chunk, encoding);
	    } catch (err) {
	      error = err;
	    }

	    callback(error);
	  }

	  _flush () {}

	  _read (size) {
	    this.push(this.squeeze(size));
	  }

	  update (data, encoding) {
	    if (!isBuffer$1(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer')
	    if (this._finalized) throw new Error('Squeeze already called')
	    if (!isBuffer$1(data)) data = Buffer$d.from(data, encoding);

	    this._state.absorb(data);

	    return this
	  }

	  squeeze (dataByteLength, encoding) {
	    if (!this._finalized) {
	      this._finalized = true;
	      this._state.absorbLastFewBits(this._delimitedSuffix);
	    }

	    let data = this._state.squeeze(dataByteLength);
	    if (encoding !== undefined) data = data.toString(encoding);

	    return data
	  }

	  _resetState () {
	    this._state.initialize(this._rate, this._capacity);
	    return this
	  }

	  _clone () {
	    const clone = new Shake(this._rate, this._capacity, this._delimitedSuffix, this._options);
	    this._state.copy(clone._state);
	    clone._finalized = this._finalized;

	    return clone
	  }
	};

	const createKeccak = keccak$1;
	const createShake = shake;

	var api = function (KeccakState) {
	  const Keccak = createKeccak(KeccakState);
	  const Shake = createShake(KeccakState);

	  return function (algorithm, options) {
	    const hash = typeof algorithm === 'string' ? algorithm.toLowerCase() : algorithm;
	    switch (hash) {
	      case 'keccak224': return new Keccak(1152, 448, null, 224, options)
	      case 'keccak256': return new Keccak(1088, 512, null, 256, options)
	      case 'keccak384': return new Keccak(832, 768, null, 384, options)
	      case 'keccak512': return new Keccak(576, 1024, null, 512, options)

	      case 'sha3-224': return new Keccak(1152, 448, 0x06, 224, options)
	      case 'sha3-256': return new Keccak(1088, 512, 0x06, 256, options)
	      case 'sha3-384': return new Keccak(832, 768, 0x06, 384, options)
	      case 'sha3-512': return new Keccak(576, 1024, 0x06, 512, options)

	      case 'shake128': return new Shake(1344, 256, 0x1f, options)
	      case 'shake256': return new Shake(1088, 512, 0x1f, options)

	      default: throw new Error('Invald algorithm: ' + algorithm)
	    }
	  }
	};

	var keccakStateUnroll = {};

	const P1600_ROUND_CONSTANTS = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];

	keccakStateUnroll.p1600 = function (s) {
	  for (let round = 0; round < 24; ++round) {
	    // theta
	    const lo0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
	    const hi0 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
	    const lo1 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
	    const hi1 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
	    const lo2 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
	    const hi2 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
	    const lo3 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
	    const hi3 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
	    const lo4 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
	    const hi4 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

	    let lo = lo4 ^ (lo1 << 1 | hi1 >>> 31);
	    let hi = hi4 ^ (hi1 << 1 | lo1 >>> 31);
	    const t1slo0 = s[0] ^ lo;
	    const t1shi0 = s[1] ^ hi;
	    const t1slo5 = s[10] ^ lo;
	    const t1shi5 = s[11] ^ hi;
	    const t1slo10 = s[20] ^ lo;
	    const t1shi10 = s[21] ^ hi;
	    const t1slo15 = s[30] ^ lo;
	    const t1shi15 = s[31] ^ hi;
	    const t1slo20 = s[40] ^ lo;
	    const t1shi20 = s[41] ^ hi;
	    lo = lo0 ^ (lo2 << 1 | hi2 >>> 31);
	    hi = hi0 ^ (hi2 << 1 | lo2 >>> 31);
	    const t1slo1 = s[2] ^ lo;
	    const t1shi1 = s[3] ^ hi;
	    const t1slo6 = s[12] ^ lo;
	    const t1shi6 = s[13] ^ hi;
	    const t1slo11 = s[22] ^ lo;
	    const t1shi11 = s[23] ^ hi;
	    const t1slo16 = s[32] ^ lo;
	    const t1shi16 = s[33] ^ hi;
	    const t1slo21 = s[42] ^ lo;
	    const t1shi21 = s[43] ^ hi;
	    lo = lo1 ^ (lo3 << 1 | hi3 >>> 31);
	    hi = hi1 ^ (hi3 << 1 | lo3 >>> 31);
	    const t1slo2 = s[4] ^ lo;
	    const t1shi2 = s[5] ^ hi;
	    const t1slo7 = s[14] ^ lo;
	    const t1shi7 = s[15] ^ hi;
	    const t1slo12 = s[24] ^ lo;
	    const t1shi12 = s[25] ^ hi;
	    const t1slo17 = s[34] ^ lo;
	    const t1shi17 = s[35] ^ hi;
	    const t1slo22 = s[44] ^ lo;
	    const t1shi22 = s[45] ^ hi;
	    lo = lo2 ^ (lo4 << 1 | hi4 >>> 31);
	    hi = hi2 ^ (hi4 << 1 | lo4 >>> 31);
	    const t1slo3 = s[6] ^ lo;
	    const t1shi3 = s[7] ^ hi;
	    const t1slo8 = s[16] ^ lo;
	    const t1shi8 = s[17] ^ hi;
	    const t1slo13 = s[26] ^ lo;
	    const t1shi13 = s[27] ^ hi;
	    const t1slo18 = s[36] ^ lo;
	    const t1shi18 = s[37] ^ hi;
	    const t1slo23 = s[46] ^ lo;
	    const t1shi23 = s[47] ^ hi;
	    lo = lo3 ^ (lo0 << 1 | hi0 >>> 31);
	    hi = hi3 ^ (hi0 << 1 | lo0 >>> 31);
	    const t1slo4 = s[8] ^ lo;
	    const t1shi4 = s[9] ^ hi;
	    const t1slo9 = s[18] ^ lo;
	    const t1shi9 = s[19] ^ hi;
	    const t1slo14 = s[28] ^ lo;
	    const t1shi14 = s[29] ^ hi;
	    const t1slo19 = s[38] ^ lo;
	    const t1shi19 = s[39] ^ hi;
	    const t1slo24 = s[48] ^ lo;
	    const t1shi24 = s[49] ^ hi;

	    // rho & pi
	    const t2slo0 = t1slo0;
	    const t2shi0 = t1shi0;
	    const t2slo16 = (t1shi5 << 4 | t1slo5 >>> 28);
	    const t2shi16 = (t1slo5 << 4 | t1shi5 >>> 28);
	    const t2slo7 = (t1slo10 << 3 | t1shi10 >>> 29);
	    const t2shi7 = (t1shi10 << 3 | t1slo10 >>> 29);
	    const t2slo23 = (t1shi15 << 9 | t1slo15 >>> 23);
	    const t2shi23 = (t1slo15 << 9 | t1shi15 >>> 23);
	    const t2slo14 = (t1slo20 << 18 | t1shi20 >>> 14);
	    const t2shi14 = (t1shi20 << 18 | t1slo20 >>> 14);
	    const t2slo10 = (t1slo1 << 1 | t1shi1 >>> 31);
	    const t2shi10 = (t1shi1 << 1 | t1slo1 >>> 31);
	    const t2slo1 = (t1shi6 << 12 | t1slo6 >>> 20);
	    const t2shi1 = (t1slo6 << 12 | t1shi6 >>> 20);
	    const t2slo17 = (t1slo11 << 10 | t1shi11 >>> 22);
	    const t2shi17 = (t1shi11 << 10 | t1slo11 >>> 22);
	    const t2slo8 = (t1shi16 << 13 | t1slo16 >>> 19);
	    const t2shi8 = (t1slo16 << 13 | t1shi16 >>> 19);
	    const t2slo24 = (t1slo21 << 2 | t1shi21 >>> 30);
	    const t2shi24 = (t1shi21 << 2 | t1slo21 >>> 30);
	    const t2slo20 = (t1shi2 << 30 | t1slo2 >>> 2);
	    const t2shi20 = (t1slo2 << 30 | t1shi2 >>> 2);
	    const t2slo11 = (t1slo7 << 6 | t1shi7 >>> 26);
	    const t2shi11 = (t1shi7 << 6 | t1slo7 >>> 26);
	    const t2slo2 = (t1shi12 << 11 | t1slo12 >>> 21);
	    const t2shi2 = (t1slo12 << 11 | t1shi12 >>> 21);
	    const t2slo18 = (t1slo17 << 15 | t1shi17 >>> 17);
	    const t2shi18 = (t1shi17 << 15 | t1slo17 >>> 17);
	    const t2slo9 = (t1shi22 << 29 | t1slo22 >>> 3);
	    const t2shi9 = (t1slo22 << 29 | t1shi22 >>> 3);
	    const t2slo5 = (t1slo3 << 28 | t1shi3 >>> 4);
	    const t2shi5 = (t1shi3 << 28 | t1slo3 >>> 4);
	    const t2slo21 = (t1shi8 << 23 | t1slo8 >>> 9);
	    const t2shi21 = (t1slo8 << 23 | t1shi8 >>> 9);
	    const t2slo12 = (t1slo13 << 25 | t1shi13 >>> 7);
	    const t2shi12 = (t1shi13 << 25 | t1slo13 >>> 7);
	    const t2slo3 = (t1slo18 << 21 | t1shi18 >>> 11);
	    const t2shi3 = (t1shi18 << 21 | t1slo18 >>> 11);
	    const t2slo19 = (t1shi23 << 24 | t1slo23 >>> 8);
	    const t2shi19 = (t1slo23 << 24 | t1shi23 >>> 8);
	    const t2slo15 = (t1slo4 << 27 | t1shi4 >>> 5);
	    const t2shi15 = (t1shi4 << 27 | t1slo4 >>> 5);
	    const t2slo6 = (t1slo9 << 20 | t1shi9 >>> 12);
	    const t2shi6 = (t1shi9 << 20 | t1slo9 >>> 12);
	    const t2slo22 = (t1shi14 << 7 | t1slo14 >>> 25);
	    const t2shi22 = (t1slo14 << 7 | t1shi14 >>> 25);
	    const t2slo13 = (t1slo19 << 8 | t1shi19 >>> 24);
	    const t2shi13 = (t1shi19 << 8 | t1slo19 >>> 24);
	    const t2slo4 = (t1slo24 << 14 | t1shi24 >>> 18);
	    const t2shi4 = (t1shi24 << 14 | t1slo24 >>> 18);

	    // chi
	    s[0] = t2slo0 ^ (~t2slo1 & t2slo2);
	    s[1] = t2shi0 ^ (~t2shi1 & t2shi2);
	    s[10] = t2slo5 ^ (~t2slo6 & t2slo7);
	    s[11] = t2shi5 ^ (~t2shi6 & t2shi7);
	    s[20] = t2slo10 ^ (~t2slo11 & t2slo12);
	    s[21] = t2shi10 ^ (~t2shi11 & t2shi12);
	    s[30] = t2slo15 ^ (~t2slo16 & t2slo17);
	    s[31] = t2shi15 ^ (~t2shi16 & t2shi17);
	    s[40] = t2slo20 ^ (~t2slo21 & t2slo22);
	    s[41] = t2shi20 ^ (~t2shi21 & t2shi22);
	    s[2] = t2slo1 ^ (~t2slo2 & t2slo3);
	    s[3] = t2shi1 ^ (~t2shi2 & t2shi3);
	    s[12] = t2slo6 ^ (~t2slo7 & t2slo8);
	    s[13] = t2shi6 ^ (~t2shi7 & t2shi8);
	    s[22] = t2slo11 ^ (~t2slo12 & t2slo13);
	    s[23] = t2shi11 ^ (~t2shi12 & t2shi13);
	    s[32] = t2slo16 ^ (~t2slo17 & t2slo18);
	    s[33] = t2shi16 ^ (~t2shi17 & t2shi18);
	    s[42] = t2slo21 ^ (~t2slo22 & t2slo23);
	    s[43] = t2shi21 ^ (~t2shi22 & t2shi23);
	    s[4] = t2slo2 ^ (~t2slo3 & t2slo4);
	    s[5] = t2shi2 ^ (~t2shi3 & t2shi4);
	    s[14] = t2slo7 ^ (~t2slo8 & t2slo9);
	    s[15] = t2shi7 ^ (~t2shi8 & t2shi9);
	    s[24] = t2slo12 ^ (~t2slo13 & t2slo14);
	    s[25] = t2shi12 ^ (~t2shi13 & t2shi14);
	    s[34] = t2slo17 ^ (~t2slo18 & t2slo19);
	    s[35] = t2shi17 ^ (~t2shi18 & t2shi19);
	    s[44] = t2slo22 ^ (~t2slo23 & t2slo24);
	    s[45] = t2shi22 ^ (~t2shi23 & t2shi24);
	    s[6] = t2slo3 ^ (~t2slo4 & t2slo0);
	    s[7] = t2shi3 ^ (~t2shi4 & t2shi0);
	    s[16] = t2slo8 ^ (~t2slo9 & t2slo5);
	    s[17] = t2shi8 ^ (~t2shi9 & t2shi5);
	    s[26] = t2slo13 ^ (~t2slo14 & t2slo10);
	    s[27] = t2shi13 ^ (~t2shi14 & t2shi10);
	    s[36] = t2slo18 ^ (~t2slo19 & t2slo15);
	    s[37] = t2shi18 ^ (~t2shi19 & t2shi15);
	    s[46] = t2slo23 ^ (~t2slo24 & t2slo20);
	    s[47] = t2shi23 ^ (~t2shi24 & t2shi20);
	    s[8] = t2slo4 ^ (~t2slo0 & t2slo1);
	    s[9] = t2shi4 ^ (~t2shi0 & t2shi1);
	    s[18] = t2slo9 ^ (~t2slo5 & t2slo6);
	    s[19] = t2shi9 ^ (~t2shi5 & t2shi6);
	    s[28] = t2slo14 ^ (~t2slo10 & t2slo11);
	    s[29] = t2shi14 ^ (~t2shi10 & t2shi11);
	    s[38] = t2slo19 ^ (~t2slo15 & t2slo16);
	    s[39] = t2shi19 ^ (~t2shi15 & t2shi16);
	    s[48] = t2slo24 ^ (~t2slo20 & t2slo21);
	    s[49] = t2shi24 ^ (~t2shi20 & t2shi21);

	    // iota
	    s[0] ^= P1600_ROUND_CONSTANTS[round * 2];
	    s[1] ^= P1600_ROUND_CONSTANTS[round * 2 + 1];
	  }
	};

	const keccakState = keccakStateUnroll;

	function Keccak () {
	  // much faster than `new Array(50)`
	  this.state = [
	    0, 0, 0, 0, 0,
	    0, 0, 0, 0, 0,
	    0, 0, 0, 0, 0,
	    0, 0, 0, 0, 0,
	    0, 0, 0, 0, 0
	  ];

	  this.blockSize = null;
	  this.count = 0;
	  this.squeezing = false;
	}

	Keccak.prototype.initialize = function (rate, capacity) {
	  for (let i = 0; i < 50; ++i) this.state[i] = 0;
	  this.blockSize = rate / 8;
	  this.count = 0;
	  this.squeezing = false;
	};

	Keccak.prototype.absorb = function (data) {
	  for (let i = 0; i < data.length; ++i) {
	    this.state[~~(this.count / 4)] ^= data[i] << (8 * (this.count % 4));
	    this.count += 1;
	    if (this.count === this.blockSize) {
	      keccakState.p1600(this.state);
	      this.count = 0;
	    }
	  }
	};

	Keccak.prototype.absorbLastFewBits = function (bits) {
	  this.state[~~(this.count / 4)] ^= bits << (8 * (this.count % 4));
	  if ((bits & 0x80) !== 0 && this.count === (this.blockSize - 1)) keccakState.p1600(this.state);
	  this.state[~~((this.blockSize - 1) / 4)] ^= 0x80 << (8 * ((this.blockSize - 1) % 4));
	  keccakState.p1600(this.state);
	  this.count = 0;
	  this.squeezing = true;
	};

	Keccak.prototype.squeeze = function (length) {
	  if (!this.squeezing) this.absorbLastFewBits(0x01);

	  const output = Buffer$d.alloc(length);
	  for (let i = 0; i < length; ++i) {
	    output[i] = (this.state[~~(this.count / 4)] >>> (8 * (this.count % 4))) & 0xff;
	    this.count += 1;
	    if (this.count === this.blockSize) {
	      keccakState.p1600(this.state);
	      this.count = 0;
	    }
	  }

	  return output
	};

	Keccak.prototype.copy = function (dest) {
	  for (let i = 0; i < 50; ++i) dest.state[i] = this.state[i];
	  dest.blockSize = this.blockSize;
	  dest.count = this.count;
	  dest.squeezing = this.squeezing;
	};

	var keccak = Keccak;

	var js = api(keccak);

	Object.defineProperty(keccak$2, "__esModule", { value: true });
	var hash_utils_1 = hashUtils;
	var createKeccakHash = js;
	keccak$2.keccak224 = hash_utils_1.createHashFunction(function () {
	    return createKeccakHash("keccak224");
	});
	keccak$2.keccak256 = hash_utils_1.createHashFunction(function () {
	    return createKeccakHash("keccak256");
	});
	keccak$2.keccak384 = hash_utils_1.createHashFunction(function () {
	    return createKeccakHash("keccak384");
	});
	keccak$2.keccak512 = hash_utils_1.createHashFunction(function () {
	    return createKeccakHash("keccak512");
	});

	var Buffer$b = safeBufferExports.Buffer;
	var Transform$2 = readableBrowserExports.Transform;
	var inherits$a = inherits_browserExports;

	function throwIfNotStringOrBuffer (val, prefix) {
	  if (!Buffer$b.isBuffer(val) && typeof val !== 'string') {
	    throw new TypeError(prefix + ' must be a string or a buffer')
	  }
	}

	function HashBase$2 (blockSize) {
	  Transform$2.call(this);

	  this._block = Buffer$b.allocUnsafe(blockSize);
	  this._blockSize = blockSize;
	  this._blockOffset = 0;
	  this._length = [0, 0, 0, 0];

	  this._finalized = false;
	}

	inherits$a(HashBase$2, Transform$2);

	HashBase$2.prototype._transform = function (chunk, encoding, callback) {
	  var error = null;
	  try {
	    this.update(chunk, encoding);
	  } catch (err) {
	    error = err;
	  }

	  callback(error);
	};

	HashBase$2.prototype._flush = function (callback) {
	  var error = null;
	  try {
	    this.push(this.digest());
	  } catch (err) {
	    error = err;
	  }

	  callback(error);
	};

	HashBase$2.prototype.update = function (data, encoding) {
	  throwIfNotStringOrBuffer(data, 'Data');
	  if (this._finalized) throw new Error('Digest already called')
	  if (!Buffer$b.isBuffer(data)) data = Buffer$b.from(data, encoding);

	  // consume data
	  var block = this._block;
	  var offset = 0;
	  while (this._blockOffset + data.length - offset >= this._blockSize) {
	    for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++];
	    this._update();
	    this._blockOffset = 0;
	  }
	  while (offset < data.length) block[this._blockOffset++] = data[offset++];

	  // update length
	  for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
	    this._length[j] += carry;
	    carry = (this._length[j] / 0x0100000000) | 0;
	    if (carry > 0) this._length[j] -= 0x0100000000 * carry;
	  }

	  return this
	};

	HashBase$2.prototype._update = function () {
	  throw new Error('_update is not implemented')
	};

	HashBase$2.prototype.digest = function (encoding) {
	  if (this._finalized) throw new Error('Digest already called')
	  this._finalized = true;

	  var digest = this._digest();
	  if (encoding !== undefined) digest = digest.toString(encoding);

	  // reset state
	  this._block.fill(0);
	  this._blockOffset = 0;
	  for (var i = 0; i < 4; ++i) this._length[i] = 0;

	  return digest
	};

	HashBase$2.prototype._digest = function () {
	  throw new Error('_digest is not implemented')
	};

	var hashBase = HashBase$2;

	var inherits$9 = inherits_browserExports;
	var HashBase$1 = hashBase;
	var Buffer$a = safeBufferExports.Buffer;

	var ARRAY16$1 = new Array(16);

	function MD5$1 () {
	  HashBase$1.call(this, 64);

	  // state
	  this._a = 0x67452301;
	  this._b = 0xefcdab89;
	  this._c = 0x98badcfe;
	  this._d = 0x10325476;
	}

	inherits$9(MD5$1, HashBase$1);

	MD5$1.prototype._update = function () {
	  var M = ARRAY16$1;
	  for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4);

	  var a = this._a;
	  var b = this._b;
	  var c = this._c;
	  var d = this._d;

	  a = fnF(a, b, c, d, M[0], 0xd76aa478, 7);
	  d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12);
	  c = fnF(c, d, a, b, M[2], 0x242070db, 17);
	  b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22);
	  a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7);
	  d = fnF(d, a, b, c, M[5], 0x4787c62a, 12);
	  c = fnF(c, d, a, b, M[6], 0xa8304613, 17);
	  b = fnF(b, c, d, a, M[7], 0xfd469501, 22);
	  a = fnF(a, b, c, d, M[8], 0x698098d8, 7);
	  d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12);
	  c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17);
	  b = fnF(b, c, d, a, M[11], 0x895cd7be, 22);
	  a = fnF(a, b, c, d, M[12], 0x6b901122, 7);
	  d = fnF(d, a, b, c, M[13], 0xfd987193, 12);
	  c = fnF(c, d, a, b, M[14], 0xa679438e, 17);
	  b = fnF(b, c, d, a, M[15], 0x49b40821, 22);

	  a = fnG(a, b, c, d, M[1], 0xf61e2562, 5);
	  d = fnG(d, a, b, c, M[6], 0xc040b340, 9);
	  c = fnG(c, d, a, b, M[11], 0x265e5a51, 14);
	  b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20);
	  a = fnG(a, b, c, d, M[5], 0xd62f105d, 5);
	  d = fnG(d, a, b, c, M[10], 0x02441453, 9);
	  c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14);
	  b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20);
	  a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5);
	  d = fnG(d, a, b, c, M[14], 0xc33707d6, 9);
	  c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14);
	  b = fnG(b, c, d, a, M[8], 0x455a14ed, 20);
	  a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5);
	  d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9);
	  c = fnG(c, d, a, b, M[7], 0x676f02d9, 14);
	  b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20);

	  a = fnH(a, b, c, d, M[5], 0xfffa3942, 4);
	  d = fnH(d, a, b, c, M[8], 0x8771f681, 11);
	  c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16);
	  b = fnH(b, c, d, a, M[14], 0xfde5380c, 23);
	  a = fnH(a, b, c, d, M[1], 0xa4beea44, 4);
	  d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11);
	  c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16);
	  b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23);
	  a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4);
	  d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11);
	  c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16);
	  b = fnH(b, c, d, a, M[6], 0x04881d05, 23);
	  a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4);
	  d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11);
	  c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16);
	  b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23);

	  a = fnI(a, b, c, d, M[0], 0xf4292244, 6);
	  d = fnI(d, a, b, c, M[7], 0x432aff97, 10);
	  c = fnI(c, d, a, b, M[14], 0xab9423a7, 15);
	  b = fnI(b, c, d, a, M[5], 0xfc93a039, 21);
	  a = fnI(a, b, c, d, M[12], 0x655b59c3, 6);
	  d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10);
	  c = fnI(c, d, a, b, M[10], 0xffeff47d, 15);
	  b = fnI(b, c, d, a, M[1], 0x85845dd1, 21);
	  a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6);
	  d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10);
	  c = fnI(c, d, a, b, M[6], 0xa3014314, 15);
	  b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21);
	  a = fnI(a, b, c, d, M[4], 0xf7537e82, 6);
	  d = fnI(d, a, b, c, M[11], 0xbd3af235, 10);
	  c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15);
	  b = fnI(b, c, d, a, M[9], 0xeb86d391, 21);

	  this._a = (this._a + a) | 0;
	  this._b = (this._b + b) | 0;
	  this._c = (this._c + c) | 0;
	  this._d = (this._d + d) | 0;
	};

	MD5$1.prototype._digest = function () {
	  // create padding and handle blocks
	  this._block[this._blockOffset++] = 0x80;
	  if (this._blockOffset > 56) {
	    this._block.fill(0, this._blockOffset, 64);
	    this._update();
	    this._blockOffset = 0;
	  }

	  this._block.fill(0, this._blockOffset, 56);
	  this._block.writeUInt32LE(this._length[0], 56);
	  this._block.writeUInt32LE(this._length[1], 60);
	  this._update();

	  // produce result
	  var buffer = Buffer$a.allocUnsafe(16);
	  buffer.writeInt32LE(this._a, 0);
	  buffer.writeInt32LE(this._b, 4);
	  buffer.writeInt32LE(this._c, 8);
	  buffer.writeInt32LE(this._d, 12);
	  return buffer
	};

	function rotl$1 (x, n) {
	  return (x << n) | (x >>> (32 - n))
	}

	function fnF (a, b, c, d, m, k, s) {
	  return (rotl$1((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + b) | 0
	}

	function fnG (a, b, c, d, m, k, s) {
	  return (rotl$1((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + b) | 0
	}

	function fnH (a, b, c, d, m, k, s) {
	  return (rotl$1((a + (b ^ c ^ d) + m + k) | 0, s) + b) | 0
	}

	function fnI (a, b, c, d, m, k, s) {
	  return (rotl$1((a + ((c ^ (b | (~d)))) + m + k) | 0, s) + b) | 0
	}

	var md5_js = MD5$1;

	var Buffer$9 = require$$2$1.Buffer;
	var inherits$8 = inherits_browserExports;
	var HashBase = hashBase;

	var ARRAY16 = new Array(16);

	var zl = [
	  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
	  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
	  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
	  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
	  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
	];

	var zr = [
	  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
	  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
	  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
	  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
	  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
	];

	var sl = [
	  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
	  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
	  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
	  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
	  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
	];

	var sr = [
	  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
	  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
	  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
	  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
	  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
	];

	var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e];
	var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000];

	function RIPEMD160$1 () {
	  HashBase.call(this, 64);

	  // state
	  this._a = 0x67452301;
	  this._b = 0xefcdab89;
	  this._c = 0x98badcfe;
	  this._d = 0x10325476;
	  this._e = 0xc3d2e1f0;
	}

	inherits$8(RIPEMD160$1, HashBase);

	RIPEMD160$1.prototype._update = function () {
	  var words = ARRAY16;
	  for (var j = 0; j < 16; ++j) words[j] = this._block.readInt32LE(j * 4);

	  var al = this._a | 0;
	  var bl = this._b | 0;
	  var cl = this._c | 0;
	  var dl = this._d | 0;
	  var el = this._e | 0;

	  var ar = this._a | 0;
	  var br = this._b | 0;
	  var cr = this._c | 0;
	  var dr = this._d | 0;
	  var er = this._e | 0;

	  // computation
	  for (var i = 0; i < 80; i += 1) {
	    var tl;
	    var tr;
	    if (i < 16) {
	      tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i]);
	      tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i]);
	    } else if (i < 32) {
	      tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i]);
	      tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i]);
	    } else if (i < 48) {
	      tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i]);
	      tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i]);
	    } else if (i < 64) {
	      tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i]);
	      tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i]);
	    } else { // if (i<80) {
	      tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i]);
	      tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i]);
	    }

	    al = el;
	    el = dl;
	    dl = rotl(cl, 10);
	    cl = bl;
	    bl = tl;

	    ar = er;
	    er = dr;
	    dr = rotl(cr, 10);
	    cr = br;
	    br = tr;
	  }

	  // update state
	  var t = (this._b + cl + dr) | 0;
	  this._b = (this._c + dl + er) | 0;
	  this._c = (this._d + el + ar) | 0;
	  this._d = (this._e + al + br) | 0;
	  this._e = (this._a + bl + cr) | 0;
	  this._a = t;
	};

	RIPEMD160$1.prototype._digest = function () {
	  // create padding and handle blocks
	  this._block[this._blockOffset++] = 0x80;
	  if (this._blockOffset > 56) {
	    this._block.fill(0, this._blockOffset, 64);
	    this._update();
	    this._blockOffset = 0;
	  }

	  this._block.fill(0, this._blockOffset, 56);
	  this._block.writeUInt32LE(this._length[0], 56);
	  this._block.writeUInt32LE(this._length[1], 60);
	  this._update();

	  // produce result
	  var buffer = Buffer$9.alloc ? Buffer$9.alloc(20) : new Buffer$9(20);
	  buffer.writeInt32LE(this._a, 0);
	  buffer.writeInt32LE(this._b, 4);
	  buffer.writeInt32LE(this._c, 8);
	  buffer.writeInt32LE(this._d, 12);
	  buffer.writeInt32LE(this._e, 16);
	  return buffer
	};

	function rotl (x, n) {
	  return (x << n) | (x >>> (32 - n))
	}

	function fn1 (a, b, c, d, e, m, k, s) {
	  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0
	}

	function fn2 (a, b, c, d, e, m, k, s) {
	  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + e) | 0
	}

	function fn3 (a, b, c, d, e, m, k, s) {
	  return (rotl((a + ((b | (~c)) ^ d) + m + k) | 0, s) + e) | 0
	}

	function fn4 (a, b, c, d, e, m, k, s) {
	  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + e) | 0
	}

	function fn5 (a, b, c, d, e, m, k, s) {
	  return (rotl((a + (b ^ (c | (~d))) + m + k) | 0, s) + e) | 0
	}

	var ripemd160$1 = RIPEMD160$1;

	var sha_jsExports = {};
	var sha_js = {
	  get exports(){ return sha_jsExports; },
	  set exports(v){ sha_jsExports = v; },
	};

	var Buffer$8 = safeBufferExports.Buffer;

	// prototype class for hash functions
	function Hash$7 (blockSize, finalSize) {
	  this._block = Buffer$8.alloc(blockSize);
	  this._finalSize = finalSize;
	  this._blockSize = blockSize;
	  this._len = 0;
	}

	Hash$7.prototype.update = function (data, enc) {
	  if (typeof data === 'string') {
	    enc = enc || 'utf8';
	    data = Buffer$8.from(data, enc);
	  }

	  var block = this._block;
	  var blockSize = this._blockSize;
	  var length = data.length;
	  var accum = this._len;

	  for (var offset = 0; offset < length;) {
	    var assigned = accum % blockSize;
	    var remainder = Math.min(length - offset, blockSize - assigned);

	    for (var i = 0; i < remainder; i++) {
	      block[assigned + i] = data[offset + i];
	    }

	    accum += remainder;
	    offset += remainder;

	    if ((accum % blockSize) === 0) {
	      this._update(block);
	    }
	  }

	  this._len += length;
	  return this
	};

	Hash$7.prototype.digest = function (enc) {
	  var rem = this._len % this._blockSize;

	  this._block[rem] = 0x80;

	  // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
	  // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
	  this._block.fill(0, rem + 1);

	  if (rem >= this._finalSize) {
	    this._update(this._block);
	    this._block.fill(0);
	  }

	  var bits = this._len * 8;

	  // uint32
	  if (bits <= 0xffffffff) {
	    this._block.writeUInt32BE(bits, this._blockSize - 4);

	  // uint64
	  } else {
	    var lowBits = (bits & 0xffffffff) >>> 0;
	    var highBits = (bits - lowBits) / 0x100000000;

	    this._block.writeUInt32BE(highBits, this._blockSize - 8);
	    this._block.writeUInt32BE(lowBits, this._blockSize - 4);
	  }

	  this._update(this._block);
	  var hash = this._hash();

	  return enc ? hash.toString(enc) : hash
	};

	Hash$7.prototype._update = function () {
	  throw new Error('_update must be implemented by subclass')
	};

	var hash = Hash$7;

	/*
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
	 * in FIPS PUB 180-1
	 * This source code is derived from sha1.js of the same repository.
	 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
	 * operation was added.
	 */

	var inherits$7 = inherits_browserExports;
	var Hash$6 = hash;
	var Buffer$7 = safeBufferExports.Buffer;

	var K$3 = [
	  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
	];

	var W$5 = new Array(80);

	function Sha () {
	  this.init();
	  this._w = W$5;

	  Hash$6.call(this, 64, 56);
	}

	inherits$7(Sha, Hash$6);

	Sha.prototype.init = function () {
	  this._a = 0x67452301;
	  this._b = 0xefcdab89;
	  this._c = 0x98badcfe;
	  this._d = 0x10325476;
	  this._e = 0xc3d2e1f0;

	  return this
	};

	function rotl5$1 (num) {
	  return (num << 5) | (num >>> 27)
	}

	function rotl30$1 (num) {
	  return (num << 30) | (num >>> 2)
	}

	function ft$1 (s, b, c, d) {
	  if (s === 0) return (b & c) | ((~b) & d)
	  if (s === 2) return (b & c) | (b & d) | (c & d)
	  return b ^ c ^ d
	}

	Sha.prototype._update = function (M) {
	  var W = this._w;

	  var a = this._a | 0;
	  var b = this._b | 0;
	  var c = this._c | 0;
	  var d = this._d | 0;
	  var e = this._e | 0;

	  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4);
	  for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];

	  for (var j = 0; j < 80; ++j) {
	    var s = ~~(j / 20);
	    var t = (rotl5$1(a) + ft$1(s, b, c, d) + e + W[j] + K$3[s]) | 0;

	    e = d;
	    d = c;
	    c = rotl30$1(b);
	    b = a;
	    a = t;
	  }

	  this._a = (a + this._a) | 0;
	  this._b = (b + this._b) | 0;
	  this._c = (c + this._c) | 0;
	  this._d = (d + this._d) | 0;
	  this._e = (e + this._e) | 0;
	};

	Sha.prototype._hash = function () {
	  var H = Buffer$7.allocUnsafe(20);

	  H.writeInt32BE(this._a | 0, 0);
	  H.writeInt32BE(this._b | 0, 4);
	  H.writeInt32BE(this._c | 0, 8);
	  H.writeInt32BE(this._d | 0, 12);
	  H.writeInt32BE(this._e | 0, 16);

	  return H
	};

	var sha$1 = Sha;

	/*
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
	 * in FIPS PUB 180-1
	 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for details.
	 */

	var inherits$6 = inherits_browserExports;
	var Hash$5 = hash;
	var Buffer$6 = safeBufferExports.Buffer;

	var K$2 = [
	  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
	];

	var W$4 = new Array(80);

	function Sha1 () {
	  this.init();
	  this._w = W$4;

	  Hash$5.call(this, 64, 56);
	}

	inherits$6(Sha1, Hash$5);

	Sha1.prototype.init = function () {
	  this._a = 0x67452301;
	  this._b = 0xefcdab89;
	  this._c = 0x98badcfe;
	  this._d = 0x10325476;
	  this._e = 0xc3d2e1f0;

	  return this
	};

	function rotl1 (num) {
	  return (num << 1) | (num >>> 31)
	}

	function rotl5 (num) {
	  return (num << 5) | (num >>> 27)
	}

	function rotl30 (num) {
	  return (num << 30) | (num >>> 2)
	}

	function ft (s, b, c, d) {
	  if (s === 0) return (b & c) | ((~b) & d)
	  if (s === 2) return (b & c) | (b & d) | (c & d)
	  return b ^ c ^ d
	}

	Sha1.prototype._update = function (M) {
	  var W = this._w;

	  var a = this._a | 0;
	  var b = this._b | 0;
	  var c = this._c | 0;
	  var d = this._d | 0;
	  var e = this._e | 0;

	  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4);
	  for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]);

	  for (var j = 0; j < 80; ++j) {
	    var s = ~~(j / 20);
	    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K$2[s]) | 0;

	    e = d;
	    d = c;
	    c = rotl30(b);
	    b = a;
	    a = t;
	  }

	  this._a = (a + this._a) | 0;
	  this._b = (b + this._b) | 0;
	  this._c = (c + this._c) | 0;
	  this._d = (d + this._d) | 0;
	  this._e = (e + this._e) | 0;
	};

	Sha1.prototype._hash = function () {
	  var H = Buffer$6.allocUnsafe(20);

	  H.writeInt32BE(this._a | 0, 0);
	  H.writeInt32BE(this._b | 0, 4);
	  H.writeInt32BE(this._c | 0, 8);
	  H.writeInt32BE(this._d | 0, 12);
	  H.writeInt32BE(this._e | 0, 16);

	  return H
	};

	var sha1 = Sha1;

	/**
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
	 * in FIPS 180-2
	 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 *
	 */

	var inherits$5 = inherits_browserExports;
	var Hash$4 = hash;
	var Buffer$5 = safeBufferExports.Buffer;

	var K$1 = [
	  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
	  0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
	  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
	  0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
	  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
	  0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
	  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
	  0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
	  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
	  0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
	  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
	  0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
	  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
	  0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
	  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
	  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
	];

	var W$3 = new Array(64);

	function Sha256$3 () {
	  this.init();

	  this._w = W$3; // new Array(64)

	  Hash$4.call(this, 64, 56);
	}

	inherits$5(Sha256$3, Hash$4);

	Sha256$3.prototype.init = function () {
	  this._a = 0x6a09e667;
	  this._b = 0xbb67ae85;
	  this._c = 0x3c6ef372;
	  this._d = 0xa54ff53a;
	  this._e = 0x510e527f;
	  this._f = 0x9b05688c;
	  this._g = 0x1f83d9ab;
	  this._h = 0x5be0cd19;

	  return this
	};

	function ch (x, y, z) {
	  return z ^ (x & (y ^ z))
	}

	function maj$1 (x, y, z) {
	  return (x & y) | (z & (x | y))
	}

	function sigma0$1 (x) {
	  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
	}

	function sigma1$1 (x) {
	  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
	}

	function gamma0 (x) {
	  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
	}

	function gamma1 (x) {
	  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
	}

	Sha256$3.prototype._update = function (M) {
	  var W = this._w;

	  var a = this._a | 0;
	  var b = this._b | 0;
	  var c = this._c | 0;
	  var d = this._d | 0;
	  var e = this._e | 0;
	  var f = this._f | 0;
	  var g = this._g | 0;
	  var h = this._h | 0;

	  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4);
	  for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0;

	  for (var j = 0; j < 64; ++j) {
	    var T1 = (h + sigma1$1(e) + ch(e, f, g) + K$1[j] + W[j]) | 0;
	    var T2 = (sigma0$1(a) + maj$1(a, b, c)) | 0;

	    h = g;
	    g = f;
	    f = e;
	    e = (d + T1) | 0;
	    d = c;
	    c = b;
	    b = a;
	    a = (T1 + T2) | 0;
	  }

	  this._a = (a + this._a) | 0;
	  this._b = (b + this._b) | 0;
	  this._c = (c + this._c) | 0;
	  this._d = (d + this._d) | 0;
	  this._e = (e + this._e) | 0;
	  this._f = (f + this._f) | 0;
	  this._g = (g + this._g) | 0;
	  this._h = (h + this._h) | 0;
	};

	Sha256$3.prototype._hash = function () {
	  var H = Buffer$5.allocUnsafe(32);

	  H.writeInt32BE(this._a, 0);
	  H.writeInt32BE(this._b, 4);
	  H.writeInt32BE(this._c, 8);
	  H.writeInt32BE(this._d, 12);
	  H.writeInt32BE(this._e, 16);
	  H.writeInt32BE(this._f, 20);
	  H.writeInt32BE(this._g, 24);
	  H.writeInt32BE(this._h, 28);

	  return H
	};

	var sha256$1 = Sha256$3;

	/**
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
	 * in FIPS 180-2
	 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 *
	 */

	var inherits$4 = inherits_browserExports;
	var Sha256$2 = sha256$1;
	var Hash$3 = hash;
	var Buffer$4 = safeBufferExports.Buffer;

	var W$2 = new Array(64);

	function Sha224 () {
	  this.init();

	  this._w = W$2; // new Array(64)

	  Hash$3.call(this, 64, 56);
	}

	inherits$4(Sha224, Sha256$2);

	Sha224.prototype.init = function () {
	  this._a = 0xc1059ed8;
	  this._b = 0x367cd507;
	  this._c = 0x3070dd17;
	  this._d = 0xf70e5939;
	  this._e = 0xffc00b31;
	  this._f = 0x68581511;
	  this._g = 0x64f98fa7;
	  this._h = 0xbefa4fa4;

	  return this
	};

	Sha224.prototype._hash = function () {
	  var H = Buffer$4.allocUnsafe(28);

	  H.writeInt32BE(this._a, 0);
	  H.writeInt32BE(this._b, 4);
	  H.writeInt32BE(this._c, 8);
	  H.writeInt32BE(this._d, 12);
	  H.writeInt32BE(this._e, 16);
	  H.writeInt32BE(this._f, 20);
	  H.writeInt32BE(this._g, 24);

	  return H
	};

	var sha224 = Sha224;

	var inherits$3 = inherits_browserExports;
	var Hash$2 = hash;
	var Buffer$3 = safeBufferExports.Buffer;

	var K = [
	  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
	  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
	  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
	  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
	  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
	  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
	  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
	  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
	  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
	  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
	  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
	  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
	  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
	  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
	  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
	  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
	  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
	  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
	  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
	  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
	  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
	  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
	  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
	  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
	  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
	  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
	  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
	  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
	  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
	  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
	  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
	  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
	  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
	  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
	  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
	  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
	  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
	  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
	  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
	  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
	];

	var W$1 = new Array(160);

	function Sha512 () {
	  this.init();
	  this._w = W$1;

	  Hash$2.call(this, 128, 112);
	}

	inherits$3(Sha512, Hash$2);

	Sha512.prototype.init = function () {
	  this._ah = 0x6a09e667;
	  this._bh = 0xbb67ae85;
	  this._ch = 0x3c6ef372;
	  this._dh = 0xa54ff53a;
	  this._eh = 0x510e527f;
	  this._fh = 0x9b05688c;
	  this._gh = 0x1f83d9ab;
	  this._hh = 0x5be0cd19;

	  this._al = 0xf3bcc908;
	  this._bl = 0x84caa73b;
	  this._cl = 0xfe94f82b;
	  this._dl = 0x5f1d36f1;
	  this._el = 0xade682d1;
	  this._fl = 0x2b3e6c1f;
	  this._gl = 0xfb41bd6b;
	  this._hl = 0x137e2179;

	  return this
	};

	function Ch (x, y, z) {
	  return z ^ (x & (y ^ z))
	}

	function maj (x, y, z) {
	  return (x & y) | (z & (x | y))
	}

	function sigma0 (x, xl) {
	  return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
	}

	function sigma1 (x, xl) {
	  return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
	}

	function Gamma0 (x, xl) {
	  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
	}

	function Gamma0l (x, xl) {
	  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
	}

	function Gamma1 (x, xl) {
	  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
	}

	function Gamma1l (x, xl) {
	  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
	}

	function getCarry (a, b) {
	  return (a >>> 0) < (b >>> 0) ? 1 : 0
	}

	Sha512.prototype._update = function (M) {
	  var W = this._w;

	  var ah = this._ah | 0;
	  var bh = this._bh | 0;
	  var ch = this._ch | 0;
	  var dh = this._dh | 0;
	  var eh = this._eh | 0;
	  var fh = this._fh | 0;
	  var gh = this._gh | 0;
	  var hh = this._hh | 0;

	  var al = this._al | 0;
	  var bl = this._bl | 0;
	  var cl = this._cl | 0;
	  var dl = this._dl | 0;
	  var el = this._el | 0;
	  var fl = this._fl | 0;
	  var gl = this._gl | 0;
	  var hl = this._hl | 0;

	  for (var i = 0; i < 32; i += 2) {
	    W[i] = M.readInt32BE(i * 4);
	    W[i + 1] = M.readInt32BE(i * 4 + 4);
	  }
	  for (; i < 160; i += 2) {
	    var xh = W[i - 15 * 2];
	    var xl = W[i - 15 * 2 + 1];
	    var gamma0 = Gamma0(xh, xl);
	    var gamma0l = Gamma0l(xl, xh);

	    xh = W[i - 2 * 2];
	    xl = W[i - 2 * 2 + 1];
	    var gamma1 = Gamma1(xh, xl);
	    var gamma1l = Gamma1l(xl, xh);

	    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
	    var Wi7h = W[i - 7 * 2];
	    var Wi7l = W[i - 7 * 2 + 1];

	    var Wi16h = W[i - 16 * 2];
	    var Wi16l = W[i - 16 * 2 + 1];

	    var Wil = (gamma0l + Wi7l) | 0;
	    var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0;
	    Wil = (Wil + gamma1l) | 0;
	    Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0;
	    Wil = (Wil + Wi16l) | 0;
	    Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0;

	    W[i] = Wih;
	    W[i + 1] = Wil;
	  }

	  for (var j = 0; j < 160; j += 2) {
	    Wih = W[j];
	    Wil = W[j + 1];

	    var majh = maj(ah, bh, ch);
	    var majl = maj(al, bl, cl);

	    var sigma0h = sigma0(ah, al);
	    var sigma0l = sigma0(al, ah);
	    var sigma1h = sigma1(eh, el);
	    var sigma1l = sigma1(el, eh);

	    // t1 = h + sigma1 + ch + K[j] + W[j]
	    var Kih = K[j];
	    var Kil = K[j + 1];

	    var chh = Ch(eh, fh, gh);
	    var chl = Ch(el, fl, gl);

	    var t1l = (hl + sigma1l) | 0;
	    var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0;
	    t1l = (t1l + chl) | 0;
	    t1h = (t1h + chh + getCarry(t1l, chl)) | 0;
	    t1l = (t1l + Kil) | 0;
	    t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0;
	    t1l = (t1l + Wil) | 0;
	    t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0;

	    // t2 = sigma0 + maj
	    var t2l = (sigma0l + majl) | 0;
	    var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0;

	    hh = gh;
	    hl = gl;
	    gh = fh;
	    gl = fl;
	    fh = eh;
	    fl = el;
	    el = (dl + t1l) | 0;
	    eh = (dh + t1h + getCarry(el, dl)) | 0;
	    dh = ch;
	    dl = cl;
	    ch = bh;
	    cl = bl;
	    bh = ah;
	    bl = al;
	    al = (t1l + t2l) | 0;
	    ah = (t1h + t2h + getCarry(al, t1l)) | 0;
	  }

	  this._al = (this._al + al) | 0;
	  this._bl = (this._bl + bl) | 0;
	  this._cl = (this._cl + cl) | 0;
	  this._dl = (this._dl + dl) | 0;
	  this._el = (this._el + el) | 0;
	  this._fl = (this._fl + fl) | 0;
	  this._gl = (this._gl + gl) | 0;
	  this._hl = (this._hl + hl) | 0;

	  this._ah = (this._ah + ah + getCarry(this._al, al)) | 0;
	  this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0;
	  this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0;
	  this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0;
	  this._eh = (this._eh + eh + getCarry(this._el, el)) | 0;
	  this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0;
	  this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0;
	  this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0;
	};

	Sha512.prototype._hash = function () {
	  var H = Buffer$3.allocUnsafe(64);

	  function writeInt64BE (h, l, offset) {
	    H.writeInt32BE(h, offset);
	    H.writeInt32BE(l, offset + 4);
	  }

	  writeInt64BE(this._ah, this._al, 0);
	  writeInt64BE(this._bh, this._bl, 8);
	  writeInt64BE(this._ch, this._cl, 16);
	  writeInt64BE(this._dh, this._dl, 24);
	  writeInt64BE(this._eh, this._el, 32);
	  writeInt64BE(this._fh, this._fl, 40);
	  writeInt64BE(this._gh, this._gl, 48);
	  writeInt64BE(this._hh, this._hl, 56);

	  return H
	};

	var sha512$1 = Sha512;

	var inherits$2 = inherits_browserExports;
	var SHA512 = sha512$1;
	var Hash$1 = hash;
	var Buffer$2 = safeBufferExports.Buffer;

	var W = new Array(160);

	function Sha384 () {
	  this.init();
	  this._w = W;

	  Hash$1.call(this, 128, 112);
	}

	inherits$2(Sha384, SHA512);

	Sha384.prototype.init = function () {
	  this._ah = 0xcbbb9d5d;
	  this._bh = 0x629a292a;
	  this._ch = 0x9159015a;
	  this._dh = 0x152fecd8;
	  this._eh = 0x67332667;
	  this._fh = 0x8eb44a87;
	  this._gh = 0xdb0c2e0d;
	  this._hh = 0x47b5481d;

	  this._al = 0xc1059ed8;
	  this._bl = 0x367cd507;
	  this._cl = 0x3070dd17;
	  this._dl = 0xf70e5939;
	  this._el = 0xffc00b31;
	  this._fl = 0x68581511;
	  this._gl = 0x64f98fa7;
	  this._hl = 0xbefa4fa4;

	  return this
	};

	Sha384.prototype._hash = function () {
	  var H = Buffer$2.allocUnsafe(48);

	  function writeInt64BE (h, l, offset) {
	    H.writeInt32BE(h, offset);
	    H.writeInt32BE(l, offset + 4);
	  }

	  writeInt64BE(this._ah, this._al, 0);
	  writeInt64BE(this._bh, this._bl, 8);
	  writeInt64BE(this._ch, this._cl, 16);
	  writeInt64BE(this._dh, this._dl, 24);
	  writeInt64BE(this._eh, this._el, 32);
	  writeInt64BE(this._fh, this._fl, 40);

	  return H
	};

	var sha384 = Sha384;

	var exports$1 = sha_js.exports = function SHA (algorithm) {
	  algorithm = algorithm.toLowerCase();

	  var Algorithm = exports$1[algorithm];
	  if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

	  return new Algorithm()
	};

	exports$1.sha = sha$1;
	exports$1.sha1 = sha1;
	exports$1.sha224 = sha224;
	exports$1.sha256 = sha256$1;
	exports$1.sha384 = sha384;
	exports$1.sha512 = sha512$1;

	function BufferList() {
	  this.head = null;
	  this.tail = null;
	  this.length = 0;
	}

	BufferList.prototype.push = function (v) {
	  var entry = { data: v, next: null };
	  if (this.length > 0) this.tail.next = entry;else this.head = entry;
	  this.tail = entry;
	  ++this.length;
	};

	BufferList.prototype.unshift = function (v) {
	  var entry = { data: v, next: this.head };
	  if (this.length === 0) this.tail = entry;
	  this.head = entry;
	  ++this.length;
	};

	BufferList.prototype.shift = function () {
	  if (this.length === 0) return;
	  var ret = this.head.data;
	  if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
	  --this.length;
	  return ret;
	};

	BufferList.prototype.clear = function () {
	  this.head = this.tail = null;
	  this.length = 0;
	};

	BufferList.prototype.join = function (s) {
	  if (this.length === 0) return '';
	  var p = this.head;
	  var ret = '' + p.data;
	  while (p = p.next) {
	    ret += s + p.data;
	  }return ret;
	};

	BufferList.prototype.concat = function (n) {
	  if (this.length === 0) return Buffer$e.alloc(0);
	  if (this.length === 1) return this.head.data;
	  var ret = Buffer$e.allocUnsafe(n >>> 0);
	  var p = this.head;
	  var i = 0;
	  while (p) {
	    p.data.copy(ret, i);
	    i += p.data.length;
	    p = p.next;
	  }
	  return ret;
	};

	// Copyright Joyent, Inc. and other Node contributors.
	var isBufferEncoding = Buffer$e.isEncoding
	  || function(encoding) {
	       switch (encoding && encoding.toLowerCase()) {
	         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
	         default: return false;
	       }
	     };


	function assertEncoding(encoding) {
	  if (encoding && !isBufferEncoding(encoding)) {
	    throw new Error('Unknown encoding: ' + encoding);
	  }
	}

	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters. CESU-8 is handled as part of the UTF-8 encoding.
	//
	// @TODO Handling all encodings inside a single object makes it very difficult
	// to reason about this code, so it should be split up in the future.
	// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
	// points as used by CESU-8.
	function StringDecoder$1(encoding) {
	  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
	  assertEncoding(encoding);
	  switch (this.encoding) {
	    case 'utf8':
	      // CESU-8 represents each of Surrogate Pair by 3-bytes
	      this.surrogateSize = 3;
	      break;
	    case 'ucs2':
	    case 'utf16le':
	      // UTF-16 represents each of Surrogate Pair by 2-bytes
	      this.surrogateSize = 2;
	      this.detectIncompleteChar = utf16DetectIncompleteChar;
	      break;
	    case 'base64':
	      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
	      this.surrogateSize = 3;
	      this.detectIncompleteChar = base64DetectIncompleteChar;
	      break;
	    default:
	      this.write = passThroughWrite;
	      return;
	  }

	  // Enough space to store all bytes of a single character. UTF-8 needs 4
	  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
	  this.charBuffer = new Buffer$e(6);
	  // Number of bytes received for the current incomplete multi-byte character.
	  this.charReceived = 0;
	  // Number of bytes expected for the current incomplete multi-byte character.
	  this.charLength = 0;
	}

	// write decodes the given buffer and returns it as JS string that is
	// guaranteed to not contain any partial multi-byte characters. Any partial
	// character found at the end of the buffer is buffered up, and will be
	// returned when calling write again with the remaining bytes.
	//
	// Note: Converting a Buffer containing an orphan surrogate to a String
	// currently works, but converting a String to a Buffer (via `new Buffer`, or
	// Buffer#write) will replace incomplete surrogates with the unicode
	// replacement character. See https://codereview.chromium.org/121173009/ .
	StringDecoder$1.prototype.write = function(buffer) {
	  var charStr = '';
	  // if our last write ended with an incomplete multibyte character
	  while (this.charLength) {
	    // determine how many remaining bytes this buffer has to offer for this char
	    var available = (buffer.length >= this.charLength - this.charReceived) ?
	        this.charLength - this.charReceived :
	        buffer.length;

	    // add the new bytes to the char buffer
	    buffer.copy(this.charBuffer, this.charReceived, 0, available);
	    this.charReceived += available;

	    if (this.charReceived < this.charLength) {
	      // still not enough chars in this buffer? wait for more ...
	      return '';
	    }

	    // remove bytes belonging to the current character from the buffer
	    buffer = buffer.slice(available, buffer.length);

	    // get the character that was split
	    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

	    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	    var charCode = charStr.charCodeAt(charStr.length - 1);
	    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	      this.charLength += this.surrogateSize;
	      charStr = '';
	      continue;
	    }
	    this.charReceived = this.charLength = 0;

	    // if there are no more bytes in this buffer, just emit our char
	    if (buffer.length === 0) {
	      return charStr;
	    }
	    break;
	  }

	  // determine and set charLength / charReceived
	  this.detectIncompleteChar(buffer);

	  var end = buffer.length;
	  if (this.charLength) {
	    // buffer the incomplete character bytes we got
	    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
	    end -= this.charReceived;
	  }

	  charStr += buffer.toString(this.encoding, 0, end);

	  var end = charStr.length - 1;
	  var charCode = charStr.charCodeAt(end);
	  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	    var size = this.surrogateSize;
	    this.charLength += size;
	    this.charReceived += size;
	    this.charBuffer.copy(this.charBuffer, size, 0, size);
	    buffer.copy(this.charBuffer, 0, 0, size);
	    return charStr.substring(0, end);
	  }

	  // or just emit the charStr
	  return charStr;
	};

	// detectIncompleteChar determines if there is an incomplete UTF-8 character at
	// the end of the given buffer. If so, it sets this.charLength to the byte
	// length that character, and sets this.charReceived to the number of bytes
	// that are available for this character.
	StringDecoder$1.prototype.detectIncompleteChar = function(buffer) {
	  // determine how many bytes we have to check at the end of this buffer
	  var i = (buffer.length >= 3) ? 3 : buffer.length;

	  // Figure out if one of the last i bytes of our buffer announces an
	  // incomplete char.
	  for (; i > 0; i--) {
	    var c = buffer[buffer.length - i];

	    // See http://en.wikipedia.org/wiki/UTF-8#Description

	    // 110XXXXX
	    if (i == 1 && c >> 5 == 0x06) {
	      this.charLength = 2;
	      break;
	    }

	    // 1110XXXX
	    if (i <= 2 && c >> 4 == 0x0E) {
	      this.charLength = 3;
	      break;
	    }

	    // 11110XXX
	    if (i <= 3 && c >> 3 == 0x1E) {
	      this.charLength = 4;
	      break;
	    }
	  }
	  this.charReceived = i;
	};

	StringDecoder$1.prototype.end = function(buffer) {
	  var res = '';
	  if (buffer && buffer.length)
	    res = this.write(buffer);

	  if (this.charReceived) {
	    var cr = this.charReceived;
	    var buf = this.charBuffer;
	    var enc = this.encoding;
	    res += buf.slice(0, cr).toString(enc);
	  }

	  return res;
	};

	function passThroughWrite(buffer) {
	  return buffer.toString(this.encoding);
	}

	function utf16DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 2;
	  this.charLength = this.charReceived ? 2 : 0;
	}

	function base64DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 3;
	  this.charLength = this.charReceived ? 3 : 0;
	}

	var stringDecoder = /*#__PURE__*/Object.freeze({
		__proto__: null,
		StringDecoder: StringDecoder$1
	});

	Readable.ReadableState = ReadableState;

	var debug = debuglog('stream');
	inherits$g(Readable, EventEmitter);

	function prependListener(emitter, event, fn) {
	  // Sadly this is not cacheable as some libraries bundle their own
	  // event emitter implementation with them.
	  if (typeof emitter.prependListener === 'function') {
	    return emitter.prependListener(event, fn);
	  } else {
	    // This is a hack to make sure that our error handler is attached before any
	    // userland ones.  NEVER DO THIS. This is here only because this code needs
	    // to continue to work with older versions of Node.js that do not include
	    // the prependListener() method. The goal is to eventually remove this hack.
	    if (!emitter._events || !emitter._events[event])
	      emitter.on(event, fn);
	    else if (Array.isArray(emitter._events[event]))
	      emitter._events[event].unshift(fn);
	    else
	      emitter._events[event] = [fn, emitter._events[event]];
	  }
	}
	function listenerCount (emitter, type) {
	  return emitter.listeners(type).length;
	}
	function ReadableState(options, stream) {

	  options = options || {};

	  // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

	  // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
	  var hwm = options.highWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

	  // cast to ints.
	  this.highWaterMark = ~ ~this.highWaterMark;

	  // A linked list is used to store data chunks instead of an array because the
	  // linked list can remove elements from the beginning faster than
	  // array.shift()
	  this.buffer = new BufferList();
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = null;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;
	  this.resumeScheduled = false;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // when piping, we only care about 'readable' events that happen
	  // after read()ing all the bytes and not getting any pushback.
	  this.ranOut = false;

	  // the number of writers that are awaiting a drain event in .pipe()s
	  this.awaitDrain = 0;

	  // if true, a maybeReadMore has been scheduled
	  this.readingMore = false;

	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    this.decoder = new StringDecoder$1(options.encoding);
	    this.encoding = options.encoding;
	  }
	}
	function Readable(options) {

	  if (!(this instanceof Readable)) return new Readable(options);

	  this._readableState = new ReadableState(options, this);

	  // legacy
	  this.readable = true;

	  if (options && typeof options.read === 'function') this._read = options.read;

	  EventEmitter.call(this);
	}

	// Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.
	Readable.prototype.push = function (chunk, encoding) {
	  var state = this._readableState;

	  if (!state.objectMode && typeof chunk === 'string') {
	    encoding = encoding || state.defaultEncoding;
	    if (encoding !== state.encoding) {
	      chunk = Buffer$d.from(chunk, encoding);
	      encoding = '';
	    }
	  }

	  return readableAddChunk(this, state, chunk, encoding, false);
	};

	// Unshift should *always* be something directly out of read()
	Readable.prototype.unshift = function (chunk) {
	  var state = this._readableState;
	  return readableAddChunk(this, state, chunk, '', true);
	};

	Readable.prototype.isPaused = function () {
	  return this._readableState.flowing === false;
	};

	function readableAddChunk(stream, state, chunk, encoding, addToFront) {
	  var er = chunkInvalid(state, chunk);
	  if (er) {
	    stream.emit('error', er);
	  } else if (chunk === null) {
	    state.reading = false;
	    onEofChunk(stream, state);
	  } else if (state.objectMode || chunk && chunk.length > 0) {
	    if (state.ended && !addToFront) {
	      var e = new Error('stream.push() after EOF');
	      stream.emit('error', e);
	    } else if (state.endEmitted && addToFront) {
	      var _e = new Error('stream.unshift() after end event');
	      stream.emit('error', _e);
	    } else {
	      var skipAdd;
	      if (state.decoder && !addToFront && !encoding) {
	        chunk = state.decoder.write(chunk);
	        skipAdd = !state.objectMode && chunk.length === 0;
	      }

	      if (!addToFront) state.reading = false;

	      // Don't add to the buffer if we've decoded to an empty string chunk and
	      // we're not in object mode
	      if (!skipAdd) {
	        // if we want the data now, just emit it.
	        if (state.flowing && state.length === 0 && !state.sync) {
	          stream.emit('data', chunk);
	          stream.read(0);
	        } else {
	          // update the buffer info.
	          state.length += state.objectMode ? 1 : chunk.length;
	          if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

	          if (state.needReadable) emitReadable(stream);
	        }
	      }

	      maybeReadMore(stream, state);
	    }
	  } else if (!addToFront) {
	    state.reading = false;
	  }

	  return needMoreData(state);
	}

	// if it's past the high water mark, we can push in some more.
	// Also, if we have no data yet, we can stand some
	// more bytes.  This is to work around cases where hwm=0,
	// such as the repl.  Also, if the push() triggered a
	// readable event, and the user called read(largeNumber) such that
	// needReadable was set, then we ought to push more, so that another
	// 'readable' event will be triggered.
	function needMoreData(state) {
	  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
	}

	// backwards compatibility.
	Readable.prototype.setEncoding = function (enc) {
	  this._readableState.decoder = new StringDecoder$1(enc);
	  this._readableState.encoding = enc;
	  return this;
	};

	// Don't raise the hwm > 8MB
	var MAX_HWM = 0x800000;
	function computeNewHighWaterMark(n) {
	  if (n >= MAX_HWM) {
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2 to prevent increasing hwm excessively in
	    // tiny amounts
	    n--;
	    n |= n >>> 1;
	    n |= n >>> 2;
	    n |= n >>> 4;
	    n |= n >>> 8;
	    n |= n >>> 16;
	    n++;
	  }
	  return n;
	}

	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function howMuchToRead(n, state) {
	  if (n <= 0 || state.length === 0 && state.ended) return 0;
	  if (state.objectMode) return 1;
	  if (n !== n) {
	    // Only flow one buffer at a time
	    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
	  }
	  // If we're asking for more than the current hwm, then raise the hwm.
	  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
	  if (n <= state.length) return n;
	  // Don't have enough
	  if (!state.ended) {
	    state.needReadable = true;
	    return 0;
	  }
	  return state.length;
	}

	// you can override either this method, or the async _read(n) below.
	Readable.prototype.read = function (n) {
	  debug('read', n);
	  n = parseInt(n, 10);
	  var state = this._readableState;
	  var nOrig = n;

	  if (n !== 0) state.emittedReadable = false;

	  // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.
	  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
	    debug('read: emitReadable', state.length, state.ended);
	    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
	    return null;
	  }

	  n = howMuchToRead(n, state);

	  // if we've ended, and we're now clear, then finish it up.
	  if (n === 0 && state.ended) {
	    if (state.length === 0) endReadable(this);
	    return null;
	  }

	  // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.

	  // if we need a readable event, then we need to do some reading.
	  var doRead = state.needReadable;
	  debug('need readable', doRead);

	  // if we currently have less than the highWaterMark, then also read some
	  if (state.length === 0 || state.length - n < state.highWaterMark) {
	    doRead = true;
	    debug('length less than watermark', doRead);
	  }

	  // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.
	  if (state.ended || state.reading) {
	    doRead = false;
	    debug('reading or ended', doRead);
	  } else if (doRead) {
	    debug('do read');
	    state.reading = true;
	    state.sync = true;
	    // if the length is currently zero, then we *need* a readable event.
	    if (state.length === 0) state.needReadable = true;
	    // call internal read method
	    this._read(state.highWaterMark);
	    state.sync = false;
	    // If _read pushed data synchronously, then `reading` will be false,
	    // and we need to re-evaluate how much data we can return to the user.
	    if (!state.reading) n = howMuchToRead(nOrig, state);
	  }

	  var ret;
	  if (n > 0) ret = fromList(n, state);else ret = null;

	  if (ret === null) {
	    state.needReadable = true;
	    n = 0;
	  } else {
	    state.length -= n;
	  }

	  if (state.length === 0) {
	    // If we have nothing in the buffer, then we want to know
	    // as soon as we *do* get something into the buffer.
	    if (!state.ended) state.needReadable = true;

	    // If we tried to read() past the EOF, then emit end on the next tick.
	    if (nOrig !== n && state.ended) endReadable(this);
	  }

	  if (ret !== null) this.emit('data', ret);

	  return ret;
	};

	function chunkInvalid(state, chunk) {
	  var er = null;
	  if (!isBuffer$1(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  return er;
	}

	function onEofChunk(stream, state) {
	  if (state.ended) return;
	  if (state.decoder) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;

	  // emit 'readable' now to make sure it gets picked up.
	  emitReadable(stream);
	}

	// Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.
	function emitReadable(stream) {
	  var state = stream._readableState;
	  state.needReadable = false;
	  if (!state.emittedReadable) {
	    debug('emitReadable', state.flowing);
	    state.emittedReadable = true;
	    if (state.sync) nextTick(emitReadable_, stream);else emitReadable_(stream);
	  }
	}

	function emitReadable_(stream) {
	  debug('emit readable');
	  stream.emit('readable');
	  flow(stream);
	}

	// at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.
	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    nextTick(maybeReadMore_, stream, state);
	  }
	}

	function maybeReadMore_(stream, state) {
	  var len = state.length;
	  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
	    debug('maybeReadMore read 0');
	    stream.read(0);
	    if (len === state.length)
	      // didn't get any data, stop spinning.
	      break;else len = state.length;
	  }
	  state.readingMore = false;
	}

	// abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.
	Readable.prototype._read = function (n) {
	  this.emit('error', new Error('not implemented'));
	};

	Readable.prototype.pipe = function (dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;

	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;
	  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

	  var doEnd = (!pipeOpts || pipeOpts.end !== false);

	  var endFn = doEnd ? onend : cleanup;
	  if (state.endEmitted) nextTick(endFn);else src.once('end', endFn);

	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable) {
	    debug('onunpipe');
	    if (readable === src) {
	      cleanup();
	    }
	  }

	  function onend() {
	    debug('onend');
	    dest.end();
	  }

	  // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.
	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);

	  var cleanedUp = false;
	  function cleanup() {
	    debug('cleanup');
	    // cleanup event handlers once the pipe is broken
	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', cleanup);
	    src.removeListener('data', ondata);

	    cleanedUp = true;

	    // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.
	    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
	  }

	  // If the user pushes more data while we're writing to dest then we'll end up
	  // in ondata again. However, we only want to increase awaitDrain once because
	  // dest will only emit one 'drain' event for the multiple writes.
	  // => Introduce a guard on increasing awaitDrain.
	  var increasedAwaitDrain = false;
	  src.on('data', ondata);
	  function ondata(chunk) {
	    debug('ondata');
	    increasedAwaitDrain = false;
	    var ret = dest.write(chunk);
	    if (false === ret && !increasedAwaitDrain) {
	      // If the user unpiped during `dest.write()`, it is possible
	      // to get stuck in a permanently paused state if that write
	      // also returned false.
	      // => Check whether `dest` is still a piping destination.
	      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
	        debug('false write response, pause', src._readableState.awaitDrain);
	        src._readableState.awaitDrain++;
	        increasedAwaitDrain = true;
	      }
	      src.pause();
	    }
	  }

	  // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.
	  function onerror(er) {
	    debug('onerror', er);
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (listenerCount(dest, 'error') === 0) dest.emit('error', er);
	  }

	  // Make sure our error handler is attached before userland ones.
	  prependListener(dest, 'error', onerror);

	  // Both close and finish should trigger unpipe, but only once.
	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    debug('onfinish');
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);

	  function unpipe() {
	    debug('unpipe');
	    src.unpipe(dest);
	  }

	  // tell the dest that it's being piped to
	  dest.emit('pipe', src);

	  // start the flow if it hasn't been started already.
	  if (!state.flowing) {
	    debug('pipe resume');
	    src.resume();
	  }

	  return dest;
	};

	function pipeOnDrain(src) {
	  return function () {
	    var state = src._readableState;
	    debug('pipeOnDrain', state.awaitDrain);
	    if (state.awaitDrain) state.awaitDrain--;
	    if (state.awaitDrain === 0 && src.listeners('data').length) {
	      state.flowing = true;
	      flow(src);
	    }
	  };
	}

	Readable.prototype.unpipe = function (dest) {
	  var state = this._readableState;

	  // if we're not piping anywhere, then do nothing.
	  if (state.pipesCount === 0) return this;

	  // just one destination.  most common case.
	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes) return this;

	    if (!dest) dest = state.pipes;

	    // got a match.
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    if (dest) dest.emit('unpipe', this);
	    return this;
	  }

	  // slow case. multiple pipe destinations.

	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;

	    for (var _i = 0; _i < len; _i++) {
	      dests[_i].emit('unpipe', this);
	    }return this;
	  }

	  // try to find the right one.
	  var i = indexOf(state.pipes, dest);
	  if (i === -1) return this;

	  state.pipes.splice(i, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1) state.pipes = state.pipes[0];

	  dest.emit('unpipe', this);

	  return this;
	};

	// set up data events if they are asked for
	// Ensure readable listeners eventually get something
	Readable.prototype.on = function (ev, fn) {
	  var res = EventEmitter.prototype.on.call(this, ev, fn);

	  if (ev === 'data') {
	    // Start flowing on next tick if stream isn't explicitly paused
	    if (this._readableState.flowing !== false) this.resume();
	  } else if (ev === 'readable') {
	    var state = this._readableState;
	    if (!state.endEmitted && !state.readableListening) {
	      state.readableListening = state.needReadable = true;
	      state.emittedReadable = false;
	      if (!state.reading) {
	        nextTick(nReadingNextTick, this);
	      } else if (state.length) {
	        emitReadable(this);
	      }
	    }
	  }

	  return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;

	function nReadingNextTick(self) {
	  debug('readable nexttick read 0');
	  self.read(0);
	}

	// pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.
	Readable.prototype.resume = function () {
	  var state = this._readableState;
	  if (!state.flowing) {
	    debug('resume');
	    state.flowing = true;
	    resume(this, state);
	  }
	  return this;
	};

	function resume(stream, state) {
	  if (!state.resumeScheduled) {
	    state.resumeScheduled = true;
	    nextTick(resume_, stream, state);
	  }
	}

	function resume_(stream, state) {
	  if (!state.reading) {
	    debug('resume read 0');
	    stream.read(0);
	  }

	  state.resumeScheduled = false;
	  state.awaitDrain = 0;
	  stream.emit('resume');
	  flow(stream);
	  if (state.flowing && !state.reading) stream.read(0);
	}

	Readable.prototype.pause = function () {
	  debug('call pause flowing=%j', this._readableState.flowing);
	  if (false !== this._readableState.flowing) {
	    debug('pause');
	    this._readableState.flowing = false;
	    this.emit('pause');
	  }
	  return this;
	};

	function flow(stream) {
	  var state = stream._readableState;
	  debug('flow', state.flowing);
	  while (state.flowing && stream.read() !== null) {}
	}

	// wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.
	Readable.prototype.wrap = function (stream) {
	  var state = this._readableState;
	  var paused = false;

	  var self = this;
	  stream.on('end', function () {
	    debug('wrapped end');
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length) self.push(chunk);
	    }

	    self.push(null);
	  });

	  stream.on('data', function (chunk) {
	    debug('wrapped data');
	    if (state.decoder) chunk = state.decoder.write(chunk);

	    // don't skip over falsy values in objectMode
	    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

	    var ret = self.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  });

	  // proxy all the other methods.
	  // important when wrapping filters and duplexes.
	  for (var i in stream) {
	    if (this[i] === undefined && typeof stream[i] === 'function') {
	      this[i] = function (method) {
	        return function () {
	          return stream[method].apply(stream, arguments);
	        };
	      }(i);
	    }
	  }

	  // proxy certain important events.
	  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
	  forEach(events, function (ev) {
	    stream.on(ev, self.emit.bind(self, ev));
	  });

	  // when we try to consume some more bytes, simply unpause the
	  // underlying stream.
	  self._read = function (n) {
	    debug('wrapped _read', n);
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };

	  return self;
	};

	// exposed for testing purposes only.
	Readable._fromList = fromList;

	// Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromList(n, state) {
	  // nothing buffered
	  if (state.length === 0) return null;

	  var ret;
	  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
	    // read it all, truncate the list
	    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
	    state.buffer.clear();
	  } else {
	    // read part of list
	    ret = fromListPartial(n, state.buffer, state.decoder);
	  }

	  return ret;
	}

	// Extracts only enough buffered data to satisfy the amount requested.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromListPartial(n, list, hasStrings) {
	  var ret;
	  if (n < list.head.data.length) {
	    // slice is the same for buffers and strings
	    ret = list.head.data.slice(0, n);
	    list.head.data = list.head.data.slice(n);
	  } else if (n === list.head.data.length) {
	    // first chunk is a perfect match
	    ret = list.shift();
	  } else {
	    // result spans more than one buffer
	    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
	  }
	  return ret;
	}

	// Copies a specified amount of characters from the list of buffered data
	// chunks.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function copyFromBufferString(n, list) {
	  var p = list.head;
	  var c = 1;
	  var ret = p.data;
	  n -= ret.length;
	  while (p = p.next) {
	    var str = p.data;
	    var nb = n > str.length ? str.length : n;
	    if (nb === str.length) ret += str;else ret += str.slice(0, n);
	    n -= nb;
	    if (n === 0) {
	      if (nb === str.length) {
	        ++c;
	        if (p.next) list.head = p.next;else list.head = list.tail = null;
	      } else {
	        list.head = p;
	        p.data = str.slice(nb);
	      }
	      break;
	    }
	    ++c;
	  }
	  list.length -= c;
	  return ret;
	}

	// Copies a specified amount of bytes from the list of buffered data chunks.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function copyFromBuffer(n, list) {
	  var ret = Buffer$d.allocUnsafe(n);
	  var p = list.head;
	  var c = 1;
	  p.data.copy(ret);
	  n -= p.data.length;
	  while (p = p.next) {
	    var buf = p.data;
	    var nb = n > buf.length ? buf.length : n;
	    buf.copy(ret, ret.length - n, 0, nb);
	    n -= nb;
	    if (n === 0) {
	      if (nb === buf.length) {
	        ++c;
	        if (p.next) list.head = p.next;else list.head = list.tail = null;
	      } else {
	        list.head = p;
	        p.data = buf.slice(nb);
	      }
	      break;
	    }
	    ++c;
	  }
	  list.length -= c;
	  return ret;
	}

	function endReadable(stream) {
	  var state = stream._readableState;

	  // If we get here before consuming all the bytes, then that is a
	  // bug in node.  Should never happen.
	  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

	  if (!state.endEmitted) {
	    state.ended = true;
	    nextTick(endReadableNT, state, stream);
	  }
	}

	function endReadableNT(state, stream) {
	  // Check that we didn't get one last unshift.
	  if (!state.endEmitted && state.length === 0) {
	    state.endEmitted = true;
	    stream.readable = false;
	    stream.emit('end');
	  }
	}

	function forEach(xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

	function indexOf(xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}

	// A bit simpler than readable streams.
	Writable.WritableState = WritableState;
	inherits$g(Writable, EventEmitter);

	function nop() {}

	function WriteReq(chunk, encoding, cb) {
	  this.chunk = chunk;
	  this.encoding = encoding;
	  this.callback = cb;
	  this.next = null;
	}

	function WritableState(options, stream) {
	  Object.defineProperty(this, 'buffer', {
	    get: deprecate(function () {
	      return this.getBuffer();
	    }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
	  });
	  options = options || {};

	  // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

	  // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()
	  var hwm = options.highWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

	  // cast to ints.
	  this.highWaterMark = ~ ~this.highWaterMark;

	  this.needDrain = false;
	  // at the start of calling end()
	  this.ending = false;
	  // when end() has been called, and returned
	  this.ended = false;
	  // when 'finish' is emitted
	  this.finished = false;

	  // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.
	  this.length = 0;

	  // a flag to see when we're in the middle of a write.
	  this.writing = false;

	  // when true all writes will be buffered until .uncork() call
	  this.corked = 0;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.
	  this.bufferProcessing = false;

	  // the callback that's passed to _write(chunk,cb)
	  this.onwrite = function (er) {
	    onwrite(stream, er);
	  };

	  // the callback that the user supplies to write(chunk,encoding,cb)
	  this.writecb = null;

	  // the amount that is being written when _write is called.
	  this.writelen = 0;

	  this.bufferedRequest = null;
	  this.lastBufferedRequest = null;

	  // number of pending user-supplied write callbacks
	  // this must be 0 before 'finish' can be emitted
	  this.pendingcb = 0;

	  // emit prefinish if the only thing we're waiting for is _write cbs
	  // This is relevant for synchronous Transform streams
	  this.prefinished = false;

	  // True if the error was already emitted and should not be thrown again
	  this.errorEmitted = false;

	  // count buffered requests
	  this.bufferedRequestCount = 0;

	  // allocate the first CorkedRequest, there is always
	  // one allocated and free to use, and we maintain at most two
	  this.corkedRequestsFree = new CorkedRequest(this);
	}

	WritableState.prototype.getBuffer = function writableStateGetBuffer() {
	  var current = this.bufferedRequest;
	  var out = [];
	  while (current) {
	    out.push(current);
	    current = current.next;
	  }
	  return out;
	};
	function Writable(options) {

	  // Writable ctor is applied to Duplexes, though they're not
	  // instanceof Writable, they're instanceof Readable.
	  if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);

	  this._writableState = new WritableState(options, this);

	  // legacy.
	  this.writable = true;

	  if (options) {
	    if (typeof options.write === 'function') this._write = options.write;

	    if (typeof options.writev === 'function') this._writev = options.writev;
	  }

	  EventEmitter.call(this);
	}

	// Otherwise people can pipe Writable streams, which is just wrong.
	Writable.prototype.pipe = function () {
	  this.emit('error', new Error('Cannot pipe, not readable'));
	};

	function writeAfterEnd(stream, cb) {
	  var er = new Error('write after end');
	  // TODO: defer error events consistently everywhere, not just the cb
	  stream.emit('error', er);
	  nextTick(cb, er);
	}

	// If we get something that is not a buffer, string, null, or undefined,
	// and we're not in objectMode, then that's an error.
	// Otherwise stream chunks are all considered to be of length=1, and the
	// watermarks determine how many objects to keep in the buffer, rather than
	// how many bytes or characters.
	function validChunk(stream, state, chunk, cb) {
	  var valid = true;
	  var er = false;
	  // Always throw error if a null is written
	  // if we are not in object mode then throw
	  // if it is not a buffer, string, or undefined.
	  if (chunk === null) {
	    er = new TypeError('May not write null values to stream');
	  } else if (!Buffer$e.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  if (er) {
	    stream.emit('error', er);
	    nextTick(cb, er);
	    valid = false;
	  }
	  return valid;
	}

	Writable.prototype.write = function (chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;

	  if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }

	  if (Buffer$e.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

	  if (typeof cb !== 'function') cb = nop;

	  if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {
	    state.pendingcb++;
	    ret = writeOrBuffer(this, state, chunk, encoding, cb);
	  }

	  return ret;
	};

	Writable.prototype.cork = function () {
	  var state = this._writableState;

	  state.corked++;
	};

	Writable.prototype.uncork = function () {
	  var state = this._writableState;

	  if (state.corked) {
	    state.corked--;

	    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
	  }
	};

	Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
	  // node::ParseEncoding() requires lower case.
	  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
	  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
	  this._writableState.defaultEncoding = encoding;
	  return this;
	};

	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
	    chunk = Buffer$e.from(chunk, encoding);
	  }
	  return chunk;
	}

	// if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.
	function writeOrBuffer(stream, state, chunk, encoding, cb) {
	  chunk = decodeChunk(state, chunk, encoding);

	  if (Buffer$e.isBuffer(chunk)) encoding = 'buffer';
	  var len = state.objectMode ? 1 : chunk.length;

	  state.length += len;

	  var ret = state.length < state.highWaterMark;
	  // we must ensure that previous needDrain will not be reset to false.
	  if (!ret) state.needDrain = true;

	  if (state.writing || state.corked) {
	    var last = state.lastBufferedRequest;
	    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
	    if (last) {
	      last.next = state.lastBufferedRequest;
	    } else {
	      state.bufferedRequest = state.lastBufferedRequest;
	    }
	    state.bufferedRequestCount += 1;
	  } else {
	    doWrite(stream, state, false, len, chunk, encoding, cb);
	  }

	  return ret;
	}

	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}

	function onwriteError(stream, state, sync, er, cb) {
	  --state.pendingcb;
	  if (sync) nextTick(cb, er);else cb(er);

	  stream._writableState.errorEmitted = true;
	  stream.emit('error', er);
	}

	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}

	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;

	  onwriteStateUpdate(state);

	  if (er) onwriteError(stream, state, sync, er, cb);else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(state);

	    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
	      clearBuffer(stream, state);
	    }

	    if (sync) {
	      /*<replacement>*/
	        nextTick(afterWrite, stream, state, finished, cb);
	      /*</replacement>*/
	    } else {
	        afterWrite(stream, state, finished, cb);
	      }
	  }
	}

	function afterWrite(stream, state, finished, cb) {
	  if (!finished) onwriteDrain(stream, state);
	  state.pendingcb--;
	  cb();
	  finishMaybe(stream, state);
	}

	// Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.
	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	}

	// if there's something in the buffer waiting, then process it
	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;
	  var entry = state.bufferedRequest;

	  if (stream._writev && entry && entry.next) {
	    // Fast case, write everything using _writev()
	    var l = state.bufferedRequestCount;
	    var buffer = new Array(l);
	    var holder = state.corkedRequestsFree;
	    holder.entry = entry;

	    var count = 0;
	    while (entry) {
	      buffer[count] = entry;
	      entry = entry.next;
	      count += 1;
	    }

	    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

	    // doWrite is almost always async, defer these to save a bit of time
	    // as the hot path ends with doWrite
	    state.pendingcb++;
	    state.lastBufferedRequest = null;
	    if (holder.next) {
	      state.corkedRequestsFree = holder.next;
	      holder.next = null;
	    } else {
	      state.corkedRequestsFree = new CorkedRequest(state);
	    }
	  } else {
	    // Slow case, write chunks one-by-one
	    while (entry) {
	      var chunk = entry.chunk;
	      var encoding = entry.encoding;
	      var cb = entry.callback;
	      var len = state.objectMode ? 1 : chunk.length;

	      doWrite(stream, state, false, len, chunk, encoding, cb);
	      entry = entry.next;
	      // if we didn't call the onwrite immediately, then
	      // it means that we need to wait until it does.
	      // also, that means that the chunk and cb are currently
	      // being processed, so move the buffer counter past them.
	      if (state.writing) {
	        break;
	      }
	    }

	    if (entry === null) state.lastBufferedRequest = null;
	  }

	  state.bufferedRequestCount = 0;
	  state.bufferedRequest = entry;
	  state.bufferProcessing = false;
	}

	Writable.prototype._write = function (chunk, encoding, cb) {
	  cb(new Error('not implemented'));
	};

	Writable.prototype._writev = null;

	Writable.prototype.end = function (chunk, encoding, cb) {
	  var state = this._writableState;

	  if (typeof chunk === 'function') {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }

	  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

	  // .end() fully uncorks
	  if (state.corked) {
	    state.corked = 1;
	    this.uncork();
	  }

	  // ignore unnecessary end() calls.
	  if (!state.ending && !state.finished) endWritable(this, state, cb);
	};

	function needFinish(state) {
	  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
	}

	function prefinish(stream, state) {
	  if (!state.prefinished) {
	    state.prefinished = true;
	    stream.emit('prefinish');
	  }
	}

	function finishMaybe(stream, state) {
	  var need = needFinish(state);
	  if (need) {
	    if (state.pendingcb === 0) {
	      prefinish(stream, state);
	      state.finished = true;
	      stream.emit('finish');
	    } else {
	      prefinish(stream, state);
	    }
	  }
	  return need;
	}

	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	  if (cb) {
	    if (state.finished) nextTick(cb);else stream.once('finish', cb);
	  }
	  state.ended = true;
	  stream.writable = false;
	}

	// It seems a linked list but it is not
	// there will be only 2 of these for each stream
	function CorkedRequest(state) {
	  var _this = this;

	  this.next = null;
	  this.entry = null;

	  this.finish = function (err) {
	    var entry = _this.entry;
	    _this.entry = null;
	    while (entry) {
	      var cb = entry.callback;
	      state.pendingcb--;
	      cb(err);
	      entry = entry.next;
	    }
	    if (state.corkedRequestsFree) {
	      state.corkedRequestsFree.next = _this;
	    } else {
	      state.corkedRequestsFree = _this;
	    }
	  };
	}

	inherits$g(Duplex, Readable);

	var keys = Object.keys(Writable.prototype);
	for (var v = 0; v < keys.length; v++) {
	  var method = keys[v];
	  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
	}
	function Duplex(options) {
	  if (!(this instanceof Duplex)) return new Duplex(options);

	  Readable.call(this, options);
	  Writable.call(this, options);

	  if (options && options.readable === false) this.readable = false;

	  if (options && options.writable === false) this.writable = false;

	  this.allowHalfOpen = true;
	  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

	  this.once('end', onend);
	}

	// the no-half-open enforcer
	function onend() {
	  // if we allow half-open state, or if the writable side ended,
	  // then we're ok.
	  if (this.allowHalfOpen || this._writableState.ended) return;

	  // no more data can be written.
	  // But allow more writes to happen in this tick.
	  nextTick(onEndNT, this);
	}

	function onEndNT(self) {
	  self.end();
	}

	// a transform stream is a readable/writable stream where you do
	inherits$g(Transform$1, Duplex);

	function TransformState(stream) {
	  this.afterTransform = function (er, data) {
	    return afterTransform(stream, er, data);
	  };

	  this.needTransform = false;
	  this.transforming = false;
	  this.writecb = null;
	  this.writechunk = null;
	  this.writeencoding = null;
	}

	function afterTransform(stream, er, data) {
	  var ts = stream._transformState;
	  ts.transforming = false;

	  var cb = ts.writecb;

	  if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));

	  ts.writechunk = null;
	  ts.writecb = null;

	  if (data !== null && data !== undefined) stream.push(data);

	  cb(er);

	  var rs = stream._readableState;
	  rs.reading = false;
	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    stream._read(rs.highWaterMark);
	  }
	}
	function Transform$1(options) {
	  if (!(this instanceof Transform$1)) return new Transform$1(options);

	  Duplex.call(this, options);

	  this._transformState = new TransformState(this);

	  // when the writable side finishes, then flush out anything remaining.
	  var stream = this;

	  // start out asking for a readable event once data is transformed.
	  this._readableState.needReadable = true;

	  // we have implemented the _read method, and done the other things
	  // that Readable wants before the first _read call, so unset the
	  // sync guard flag.
	  this._readableState.sync = false;

	  if (options) {
	    if (typeof options.transform === 'function') this._transform = options.transform;

	    if (typeof options.flush === 'function') this._flush = options.flush;
	  }

	  this.once('prefinish', function () {
	    if (typeof this._flush === 'function') this._flush(function (er) {
	      done(stream, er);
	    });else done(stream);
	  });
	}

	Transform$1.prototype.push = function (chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex.prototype.push.call(this, chunk, encoding);
	};

	// This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.
	Transform$1.prototype._transform = function (chunk, encoding, cb) {
	  throw new Error('Not implemented');
	};

	Transform$1.prototype._write = function (chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;
	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
	  }
	};

	// Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.
	Transform$1.prototype._read = function (n) {
	  var ts = this._transformState;

	  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
	    ts.transforming = true;
	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    // mark that we need a transform, so that any data that comes in
	    // will get processed, now that we've asked for it.
	    ts.needTransform = true;
	  }
	};

	function done(stream, er) {
	  if (er) return stream.emit('error', er);

	  // if there's nothing in the write buffer, then that means
	  // that nothing more will ever be provided
	  var ws = stream._writableState;
	  var ts = stream._transformState;

	  if (ws.length) throw new Error('Calling transform done when ws.length != 0');

	  if (ts.transforming) throw new Error('Calling transform done when still transforming');

	  return stream.push(null);
	}

	inherits$g(PassThrough, Transform$1);
	function PassThrough(options) {
	  if (!(this instanceof PassThrough)) return new PassThrough(options);

	  Transform$1.call(this, options);
	}

	PassThrough.prototype._transform = function (chunk, encoding, cb) {
	  cb(null, chunk);
	};

	inherits$g(Stream, EventEmitter);
	Stream.Readable = Readable;
	Stream.Writable = Writable;
	Stream.Duplex = Duplex;
	Stream.Transform = Transform$1;
	Stream.PassThrough = PassThrough;

	// Backwards-compat with node 0.4.x
	Stream.Stream = Stream;

	// old-style streams.  Note that the pipe method (the only relevant
	// part of this class) is overridden in the Readable class.

	function Stream() {
	  EventEmitter.call(this);
	}

	Stream.prototype.pipe = function(dest, options) {
	  var source = this;

	  function ondata(chunk) {
	    if (dest.writable) {
	      if (false === dest.write(chunk) && source.pause) {
	        source.pause();
	      }
	    }
	  }

	  source.on('data', ondata);

	  function ondrain() {
	    if (source.readable && source.resume) {
	      source.resume();
	    }
	  }

	  dest.on('drain', ondrain);

	  // If the 'end' option is not supplied, dest.end() will be called when
	  // source gets the 'end' or 'close' events.  Only dest.end() once.
	  if (!dest._isStdio && (!options || options.end !== false)) {
	    source.on('end', onend);
	    source.on('close', onclose);
	  }

	  var didOnEnd = false;
	  function onend() {
	    if (didOnEnd) return;
	    didOnEnd = true;

	    dest.end();
	  }


	  function onclose() {
	    if (didOnEnd) return;
	    didOnEnd = true;

	    if (typeof dest.destroy === 'function') dest.destroy();
	  }

	  // don't leave dangling pipes when there are errors.
	  function onerror(er) {
	    cleanup();
	    if (EventEmitter.listenerCount(this, 'error') === 0) {
	      throw er; // Unhandled stream error in pipe.
	    }
	  }

	  source.on('error', onerror);
	  dest.on('error', onerror);

	  // remove all the event listeners that were added.
	  function cleanup() {
	    source.removeListener('data', ondata);
	    dest.removeListener('drain', ondrain);

	    source.removeListener('end', onend);
	    source.removeListener('close', onclose);

	    source.removeListener('error', onerror);
	    dest.removeListener('error', onerror);

	    source.removeListener('end', cleanup);
	    source.removeListener('close', cleanup);

	    dest.removeListener('close', cleanup);
	  }

	  source.on('end', cleanup);
	  source.on('close', cleanup);

	  dest.on('close', cleanup);

	  dest.emit('pipe', source);

	  // Allow for unix-like usage: A.pipe(B).pipe(C)
	  return dest;
	};

	var stream = /*#__PURE__*/Object.freeze({
		__proto__: null,
		Duplex: Duplex,
		PassThrough: PassThrough,
		Readable: Readable,
		Stream: Stream,
		Transform: Transform$1,
		Writable: Writable,
		default: Stream
	});

	var require$$1$1 = /*@__PURE__*/getAugmentedNamespace(stream);

	var require$$2 = /*@__PURE__*/getAugmentedNamespace(stringDecoder);

	var Buffer$1 = safeBufferExports.Buffer;
	var Transform = require$$1$1.Transform;
	var StringDecoder = require$$2.StringDecoder;
	var inherits$1 = inherits_browserExports;

	function CipherBase (hashMode) {
	  Transform.call(this);
	  this.hashMode = typeof hashMode === 'string';
	  if (this.hashMode) {
	    this[hashMode] = this._finalOrDigest;
	  } else {
	    this.final = this._finalOrDigest;
	  }
	  if (this._final) {
	    this.__final = this._final;
	    this._final = null;
	  }
	  this._decoder = null;
	  this._encoding = null;
	}
	inherits$1(CipherBase, Transform);

	CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
	  if (typeof data === 'string') {
	    data = Buffer$1.from(data, inputEnc);
	  }

	  var outData = this._update(data);
	  if (this.hashMode) return this

	  if (outputEnc) {
	    outData = this._toString(outData, outputEnc);
	  }

	  return outData
	};

	CipherBase.prototype.setAutoPadding = function () {};
	CipherBase.prototype.getAuthTag = function () {
	  throw new Error('trying to get auth tag in unsupported state')
	};

	CipherBase.prototype.setAuthTag = function () {
	  throw new Error('trying to set auth tag in unsupported state')
	};

	CipherBase.prototype.setAAD = function () {
	  throw new Error('trying to set aad in unsupported state')
	};

	CipherBase.prototype._transform = function (data, _, next) {
	  var err;
	  try {
	    if (this.hashMode) {
	      this._update(data);
	    } else {
	      this.push(this._update(data));
	    }
	  } catch (e) {
	    err = e;
	  } finally {
	    next(err);
	  }
	};
	CipherBase.prototype._flush = function (done) {
	  var err;
	  try {
	    this.push(this.__final());
	  } catch (e) {
	    err = e;
	  }

	  done(err);
	};
	CipherBase.prototype._finalOrDigest = function (outputEnc) {
	  var outData = this.__final() || Buffer$1.alloc(0);
	  if (outputEnc) {
	    outData = this._toString(outData, outputEnc, true);
	  }
	  return outData
	};

	CipherBase.prototype._toString = function (value, enc, fin) {
	  if (!this._decoder) {
	    this._decoder = new StringDecoder(enc);
	    this._encoding = enc;
	  }

	  if (this._encoding !== enc) throw new Error('can\'t switch encodings')

	  var out = this._decoder.write(value);
	  if (fin) {
	    out += this._decoder.end();
	  }

	  return out
	};

	var cipherBase = CipherBase;

	var inherits = inherits_browserExports;
	var MD5 = md5_js;
	var RIPEMD160 = ripemd160$1;
	var sha = sha_jsExports;
	var Base = cipherBase;

	function Hash (hash) {
	  Base.call(this, 'digest');

	  this._hash = hash;
	}

	inherits(Hash, Base);

	Hash.prototype._update = function (data) {
	  this._hash.update(data);
	};

	Hash.prototype._final = function () {
	  return this._hash.digest()
	};

	var browser = function createHash (alg) {
	  alg = alg.toLowerCase();
	  if (alg === 'md5') return new MD5()
	  if (alg === 'rmd160' || alg === 'ripemd160') return new RIPEMD160()

	  return new Hash(sha(alg))
	};

	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.rlphash = exports.ripemd160FromArray = exports.ripemd160FromString = exports.ripemd160 = exports.sha256FromArray = exports.sha256FromString = exports.sha256 = exports.keccakFromArray = exports.keccakFromHexString = exports.keccakFromString = exports.keccak256 = exports.keccak = void 0;
		var keccak_1 = keccak$2;
		var createHash = browser;
		var externals_1 = externals;
		var bytes_1 = bytes;
		var helpers_1 = helpers;
		/**
		 * Creates Keccak hash of a Buffer input
		 * @param a The input data (Buffer)
		 * @param bits (number = 256) The Keccak width
		 */
		var keccak = function (a, bits) {
		    if (bits === void 0) { bits = 256; }
		    (0, helpers_1.assertIsBuffer)(a);
		    switch (bits) {
		        case 224: {
		            return (0, keccak_1.keccak224)(a);
		        }
		        case 256: {
		            return (0, keccak_1.keccak256)(a);
		        }
		        case 384: {
		            return (0, keccak_1.keccak384)(a);
		        }
		        case 512: {
		            return (0, keccak_1.keccak512)(a);
		        }
		        default: {
		            throw new Error("Invald algorithm: keccak".concat(bits));
		        }
		    }
		};
		exports.keccak = keccak;
		/**
		 * Creates Keccak-256 hash of the input, alias for keccak(a, 256).
		 * @param a The input data (Buffer)
		 */
		var keccak256 = function (a) {
		    return (0, exports.keccak)(a);
		};
		exports.keccak256 = keccak256;
		/**
		 * Creates Keccak hash of a utf-8 string input
		 * @param a The input data (String)
		 * @param bits (number = 256) The Keccak width
		 */
		var keccakFromString = function (a, bits) {
		    if (bits === void 0) { bits = 256; }
		    (0, helpers_1.assertIsString)(a);
		    var buf = Buffer$d.from(a, 'utf8');
		    return (0, exports.keccak)(buf, bits);
		};
		exports.keccakFromString = keccakFromString;
		/**
		 * Creates Keccak hash of an 0x-prefixed string input
		 * @param a The input data (String)
		 * @param bits (number = 256) The Keccak width
		 */
		var keccakFromHexString = function (a, bits) {
		    if (bits === void 0) { bits = 256; }
		    (0, helpers_1.assertIsHexString)(a);
		    return (0, exports.keccak)((0, bytes_1.toBuffer)(a), bits);
		};
		exports.keccakFromHexString = keccakFromHexString;
		/**
		 * Creates Keccak hash of a number array input
		 * @param a The input data (number[])
		 * @param bits (number = 256) The Keccak width
		 */
		var keccakFromArray = function (a, bits) {
		    if (bits === void 0) { bits = 256; }
		    (0, helpers_1.assertIsArray)(a);
		    return (0, exports.keccak)((0, bytes_1.toBuffer)(a), bits);
		};
		exports.keccakFromArray = keccakFromArray;
		/**
		 * Creates SHA256 hash of an input.
		 * @param  a The input data (Buffer|Array|String)
		 */
		var _sha256 = function (a) {
		    a = (0, bytes_1.toBuffer)(a);
		    return createHash('sha256').update(a).digest();
		};
		/**
		 * Creates SHA256 hash of a Buffer input.
		 * @param a The input data (Buffer)
		 */
		var sha256 = function (a) {
		    (0, helpers_1.assertIsBuffer)(a);
		    return _sha256(a);
		};
		exports.sha256 = sha256;
		/**
		 * Creates SHA256 hash of a string input.
		 * @param a The input data (string)
		 */
		var sha256FromString = function (a) {
		    (0, helpers_1.assertIsString)(a);
		    return _sha256(a);
		};
		exports.sha256FromString = sha256FromString;
		/**
		 * Creates SHA256 hash of a number[] input.
		 * @param a The input data (number[])
		 */
		var sha256FromArray = function (a) {
		    (0, helpers_1.assertIsArray)(a);
		    return _sha256(a);
		};
		exports.sha256FromArray = sha256FromArray;
		/**
		 * Creates RIPEMD160 hash of the input.
		 * @param a The input data (Buffer|Array|String|Number)
		 * @param padded Whether it should be padded to 256 bits or not
		 */
		var _ripemd160 = function (a, padded) {
		    a = (0, bytes_1.toBuffer)(a);
		    var hash = createHash('rmd160').update(a).digest();
		    if (padded === true) {
		        return (0, bytes_1.setLengthLeft)(hash, 32);
		    }
		    else {
		        return hash;
		    }
		};
		/**
		 * Creates RIPEMD160 hash of a Buffer input.
		 * @param a The input data (Buffer)
		 * @param padded Whether it should be padded to 256 bits or not
		 */
		var ripemd160 = function (a, padded) {
		    (0, helpers_1.assertIsBuffer)(a);
		    return _ripemd160(a, padded);
		};
		exports.ripemd160 = ripemd160;
		/**
		 * Creates RIPEMD160 hash of a string input.
		 * @param a The input data (String)
		 * @param padded Whether it should be padded to 256 bits or not
		 */
		var ripemd160FromString = function (a, padded) {
		    (0, helpers_1.assertIsString)(a);
		    return _ripemd160(a, padded);
		};
		exports.ripemd160FromString = ripemd160FromString;
		/**
		 * Creates RIPEMD160 hash of a number[] input.
		 * @param a The input data (number[])
		 * @param padded Whether it should be padded to 256 bits or not
		 */
		var ripemd160FromArray = function (a, padded) {
		    (0, helpers_1.assertIsArray)(a);
		    return _ripemd160(a, padded);
		};
		exports.ripemd160FromArray = ripemd160FromArray;
		/**
		 * Creates SHA-3 hash of the RLP encoded version of the input.
		 * @param a The input data
		 */
		var rlphash = function (a) {
		    return (0, exports.keccak)(externals_1.rlp.encode(a));
		};
		exports.rlphash = rlphash;
		
	} (hash$1));

	var types$2 = {};

	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.toType = exports.TypeOutput = exports.bnToRlp = exports.bnToUnpaddedBuffer = exports.bnToHex = void 0;
		var externals_1 = externals;
		var internal_1 = internal;
		var bytes_1 = bytes;
		/**
		 * Convert BN to 0x-prefixed hex string.
		 */
		function bnToHex(value) {
		    return "0x".concat(value.toString(16));
		}
		exports.bnToHex = bnToHex;
		/**
		 * Convert value from BN to an unpadded Buffer
		 * (useful for RLP transport)
		 * @param value value to convert
		 */
		function bnToUnpaddedBuffer(value) {
		    // Using `bn.toArrayLike(Buffer)` instead of `bn.toBuffer()`
		    // for compatibility with browserify and similar tools
		    return (0, bytes_1.unpadBuffer)(value.toArrayLike(Buffer$d));
		}
		exports.bnToUnpaddedBuffer = bnToUnpaddedBuffer;
		/**
		 * Deprecated alias for {@link bnToUnpaddedBuffer}
		 * @deprecated
		 */
		function bnToRlp(value) {
		    return bnToUnpaddedBuffer(value);
		}
		exports.bnToRlp = bnToRlp;
		/**
		 * Type output options
		 */
		var TypeOutput;
		(function (TypeOutput) {
		    TypeOutput[TypeOutput["Number"] = 0] = "Number";
		    TypeOutput[TypeOutput["BN"] = 1] = "BN";
		    TypeOutput[TypeOutput["Buffer"] = 2] = "Buffer";
		    TypeOutput[TypeOutput["PrefixedHexString"] = 3] = "PrefixedHexString";
		})(TypeOutput = exports.TypeOutput || (exports.TypeOutput = {}));
		function toType(input, outputType) {
		    if (input === null) {
		        return null;
		    }
		    if (input === undefined) {
		        return undefined;
		    }
		    if (typeof input === 'string' && !(0, internal_1.isHexString)(input)) {
		        throw new Error("A string must be provided with a 0x-prefix, given: ".concat(input));
		    }
		    else if (typeof input === 'number' && !Number.isSafeInteger(input)) {
		        throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)');
		    }
		    var output = (0, bytes_1.toBuffer)(input);
		    if (outputType === TypeOutput.Buffer) {
		        return output;
		    }
		    else if (outputType === TypeOutput.BN) {
		        return new externals_1.BN(output);
		    }
		    else if (outputType === TypeOutput.Number) {
		        var bn = new externals_1.BN(output);
		        var max = new externals_1.BN(Number.MAX_SAFE_INTEGER.toString());
		        if (bn.gt(max)) {
		            throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)');
		        }
		        return bn.toNumber();
		    }
		    else {
		        // outputType === TypeOutput.PrefixedHexString
		        return "0x".concat(output.toString('hex'));
		    }
		}
		exports.toType = toType;
		
	} (types$2));

	(function (exports) {
		var __read = (commonjsGlobal && commonjsGlobal.__read) || function (o, n) {
		    var m = typeof Symbol === "function" && o[Symbol.iterator];
		    if (!m) return o;
		    var i = m.call(o), r, ar = [], e;
		    try {
		        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
		    }
		    catch (error) { e = { error: error }; }
		    finally {
		        try {
		            if (r && !r.done && (m = i["return"])) m.call(i);
		        }
		        finally { if (e) throw e.error; }
		    }
		    return ar;
		};
		var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
		    return (mod && mod.__esModule) ? mod : { "default": mod };
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.isZeroAddress = exports.zeroAddress = exports.importPublic = exports.privateToAddress = exports.privateToPublic = exports.publicToAddress = exports.pubToAddress = exports.isValidPublic = exports.isValidPrivate = exports.generateAddress2 = exports.generateAddress = exports.isValidChecksumAddress = exports.toChecksumAddress = exports.isValidAddress = exports.Account = void 0;
		var assert_1 = __importDefault(require$$0$5);
		var externals_1 = externals;
		var secp256k1_1 = secp256k1$1;
		var internal_1 = internal;
		var constants_1 = constants;
		var bytes_1 = bytes;
		var hash_1 = hash$1;
		var helpers_1 = helpers;
		var types_1 = types$2;
		var Account = /** @class */ (function () {
		    /**
		     * This constructor assigns and validates the values.
		     * Use the static factory methods to assist in creating an Account from varying data types.
		     */
		    function Account(nonce, balance, stateRoot, codeHash) {
		        if (nonce === void 0) { nonce = new externals_1.BN(0); }
		        if (balance === void 0) { balance = new externals_1.BN(0); }
		        if (stateRoot === void 0) { stateRoot = constants_1.KECCAK256_RLP; }
		        if (codeHash === void 0) { codeHash = constants_1.KECCAK256_NULL; }
		        this.nonce = nonce;
		        this.balance = balance;
		        this.stateRoot = stateRoot;
		        this.codeHash = codeHash;
		        this._validate();
		    }
		    Account.fromAccountData = function (accountData) {
		        var nonce = accountData.nonce, balance = accountData.balance, stateRoot = accountData.stateRoot, codeHash = accountData.codeHash;
		        return new Account(nonce ? new externals_1.BN((0, bytes_1.toBuffer)(nonce)) : undefined, balance ? new externals_1.BN((0, bytes_1.toBuffer)(balance)) : undefined, stateRoot ? (0, bytes_1.toBuffer)(stateRoot) : undefined, codeHash ? (0, bytes_1.toBuffer)(codeHash) : undefined);
		    };
		    Account.fromRlpSerializedAccount = function (serialized) {
		        var values = externals_1.rlp.decode(serialized);
		        if (!Array.isArray(values)) {
		            throw new Error('Invalid serialized account input. Must be array');
		        }
		        return this.fromValuesArray(values);
		    };
		    Account.fromValuesArray = function (values) {
		        var _a = __read(values, 4), nonce = _a[0], balance = _a[1], stateRoot = _a[2], codeHash = _a[3];
		        return new Account(new externals_1.BN(nonce), new externals_1.BN(balance), stateRoot, codeHash);
		    };
		    Account.prototype._validate = function () {
		        if (this.nonce.lt(new externals_1.BN(0))) {
		            throw new Error('nonce must be greater than zero');
		        }
		        if (this.balance.lt(new externals_1.BN(0))) {
		            throw new Error('balance must be greater than zero');
		        }
		        if (this.stateRoot.length !== 32) {
		            throw new Error('stateRoot must have a length of 32');
		        }
		        if (this.codeHash.length !== 32) {
		            throw new Error('codeHash must have a length of 32');
		        }
		    };
		    /**
		     * Returns a Buffer Array of the raw Buffers for the account, in order.
		     */
		    Account.prototype.raw = function () {
		        return [
		            (0, types_1.bnToUnpaddedBuffer)(this.nonce),
		            (0, types_1.bnToUnpaddedBuffer)(this.balance),
		            this.stateRoot,
		            this.codeHash,
		        ];
		    };
		    /**
		     * Returns the RLP serialization of the account as a `Buffer`.
		     */
		    Account.prototype.serialize = function () {
		        return externals_1.rlp.encode(this.raw());
		    };
		    /**
		     * Returns a `Boolean` determining if the account is a contract.
		     */
		    Account.prototype.isContract = function () {
		        return !this.codeHash.equals(constants_1.KECCAK256_NULL);
		    };
		    /**
		     * Returns a `Boolean` determining if the account is empty complying to the definition of
		     * account emptiness in [EIP-161](https://eips.ethereum.org/EIPS/eip-161):
		     * "An account is considered empty when it has no code and zero nonce and zero balance."
		     */
		    Account.prototype.isEmpty = function () {
		        return this.balance.isZero() && this.nonce.isZero() && this.codeHash.equals(constants_1.KECCAK256_NULL);
		    };
		    return Account;
		}());
		exports.Account = Account;
		/**
		 * Checks if the address is a valid. Accepts checksummed addresses too.
		 */
		var isValidAddress = function (hexAddress) {
		    try {
		        (0, helpers_1.assertIsString)(hexAddress);
		    }
		    catch (e) {
		        return false;
		    }
		    return /^0x[0-9a-fA-F]{40}$/.test(hexAddress);
		};
		exports.isValidAddress = isValidAddress;
		/**
		 * Returns a checksummed address.
		 *
		 * If an eip1191ChainId is provided, the chainId will be included in the checksum calculation. This
		 * has the effect of checksummed addresses for one chain having invalid checksums for others.
		 * For more details see [EIP-1191](https://eips.ethereum.org/EIPS/eip-1191).
		 *
		 * WARNING: Checksums with and without the chainId will differ and the EIP-1191 checksum is not
		 * backwards compatible to the original widely adopted checksum format standard introduced in
		 * [EIP-55](https://eips.ethereum.org/EIPS/eip-55), so this will break in existing applications.
		 * Usage of this EIP is therefore discouraged unless you have a very targeted use case.
		 */
		var toChecksumAddress = function (hexAddress, eip1191ChainId) {
		    (0, helpers_1.assertIsHexString)(hexAddress);
		    var address = (0, internal_1.stripHexPrefix)(hexAddress).toLowerCase();
		    var prefix = '';
		    if (eip1191ChainId) {
		        var chainId = (0, types_1.toType)(eip1191ChainId, types_1.TypeOutput.BN);
		        prefix = chainId.toString() + '0x';
		    }
		    var hash = (0, hash_1.keccakFromString)(prefix + address).toString('hex');
		    var ret = '0x';
		    for (var i = 0; i < address.length; i++) {
		        if (parseInt(hash[i], 16) >= 8) {
		            ret += address[i].toUpperCase();
		        }
		        else {
		            ret += address[i];
		        }
		    }
		    return ret;
		};
		exports.toChecksumAddress = toChecksumAddress;
		/**
		 * Checks if the address is a valid checksummed address.
		 *
		 * See toChecksumAddress' documentation for details about the eip1191ChainId parameter.
		 */
		var isValidChecksumAddress = function (hexAddress, eip1191ChainId) {
		    return (0, exports.isValidAddress)(hexAddress) && (0, exports.toChecksumAddress)(hexAddress, eip1191ChainId) === hexAddress;
		};
		exports.isValidChecksumAddress = isValidChecksumAddress;
		/**
		 * Generates an address of a newly created contract.
		 * @param from The address which is creating this new address
		 * @param nonce The nonce of the from account
		 */
		var generateAddress = function (from, nonce) {
		    (0, helpers_1.assertIsBuffer)(from);
		    (0, helpers_1.assertIsBuffer)(nonce);
		    var nonceBN = new externals_1.BN(nonce);
		    if (nonceBN.isZero()) {
		        // in RLP we want to encode null in the case of zero nonce
		        // read the RLP documentation for an answer if you dare
		        return (0, hash_1.rlphash)([from, null]).slice(-20);
		    }
		    // Only take the lower 160bits of the hash
		    return (0, hash_1.rlphash)([from, Buffer$d.from(nonceBN.toArray())]).slice(-20);
		};
		exports.generateAddress = generateAddress;
		/**
		 * Generates an address for a contract created using CREATE2.
		 * @param from The address which is creating this new address
		 * @param salt A salt
		 * @param initCode The init code of the contract being created
		 */
		var generateAddress2 = function (from, salt, initCode) {
		    (0, helpers_1.assertIsBuffer)(from);
		    (0, helpers_1.assertIsBuffer)(salt);
		    (0, helpers_1.assertIsBuffer)(initCode);
		    (0, assert_1.default)(from.length === 20);
		    (0, assert_1.default)(salt.length === 32);
		    var address = (0, hash_1.keccak256)(Buffer$d.concat([Buffer$d.from('ff', 'hex'), from, salt, (0, hash_1.keccak256)(initCode)]));
		    return address.slice(-20);
		};
		exports.generateAddress2 = generateAddress2;
		/**
		 * Checks if the private key satisfies the rules of the curve secp256k1.
		 */
		var isValidPrivate = function (privateKey) {
		    return (0, secp256k1_1.privateKeyVerify)(privateKey);
		};
		exports.isValidPrivate = isValidPrivate;
		/**
		 * Checks if the public key satisfies the rules of the curve secp256k1
		 * and the requirements of Ethereum.
		 * @param publicKey The two points of an uncompressed key, unless sanitize is enabled
		 * @param sanitize Accept public keys in other formats
		 */
		var isValidPublic = function (publicKey, sanitize) {
		    if (sanitize === void 0) { sanitize = false; }
		    (0, helpers_1.assertIsBuffer)(publicKey);
		    if (publicKey.length === 64) {
		        // Convert to SEC1 for secp256k1
		        return (0, secp256k1_1.publicKeyVerify)(Buffer$d.concat([Buffer$d.from([4]), publicKey]));
		    }
		    if (!sanitize) {
		        return false;
		    }
		    return (0, secp256k1_1.publicKeyVerify)(publicKey);
		};
		exports.isValidPublic = isValidPublic;
		/**
		 * Returns the ethereum address of a given public key.
		 * Accepts "Ethereum public keys" and SEC1 encoded keys.
		 * @param pubKey The two points of an uncompressed key, unless sanitize is enabled
		 * @param sanitize Accept public keys in other formats
		 */
		var pubToAddress = function (pubKey, sanitize) {
		    if (sanitize === void 0) { sanitize = false; }
		    (0, helpers_1.assertIsBuffer)(pubKey);
		    if (sanitize && pubKey.length !== 64) {
		        pubKey = Buffer$d.from((0, secp256k1_1.publicKeyConvert)(pubKey, false).slice(1));
		    }
		    (0, assert_1.default)(pubKey.length === 64);
		    // Only take the lower 160bits of the hash
		    return (0, hash_1.keccak)(pubKey).slice(-20);
		};
		exports.pubToAddress = pubToAddress;
		exports.publicToAddress = exports.pubToAddress;
		/**
		 * Returns the ethereum public key of a given private key.
		 * @param privateKey A private key must be 256 bits wide
		 */
		var privateToPublic = function (privateKey) {
		    (0, helpers_1.assertIsBuffer)(privateKey);
		    // skip the type flag and use the X, Y points
		    return Buffer$d.from((0, secp256k1_1.publicKeyCreate)(privateKey, false)).slice(1);
		};
		exports.privateToPublic = privateToPublic;
		/**
		 * Returns the ethereum address of a given private key.
		 * @param privateKey A private key must be 256 bits wide
		 */
		var privateToAddress = function (privateKey) {
		    return (0, exports.publicToAddress)((0, exports.privateToPublic)(privateKey));
		};
		exports.privateToAddress = privateToAddress;
		/**
		 * Converts a public key to the Ethereum format.
		 */
		var importPublic = function (publicKey) {
		    (0, helpers_1.assertIsBuffer)(publicKey);
		    if (publicKey.length !== 64) {
		        publicKey = Buffer$d.from((0, secp256k1_1.publicKeyConvert)(publicKey, false).slice(1));
		    }
		    return publicKey;
		};
		exports.importPublic = importPublic;
		/**
		 * Returns the zero address.
		 */
		var zeroAddress = function () {
		    var addressLength = 20;
		    var addr = (0, bytes_1.zeros)(addressLength);
		    return (0, bytes_1.bufferToHex)(addr);
		};
		exports.zeroAddress = zeroAddress;
		/**
		 * Checks if a given address is the zero address.
		 */
		var isZeroAddress = function (hexAddress) {
		    try {
		        (0, helpers_1.assertIsString)(hexAddress);
		    }
		    catch (e) {
		        return false;
		    }
		    var zeroAddr = (0, exports.zeroAddress)();
		    return zeroAddr === hexAddress;
		};
		exports.isZeroAddress = isZeroAddress;
		
	} (account));

	var address = {};

	var __importDefault$1 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(address, "__esModule", { value: true });
	address.Address = void 0;
	var assert_1$1 = __importDefault$1(require$$0$5);
	var externals_1$2 = externals;
	var bytes_1$2 = bytes;
	var account_1 = account;
	var Address = /** @class */ (function () {
	    function Address(buf) {
	        (0, assert_1$1.default)(buf.length === 20, 'Invalid address length');
	        this.buf = buf;
	    }
	    /**
	     * Returns the zero address.
	     */
	    Address.zero = function () {
	        return new Address((0, bytes_1$2.zeros)(20));
	    };
	    /**
	     * Returns an Address object from a hex-encoded string.
	     * @param str - Hex-encoded address
	     */
	    Address.fromString = function (str) {
	        (0, assert_1$1.default)((0, account_1.isValidAddress)(str), 'Invalid address');
	        return new Address((0, bytes_1$2.toBuffer)(str));
	    };
	    /**
	     * Returns an address for a given public key.
	     * @param pubKey The two points of an uncompressed key
	     */
	    Address.fromPublicKey = function (pubKey) {
	        (0, assert_1$1.default)(isBuffer$1(pubKey), 'Public key should be Buffer');
	        var buf = (0, account_1.pubToAddress)(pubKey);
	        return new Address(buf);
	    };
	    /**
	     * Returns an address for a given private key.
	     * @param privateKey A private key must be 256 bits wide
	     */
	    Address.fromPrivateKey = function (privateKey) {
	        (0, assert_1$1.default)(isBuffer$1(privateKey), 'Private key should be Buffer');
	        var buf = (0, account_1.privateToAddress)(privateKey);
	        return new Address(buf);
	    };
	    /**
	     * Generates an address for a newly created contract.
	     * @param from The address which is creating this new address
	     * @param nonce The nonce of the from account
	     */
	    Address.generate = function (from, nonce) {
	        (0, assert_1$1.default)(externals_1$2.BN.isBN(nonce));
	        return new Address((0, account_1.generateAddress)(from.buf, nonce.toArrayLike(Buffer$d)));
	    };
	    /**
	     * Generates an address for a contract created using CREATE2.
	     * @param from The address which is creating this new address
	     * @param salt A salt
	     * @param initCode The init code of the contract being created
	     */
	    Address.generate2 = function (from, salt, initCode) {
	        (0, assert_1$1.default)(isBuffer$1(salt));
	        (0, assert_1$1.default)(isBuffer$1(initCode));
	        return new Address((0, account_1.generateAddress2)(from.buf, salt, initCode));
	    };
	    /**
	     * Is address equal to another.
	     */
	    Address.prototype.equals = function (address) {
	        return this.buf.equals(address.buf);
	    };
	    /**
	     * Is address zero.
	     */
	    Address.prototype.isZero = function () {
	        return this.equals(Address.zero());
	    };
	    /**
	     * True if address is in the address range defined
	     * by EIP-1352
	     */
	    Address.prototype.isPrecompileOrSystemAddress = function () {
	        var addressBN = new externals_1$2.BN(this.buf);
	        var rangeMin = new externals_1$2.BN(0);
	        var rangeMax = new externals_1$2.BN('ffff', 'hex');
	        return addressBN.gte(rangeMin) && addressBN.lte(rangeMax);
	    };
	    /**
	     * Returns hex encoding of address.
	     */
	    Address.prototype.toString = function () {
	        return '0x' + this.buf.toString('hex');
	    };
	    /**
	     * Returns Buffer representation of address.
	     */
	    Address.prototype.toBuffer = function () {
	        return Buffer$d.from(this.buf);
	    };
	    return Address;
	}());
	address.Address = Address;

	var signature = {};

	Object.defineProperty(signature, "__esModule", { value: true });
	signature.hashPersonalMessage = signature.isValidSignature = signature.fromRpcSig = signature.toCompactSig = signature.toRpcSig = signature.ecrecover = signature.ecsign = void 0;
	var secp256k1_1 = secp256k1$1;
	var externals_1$1 = externals;
	var bytes_1$1 = bytes;
	var hash_1 = hash$1;
	var helpers_1 = helpers;
	var types_1 = types$2;
	function ecsign(msgHash, privateKey, chainId) {
	    var _a = (0, secp256k1_1.ecdsaSign)(msgHash, privateKey), signature = _a.signature, recovery = _a.recid;
	    var r = Buffer$d.from(signature.slice(0, 32));
	    var s = Buffer$d.from(signature.slice(32, 64));
	    if (!chainId || typeof chainId === 'number') {
	        // return legacy type ECDSASignature (deprecated in favor of ECDSASignatureBuffer to handle large chainIds)
	        if (chainId && !Number.isSafeInteger(chainId)) {
	            throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)');
	        }
	        var v_1 = chainId ? recovery + (chainId * 2 + 35) : recovery + 27;
	        return { r: r, s: s, v: v_1 };
	    }
	    var chainIdBN = (0, types_1.toType)(chainId, types_1.TypeOutput.BN);
	    var v = chainIdBN.muln(2).addn(35).addn(recovery).toArrayLike(Buffer$d);
	    return { r: r, s: s, v: v };
	}
	signature.ecsign = ecsign;
	function calculateSigRecovery(v, chainId) {
	    var vBN = (0, types_1.toType)(v, types_1.TypeOutput.BN);
	    if (vBN.eqn(0) || vBN.eqn(1))
	        return (0, types_1.toType)(v, types_1.TypeOutput.BN);
	    if (!chainId) {
	        return vBN.subn(27);
	    }
	    var chainIdBN = (0, types_1.toType)(chainId, types_1.TypeOutput.BN);
	    return vBN.sub(chainIdBN.muln(2).addn(35));
	}
	function isValidSigRecovery(recovery) {
	    var rec = new externals_1$1.BN(recovery);
	    return rec.eqn(0) || rec.eqn(1);
	}
	/**
	 * ECDSA public key recovery from signature.
	 * NOTE: Accepts `v == 0 | v == 1` for EIP1559 transactions
	 * @returns Recovered public key
	 */
	var ecrecover = function (msgHash, v, r, s, chainId) {
	    var signature = Buffer$d.concat([(0, bytes_1$1.setLengthLeft)(r, 32), (0, bytes_1$1.setLengthLeft)(s, 32)], 64);
	    var recovery = calculateSigRecovery(v, chainId);
	    if (!isValidSigRecovery(recovery)) {
	        throw new Error('Invalid signature v value');
	    }
	    var senderPubKey = (0, secp256k1_1.ecdsaRecover)(signature, recovery.toNumber(), msgHash);
	    return Buffer$d.from((0, secp256k1_1.publicKeyConvert)(senderPubKey, false).slice(1));
	};
	signature.ecrecover = ecrecover;
	/**
	 * Convert signature parameters into the format of `eth_sign` RPC method.
	 * NOTE: Accepts `v == 0 | v == 1` for EIP1559 transactions
	 * @returns Signature
	 */
	var toRpcSig = function (v, r, s, chainId) {
	    var recovery = calculateSigRecovery(v, chainId);
	    if (!isValidSigRecovery(recovery)) {
	        throw new Error('Invalid signature v value');
	    }
	    // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin
	    return (0, bytes_1$1.bufferToHex)(Buffer$d.concat([(0, bytes_1$1.setLengthLeft)(r, 32), (0, bytes_1$1.setLengthLeft)(s, 32), (0, bytes_1$1.toBuffer)(v)]));
	};
	signature.toRpcSig = toRpcSig;
	/**
	 * Convert signature parameters into the format of Compact Signature Representation (EIP-2098).
	 * NOTE: Accepts `v == 0 | v == 1` for EIP1559 transactions
	 * @returns Signature
	 */
	var toCompactSig = function (v, r, s, chainId) {
	    var recovery = calculateSigRecovery(v, chainId);
	    if (!isValidSigRecovery(recovery)) {
	        throw new Error('Invalid signature v value');
	    }
	    var vn = (0, types_1.toType)(v, types_1.TypeOutput.Number);
	    var ss = s;
	    if ((vn > 28 && vn % 2 === 1) || vn === 1 || vn === 28) {
	        ss = Buffer$d.from(s);
	        ss[0] |= 0x80;
	    }
	    return (0, bytes_1$1.bufferToHex)(Buffer$d.concat([(0, bytes_1$1.setLengthLeft)(r, 32), (0, bytes_1$1.setLengthLeft)(ss, 32)]));
	};
	signature.toCompactSig = toCompactSig;
	/**
	 * Convert signature format of the `eth_sign` RPC method to signature parameters
	 * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053
	 * NOTE: After EIP1559, `v` could be `0` or `1` but this function assumes
	 * it's a signed message (EIP-191 or EIP-712) adding `27` at the end. Remove if needed.
	 */
	var fromRpcSig = function (sig) {
	    var buf = (0, bytes_1$1.toBuffer)(sig);
	    var r;
	    var s;
	    var v;
	    if (buf.length >= 65) {
	        r = buf.slice(0, 32);
	        s = buf.slice(32, 64);
	        v = (0, bytes_1$1.bufferToInt)(buf.slice(64));
	    }
	    else if (buf.length === 64) {
	        // Compact Signature Representation (https://eips.ethereum.org/EIPS/eip-2098)
	        r = buf.slice(0, 32);
	        s = buf.slice(32, 64);
	        v = (0, bytes_1$1.bufferToInt)(buf.slice(32, 33)) >> 7;
	        s[0] &= 0x7f;
	    }
	    else {
	        throw new Error('Invalid signature length');
	    }
	    // support both versions of `eth_sign` responses
	    if (v < 27) {
	        v += 27;
	    }
	    return {
	        v: v,
	        r: r,
	        s: s,
	    };
	};
	signature.fromRpcSig = fromRpcSig;
	/**
	 * Validate a ECDSA signature.
	 * NOTE: Accepts `v == 0 | v == 1` for EIP1559 transactions
	 * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one
	 */
	var isValidSignature = function (v, r, s, homesteadOrLater, chainId) {
	    if (homesteadOrLater === void 0) { homesteadOrLater = true; }
	    var SECP256K1_N_DIV_2 = new externals_1$1.BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);
	    var SECP256K1_N = new externals_1$1.BN('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);
	    if (r.length !== 32 || s.length !== 32) {
	        return false;
	    }
	    if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {
	        return false;
	    }
	    var rBN = new externals_1$1.BN(r);
	    var sBN = new externals_1$1.BN(s);
	    if (rBN.isZero() || rBN.gt(SECP256K1_N) || sBN.isZero() || sBN.gt(SECP256K1_N)) {
	        return false;
	    }
	    if (homesteadOrLater && sBN.cmp(SECP256K1_N_DIV_2) === 1) {
	        return false;
	    }
	    return true;
	};
	signature.isValidSignature = isValidSignature;
	/**
	 * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.
	 * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`
	 * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key
	 * used to produce the signature.
	 */
	var hashPersonalMessage = function (message) {
	    (0, helpers_1.assertIsBuffer)(message);
	    var prefix = Buffer$d.from("\u0019Ethereum Signed Message:\n".concat(message.length), 'utf-8');
	    return (0, hash_1.keccak)(Buffer$d.concat([prefix, message]));
	};
	signature.hashPersonalMessage = hashPersonalMessage;

	var object = {};

	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(object, "__esModule", { value: true });
	object.defineProperties = void 0;
	var assert_1 = __importDefault(require$$0$5);
	var internal_1 = internal;
	var externals_1 = externals;
	var bytes_1 = bytes;
	/**
	 * Defines properties on a `Object`. It make the assumption that underlying data is binary.
	 * @param self the `Object` to define properties on
	 * @param fields an array fields to define. Fields can contain:
	 * * `name` - the name of the properties
	 * * `length` - the number of bytes the field can have
	 * * `allowLess` - if the field can be less than the length
	 * * `allowEmpty`
	 * @param data data to be validated against the definitions
	 * @deprecated
	 */
	var defineProperties = function (self, fields, data) {
	    self.raw = [];
	    self._fields = [];
	    // attach the `toJSON`
	    self.toJSON = function (label) {
	        if (label === void 0) { label = false; }
	        if (label) {
	            var obj_1 = {};
	            self._fields.forEach(function (field) {
	                obj_1[field] = "0x".concat(self[field].toString('hex'));
	            });
	            return obj_1;
	        }
	        return (0, bytes_1.baToJSON)(self.raw);
	    };
	    self.serialize = function serialize() {
	        return externals_1.rlp.encode(self.raw);
	    };
	    fields.forEach(function (field, i) {
	        self._fields.push(field.name);
	        function getter() {
	            return self.raw[i];
	        }
	        function setter(v) {
	            v = (0, bytes_1.toBuffer)(v);
	            if (v.toString('hex') === '00' && !field.allowZero) {
	                v = Buffer$d.allocUnsafe(0);
	            }
	            if (field.allowLess && field.length) {
	                v = (0, bytes_1.unpadBuffer)(v);
	                (0, assert_1.default)(field.length >= v.length, "The field ".concat(field.name, " must not have more ").concat(field.length, " bytes"));
	            }
	            else if (!(field.allowZero && v.length === 0) && field.length) {
	                (0, assert_1.default)(field.length === v.length, "The field ".concat(field.name, " must have byte length of ").concat(field.length));
	            }
	            self.raw[i] = v;
	        }
	        Object.defineProperty(self, field.name, {
	            enumerable: true,
	            configurable: true,
	            get: getter,
	            set: setter,
	        });
	        if (field.default) {
	            self[field.name] = field.default;
	        }
	        // attach alias
	        if (field.alias) {
	            Object.defineProperty(self, field.alias, {
	                enumerable: false,
	                configurable: true,
	                set: setter,
	                get: getter,
	            });
	        }
	    });
	    // if the constuctor is passed data
	    if (data) {
	        if (typeof data === 'string') {
	            data = Buffer$d.from((0, internal_1.stripHexPrefix)(data), 'hex');
	        }
	        if (isBuffer$1(data)) {
	            data = externals_1.rlp.decode(data);
	        }
	        if (Array.isArray(data)) {
	            if (data.length > self._fields.length) {
	                throw new Error('wrong number of fields in data');
	            }
	            // make sure all the items are buffers
	            data.forEach(function (d, i) {
	                self[self._fields[i]] = (0, bytes_1.toBuffer)(d);
	            });
	        }
	        else if (typeof data === 'object') {
	            var keys_1 = Object.keys(data);
	            fields.forEach(function (field) {
	                if (keys_1.indexOf(field.name) !== -1)
	                    self[field.name] = data[field.name];
	                if (keys_1.indexOf(field.alias) !== -1)
	                    self[field.alias] = data[field.alias];
	            });
	        }
	        else {
	            throw new Error('invalid data');
	        }
	    }
	};
	object.defineProperties = defineProperties;

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.isHexString = exports.getKeys = exports.fromAscii = exports.fromUtf8 = exports.toAscii = exports.arrayContainsArray = exports.getBinarySize = exports.padToEven = exports.stripHexPrefix = exports.isHexPrefixed = void 0;
		/**
		 * Constants
		 */
		__exportStar(constants, exports);
		/**
		 * Account class and helper functions
		 */
		__exportStar(account, exports);
		/**
		 * Address type
		 */
		__exportStar(address, exports);
		/**
		 * Hash functions
		 */
		__exportStar(hash$1, exports);
		/**
		 * ECDSA signature
		 */
		__exportStar(signature, exports);
		/**
		 * Utilities for manipulating Buffers, byte arrays, etc.
		 */
		__exportStar(bytes, exports);
		/**
		 * Function for definining properties on an object
		 */
		__exportStar(object, exports);
		/**
		 * External exports (BN, rlp)
		 */
		__exportStar(externals, exports);
		/**
		 * Helpful TypeScript types
		 */
		__exportStar(types$2, exports);
		/**
		 * Export ethjs-util methods
		 */
		var internal_1 = internal;
		Object.defineProperty(exports, "isHexPrefixed", { enumerable: true, get: function () { return internal_1.isHexPrefixed; } });
		Object.defineProperty(exports, "stripHexPrefix", { enumerable: true, get: function () { return internal_1.stripHexPrefix; } });
		Object.defineProperty(exports, "padToEven", { enumerable: true, get: function () { return internal_1.padToEven; } });
		Object.defineProperty(exports, "getBinarySize", { enumerable: true, get: function () { return internal_1.getBinarySize; } });
		Object.defineProperty(exports, "arrayContainsArray", { enumerable: true, get: function () { return internal_1.arrayContainsArray; } });
		Object.defineProperty(exports, "toAscii", { enumerable: true, get: function () { return internal_1.toAscii; } });
		Object.defineProperty(exports, "fromUtf8", { enumerable: true, get: function () { return internal_1.fromUtf8; } });
		Object.defineProperty(exports, "fromAscii", { enumerable: true, get: function () { return internal_1.fromAscii; } });
		Object.defineProperty(exports, "getKeys", { enumerable: true, get: function () { return internal_1.getKeys; } });
		Object.defineProperty(exports, "isHexString", { enumerable: true, get: function () { return internal_1.isHexString; } });
		
	} (dist_browser$1));

	Object.defineProperty(sha3$1, "__esModule", { value: true });
	sha3$1.sha3 = void 0;
	var ethereumjs_util_1 = dist_browser$1;
	var SHA3_NULL_S = '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';
	var isHexStrict = function (hex) {
	    return /^(-)?0x[0-9a-f]*$/i.test(hex);
	};
	var sha3 = function (value) {
	    var bufferValue;
	    if (isHexStrict(value) && /^0x/i.test(value.toString())) {
	        bufferValue = (0, ethereumjs_util_1.toBuffer)(value);
	    }
	    else {
	        // Assume value is an arbitrary string
	        bufferValue = Buffer$d.from(value, 'utf-8');
	    }
	    var returnValue = (0, ethereumjs_util_1.bufferToHex)((0, ethereumjs_util_1.keccak256)(bufferValue));
	    if (returnValue === SHA3_NULL_S) {
	        return null;
	    }
	    return returnValue;
	};
	sha3$1.sha3 = sha3;

	Object.defineProperty(verifySignature, "__esModule", { value: true });
	verifySignature.makeVerifySignature = void 0;
	var api_utils_1$8 = lib$a;
	var common_core_1$e = lib$9;
	var sha3_1 = sha3$1;
	var makeVerifySignature = function (core) {
	    return function (_a) {
	        var body = _a.body, signature = _a.signature;
	        var apiKey = core.config.get(api_utils_1$8.ApiUtilsConfig.apiKey);
	        if (!apiKey) {
	            throw new common_core_1$e.MoralisStreamError({
	                code: common_core_1$e.StreamErrorCode.GENERIC_STREAM_ERROR,
	                message: 'unable to verify signature without an api key',
	            });
	        }
	        var generatedSignature = (0, sha3_1.sha3)(JSON.stringify(body) + apiKey);
	        if (signature !== generatedSignature) {
	            throw new common_core_1$e.MoralisStreamError({
	                code: common_core_1$e.StreamErrorCode.INVALID_SIGNATURE,
	                message: 'signature is not valid',
	            });
	        }
	        return true;
	    };
	};
	verifySignature.makeVerifySignature = makeVerifySignature;

	var addAddress = {};

	var __rest$7 = (commonjsGlobal && commonjsGlobal.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	Object.defineProperty(addAddress, "__esModule", { value: true });
	addAddress.makeAddAddress = void 0;
	var api_utils_1$7 = lib$a;
	var StreamNetwork_1$4 = StreamNetwork;
	var IncorrectNetworkError_1$4 = IncorrectNetworkError$1;
	var common_streams_utils_1$5 = lib$8;
	var makeAddAddressAptosStream = function (core, baseUrl, _a) {
	    _a.networkType; var options = __rest$7(_a, ["networkType"]);
	    return new api_utils_1$7.OperationResolver(common_streams_utils_1$5.addAddressAptosOperation, baseUrl, core).fetch(options);
	};
	var makeAddAddressEvmStream = function (core, baseUrl, _a) {
	    _a.networkType; var options = __rest$7(_a, ["networkType"]);
	    return new api_utils_1$7.OperationResolver(common_streams_utils_1$5.addAddressEvmOperation, baseUrl, core).fetch(options);
	};
	var makeAddAddress = function (core, baseUrl) {
	    return (function (addAddressOptions) {
	        switch (addAddressOptions.networkType) {
	            case StreamNetwork_1$4.StreamNetwork.APTOS:
	                return makeAddAddressAptosStream(core, baseUrl, addAddressOptions);
	            case StreamNetwork_1$4.StreamNetwork.EVM:
	                return makeAddAddressEvmStream(core, baseUrl, addAddressOptions);
	            default:
	                if (addAddressOptions.networkType === undefined) {
	                    return makeAddAddressEvmStream(core, baseUrl, addAddressOptions);
	                }
	                throw new IncorrectNetworkError_1$4.IncorrectNetworkError(addAddressOptions.networkType);
	        }
	    });
	};
	addAddress.makeAddAddress = makeAddAddress;

	var updateStatus = {};

	var __rest$6 = (commonjsGlobal && commonjsGlobal.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	Object.defineProperty(updateStatus, "__esModule", { value: true });
	updateStatus.makeUpdateStreamStatus = void 0;
	var api_utils_1$6 = lib$a;
	var common_streams_utils_1$4 = lib$8;
	var IncorrectNetworkError_1$3 = IncorrectNetworkError$1;
	var StreamNetwork_1$3 = StreamNetwork;
	var makeUpdateAptosStreamStatus = function (core, baseUrl, _a) {
	    _a.networkType; var options = __rest$6(_a, ["networkType"]);
	    return new api_utils_1$6.OperationResolver(common_streams_utils_1$4.updateStreamStatusAptosOperation, baseUrl, core).fetch(options);
	};
	var makeUpdateEvmStreamStatus = function (core, baseUrl, _a) {
	    _a.networkType; var options = __rest$6(_a, ["networkType"]);
	    return new api_utils_1$6.OperationResolver(common_streams_utils_1$4.updateStreamStatusEvmOperation, baseUrl, core).fetch(options);
	};
	var makeUpdateStreamStatus = function (core, baseUrl) {
	    return (function (updateStreamOptions) {
	        switch (updateStreamOptions.networkType) {
	            case StreamNetwork_1$3.StreamNetwork.APTOS:
	                return makeUpdateAptosStreamStatus(core, baseUrl, updateStreamOptions);
	            case StreamNetwork_1$3.StreamNetwork.EVM:
	                return makeUpdateEvmStreamStatus(core, baseUrl, updateStreamOptions);
	            default:
	                if (updateStreamOptions.networkType === undefined) {
	                    return makeUpdateEvmStreamStatus(core, baseUrl, updateStreamOptions);
	                }
	                throw new IncorrectNetworkError_1$3.IncorrectNetworkError(updateStreamOptions.networkType);
	        }
	    });
	};
	updateStatus.makeUpdateStreamStatus = makeUpdateStreamStatus;

	var logParser = {};

	var logDecoderUtils = {};

	Object.defineProperty(logDecoderUtils, "__esModule", { value: true });
	logDecoderUtils.isNotEmpty = logDecoderUtils.isWebhook = logDecoderUtils.hasAbis = void 0;
	var hasAbis = function (webhookData) {
	    if (!webhookData.abi || webhookData.abi.length < 1) {
	        return false;
	    }
	    return true;
	};
	logDecoderUtils.hasAbis = hasAbis;
	var isWebhook = function (webhookData) {
	    if (typeof webhookData !== 'object' || webhookData === null || !('logs' in webhookData)) {
	        return false;
	    }
	    return true;
	};
	logDecoderUtils.isWebhook = isWebhook;
	var isNotEmpty = function (value) { return value !== null && value !== undefined; };
	logDecoderUtils.isNotEmpty = isNotEmpty;

	var mapping = {};

	var common = {};

	var CollectionNameBuilder$1 = {};

	Object.defineProperty(CollectionNameBuilder$1, "__esModule", { value: true });
	CollectionNameBuilder$1.CollectionNameBuilder = void 0;
	var CollectionNameBuilder = /** @class */ (function () {
	    function CollectionNameBuilder() {
	        this.cache = {};
	        this.cacheLimit = 256;
	    }
	    CollectionNameBuilder.prototype.build = function (tag) {
	        var result = this.cache[tag];
	        if (!result) {
	            result = this.process(tag);
	            if (this.cacheLimit > 0) {
	                // Simple anti DDOS protection.
	                this.cache[tag] = result;
	                this.cacheLimit--;
	            }
	        }
	        return result;
	    };
	    CollectionNameBuilder.prototype.process = function (tag) {
	        var parts = tag
	            .split(/[^a-zA-Z0-9_]/)
	            .filter(function (p) { return !!p; })
	            .map(function (p) {
	            return p.substring(0, 1).toUpperCase() + p.substring(1).toLowerCase();
	        });
	        if (parts.length < 1) {
	            throw new Error("Cannot build table name from value \"".concat(tag, "\""));
	        }
	        return parts.join('');
	    };
	    return CollectionNameBuilder;
	}());
	CollectionNameBuilder$1.CollectionNameBuilder = CollectionNameBuilder;

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(CollectionNameBuilder$1, exports);
		
	} (common));

	var erc20TransfersProcessor = {};

	var Erc20TransfersProcessor$1 = {};

	var SimpleProcessor$1 = {};

	Object.defineProperty(SimpleProcessor$1, "__esModule", { value: true });
	SimpleProcessor$1.SimpleProcessor = void 0;
	var SimpleProcessor = /** @class */ (function () {
	    function SimpleProcessor(collectionNameBuilder, documentBuilder) {
	        this.collectionNameBuilder = collectionNameBuilder;
	        this.documentBuilder = documentBuilder;
	    }
	    SimpleProcessor.prototype.process = function (items, batch) {
	        var updates = [];
	        if (items) {
	            for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
	                var item = items_1[_i];
	                var document = this.documentBuilder(item, batch.block, batch.confirmed, batch.chainId);
	                updates.push({
	                    collectionName: this.collectionNameBuilder.build(batch.tag),
	                    document: document,
	                });
	            }
	        }
	        return updates;
	    };
	    return SimpleProcessor;
	}());
	SimpleProcessor$1.SimpleProcessor = SimpleProcessor;

	var Erc20TransferDocumentBuilder$1 = {};

	var LogRelatedId$1 = {};

	var Sha256$1 = {};

	var SupportedAlgorithm;
	(function (SupportedAlgorithm) {
	    SupportedAlgorithm["sha256"] = "sha256";
	    SupportedAlgorithm["sha512"] = "sha512";
	})(SupportedAlgorithm || (SupportedAlgorithm = {}));

	const version = "sha2/5.7.0";

	const logger = new Logger(version);
	function ripemd160(data) {
	    return "0x" + (hash$4.ripemd160().update(arrayify(data)).digest("hex"));
	}
	function sha256(data) {
	    return "0x" + (hash$4.sha256().update(arrayify(data)).digest("hex"));
	}
	function sha512(data) {
	    return "0x" + (hash$4.sha512().update(arrayify(data)).digest("hex"));
	}
	function computeHmac(algorithm, key, data) {
	    if (!SupportedAlgorithm[algorithm]) {
	        logger.throwError("unsupported algorithm " + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {
	            operation: "hmac",
	            algorithm: algorithm
	        });
	    }
	    return "0x" + hash$4.hmac(hash$4[algorithm], arrayify(key)).update(arrayify(data)).digest("hex");
	}

	var lib_esm = /*#__PURE__*/Object.freeze({
		__proto__: null,
		get SupportedAlgorithm () { return SupportedAlgorithm; },
		computeHmac: computeHmac,
		ripemd160: ripemd160,
		sha256: sha256,
		sha512: sha512
	});

	var require$$0$1 = /*@__PURE__*/getAugmentedNamespace(lib_esm);

	var require$$1 = /*@__PURE__*/getAugmentedNamespace(lib_esm$2);

	Object.defineProperty(Sha256$1, "__esModule", { value: true });
	Sha256$1.Sha256 = void 0;
	var sha2_1 = require$$0$1;
	var strings_1 = require$$1;
	var Sha256 = /** @class */ (function () {
	    function Sha256() {
	    }
	    Sha256.hash = function (value) {
	        var bytes = (0, strings_1.toUtf8Bytes)(value);
	        return (0, sha2_1.sha256)(bytes);
	    };
	    return Sha256;
	}());
	Sha256$1.Sha256 = Sha256;

	Object.defineProperty(LogRelatedId$1, "__esModule", { value: true });
	LogRelatedId$1.LogRelatedId = void 0;
	var Sha256_1$1 = Sha256$1;
	var LogRelatedId = /** @class */ (function () {
	    function LogRelatedId() {
	    }
	    LogRelatedId.create = function (chainId, transactionHash, logIndex) {
	        var safeTransactionHash = transactionHash.toLowerCase();
	        return Sha256_1$1.Sha256.hash("".concat(chainId, ";").concat(safeTransactionHash, ";").concat(logIndex));
	    };
	    return LogRelatedId;
	}());
	LogRelatedId$1.LogRelatedId = LogRelatedId;

	Object.defineProperty(Erc20TransferDocumentBuilder$1, "__esModule", { value: true });
	Erc20TransferDocumentBuilder$1.Erc20TransferDocumentBuilder = void 0;
	var LogRelatedId_1$4 = LogRelatedId$1;
	var Erc20TransferDocumentBuilder = /** @class */ (function () {
	    function Erc20TransferDocumentBuilder() {
	    }
	    Erc20TransferDocumentBuilder.build = function (transfer, block, confirmed, chainId) {
	        var chain = Number(chainId);
	        var document = {
	            id: LogRelatedId_1$4.LogRelatedId.create(chain, transfer.transactionHash, transfer.logIndex),
	            transactionHash: transfer.transactionHash,
	            contract: transfer.contract,
	            logIndex: transfer.logIndex,
	            from: transfer.from,
	            to: transfer.to,
	            value: transfer.value,
	            tokenDecimals: parseInt(transfer.tokenDecimals, 10),
	            tokenName: transfer.tokenName,
	            tokenSymbol: transfer.tokenSymbol,
	            blockHash: block.hash,
	            blockTimestamp: parseInt(block.timestamp, 10),
	            blockNumber: parseInt(block.number, 10),
	            confirmed: confirmed,
	            chainId: chain,
	        };
	        return document;
	    };
	    return Erc20TransferDocumentBuilder;
	}());
	Erc20TransferDocumentBuilder$1.Erc20TransferDocumentBuilder = Erc20TransferDocumentBuilder;

	Object.defineProperty(Erc20TransfersProcessor$1, "__esModule", { value: true });
	Erc20TransfersProcessor$1.Erc20TransfersProcessor = void 0;
	var SimpleProcessor_1$5 = SimpleProcessor$1;
	var Erc20TransferDocumentBuilder_1 = Erc20TransferDocumentBuilder$1;
	var Erc20TransfersProcessor = /** @class */ (function () {
	    function Erc20TransfersProcessor(collectionNameBuilder) {
	        this.collectionNameBuilder = collectionNameBuilder;
	        this.simpleProcessor = new SimpleProcessor_1$5.SimpleProcessor(this.collectionNameBuilder, Erc20TransferDocumentBuilder_1.Erc20TransferDocumentBuilder.build);
	    }
	    Erc20TransfersProcessor.prototype.process = function (batch) {
	        return this.simpleProcessor.process(batch.erc20Transfers, batch);
	    };
	    return Erc20TransfersProcessor;
	}());
	Erc20TransfersProcessor$1.Erc20TransfersProcessor = Erc20TransfersProcessor;

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(Erc20TransfersProcessor$1, exports);
		__exportStar(Erc20TransferDocumentBuilder$1, exports);
		
	} (erc20TransfersProcessor));

	var erc20ApprovalsProcessor = {};

	var Erc20ApprovalsProcessor$1 = {};

	var Erc20ApprovalDocumentBuilder$1 = {};

	Object.defineProperty(Erc20ApprovalDocumentBuilder$1, "__esModule", { value: true });
	Erc20ApprovalDocumentBuilder$1.Erc20ApprovalDocumentBuilder = void 0;
	var LogRelatedId_1$3 = LogRelatedId$1;
	var Erc20ApprovalDocumentBuilder = /** @class */ (function () {
	    function Erc20ApprovalDocumentBuilder() {
	    }
	    Erc20ApprovalDocumentBuilder.build = function (approval, block, confirmed, chainId) {
	        var chain = Number(chainId);
	        var document = {
	            id: LogRelatedId_1$3.LogRelatedId.create(chain, approval.transactionHash, approval.logIndex),
	            transactionHash: approval.transactionHash,
	            contract: approval.contract,
	            logIndex: approval.logIndex,
	            owner: approval.owner,
	            spender: approval.spender,
	            value: approval.value,
	            tokenDecimals: parseInt(approval.tokenDecimals, 10),
	            tokenName: approval.tokenName,
	            tokenSymbol: approval.tokenSymbol,
	            blockHash: block.hash,
	            blockTimestamp: parseInt(block.timestamp, 10),
	            blockNumber: parseInt(block.number, 10),
	            confirmed: confirmed,
	            chainId: chain,
	        };
	        return document;
	    };
	    return Erc20ApprovalDocumentBuilder;
	}());
	Erc20ApprovalDocumentBuilder$1.Erc20ApprovalDocumentBuilder = Erc20ApprovalDocumentBuilder;

	Object.defineProperty(Erc20ApprovalsProcessor$1, "__esModule", { value: true });
	Erc20ApprovalsProcessor$1.Erc20ApprovalsProcessor = void 0;
	var SimpleProcessor_1$4 = SimpleProcessor$1;
	var Erc20ApprovalDocumentBuilder_1 = Erc20ApprovalDocumentBuilder$1;
	var Erc20ApprovalsProcessor = /** @class */ (function () {
	    function Erc20ApprovalsProcessor(collectionNameBuilder) {
	        this.collectionNameBuilder = collectionNameBuilder;
	        this.processor = new SimpleProcessor_1$4.SimpleProcessor(this.collectionNameBuilder, Erc20ApprovalDocumentBuilder_1.Erc20ApprovalDocumentBuilder.build);
	    }
	    Erc20ApprovalsProcessor.prototype.process = function (batch) {
	        return this.processor.process(batch.erc20Approvals, batch);
	    };
	    return Erc20ApprovalsProcessor;
	}());
	Erc20ApprovalsProcessor$1.Erc20ApprovalsProcessor = Erc20ApprovalsProcessor;

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(Erc20ApprovalsProcessor$1, exports);
		__exportStar(Erc20ApprovalDocumentBuilder$1, exports);
		
	} (erc20ApprovalsProcessor));

	var internalTxsProcessor = {};

	var InternalTxsProcessor$1 = {};

	var InternalTxDocumentBuilder$1 = {};

	var TxRelatedId$1 = {};

	Object.defineProperty(TxRelatedId$1, "__esModule", { value: true });
	TxRelatedId$1.TxRelatedId = void 0;
	var Sha256_1 = Sha256$1;
	var TxRelatedId = /** @class */ (function () {
	    function TxRelatedId() {
	    }
	    TxRelatedId.create = function (chainId, transactionHash) {
	        var safeTransactionHash = transactionHash.toLowerCase();
	        return Sha256_1.Sha256.hash("".concat(chainId, ";").concat(safeTransactionHash));
	    };
	    return TxRelatedId;
	}());
	TxRelatedId$1.TxRelatedId = TxRelatedId;

	Object.defineProperty(InternalTxDocumentBuilder$1, "__esModule", { value: true });
	InternalTxDocumentBuilder$1.InternalTxDocumentBuilder = void 0;
	var TxRelatedId_1$1 = TxRelatedId$1;
	var InternalTxDocumentBuilder = /** @class */ (function () {
	    function InternalTxDocumentBuilder() {
	    }
	    InternalTxDocumentBuilder.build = function (tx, block, confirmed, chainId) {
	        var chain = Number(chainId);
	        return {
	            id: TxRelatedId_1$1.TxRelatedId.create(chain, tx.transactionHash),
	            hash: tx.transactionHash,
	            chainId: chain,
	            from: tx.from,
	            to: tx.to,
	            value: tx.value,
	            gas: parseInt(tx.gas || '0', 10),
	            blockHash: block.hash,
	            blockTimestamp: parseInt(block.timestamp, 10),
	            blockNumber: parseInt(block.number, 10),
	            confirmed: confirmed,
	        };
	    };
	    return InternalTxDocumentBuilder;
	}());
	InternalTxDocumentBuilder$1.InternalTxDocumentBuilder = InternalTxDocumentBuilder;

	Object.defineProperty(InternalTxsProcessor$1, "__esModule", { value: true });
	InternalTxsProcessor$1.InternalTxsProcessor = void 0;
	var SimpleProcessor_1$3 = SimpleProcessor$1;
	var InternalTxDocumentBuilder_1 = InternalTxDocumentBuilder$1;
	var InternalTxsProcessor = /** @class */ (function () {
	    function InternalTxsProcessor(collectionNameBuilder) {
	        this.collectionNameBuilder = collectionNameBuilder;
	        this.simpleProcessor = new SimpleProcessor_1$3.SimpleProcessor(this.collectionNameBuilder, InternalTxDocumentBuilder_1.InternalTxDocumentBuilder.build);
	    }
	    InternalTxsProcessor.prototype.process = function (batch) {
	        return this.simpleProcessor.process(batch.txsInternal, batch);
	    };
	    return InternalTxsProcessor;
	}());
	InternalTxsProcessor$1.InternalTxsProcessor = InternalTxsProcessor;

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(InternalTxsProcessor$1, exports);
		__exportStar(InternalTxDocumentBuilder$1, exports);
		
	} (internalTxsProcessor));

	var logsProcessor = {};

	var LogDocumentBuilder$1 = {};

	var LogDocumentValueFormatter$1 = {};

	var require$$0 = /*@__PURE__*/getAugmentedNamespace(lib_esm$4);

	Object.defineProperty(LogDocumentValueFormatter$1, "__esModule", { value: true });
	LogDocumentValueFormatter$1.LogDocumentValueFormatter = void 0;
	var bignumber_1 = require$$0;
	var LogDocumentValueFormatter = /** @class */ (function () {
	    function LogDocumentValueFormatter() {
	    }
	    LogDocumentValueFormatter.format = function (param) {
	        switch (param.type) {
	            case 'string':
	                return param.value;
	            case 'address':
	                return param.value.toLowerCase();
	            default:
	                if (bignumber_1.BigNumber.isBigNumber(param.value)) {
	                    return param.value.toString();
	                }
	                return param.value.toString();
	        }
	    };
	    return LogDocumentValueFormatter;
	}());
	LogDocumentValueFormatter$1.LogDocumentValueFormatter = LogDocumentValueFormatter;

	var ParamNameResolver$1 = {};

	Object.defineProperty(ParamNameResolver$1, "__esModule", { value: true });
	ParamNameResolver$1.ParamNameResolver = void 0;
	var ParamNameResolver = /** @class */ (function () {
	    function ParamNameResolver(restrictedNames) {
	        this.restrictedNames = restrictedNames;
	        this.usedNames = [];
	    }
	    ParamNameResolver.prototype.iterate = function (object, callback) {
	        var _this = this;
	        // We need to always keep parameters in the same order
	        // because the RowParamNameResolver is order-sensitive.
	        var sortedNames = Object.keys(object).sort(function (a, b) { return a.localeCompare(b); });
	        sortedNames.forEach(function (name) {
	            var safeName = _this.resolve(name);
	            callback(safeName, object[name]);
	        });
	    };
	    ParamNameResolver.prototype.resolve = function (name) {
	        if (this.isUsed(name)) {
	            do {
	                name = "_".concat(name);
	            } while (this.isUsed(name));
	        }
	        this.usedNames.push(name);
	        return name;
	    };
	    ParamNameResolver.prototype.isUsed = function (name) {
	        return this.restrictedNames.includes(name) || this.usedNames.includes(name);
	    };
	    return ParamNameResolver;
	}());
	ParamNameResolver$1.ParamNameResolver = ParamNameResolver;

	var __spreadArray = (commonjsGlobal && commonjsGlobal.__spreadArray) || function (to, from, pack) {
	    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
	        if (ar || !(i in from)) {
	            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
	            ar[i] = from[i];
	        }
	    }
	    return to.concat(ar || Array.prototype.slice.call(from));
	};
	Object.defineProperty(LogDocumentBuilder$1, "__esModule", { value: true });
	LogDocumentBuilder$1.LogDocumentBuilder = void 0;
	var LogDocumentValueFormatter_1 = LogDocumentValueFormatter$1;
	var ParamNameResolver_1 = ParamNameResolver$1;
	var LogRelatedId_1$2 = LogRelatedId$1;
	var paramNames = [
	    'id',
	    'name',
	    'logIndex',
	    'transactionHash',
	    'address',
	    'blockHash',
	    'blockTimestamp',
	    'blockNumber',
	    'confirmed',
	    'chainId',
	];
	var restrictedParamNames = __spreadArray(__spreadArray([], paramNames, true), [
	    // Some extra names
	    '_id',
	    'uniqueId',
	    'updatedAt',
	    'createdAt',
	    'user',
	    'userId',
	], false);
	var LogDocumentBuilder = /** @class */ (function () {
	    function LogDocumentBuilder() {
	    }
	    LogDocumentBuilder.build = function (log, parsedLog, block, confirmed, chainId) {
	        var nameResolver = new ParamNameResolver_1.ParamNameResolver(restrictedParamNames);
	        var chain = Number(chainId);
	        var document = {
	            id: LogRelatedId_1$2.LogRelatedId.create(chain, log.transactionHash, log.logIndex),
	            name: parsedLog.name,
	            logIndex: parseInt(log.logIndex, 10),
	            transactionHash: log.transactionHash,
	            address: log.address,
	            blockHash: block.hash,
	            blockTimestamp: parseInt(block.timestamp, 10),
	            blockNumber: parseInt(block.number, 10),
	            confirmed: confirmed,
	            chainId: chain,
	        };
	        nameResolver.iterate(parsedLog.params, function (safeParamName, paramValue) {
	            document[safeParamName] = LogDocumentValueFormatter_1.LogDocumentValueFormatter.format(paramValue);
	        });
	        return document;
	    };
	    return LogDocumentBuilder;
	}());
	LogDocumentBuilder$1.LogDocumentBuilder = LogDocumentBuilder;

	var LogParser$1 = {};

	Object.defineProperty(LogParser$1, "__esModule", { value: true });
	LogParser$1.LogParser = void 0;
	var abi_1 = require$$0$6;
	var LogParser = /** @class */ (function () {
	    function LogParser(abiItems) {
	        this.abiInterface = new abi_1.Interface(abiItems);
	    }
	    LogParser.prototype.read = function (log) {
	        // Solidity supports max 3 topics. https://docs.soliditylang.org/en/latest/contracts.html#events
	        var topics = [log.topic0, log.topic1, log.topic2, log.topic3].filter(function (t) { return t !== null; });
	        // Do not call the `this.abiInterface.parseLog()` method here! The @ethersproject/abi package (5.7.0) has a bug,
	        // that doesn't return `args` with named keys in a specific case. That problem doesn't occur when we call directly the decodeEventLog() method.
	        var eventFragment = this.abiInterface.getEvent(topics[0]);
	        var args = this.abiInterface.decodeEventLog(eventFragment, log.data, topics);
	        var params = {};
	        for (var _i = 0, _a = eventFragment.inputs; _i < _a.length; _i++) {
	            var input = _a[_i];
	            var value = args[input.name];
	            if (value instanceof abi_1.Indexed) {
	                value = value.hash;
	            }
	            params[input.name] = {
	                type: input.type,
	                value: value,
	            };
	        }
	        return {
	            name: eventFragment.name,
	            params: params,
	        };
	    };
	    return LogParser;
	}());
	LogParser$1.LogParser = LogParser;

	var LogsProcessor$1 = {};

	Object.defineProperty(LogsProcessor$1, "__esModule", { value: true });
	LogsProcessor$1.LogsProcessor = void 0;
	var LogParser_1 = LogParser$1;
	var LogDocumentBuilder_1 = LogDocumentBuilder$1;
	var LogsProcessor = /** @class */ (function () {
	    function LogsProcessor(collectionNameBuilder) {
	        this.collectionNameBuilder = collectionNameBuilder;
	    }
	    LogsProcessor.prototype.process = function (batch) {
	        var updates = [];
	        if (batch.abi.length < 1) {
	            return updates;
	        }
	        var logParser = new LogParser_1.LogParser(batch.abi);
	        for (var _i = 0, _a = batch.logs; _i < _a.length; _i++) {
	            var log = _a[_i];
	            var logParams = logParser.read(log);
	            var document = LogDocumentBuilder_1.LogDocumentBuilder.build(log, logParams, batch.block, batch.confirmed, batch.chainId);
	            updates.push({
	                collectionName: this.collectionNameBuilder.build(batch.tag),
	                document: document,
	            });
	        }
	        return updates;
	    };
	    return LogsProcessor;
	}());
	LogsProcessor$1.LogsProcessor = LogsProcessor;

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(LogDocumentBuilder$1, exports);
		__exportStar(LogDocumentValueFormatter$1, exports);
		__exportStar(LogParser$1, exports);
		__exportStar(LogsProcessor$1, exports);
		__exportStar(ParamNameResolver$1, exports);
		
	} (logsProcessor));

	var nftTransfersProcessor = {};

	var NftTransferDocumentBuilder$1 = {};

	Object.defineProperty(NftTransferDocumentBuilder$1, "__esModule", { value: true });
	NftTransferDocumentBuilder$1.NftTransferDocumentBuilder = void 0;
	var LogRelatedId_1$1 = LogRelatedId$1;
	var NftTransferDocumentBuilder = /** @class */ (function () {
	    function NftTransferDocumentBuilder() {
	    }
	    NftTransferDocumentBuilder.build = function (transfer, block, confirmed, chainId) {
	        var chain = Number(chainId);
	        var document = {
	            id: LogRelatedId_1$1.LogRelatedId.create(chain, transfer.transactionHash, transfer.logIndex),
	            transactionHash: transfer.transactionHash,
	            contract: transfer.contract,
	            logIndex: transfer.logIndex,
	            operator: transfer.operator,
	            from: transfer.from,
	            to: transfer.to,
	            tokenId: transfer.tokenId,
	            amount: transfer.amount,
	            tokenContractType: transfer.tokenContractType,
	            tokenName: transfer.tokenName,
	            tokenSymbol: transfer.tokenSymbol,
	            blockHash: block.hash,
	            blockTimestamp: parseInt(block.timestamp, 10),
	            blockNumber: parseInt(block.number, 10),
	            confirmed: confirmed,
	            chainId: chain,
	        };
	        return document;
	    };
	    return NftTransferDocumentBuilder;
	}());
	NftTransferDocumentBuilder$1.NftTransferDocumentBuilder = NftTransferDocumentBuilder;

	var NftTransfersProcessor$1 = {};

	Object.defineProperty(NftTransfersProcessor$1, "__esModule", { value: true });
	NftTransfersProcessor$1.NftTransfersProcessor = void 0;
	var SimpleProcessor_1$2 = SimpleProcessor$1;
	var NftTransferDocumentBuilder_1 = NftTransferDocumentBuilder$1;
	var NftTransfersProcessor = /** @class */ (function () {
	    function NftTransfersProcessor(collectionNameBuilder) {
	        this.collectionNameBuilder = collectionNameBuilder;
	        this.simpleProcessor = new SimpleProcessor_1$2.SimpleProcessor(this.collectionNameBuilder, NftTransferDocumentBuilder_1.NftTransferDocumentBuilder.build);
	    }
	    NftTransfersProcessor.prototype.process = function (batch) {
	        return this.simpleProcessor.process(batch.nftTransfers, batch);
	    };
	    return NftTransfersProcessor;
	}());
	NftTransfersProcessor$1.NftTransfersProcessor = NftTransfersProcessor;

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(NftTransferDocumentBuilder$1, exports);
		__exportStar(NftTransfersProcessor$1, exports);
		
	} (nftTransfersProcessor));

	var nftApprovalsProcessor = {};

	var NftApprovalDocumentBuilder$1 = {};

	Object.defineProperty(NftApprovalDocumentBuilder$1, "__esModule", { value: true });
	NftApprovalDocumentBuilder$1.NftApprovalDocumentBuilder = void 0;
	var LogRelatedId_1 = LogRelatedId$1;
	var NftApprovalDocumentBuilder = /** @class */ (function () {
	    function NftApprovalDocumentBuilder() {
	    }
	    NftApprovalDocumentBuilder.build = function (approval, block, confirmed, chainId) {
	        var chain = Number(chainId);
	        var document = {
	            id: LogRelatedId_1.LogRelatedId.create(chain, approval.transactionHash, approval.logIndex),
	            transactionHash: approval.transactionHash,
	            contract: approval.contract,
	            logIndex: approval.logIndex,
	            operator: approval.operator,
	            account: approval.account,
	            approvedAll: approval.approvedAll,
	            tokenId: approval.tokenId,
	            tokenContractType: approval.tokenContractType,
	            tokenName: approval.tokenName,
	            tokenSymbol: approval.tokenSymbol,
	            blockHash: block.hash,
	            blockTimestamp: parseInt(block.timestamp, 10),
	            blockNumber: parseInt(block.number, 10),
	            confirmed: confirmed,
	            chainId: chain,
	        };
	        return document;
	    };
	    return NftApprovalDocumentBuilder;
	}());
	NftApprovalDocumentBuilder$1.NftApprovalDocumentBuilder = NftApprovalDocumentBuilder;

	var NftApprovalsProcessor$1 = {};

	Object.defineProperty(NftApprovalsProcessor$1, "__esModule", { value: true });
	NftApprovalsProcessor$1.NftApprovalsProcessor = void 0;
	var SimpleProcessor_1$1 = SimpleProcessor$1;
	var NftApprovalDocumentBuilder_1 = NftApprovalDocumentBuilder$1;
	var NftApprovalsProcessor = /** @class */ (function () {
	    function NftApprovalsProcessor(collectionNameBuilder) {
	        this.collectionNameBuilder = collectionNameBuilder;
	        this.simpleProcessor = new SimpleProcessor_1$1.SimpleProcessor(this.collectionNameBuilder, NftApprovalDocumentBuilder_1.NftApprovalDocumentBuilder.build);
	    }
	    NftApprovalsProcessor.prototype.process = function (batch) {
	        return this.simpleProcessor.process(batch.nftTokenApprovals, batch);
	    };
	    return NftApprovalsProcessor;
	}());
	NftApprovalsProcessor$1.NftApprovalsProcessor = NftApprovalsProcessor;

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(NftApprovalDocumentBuilder$1, exports);
		__exportStar(NftApprovalsProcessor$1, exports);
		
	} (nftApprovalsProcessor));

	var storage = {};

	var Update = {};

	Object.defineProperty(Update, "__esModule", { value: true });

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(Update, exports);
		
	} (storage));

	var txsProcessor = {};

	var TxDocumentBuilder$1 = {};

	Object.defineProperty(TxDocumentBuilder$1, "__esModule", { value: true });
	TxDocumentBuilder$1.TxDocumentBuilder = void 0;
	var TxRelatedId_1 = TxRelatedId$1;
	var TxDocumentBuilder = /** @class */ (function () {
	    function TxDocumentBuilder() {
	    }
	    TxDocumentBuilder.build = function (tx, block, confirmed, chainId) {
	        var chain = Number(chainId);
	        return {
	            id: TxRelatedId_1.TxRelatedId.create(chain, tx.hash),
	            hash: tx.hash,
	            chainId: chain,
	            transactionIndex: parseInt(tx.transactionIndex, 10),
	            gas: parseInt(tx.gas, 10),
	            gasPrice: parseInt(tx.gasPrice, 10),
	            nonce: parseInt(tx.nonce, 10),
	            fromAddress: tx.fromAddress,
	            toAddress: tx.toAddress,
	            value: tx.value || '0',
	            input: tx.input,
	            type: parseInt(tx.type, 10),
	            receiptStatus: parseInt(tx.receiptStatus, 10),
	            receiptGasUsed: parseInt(tx.receiptGasUsed, 10),
	            receiptCumulativeGasUsed: parseInt(tx.receiptCumulativeGasUsed, 10),
	            blockHash: block.hash,
	            blockTimestamp: parseInt(block.timestamp, 10),
	            blockNumber: parseInt(block.number, 10),
	            confirmed: confirmed,
	        };
	    };
	    return TxDocumentBuilder;
	}());
	TxDocumentBuilder$1.TxDocumentBuilder = TxDocumentBuilder;

	var TxsProcessor$1 = {};

	Object.defineProperty(TxsProcessor$1, "__esModule", { value: true });
	TxsProcessor$1.TxsProcessor = void 0;
	var SimpleProcessor_1 = SimpleProcessor$1;
	var TxDocumentBuilder_1 = TxDocumentBuilder$1;
	var TxsProcessor = /** @class */ (function () {
	    function TxsProcessor(collectionNameBuilder) {
	        this.collectionNameBuilder = collectionNameBuilder;
	        this.processor = new SimpleProcessor_1.SimpleProcessor(this.collectionNameBuilder, TxDocumentBuilder_1.TxDocumentBuilder.build);
	    }
	    TxsProcessor.prototype.process = function (batch) {
	        return this.processor.process(batch.txs, batch);
	    };
	    return TxsProcessor;
	}());
	TxsProcessor$1.TxsProcessor = TxsProcessor;

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(TxDocumentBuilder$1, exports);
		__exportStar(TxsProcessor$1, exports);
		
	} (txsProcessor));

	var BatchProcessor$1 = {};

	Object.defineProperty(BatchProcessor$1, "__esModule", { value: true });
	BatchProcessor$1.BatchProcessor = void 0;
	var common_1 = common;
	var erc20_approvals_processor_1 = erc20ApprovalsProcessor;
	var erc20_transfers_processor_1 = erc20TransfersProcessor;
	var internal_txs_processor_1 = internalTxsProcessor;
	var logs_processor_1 = logsProcessor;
	var nft_approvals_processor_1 = nftApprovalsProcessor;
	var nft_transfers_processor_1 = nftTransfersProcessor;
	var txs_processor_1 = txsProcessor;
	var BatchProcessor = /** @class */ (function () {
	    function BatchProcessor(erc20ApprovalsProcessor, erc20TransfersProcessor, internalTxsProcessor, logsProcessor, nftApprovalsProcessor, nftTransfersProcessor, txsProcessor) {
	        this.erc20ApprovalsProcessor = erc20ApprovalsProcessor;
	        this.erc20TransfersProcessor = erc20TransfersProcessor;
	        this.internalTxsProcessor = internalTxsProcessor;
	        this.logsProcessor = logsProcessor;
	        this.nftApprovalsProcessor = nftApprovalsProcessor;
	        this.nftTransfersProcessor = nftTransfersProcessor;
	        this.txsProcessor = txsProcessor;
	    }
	    BatchProcessor.create = function () {
	        var nameBuilder = new common_1.CollectionNameBuilder();
	        return new BatchProcessor(new erc20_approvals_processor_1.Erc20ApprovalsProcessor(nameBuilder), new erc20_transfers_processor_1.Erc20TransfersProcessor(nameBuilder), new internal_txs_processor_1.InternalTxsProcessor(nameBuilder), new logs_processor_1.LogsProcessor(nameBuilder), new nft_approvals_processor_1.NftApprovalsProcessor(nameBuilder), new nft_transfers_processor_1.NftTransfersProcessor(nameBuilder), new txs_processor_1.TxsProcessor(nameBuilder));
	    };
	    BatchProcessor.prototype.process = function (batch) {
	        var _this = this;
	        return {
	            erc20Approvals: function () { return _this.erc20ApprovalsProcessor.process(batch); },
	            erc20Transfers: function () { return _this.erc20TransfersProcessor.process(batch); },
	            internalTxs: function () { return _this.internalTxsProcessor.process(batch); },
	            logs: function () { return _this.logsProcessor.process(batch); },
	            nftApprovals: function () { return _this.nftApprovalsProcessor.process(batch); },
	            nftTransfers: function () { return _this.nftTransfersProcessor.process(batch); },
	            txs: function () { return _this.txsProcessor.process(batch); },
	        };
	    };
	    return BatchProcessor;
	}());
	BatchProcessor$1.BatchProcessor = BatchProcessor;

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(common, exports);
		__exportStar(erc20TransfersProcessor, exports);
		__exportStar(erc20ApprovalsProcessor, exports);
		__exportStar(internalTxsProcessor, exports);
		__exportStar(logsProcessor, exports);
		__exportStar(nftTransfersProcessor, exports);
		__exportStar(nftApprovalsProcessor, exports);
		__exportStar(storage, exports);
		__exportStar(txsProcessor, exports);
		__exportStar(BatchProcessor$1, exports);
		
	} (mapping));

	Object.defineProperty(logParser, "__esModule", { value: true });
	logParser.parseLog = void 0;
	var common_core_1$d = lib$9;
	var logDecoderUtils_1 = logDecoderUtils;
	var mapping_1 = mapping;
	var parseLog = function (webhookData) {
	    if (!(0, logDecoderUtils_1.isWebhook)(webhookData)) {
	        throw new common_core_1$d.MoralisStreamError({
	            code: common_core_1$d.StreamErrorCode.GENERIC_STREAM_ERROR,
	            message: 'Cannot decode the logs. No logs found in the webhook, or invalid webhook provided.',
	        });
	    }
	    if (!(0, logDecoderUtils_1.hasAbis)(webhookData)) {
	        throw new common_core_1$d.MoralisStreamError({
	            code: common_core_1$d.StreamErrorCode.GENERIC_STREAM_ERROR,
	            message: 'Cannot decode the logs. No abis found in the provided webhook.',
	        });
	    }
	    var logs = webhookData.logs, abi = webhookData.abi;
	    var decodedLogs = [];
	    logs.forEach(function (currentLog) {
	        var params = new mapping_1.LogParser(abi).read(currentLog).params;
	        // eslint-disable-next-line @typescript-eslint/no-explicit-any
	        var decodedLog = {};
	        for (var key in params) {
	            if (Object.prototype.hasOwnProperty.call(params, key)) {
	                var element = params[key];
	                decodedLog[key] = element.value;
	            }
	        }
	        decodedLogs.push(decodedLog);
	    });
	    return decodedLogs;
	};
	logParser.parseLog = parseLog;

	var getAddresses = {};

	var __rest$5 = (commonjsGlobal && commonjsGlobal.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	Object.defineProperty(getAddresses, "__esModule", { value: true });
	getAddresses.makeGetAddresses = void 0;
	var api_utils_1$5 = lib$a;
	var StreamNetwork_1$2 = StreamNetwork;
	var IncorrectNetworkError_1$2 = IncorrectNetworkError$1;
	var common_streams_utils_1$3 = lib$8;
	var makeGetAptosAddresses = function (core, baseUrl, _a) {
	    _a.networkType; var options = __rest$5(_a, ["networkType"]);
	    return new api_utils_1$5.PaginatedOperationResolver(common_streams_utils_1$3.getAddressesAptosOperation, baseUrl, core).fetch(options);
	};
	var makeGetEvmAddresses = function (core, baseUrl, _a) {
	    _a.networkType; var options = __rest$5(_a, ["networkType"]);
	    return new api_utils_1$5.PaginatedOperationResolver(common_streams_utils_1$3.getAddressesEvmOperation, baseUrl, core).fetch(options);
	};
	var makeGetAddresses = function (core, baseUrl) {
	    return (function (getAddressesOptions) {
	        switch (getAddressesOptions.networkType) {
	            case StreamNetwork_1$2.StreamNetwork.APTOS:
	                return makeGetAptosAddresses(core, baseUrl, getAddressesOptions);
	            case StreamNetwork_1$2.StreamNetwork.EVM:
	                return makeGetEvmAddresses(core, baseUrl, getAddressesOptions);
	            default:
	                if (getAddressesOptions.networkType === undefined) {
	                    return makeGetEvmAddresses(core, baseUrl, getAddressesOptions);
	                }
	                throw new IncorrectNetworkError_1$2.IncorrectNetworkError(getAddressesOptions.networkType);
	        }
	    });
	};
	getAddresses.makeGetAddresses = makeGetAddresses;

	var deleteAddress = {};

	var __rest$4 = (commonjsGlobal && commonjsGlobal.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	Object.defineProperty(deleteAddress, "__esModule", { value: true });
	deleteAddress.makeDeleteAddress = void 0;
	var api_utils_1$4 = lib$a;
	var StreamNetwork_1$1 = StreamNetwork;
	var IncorrectNetworkError_1$1 = IncorrectNetworkError$1;
	var common_streams_utils_1$2 = lib$8;
	var makeDeleteAddressAptosStream = function (core, baseUrl, _a) {
	    _a.networkType; var options = __rest$4(_a, ["networkType"]);
	    return new api_utils_1$4.OperationResolver(common_streams_utils_1$2.deleteAddressAptosOperation, baseUrl, core).fetch(options);
	};
	var makeDeleteAddressEvmStream = function (core, baseUrl, _a) {
	    _a.networkType; var options = __rest$4(_a, ["networkType"]);
	    return new api_utils_1$4.OperationResolver(common_streams_utils_1$2.deleteAddressEvmOperation, baseUrl, core).fetch(options);
	};
	var makeDeleteAddress = function (core, baseUrl) {
	    return (function (deleteAddressOptions) {
	        switch (deleteAddressOptions.networkType) {
	            case StreamNetwork_1$1.StreamNetwork.APTOS:
	                return makeDeleteAddressAptosStream(core, baseUrl, deleteAddressOptions);
	            case StreamNetwork_1$1.StreamNetwork.EVM:
	                return makeDeleteAddressEvmStream(core, baseUrl, deleteAddressOptions);
	            default:
	                if (deleteAddressOptions.networkType === undefined) {
	                    return makeDeleteAddressEvmStream(core, baseUrl, deleteAddressOptions);
	                }
	                throw new IncorrectNetworkError_1$1.IncorrectNetworkError(deleteAddressOptions.networkType);
	        }
	    });
	};
	deleteAddress.makeDeleteAddress = makeDeleteAddress;

	var getById = {};

	var __rest$3 = (commonjsGlobal && commonjsGlobal.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	Object.defineProperty(getById, "__esModule", { value: true });
	getById.makeGetStreamById = void 0;
	var api_utils_1$3 = lib$a;
	var StreamNetwork_1 = StreamNetwork;
	var IncorrectNetworkError_1 = IncorrectNetworkError$1;
	var common_streams_utils_1$1 = lib$8;
	var makeGetAptosStream = function (core, baseUrl, _a) {
	    _a.networkType; _a.network; var options = __rest$3(_a, ["networkType", "network"]);
	    return new api_utils_1$3.OperationResolver(common_streams_utils_1$1.getStreamAptosOperation, baseUrl, core).fetch(options);
	};
	var makeGetEvmStream = function (core, baseUrl, _a) {
	    _a.networkType; _a.network; var options = __rest$3(_a, ["networkType", "network"]);
	    return new api_utils_1$3.OperationResolver(common_streams_utils_1$1.getStreamEvmOperation, baseUrl, core).fetch(options);
	};
	var makeGetStreamById = function (core, baseUrl) {
	    return (function (getStreamOptions) {
	        // Backwards compatibility for the 'network' parameter
	        if (!getStreamOptions.networkType && getStreamOptions.network) {
	            getStreamOptions.networkType = getStreamOptions.network;
	        }
	        switch (getStreamOptions.networkType) {
	            case StreamNetwork_1.StreamNetwork.APTOS:
	                return makeGetAptosStream(core, baseUrl, getStreamOptions);
	            case StreamNetwork_1.StreamNetwork.EVM:
	                return makeGetEvmStream(core, baseUrl, getStreamOptions);
	            default:
	                if (getStreamOptions.networkType === undefined) {
	                    return makeGetEvmStream(core, baseUrl, getStreamOptions);
	                }
	                throw new IncorrectNetworkError_1.IncorrectNetworkError(getStreamOptions.networkType);
	        }
	    });
	};
	getById.makeGetStreamById = makeGetStreamById;

	var __extends$5 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(Streams$1, "__esModule", { value: true });
	Streams$1.Streams = void 0;
	var api_utils_1$2 = lib$a;
	var common_core_1$c = lib$9;
	var create_1 = create;
	var update_1 = update;
	var delete_1 = _delete;
	var getAll_1 = getAll;
	var verifySignature_1 = verifySignature;
	var addAddress_1 = addAddress;
	var updateStatus_1 = updateStatus;
	var logParser_1 = logParser;
	var getAddresses_1 = getAddresses;
	var deleteAddress_1 = deleteAddress;
	var getById_1 = getById;
	var common_streams_utils_1 = lib$8;
	var BASE_URL$2 = 'https://api.moralis-streams.com';
	var Streams = /** @class */ (function (_super) {
	    __extends$5(Streams, _super);
	    function Streams(core) {
	        var _this = _super.call(this, Streams.moduleName, core, BASE_URL$2) || this;
	        _this.add = (0, create_1.makeCreateStream)(_this.core, BASE_URL$2);
	        _this.update = (0, update_1.makeUpdateStream)(_this.core, BASE_URL$2);
	        _this.delete = (0, delete_1.makeDeleteStream)(_this.core, BASE_URL$2);
	        _this.getAll = (0, getAll_1.makeGetStreams)(_this.core, BASE_URL$2);
	        _this.getById = (0, getById_1.makeGetStreamById)(_this.core, BASE_URL$2);
	        _this.updateStatus = (0, updateStatus_1.makeUpdateStreamStatus)(_this.core, BASE_URL$2);
	        _this.addAddress = (0, addAddress_1.makeAddAddress)(_this.core, BASE_URL$2);
	        _this.getAddresses = (0, getAddresses_1.makeGetAddresses)(_this.core, BASE_URL$2);
	        _this.deleteAddress = (0, deleteAddress_1.makeDeleteAddress)(_this.core, BASE_URL$2);
	        _this.getHistory = _this.createPaginatedFetcher(common_streams_utils_1.getHistoryOperation);
	        _this.retry = _this.createFetcher(common_streams_utils_1.replayHistoryOperation);
	        _this._getStats = _this.createFetcher(common_streams_utils_1.getStatsOperation);
	        _this.getStats = function () { return _this._getStats({}); };
	        _this.getStatsById = _this.createFetcher(common_streams_utils_1.getStatsByIdOperation);
	        _this.setSettings = _this.createFetcher(common_streams_utils_1.setSettingsOperation);
	        _this._readSettings = _this.createFetcher(common_streams_utils_1.getSettingsOperation);
	        _this.readSettings = function () { return _this._readSettings({}); };
	        _this.verifySignature = function (options) { return (0, verifySignature_1.makeVerifySignature)(_this.core)(options); };
	        _this.parsedLogs = function (webhookData) { return (0, logParser_1.parseLog)(webhookData); };
	        return _this;
	    }
	    Streams.create = function (core) {
	        return new Streams(core !== null && core !== void 0 ? core : common_core_1$c.CoreProvider.getDefault());
	    };
	    Streams.prototype.setup = function () {
	        // Nothing
	    };
	    Streams.prototype.start = function () {
	        // Nothing
	    };
	    Streams.prototype.createFetcher = function (operation) {
	        return new api_utils_1$2.OperationResolver(operation, BASE_URL$2, this.core).fetch;
	    };
	    Streams.prototype.createPaginatedFetcher = function (operation) {
	        return new api_utils_1$2.PaginatedOperationResolver(operation, BASE_URL$2, this.core).fetch;
	    };
	    Streams.moduleName = 'streams';
	    return Streams;
	}(common_core_1$c.ApiModule));
	Streams$1.Streams = Streams;

	var types$1 = {};

	Object.defineProperty(types$1, "__esModule", { value: true });

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		var Streams_1 = Streams$1;
		__exportStar(Streams$1, exports);
		// Export SDK types
		__exportStar(types$1, exports);
		__exportStar(mapping, exports);
		exports.default = Streams_1.Streams;
		
	} (lib$b));

	var lib$4 = {};

	var Auth = {};

	var requestMessage = {};

	var lib$3 = {};

	var dataTypes$1 = {};

	var SolAddress$2 = {};

	var SolAddress$1 = {};

	var PublicKey = {};

	// base-x encoding / decoding
	// Copyright (c) 2018 base-x contributors
	// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)
	// Distributed under the MIT software license, see the accompanying
	// file LICENSE or http://www.opensource.org/licenses/mit-license.php.
	function base (ALPHABET) {
	  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }
	  var BASE_MAP = new Uint8Array(256);
	  for (var j = 0; j < BASE_MAP.length; j++) {
	    BASE_MAP[j] = 255;
	  }
	  for (var i = 0; i < ALPHABET.length; i++) {
	    var x = ALPHABET.charAt(i);
	    var xc = x.charCodeAt(0);
	    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }
	    BASE_MAP[xc] = i;
	  }
	  var BASE = ALPHABET.length;
	  var LEADER = ALPHABET.charAt(0);
	  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up
	  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up
	  function encode (source) {
	    if (source instanceof Uint8Array) ; else if (ArrayBuffer.isView(source)) {
	      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
	    } else if (Array.isArray(source)) {
	      source = Uint8Array.from(source);
	    }
	    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }
	    if (source.length === 0) { return '' }
	        // Skip & count leading zeroes.
	    var zeroes = 0;
	    var length = 0;
	    var pbegin = 0;
	    var pend = source.length;
	    while (pbegin !== pend && source[pbegin] === 0) {
	      pbegin++;
	      zeroes++;
	    }
	        // Allocate enough space in big-endian base58 representation.
	    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;
	    var b58 = new Uint8Array(size);
	        // Process the bytes.
	    while (pbegin !== pend) {
	      var carry = source[pbegin];
	            // Apply "b58 = b58 * 256 + ch".
	      var i = 0;
	      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {
	        carry += (256 * b58[it1]) >>> 0;
	        b58[it1] = (carry % BASE) >>> 0;
	        carry = (carry / BASE) >>> 0;
	      }
	      if (carry !== 0) { throw new Error('Non-zero carry') }
	      length = i;
	      pbegin++;
	    }
	        // Skip leading zeroes in base58 result.
	    var it2 = size - length;
	    while (it2 !== size && b58[it2] === 0) {
	      it2++;
	    }
	        // Translate the result into a string.
	    var str = LEADER.repeat(zeroes);
	    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }
	    return str
	  }
	  function decodeUnsafe (source) {
	    if (typeof source !== 'string') { throw new TypeError('Expected String') }
	    if (source.length === 0) { return new Uint8Array() }
	    var psz = 0;
	        // Skip and count leading '1's.
	    var zeroes = 0;
	    var length = 0;
	    while (source[psz] === LEADER) {
	      zeroes++;
	      psz++;
	    }
	        // Allocate enough space in big-endian base256 representation.
	    var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.
	    var b256 = new Uint8Array(size);
	        // Process the characters.
	    while (source[psz]) {
	            // Decode character
	      var carry = BASE_MAP[source.charCodeAt(psz)];
	            // Invalid character
	      if (carry === 255) { return }
	      var i = 0;
	      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {
	        carry += (BASE * b256[it3]) >>> 0;
	        b256[it3] = (carry % 256) >>> 0;
	        carry = (carry / 256) >>> 0;
	      }
	      if (carry !== 0) { throw new Error('Non-zero carry') }
	      length = i;
	      psz++;
	    }
	        // Skip leading zeroes in b256.
	    var it4 = size - length;
	    while (it4 !== size && b256[it4] === 0) {
	      it4++;
	    }
	    var vch = new Uint8Array(zeroes + (size - it4));
	    var j = zeroes;
	    while (it4 !== size) {
	      vch[j++] = b256[it4++];
	    }
	    return vch
	  }
	  function decode (string) {
	    var buffer = decodeUnsafe(string);
	    if (buffer) { return buffer }
	    throw new Error('Non-base' + BASE + ' character')
	  }
	  return {
	    encode: encode,
	    decodeUnsafe: decodeUnsafe,
	    decode: decode
	  }
	}
	var src = base;

	const basex = src;
	const ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';

	var bs58 = basex(ALPHABET);

	(function (exports) {
		/**
		 * Copied (and remove obsolete functionalities) from https://github.com/solana-labs/solana-web3.js/blob/master/src/publickey.ts because
		 * - We only care about address validation and conversion
		 * - Resolving this dependency in UMD gives dependency errors
		 */
		var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
		    return (mod && mod.__esModule) ? mod : { "default": mod };
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.PublicKey = exports.PUBLIC_KEY_LENGTH = void 0;
		var bn_js_1 = __importDefault(bnExports$1);
		var bs58_1 = __importDefault(bs58);
		var buffer_1 = require$$2$1;
		/**
		 * Size of public key in bytes
		 */
		exports.PUBLIC_KEY_LENGTH = 32;
		function isPublicKeyData(value) {
		    return value._bn !== undefined;
		}
		var PublicKey = /** @class */ (function () {
		    /**
		     * Create a new PublicKey object
		     * @param value ed25519 public key as buffer or base-58 encoded string
		     */
		    function PublicKey(value) {
		        if (isPublicKeyData(value)) {
		            this._bn = value._bn;
		        }
		        else {
		            if (typeof value === 'string') {
		                // assume base 58 encoding by default
		                var decoded = bs58_1.default.decode(value);
		                if (decoded.length !== exports.PUBLIC_KEY_LENGTH) {
		                    throw new Error("Invalid public key input");
		                }
		                this._bn = new bn_js_1.default(decoded);
		            }
		            else {
		                this._bn = new bn_js_1.default(value);
		            }
		            if (this._bn.byteLength() > exports.PUBLIC_KEY_LENGTH) {
		                throw new Error("Invalid public key input");
		            }
		        }
		    }
		    /**
		     * Return the base-58 representation of the public key
		     */
		    PublicKey.prototype.toBase58 = function () {
		        return bs58_1.default.encode(this.toBytes());
		    };
		    /**
		     * Return the byte array representation of the public key in big endian
		     */
		    PublicKey.prototype.toBytes = function () {
		        var buf = this.toBuffer();
		        return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
		    };
		    /**
		     * Return the Buffer representation of the public key in big endian
		     */
		    PublicKey.prototype.toBuffer = function () {
		        var b = this._bn.toArrayLike(buffer_1.Buffer);
		        if (b.length === exports.PUBLIC_KEY_LENGTH) {
		            return b;
		        }
		        var zeroPad = buffer_1.Buffer.alloc(32);
		        b.copy(zeroPad, 32 - b.length);
		        return zeroPad;
		    };
		    Object.defineProperty(PublicKey.prototype, Symbol.toStringTag, {
		        get: function () {
		            return "PublicKey(".concat(this.toString(), ")");
		        },
		        enumerable: false,
		        configurable: true
		    });
		    /**
		     * Return the base-58 representation of the public key
		     */
		    PublicKey.prototype.toString = function () {
		        return this.toBase58();
		    };
		    return PublicKey;
		}());
		exports.PublicKey = PublicKey;
		
	} (PublicKey));

	Object.defineProperty(SolAddress$1, "__esModule", { value: true });
	SolAddress$1.SolAddress = void 0;
	var common_core_1$b = lib$9;
	var PublicKey_1 = PublicKey;
	/**
	 * A representation of an address on the Solana network.
	 *
	 * Use this class any time you work with an address.
	 *
	 * @category DataType
	 */
	var SolAddress = /** @class */ (function () {
	    function SolAddress(address) {
	        this.address = address;
	    }
	    /**
	     * Create a new instance of SolAddress from any valid address input.
	     *
	     * @example `const address = SolAddress.create("9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM")`
	     * @throws an error when a passed address is invalid.
	     */
	    SolAddress.create = function (address) {
	        return address instanceof SolAddress ? address : new SolAddress(SolAddress.parse(address));
	    };
	    SolAddress.parse = function (address) {
	        try {
	            var publicKey = new PublicKey_1.PublicKey(address);
	            return publicKey.toBase58();
	        }
	        catch (e) {
	            throw new common_core_1$b.CoreError({
	                code: common_core_1$b.CoreErrorCode.INVALID_ARGUMENT,
	                message: "Invalid Solana address provided: ".concat(address),
	                cause: e,
	            });
	        }
	    };
	    /**
	     * Formats the address to a specific format.
	     * Currently returns a string representing the address.
	     * @example address.format(); // "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM"
	     */
	    SolAddress.prototype.format = function () {
	        // TODO: add `format` argument
	        return this.address;
	    };
	    /**
	     * Checks the equality of the current address with another Solana address.
	     * @example `address.equals("9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM")`
	     * @example `address.equals(SolAddress.create("9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM"))`
	     */
	    SolAddress.prototype.equals = function (address) {
	        return this.address === SolAddress.create(address).address;
	    };
	    /**
	     * @returns a string representing the address.
	     * @example address.toString(); // "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM"
	     */
	    SolAddress.prototype.toString = function () {
	        return this.address;
	    };
	    /**
	     * @returns a string representing the address.
	     * @example address.toJSON(); // "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM"
	     */
	    SolAddress.prototype.toJSON = function () {
	        return this.address;
	    };
	    return SolAddress;
	}());
	SolAddress$1.SolAddress = SolAddress;

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(SolAddress$1, exports);
		
	} (SolAddress$2));

	var SolNetwork$2 = {};

	var SolNetwork$1 = {};

	Object.defineProperty(SolNetwork$1, "__esModule", { value: true });
	SolNetwork$1.SolNetwork = void 0;
	var common_core_1$a = lib$9;
	var solNetworkNames = ['mainnet', 'devnet'];
	/**
	 * A representation of a Solana network.
	 *
	 * @category DataType
	 */
	var SolNetwork = /** @class */ (function () {
	    function SolNetwork(network) {
	        this.network = network;
	    }
	    Object.defineProperty(SolNetwork, "MAINNET", {
	        /**
	         * Returns MAINNET network
	         *
	         * @example SolNetwork.MAINNET
	         */
	        get: function () {
	            return SolNetwork.create('mainnet');
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(SolNetwork, "DEVNET", {
	        /**
	         * Returns DEVNET network
	         *
	         * @example SolNetwork.MAINNET
	         */
	        get: function () {
	            return SolNetwork.create('devnet');
	        },
	        enumerable: false,
	        configurable: true
	    });
	    /**
	     * Create a new instance of SolNetwork from any valid network input.
	     *
	     * @example `const network = SolNetwork.create("mainnet")`
	     * @throws an error when a passed network is invalid.
	     */
	    SolNetwork.create = function (network) {
	        return network instanceof SolNetwork ? network : new SolNetwork(SolNetwork.parse(network));
	    };
	    SolNetwork.parse = function (network) {
	        if (typeof network === 'string') {
	            if (!solNetworkNames.includes(network)) {
	                throw new common_core_1$a.CoreError({
	                    code: common_core_1$a.CoreErrorCode.INVALID_ARGUMENT,
	                    message: "Solana network is not supported: ".concat(network),
	                });
	            }
	        }
	        return network;
	    };
	    /**
	     * Formats the network to a specific format.
	     * Currently returns a string representing the network.
	     * @example network.format(); // "mainnet"
	     */
	    SolNetwork.prototype.format = function () {
	        // TODO: add `format` argument
	        return this.network;
	    };
	    /**
	     * Checks the equality of the current network with another Solana network.
	     * @example `network.equals("mainnet")`
	     * @example `network.equals(SolNetwork.create("mainnet"))`
	     */
	    SolNetwork.prototype.equals = function (network) {
	        return this.network === SolNetwork.create(network).network;
	    };
	    /**
	     * @returns a string representing the network.
	     * @example network.toJSON(); // "mainnet"
	     */
	    SolNetwork.prototype.toJSON = function () {
	        return this.network;
	    };
	    /**
	     * @returns a string representing the network.
	     * @example network.toString(); // "mainnet"
	     */
	    SolNetwork.prototype.toString = function () {
	        return this.network;
	    };
	    return SolNetwork;
	}());
	SolNetwork$1.SolNetwork = SolNetwork;

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(SolNetwork$1, exports);
		
	} (SolNetwork$2));

	var SolNative$2 = {};

	var SolNative$1 = {};

	Object.defineProperty(SolNative$1, "__esModule", { value: true });
	SolNative$1.SolNative = void 0;
	var common_core_1$9 = lib$9;
	var unitToDecimals = {
	    solana: 9,
	    lamports: 0,
	};
	/**
	 * The SolNative class is a MoralisData that references to the value of Solana native currency SOL
	 *
	 * @category DataType
	 */
	var SolNative = /** @class */ (function () {
	    function SolNative(rawValue) {
	        this.rawValue = rawValue;
	    }
	    /**
	     * Create a new instance of SolNative from any valid {@link SolNativeish} value.
	     * @param value - the value to create the SolNative from
	     * @param unit - the unit of the value (optional), defaults to `solana`
	     * @returns a new instance of SolNative
	     * @example
	     * ```ts
	     * const native = SolNative.create(2, 'lamports');
	     * const native = SolNative.create(2);
	     *```
	     */
	    SolNative.create = function (value, unit) {
	        if (value instanceof SolNative) {
	            return value;
	        }
	        return new SolNative(SolNative.parse(value, unit));
	    };
	    SolNative.parse = function (value, unit) {
	        if (unit === void 0) { unit = 'solana'; }
	        var decimal;
	        if (typeof unit === 'number') {
	            decimal = unit;
	        }
	        else if (unitToDecimals[unit] !== undefined) {
	            decimal = unitToDecimals[unit];
	        }
	        else {
	            throw new common_core_1$9.CoreError({
	                code: common_core_1$9.CoreErrorCode.INVALID_ARGUMENT,
	                message: "Not supported Solana unit: ".concat(unit),
	            });
	        }
	        return common_core_1$9.BigNumber.fromDecimal(value.toString(), decimal);
	    };
	    /**
	     * Compares two SolNativeish values.
	     * @param valueA - the first value to compare
	     * @param valueB - the second value to compare
	     * @returns true if the values are equal
	     * @example
	     * ```ts
	     * SolNative.equals(SolNative.create(1), SolNative.create(1)); // true
	     * ```
	     */
	    SolNative.equals = function (valueA, valueB) {
	        var solNativeA = SolNative.create(valueA);
	        var solNativeB = SolNative.create(valueB);
	        return solNativeA.lamports === solNativeB.lamports;
	    };
	    /**
	     * Compares SolNative with current instance.
	     * @param value - the value to compare with
	     * @returns true if the values are equal
	     * @example
	     * ```ts
	     * const native = SolNative.create(2, 'lamports');
	     * native.equals(SolNative.create(1)); // false
	     * ```
	     */
	    SolNative.prototype.equals = function (value) {
	        return SolNative.equals(this, value);
	    };
	    /**
	     * Converts the SolNative to a string.
	     * @returns the value of the SolNative as a string
	     * @example `native.format()`
	     */
	    SolNative.prototype.format = function () {
	        // TODO: add `format` argument
	        return this.lamports;
	    };
	    /**
	     * Converts the SolNative to a string.
	     * @returns the value of the SolNative as a string
	     * @example `native.toJSON()`
	     */
	    SolNative.prototype.toJSON = function () {
	        return this.lamports;
	    };
	    /**
	     * Converts the SolNative to a string.
	     * @returns the value of the SolNative as a string
	     * @example `native.toString()`
	     */
	    SolNative.prototype.toString = function () {
	        return this.lamports;
	    };
	    Object.defineProperty(SolNative.prototype, "value", {
	        /**
	         * @returns the value of the SolNative as a BigNumber
	         * @example `native.value`
	         */
	        get: function () {
	            return this.rawValue;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(SolNative.prototype, "solana", {
	        /**
	         * Converts the SolNative to a solana unit.
	         * @returns the value of the SolNative as a solana string
	         * @example `native.solana`
	         */
	        get: function () {
	            return this.rawValue.toDecimal(unitToDecimals['solana']);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(SolNative.prototype, "lamports", {
	        /**
	         * Converts the SolNative to a string.
	         * @returns the value of the SolNative as a string
	         * @example `native.lamports`
	         */
	        get: function () {
	            return this.rawValue.toString();
	        },
	        enumerable: false,
	        configurable: true
	    });
	    return SolNative;
	}());
	SolNative$1.SolNative = SolNative;

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(SolNative$1, exports);
		
	} (SolNative$2));

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(SolAddress$2, exports);
		__exportStar(SolNetwork$2, exports);
		__exportStar(SolNative$2, exports);
		
	} (dataTypes$1));

	var CommonSolUtils$1 = {};

	var config = {};

	var CommonSolUtilsConfigSetup$1 = {};

	var CommonSolUtilsConfig = {};

	Object.defineProperty(CommonSolUtilsConfig, "__esModule", { value: true });
	CommonSolUtilsConfig.CommonSolUtilsConfig = void 0;
	CommonSolUtilsConfig.CommonSolUtilsConfig = {
	    defaultSolNetwork: {
	        name: 'defaultSolNetwork',
	        defaultValue: 'mainnet',
	    },
	};

	Object.defineProperty(CommonSolUtilsConfigSetup$1, "__esModule", { value: true });
	CommonSolUtilsConfigSetup$1.CommonSolUtilsConfigSetup = void 0;
	var CommonSolUtilsConfig_1$1 = CommonSolUtilsConfig;
	var CommonSolUtilsConfigSetup = /** @class */ (function () {
	    function CommonSolUtilsConfigSetup() {
	    }
	    CommonSolUtilsConfigSetup.register = function (config) {
	        config.registerKey(CommonSolUtilsConfig_1$1.CommonSolUtilsConfig.defaultSolNetwork);
	    };
	    return CommonSolUtilsConfigSetup;
	}());
	CommonSolUtilsConfigSetup$1.CommonSolUtilsConfigSetup = CommonSolUtilsConfigSetup;

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(CommonSolUtilsConfigSetup$1, exports);
		__exportStar(CommonSolUtilsConfig, exports);
		
	} (config));

	var __extends$4 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(CommonSolUtils$1, "__esModule", { value: true });
	CommonSolUtils$1.CommonSolUtils = void 0;
	var common_core_1$8 = lib$9;
	var config_1 = config;
	var dataTypes = __importStar(dataTypes$1);
	var CommonSolUtils = /** @class */ (function (_super) {
	    __extends$4(CommonSolUtils, _super);
	    function CommonSolUtils(core) {
	        return _super.call(this, CommonSolUtils.moduleName, core) || this;
	    }
	    CommonSolUtils.create = function (core) {
	        return new CommonSolUtils(core !== null && core !== void 0 ? core : common_core_1$8.CoreProvider.getDefault());
	    };
	    CommonSolUtils.prototype.setup = function () {
	        config_1.CommonSolUtilsConfigSetup.register(this.core.config);
	    };
	    CommonSolUtils.prototype.start = function () {
	        // Nothing
	    };
	    Object.defineProperty(CommonSolUtils.prototype, "SolAddress", {
	        get: function () {
	            return dataTypes.SolAddress;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(CommonSolUtils.prototype, "SolNative", {
	        get: function () {
	            return dataTypes.SolNative;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(CommonSolUtils.prototype, "SolNetwork", {
	        get: function () {
	            return dataTypes.SolNetwork;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    CommonSolUtils.moduleName = 'solUtils';
	    return CommonSolUtils;
	}(common_core_1$8.Module));
	CommonSolUtils$1.CommonSolUtils = CommonSolUtils;

	var operations$3 = {};

	var getBalanceOperation = {};

	var SolNetworkResolver$1 = {};

	Object.defineProperty(SolNetworkResolver$1, "__esModule", { value: true });
	SolNetworkResolver$1.SolNetworkResolver = void 0;
	var CommonSolUtilsConfig_1 = CommonSolUtilsConfig;
	var dataTypes_1$6 = dataTypes$1;
	var SolNetworkResolver = /** @class */ (function () {
	    function SolNetworkResolver() {
	    }
	    SolNetworkResolver.resolve = function (network, core) {
	        if (!network) {
	            network = core.config.get(CommonSolUtilsConfig_1.CommonSolUtilsConfig.defaultSolNetwork);
	        }
	        return dataTypes_1$6.SolNetwork.create(network).network;
	    };
	    return SolNetworkResolver;
	}());
	SolNetworkResolver$1.SolNetworkResolver = SolNetworkResolver;

	Object.defineProperty(getBalanceOperation, "__esModule", { value: true });
	getBalanceOperation.getBalanceOperation = void 0;
	var dataTypes_1$5 = dataTypes$1;
	var SolNetworkResolver_1$5 = SolNetworkResolver$1;
	/** Gets native balance owned by the given network and address */
	getBalanceOperation.getBalanceOperation = {
	    method: 'GET',
	    name: 'getBalance',
	    id: 'balance',
	    groupName: 'account',
	    urlPathParamNames: ['network', 'address'],
	    urlPathPattern: '/account/{network}/{address}/balance',
	    getRequestUrlParams: getRequestUrlParams$g,
	    deserializeResponse: deserializeResponse$g,
	    serializeRequest: serializeRequest$g,
	    deserializeRequest: deserializeRequest$g,
	};
	// Methods
	function getRequestUrlParams$g(request, core) {
	    return {
	        network: SolNetworkResolver_1$5.SolNetworkResolver.resolve(request.network, core),
	        address: dataTypes_1$5.SolAddress.create(request.address).address,
	    };
	}
	function deserializeResponse$g(jsonResponse) {
	    return dataTypes_1$5.SolNative.create(jsonResponse.lamports);
	}
	function serializeRequest$g(request, core) {
	    return {
	        address: dataTypes_1$5.SolAddress.create(request.address).address,
	        network: SolNetworkResolver_1$5.SolNetworkResolver.resolve(request.network, core),
	    };
	}
	function deserializeRequest$g(jsonRequest) {
	    return {
	        network: dataTypes_1$5.SolNetwork.create(jsonRequest.network),
	        address: dataTypes_1$5.SolAddress.create(jsonRequest.address),
	    };
	}

	var getNFTsOperation = {};

	Object.defineProperty(getNFTsOperation, "__esModule", { value: true });
	getNFTsOperation.getNFTsOperation = void 0;
	var dataTypes_1$4 = dataTypes$1;
	var SolNetworkResolver_1$4 = SolNetworkResolver$1;
	/** Gets NFTs owned by the given network and address */
	getNFTsOperation.getNFTsOperation = {
	    method: 'GET',
	    name: 'getNFTs',
	    id: 'getNFTs',
	    groupName: 'account',
	    urlPathParamNames: ['network', 'address'],
	    urlPathPattern: '/account/{network}/{address}/nft',
	    getRequestUrlParams: getRequestUrlParams$f,
	    deserializeResponse: deserializeResponse$f,
	    serializeRequest: serializeRequest$f,
	    deserializeRequest: deserializeRequest$f,
	};
	// Methods
	function getRequestUrlParams$f(request, core) {
	    return {
	        network: SolNetworkResolver_1$4.SolNetworkResolver.resolve(request.network, core),
	        address: dataTypes_1$4.SolAddress.create(request.address).address,
	    };
	}
	function deserializeResponse$f(jsonResponse) {
	    return jsonResponse.map(function (item) {
	        return {
	            associatedTokenAddress: dataTypes_1$4.SolAddress.create(item.associatedTokenAddress),
	            mint: dataTypes_1$4.SolAddress.create(item.mint),
	        };
	    });
	}
	function serializeRequest$f(request, core) {
	    return {
	        address: dataTypes_1$4.SolAddress.create(request.address).address,
	        network: SolNetworkResolver_1$4.SolNetworkResolver.resolve(request.network, core),
	    };
	}
	function deserializeRequest$f(jsonRequest) {
	    return {
	        network: dataTypes_1$4.SolNetwork.create(jsonRequest.network),
	        address: dataTypes_1$4.SolAddress.create(jsonRequest.address),
	    };
	}

	var getPortfolioOperation = {};

	Object.defineProperty(getPortfolioOperation, "__esModule", { value: true });
	getPortfolioOperation.getPortfolioOperation = void 0;
	var dataTypes_1$3 = dataTypes$1;
	var SolNetworkResolver_1$3 = SolNetworkResolver$1;
	/** Gets the portfolio of the given network and address */
	getPortfolioOperation.getPortfolioOperation = {
	    method: 'GET',
	    name: 'getPortfolio',
	    id: 'getPortfolio',
	    groupName: 'account',
	    urlPathParamNames: ['network', 'address'],
	    urlPathPattern: '/account/{network}/{address}/portfolio',
	    getRequestUrlParams: getRequestUrlParams$e,
	    deserializeResponse: deserializeResponse$e,
	    serializeRequest: serializeRequest$e,
	    deserializeRequest: deserializeRequest$e,
	};
	// Methods
	function getRequestUrlParams$e(request, core) {
	    return {
	        network: SolNetworkResolver_1$3.SolNetworkResolver.resolve(request.network, core),
	        address: dataTypes_1$3.SolAddress.create(request.address).address,
	    };
	}
	function deserializeResponse$e(jsonResponse) {
	    return {
	        nativeBalance: dataTypes_1$3.SolNative.create(jsonResponse.nativeBalance.lamports, 'lamports'),
	        nfts: jsonResponse.nfts.map(function (nft) {
	            return {
	                associatedTokenAddress: dataTypes_1$3.SolAddress.create(nft.associatedTokenAddress),
	                mint: dataTypes_1$3.SolAddress.create(nft.mint),
	            };
	        }),
	        tokens: jsonResponse.tokens.map(function (token) {
	            return {
	                associatedTokenAddress: dataTypes_1$3.SolAddress.create(token.associatedTokenAddress),
	                mint: dataTypes_1$3.SolAddress.create(token.mint),
	                amount: dataTypes_1$3.SolNative.create(token.amountRaw, 'lamports'),
	            };
	        }),
	    };
	}
	function serializeRequest$e(request, core) {
	    return {
	        address: dataTypes_1$3.SolAddress.create(request.address).address,
	        network: SolNetworkResolver_1$3.SolNetworkResolver.resolve(request.network, core),
	    };
	}
	function deserializeRequest$e(jsonRequest) {
	    return {
	        network: dataTypes_1$3.SolNetwork.create(jsonRequest.network),
	        address: dataTypes_1$3.SolAddress.create(jsonRequest.address),
	    };
	}

	var getSPLOperation = {};

	Object.defineProperty(getSPLOperation, "__esModule", { value: true });
	getSPLOperation.getSPLOperation = void 0;
	var dataTypes_1$2 = dataTypes$1;
	var SolNetworkResolver_1$2 = SolNetworkResolver$1;
	/** Gets token balances owned by the given network and address */
	getSPLOperation.getSPLOperation = {
	    method: 'GET',
	    name: 'getSPL',
	    id: 'getSPL',
	    groupName: 'account',
	    urlPathParamNames: ['network', 'address'],
	    urlPathPattern: '/account/{network}/{address}/tokens',
	    getRequestUrlParams: getRequestUrlParams$d,
	    deserializeResponse: deserializeResponse$d,
	    serializeRequest: serializeRequest$d,
	    deserializeRequest: deserializeRequest$d,
	};
	// Methods
	function getRequestUrlParams$d(request, core) {
	    return {
	        network: SolNetworkResolver_1$2.SolNetworkResolver.resolve(request.network, core),
	        address: dataTypes_1$2.SolAddress.create(request.address).address,
	    };
	}
	function deserializeResponse$d(jsonResponse) {
	    return jsonResponse.map(function (token) {
	        return {
	            associatedTokenAddress: dataTypes_1$2.SolAddress.create(token.associatedTokenAddress),
	            mint: dataTypes_1$2.SolAddress.create(token.mint),
	            amount: dataTypes_1$2.SolNative.create(token.amountRaw, 'lamports'),
	        };
	    });
	}
	function serializeRequest$d(request, core) {
	    return {
	        address: dataTypes_1$2.SolAddress.create(request.address).address,
	        network: SolNetworkResolver_1$2.SolNetworkResolver.resolve(request.network, core),
	    };
	}
	function deserializeRequest$d(jsonRequest) {
	    return {
	        network: dataTypes_1$2.SolNetwork.create(jsonRequest.network),
	        address: dataTypes_1$2.SolAddress.create(jsonRequest.address),
	    };
	}

	var getNFTMetadataOperation = {};

	Object.defineProperty(getNFTMetadataOperation, "__esModule", { value: true });
	getNFTMetadataOperation.getNFTMetadataOperation = void 0;
	var dataTypes_1$1 = dataTypes$1;
	var SolNetworkResolver_1$1 = SolNetworkResolver$1;
	/** Gets the contract level metadata (mint, standard, name, symbol, metaplex) for the given network and contract */
	getNFTMetadataOperation.getNFTMetadataOperation = {
	    method: 'GET',
	    name: 'getNFTMetadata',
	    id: 'getNFTMetadata',
	    groupName: 'nft',
	    urlPathParamNames: ['network', 'address'],
	    urlPathPattern: '/nft/{network}/{address}/metadata',
	    getRequestUrlParams: getRequestUrlParams$c,
	    deserializeResponse: deserializeResponse$c,
	    serializeRequest: serializeRequest$c,
	    deserializeRequest: deserializeRequest$c,
	};
	// Methods
	function getRequestUrlParams$c(request, core) {
	    return {
	        network: SolNetworkResolver_1$1.SolNetworkResolver.resolve(request.network, core),
	        address: dataTypes_1$1.SolAddress.create(request.address).address,
	    };
	}
	function deserializeResponse$c(jsonResponse) {
	    return {
	        mint: dataTypes_1$1.SolAddress.create(jsonResponse.mint),
	        standard: jsonResponse.standard,
	        name: jsonResponse.name,
	        symbol: jsonResponse.symbol,
	        metaplex: {
	            metadataUri: jsonResponse.metaplex.metadataUri,
	            updateAuthority: dataTypes_1$1.SolAddress.create(jsonResponse.metaplex.updateAuthority),
	            sellerFeeBasisPoints: jsonResponse.metaplex.sellerFeeBasisPoints,
	            primarySaleHappened: jsonResponse.metaplex.primarySaleHappened,
	            isMutable: jsonResponse.metaplex.isMutable,
	            masterEdition: jsonResponse.metaplex.masterEdition,
	        },
	    };
	}
	function serializeRequest$c(request, core) {
	    return {
	        address: dataTypes_1$1.SolAddress.create(request.address).address,
	        network: SolNetworkResolver_1$1.SolNetworkResolver.resolve(request.network, core),
	    };
	}
	function deserializeRequest$c(jsonRequest) {
	    return {
	        network: dataTypes_1$1.SolNetwork.create(jsonRequest.network),
	        address: dataTypes_1$1.SolAddress.create(jsonRequest.address),
	    };
	}

	var getTokenPriceOperation = {};

	Object.defineProperty(getTokenPriceOperation, "__esModule", { value: true });
	getTokenPriceOperation.getTokenPriceOperation = void 0;
	var common_core_1$7 = lib$9;
	var dataTypes_1 = dataTypes$1;
	var SolNetworkResolver_1 = SolNetworkResolver$1;
	/** Gets the token price (usd and native) for a given contract address and network */
	getTokenPriceOperation.getTokenPriceOperation = {
	    method: 'GET',
	    name: 'getTokenPrice',
	    id: 'getTokenPrice',
	    groupName: 'token',
	    urlPathParamNames: ['network', 'address'],
	    urlPathPattern: '/token/{network}/{address}/price',
	    getRequestUrlParams: getRequestUrlParams$b,
	    deserializeResponse: deserializeResponse$b,
	    serializeRequest: serializeRequest$b,
	    deserializeRequest: deserializeRequest$b,
	};
	// Methods
	function getRequestUrlParams$b(request, core) {
	    var network = SolNetworkResolver_1.SolNetworkResolver.resolve(request.network, core);
	    if (network !== 'mainnet') {
	        throw new common_core_1$7.MoralisApiError({
	            message: "Incorrct value for 'network', getTokenPrice is only available on mainnet",
	            code: common_core_1$7.ApiErrorCode.INVALID_PARAMS,
	        });
	    }
	    return {
	        network: SolNetworkResolver_1.SolNetworkResolver.resolve(request.network, core),
	        address: dataTypes_1.SolAddress.create(request.address).address,
	    };
	}
	function deserializeResponse$b(jsonResponse) {
	    return {
	        nativePrice: {
	            value: dataTypes_1.SolNative.create(jsonResponse.nativePrice.value, 'solana'),
	            decimals: jsonResponse.nativePrice.decimals,
	            name: jsonResponse.nativePrice.name,
	            symbol: jsonResponse.nativePrice.symbol,
	        },
	        usdPrice: jsonResponse.usdPrice,
	        exchangeAddress: dataTypes_1.SolAddress.create(jsonResponse.exchangeAddress),
	        exchangeName: jsonResponse.exchangeName,
	    };
	}
	function serializeRequest$b(request, core) {
	    return {
	        address: dataTypes_1.SolAddress.create(request.address).address,
	        network: SolNetworkResolver_1.SolNetworkResolver.resolve(request.network, core),
	    };
	}
	function deserializeRequest$b(jsonRequest) {
	    return {
	        network: dataTypes_1.SolNetwork.create(jsonRequest.network),
	        address: dataTypes_1.SolAddress.create(jsonRequest.address),
	    };
	}

	var operations$2 = {};

	Object.defineProperty(operations$2, "__esModule", { value: true });
	operations$2.operations = void 0;
	var getBalanceOperation_1 = getBalanceOperation;
	var getNFTsOperation_1 = getNFTsOperation;
	var getPortfolioOperation_1 = getPortfolioOperation;
	var getSPLOperation_1 = getSPLOperation;
	var getNFTMetadataOperation_1 = getNFTMetadataOperation;
	var getTokenPriceOperation_1 = getTokenPriceOperation;
	operations$2.operations = [
	    getBalanceOperation_1.getBalanceOperation,
	    getNFTsOperation_1.getNFTsOperation,
	    getPortfolioOperation_1.getPortfolioOperation,
	    getSPLOperation_1.getSPLOperation,
	    getNFTMetadataOperation_1.getNFTMetadataOperation,
	    getTokenPriceOperation_1.getTokenPriceOperation,
	];

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(getBalanceOperation, exports);
		__exportStar(getNFTsOperation, exports);
		__exportStar(getPortfolioOperation, exports);
		__exportStar(getSPLOperation, exports);
		__exportStar(getNFTMetadataOperation, exports);
		__exportStar(getTokenPriceOperation, exports);
		__exportStar(operations$2, exports);
		
	} (operations$3));

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(dataTypes$1, exports);
		__exportStar(CommonSolUtils$1, exports);
		__exportStar(operations$3, exports);
		__exportStar(config, exports);
		__exportStar(SolNetworkResolver$1, exports);
		
	} (lib$3));

	var AuthNetworkType = {};

	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.AuthNetworkType = void 0;
		(function (AuthNetworkType) {
		    AuthNetworkType["EVM"] = "evm";
		    AuthNetworkType["SOLANA"] = "solana";
		    AuthNetworkType["APTOS"] = "aptos";
		})(exports.AuthNetworkType || (exports.AuthNetworkType = {}));
		
	} (AuthNetworkType));

	var lib$2 = {};

	var operations$1 = {};

	var aptos = {};

	var verifyChallengeAptosOperation = {};

	var __assign$2 = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$2 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2.apply(this, arguments);
	};
	var __rest$2 = (commonjsGlobal && commonjsGlobal.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	Object.defineProperty(verifyChallengeAptosOperation, "__esModule", { value: true });
	verifyChallengeAptosOperation.verifyChallengeAptosOperation = void 0;
	var common_aptos_utils_1$1 = lib$7;
	var common_core_1$6 = lib$9;
	var common_aptos_utils_2$1 = lib$7;
	verifyChallengeAptosOperation.verifyChallengeAptosOperation = {
	    method: 'POST',
	    name: 'verifyChallengeAptos',
	    id: 'verifyChallengeAptos',
	    groupName: 'aptos',
	    urlPathPattern: '/challenge/verify/aptos',
	    bodyParamNames: ['message', 'signature'],
	    bodyType: 'properties',
	    getRequestUrlParams: getRequestUrlParams$a,
	    getRequestBody: getRequestBody$9,
	    serializeRequest: serializeRequest$a,
	    deserializeRequest: deserializeRequest$a,
	    deserializeResponse: deserializeResponse$a,
	};
	// Methods
	function getRequestUrlParams$a() {
	    return {};
	}
	function getRequestBody$9(request) {
	    return {
	        message: request.message,
	        signature: request.signature,
	    };
	}
	function deserializeResponse$a(_a) {
	    var chainId = _a.chainId, jsonResponse = __rest$2(_a, ["chainId"]);
	    return __assign$2(__assign$2({}, jsonResponse), { chain: common_aptos_utils_1$1.AptosNetwork.create(chainId), address: common_aptos_utils_2$1.AptosAddress.create(jsonResponse.address), expirationTime: (0, common_core_1$6.maybe)(jsonResponse.expirationTime, function (value) { return new Date(value); }), notBefore: (0, common_core_1$6.maybe)(jsonResponse.notBefore, function (value) { return new Date(value); }) });
	}
	function serializeRequest$a(request) {
	    return {
	        message: request.message,
	        signature: request.signature,
	    };
	}
	function deserializeRequest$a(jsonRequest) {
	    return {
	        message: jsonRequest.message,
	        signature: jsonRequest.signature,
	    };
	}

	var requestChallengeAptosOperation = {};

	Object.defineProperty(requestChallengeAptosOperation, "__esModule", { value: true });
	requestChallengeAptosOperation.requestChallengeAptosOperation = void 0;
	var common_aptos_utils_1 = lib$7;
	var common_aptos_utils_2 = lib$7;
	/** The back channel challenge containing the id to store on the api and the message to be signed by the user */
	requestChallengeAptosOperation.requestChallengeAptosOperation = {
	    method: 'POST',
	    name: 'requestChallengeAptos',
	    id: 'requestChallengeAptos',
	    groupName: 'aptos',
	    urlPathPattern: '/challenge/request/aptos',
	    bodyParamNames: [
	        'domain',
	        'chainId',
	        'address',
	        'statement',
	        'uri',
	        'expirationTime',
	        'notBefore',
	        'resources',
	        'timeout',
	        'publicKey',
	    ],
	    bodyType: 'properties',
	    getRequestUrlParams: getRequestUrlParams$9,
	    getRequestBody: getRequestBody$8,
	    serializeRequest: serializeRequest$9,
	    deserializeRequest: deserializeRequest$9,
	    deserializeResponse: deserializeResponse$9,
	};
	// Methods
	function getRequestUrlParams$9() {
	    return {};
	}
	function getRequestBody$8(request) {
	    return {
	        domain: request.domain,
	        chainId: common_aptos_utils_1.AptosNetwork.create(request.chainId).toString(),
	        address: common_aptos_utils_2.AptosAddress.create(request.address).toString(),
	        publicKey: request.publicKey,
	        statement: request.statement,
	        uri: request.uri,
	        expirationTime: request.expirationTime,
	        notBefore: request.notBefore,
	        resources: request.resources,
	        timeout: request.timeout,
	    };
	}
	function deserializeResponse$9(jsonResponse) {
	    return jsonResponse;
	}
	function serializeRequest$9(request, core) {
	    return {
	        domain: request.domain,
	        chainId: common_aptos_utils_1.AptosNetworkResolver.resolve(request.chainId, core),
	        address: common_aptos_utils_2.AptosAddress.create(request.address).toString(),
	        publicKey: request.publicKey,
	        statement: request.statement,
	        uri: request.uri,
	        expirationTime: request.expirationTime,
	        notBefore: request.notBefore,
	        resources: request.resources,
	        timeout: request.timeout,
	    };
	}
	function deserializeRequest$9(jsonRequest) {
	    return {
	        domain: jsonRequest.domain,
	        chainId: common_aptos_utils_1.AptosNetwork.create(jsonRequest.chainId),
	        address: common_aptos_utils_2.AptosAddress.create(jsonRequest.address),
	        publicKey: jsonRequest.publicKey,
	        statement: jsonRequest.statement,
	        uri: jsonRequest.uri,
	        expirationTime: jsonRequest.expirationTime,
	        notBefore: jsonRequest.notBefore,
	        resources: jsonRequest.resources,
	        timeout: jsonRequest.timeout,
	    };
	}

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(verifyChallengeAptosOperation, exports);
		__exportStar(requestChallengeAptosOperation, exports);
		
	} (aptos));

	var evm = {};

	var verifyChallengeEvmOperation = {};

	var __assign$1 = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$1 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1.apply(this, arguments);
	};
	var __rest$1 = (commonjsGlobal && commonjsGlobal.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	Object.defineProperty(verifyChallengeEvmOperation, "__esModule", { value: true });
	verifyChallengeEvmOperation.verifyChallengeEvmOperation = void 0;
	var common_core_1$5 = lib$9;
	var common_evm_utils_1$4 = lib$6;
	verifyChallengeEvmOperation.verifyChallengeEvmOperation = {
	    method: 'POST',
	    name: 'verifyChallengeEvm',
	    id: 'verifyChallengeEvm',
	    groupName: 'evm',
	    urlPathPattern: '/challenge/verify/evm',
	    bodyParamNames: ['message', 'signature'],
	    bodyType: 'properties',
	    getRequestUrlParams: getRequestUrlParams$8,
	    getRequestBody: getRequestBody$7,
	    serializeRequest: serializeRequest$8,
	    deserializeRequest: deserializeRequest$8,
	    deserializeResponse: deserializeResponse$8,
	};
	// Methods
	function getRequestUrlParams$8() {
	    return {};
	}
	function getRequestBody$7(request) {
	    return {
	        message: request.message,
	        signature: request.signature,
	    };
	}
	function deserializeResponse$8(_a) {
	    var chainId = _a.chainId, jsonResponse = __rest$1(_a, ["chainId"]);
	    return __assign$1(__assign$1({}, jsonResponse), { chain: common_evm_utils_1$4.EvmChain.create(chainId), address: common_evm_utils_1$4.EvmAddress.create(jsonResponse.address), expirationTime: (0, common_core_1$5.maybe)(jsonResponse.expirationTime, function (value) { return new Date(value); }), notBefore: (0, common_core_1$5.maybe)(jsonResponse.notBefore, function (value) { return new Date(value); }) });
	}
	function serializeRequest$8(request) {
	    return {
	        message: request.message,
	        signature: request.signature,
	    };
	}
	function deserializeRequest$8(jsonRequest) {
	    return {
	        message: jsonRequest.message,
	        signature: jsonRequest.signature,
	    };
	}

	var requestChallengeEvmOperation = {};

	Object.defineProperty(requestChallengeEvmOperation, "__esModule", { value: true });
	requestChallengeEvmOperation.requestChallengeEvmOperation = void 0;
	var common_evm_utils_1$3 = lib$6;
	/** The back channel challenge containing the id to store on the api and the message to be signed by the user */
	requestChallengeEvmOperation.requestChallengeEvmOperation = {
	    method: 'POST',
	    name: 'requestChallengeEvm',
	    id: 'requestChallengeEvm',
	    groupName: 'evm',
	    urlPathPattern: '/challenge/request/evm',
	    bodyParamNames: [
	        'domain',
	        'chainId',
	        'address',
	        'statement',
	        'uri',
	        'expirationTime',
	        'notBefore',
	        'resources',
	        'timeout',
	    ],
	    bodyType: 'properties',
	    getRequestUrlParams: getRequestUrlParams$7,
	    getRequestBody: getRequestBody$6,
	    serializeRequest: serializeRequest$7,
	    deserializeRequest: deserializeRequest$7,
	    deserializeResponse: deserializeResponse$7,
	};
	// Methods
	function getRequestUrlParams$7() {
	    return {};
	}
	function getRequestBody$6(request, core) {
	    return {
	        domain: request.domain,
	        chainId: common_evm_utils_1$3.EvmChainResolver.resolve(request.chainId, core).hex,
	        address: common_evm_utils_1$3.EvmAddress.create(request.address, core).checksum,
	        statement: request.statement,
	        uri: request.uri,
	        expirationTime: request.expirationTime,
	        notBefore: request.notBefore,
	        resources: request.resources,
	        timeout: request.timeout,
	    };
	}
	function deserializeResponse$7(jsonResponse) {
	    return jsonResponse;
	}
	function serializeRequest$7(request, core) {
	    return {
	        domain: request.domain,
	        chainId: common_evm_utils_1$3.EvmChainResolver.resolve(request.chainId, core).decimal.toString(),
	        address: common_evm_utils_1$3.EvmAddress.create(request.address, core).checksum,
	        statement: request.statement,
	        uri: request.uri,
	        expirationTime: request.expirationTime,
	        notBefore: request.notBefore,
	        resources: request.resources,
	        timeout: request.timeout,
	    };
	}
	function deserializeRequest$7(jsonRequest, core) {
	    return {
	        domain: jsonRequest.domain,
	        chainId: common_evm_utils_1$3.EvmChainResolver.resolve(jsonRequest.chainId, core),
	        address: common_evm_utils_1$3.EvmAddress.create(jsonRequest.address, core),
	        statement: jsonRequest.statement,
	        uri: jsonRequest.uri,
	        expirationTime: jsonRequest.expirationTime,
	        notBefore: jsonRequest.notBefore,
	        resources: jsonRequest.resources,
	        timeout: jsonRequest.timeout,
	    };
	}

	var getAddressesOperation = {};

	Object.defineProperty(getAddressesOperation, "__esModule", { value: true });
	getAddressesOperation.getAddressesOperation = void 0;
	getAddressesOperation.getAddressesOperation = {
	    method: 'GET',
	    name: 'getAddresses',
	    id: 'getAddresses',
	    groupName: 'evm',
	    urlPathPattern: '/profile/{profileId}/addresses',
	    urlPathParamNames: ['profileId'],
	    getRequestUrlParams: getRequestUrlParams$6,
	    serializeRequest: serializeRequest$6,
	    deserializeRequest: deserializeRequest$6,
	    deserializeResponse: deserializeResponse$6,
	};
	// Methods
	function getRequestUrlParams$6(request) {
	    return {
	        profileId: request.profileId,
	    };
	}
	function deserializeResponse$6(jsonResponse) {
	    return jsonResponse;
	}
	function serializeRequest$6(request) {
	    return request;
	}
	function deserializeRequest$6(jsonRequest) {
	    return jsonRequest;
	}

	var removeBindOperation = {};

	Object.defineProperty(removeBindOperation, "__esModule", { value: true });
	removeBindOperation.removeBindOperation = void 0;
	var common_evm_utils_1$2 = lib$6;
	removeBindOperation.removeBindOperation = {
	    method: 'POST',
	    name: 'removeBind',
	    id: 'removeBind',
	    groupName: 'evm',
	    urlPathPattern: '/bind/remove',
	    bodyParamNames: ['blockchainType', 'address', 'profileId', 'publicKey'],
	    bodyType: 'properties',
	    getRequestUrlParams: getRequestUrlParams$5,
	    getRequestBody: getRequestBody$5,
	    serializeRequest: serializeRequest$5,
	    deserializeRequest: deserializeRequest$5,
	    deserializeResponse: deserializeResponse$5,
	};
	// Methods
	function getRequestUrlParams$5() {
	    return {};
	}
	function getRequestBody$5(request, core) {
	    return {
	        blockchainType: request.blockchainType,
	        address: common_evm_utils_1$2.EvmAddress.create(request.address, core).checksum,
	        profileId: request.profileId,
	        publicKey: request.publicKey,
	    };
	}
	function deserializeResponse$5(jsonResponse) {
	    return jsonResponse;
	}
	function serializeRequest$5(request, core) {
	    return {
	        blockchainType: request.blockchainType,
	        address: common_evm_utils_1$2.EvmAddress.create(request.address, core).checksum,
	        profileId: request.profileId,
	        publicKey: request.publicKey,
	    };
	}
	function deserializeRequest$5(jsonRequest, core) {
	    return {
	        blockchainType: jsonRequest.blockchainType,
	        address: common_evm_utils_1$2.EvmAddress.create(jsonRequest.address, core),
	        profileId: jsonRequest.profileId,
	        publicKey: jsonRequest.publicKey,
	    };
	}

	var requestBindOperation = {};

	Object.defineProperty(requestBindOperation, "__esModule", { value: true });
	requestBindOperation.requestBindOperation = void 0;
	var common_evm_utils_1$1 = lib$6;
	requestBindOperation.requestBindOperation = {
	    method: 'POST',
	    name: 'requestBind',
	    id: 'requestBind',
	    groupName: 'evm',
	    urlPathPattern: '/bind/request',
	    bodyParamNames: ['addresses'],
	    bodyType: 'properties',
	    getRequestUrlParams: getRequestUrlParams$4,
	    getRequestBody: getRequestBody$4,
	    serializeRequest: serializeRequest$4,
	    deserializeRequest: deserializeRequest$4,
	    deserializeResponse: deserializeResponse$4,
	};
	// Methods
	function getRequestUrlParams$4() {
	    return {};
	}
	function getRequestBody$4(request, core) {
	    return {
	        addresses: request.addresses.map(function (address) { return ({
	            blockchainType: address.blockchainType,
	            address: common_evm_utils_1$1.EvmAddress.create(address.address, core).checksum,
	        }); }),
	    };
	}
	function deserializeResponse$4(jsonResponse) {
	    return jsonResponse;
	}
	function serializeRequest$4(request, core) {
	    return {
	        addresses: request.addresses.map(function (address) { return ({
	            blockchainType: address.blockchainType,
	            address: common_evm_utils_1$1.EvmAddress.create(address.address, core).checksum,
	        }); }),
	    };
	}
	function deserializeRequest$4(jsonRequest, core) {
	    return {
	        addresses: jsonRequest.addresses.map(function (address) { return ({
	            blockchainType: address.blockchainType,
	            address: common_evm_utils_1$1.EvmAddress.create(address.address, core),
	        }); }),
	    };
	}

	var verifyRemoveBindOperation = {};

	Object.defineProperty(verifyRemoveBindOperation, "__esModule", { value: true });
	verifyRemoveBindOperation.verifyRemoveBindOperation = void 0;
	verifyRemoveBindOperation.verifyRemoveBindOperation = {
	    method: 'POST',
	    name: 'verifyRemoveBind',
	    id: 'verifyRemoveBind',
	    groupName: 'evm',
	    urlPathPattern: '/bind/remove/verify',
	    bodyParamNames: ['message', 'signature'],
	    bodyType: 'properties',
	    getRequestUrlParams: getRequestUrlParams$3,
	    getRequestBody: getRequestBody$3,
	    serializeRequest: serializeRequest$3,
	    deserializeRequest: deserializeRequest$3,
	    deserializeResponse: deserializeResponse$3,
	};
	// Methods
	function getRequestUrlParams$3() {
	    return {};
	}
	function getRequestBody$3(request) {
	    return {
	        message: request.message,
	        signature: request.signature,
	    };
	}
	function deserializeResponse$3(jsonResponse) {
	    return jsonResponse;
	}
	function serializeRequest$3(request) {
	    return {
	        message: request.message,
	        signature: request.signature,
	    };
	}
	function deserializeRequest$3(jsonRequest) {
	    return {
	        message: jsonRequest.message,
	        signature: jsonRequest.signature,
	    };
	}

	var verifyRequestBindOperation = {};

	Object.defineProperty(verifyRequestBindOperation, "__esModule", { value: true });
	verifyRequestBindOperation.verifyRequestBindOperation = void 0;
	verifyRequestBindOperation.verifyRequestBindOperation = {
	    method: 'POST',
	    name: 'verifyRequestBind',
	    id: 'verifyRequestBind',
	    groupName: 'evm',
	    urlPathPattern: '/bind/request/verify',
	    bodyParamNames: ['verifications'],
	    bodyType: 'properties',
	    getRequestUrlParams: getRequestUrlParams$2,
	    getRequestBody: getRequestBody$2,
	    serializeRequest: serializeRequest$2,
	    deserializeRequest: deserializeRequest$2,
	    deserializeResponse: deserializeResponse$2,
	};
	// Methods
	function getRequestUrlParams$2() {
	    return {};
	}
	function getRequestBody$2(request) {
	    return {
	        verifications: request.verifications,
	    };
	}
	function deserializeResponse$2(jsonResponse) {
	    return jsonResponse;
	}
	function serializeRequest$2(request) {
	    return {
	        verifications: request.verifications,
	    };
	}
	function deserializeRequest$2(jsonRequest) {
	    return {
	        verifications: jsonRequest.verifications,
	    };
	}

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(verifyChallengeEvmOperation, exports);
		__exportStar(requestChallengeEvmOperation, exports);
		__exportStar(getAddressesOperation, exports);
		__exportStar(removeBindOperation, exports);
		__exportStar(requestBindOperation, exports);
		__exportStar(verifyRemoveBindOperation, exports);
		__exportStar(verifyRequestBindOperation, exports);
		
	} (evm));

	var solana = {};

	var verifyChallengeSolanaOperation = {};

	var __assign = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign.apply(this, arguments);
	};
	var __rest = (commonjsGlobal && commonjsGlobal.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	Object.defineProperty(verifyChallengeSolanaOperation, "__esModule", { value: true });
	verifyChallengeSolanaOperation.verifyChallengeSolanaOperation = void 0;
	var common_core_1$4 = lib$9;
	var common_sol_utils_1$2 = lib$3;
	verifyChallengeSolanaOperation.verifyChallengeSolanaOperation = {
	    method: 'POST',
	    name: 'verifyChallengeSolana',
	    id: 'verifyChallengeSolana',
	    groupName: 'solana',
	    urlPathPattern: '/challenge/verify/solana',
	    bodyParamNames: ['message', 'signature'],
	    bodyType: 'properties',
	    getRequestUrlParams: getRequestUrlParams$1,
	    getRequestBody: getRequestBody$1,
	    serializeRequest: serializeRequest$1,
	    deserializeRequest: deserializeRequest$1,
	    deserializeResponse: deserializeResponse$1,
	};
	// Methods
	function getRequestUrlParams$1() {
	    return {};
	}
	function getRequestBody$1(request) {
	    return {
	        message: request.message,
	        signature: request.signature,
	    };
	}
	function deserializeResponse$1(_a) {
	    var network = _a.network, jsonResponse = __rest(_a, ["network"]);
	    return __assign(__assign({}, jsonResponse), { solNetwork: common_sol_utils_1$2.SolNetwork.create(network), address: common_sol_utils_1$2.SolAddress.create(jsonResponse.address), expirationTime: (0, common_core_1$4.maybe)(jsonResponse.expirationTime, function (value) { return new Date(value); }), notBefore: (0, common_core_1$4.maybe)(jsonResponse.notBefore, function (value) { return new Date(value); }) });
	}
	function serializeRequest$1(request) {
	    return {
	        message: request.message,
	        signature: request.signature,
	    };
	}
	function deserializeRequest$1(jsonRequest) {
	    return {
	        message: jsonRequest.message,
	        signature: jsonRequest.signature,
	    };
	}

	var requestChallengeSolanaOperation = {};

	Object.defineProperty(requestChallengeSolanaOperation, "__esModule", { value: true });
	requestChallengeSolanaOperation.requestChallengeSolanaOperation = void 0;
	var common_sol_utils_1$1 = lib$3;
	/** The back channel challenge containing the id to store on the api and the message to be signed by the user */
	requestChallengeSolanaOperation.requestChallengeSolanaOperation = {
	    method: 'POST',
	    name: 'requestChallengeSolana',
	    id: 'requestChallengeSolana',
	    groupName: 'solana',
	    urlPathPattern: '/challenge/request/solana',
	    bodyParamNames: [
	        'domain',
	        'network',
	        'address',
	        'statement',
	        'uri',
	        'expirationTime',
	        'notBefore',
	        'resources',
	        'timeout',
	    ],
	    bodyType: 'properties',
	    getRequestUrlParams: getRequestUrlParams,
	    getRequestBody: getRequestBody,
	    serializeRequest: serializeRequest,
	    deserializeRequest: deserializeRequest,
	    deserializeResponse: deserializeResponse,
	};
	// Methods
	function getRequestUrlParams() {
	    return {};
	}
	function getRequestBody(request) {
	    return {
	        domain: request.domain,
	        network: common_sol_utils_1$1.SolNetwork.create(request.network).network,
	        address: common_sol_utils_1$1.SolAddress.create(request.address).address,
	        statement: request.statement,
	        uri: request.uri,
	        expirationTime: request.expirationTime,
	        notBefore: request.notBefore,
	        resources: request.resources,
	        timeout: request.timeout,
	    };
	}
	function deserializeResponse(jsonResponse) {
	    return jsonResponse;
	}
	function serializeRequest(request) {
	    return {
	        domain: request.domain,
	        network: common_sol_utils_1$1.SolNetwork.create(request.network).network,
	        address: common_sol_utils_1$1.SolAddress.create(request.address).address,
	        statement: request.statement,
	        uri: request.uri,
	        expirationTime: request.expirationTime,
	        notBefore: request.notBefore,
	        resources: request.resources,
	        timeout: request.timeout,
	    };
	}
	function deserializeRequest(jsonRequest) {
	    return {
	        domain: jsonRequest.domain,
	        network: common_sol_utils_1$1.SolNetwork.create(jsonRequest.network),
	        address: common_sol_utils_1$1.SolAddress.create(jsonRequest.address),
	        statement: jsonRequest.statement,
	        uri: jsonRequest.uri,
	        expirationTime: jsonRequest.expirationTime,
	        notBefore: jsonRequest.notBefore,
	        resources: jsonRequest.resources,
	        timeout: jsonRequest.timeout,
	    };
	}

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(verifyChallengeSolanaOperation, exports);
		__exportStar(requestChallengeSolanaOperation, exports);
		
	} (solana));

	var operations = {};

	Object.defineProperty(operations, "__esModule", { value: true });
	operations.operations = void 0;
	var evm_1 = evm;
	var solana_1 = solana;
	var aptos_1 = aptos;
	operations.operations = [
	    solana_1.requestChallengeSolanaOperation,
	    evm_1.requestChallengeEvmOperation,
	    aptos_1.requestChallengeAptosOperation,
	    solana_1.verifyChallengeSolanaOperation,
	    evm_1.verifyChallengeEvmOperation,
	    aptos_1.verifyChallengeAptosOperation,
	    evm_1.getAddressesOperation,
	    evm_1.removeBindOperation,
	    evm_1.requestBindOperation,
	    evm_1.verifyRemoveBindOperation,
	    evm_1.verifyRequestBindOperation,
	];

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(aptos, exports);
		__exportStar(evm, exports);
		__exportStar(solana, exports);
		__exportStar(operations, exports);
		
	} (operations$1));

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(operations$1, exports);
		
	} (lib$2));

	var hasRequiredRequestMessage;

	function requireRequestMessage () {
		if (hasRequiredRequestMessage) return requestMessage;
		hasRequiredRequestMessage = 1;
		var __assign = (commonjsGlobal && commonjsGlobal.__assign) || function () {
		    __assign = Object.assign || function(t) {
		        for (var s, i = 1, n = arguments.length; i < n; i++) {
		            s = arguments[i];
		            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
		                t[p] = s[p];
		        }
		        return t;
		    };
		    return __assign.apply(this, arguments);
		};
		var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
		    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
		    return new (P || (P = Promise))(function (resolve, reject) {
		        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
		        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
		        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
		        step((generator = generator.apply(thisArg, _arguments || [])).next());
		    });
		};
		var __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
		    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
		    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
		    function verb(n) { return function (v) { return step([n, v]); }; }
		    function step(op) {
		        if (f) throw new TypeError("Generator is already executing.");
		        while (g && (g = 0, op[0] && (_ = 0)), _) try {
		            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
		            if (y = 0, t) op = [op[0] & 2, t.value];
		            switch (op[0]) {
		                case 0: case 1: t = op; break;
		                case 4: _.label++; return { value: op[1], done: false };
		                case 5: _.label++; y = op[1]; op = [0]; continue;
		                case 7: op = _.ops.pop(); _.trys.pop(); continue;
		                default:
		                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
		                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
		                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
		                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
		                    if (t[2]) _.ops.pop();
		                    _.trys.pop(); continue;
		            }
		            op = body.call(thisArg, _);
		        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
		        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
		    }
		};
		var __rest = (commonjsGlobal && commonjsGlobal.__rest) || function (s, e) {
		    var t = {};
		    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
		        t[p] = s[p];
		    if (s != null && typeof Object.getOwnPropertySymbols === "function")
		        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
		            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
		                t[p[i]] = s[p[i]];
		        }
		    return t;
		};
		Object.defineProperty(requestMessage, "__esModule", { value: true });
		requestMessage.makeRequestMessage = void 0;
		var common_sol_utils_1 = lib$3;
		var api_utils_1 = lib$a;
		var common_core_1 = lib$9;
		var common_evm_utils_1 = lib$6;
		var Auth_1 = requireAuth();
		var AuthNetworkType_1 = AuthNetworkType;
		var common_auth_utils_1 = lib$2;
		var common_aptos_utils_1 = lib$7;
		var makeEvmRequestMessage = function (core, _a) {
		    var chain = _a.chain, address = _a.address; _a.networkType; _a.network; var options = __rest(_a, ["chain", "address", "networkType", "network"]);
		    return new api_utils_1.OperationResolver(common_auth_utils_1.requestChallengeEvmOperation, Auth_1.BASE_URL, core).fetch(__assign({ chainId: common_evm_utils_1.EvmChain.create(chain).hex, address: common_evm_utils_1.EvmAddress.create(address).checksum }, options));
		};
		var makeSolRequestMessage = function (core, _a) {
		    var address = _a.address, solNetwork = _a.solNetwork; _a.networkType; _a.network; var options = __rest(_a, ["address", "solNetwork", "networkType", "network"]);
		    return new api_utils_1.OperationResolver(common_auth_utils_1.requestChallengeSolanaOperation, Auth_1.BASE_URL, core).fetch(__assign({ network: common_sol_utils_1.SolNetwork.create(solNetwork).network, address: common_sol_utils_1.SolAddress.create(address).toString() }, options));
		};
		var makeAptosRequestMessage = function (core, _a) {
		    var address = _a.address; _a.networkType; var chain = _a.chain, options = __rest(_a, ["address", "networkType", "chain"]);
		    return new api_utils_1.OperationResolver(common_auth_utils_1.requestChallengeAptosOperation, Auth_1.BASE_URL, core).fetch(__assign({ chainId: common_aptos_utils_1.AptosNetwork.create(chain).network, address: common_aptos_utils_1.AptosAddress.create(address).toString() }, options));
		};
		var makeRequestMessage = function (core) { return function (options) { return __awaiter(void 0, void 0, void 0, function () {
		    return __generator(this, function (_a) {
		        // Backwards compatibility for the 'network' parameter
		        if (!options.networkType && options.network) {
		            options.networkType = options.network;
		        }
		        switch (options.networkType) {
		            case AuthNetworkType_1.AuthNetworkType.EVM:
		                return [2 /*return*/, makeEvmRequestMessage(core, options)];
		            case AuthNetworkType_1.AuthNetworkType.SOLANA:
		                return [2 /*return*/, makeSolRequestMessage(core, options)];
		            case AuthNetworkType_1.AuthNetworkType.APTOS:
		                return [2 /*return*/, makeAptosRequestMessage(core, options)];
		            default:
		                if (!options.networkType) {
		                    return [2 /*return*/, makeEvmRequestMessage(core, options)];
		                }
		                throw new common_core_1.MoralisAuthError({
		                    code: common_core_1.AuthErrorCode.INCORRECT_NETWORK,
		                    message: "Incorrect network provided. Got \"".concat(options.networkType, "\", Valid values are: ").concat(Object.values(AuthNetworkType_1.AuthNetworkType)
		                        .map(function (value) { return "\"".concat(value, "\""); })
		                        .join(', ')),
		                });
		        }
		    });
		}); }; };
		requestMessage.makeRequestMessage = makeRequestMessage;
		
		return requestMessage;
	}

	var verify = {};

	var hasRequiredVerify;

	function requireVerify () {
		if (hasRequiredVerify) return verify;
		hasRequiredVerify = 1;
		var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
		    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
		    return new (P || (P = Promise))(function (resolve, reject) {
		        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
		        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
		        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
		        step((generator = generator.apply(thisArg, _arguments || [])).next());
		    });
		};
		var __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
		    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
		    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
		    function verb(n) { return function (v) { return step([n, v]); }; }
		    function step(op) {
		        if (f) throw new TypeError("Generator is already executing.");
		        while (g && (g = 0, op[0] && (_ = 0)), _) try {
		            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
		            if (y = 0, t) op = [op[0] & 2, t.value];
		            switch (op[0]) {
		                case 0: case 1: t = op; break;
		                case 4: _.label++; return { value: op[1], done: false };
		                case 5: _.label++; y = op[1]; op = [0]; continue;
		                case 7: op = _.ops.pop(); _.trys.pop(); continue;
		                default:
		                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
		                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
		                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
		                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
		                    if (t[2]) _.ops.pop();
		                    _.trys.pop(); continue;
		            }
		            op = body.call(thisArg, _);
		        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
		        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
		    }
		};
		var __rest = (commonjsGlobal && commonjsGlobal.__rest) || function (s, e) {
		    var t = {};
		    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
		        t[p] = s[p];
		    if (s != null && typeof Object.getOwnPropertySymbols === "function")
		        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
		            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
		                t[p[i]] = s[p[i]];
		        }
		    return t;
		};
		Object.defineProperty(verify, "__esModule", { value: true });
		verify.makeVerify = void 0;
		var api_utils_1 = lib$a;
		var common_core_1 = lib$9;
		var Auth_1 = requireAuth();
		var common_auth_utils_1 = lib$2;
		var AuthNetworkType_1 = AuthNetworkType;
		var makeEvmVerify = function (core, _a) {
		    _a.networkType; _a.network; var options = __rest(_a, ["networkType", "network"]);
		    return new api_utils_1.OperationResolver(common_auth_utils_1.verifyChallengeEvmOperation, Auth_1.BASE_URL, core).fetch({
		        message: options.message,
		        signature: options.signature,
		    });
		};
		var makeSolVerify = function (core, _a) {
		    _a.networkType; _a.network; var options = __rest(_a, ["networkType", "network"]);
		    return new api_utils_1.OperationResolver(common_auth_utils_1.verifyChallengeSolanaOperation, Auth_1.BASE_URL, core).fetch({
		        message: options.message,
		        signature: options.signature,
		    });
		};
		var makeAptosVerify = function (core, _a) {
		    _a.networkType; var options = __rest(_a, ["networkType"]);
		    return new api_utils_1.OperationResolver(common_auth_utils_1.verifyChallengeAptosOperation, Auth_1.BASE_URL, core).fetch({
		        message: options.message,
		        signature: options.signature,
		    });
		};
		var makeVerify = function (core) { return function (options) { return __awaiter(void 0, void 0, void 0, function () {
		    return __generator(this, function (_a) {
		        // Backwards compatibility for the 'network' parameter
		        if (!options.networkType && options.network) {
		            options.networkType = options.network;
		        }
		        switch (options.networkType) {
		            case AuthNetworkType_1.AuthNetworkType.EVM:
		                return [2 /*return*/, makeEvmVerify(core, options)];
		            case AuthNetworkType_1.AuthNetworkType.SOLANA:
		                return [2 /*return*/, makeSolVerify(core, options)];
		            case AuthNetworkType_1.AuthNetworkType.APTOS:
		                return [2 /*return*/, makeAptosVerify(core, options)];
		            default:
		                if (!options.networkType) {
		                    return [2 /*return*/, makeEvmVerify(core, options)];
		                }
		                throw new common_core_1.MoralisAuthError({
		                    code: common_core_1.AuthErrorCode.INCORRECT_NETWORK,
		                    message: "Incorrect network provided. Got \"".concat(options.networkType, "\", Valid values are: ").concat(Object.values(AuthNetworkType_1.AuthNetworkType)
		                        .map(function (value) { return "\"".concat(value, "\""); })
		                        .join(', ')),
		                });
		        }
		    });
		}); }; };
		verify.makeVerify = makeVerify;
		
		return verify;
	}

	var hasRequiredAuth;

	function requireAuth () {
		if (hasRequiredAuth) return Auth;
		hasRequiredAuth = 1;
		(function (exports) {
			var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        if (typeof b !== "function" && b !== null)
			            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(exports, "__esModule", { value: true });
			exports.Auth = exports.BASE_URL = void 0;
			var common_core_1 = lib$9;
			var requestMessage_1 = requireRequestMessage();
			var verify_1 = requireVerify();
			var common_auth_utils_1 = lib$2;
			var api_utils_1 = lib$a;
			exports.BASE_URL = 'https://authapi.moralis.io';
			var Auth = /** @class */ (function (_super) {
			    __extends(Auth, _super);
			    function Auth(core) {
			        var _this = _super.call(this, Auth.moduleName, core, exports.BASE_URL) || this;
			        // Client-side compatible operation, structured in a predictable way as defined in the operation
			        // TODO: generate in seperate package "client-evm-auth" (similar to client-evm-auth)
			        _this.evm = {
			            getAddresses: function (request) {
			                return new api_utils_1.OperationResolver(common_auth_utils_1.getAddressesOperation, _this.baseUrl, _this.core).fetch(request);
			            },
			            removeBind: function (request) {
			                return new api_utils_1.OperationResolver(common_auth_utils_1.removeBindOperation, _this.baseUrl, _this.core).fetch(request);
			            },
			            requestBind: function (request) {
			                return new api_utils_1.OperationResolver(common_auth_utils_1.requestBindOperation, _this.baseUrl, _this.core).fetch(request);
			            },
			            requestChallengeEvm: function (request) {
			                return new api_utils_1.OperationResolver(common_auth_utils_1.requestChallengeEvmOperation, _this.baseUrl, _this.core).fetch(request);
			            },
			            verifyRemoveBind: function (request) {
			                return new api_utils_1.OperationResolver(common_auth_utils_1.verifyRemoveBindOperation, _this.baseUrl, _this.core).fetch(request);
			            },
			            verifyRequestBind: function (request) {
			                return new api_utils_1.OperationResolver(common_auth_utils_1.verifyRequestBindOperation, _this.baseUrl, _this.core).fetch(request);
			            },
			        };
			        // Client-side compatible operation, structured in a predictable way as defined in the operation
			        // TODO: generate in separate package "client-evm-auth" (similar to client-evm-auth)
			        _this.solana = {
			            requestChallengeSol: function (request) {
			                return new api_utils_1.OperationResolver(common_auth_utils_1.requestChallengeSolanaOperation, _this.baseUrl, _this.core).fetch(request);
			            },
			        };
			        // Resolves to requestChallengeEvm/requestChallengeSol depending on provided options (defaults to evm)
			        _this.requestMessage = function (options) { return (0, requestMessage_1.makeRequestMessage)(_this.core)(options); };
			        return _this;
			    }
			    Auth.create = function (core) {
			        return new Auth(core !== null && core !== void 0 ? core : common_core_1.CoreProvider.getDefault());
			    };
			    Auth.prototype.setup = function () {
			        // Nothing
			    };
			    Auth.prototype.start = function () {
			        // Nothing
			    };
			    Auth.prototype.verify = function (options) {
			        return (0, verify_1.makeVerify)(this.core)(options);
			    };
			    Auth.moduleName = 'auth';
			    return Auth;
			}(common_core_1.ApiModule));
			exports.Auth = Auth;
			
	} (Auth));
		return Auth;
	}

	var types = {};

	Object.defineProperty(types, "__esModule", { value: true });

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		var Auth_1 = requireAuth();
		__exportStar(requireAuth(), exports);
		// Export SDK types
		__exportStar(types, exports);
		exports.default = Auth_1.Auth;
		
	} (lib$4));

	var lib$1 = {};

	var EvmApi$1 = {};

	var EvmApiConfigSetup$1 = {};

	var EvmApiConfig = {};

	Object.defineProperty(EvmApiConfig, "__esModule", { value: true });
	EvmApiConfig.EvmApiConfig = void 0;
	EvmApiConfig.EvmApiConfig = {
	    defaultEvmApiChain: {
	        name: 'defaultEvmApiChain',
	        defaultValue: '0x1',
	    },
	};

	Object.defineProperty(EvmApiConfigSetup$1, "__esModule", { value: true });
	EvmApiConfigSetup$1.EvmApiConfigSetup = void 0;
	var EvmApiConfig_1 = EvmApiConfig;
	var EvmApiConfigSetup = /** @class */ (function () {
	    function EvmApiConfigSetup() {
	    }
	    EvmApiConfigSetup.register = function (config) {
	        config.registerKey(EvmApiConfig_1.EvmApiConfig.defaultEvmApiChain);
	    };
	    return EvmApiConfigSetup;
	}());
	EvmApiConfigSetup$1.EvmApiConfigSetup = EvmApiConfigSetup;

	var ClientEvmApi$1 = {};

	// CAUTION: This file is automatically generated. Do not edit it manually!
	var __extends$3 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(ClientEvmApi$1, "__esModule", { value: true });
	ClientEvmApi$1.ClientEvmApi = void 0;
	var common_evm_utils_1 = lib$6;
	var api_utils_1$1 = lib$a;
	var common_core_1$3 = lib$9;
	var ClientEvmApi = /** @class */ (function (_super) {
	    __extends$3(ClientEvmApi, _super);
	    function ClientEvmApi() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        _this.utils = {
	            endpointWeights: function () {
	                return new api_utils_1$1.OperationResolver(common_evm_utils_1.endpointWeightsOperation, _this.baseUrl, _this.core).fetch({});
	            },
	            runContractFunction: function (request) {
	                return new api_utils_1$1.OperationResolver(common_evm_utils_1.runContractFunctionOperation, _this.baseUrl, _this.core).fetch(request);
	            },
	            web3ApiVersion: function () {
	                return new api_utils_1$1.OperationResolver(common_evm_utils_1.web3ApiVersionOperation, _this.baseUrl, _this.core).fetch({});
	            },
	        };
	        _this.block = {
	            getBlock: function (request) {
	                return new api_utils_1$1.NullableOperationResolver(common_evm_utils_1.getBlockOperation, _this.baseUrl, _this.core).fetch(request);
	            },
	            getDateToBlock: function (request) {
	                return new api_utils_1$1.OperationResolver(common_evm_utils_1.getDateToBlockOperation, _this.baseUrl, _this.core).fetch(request);
	            },
	        };
	        _this.events = {
	            getContractEvents: function (request) {
	                return new api_utils_1$1.PaginatedOperationResolver(common_evm_utils_1.getContractEventsOperation, _this.baseUrl, _this.core).fetch(request);
	            },
	            getContractLogs: function (request) {
	                return new api_utils_1$1.PaginatedOperationResolver(common_evm_utils_1.getContractLogsOperation, _this.baseUrl, _this.core).fetch(request);
	            },
	        };
	        _this.nft = {
	            getContractNFTs: function (request) {
	                return new api_utils_1$1.PaginatedOperationResolver(common_evm_utils_1.getContractNFTsOperation, _this.baseUrl, _this.core).fetch(request);
	            },
	            getMultipleNFTs: function (request) {
	                return new api_utils_1$1.OperationResolver(common_evm_utils_1.getMultipleNFTsOperation, _this.baseUrl, _this.core).fetch(request);
	            },
	            getNFTContractMetadata: function (request) {
	                return new api_utils_1$1.NullableOperationResolver(common_evm_utils_1.getNFTContractMetadataOperation, _this.baseUrl, _this.core).fetch(request);
	            },
	            getNFTContractTransfers: function (request) {
	                return new api_utils_1$1.PaginatedOperationResolver(common_evm_utils_1.getNFTContractTransfersOperation, _this.baseUrl, _this.core).fetch(request);
	            },
	            getNFTLowestPrice: function (request) {
	                return new api_utils_1$1.NullableOperationResolver(common_evm_utils_1.getNFTLowestPriceOperation, _this.baseUrl, _this.core).fetch(request);
	            },
	            getNFTMetadata: function (request) {
	                return new api_utils_1$1.NullableOperationResolver(common_evm_utils_1.getNFTMetadataOperation, _this.baseUrl, _this.core).fetch(request);
	            },
	            getNFTOwners: function (request) {
	                return new api_utils_1$1.PaginatedOperationResolver(common_evm_utils_1.getNFTOwnersOperation, _this.baseUrl, _this.core).fetch(request);
	            },
	            getNFTTokenIdOwners: function (request) {
	                return new api_utils_1$1.PaginatedOperationResolver(common_evm_utils_1.getNFTTokenIdOwnersOperation, _this.baseUrl, _this.core).fetch(request);
	            },
	            getNFTTrades: function (request) {
	                return new api_utils_1$1.PaginatedOperationResolver(common_evm_utils_1.getNFTTradesOperation, _this.baseUrl, _this.core).fetch(request);
	            },
	            getNFTTransfersByBlock: function (request) {
	                return new api_utils_1$1.PaginatedOperationResolver(common_evm_utils_1.getNFTTransfersByBlockOperation, _this.baseUrl, _this.core).fetch(request);
	            },
	            getNFTTransfersFromToBlock: function (request) {
	                return new api_utils_1$1.PaginatedOperationResolver(common_evm_utils_1.getNFTTransfersFromToBlockOperation, _this.baseUrl, _this.core).fetch(request);
	            },
	            getNFTTransfers: function (request) {
	                return new api_utils_1$1.PaginatedOperationResolver(common_evm_utils_1.getNFTTransfersOperation, _this.baseUrl, _this.core).fetch(request);
	            },
	            getWalletNFTCollections: function (request) {
	                return new api_utils_1$1.PaginatedOperationResolver(common_evm_utils_1.getWalletNFTCollectionsOperation, _this.baseUrl, _this.core).fetch(request);
	            },
	            getWalletNFTs: function (request) {
	                return new api_utils_1$1.PaginatedOperationResolver(common_evm_utils_1.getWalletNFTsOperation, _this.baseUrl, _this.core).fetch(request);
	            },
	            getWalletNFTTransfers: function (request) {
	                return new api_utils_1$1.PaginatedOperationResolver(common_evm_utils_1.getWalletNFTTransfersOperation, _this.baseUrl, _this.core).fetch(request);
	            },
	            reSyncMetadata: function (request) {
	                return new api_utils_1$1.OperationResolver(common_evm_utils_1.reSyncMetadataOperation, _this.baseUrl, _this.core).fetch(request);
	            },
	            searchNFTs: function (request) {
	                return new api_utils_1$1.PaginatedOperationResolver(common_evm_utils_1.searchNFTsOperation, _this.baseUrl, _this.core).fetch(request);
	            },
	            syncNFTContract: function (request) {
	                return new api_utils_1$1.OperationResolver(common_evm_utils_1.syncNFTContractOperation, _this.baseUrl, _this.core).fetch(request);
	            },
	        };
	        _this.balance = {
	            getNativeBalance: function (request) {
	                return new api_utils_1$1.OperationResolver(common_evm_utils_1.getNativeBalanceOperation, _this.baseUrl, _this.core).fetch(request);
	            },
	            getNativeBalancesForAddresses: function (request) {
	                return new api_utils_1$1.OperationResolver(common_evm_utils_1.getNativeBalancesForAddressesOperation, _this.baseUrl, _this.core).fetch(request);
	            },
	        };
	        _this.defi = {
	            getPairAddress: function (request) {
	                return new api_utils_1$1.OperationResolver(common_evm_utils_1.getPairAddressOperation, _this.baseUrl, _this.core).fetch(request);
	            },
	            getPairReserves: function (request) {
	                return new api_utils_1$1.OperationResolver(common_evm_utils_1.getPairReservesOperation, _this.baseUrl, _this.core).fetch(request);
	            },
	        };
	        _this.token = {
	            getTokenAllowance: function (request) {
	                return new api_utils_1$1.OperationResolver(common_evm_utils_1.getTokenAllowanceOperation, _this.baseUrl, _this.core).fetch(request);
	            },
	            getTokenMetadataBySymbol: function (request) {
	                return new api_utils_1$1.OperationResolver(common_evm_utils_1.getTokenMetadataBySymbolOperation, _this.baseUrl, _this.core).fetch(request);
	            },
	            getTokenMetadata: function (request) {
	                return new api_utils_1$1.OperationResolver(common_evm_utils_1.getTokenMetadataOperation, _this.baseUrl, _this.core).fetch(request);
	            },
	            getTokenPrice: function (request) {
	                return new api_utils_1$1.OperationResolver(common_evm_utils_1.getTokenPriceOperation, _this.baseUrl, _this.core).fetch(request);
	            },
	            getTokenTransfers: function (request) {
	                return new api_utils_1$1.PaginatedOperationResolver(common_evm_utils_1.getTokenTransfersOperation, _this.baseUrl, _this.core).fetch(request);
	            },
	            getWalletTokenBalances: function (request) {
	                return new api_utils_1$1.OperationResolver(common_evm_utils_1.getWalletTokenBalancesOperation, _this.baseUrl, _this.core).fetch(request);
	            },
	            getWalletTokenTransfers: function (request) {
	                return new api_utils_1$1.PaginatedOperationResolver(common_evm_utils_1.getWalletTokenTransfersOperation, _this.baseUrl, _this.core).fetch(request);
	            },
	        };
	        _this.transaction = {
	            getTransaction: function (request) {
	                return new api_utils_1$1.NullableOperationResolver(common_evm_utils_1.getTransactionOperation, _this.baseUrl, _this.core).fetch(request);
	            },
	            getWalletTransactions: function (request) {
	                return new api_utils_1$1.PaginatedOperationResolver(common_evm_utils_1.getWalletTransactionsOperation, _this.baseUrl, _this.core).fetch(request);
	            },
	            getWalletTransactionsVerbose: function (request) {
	                return new api_utils_1$1.PaginatedOperationResolver(common_evm_utils_1.getWalletTransactionsVerboseOperation, _this.baseUrl, _this.core).fetch(request);
	            },
	        };
	        _this.resolve = {
	            resolveAddress: function (request) {
	                return new api_utils_1$1.NullableOperationResolver(common_evm_utils_1.resolveAddressOperation, _this.baseUrl, _this.core).fetch(request);
	            },
	            resolveDomain: function (request) {
	                return new api_utils_1$1.NullableOperationResolver(common_evm_utils_1.resolveDomainOperation, _this.baseUrl, _this.core).fetch(request);
	            },
	        };
	        _this.ipfs = {
	            uploadFolder: function (request) {
	                return new api_utils_1$1.OperationResolver(common_evm_utils_1.uploadFolderOperation, _this.baseUrl, _this.core).fetch(request);
	            },
	        };
	        return _this;
	    }
	    return ClientEvmApi;
	}(common_core_1$3.ApiModule));
	ClientEvmApi$1.ClientEvmApi = ClientEvmApi;

	var __extends$2 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(EvmApi$1, "__esModule", { value: true });
	EvmApi$1.EvmApi = void 0;
	var common_core_1$2 = lib$9;
	var EvmApiConfigSetup_1 = EvmApiConfigSetup$1;
	var ClientEvmApi_1 = ClientEvmApi$1;
	var BASE_URL$1 = 'https://deep-index.moralis.io/api/v2';
	var EvmApi = /** @class */ (function (_super) {
	    __extends$2(EvmApi, _super);
	    function EvmApi(core) {
	        return _super.call(this, EvmApi.moduleName, core, BASE_URL$1) || this;
	    }
	    EvmApi.create = function (core) {
	        return new EvmApi(core !== null && core !== void 0 ? core : common_core_1$2.CoreProvider.getDefault());
	    };
	    EvmApi.prototype.setup = function () {
	        EvmApiConfigSetup_1.EvmApiConfigSetup.register(this.core.config);
	    };
	    EvmApi.prototype.start = function () {
	        // Nothing
	    };
	    EvmApi.moduleName = 'evmApi';
	    return EvmApi;
	}(ClientEvmApi_1.ClientEvmApi));
	EvmApi$1.EvmApi = EvmApi;

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		var EvmApi_1 = EvmApi$1;
		__exportStar(EvmApi$1, exports);
		exports.default = EvmApi_1.EvmApi;
		
	} (lib$1));

	var lib = {};

	var SolApi$1 = {};

	var ClientSolApi$1 = {};

	// CAUTION: This file is automatically generated. Do not edit it manually!
	var __extends$1 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(ClientSolApi$1, "__esModule", { value: true });
	ClientSolApi$1.ClientSolApi = void 0;
	var common_sol_utils_1 = lib$3;
	var api_utils_1 = lib$a;
	var common_core_1$1 = lib$9;
	var ClientSolApi = /** @class */ (function (_super) {
	    __extends$1(ClientSolApi, _super);
	    function ClientSolApi() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        _this.account = {
	            getBalance: function (request) {
	                return new api_utils_1.OperationResolver(common_sol_utils_1.getBalanceOperation, _this.baseUrl, _this.core).fetch(request);
	            },
	            getNFTs: function (request) {
	                return new api_utils_1.OperationResolver(common_sol_utils_1.getNFTsOperation, _this.baseUrl, _this.core).fetch(request);
	            },
	            getPortfolio: function (request) {
	                return new api_utils_1.OperationResolver(common_sol_utils_1.getPortfolioOperation, _this.baseUrl, _this.core).fetch(request);
	            },
	            getSPL: function (request) {
	                return new api_utils_1.OperationResolver(common_sol_utils_1.getSPLOperation, _this.baseUrl, _this.core).fetch(request);
	            },
	        };
	        _this.nft = {
	            getNFTMetadata: function (request) {
	                return new api_utils_1.OperationResolver(common_sol_utils_1.getNFTMetadataOperation, _this.baseUrl, _this.core).fetch(request);
	            },
	        };
	        _this.token = {
	            getTokenPrice: function (request) {
	                return new api_utils_1.OperationResolver(common_sol_utils_1.getTokenPriceOperation, _this.baseUrl, _this.core).fetch(request);
	            },
	        };
	        return _this;
	    }
	    return ClientSolApi;
	}(common_core_1$1.ApiModule));
	ClientSolApi$1.ClientSolApi = ClientSolApi;

	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(SolApi$1, "__esModule", { value: true });
	SolApi$1.SolApi = void 0;
	var common_core_1 = lib$9;
	var ClientSolApi_1 = ClientSolApi$1;
	var BASE_URL = 'https://solana-gateway.moralis.io';
	var SolApi = /** @class */ (function (_super) {
	    __extends(SolApi, _super);
	    function SolApi(core) {
	        return _super.call(this, SolApi.moduleName, core, BASE_URL) || this;
	    }
	    SolApi.create = function (core) {
	        return new SolApi(core !== null && core !== void 0 ? core : common_core_1.CoreProvider.getDefault());
	    };
	    SolApi.prototype.setup = function () {
	        // Nothing
	    };
	    SolApi.prototype.start = function () {
	        // Nothing
	    };
	    SolApi.moduleName = 'solApi';
	    return SolApi;
	}(ClientSolApi_1.ClientSolApi));
	SolApi$1.SolApi = SolApi;

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		var SolApi_1 = SolApi$1;
		__exportStar(SolApi$1, exports);
		exports.default = { SolApi: SolApi_1.SolApi };
		
	} (lib));

	// Core
	const core = lib$9.Core.create();
	// Utility modules
	const commonEvmUtils = lib$6.CommonEvmUtils.create(core);
	const commonSolUtils = lib$3.CommonSolUtils.create(core);
	const apiUtils = lib$a.ApiUtils.create(core);
	// Feature modules
	const auth = lib$4.Auth.create(core);
	const streams = lib$b.Streams.create(core);
	const evmApi = lib$1.EvmApi.create(core);
	const solApi = lib.SolApi.create(core);
	// Register all Moralis modules to Core
	core.registerModules([commonEvmUtils, commonSolUtils, auth, apiUtils, evmApi, solApi, streams]);
	lib$9.CoreProvider.setDefault(core);
	const Moralis = {
	    Core: core,
	    Auth: auth,
	    Streams: streams,
	    EvmApi: evmApi,
	    SolApi: solApi,
	    EvmUtils: commonEvmUtils,
	    SolUtils: commonSolUtils,
	    start: (config) => {
	        return core.start(config);
	    },
	};

	return Moralis;

}));
//# sourceMappingURL=moralis.js.map
