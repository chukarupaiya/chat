{"version":3,"file":"changelog.js","sourceRoot":"","sources":["../src/changelog.ts"],"names":[],"mappings":";;;;;AAAA,oDAA4B;AAE5B,2CAKqB;AAErB,MAAM,cAAc,GAAG,aAAa,CAAC;AACrC,MAAM,oBAAoB,GAAG;;;wFAG2D,CAAC;AAgCzF,0BAA0B;AAE1B,SAAS,iBAAiB,CAAC,QAAwB,EAAE,OAAiB;IACpE,MAAM,cAAc,GAAG,OAAO,QAAQ,EAAE,CAAC;IACzC,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;QACxB,OAAO,cAAc,CAAC;KACvB;IACD,MAAM,kBAAkB,GAAG,OAAO;SAC/B,GAAG,CAAC,CAAC,WAAW,EAAE,EAAE,CAAC,KAAK,WAAW,EAAE,CAAC;SACxC,IAAI,CAAC,IAAI,CAAC,CAAC;IACd,OAAO,GAAG,cAAc,KAAK,kBAAkB,EAAE,CAAC;AACpD,CAAC;AAED,SAAS,gBAAgB,CACvB,OAAoC,EACpC,UAA0B,EAC1B,EAAE,IAAI,EAAE,MAAM,KAA+B,EAAE;IAE/C,MAAM,aAAa,GAAG,OAAO,OAAO,IAAI,IAAI,CAAC,CAAC,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,GAC9D,MAAM,CAAC,CAAC,CAAC,KAAK,MAAM,GAAG,CAAC,CAAC,CAAC,EAC5B,EAAE,CAAC;IACH,MAAM,kBAAkB,GAAG,mCAAuB;SAC/C,MAAM,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;SAC1C,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE;QAChB,MAAM,OAAO,GAAG,UAAU,CAAC,QAAQ,CAAa,CAAC;QACjD,OAAO,iBAAiB,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IAC9C,CAAC,CAAC;SACD,IAAI,CAAC,MAAM,CAAC,CAAC;IAChB,IAAI,kBAAkB,KAAK,EAAE,EAAE;QAC7B,OAAO,aAAa,CAAC;KACtB;IACD,OAAO,GAAG,aAAa,KAAK,kBAAkB,EAAE,CAAC;AACnD,CAAC;AAED,SAAS,iBAAiB,CACxB,QAA2B,EAC3B,OAAyB;IAEzB,MAAM,qBAAqB,GAAG,gBAAgB,CAC5C,sBAAU,EACV,OAAO,CAAC,sBAAU,CAAC,CACpB,CAAC;IACF,MAAM,mBAAmB,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,EAAE;QACrE,MAAM,UAAU,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;QACpC,OAAO,gBAAgB,CAAC,OAAO,EAAE,UAAU,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC;IACjE,CAAC,CAAC,CAAC;IAEH,OAAO,CAAC,qBAAqB,EAAE,GAAG,mBAAmB,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AACtE,CAAC;AAED,SAAS,iBAAiB,CAAC,GAAW;IACpC,OAAO,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC;AAC7C,CAAC;AAED,SAAS,aAAa,CAAC,OAAe,EAAE,QAAgB,EAAE,SAAiB;IACzE,OAAO,GAAG,iBAAiB,CAAC,OAAO,CAAC,WAAW,QAAQ,MAAM,SAAS,EAAE,CAAC;AAC3E,CAAC;AAED,SAAS,SAAS,CAAC,OAAe,EAAE,GAAW;IAC7C,OAAO,GAAG,iBAAiB,CAAC,OAAO,CAAC,gBAAgB,GAAG,EAAE,CAAC;AAC5D,CAAC;AAED,SAAS,iCAAiC,CACxC,OAAe,EACf,QAA2B;IAE3B,wDAAwD;IACxD,MAAM,wBAAwB,GAAG,QAAQ;SACtC,GAAG,CAAC,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC,OAAO,CAAC;SAC7B,IAAI,CAAC,CAAC,CAAU,EAAE,CAAU,EAAE,EAAE;QAC/B,OAAO,gBAAM,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC;IACL,MAAM,mBAAmB,GAAG,wBAAwB,CAAC,CAAC,CAAC,CAAC;IACxD,oDAAoD;IACpD,MAAM,qBAAqB,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC;IACrE,MAAM,WAAW,GAAG,qBAAqB,CAAC,MAAM,GAAG,CAAC,CAAC;IAErD,2EAA2E;IAC3E,6EAA6E;IAC7E,oEAAoE;IACpE,EAAE;IACF,yEAAyE;IACzE,6EAA6E;IAC7E,4DAA4D;IAC5D,EAAE;IACF,4EAA4E;IAC5E,uBAAuB;IACvB,MAAM,iCAAiC,GAAG,IAAI,sBAAU,MACtD,WAAW;QACT,CAAC,CAAC,aAAa,CAAC,OAAO,EAAE,IAAI,mBAAmB,EAAE,EAAE,MAAM,CAAC;QAC3D,CAAC,CAAC,iBAAiB,CAAC,OAAO,CAC/B,EAAE,CAAC;IAEH,0EAA0E;IAC1E,yEAAyE;IACzE,0EAA0E;IAC1E,uDAAuD;IACvD,MAAM,+BAA+B,GAAG,QAAQ;SAC7C,GAAG,CAAC,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE;QACnB,IAAI,OAAO,CAAC;QACZ,IAAI,OAAO,KAAK,qBAAqB,CAAC,qBAAqB,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE;YACvE,OAAO,GAAG,SAAS,CAAC,OAAO,EAAE,IAAI,OAAO,EAAE,CAAC,CAAC;SAC7C;aAAM;YACL,MAAM,YAAY,GAAG,qBAAqB,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YAC5D,MAAM,eAAe,GAAG,qBAAqB;iBAC1C,KAAK,CAAC,YAAY,CAAC;iBACnB,IAAI,CAAC,CAAC,cAAuB,EAAE,EAAE;gBAChC,OAAO,gBAAM,CAAC,EAAE,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC;YAC5C,CAAC,CAAC,CAAC;YACL,OAAO,GAAG,eAAe;gBACvB,CAAC,CAAC,aAAa,CAAC,OAAO,EAAE,IAAI,eAAe,EAAE,EAAE,IAAI,OAAO,EAAE,CAAC;gBAC9D,CAAC,CAAC,SAAS,CAAC,OAAO,EAAE,IAAI,OAAO,EAAE,CAAC,CAAC;SACvC;QACD,OAAO,IAAI,OAAO,MAAM,OAAO,EAAE,CAAC;IACpC,CAAC,CAAC;SACD,IAAI,CAAC,IAAI,CAAC,CAAC;IACd,OAAO,GAAG,iCAAiC,KAAK,+BAA+B,GAC7E,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAC/B,EAAE,CAAC;AACL,CAAC;AAgBD;;;;;;;;GAQG;AACH,MAAqB,SAAS;IAO5B;;;;;OAKG;IACH,YAAY,EAAE,OAAO,EAAuB;QAC1C,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QACpB,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC,sBAAU,CAAC,EAAE,EAAE,EAAE,CAAC;QACrC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC1B,CAAC;IAED;;;;;;;;;;;;;;OAcG;IACH,UAAU,CAAC,EAAE,UAAU,GAAG,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAqB;QACxE,IAAI,CAAC,OAAO,EAAE;YACZ,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;SACrC;aAAM,IAAI,gBAAM,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,IAAI,EAAE;YACzC,MAAM,IAAI,KAAK,CAAC,gCAAgC,OAAO,GAAG,CAAC,CAAC;SAC7D;aAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;YACjC,MAAM,IAAI,KAAK,CAAC,4BAA4B,OAAO,GAAG,CAAC,CAAC;SACzD;QAED,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC;QAC5B,MAAM,UAAU,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;QAC7C,IAAI,UAAU,EAAE;YACd,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;SACpC;aAAM;YACL,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SACjC;IACH,CAAC;IAED;;;;;;;;;;;;OAYG;IACH,SAAS,CAAC,EACR,UAAU,GAAG,IAAI,EACjB,QAAQ,EACR,WAAW,EACX,OAAO,GACU;QACjB,IAAI,CAAC,QAAQ,EAAE;YACb,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;SACtC;aAAM,IAAI,CAAC,mCAAuB,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;YACtD,MAAM,IAAI,KAAK,CAAC,2BAA2B,QAAQ,GAAG,CAAC,CAAC;SACzD;aAAM,IAAI,CAAC,WAAW,EAAE;YACvB,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;SACzC;aAAM,IAAI,OAAO,KAAK,SAAS,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;YAC3D,MAAM,IAAI,KAAK,CAAC,8CAA8C,OAAO,GAAG,CAAC,CAAC;SAC3E;QAED,MAAM,OAAO,GAAG,OAAO;YACrB,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC;YACxB,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,sBAAU,CAAC,CAAC;QAE9B,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;YACtB,OAAO,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC;SACxB;QACD,IAAI,UAAU,EAAE;YACd,oEAAoE;YACpE,OAAO,CAAC,QAAQ,CAAE,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;SACzC;aAAM;YACL,oEAAoE;YACpE,OAAO,CAAC,QAAQ,CAAE,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SACtC;IACH,CAAC;IAED;;;;;;;OAOG;IACH,iCAAiC,CAAC,OAAgB;QAChD,MAAM,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAC9C,IAAI,CAAC,cAAc,EAAE;YACnB,MAAM,IAAI,KAAK,CAAC,8CAA8C,OAAO,GAAG,CAAC,CAAC;SAC3E;QAED,MAAM,iBAAiB,GAAG,IAAI,CAAC,QAAQ,CAAC,sBAAU,CAAC,CAAC;QAEpD,KAAK,MAAM,QAAQ,IAAI,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAqB,EAAE;YACzE,IAAI,cAAc,CAAC,QAAQ,CAAC,EAAE;gBAC5B,cAAc,CAAC,QAAQ,CAAC,GAAG;oBACzB,GAAI,iBAAiB,CAAC,QAAQ,CAAc;oBAC5C,GAAI,cAAc,CAAC,QAAQ,CAAc;iBAC1C,CAAC;aACH;iBAAM;gBACL,cAAc,CAAC,QAAQ,CAAC,GAAG,iBAAiB,CAAC,QAAQ,CAAC,CAAC;aACxD;SACF;QACD,IAAI,CAAC,QAAQ,CAAC,sBAAU,CAAC,GAAG,EAAE,CAAC;IACjC,CAAC;IAED;;;;OAIG;IACH,WAAW;QACT,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAED;;;;;OAKG;IACH,UAAU,CAAC,OAAgB;QACzB,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC,IAAI,CAC5B,CAAC,EAAE,OAAO,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC,QAAQ,KAAK,OAAO,CAChD,CAAC;IACJ,CAAC;IAED;;;;;;OAMG;IACH,qBAAqB,CAAC,OAAgB;QACpC,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QACzC,IAAI,CAAC,OAAO,EAAE;YACZ,MAAM,IAAI,KAAK,CAAC,8CAA8C,OAAO,GAAG,CAAC,CAAC;SAC3E;QACD,MAAM,cAAc,GAAG,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;QACvD,OAAO,gBAAgB,CAAC,OAAO,EAAE,cAAc,EAAE,OAAO,CAAC,CAAC;IAC5D,CAAC;IAED;;;;;OAKG;IACH,iBAAiB,CAAC,OAAgB;QAChC,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IAChC,CAAC;IAED;;;;OAIG;IACH,oBAAoB;QAClB,OAAO,IAAI,CAAC,QAAQ,CAAC,sBAAU,CAAC,CAAC;IACnC,CAAC;IAED;;;;OAIG;IACH,QAAQ;QACN,OAAO,GAAG,cAAc;EAC1B,oBAAoB;;EAEpB,iBAAiB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC;;EAEhD,iCAAiC,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC;IACnE,CAAC;CACF;AAnMD,4BAmMC","sourcesContent":["import semver from 'semver';\n\nimport {\n  ChangeCategory,\n  orderedChangeCategories,\n  unreleased,\n  Version,\n} from './constants';\n\nconst changelogTitle = '# Changelog';\nconst changelogDescription = `All notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).`;\n\ninterface ReleaseMetadata {\n  /**\n   * The version of the current release.\n   */\n  version: Version;\n\n  /**\n   * An ISO-8601 formatted date, representing the\n   * release date.\n   */\n  date?: string;\n\n  /**\n   * The status of the release (e.g. 'WITHDRAWN', 'DEPRECATED')\n   */\n  status?: string;\n}\n\n/**\n * Release changes, organized by category.\n */\ntype ReleaseChanges = Partial<Record<ChangeCategory, string[]>>;\n\n/**\n * Changelog changes, organized by release and by category.\n */\ntype ChangelogChanges = Record<Version, ReleaseChanges> & {\n  [unreleased]: ReleaseChanges;\n};\n\n// Stringification helpers\n\nfunction stringifyCategory(category: ChangeCategory, changes: string[]) {\n  const categoryHeader = `### ${category}`;\n  if (changes.length === 0) {\n    return categoryHeader;\n  }\n  const changeDescriptions = changes\n    .map((description) => `- ${description}`)\n    .join('\\n');\n  return `${categoryHeader}\\n${changeDescriptions}`;\n}\n\nfunction stringifyRelease(\n  version: Version | typeof unreleased,\n  categories: ReleaseChanges,\n  { date, status }: Partial<ReleaseMetadata> = {},\n) {\n  const releaseHeader = `## [${version}]${date ? ` - ${date}` : ''}${\n    status ? ` [${status}]` : ''\n  }`;\n  const categorizedChanges = orderedChangeCategories\n    .filter((category) => categories[category])\n    .map((category) => {\n      const changes = categories[category] as string[];\n      return stringifyCategory(category, changes);\n    })\n    .join('\\n\\n');\n  if (categorizedChanges === '') {\n    return releaseHeader;\n  }\n  return `${releaseHeader}\\n${categorizedChanges}`;\n}\n\nfunction stringifyReleases(\n  releases: ReleaseMetadata[],\n  changes: ChangelogChanges,\n) {\n  const stringifiedUnreleased = stringifyRelease(\n    unreleased,\n    changes[unreleased],\n  );\n  const stringifiedReleases = releases.map(({ version, date, status }) => {\n    const categories = changes[version];\n    return stringifyRelease(version, categories, { date, status });\n  });\n\n  return [stringifiedUnreleased, ...stringifiedReleases].join('\\n\\n');\n}\n\nfunction withTrailingSlash(url: string) {\n  return url.endsWith('/') ? url : `${url}/`;\n}\n\nfunction getCompareUrl(repoUrl: string, firstRef: string, secondRef: string) {\n  return `${withTrailingSlash(repoUrl)}compare/${firstRef}...${secondRef}`;\n}\n\nfunction getTagUrl(repoUrl: string, tag: string) {\n  return `${withTrailingSlash(repoUrl)}releases/tag/${tag}`;\n}\n\nfunction stringifyLinkReferenceDefinitions(\n  repoUrl: string,\n  releases: ReleaseMetadata[],\n) {\n  // A list of release versions in descending SemVer order\n  const descendingSemverVersions = releases\n    .map(({ version }) => version)\n    .sort((a: Version, b: Version) => {\n      return semver.gt(a, b) ? -1 : 1;\n    });\n  const latestSemverVersion = descendingSemverVersions[0];\n  // A list of release versions in chronological order\n  const chronologicalVersions = releases.map(({ version }) => version);\n  const hasReleases = chronologicalVersions.length > 0;\n\n  // The \"Unreleased\" section represents all changes made since the *highest*\n  // release, not the most recent release. This is to accomodate patch releases\n  // of older versions that don't represent the latest set of changes.\n  //\n  // For example, if a library has a v2.0.0 but the v1.0.0 release needed a\n  // security update, the v1.0.1 release would then be the most recent, but the\n  // range of unreleased changes would remain `v2.0.0...HEAD`.\n  //\n  // If there have not been any releases yet, the repo URL is used directly as\n  // the link definition.\n  const unreleasedLinkReferenceDefinition = `[${unreleased}]: ${\n    hasReleases\n      ? getCompareUrl(repoUrl, `v${latestSemverVersion}`, 'HEAD')\n      : withTrailingSlash(repoUrl)\n  }`;\n\n  // The \"previous\" release that should be used for comparison is not always\n  // the most recent release chronologically. The _highest_ version that is\n  // lower than the current release is used as the previous release, so that\n  // patch releases on older releases can be accomodated.\n  const releaseLinkReferenceDefinitions = releases\n    .map(({ version }) => {\n      let diffUrl;\n      if (version === chronologicalVersions[chronologicalVersions.length - 1]) {\n        diffUrl = getTagUrl(repoUrl, `v${version}`);\n      } else {\n        const versionIndex = chronologicalVersions.indexOf(version);\n        const previousVersion = chronologicalVersions\n          .slice(versionIndex)\n          .find((releaseVersion: Version) => {\n            return semver.gt(version, releaseVersion);\n          });\n        diffUrl = previousVersion\n          ? getCompareUrl(repoUrl, `v${previousVersion}`, `v${version}`)\n          : getTagUrl(repoUrl, `v${version}`);\n      }\n      return `[${version}]: ${diffUrl}`;\n    })\n    .join('\\n');\n  return `${unreleasedLinkReferenceDefinition}\\n${releaseLinkReferenceDefinitions}${\n    releases.length > 0 ? '\\n' : ''\n  }`;\n}\n\ninterface AddReleaseOptions {\n  addToStart?: boolean;\n  date?: string;\n  status?: string;\n  version: Version;\n}\n\ninterface AddChangeOptions {\n  addToStart?: boolean;\n  category: ChangeCategory;\n  description: string;\n  version?: Version;\n}\n\n/**\n * A changelog that complies with the\n * [\"Keep a Changelog\" v1.1.0 guidelines](https://keepachangelog.com/en/1.0.0/).\n *\n * This changelog starts out completely empty, and allows new releases and\n * changes to be added such that the changelog remains compliant at all times.\n * This can be used to help validate the contents of a changelog, normalize\n * formatting, update a changelog, or build one from scratch.\n */\nexport default class Changelog {\n  private _releases: ReleaseMetadata[];\n\n  private _changes: ChangelogChanges;\n\n  private _repoUrl: string;\n\n  /**\n   * Construct an empty changelog\n   *\n   * @param options\n   * @param options.repoUrl - The GitHub repository URL for the current project\n   */\n  constructor({ repoUrl }: { repoUrl: string }) {\n    this._releases = [];\n    this._changes = { [unreleased]: {} };\n    this._repoUrl = repoUrl;\n  }\n\n  /**\n   * Add a release to the changelog.\n   *\n   * @param options\n   * @param options.addToStart - Determines whether the change is added to the\n   * top or bottom of the list of changes in this category. This defaults to\n   * `true` because changes should be in reverse-chronological order. This\n   * should be set to `false` when parsing a changelog top-to-bottom.\n   * @param options.date - An ISO-8601 formatted date, representing the release\n   * date.\n   * @param options.status - The status of the release (e.g. 'WITHDRAWN',\n   * 'DEPRECATED')\n   * @param options.version - The version of the current release, which should\n   * be a [SemVer](https://semver.org/spec/v2.0.0.html)-compatible version.\n   */\n  addRelease({ addToStart = true, date, status, version }: AddReleaseOptions) {\n    if (!version) {\n      throw new Error('Version required');\n    } else if (semver.valid(version) === null) {\n      throw new Error(`Not a valid semver version: '${version}'`);\n    } else if (this._changes[version]) {\n      throw new Error(`Release already exists: '${version}'`);\n    }\n\n    this._changes[version] = {};\n    const newRelease = { version, date, status };\n    if (addToStart) {\n      this._releases.unshift(newRelease);\n    } else {\n      this._releases.push(newRelease);\n    }\n  }\n\n  /**\n   * Add a change to the changelog.\n   *\n   * @param options\n   * @param options.addToStart - Determines whether the change is added to the\n   * top or bottom of the list of changes in this category. This defaults to\n   * `true` because changes should be in reverse-chronological order. This\n   * should be set to `false` when parsing a changelog top-to-bottom.\n   * @param options.category - The category of the change.\n   * @param options.description - The description of the change.\n   * @param options.version - The version this change was released in. If this\n   * is not given, the change is assumed to be unreleased.\n   */\n  addChange({\n    addToStart = true,\n    category,\n    description,\n    version,\n  }: AddChangeOptions) {\n    if (!category) {\n      throw new Error('Category required');\n    } else if (!orderedChangeCategories.includes(category)) {\n      throw new Error(`Unrecognized category: '${category}'`);\n    } else if (!description) {\n      throw new Error('Description required');\n    } else if (version !== undefined && !this._changes[version]) {\n      throw new Error(`Specified release version does not exist: '${version}'`);\n    }\n\n    const release = version\n      ? this._changes[version]\n      : this._changes[unreleased];\n\n    if (!release[category]) {\n      release[category] = [];\n    }\n    if (addToStart) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      release[category]!.unshift(description);\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      release[category]!.push(description);\n    }\n  }\n\n  /**\n   * Migrate all unreleased changes to a release section.\n   *\n   * Changes are migrated in their existing categories, and placed above any\n   * pre-existing changes in that category.\n   *\n   * @param version - The release version to migrate unreleased changes to.\n   */\n  migrateUnreleasedChangesToRelease(version: Version) {\n    const releaseChanges = this._changes[version];\n    if (!releaseChanges) {\n      throw new Error(`Specified release version does not exist: '${version}'`);\n    }\n\n    const unreleasedChanges = this._changes[unreleased];\n\n    for (const category of Object.keys(unreleasedChanges) as ChangeCategory[]) {\n      if (releaseChanges[category]) {\n        releaseChanges[category] = [\n          ...(unreleasedChanges[category] as string[]),\n          ...(releaseChanges[category] as string[]),\n        ];\n      } else {\n        releaseChanges[category] = unreleasedChanges[category];\n      }\n    }\n    this._changes[unreleased] = {};\n  }\n\n  /**\n   * Gets the metadata for all releases.\n   *\n   * @returns The metadata for each release.\n   */\n  getReleases() {\n    return this._releases;\n  }\n\n  /**\n   * Gets the release of the given version.\n   *\n   * @param version - The version of the release to retrieve.\n   * @returns The specified release, or undefined if no such release exists.\n   */\n  getRelease(version: Version) {\n    return this.getReleases().find(\n      ({ version: _version }) => _version === version,\n    );\n  }\n\n  /**\n   * Gets the stringified release of the given version.\n   * Throws an error if no such release exists.\n   *\n   * @param version - The version of the release to stringify.\n   * @returns The stringified release, as it appears in the changelog.\n   */\n  getStringifiedRelease(version: Version) {\n    const release = this.getRelease(version);\n    if (!release) {\n      throw new Error(`Specified release version does not exist: '${version}'`);\n    }\n    const releaseChanges = this.getReleaseChanges(version);\n    return stringifyRelease(version, releaseChanges, release);\n  }\n\n  /**\n   * Gets the changes in the given release, organized by category.\n   *\n   * @param version - The version of the release being retrieved.\n   * @returns The changes included in the given released.\n   */\n  getReleaseChanges(version: Version) {\n    return this._changes[version];\n  }\n\n  /**\n   * Gets all changes that have not yet been released\n   *\n   * @returns The changes that have not yet been released.\n   */\n  getUnreleasedChanges() {\n    return this._changes[unreleased];\n  }\n\n  /**\n   * The stringified changelog, formatted according to [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).\n   *\n   * @returns The stringified changelog.\n   */\n  toString() {\n    return `${changelogTitle}\n${changelogDescription}\n\n${stringifyReleases(this._releases, this._changes)}\n\n${stringifyLinkReferenceDefinitions(this._repoUrl, this._releases)}`;\n  }\n}\n"]}