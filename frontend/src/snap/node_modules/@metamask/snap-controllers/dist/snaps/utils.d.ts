import { Json } from '@metamask/utils';
import { NpmSnapPackageJson, SnapManifest } from './json-schemas';
export declare enum SnapIdPrefixes {
    npm = "npm:",
    local = "local:"
}
export declare enum NpmSnapFileNames {
    PackageJson = "package.json",
    Manifest = "snap.manifest.json"
}
export declare const LOCALHOST_HOSTNAMES: Set<string>;
export declare const DEFAULT_NPM_REGISTRY = "https://registry.npmjs.org";
export declare const DEFAULT_REQUESTED_SNAP_VERSION = "*";
export declare const PROPOSED_NAME_REGEX: RegExp;
/**
 * Calculates the Base64-econded SHA-256 digest of a Snap source code string.
 *
 * @param sourceCode - The UTF-8 string source code of a Snap.
 * @returns The Base64-encoded SHA-256 digest of the source code.
 */
export declare function getSnapSourceShasum(sourceCode: string): string;
export declare type ValidatedSnapId = `local:${string}` | `npm:${string}`;
/**
 * An object for storing parsed but unvalidated Snap file contents.
 */
export declare type UnvalidatedSnapFiles = {
    manifest?: Json;
    packageJson?: Json;
    sourceCode?: string;
    svgIcon?: string;
};
/**
 * An object for storing the contents of Snap files that have passed JSON
 * Schema validation, or are non-empty if they are strings.
 */
export declare type SnapFiles = {
    manifest: SnapManifest;
    packageJson: NpmSnapPackageJson;
    sourceCode: string;
    svgIcon?: string;
};
/**
 * Fetches a Snap from the public npm registry.
 *
 * @param packageName - The name of the package whose tarball to fetch.
 * @param versionRange - The SemVer range of the package to fetch. The highest
 * version satisfying the range will be fetched.
 * @param registryUrl - The URL of the npm registry to fetch from.
 * @param fetchFunction - The fetch function to use. Defaults to the global
 * {@link fetch}. Useful for Node.js compatibility.
 * @returns A tuple of the Snap manifest object and the Snap source code.
 */
export declare function fetchNpmSnap(packageName: string, versionRange: string, registryUrl?: string, fetchFunction?: typeof fetch): Promise<SnapFiles>;
/**
 * Snap validation failure reason codes that are programmatically fixable
 * if validation occurs during development.
 */
export declare enum SnapValidationFailureReason {
    NameMismatch = "\"name\" field mismatch",
    VersionMismatch = "\"version\" field mismatch",
    RepositoryMismatch = "\"repository\" field mismatch",
    ShasumMismatch = "\"shasum\" field mismatch"
}
/**
 * An error indicating that a Snap validation failure is programmatically
 * fixable during development.
 */
export declare class ProgrammaticallyFixableSnapError extends Error {
    reason: SnapValidationFailureReason;
    constructor(message: string, reason: SnapValidationFailureReason);
}
/**
 * Validates the files extracted from an npm Snap package tarball by ensuring
 * that they're non-empty and that the Json files match their respective schemas
 * and the Snaps publishing specification.
 *
 * @param snapFiles - The object containing the expected Snap file contents,
 * if any.
 * @param errorPrefix - The prefix of the error message.
 * @returns A tuple of the Snap manifest object and the Snap source code.
 */
export declare function validateNpmSnap(snapFiles: UnvalidatedSnapFiles, errorPrefix: `${string}: `): SnapFiles;
/**
 * Validates the fields of an npm Snap manifest that has already passed JSON
 * Schema validation.
 *
 * @param snapFiles - The relevant snap files to validate.
 * @param snapFiles.manifest - The npm Snap manifest to validate.
 * @param snapFiles.packageJson - The npm Snap's `package.json`.
 * @param snapFiles.sourceCode - The Snap's source code.
 * @param errorPrefix - The prefix for error messages.
 * @returns A tuple containing the validated snap manifest, snap source code,
 * and `package.json`.
 */
export declare function validateNpmSnapManifest({ manifest, packageJson, sourceCode }: SnapFiles, errorPrefix: `${string}: `): [SnapManifest, string, NpmSnapPackageJson];
/**
 * Checks whether a SemVer version is greater than another.
 *
 * @param version1 - The left-hand version.
 * @param version2 - The right-hand version.
 * @returns `version1 > version2`.
 */
export declare function gtVersion(version1: string, version2: string): boolean;
/**
 * Returns whether a SemVer version satisfies a SemVer range.
 *
 * @param version - The SemVer version to check.
 * @param versionRange - The SemVer version range to check against.
 * @returns Whether the version satisfied the version range.
 */
export declare function satifiesVersionRange(version: string, versionRange: string): boolean;
/**
 * Return the highest version in the list that satisfies the range, or `null` if
 * none of them do. For the satisfaction check, pre-release versions will only
 * be checked if no satisfactory non-prerelease version is found first.
 *
 * @param versions - The list of version to check.
 * @param versionRange - The SemVer version range to check against.
 * @returns The highest version in the list that satisfies the range,
 * or `null` if none of them do.
 */
export declare function getTargetVersion(versions: string[], versionRange: string): string | null;
/**
 * Checks whether the `source.shasum` property of a Snap manifest matches the
 * shasum of a snap source code string.
 *
 * @param manifest - The manifest whose shasum to validate.
 * @param sourceCode - The source code of the snap.
 * @param errorMessage - The error message to throw if validation fails.
 */
export declare function validateSnapShasum(manifest: SnapManifest, sourceCode: string, errorMessage?: string): void;
/**
 * Strips the leading `./` from a string, or does nothing if no string is
 * provided.
 *
 * @param pathString - The path string to normalize.
 * @returns The specified path without a `./` prefix, or `undefined` if no
 * string was provided.
 */
export declare function stripDotSlash(pathString?: string): string | undefined;
/**
 * Parse a version received by some subject attempting to access a snap.
 *
 * @param version - The received version value.
 * @returns `*` if the version is `undefined` or `latest", otherwise returns
 * the specified version.
 */
export declare function resolveVersion(version?: Json): Json;
/**
 * Checks whether a SemVer version range is valid.
 *
 * @param versionRange - A potential version range.
 * @returns `true` if the version range is valid, and `false` otherwise.
 */
export declare function isValidSnapVersionRange(versionRange: unknown): versionRange is string;
/**
 * Extracts the snap prefix from a snap ID.
 *
 * @param snapId - The snap ID to extract the prefix from.
 * @returns The snap prefix from a snap id, e.g. `npm:`.
 */
export declare function getSnapPrefix(snapId: string): SnapIdPrefixes;
export declare const SNAP_PREFIX = "wallet_snap_";
/**
 * Computes the permission name of a snap from its snap ID.
 *
 * @param snapId - The snap ID.
 * @returns The permission name corresponding to the given snap ID.
 */
export declare function getSnapPermissionName(snapId: string): string;
