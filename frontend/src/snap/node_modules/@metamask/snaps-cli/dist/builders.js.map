{"version":3,"file":"builders.js","sourceRoot":"","sources":["../src/builders.ts"],"names":[],"mappings":"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","sourcesContent":["import { Options } from 'yargs';\n\nexport type SnapsCliBuilders = {\n  readonly bundle: Readonly<Options>;\n  readonly dist: Readonly<Options>;\n  readonly eval: Readonly<Options>;\n  readonly manifest: Readonly<Options>;\n  readonly outfileName: Readonly<Options>;\n  readonly port: Readonly<Options>;\n  readonly root: Readonly<Options>;\n  readonly sourceMaps: Readonly<Options>;\n  readonly src: Readonly<Options>;\n  readonly stripComments: Readonly<Options>;\n  readonly suppressWarnings: Readonly<Options>;\n  readonly transpilationMode: Readonly<Options>;\n  readonly transformHtmlComments: Readonly<Options>;\n  readonly depsToTranspile: Readonly<Options>;\n  readonly verboseErrors: Readonly<Options>;\n  readonly writeManifest: Readonly<Options>;\n  readonly serve: Readonly<Options>;\n  readonly template: Readonly<Options>;\n};\n\nexport enum TranspilationModes {\n  localAndDeps = 'localAndDeps',\n  localOnly = 'localOnly',\n  none = 'none',\n}\n\nexport enum TemplateType {\n  TypeScript = 'typescript',\n  JavaScript = 'javascript',\n}\n\nconst builders: SnapsCliBuilders = {\n  bundle: {\n    alias: 'b',\n    describe: 'Snap bundle file',\n    type: 'string',\n    demandOption: true,\n    normalize: true,\n    default: 'dist/bundle.js',\n  },\n\n  dist: {\n    alias: 'd',\n    describe: 'Output directory',\n    type: 'string',\n    demandOption: true,\n    normalize: true,\n    default: 'dist',\n  },\n\n  eval: {\n    alias: 'e',\n    describe: 'Attempt to evaluate Snap bundle in SES',\n    type: 'boolean',\n    demandOption: false,\n    default: true,\n  },\n\n  manifest: {\n    alias: 'm',\n    describe: 'Validate snap.manifest.json',\n    type: 'boolean',\n    demandOption: false,\n    default: true,\n  },\n\n  port: {\n    alias: 'p',\n    describe: 'Local server port for testing',\n    type: 'number',\n    demandOption: true,\n    default: 8081,\n    coerce: (arg: unknown) => {\n      const port = Number.parseInt(String(arg), 10);\n      if (Number.isNaN(port)) {\n        throw new Error(`Invalid port: ${arg}`);\n      }\n      return port;\n    },\n  },\n\n  outfileName: {\n    alias: 'n',\n    describe: 'Output file name',\n    type: 'string',\n    demandOption: false,\n    default: 'bundle.js',\n  },\n\n  root: {\n    alias: 'r',\n    describe: 'Server root directory',\n    type: 'string',\n    demandOption: true,\n    normalize: true,\n    default: '.',\n  },\n\n  sourceMaps: {\n    describe: 'Whether builds include sourcemaps',\n    type: 'boolean',\n    demandOption: false,\n    default: false,\n  },\n\n  src: {\n    alias: 's',\n    describe: 'Source file',\n    type: 'string',\n    demandOption: true,\n    normalize: true,\n    default: 'src/index.js',\n  },\n\n  stripComments: {\n    alias: 'strip',\n    describe: 'Whether to remove code comments from the build output',\n    type: 'boolean',\n    demandOption: false,\n    default: true,\n  },\n\n  suppressWarnings: {\n    type: 'boolean',\n    describe: 'Whether to suppress warnings',\n    demandOption: false,\n    default: false,\n  },\n\n  transpilationMode: {\n    type: 'string',\n    describe:\n      'Whether to use Babel to transpile all source code (including dependencies), local source code only, or nothing.',\n    demandOption: false,\n    default: TranspilationModes.localOnly,\n    choices: Object.values(TranspilationModes),\n  },\n\n  transformHtmlComments: {\n    type: 'boolean',\n    describe:\n      'Whether to break up HTML comment tokens wherever they appear in your source code.',\n    demandOption: true,\n    default: true,\n  },\n\n  depsToTranspile: {\n    type: 'array',\n    describe: 'Transpile only the listed dependencies.',\n    demandOption: false,\n  },\n\n  verboseErrors: {\n    type: 'boolean',\n    describe: 'Display original errors',\n    demandOption: false,\n    default: true,\n  },\n\n  writeManifest: {\n    describe: 'Make necessary changes to the Snap manifest file',\n    type: 'boolean',\n    demandOption: false,\n    default: true,\n  },\n\n  serve: {\n    describe: 'Serve Snap file(s) locally for testing',\n    type: 'boolean',\n    demandOption: false,\n    default: true,\n  },\n\n  template: {\n    alias: 't',\n    describe: 'Specify which template to use (TypeScript or JavaScript)',\n    type: 'string',\n    demandOption: false,\n    default: TemplateType.TypeScript,\n    choices: Object.values(TemplateType),\n  },\n};\n\nexport default builders;\n"]}