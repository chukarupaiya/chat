{"version":3,"file":"workerEval.js","sourceRoot":"","sources":["../../../src/cmds/eval/workerEval.ts"],"names":[],"mappings":";;;;;;AAAA,iDAAqC;AACrC,gDAA6B;AAE7B;;;;;;GAMG;AACH,SAAgB,UAAU,CAAC,UAAkB;IAC3C,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;QAC7B,IAAA,oBAAI,EAAC,iBAAiB,EAAE,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,QAAgB,EAAE,EAAE;YACtE,IAAI,QAAQ,KAAK,CAAC,EAAE;gBAClB,OAAO,CAAC,IAAI,CAAC,CAAC;aACf;iBAAM;gBACL,MAAM,IAAI,KAAK,CAAC,mCAAmC,QAAQ,EAAE,CAAC,CAAC;aAChE;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC;AAVD,gCAUC;AAED;;;;GAIG;AACH,SAAS,iBAAiB;IACxB,OAAO,cAAS,CAAC,IAAI,CAAC,SAAS,EAAE,gBAAgB,CAAC,CAAC;AACrD,CAAC","sourcesContent":["import { fork } from 'child_process';\nimport pathUtils from 'path';\n\n/**\n * Spawn a new worker thread to run the provided bundle in.\n *\n * @param bundlePath - The path to the bundle to run.\n * @returns `null` if the worker ran successfully.\n * @throws If the worker failed to run successfully.\n */\nexport function workerEval(bundlePath: string): Promise<null> {\n  return new Promise((resolve) => {\n    fork(getEvalWorkerPath(), [bundlePath]).on('exit', (exitCode: number) => {\n      if (exitCode === 0) {\n        resolve(null);\n      } else {\n        throw new Error(`Worker exited abnormally! Code: ${exitCode}`);\n      }\n    });\n  });\n}\n\n/**\n * Get the path to the eval worker file.\n *\n * @returns The path to the eval worker file.\n */\nfunction getEvalWorkerPath(): string {\n  return pathUtils.join(__dirname, 'eval-worker.js');\n}\n"]}