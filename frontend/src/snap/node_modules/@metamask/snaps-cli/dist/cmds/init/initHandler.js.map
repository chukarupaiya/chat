{"version":3,"file":"initHandler.js","sourceRoot":"","sources":["../../../src/cmds/init/initHandler.ts"],"names":[],"mappings":"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","sourcesContent":["import { promises as fs } from 'fs';\nimport pathUtils from 'path';\nimport {\n  getSnapSourceShasum,\n  NpmSnapFileNames,\n  SnapManifest,\n} from '@metamask/snap-controllers';\nimport mkdirp from 'mkdirp';\nimport { YargsArgs } from '../../types/yargs';\nimport {\n  closePrompt,\n  CONFIG_FILE,\n  logError,\n  readJsonFile,\n  SnapConfig,\n} from '../../utils';\nimport { getWritableManifest } from '../manifest/manifestHandler';\nimport { TemplateType } from '../../builders';\nimport template from './init-template.json';\nimport {\n  asyncPackageInit,\n  buildSnapManifest,\n  isTemplateTypescript,\n  prepareWorkingDirectory,\n} from './initUtils';\n\n/**\n * Creates a new snap package, based on one of the provided templates. This\n * creates all the necessary files, like `package.json`, `snap.config.js`, etc.\n * to start developing a snap.\n *\n * @param argv - The Yargs arguments object.\n * @returns The Yargs arguments augmented with the new `dist`, `outfileName` and\n * `src` properties.\n * @throws If initialization of the snap package failed.\n */\nexport async function initHandler(argv: YargsArgs) {\n  console.log(`MetaMask Snaps: Initialize\\n`);\n\n  const packageJson = await asyncPackageInit(argv);\n\n  await prepareWorkingDirectory();\n\n  console.log(`\\nInit: Building '${NpmSnapFileNames.Manifest}'...\\n`);\n\n  const [snapManifest, _newArgs] = await buildSnapManifest(argv, packageJson);\n\n  const newArgs = Object.keys(_newArgs)\n    .sort()\n    .reduce((sorted, key) => {\n      sorted[key] = _newArgs[key as keyof typeof _newArgs];\n      return sorted;\n    }, {} as YargsArgs);\n\n  const isTypeScript = isTemplateTypescript(argv.template as TemplateType);\n  try {\n    await fs.writeFile(\n      NpmSnapFileNames.Manifest,\n      `${JSON.stringify(snapManifest, null, 2)}\\n`,\n    );\n  } catch (err) {\n    logError(\n      `Init Error: Failed to write '${NpmSnapFileNames.Manifest}'.`,\n      err,\n    );\n    throw err;\n  }\n\n  console.log(`\\nInit: Created '${NpmSnapFileNames.Manifest}'.`);\n\n  // Write main .js entry file\n  const { src } = newArgs;\n\n  try {\n    if (pathUtils.basename(src) !== src) {\n      await mkdirp(pathUtils.dirname(src));\n    }\n\n    await fs.writeFile(\n      src,\n      isTypeScript ? template.typescriptSource : template.source,\n    );\n\n    console.log(`Init: Created '${src}'.`);\n  } catch (err) {\n    logError(`Init Error: Failed to write '${src}'.`, err);\n    throw err;\n  }\n\n  // Write index.html\n  try {\n    await fs.writeFile(\n      'index.html',\n      isTypeScript ? template.typescriptHtml : template.html,\n    );\n\n    console.log(`Init: Created 'index.html'.`);\n  } catch (err) {\n    logError(`Init Error: Failed to write 'index.html'.`, err);\n    throw err;\n  }\n\n  // Write tsconfig.json\n  if (isTypeScript) {\n    try {\n      await fs.writeFile('tsconfig.json', template.typescriptConfig);\n      console.log(`Init: Created 'tsconfig.json'.`);\n    } catch (err) {\n      logError(`Init Error: Failed to write 'tsconfig.json'.`, err);\n      throw err;\n    }\n  }\n\n  // Write config file\n  try {\n    const defaultConfig: SnapConfig = {\n      cliOptions: newArgs,\n    };\n    const defaultConfigFile = `module.exports = ${JSON.stringify(\n      defaultConfig,\n      null,\n      2,\n    )}\n    `;\n    await fs.writeFile(CONFIG_FILE, defaultConfigFile);\n    console.log(`Init: Wrote '${CONFIG_FILE}' config file`);\n  } catch (err) {\n    logError(`Init Error: Failed to write '${CONFIG_FILE}'.`, err);\n    throw err;\n  }\n\n  // Write icon\n  const iconPath = 'images/icon.svg';\n  try {\n    if (pathUtils.basename(iconPath) !== iconPath) {\n      await mkdirp(pathUtils.dirname(iconPath));\n    }\n    await fs.writeFile(iconPath, template.icon);\n\n    console.log(`Init: Created '${iconPath}'.`);\n  } catch (err) {\n    logError(`Init Error: Failed to write '${iconPath}'.`, err);\n    throw err;\n  }\n\n  closePrompt();\n  return { ...argv, ...newArgs };\n}\n\n/**\n * This updates the Snap shasum value of the manifest after building the Snap\n * during the init command.\n */\nexport async function updateManifestShasum() {\n  const manifest = (await readJsonFile(\n    NpmSnapFileNames.Manifest,\n  )) as SnapManifest;\n\n  const bundleContents = await fs.readFile(\n    manifest.source.location.npm.filePath,\n    'utf8',\n  );\n\n  manifest.source.shasum = getSnapSourceShasum(bundleContents);\n  await fs.writeFile(\n    NpmSnapFileNames.Manifest,\n    JSON.stringify(getWritableManifest(manifest), null, 2),\n  );\n}\n"]}