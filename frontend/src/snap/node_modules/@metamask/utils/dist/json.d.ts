/**
 * Any JSON-compatible value.
 */
export declare type Json = null | boolean | number | string | Json[] | {
    [prop: string]: Json;
};
/**
 * Type guard for {@link Json}.
 *
 * @param value - The value to check.
 * @returns Whether the value is valid JSON.
 */
export declare function isValidJson(value: unknown): value is Json;
/**
 * The string '2.0'.
 */
export declare const jsonrpc2: "2.0";
/**
 * A String specifying the version of the JSON-RPC protocol.
 * MUST be exactly "2.0".
 */
export declare type JsonRpcVersion2 = typeof jsonrpc2;
/**
 * An identifier established by the Client that MUST contain a String, Number,
 * or NULL value if included. If it is not included it is assumed to be a
 * notification. The value SHOULD normally not be Null and Numbers SHOULD
 * NOT contain fractional parts.
 */
export declare type JsonRpcId = number | string | null;
/**
 * A JSON-RPC error object.
 */
export declare type JsonRpcError = {
    code: number;
    message: string;
    data?: unknown;
    stack?: string;
};
/**
 * A JSON-RPC request object.
 *
 * @template Params - The type of the params.
 */
export declare type JsonRpcRequest<Params> = {
    id: JsonRpcId;
    jsonrpc: JsonRpcVersion2;
    method: string;
    params?: Params;
};
/**
 * A JSON-RPC notification object.
 *
 * @template Params - The type of the params.
 */
export declare type JsonRpcNotification<Params> = {
    jsonrpc: JsonRpcVersion2;
    method: string;
    params?: Params;
};
/**
 * Type guard to narrow a JSON-RPC request or notification object to a
 * notification.
 *
 * @param requestOrNotification - The JSON-RPC request or notification to check.
 * @returns Whether the specified JSON-RPC message is a notification.
 */
export declare function isJsonRpcNotification<T>(requestOrNotification: JsonRpcNotification<T> | JsonRpcRequest<T>): requestOrNotification is JsonRpcNotification<T>;
/**
 * Assertion type guard to narrow a JSON-RPC request or notification object to a
 * notification.
 *
 * @param requestOrNotification - The JSON-RPC request or notification to check.
 */
export declare function assertIsJsonRpcNotification<T>(requestOrNotification: JsonRpcNotification<T> | JsonRpcRequest<T>): asserts requestOrNotification is JsonRpcNotification<T>;
/**
 * Type guard to narrow a JSON-RPC request or notification object to a request.
 *
 * @param requestOrNotification - The JSON-RPC request or notification to check.
 * @returns Whether the specified JSON-RPC message is a request.
 */
export declare function isJsonRpcRequest<T>(requestOrNotification: JsonRpcNotification<T> | JsonRpcRequest<T>): requestOrNotification is JsonRpcRequest<T>;
/**
 * Assertion type guard to narrow a JSON-RPC request or notification object to a
 * request.
 *
 * @param requestOrNotification - The JSON-RPC request or notification to check.
 */
export declare function assertIsJsonRpcRequest<T>(requestOrNotification: JsonRpcNotification<T> | JsonRpcRequest<T>): asserts requestOrNotification is JsonRpcRequest<T>;
/**
 * A successful JSON-RPC response object.
 *
 * @template Result - The type of the result.
 */
export declare type JsonRpcSuccess<Result = unknown> = {
    id: JsonRpcId;
    jsonrpc: JsonRpcVersion2;
    result: Result;
};
/**
 * A failed JSON-RPC response object.
 */
export declare type JsonRpcFailure = {
    id: JsonRpcId;
    jsonrpc: JsonRpcVersion2;
    error: JsonRpcError;
};
/**
 * A JSON-RPC response object. Must be checked to determine whether it's a
 * success or failure.
 *
 * @template Result - The type of the result.
 */
export declare type JsonRpcResponse<Result = unknown> = JsonRpcSuccess<Result> | JsonRpcFailure;
/**
 * Type guard to narrow a JsonRpcResponse object to a success (or failure).
 *
 * @param response - The response object to check.
 * @returns Whether the response object is a success, i.e. has a `result`
 * property.
 */
export declare function isJsonRpcSuccess<Result>(response: JsonRpcResponse<Result>): response is JsonRpcSuccess<Result>;
/**
 * Type assertion to narrow a JsonRpcResponse object to a success (or failure).
 *
 * @param response - The response object to check.
 */
export declare function assertIsJsonRpcSuccess<T>(response: JsonRpcResponse<T>): asserts response is JsonRpcSuccess<T>;
/**
 * Type guard to narrow a JsonRpcResponse object to a failure (or success).
 *
 * @param response - The response object to check.
 * @returns Whether the response object is a failure, i.e. has an `error`
 * property.
 */
export declare function isJsonRpcFailure(response: JsonRpcResponse<unknown>): response is JsonRpcFailure;
/**
 * Type assertion to narrow a JsonRpcResponse object to a failure (or success).
 *
 * @param response - The response object to check.
 */
export declare function assertIsJsonRpcFailure(response: JsonRpcResponse<unknown>): asserts response is JsonRpcFailure;
declare type JsonRpcValidatorOptions = {
    permitEmptyString?: boolean;
    permitFractions?: boolean;
    permitNull?: boolean;
};
/**
 * Gets a function for validating JSON-RPC request / response `id` values.
 *
 * By manipulating the options of this factory, you can control the behavior
 * of the resulting validator for some edge cases. This is useful because e.g.
 * `null` should sometimes but not always be permitted.
 *
 * Note that the empty string (`''`) is always permitted by the JSON-RPC
 * specification, but that kind of sucks and you may want to forbid it in some
 * instances anyway.
 *
 * For more details, see the
 * [JSON-RPC Specification](https://www.jsonrpc.org/specification).
 *
 * @param options - An options object.
 * @param options.permitEmptyString - Whether the empty string (i.e. `''`)
 * should be treated as a valid ID. Default: `true`
 * @param options.permitFractions - Whether fractional numbers (e.g. `1.2`)
 * should be treated as valid IDs. Default: `false`
 * @param options.permitNull - Whether `null` should be treated as a valid ID.
 * Default: `true`
 * @returns The JSON-RPC ID validator function.
 */
export declare function getJsonRpcIdValidator(options?: JsonRpcValidatorOptions): (id: unknown) => id is JsonRpcId;
/**
 * Checks whether a value is JSON serializable and counts the total number
 * of bytes needed to store the serialized version of the value.
 *
 * @param jsObject - Potential JSON serializable object.
 * @param skipSizingProcess - Skip JSON size calculation (default: false).
 * @returns Tuple [isValid, plainTextSizeInBytes] containing a boolean that signals whether
 * the value was serializable and a number of bytes that it will use when serialized to JSON.
 */
export declare function validateJsonAndGetSize(jsObject: unknown, skipSizingProcess?: boolean): [isValid: boolean, plainTextSizeInBytes: number];
export {};
