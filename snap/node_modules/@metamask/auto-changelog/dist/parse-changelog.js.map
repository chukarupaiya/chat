{"version":3,"file":"parse-changelog.js","sourceRoot":"","sources":["../src/parse-changelog.ts"],"names":[],"mappings":"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","sourcesContent":["import Changelog from './changelog';\nimport { ChangeCategory, unreleased } from './constants';\n\nfunction truncated(line: string) {\n  return line.length > 80 ? `${line.slice(0, 80)}...` : line;\n}\n\nfunction isValidChangeCategory(category: string): category is ChangeCategory {\n  return ChangeCategory[category as ChangeCategory] !== undefined;\n}\n\n/**\n * Constructs a Changelog instance that represents the given changelog, which\n * is parsed for release and change information.\n * @param options\n * @param options.changelogContent - The changelog to parse\n * @param options.repoUrl - The GitHub repository URL for the current project.\n * @returns A changelog instance that reflects the changelog text provided.\n */\nexport function parseChangelog({\n  changelogContent,\n  repoUrl,\n}: {\n  changelogContent: string;\n  repoUrl: string;\n}) {\n  const changelogLines = changelogContent.split('\\n');\n  const changelog = new Changelog({ repoUrl });\n\n  const unreleasedHeaderIndex = changelogLines.indexOf(`## [${unreleased}]`);\n  if (unreleasedHeaderIndex === -1) {\n    throw new Error(`Failed to find ${unreleased} header`);\n  }\n  const unreleasedLinkReferenceDefinition = changelogLines.findIndex((line) => {\n    return line.startsWith(`[${unreleased}]:`);\n  });\n  if (unreleasedLinkReferenceDefinition === -1) {\n    throw new Error(`Failed to find ${unreleased} link reference definition`);\n  }\n\n  const contentfulChangelogLines = changelogLines.slice(\n    unreleasedHeaderIndex + 1,\n    unreleasedLinkReferenceDefinition,\n  );\n\n  let mostRecentRelease: string;\n  let mostRecentCategory: ChangeCategory | undefined | null;\n  let currentChangeEntry: string | undefined;\n\n  /**\n   * Finalize a change entry, adding it to the changelog.\n   *\n   * This is required because change entries can span multiple lines.\n   *\n   * @param options\n   * @param options.removeTrailingNewline - Indicates that the trailing newline\n   * is not a part of the change description, and should therefore be removed.\n   */\n  function finalizePreviousChange({\n    removeTrailingNewline = false,\n  }: {\n    removeTrailingNewline?: boolean;\n  } = {}) {\n    if (!currentChangeEntry) {\n      return;\n    }\n    // This should never happen in practice, because `mostRecentCategory` is\n    // guaranteed to be set if `currentChangeEntry` is set.\n    /* istanbul ignore next */\n    if (!mostRecentCategory) {\n      throw new Error('Cannot finalize change without most recent category.');\n    }\n    if (removeTrailingNewline && currentChangeEntry.endsWith('\\n')) {\n      currentChangeEntry = currentChangeEntry.slice(\n        0,\n        currentChangeEntry.length - 1,\n      );\n    }\n    changelog.addChange({\n      addToStart: false,\n      category: mostRecentCategory,\n      description: currentChangeEntry,\n      version: mostRecentRelease,\n    });\n    currentChangeEntry = undefined;\n  }\n\n  for (const line of contentfulChangelogLines) {\n    if (line.startsWith('## [')) {\n      const results = line.match(\n        /^## \\[(\\d+\\.\\d+\\.\\d+)\\](?: - (\\d\\d\\d\\d-\\d\\d-\\d\\d))?(?: \\[(\\w+)\\])?/u,\n      );\n      if (results === null) {\n        throw new Error(`Malformed release header: '${truncated(line)}'`);\n      }\n      // Trailing newline removed because the release section is expected to\n      // be prefixed by a newline.\n      finalizePreviousChange({\n        removeTrailingNewline: true,\n      });\n      mostRecentRelease = results[1];\n      mostRecentCategory = undefined;\n      const date = results[2];\n      const status = results[3];\n      changelog.addRelease({\n        addToStart: false,\n        date,\n        status,\n        version: mostRecentRelease,\n      });\n    } else if (line.startsWith('### ')) {\n      const results = line.match(/^### (\\w+)$\\b/u);\n      if (results === null) {\n        throw new Error(`Malformed category header: '${truncated(line)}'`);\n      }\n      const isFirstCategory = mostRecentCategory === null;\n      finalizePreviousChange({\n        removeTrailingNewline: !isFirstCategory,\n      });\n      if (!isValidChangeCategory(results[1])) {\n        throw new Error(`Invalid change category: '${results[1]}'`);\n      }\n      mostRecentCategory = results[1];\n    } else if (line.startsWith('- ')) {\n      if (!mostRecentCategory) {\n        throw new Error(`Category missing for change: '${truncated(line)}'`);\n      }\n      const description = line.slice(2);\n      finalizePreviousChange();\n      currentChangeEntry = description;\n    } else if (currentChangeEntry) {\n      currentChangeEntry += `\\n${line}`;\n    } else if (line === '') {\n      continue;\n    } else {\n      throw new Error(`Unrecognized line: '${truncated(line)}'`);\n    }\n  }\n  // Trailing newline removed because the reference link definition section is\n  // expected to be separated by a newline.\n  finalizePreviousChange({ removeTrailingNewline: true });\n\n  return changelog;\n}\n"]}