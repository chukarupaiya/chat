import { BasePostMessageStream } from '@metamask/post-message-stream';
import { Job, AbstractExecutionService, SetupSnapProvider } from '../AbstractExecutionService';
import { ExecutionServiceMessenger } from '../ExecutionService';
declare type IframeExecutionEnvironmentServiceArgs = {
    setupSnapProvider: SetupSnapProvider;
    iframeUrl: URL;
    messenger: ExecutionServiceMessenger;
};
export declare class IframeExecutionService extends AbstractExecutionService<Window> {
    iframeUrl: URL;
    constructor({ setupSnapProvider, iframeUrl, messenger, }: IframeExecutionEnvironmentServiceArgs);
    protected _terminate(jobWrapper: Job<Window>): void;
    protected _initEnvStream(jobId: string): Promise<{
        worker: Window;
        stream: BasePostMessageStream;
    }>;
    /**
     * Creates the iframe to be used as the execution environment. This may run
     * forever if the iframe never loads, but the promise should be wrapped in
     * an initialization timeout in the SnapController.
     *
     * @param uri - The iframe URI.
     * @param jobId - The job id.
     * @returns A promise that resolves to the contentWindow of the iframe.
     */
    private _createWindow;
}
export {};
