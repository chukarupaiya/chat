"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.bundle = void 0;
const browserify_1 = __importDefault(require("browserify"));
const snaps_browserify_plugin_1 = __importDefault(require("@metamask/snaps-browserify-plugin"));
const builders_1 = require("../../builders");
const utils_1 = require("./utils");
// We need to statically import all Browserify transforms and all Babel presets
// and plugins, and calling `require` is the sanest way to do that.
/* eslint-disable @typescript-eslint/no-require-imports, @typescript-eslint/no-var-requires, node/global-require */
/**
 * Builds a Snap bundle JS file from its JavaScript source.
 *
 * @param src - The source file path.
 * @param dest - The destination file path.
 * @param argv - Arguments as an object generated by `yargs`.
 * @param argv.sourceMaps - Whether to output sourcemaps.
 * @param argv.stripComments - Whether to remove comments from code.
 * @param argv.transpilationMode - The Babel transpilation mode.
 * @param bundlerTransform - An optional function which can be used to transform
 * the Browserify instance, e.g., adding a custom transform or plugin.
 */
function bundle(src, dest, argv, bundlerTransform) {
    const { sourceMaps: debug, transpilationMode } = argv;
    const babelifyOptions = (0, utils_1.processDependencies)(argv);
    return new Promise((resolve, _reject) => {
        const bundler = (0, browserify_1.default)(src, {
            debug,
            extensions: ['.js', '.ts'],
            // Standalone is required to properly support Snaps using module.exports
            standalone: '<snap>',
        });
        if (transpilationMode !== builders_1.TranspilationModes.none) {
            bundler.transform(require('babelify'), Object.assign({ global: transpilationMode === builders_1.TranspilationModes.localAndDeps, extensions: ['.js', '.ts'], presets: [
                    require('@babel/preset-typescript'),
                    [
                        require('@babel/preset-env'),
                        {
                            targets: {
                                browsers: ['chrome >= 66', 'firefox >= 68'],
                            },
                        },
                    ],
                ], plugins: [
                    require('@babel/plugin-transform-runtime'),
                    require('@babel/plugin-proposal-class-properties'),
                    require('@babel/plugin-proposal-object-rest-spread'),
                    require('@babel/plugin-proposal-optional-chaining'),
                    require('@babel/plugin-proposal-nullish-coalescing-operator'),
                ] }, babelifyOptions));
        }
        bundlerTransform === null || bundlerTransform === void 0 ? void 0 : bundlerTransform(bundler);
        bundler.plugin(snaps_browserify_plugin_1.default, {
            stripComments: argv.stripComments,
            transformHtmlComments: argv.transformHtmlComments,
        });
        bundler.bundle(async (bundleError, bundleBuffer) => await (0, utils_1.writeBundleFile)({
            bundleError,
            bundleBuffer,
            src,
            dest,
            resolve,
        }));
    });
}
exports.bundle = bundle;
//# sourceMappingURL=bundle.js.map