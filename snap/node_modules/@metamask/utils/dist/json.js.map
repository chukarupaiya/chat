{"version":3,"file":"json.js","sourceRoot":"","sources":["../src/json.ts"],"names":[],"mappings":"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","sourcesContent":["import deepEqual from 'fast-deep-equal';\nimport {\n  calculateNumberSize,\n  calculateStringSize,\n  hasProperty,\n  isPlainObject,\n  JsonSize,\n} from './misc';\n\n/**\n * Any JSON-compatible value.\n */\nexport type Json =\n  | null\n  | boolean\n  | number\n  | string\n  | Json[]\n  | { [prop: string]: Json };\n\n/**\n * Type guard for {@link Json}.\n *\n * @param value - The value to check.\n * @returns Whether the value is valid JSON.\n */\nexport function isValidJson(value: unknown): value is Json {\n  try {\n    return deepEqual(value, JSON.parse(JSON.stringify(value)));\n  } catch (_) {\n    return false;\n  }\n}\n\n/**\n * The string '2.0'.\n */\nexport const jsonrpc2 = '2.0' as const;\n\n/**\n * A String specifying the version of the JSON-RPC protocol.\n * MUST be exactly \"2.0\".\n */\nexport type JsonRpcVersion2 = typeof jsonrpc2;\n\n/**\n * An identifier established by the Client that MUST contain a String, Number,\n * or NULL value if included. If it is not included it is assumed to be a\n * notification. The value SHOULD normally not be Null and Numbers SHOULD\n * NOT contain fractional parts.\n */\nexport type JsonRpcId = number | string | null;\n\n/**\n * A JSON-RPC error object.\n */\nexport type JsonRpcError = {\n  code: number;\n  message: string;\n  data?: unknown;\n  stack?: string;\n};\n\n/**\n * A JSON-RPC request object.\n *\n * @template Params - The type of the params.\n */\nexport type JsonRpcRequest<Params> = {\n  id: JsonRpcId;\n  jsonrpc: JsonRpcVersion2;\n  method: string;\n  params?: Params;\n};\n\n/**\n * A JSON-RPC notification object.\n *\n * @template Params - The type of the params.\n */\nexport type JsonRpcNotification<Params> = {\n  jsonrpc: JsonRpcVersion2;\n  method: string;\n  params?: Params;\n};\n\n/**\n * Type guard to narrow a JSON-RPC request or notification object to a\n * notification.\n *\n * @param requestOrNotification - The JSON-RPC request or notification to check.\n * @returns Whether the specified JSON-RPC message is a notification.\n */\nexport function isJsonRpcNotification<T>(\n  requestOrNotification: JsonRpcNotification<T> | JsonRpcRequest<T>,\n): requestOrNotification is JsonRpcNotification<T> {\n  return !hasProperty(requestOrNotification, 'id');\n}\n\n/**\n * Assertion type guard to narrow a JSON-RPC request or notification object to a\n * notification.\n *\n * @param requestOrNotification - The JSON-RPC request or notification to check.\n */\nexport function assertIsJsonRpcNotification<T>(\n  requestOrNotification: JsonRpcNotification<T> | JsonRpcRequest<T>,\n): asserts requestOrNotification is JsonRpcNotification<T> {\n  if (!isJsonRpcNotification(requestOrNotification)) {\n    throw new Error('Not a JSON-RPC notification.');\n  }\n}\n\n/**\n * Type guard to narrow a JSON-RPC request or notification object to a request.\n *\n * @param requestOrNotification - The JSON-RPC request or notification to check.\n * @returns Whether the specified JSON-RPC message is a request.\n */\nexport function isJsonRpcRequest<T>(\n  requestOrNotification: JsonRpcNotification<T> | JsonRpcRequest<T>,\n): requestOrNotification is JsonRpcRequest<T> {\n  return hasProperty(requestOrNotification, 'id');\n}\n\n/**\n * Assertion type guard to narrow a JSON-RPC request or notification object to a\n * request.\n *\n * @param requestOrNotification - The JSON-RPC request or notification to check.\n */\nexport function assertIsJsonRpcRequest<T>(\n  requestOrNotification: JsonRpcNotification<T> | JsonRpcRequest<T>,\n): asserts requestOrNotification is JsonRpcRequest<T> {\n  if (!isJsonRpcRequest(requestOrNotification)) {\n    throw new Error('Not a JSON-RPC request.');\n  }\n}\n\n/**\n * A successful JSON-RPC response object.\n *\n * @template Result - The type of the result.\n */\nexport type JsonRpcSuccess<Result = unknown> = {\n  id: JsonRpcId;\n  jsonrpc: JsonRpcVersion2;\n  result: Result;\n};\n\n/**\n * A failed JSON-RPC response object.\n */\nexport type JsonRpcFailure = {\n  id: JsonRpcId;\n  jsonrpc: JsonRpcVersion2;\n  error: JsonRpcError;\n};\n\n/**\n * A JSON-RPC response object. Must be checked to determine whether it's a\n * success or failure.\n *\n * @template Result - The type of the result.\n */\nexport type JsonRpcResponse<Result = unknown> =\n  | JsonRpcSuccess<Result>\n  | JsonRpcFailure;\n\n/**\n * Type guard to narrow a JsonRpcResponse object to a success (or failure).\n *\n * @param response - The response object to check.\n * @returns Whether the response object is a success, i.e. has a `result`\n * property.\n */\nexport function isJsonRpcSuccess<Result>(\n  response: JsonRpcResponse<Result>,\n): response is JsonRpcSuccess<Result> {\n  return hasProperty(response, 'result');\n}\n\n/**\n * Type assertion to narrow a JsonRpcResponse object to a success (or failure).\n *\n * @param response - The response object to check.\n */\nexport function assertIsJsonRpcSuccess<T>(\n  response: JsonRpcResponse<T>,\n): asserts response is JsonRpcSuccess<T> {\n  if (!isJsonRpcSuccess(response)) {\n    throw new Error('Not a successful JSON-RPC response.');\n  }\n}\n\n/**\n * Type guard to narrow a JsonRpcResponse object to a failure (or success).\n *\n * @param response - The response object to check.\n * @returns Whether the response object is a failure, i.e. has an `error`\n * property.\n */\nexport function isJsonRpcFailure(\n  response: JsonRpcResponse<unknown>,\n): response is JsonRpcFailure {\n  return hasProperty(response, 'error');\n}\n\n/**\n * Type assertion to narrow a JsonRpcResponse object to a failure (or success).\n *\n * @param response - The response object to check.\n */\nexport function assertIsJsonRpcFailure(\n  response: JsonRpcResponse<unknown>,\n): asserts response is JsonRpcFailure {\n  if (!isJsonRpcFailure(response)) {\n    throw new Error('Not a failed JSON-RPC response.');\n  }\n}\n\ntype JsonRpcValidatorOptions = {\n  permitEmptyString?: boolean;\n  permitFractions?: boolean;\n  permitNull?: boolean;\n};\n\n/**\n * Gets a function for validating JSON-RPC request / response `id` values.\n *\n * By manipulating the options of this factory, you can control the behavior\n * of the resulting validator for some edge cases. This is useful because e.g.\n * `null` should sometimes but not always be permitted.\n *\n * Note that the empty string (`''`) is always permitted by the JSON-RPC\n * specification, but that kind of sucks and you may want to forbid it in some\n * instances anyway.\n *\n * For more details, see the\n * [JSON-RPC Specification](https://www.jsonrpc.org/specification).\n *\n * @param options - An options object.\n * @param options.permitEmptyString - Whether the empty string (i.e. `''`)\n * should be treated as a valid ID. Default: `true`\n * @param options.permitFractions - Whether fractional numbers (e.g. `1.2`)\n * should be treated as valid IDs. Default: `false`\n * @param options.permitNull - Whether `null` should be treated as a valid ID.\n * Default: `true`\n * @returns The JSON-RPC ID validator function.\n */\nexport function getJsonRpcIdValidator(options?: JsonRpcValidatorOptions) {\n  const { permitEmptyString, permitFractions, permitNull } = {\n    permitEmptyString: true,\n    permitFractions: false,\n    permitNull: true,\n    ...options,\n  };\n\n  /**\n   * Type guard for {@link JsonRpcId}.\n   *\n   * @param id - The JSON-RPC ID value to check.\n   * @returns Whether the given ID is valid per the options given to the\n   * factory.\n   */\n  const isValidJsonRpcId = (id: unknown): id is JsonRpcId => {\n    return Boolean(\n      (typeof id === 'number' && (permitFractions || Number.isInteger(id))) ||\n        (typeof id === 'string' && (permitEmptyString || id.length > 0)) ||\n        (permitNull && id === null),\n    );\n  };\n  return isValidJsonRpcId;\n}\n\n/**\n * Checks whether a value is JSON serializable and counts the total number\n * of bytes needed to store the serialized version of the value.\n *\n * @param jsObject - Potential JSON serializable object.\n * @param skipSizingProcess - Skip JSON size calculation (default: false).\n * @returns Tuple [isValid, plainTextSizeInBytes] containing a boolean that signals whether\n * the value was serializable and a number of bytes that it will use when serialized to JSON.\n */\nexport function validateJsonAndGetSize(\n  jsObject: unknown,\n  skipSizingProcess = false,\n): [isValid: boolean, plainTextSizeInBytes: number] {\n  const seenObjects = new Set();\n  /**\n   * Checks whether a value is JSON serializable and counts the total number\n   * of bytes needed to store the serialized version of the value.\n   *\n   * This function assumes the encoding of the JSON is done in UTF-8.\n   *\n   * @param value - Potential JSON serializable value.\n   * @param skipSizing - Skip JSON size calculation (default: false).\n   * @returns Tuple [isValid, plainTextSizeInBytes] containing a boolean that signals whether\n   * the value was serializable and a number of bytes that it will use when serialized to JSON.\n   */\n  function getJsonSerializableInfo(\n    value: unknown,\n    skipSizing: boolean,\n  ): [isValid: boolean, plainTextSizeInBytes: number] {\n    if (value === undefined) {\n      // Return zero for undefined, since these are omitted from JSON serialization\n      return [true, 0];\n    } else if (value === null) {\n      // Return already specified constant size for null (special object)\n      return [true, skipSizing ? 0 : JsonSize.Null];\n    }\n\n    // Check and calculate sizes for basic (and some special) types\n    const typeOfValue = typeof value;\n    try {\n      if (typeOfValue === 'function') {\n        return [false, 0];\n      } else if (typeOfValue === 'string' || value instanceof String) {\n        return [\n          true,\n          skipSizing\n            ? 0\n            : calculateStringSize(value as string) + JsonSize.Quote * 2,\n        ];\n      } else if (typeOfValue === 'boolean' || value instanceof Boolean) {\n        if (skipSizing) {\n          return [true, 0];\n        }\n        // eslint-disable-next-line eqeqeq\n        return [true, value == true ? JsonSize.True : JsonSize.False];\n      } else if (typeOfValue === 'number' || value instanceof Number) {\n        if (skipSizing) {\n          return [true, 0];\n        }\n        return [true, calculateNumberSize(value as number)];\n      } else if (value instanceof Date) {\n        if (skipSizing) {\n          return [true, 0];\n        }\n        return [\n          true,\n          // Note: Invalid dates will serialize to null\n          isNaN(value.getDate())\n            ? JsonSize.Null\n            : JsonSize.Date + JsonSize.Quote * 2,\n        ];\n      }\n    } catch (_) {\n      return [false, 0];\n    }\n\n    // If object is not plain and cannot be serialized properly,\n    // stop here and return false for serialization\n    if (!isPlainObject(value) && !Array.isArray(value)) {\n      return [false, 0];\n    }\n\n    // Circular object detection (handling)\n    // Check if the same object already exists\n    if (seenObjects.has(value)) {\n      return [false, 0];\n    }\n    // Add new object to the seen objects set\n    // Only the plain objects should be added (Primitive types are skipped)\n    seenObjects.add(value);\n\n    // Continue object decomposition\n    try {\n      return [\n        true,\n        Object.entries(value).reduce(\n          (sum, [key, nestedValue], idx, arr) => {\n            // Recursively process next nested object or primitive type\n            // eslint-disable-next-line prefer-const\n            let [valid, size] = getJsonSerializableInfo(\n              nestedValue,\n              skipSizing,\n            );\n            if (!valid) {\n              throw new Error(\n                'JSON validation did not pass. Validation process stopped.',\n              );\n            }\n\n            // Circular object detection\n            // Once a child node is visited and processed remove it from the set.\n            // This will prevent false positives with the same adjacent objects.\n            seenObjects.delete(value);\n\n            if (skipSizing) {\n              return 0;\n            }\n\n            // If the size is 0, the value is undefined and undefined in an array\n            // when serialized will be replaced with null\n            if (size === 0 && Array.isArray(value)) {\n              size = JsonSize.Null;\n            }\n\n            // If the size is 0, that means the object is undefined and\n            // the rest of the object structure will be omitted\n            if (size === 0) {\n              return sum;\n            }\n\n            // Objects will have be serialized with \"key\": value,\n            // therefore we include the key in the calculation here\n            const keySize = Array.isArray(value)\n              ? 0\n              : key.length + JsonSize.Comma + JsonSize.Colon * 2;\n\n            const separator = idx < arr.length - 1 ? JsonSize.Comma : 0;\n\n            return sum + keySize + size + separator;\n          },\n          // Starts at 2 because the serialized JSON string data (plain text)\n          // will minimally contain {}/[]\n          skipSizing ? 0 : JsonSize.Wrapper * 2,\n        ),\n      ];\n    } catch (_) {\n      return [false, 0];\n    }\n  }\n\n  return getJsonSerializableInfo(jsObject, skipSizingProcess);\n}\n"]}